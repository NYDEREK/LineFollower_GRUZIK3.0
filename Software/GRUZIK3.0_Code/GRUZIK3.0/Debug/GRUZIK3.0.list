
GRUZIK3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001712c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba0  08017310  08017310  00018310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017eb0  08017eb0  000191f0  2**0
                  CONTENTS
  4 .ARM          00000008  08017eb0  08017eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017eb8  08017eb8  000191f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017eb8  08017eb8  00018eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017ebc  08017ebc  00018ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08017ec0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006b58  200001f0  080180b0  000191f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006d48  080180b0  00019d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000191f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000287a6  00000000  00000000  00019220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005729  00000000  00000000  000419c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002160  00000000  00000000  000470f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019c6  00000000  00000000  00049250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008447  00000000  00000000  0004ac16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e8d3  00000000  00000000  0005305d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d726  00000000  00000000  00081930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019f056  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a784  00000000  00000000  0019f09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001a9820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080172f4 	.word	0x080172f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	080172f4 	.word	0x080172f4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9be 	b.w	800108c <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	468e      	mov	lr, r1
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	4688      	mov	r8, r1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d14a      	bne.n	8000e3a <__udivmoddi4+0xa6>
 8000da4:	428a      	cmp	r2, r1
 8000da6:	4617      	mov	r7, r2
 8000da8:	d962      	bls.n	8000e70 <__udivmoddi4+0xdc>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	b14e      	cbz	r6, 8000dc4 <__udivmoddi4+0x30>
 8000db0:	f1c6 0320 	rsb	r3, r6, #32
 8000db4:	fa01 f806 	lsl.w	r8, r1, r6
 8000db8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dbc:	40b7      	lsls	r7, r6
 8000dbe:	ea43 0808 	orr.w	r8, r3, r8
 8000dc2:	40b4      	lsls	r4, r6
 8000dc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dd0:	0c23      	lsrs	r3, r4, #16
 8000dd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dda:	fb01 f20c 	mul.w	r2, r1, ip
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x62>
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000de8:	f080 80ea 	bcs.w	8000fc0 <__udivmoddi4+0x22c>
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f240 80e7 	bls.w	8000fc0 <__udivmoddi4+0x22c>
 8000df2:	3902      	subs	r1, #2
 8000df4:	443b      	add	r3, r7
 8000df6:	1a9a      	subs	r2, r3, r2
 8000df8:	b2a3      	uxth	r3, r4
 8000dfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e0a:	459c      	cmp	ip, r3
 8000e0c:	d909      	bls.n	8000e22 <__udivmoddi4+0x8e>
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e14:	f080 80d6 	bcs.w	8000fc4 <__udivmoddi4+0x230>
 8000e18:	459c      	cmp	ip, r3
 8000e1a:	f240 80d3 	bls.w	8000fc4 <__udivmoddi4+0x230>
 8000e1e:	443b      	add	r3, r7
 8000e20:	3802      	subs	r0, #2
 8000e22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e26:	eba3 030c 	sub.w	r3, r3, ip
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	b11d      	cbz	r5, 8000e36 <__udivmoddi4+0xa2>
 8000e2e:	40f3      	lsrs	r3, r6
 8000e30:	2200      	movs	r2, #0
 8000e32:	e9c5 3200 	strd	r3, r2, [r5]
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d905      	bls.n	8000e4a <__udivmoddi4+0xb6>
 8000e3e:	b10d      	cbz	r5, 8000e44 <__udivmoddi4+0xb0>
 8000e40:	e9c5 0100 	strd	r0, r1, [r5]
 8000e44:	2100      	movs	r1, #0
 8000e46:	4608      	mov	r0, r1
 8000e48:	e7f5      	b.n	8000e36 <__udivmoddi4+0xa2>
 8000e4a:	fab3 f183 	clz	r1, r3
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	d146      	bne.n	8000ee0 <__udivmoddi4+0x14c>
 8000e52:	4573      	cmp	r3, lr
 8000e54:	d302      	bcc.n	8000e5c <__udivmoddi4+0xc8>
 8000e56:	4282      	cmp	r2, r0
 8000e58:	f200 8105 	bhi.w	8001066 <__udivmoddi4+0x2d2>
 8000e5c:	1a84      	subs	r4, r0, r2
 8000e5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	4690      	mov	r8, r2
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d0e5      	beq.n	8000e36 <__udivmoddi4+0xa2>
 8000e6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e6e:	e7e2      	b.n	8000e36 <__udivmoddi4+0xa2>
 8000e70:	2a00      	cmp	r2, #0
 8000e72:	f000 8090 	beq.w	8000f96 <__udivmoddi4+0x202>
 8000e76:	fab2 f682 	clz	r6, r2
 8000e7a:	2e00      	cmp	r6, #0
 8000e7c:	f040 80a4 	bne.w	8000fc8 <__udivmoddi4+0x234>
 8000e80:	1a8a      	subs	r2, r1, r2
 8000e82:	0c03      	lsrs	r3, r0, #16
 8000e84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e88:	b280      	uxth	r0, r0
 8000e8a:	b2bc      	uxth	r4, r7
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x11e>
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x11c>
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	f200 80e0 	bhi.w	8001070 <__udivmoddi4+0x2dc>
 8000eb0:	46c4      	mov	ip, r8
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000eb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ebc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ec0:	fb02 f404 	mul.w	r4, r2, r4
 8000ec4:	429c      	cmp	r4, r3
 8000ec6:	d907      	bls.n	8000ed8 <__udivmoddi4+0x144>
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ece:	d202      	bcs.n	8000ed6 <__udivmoddi4+0x142>
 8000ed0:	429c      	cmp	r4, r3
 8000ed2:	f200 80ca 	bhi.w	800106a <__udivmoddi4+0x2d6>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	1b1b      	subs	r3, r3, r4
 8000eda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ede:	e7a5      	b.n	8000e2c <__udivmoddi4+0x98>
 8000ee0:	f1c1 0620 	rsb	r6, r1, #32
 8000ee4:	408b      	lsls	r3, r1
 8000ee6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eea:	431f      	orrs	r7, r3
 8000eec:	fa0e f401 	lsl.w	r4, lr, r1
 8000ef0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ef4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ef8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000efc:	4323      	orrs	r3, r4
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	fa1f fc87 	uxth.w	ip, r7
 8000f06:	fbbe f0f9 	udiv	r0, lr, r9
 8000f0a:	0c1c      	lsrs	r4, r3, #16
 8000f0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f1e:	d909      	bls.n	8000f34 <__udivmoddi4+0x1a0>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f26:	f080 809c 	bcs.w	8001062 <__udivmoddi4+0x2ce>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	f240 8099 	bls.w	8001062 <__udivmoddi4+0x2ce>
 8000f30:	3802      	subs	r0, #2
 8000f32:	443c      	add	r4, r7
 8000f34:	eba4 040e 	sub.w	r4, r4, lr
 8000f38:	fa1f fe83 	uxth.w	lr, r3
 8000f3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f40:	fb09 4413 	mls	r4, r9, r3, r4
 8000f44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f4c:	45a4      	cmp	ip, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x1ce>
 8000f50:	193c      	adds	r4, r7, r4
 8000f52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f56:	f080 8082 	bcs.w	800105e <__udivmoddi4+0x2ca>
 8000f5a:	45a4      	cmp	ip, r4
 8000f5c:	d97f      	bls.n	800105e <__udivmoddi4+0x2ca>
 8000f5e:	3b02      	subs	r3, #2
 8000f60:	443c      	add	r4, r7
 8000f62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f66:	eba4 040c 	sub.w	r4, r4, ip
 8000f6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f6e:	4564      	cmp	r4, ip
 8000f70:	4673      	mov	r3, lr
 8000f72:	46e1      	mov	r9, ip
 8000f74:	d362      	bcc.n	800103c <__udivmoddi4+0x2a8>
 8000f76:	d05f      	beq.n	8001038 <__udivmoddi4+0x2a4>
 8000f78:	b15d      	cbz	r5, 8000f92 <__udivmoddi4+0x1fe>
 8000f7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f82:	fa04 f606 	lsl.w	r6, r4, r6
 8000f86:	fa22 f301 	lsr.w	r3, r2, r1
 8000f8a:	431e      	orrs	r6, r3
 8000f8c:	40cc      	lsrs	r4, r1
 8000f8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f92:	2100      	movs	r1, #0
 8000f94:	e74f      	b.n	8000e36 <__udivmoddi4+0xa2>
 8000f96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f9a:	0c01      	lsrs	r1, r0, #16
 8000f9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fa0:	b280      	uxth	r0, r0
 8000fa2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4638      	mov	r0, r7
 8000faa:	463c      	mov	r4, r7
 8000fac:	46b8      	mov	r8, r7
 8000fae:	46be      	mov	lr, r7
 8000fb0:	2620      	movs	r6, #32
 8000fb2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fb6:	eba2 0208 	sub.w	r2, r2, r8
 8000fba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fbe:	e766      	b.n	8000e8e <__udivmoddi4+0xfa>
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	e718      	b.n	8000df6 <__udivmoddi4+0x62>
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	e72c      	b.n	8000e22 <__udivmoddi4+0x8e>
 8000fc8:	f1c6 0220 	rsb	r2, r6, #32
 8000fcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fd0:	40b7      	lsls	r7, r6
 8000fd2:	40b1      	lsls	r1, r6
 8000fd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fe2:	b2bc      	uxth	r4, r7
 8000fe4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fe8:	0c11      	lsrs	r1, r2, #16
 8000fea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fee:	fb08 f904 	mul.w	r9, r8, r4
 8000ff2:	40b0      	lsls	r0, r6
 8000ff4:	4589      	cmp	r9, r1
 8000ff6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ffa:	b280      	uxth	r0, r0
 8000ffc:	d93e      	bls.n	800107c <__udivmoddi4+0x2e8>
 8000ffe:	1879      	adds	r1, r7, r1
 8001000:	f108 3cff 	add.w	ip, r8, #4294967295
 8001004:	d201      	bcs.n	800100a <__udivmoddi4+0x276>
 8001006:	4589      	cmp	r9, r1
 8001008:	d81f      	bhi.n	800104a <__udivmoddi4+0x2b6>
 800100a:	eba1 0109 	sub.w	r1, r1, r9
 800100e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001012:	fb09 f804 	mul.w	r8, r9, r4
 8001016:	fb0e 1119 	mls	r1, lr, r9, r1
 800101a:	b292      	uxth	r2, r2
 800101c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001020:	4542      	cmp	r2, r8
 8001022:	d229      	bcs.n	8001078 <__udivmoddi4+0x2e4>
 8001024:	18ba      	adds	r2, r7, r2
 8001026:	f109 31ff 	add.w	r1, r9, #4294967295
 800102a:	d2c4      	bcs.n	8000fb6 <__udivmoddi4+0x222>
 800102c:	4542      	cmp	r2, r8
 800102e:	d2c2      	bcs.n	8000fb6 <__udivmoddi4+0x222>
 8001030:	f1a9 0102 	sub.w	r1, r9, #2
 8001034:	443a      	add	r2, r7
 8001036:	e7be      	b.n	8000fb6 <__udivmoddi4+0x222>
 8001038:	45f0      	cmp	r8, lr
 800103a:	d29d      	bcs.n	8000f78 <__udivmoddi4+0x1e4>
 800103c:	ebbe 0302 	subs.w	r3, lr, r2
 8001040:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001044:	3801      	subs	r0, #1
 8001046:	46e1      	mov	r9, ip
 8001048:	e796      	b.n	8000f78 <__udivmoddi4+0x1e4>
 800104a:	eba7 0909 	sub.w	r9, r7, r9
 800104e:	4449      	add	r1, r9
 8001050:	f1a8 0c02 	sub.w	ip, r8, #2
 8001054:	fbb1 f9fe 	udiv	r9, r1, lr
 8001058:	fb09 f804 	mul.w	r8, r9, r4
 800105c:	e7db      	b.n	8001016 <__udivmoddi4+0x282>
 800105e:	4673      	mov	r3, lr
 8001060:	e77f      	b.n	8000f62 <__udivmoddi4+0x1ce>
 8001062:	4650      	mov	r0, sl
 8001064:	e766      	b.n	8000f34 <__udivmoddi4+0x1a0>
 8001066:	4608      	mov	r0, r1
 8001068:	e6fd      	b.n	8000e66 <__udivmoddi4+0xd2>
 800106a:	443b      	add	r3, r7
 800106c:	3a02      	subs	r2, #2
 800106e:	e733      	b.n	8000ed8 <__udivmoddi4+0x144>
 8001070:	f1ac 0c02 	sub.w	ip, ip, #2
 8001074:	443b      	add	r3, r7
 8001076:	e71c      	b.n	8000eb2 <__udivmoddi4+0x11e>
 8001078:	4649      	mov	r1, r9
 800107a:	e79c      	b.n	8000fb6 <__udivmoddi4+0x222>
 800107c:	eba1 0109 	sub.w	r1, r1, r9
 8001080:	46c4      	mov	ip, r8
 8001082:	fbb1 f9fe 	udiv	r9, r1, lr
 8001086:	fb09 f804 	mul.w	r8, r9, r4
 800108a:	e7c4      	b.n	8001016 <__udivmoddi4+0x282>

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <LowPassFilter_Init>:
 */
#include "main.h"
#include"LowPassFilter.h"

void LowPassFilter_Init(LowPassFilter_t *LPF, float alpha)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	ed87 0a00 	vstr	s0, [r7]
	LPF->alpha = alpha;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LowPassFilter_Update>:
float LowPassFilter_Update(LowPassFilter_t *LPF, float input)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	ed87 0a00 	vstr	s0, [r7]
	/*Standard low pass filter*/
	LPF->output = LPF->alpha * input + (1.0f - LPF->alpha) * LPF->output;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	ed93 7a00 	vldr	s14, [r3]
 80010c0:	edd7 7a00 	vldr	s15, [r7]
 80010c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80010dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	edc3 7a01 	vstr	s15, [r3, #4]

	/*IIR filter*/
	//LPF->output = (1.0f - LPF->alpha) * input + LPF->alpha * LPF->output;

	return LPF->output;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	ee07 3a90 	vmov	s15, r3
}
 80010f2:	eeb0 0a67 	vmov.f32	s0, s15
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <RB_Write>:
 */
#include "main.h"
#include "RingBuffer.h"

RB_Status RB_Write(RingBuffer_t *Buf, uint8_t value)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	425a      	negs	r2, r3
 8001114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001118:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800111c:	bf58      	it	pl
 800111e:	4253      	negpl	r3, r2
 8001120:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buf->Tail)
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	b29a      	uxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	885b      	ldrh	r3, [r3, #2]
 800112a:	429a      	cmp	r2, r3
 800112c:	d101      	bne.n	8001132 <RB_Write+0x32>
	{
		return RB_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00b      	b.n	800114a <RB_Write+0x4a>
	}

	Buf->Buffer[Buf->Head] = value;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	78fa      	ldrb	r2, [r7, #3]
 800113e:	711a      	strb	r2, [r3, #4]

	Buf->Head = HeadTmp;
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	b29a      	uxth	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <RB_Read>:

RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *value)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
	if(Buf->Head == Buf->Tail)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	881a      	ldrh	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	885b      	ldrh	r3, [r3, #2]
 8001168:	429a      	cmp	r2, r3
 800116a:	d101      	bne.n	8001170 <RB_Read+0x1a>
	{
		return RB_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e015      	b.n	800119c <RB_Read+0x46>
	}

	*value = Buf->Buffer[Buf->Tail];
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	885b      	ldrh	r3, [r3, #2]
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	791a      	ldrb	r2, [r3, #4]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	701a      	strb	r2, [r3, #0]

	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	885b      	ldrh	r3, [r3, #2]
 8001184:	3301      	adds	r3, #1
 8001186:	425a      	negs	r2, r3
 8001188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800118c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001190:	bf58      	it	pl
 8001192:	4253      	negpl	r3, r2
 8001194:	b29a      	uxth	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <Parser_TakeLine>:
//
//	}
//
//}
void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *ReceivedData)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	uint8_t Tmp;
	uint8_t i = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73fb      	strb	r3, [r7, #15]
	do
	{
		RB_Read(Buf, &Tmp);
 80011b6:	f107 030e 	add.w	r3, r7, #14
 80011ba:	4619      	mov	r1, r3
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ffca 	bl	8001156 <RB_Read>

		if(Tmp == ENDLINE)
 80011c2:	7bbb      	ldrb	r3, [r7, #14]
 80011c4:	2b0a      	cmp	r3, #10
 80011c6:	d105      	bne.n	80011d4 <Parser_TakeLine+0x2c>
		{
			ReceivedData[i] = 0;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	e004      	b.n	80011de <Parser_TakeLine+0x36>

		}

		else
		{
			ReceivedData[i] = Tmp;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	7bba      	ldrb	r2, [r7, #14]
 80011dc:	701a      	strb	r2, [r3, #0]
		}
		i++;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	3301      	adds	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]

	} while(Tmp != ENDLINE);
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	2b0a      	cmp	r3, #10
 80011e8:	d1e5      	bne.n	80011b6 <Parser_TakeLine+0xe>

}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <kp_change>:

static void kp_change(LineFollower_t *LF)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80011fc:	490f      	ldr	r1, [pc, #60]	@ (800123c <kp_change+0x48>)
 80011fe:	2000      	movs	r0, #0
 8001200:	f011 f9ea 	bl	80125d8 <strtok>
 8001204:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d011      	beq.n	8001232 <kp_change+0x3e>
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff f866 	bl	80002e0 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	2b1f      	cmp	r3, #31
 8001218:	d80b      	bhi.n	8001232 <kp_change+0x3e>
	{
		LF->Kp = atof(ParsePointer);
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f00f fe31 	bl	8010e82 <atof>
 8001220:	ec53 2b10 	vmov	r2, r3, d0
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fd16 	bl	8000c58 <__aeabi_d2f>
 800122c:	4602      	mov	r2, r0
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
	}

}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	08017310 	.word	0x08017310

08001240 <kd_change>:
static void kd_change(LineFollower_t *LF)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001248:	490f      	ldr	r1, [pc, #60]	@ (8001288 <kd_change+0x48>)
 800124a:	2000      	movs	r0, #0
 800124c:	f011 f9c4 	bl	80125d8 <strtok>
 8001250:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d011      	beq.n	800127e <kd_change+0x3e>
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff f840 	bl	80002e0 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	2b1f      	cmp	r3, #31
 8001264:	d80b      	bhi.n	800127e <kd_change+0x3e>
	{
		LF->Kd = atof(ParsePointer);
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f00f fe0b 	bl	8010e82 <atof>
 800126c:	ec53 2b10 	vmov	r2, r3, d0
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fcf0 	bl	8000c58 <__aeabi_d2f>
 8001278:	4602      	mov	r2, r0
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	605a      	str	r2, [r3, #4]
	}
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	08017310 	.word	0x08017310

0800128c <Base_speed_change>:
static void Base_speed_change(LineFollower_t *LF)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001294:	4915      	ldr	r1, [pc, #84]	@ (80012ec <Base_speed_change+0x60>)
 8001296:	2000      	movs	r0, #0
 8001298:	f011 f99e 	bl	80125d8 <strtok>
 800129c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d01d      	beq.n	80012e2 <Base_speed_change+0x56>
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff f81a 	bl	80002e0 <strlen>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b1f      	cmp	r3, #31
 80012b0:	d817      	bhi.n	80012e2 <Base_speed_change+0x56>
	{
		LF->Base_speed_R = atof(ParsePointer);
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f00f fde5 	bl	8010e82 <atof>
 80012b8:	ec53 2b10 	vmov	r2, r3, d0
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc82 	bl	8000bc8 <__aeabi_d2iz>
 80012c4:	4602      	mov	r2, r0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	611a      	str	r2, [r3, #16]
		LF->Base_speed_L = atof(ParsePointer);
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f00f fdd9 	bl	8010e82 <atof>
 80012d0:	ec53 2b10 	vmov	r2, r3, d0
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fc76 	bl	8000bc8 <__aeabi_d2iz>
 80012dc:	4602      	mov	r2, r0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	615a      	str	r2, [r3, #20]
	}
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	08017310 	.word	0x08017310

080012f0 <Max_speed_change>:

static void Max_speed_change(LineFollower_t *LF)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80012f8:	4915      	ldr	r1, [pc, #84]	@ (8001350 <Max_speed_change+0x60>)
 80012fa:	2000      	movs	r0, #0
 80012fc:	f011 f96c 	bl	80125d8 <strtok>
 8001300:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01d      	beq.n	8001346 <Max_speed_change+0x56>
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7fe ffe8 	bl	80002e0 <strlen>
 8001310:	4603      	mov	r3, r0
 8001312:	2b1f      	cmp	r3, #31
 8001314:	d817      	bhi.n	8001346 <Max_speed_change+0x56>
	{
		LF->Max_speed_R = atof(ParsePointer);
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f00f fdb3 	bl	8010e82 <atof>
 800131c:	ec53 2b10 	vmov	r2, r3, d0
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fc50 	bl	8000bc8 <__aeabi_d2iz>
 8001328:	4602      	mov	r2, r0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
		LF->Max_speed_L = atof(ParsePointer);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f00f fda7 	bl	8010e82 <atof>
 8001334:	ec53 2b10 	vmov	r2, r3, d0
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fc44 	bl	8000bc8 <__aeabi_d2iz>
 8001340:	4602      	mov	r2, r0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	61da      	str	r2, [r3, #28]
	}
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	08017310 	.word	0x08017310

08001354 <Sharp_bend_speed_right_change>:
static void Sharp_bend_speed_right_change(LineFollower_t *LF)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 800135c:	490f      	ldr	r1, [pc, #60]	@ (800139c <Sharp_bend_speed_right_change+0x48>)
 800135e:	2000      	movs	r0, #0
 8001360:	f011 f93a 	bl	80125d8 <strtok>
 8001364:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d011      	beq.n	8001392 <Sharp_bend_speed_right_change+0x3e>
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f7fe ffb6 	bl	80002e0 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	2b1f      	cmp	r3, #31
 8001378:	d80b      	bhi.n	8001392 <Sharp_bend_speed_right_change+0x3e>
	{
	LF->Sharp_bend_speed_right = atof(ParsePointer);
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f00f fd81 	bl	8010e82 <atof>
 8001380:	ec53 2b10 	vmov	r2, r3, d0
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff fc1e 	bl	8000bc8 <__aeabi_d2iz>
 800138c:	4602      	mov	r2, r0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	621a      	str	r2, [r3, #32]
	}
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	08017310 	.word	0x08017310

080013a0 <Sharp_bend_speed_left_change>:
static void Sharp_bend_speed_left_change(LineFollower_t *LF)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80013a8:	490f      	ldr	r1, [pc, #60]	@ (80013e8 <Sharp_bend_speed_left_change+0x48>)
 80013aa:	2000      	movs	r0, #0
 80013ac:	f011 f914 	bl	80125d8 <strtok>
 80013b0:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d011      	beq.n	80013de <Sharp_bend_speed_left_change+0x3e>
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7fe ff90 	bl	80002e0 <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b1f      	cmp	r3, #31
 80013c4:	d80b      	bhi.n	80013de <Sharp_bend_speed_left_change+0x3e>
	{
	LF->Sharp_bend_speed_left = atof(ParsePointer);
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f00f fd5b 	bl	8010e82 <atof>
 80013cc:	ec53 2b10 	vmov	r2, r3, d0
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f7ff fbf8 	bl	8000bc8 <__aeabi_d2iz>
 80013d8:	4602      	mov	r2, r0
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	08017310 	.word	0x08017310

080013ec <Bend_speed_right_change>:
static void Bend_speed_right_change(LineFollower_t *LF)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80013f4:	490f      	ldr	r1, [pc, #60]	@ (8001434 <Bend_speed_right_change+0x48>)
 80013f6:	2000      	movs	r0, #0
 80013f8:	f011 f8ee 	bl	80125d8 <strtok>
 80013fc:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d011      	beq.n	800142a <Bend_speed_right_change+0x3e>
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f7fe ff6a 	bl	80002e0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	2b1f      	cmp	r3, #31
 8001410:	d80b      	bhi.n	800142a <Bend_speed_right_change+0x3e>
	{
	LF->Bend_speed_right = atof(ParsePointer);
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f00f fd35 	bl	8010e82 <atof>
 8001418:	ec53 2b10 	vmov	r2, r3, d0
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fbd2 	bl	8000bc8 <__aeabi_d2iz>
 8001424:	4602      	mov	r2, r0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	629a      	str	r2, [r3, #40]	@ 0x28
	}
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	08017310 	.word	0x08017310

08001438 <Bend_speed_left_change>:
static void Bend_speed_left_change(LineFollower_t *LF)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001440:	490f      	ldr	r1, [pc, #60]	@ (8001480 <Bend_speed_left_change+0x48>)
 8001442:	2000      	movs	r0, #0
 8001444:	f011 f8c8 	bl	80125d8 <strtok>
 8001448:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d011      	beq.n	8001476 <Bend_speed_left_change+0x3e>
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f7fe ff44 	bl	80002e0 <strlen>
 8001458:	4603      	mov	r3, r0
 800145a:	2b1f      	cmp	r3, #31
 800145c:	d80b      	bhi.n	8001476 <Bend_speed_left_change+0x3e>
	{
	LF->Bend_speed_left = atof(ParsePointer);
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f00f fd0f 	bl	8010e82 <atof>
 8001464:	ec53 2b10 	vmov	r2, r3, d0
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fbac 	bl	8000bc8 <__aeabi_d2iz>
 8001470:	4602      	mov	r2, r0
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	08017310 	.word	0x08017310
 8001484:	00000000 	.word	0x00000000

08001488 <App_Controll>:
void App_Controll(char RxData, LineFollower_t *LineFollower)
{
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	b0a6      	sub	sp, #152	@ 0x98
 800148c:	af02      	add	r7, sp, #8
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
	/*Stop robot*/
	if(RxData == 'N')
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b4e      	cmp	r3, #78	@ 0x4e
 8001498:	d154      	bne.n	8001544 <App_Controll+0xbc>
	{
		uint8_t buffer[128];
		/*Stop GRUZIK2.0 and turn off the LED*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2140      	movs	r1, #64	@ 0x40
 800149e:	4860      	ldr	r0, [pc, #384]	@ (8001620 <App_Controll+0x198>)
 80014a0:	f006 f9c0 	bl	8007824 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2120      	movs	r1, #32
 80014a8:	485d      	ldr	r0, [pc, #372]	@ (8001620 <App_Controll+0x198>)
 80014aa:	f006 f9bb 	bl	8007824 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2140      	movs	r1, #64	@ 0x40
 80014b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b6:	f006 f9b5 	bl	8007824 <HAL_GPIO_WritePin>

		/*Send battery voltage*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f868 	bl	8000594 <__aeabi_i2d>
 80014c4:	a34e      	add	r3, pc, #312	@ (adr r3, 8001600 <App_Controll+0x178>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff f8cd 	bl	8000668 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	a34c      	add	r3, pc, #304	@ (adr r3, 8001608 <App_Controll+0x180>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f9ee 	bl	80008bc <__aeabi_ddiv>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fbb6 	bl	8000c58 <__aeabi_d2f>
 80014ec:	4602      	mov	r2, r0
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	631a      	str	r2, [r3, #48]	@ 0x30
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80014f6:	461c      	mov	r4, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f85b 	bl	80005b8 <__aeabi_f2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	f107 000c 	add.w	r0, r7, #12
 800150a:	e9cd 2300 	strd	r2, r3, [sp]
 800150e:	4622      	mov	r2, r4
 8001510:	4944      	ldr	r1, [pc, #272]	@ (8001624 <App_Controll+0x19c>)
 8001512:	f010 ffe1 	bl	80124d8 <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe fee0 	bl	80002e0 <strlen>
 8001520:	4603      	mov	r3, r0
 8001522:	b29a      	uxth	r2, r3
 8001524:	f107 010c 	add.w	r1, r7, #12
 8001528:	2364      	movs	r3, #100	@ 0x64
 800152a:	483f      	ldr	r0, [pc, #252]	@ (8001628 <App_Controll+0x1a0>)
 800152c:	f00a f8ce 	bl	800b6cc <HAL_UART_Transmit>

		/*Stop mapping the track*/
		map.Mapping = 0;
 8001530:	4b3e      	ldr	r3, [pc, #248]	@ (800162c <App_Controll+0x1a4>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
		FatFsResult = f_close(&SdCardFile);
 8001536:	483e      	ldr	r0, [pc, #248]	@ (8001630 <App_Controll+0x1a8>)
 8001538:	f00f f988 	bl	801084c <f_close>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b3c      	ldr	r3, [pc, #240]	@ (8001634 <App_Controll+0x1ac>)
 8001542:	701a      	strb	r2, [r3, #0]

	}
	/*Start robot*/
	if (RxData == 'Y')
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b59      	cmp	r3, #89	@ 0x59
 8001548:	f040 8127 	bne.w	800179a <App_Controll+0x312>
		/*Proportional to battery percentage boost for motors
		 * to keep roughly same speed as with full battery*/
		float battery_percentage;
		uint8_t buffer[128];
		//Calculate battery percentage based on battery voltage
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f81f 	bl	8000594 <__aeabi_i2d>
 8001556:	a32a      	add	r3, pc, #168	@ (adr r3, 8001600 <App_Controll+0x178>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff f884 	bl	8000668 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	a327      	add	r3, pc, #156	@ (adr r3, 8001608 <App_Controll+0x180>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f9a5 	bl	80008bc <__aeabi_ddiv>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff fb6d 	bl	8000c58 <__aeabi_d2f>
 800157e:	4602      	mov	r2, r0
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	631a      	str	r2, [r3, #48]	@ 0x30

		//Full battery voltage in working line follower is about 8.24V
		battery_percentage = (LineFollower->battery_voltage / 8.24) * 100;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff f815 	bl	80005b8 <__aeabi_f2d>
 800158e:	a320      	add	r3, pc, #128	@ (adr r3, 8001610 <App_Controll+0x188>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7ff f992 	bl	80008bc <__aeabi_ddiv>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	4b24      	ldr	r3, [pc, #144]	@ (8001638 <App_Controll+0x1b0>)
 80015a6:	f7ff f85f 	bl	8000668 <__aeabi_dmul>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fb51 	bl	8000c58 <__aeabi_d2f>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

		/*To don't damage 2s LiPo battery Line follower can't start with battery below 7.2V*/
		if (LineFollower->battery_voltage < 7.2)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe fff9 	bl	80005b8 <__aeabi_f2d>
 80015c6:	a314      	add	r3, pc, #80	@ (adr r3, 8001618 <App_Controll+0x190>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7ff fabe 	bl	8000b4c <__aeabi_dcmplt>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d036      	beq.n	8001644 <App_Controll+0x1bc>
		{
			sprintf((char*)buffer, "! Low Battery !\r\n");
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	4918      	ldr	r1, [pc, #96]	@ (800163c <App_Controll+0x1b4>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f010 ff7b 	bl	80124d8 <siprintf>
			HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe fe7a 	bl	80002e0 <strlen>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	f107 010c 	add.w	r1, r7, #12
 80015f4:	2364      	movs	r3, #100	@ 0x64
 80015f6:	480c      	ldr	r0, [pc, #48]	@ (8001628 <App_Controll+0x1a0>)
 80015f8:	f00a f868 	bl	800b6cc <HAL_UART_Transmit>
 80015fc:	e350      	b.n	8001ca0 <App_Controll+0x818>
 80015fe:	bf00      	nop
 8001600:	9999999a 	.word	0x9999999a
 8001604:	40209999 	.word	0x40209999
 8001608:	00000000 	.word	0x00000000
 800160c:	40adee00 	.word	0x40adee00
 8001610:	47ae147b 	.word	0x47ae147b
 8001614:	40207ae1 	.word	0x40207ae1
 8001618:	cccccccd 	.word	0xcccccccd
 800161c:	401ccccc 	.word	0x401ccccc
 8001620:	48000800 	.word	0x48000800
 8001624:	08017314 	.word	0x08017314
 8001628:	20006b20 	.word	0x20006b20
 800162c:	20000394 	.word	0x20000394
 8001630:	2000643c 	.word	0x2000643c
 8001634:	20006208 	.word	0x20006208
 8001638:	40590000 	.word	0x40590000
 800163c:	08017344 	.word	0x08017344
 8001640:	42c80000 	.word	0x42c80000
			return;
		}
		/*Motor speed*/
		LineFollower->Speed_level = ((100 - battery_percentage + 100) / 100) - LineFollower->Speed_offset;
 8001644:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 8001640 <App_Controll+0x1b8>
 8001648:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800164c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001650:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8001640 <App_Controll+0x1b8>
 8001654:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001658:	ed5f 6a07 	vldr	s13, [pc, #-28]	@ 8001640 <App_Controll+0x1b8>
 800165c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

		if(LineFollower->Speed_level < 1)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800167a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	d503      	bpl.n	800168c <App_Controll+0x204>
		{
			LineFollower->Speed_level = 1;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800168a:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		/*Send battery data*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff7f 	bl	8000594 <__aeabi_i2d>
 8001696:	a3b5      	add	r3, pc, #724	@ (adr r3, 800196c <App_Controll+0x4e4>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe ffe4 	bl	8000668 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	a3b2      	add	r3, pc, #712	@ (adr r3, 8001974 <App_Controll+0x4ec>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7ff f905 	bl	80008bc <__aeabi_ddiv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff facd 	bl	8000c58 <__aeabi_d2f>
 80016be:	4602      	mov	r2, r0
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	631a      	str	r2, [r3, #48]	@ 0x30
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80016c8:	461c      	mov	r4, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff72 	bl	80005b8 <__aeabi_f2d>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	f107 000c 	add.w	r0, r7, #12
 80016dc:	e9cd 2300 	strd	r2, r3, [sp]
 80016e0:	4622      	mov	r2, r4
 80016e2:	4997      	ldr	r1, [pc, #604]	@ (8001940 <App_Controll+0x4b8>)
 80016e4:	f010 fef8 	bl	80124d8 <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fdf7 	bl	80002e0 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f107 010c 	add.w	r1, r7, #12
 80016fa:	2364      	movs	r3, #100	@ 0x64
 80016fc:	4891      	ldr	r0, [pc, #580]	@ (8001944 <App_Controll+0x4bc>)
 80016fe:	f009 ffe5 	bl	800b6cc <HAL_UART_Transmit>


		sprintf((char*)buffer, "Percentage = %0.2f \r\n Speed_level = %0.2f \r\n", battery_percentage, LineFollower->Speed_level);
 8001702:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001706:	f7fe ff57 	bl	80005b8 <__aeabi_f2d>
 800170a:	4604      	mov	r4, r0
 800170c:	460d      	mov	r5, r1
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff50 	bl	80005b8 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	f107 000c 	add.w	r0, r7, #12
 8001720:	e9cd 2300 	strd	r2, r3, [sp]
 8001724:	4622      	mov	r2, r4
 8001726:	462b      	mov	r3, r5
 8001728:	4987      	ldr	r1, [pc, #540]	@ (8001948 <App_Controll+0x4c0>)
 800172a:	f010 fed5 	bl	80124d8 <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fdd4 	bl	80002e0 <strlen>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	f107 010c 	add.w	r1, r7, #12
 8001740:	2364      	movs	r3, #100	@ 0x64
 8001742:	4880      	ldr	r0, [pc, #512]	@ (8001944 <App_Controll+0x4bc>)
 8001744:	f009 ffc2 	bl	800b6cc <HAL_UART_Transmit>

		/*Stop LineFollower and turn on the LED*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2140      	movs	r1, #64	@ 0x40
 800174c:	487f      	ldr	r0, [pc, #508]	@ (800194c <App_Controll+0x4c4>)
 800174e:	f006 f869 	bl	8007824 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	2120      	movs	r1, #32
 8001756:	487d      	ldr	r0, [pc, #500]	@ (800194c <App_Controll+0x4c4>)
 8001758:	f006 f864 	bl	8007824 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	2140      	movs	r1, #64	@ 0x40
 8001760:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001764:	f006 f85e 	bl	8007824 <HAL_GPIO_WritePin>
//	    {gf
//	    	FatFsResult = f_open(&SdCardFile, "map.txt", FA_READ);
//	    }
//		FatFsResult = f_close(&SdCardFile);
//		HAL_Delay(1000);
		if(LineFollower->DrivingOnMap == 0)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10b      	bne.n	800178a <App_Controll+0x302>
		{
			FatFsResult = f_open(&SdCardFile, "GRUZIK.txt", FA_WRITE|FA_OPEN_APPEND);
 8001772:	2232      	movs	r2, #50	@ 0x32
 8001774:	4976      	ldr	r1, [pc, #472]	@ (8001950 <App_Controll+0x4c8>)
 8001776:	4877      	ldr	r0, [pc, #476]	@ (8001954 <App_Controll+0x4cc>)
 8001778:	f00e fb7c 	bl	800fe74 <f_open>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	4b75      	ldr	r3, [pc, #468]	@ (8001958 <App_Controll+0x4d0>)
 8001782:	701a      	strb	r2, [r3, #0]
			map.Mapping = 1;
 8001784:	4b75      	ldr	r3, [pc, #468]	@ (800195c <App_Controll+0x4d4>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
		}
		map.Ori = 0;
 800178a:	4b74      	ldr	r3, [pc, #464]	@ (800195c <App_Controll+0x4d4>)
 800178c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8001790:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
	}
	/*LOW mode*/
	if(RxData == 'a')
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b61      	cmp	r3, #97	@ 0x61
 800179e:	d11f      	bne.n	80017e0 <App_Controll+0x358>
	{
		LineFollower->Base_speed_R = 85;//85
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2255      	movs	r2, #85	@ 0x55
 80017a4:	611a      	str	r2, [r3, #16]
		LineFollower->Base_speed_L = 85;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2255      	movs	r2, #85	@ 0x55
 80017aa:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_L = 165;//100
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	22a5      	movs	r2, #165	@ 0xa5
 80017b0:	61da      	str	r2, [r3, #28]
		LineFollower->Max_speed_R = 165;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	22a5      	movs	r2, #165	@ 0xa5
 80017b6:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_right = -40;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 80017be:	621a      	str	r2, [r3, #32]
		LineFollower->Sharp_bend_speed_left = 90;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	225a      	movs	r2, #90	@ 0x5a
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Bend_speed_right = -50;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 80017cc:	629a      	str	r2, [r3, #40]	@ 0x28
		LineFollower->Bend_speed_left = 80;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2250      	movs	r2, #80	@ 0x50
 80017d2:	62da      	str	r2, [r3, #44]	@ 0x2c
		LineFollower->Kp = 0.015;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4a62      	ldr	r2, [pc, #392]	@ (8001960 <App_Controll+0x4d8>)
 80017d8:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.085;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	4a61      	ldr	r2, [pc, #388]	@ (8001964 <App_Controll+0x4dc>)
 80017de:	605a      	str	r2, [r3, #4]
	}
	/*LOW+ mode*/
	if(RxData == 'd')
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	2b64      	cmp	r3, #100	@ 0x64
 80017e4:	d11f      	bne.n	8001826 <App_Controll+0x39e>
	{
		LineFollower->Base_speed_R = 95;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	225f      	movs	r2, #95	@ 0x5f
 80017ea:	611a      	str	r2, [r3, #16]
		LineFollower->Base_speed_L = 95;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	225f      	movs	r2, #95	@ 0x5f
 80017f0:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_L = 150; // (120->150)//150
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2296      	movs	r2, #150	@ 0x96
 80017f6:	61da      	str	r2, [r3, #28]
		LineFollower->Max_speed_R = 150;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2296      	movs	r2, #150	@ 0x96
 80017fc:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_right = -30;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f06f 021d 	mvn.w	r2, #29
 8001804:	621a      	str	r2, [r3, #32]
		LineFollower->Sharp_bend_speed_left = 100;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2264      	movs	r2, #100	@ 0x64
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Bend_speed_right = -40;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 8001812:	629a      	str	r2, [r3, #40]	@ 0x28
		LineFollower->Bend_speed_left = 80;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2250      	movs	r2, #80	@ 0x50
 8001818:	62da      	str	r2, [r3, #44]	@ 0x2c
		LineFollower->Kp = 0.015;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	4a50      	ldr	r2, [pc, #320]	@ (8001960 <App_Controll+0x4d8>)
 800181e:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.08;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	4a51      	ldr	r2, [pc, #324]	@ (8001968 <App_Controll+0x4e0>)
 8001824:	605a      	str	r2, [r3, #4]
	}
	/*Medium mode*/
	if(RxData == 'b')
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b62      	cmp	r3, #98	@ 0x62
 800182a:	d11f      	bne.n	800186c <App_Controll+0x3e4>
	{
		LineFollower->Base_speed_R = 102;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	2266      	movs	r2, #102	@ 0x66
 8001830:	611a      	str	r2, [r3, #16]
		LineFollower->Base_speed_L = 102;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2266      	movs	r2, #102	@ 0x66
 8001836:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_L = 145;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2291      	movs	r2, #145	@ 0x91
 800183c:	61da      	str	r2, [r3, #28]
		LineFollower->Max_speed_R = 145;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2291      	movs	r2, #145	@ 0x91
 8001842:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_right = -30;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f06f 021d 	mvn.w	r2, #29
 800184a:	621a      	str	r2, [r3, #32]
		LineFollower->Sharp_bend_speed_left = 100;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2264      	movs	r2, #100	@ 0x64
 8001850:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Bend_speed_right = -40;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 8001858:	629a      	str	r2, [r3, #40]	@ 0x28
		LineFollower->Bend_speed_left = 80;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2250      	movs	r2, #80	@ 0x50
 800185e:	62da      	str	r2, [r3, #44]	@ 0x2c
		LineFollower->Kp = 0.015;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	4a3f      	ldr	r2, [pc, #252]	@ (8001960 <App_Controll+0x4d8>)
 8001864:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.08;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	4a3f      	ldr	r2, [pc, #252]	@ (8001968 <App_Controll+0x4e0>)
 800186a:	605a      	str	r2, [r3, #4]
	}
	/*Medium+ mode*/
	if(RxData == 'e')
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2b65      	cmp	r3, #101	@ 0x65
 8001870:	d11f      	bne.n	80018b2 <App_Controll+0x42a>
	{
		LineFollower->Base_speed_R = 105;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2269      	movs	r2, #105	@ 0x69
 8001876:	611a      	str	r2, [r3, #16]
		LineFollower->Base_speed_L = 105;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2269      	movs	r2, #105	@ 0x69
 800187c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_L = 152;//175 //TODO: albo 170
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2298      	movs	r2, #152	@ 0x98
 8001882:	61da      	str	r2, [r3, #28]
		LineFollower->Max_speed_R = 152;//175
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2298      	movs	r2, #152	@ 0x98
 8001888:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_right = -30;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f06f 021d 	mvn.w	r2, #29
 8001890:	621a      	str	r2, [r3, #32]
		LineFollower->Sharp_bend_speed_left = 90;//90
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	225a      	movs	r2, #90	@ 0x5a
 8001896:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Bend_speed_right = -40;//-40
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 800189e:	629a      	str	r2, [r3, #40]	@ 0x28
		LineFollower->Bend_speed_left = 80;//80
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2250      	movs	r2, #80	@ 0x50
 80018a4:	62da      	str	r2, [r3, #44]	@ 0x2c
		LineFollower->Kp = 0.015;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001960 <App_Controll+0x4d8>)
 80018aa:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.08;//0.9
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001968 <App_Controll+0x4e0>)
 80018b0:	605a      	str	r2, [r3, #4]
	}
	/*HIGH mode*/
	if(RxData == 'c')
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	2b63      	cmp	r3, #99	@ 0x63
 80018b6:	d11f      	bne.n	80018f8 <App_Controll+0x470>
	{
		LineFollower->Base_speed_R = 100;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2264      	movs	r2, #100	@ 0x64
 80018bc:	611a      	str	r2, [r3, #16]
		LineFollower->Base_speed_L = 100;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2264      	movs	r2, #100	@ 0x64
 80018c2:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_L = 165;//125
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	22a5      	movs	r2, #165	@ 0xa5
 80018c8:	61da      	str	r2, [r3, #28]
		LineFollower->Max_speed_R = 165;//125
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	22a5      	movs	r2, #165	@ 0xa5
 80018ce:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_right = -20;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f06f 0213 	mvn.w	r2, #19
 80018d6:	621a      	str	r2, [r3, #32]
		LineFollower->Sharp_bend_speed_left = 110; //88
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	226e      	movs	r2, #110	@ 0x6e
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Bend_speed_right = -40;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 80018e4:	629a      	str	r2, [r3, #40]	@ 0x28
		LineFollower->Bend_speed_left = 80;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2250      	movs	r2, #80	@ 0x50
 80018ea:	62da      	str	r2, [r3, #44]	@ 0x2c
		LineFollower->Kp = 0.015;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001960 <App_Controll+0x4d8>)
 80018f0:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.08;//0.2
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001968 <App_Controll+0x4e0>)
 80018f6:	605a      	str	r2, [r3, #4]
	}
	/*HIGH+ mode*/
	if(RxData == 'f')
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2b66      	cmp	r3, #102	@ 0x66
 80018fc:	d13e      	bne.n	800197c <App_Controll+0x4f4>
	{
		LineFollower->Base_speed_R = 115;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2273      	movs	r2, #115	@ 0x73
 8001902:	611a      	str	r2, [r3, #16]
		LineFollower->Base_speed_L = 115;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	2273      	movs	r2, #115	@ 0x73
 8001908:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_L = 175;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	22af      	movs	r2, #175	@ 0xaf
 800190e:	61da      	str	r2, [r3, #28]
		LineFollower->Max_speed_R = 175;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	22af      	movs	r2, #175	@ 0xaf
 8001914:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_right = -20;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f06f 0213 	mvn.w	r2, #19
 800191c:	621a      	str	r2, [r3, #32]
		LineFollower->Sharp_bend_speed_left = 110; //88
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	226e      	movs	r2, #110	@ 0x6e
 8001922:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Bend_speed_right = -40;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
		LineFollower->Bend_speed_left = 80;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2250      	movs	r2, #80	@ 0x50
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c
		LineFollower->Kp = 0.015;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <App_Controll+0x4d8>)
 8001936:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.08;//0.2
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	4a0b      	ldr	r2, [pc, #44]	@ (8001968 <App_Controll+0x4e0>)
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	e01d      	b.n	800197c <App_Controll+0x4f4>
 8001940:	08017314 	.word	0x08017314
 8001944:	20006b20 	.word	0x20006b20
 8001948:	08017358 	.word	0x08017358
 800194c:	48000800 	.word	0x48000800
 8001950:	08017388 	.word	0x08017388
 8001954:	2000643c 	.word	0x2000643c
 8001958:	20006208 	.word	0x20006208
 800195c:	20000394 	.word	0x20000394
 8001960:	3c75c28f 	.word	0x3c75c28f
 8001964:	3dae147b 	.word	0x3dae147b
 8001968:	3da3d70a 	.word	0x3da3d70a
 800196c:	9999999a 	.word	0x9999999a
 8001970:	40209999 	.word	0x40209999
 8001974:	00000000 	.word	0x00000000
 8001978:	40adee00 	.word	0x40adee00
	}
	/*TRUBO mode*/
	if(RxData == 'i')
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	2b69      	cmp	r3, #105	@ 0x69
 8001980:	d11f      	bne.n	80019c2 <App_Controll+0x53a>
	{
		LineFollower->Base_speed_R = 135;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2287      	movs	r2, #135	@ 0x87
 8001986:	611a      	str	r2, [r3, #16]
		LineFollower->Base_speed_L = 135;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2287      	movs	r2, #135	@ 0x87
 800198c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_L = 135;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2287      	movs	r2, #135	@ 0x87
 8001992:	61da      	str	r2, [r3, #28]
		LineFollower->Max_speed_R = 135;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2287      	movs	r2, #135	@ 0x87
 8001998:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_right = -60; //-65
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 80019a0:	621a      	str	r2, [r3, #32]
		LineFollower->Sharp_bend_speed_left = 70;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2246      	movs	r2, #70	@ 0x46
 80019a6:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Bend_speed_right = -60;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
		LineFollower->Bend_speed_left = 110;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	226e      	movs	r2, #110	@ 0x6e
 80019b4:	62da      	str	r2, [r3, #44]	@ 0x2c
		LineFollower->Kp = 0.015;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	4a8e      	ldr	r2, [pc, #568]	@ (8001bf4 <App_Controll+0x76c>)
 80019ba:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.2;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4a8e      	ldr	r2, [pc, #568]	@ (8001bf8 <App_Controll+0x770>)
 80019c0:	605a      	str	r2, [r3, #4]
	}
	/*TRUBO+ mode*/
	if(RxData == 'j')
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b6a      	cmp	r3, #106	@ 0x6a
 80019c6:	d11f      	bne.n	8001a08 <App_Controll+0x580>
	{
	   LineFollower->Base_speed_R = 140;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	228c      	movs	r2, #140	@ 0x8c
 80019cc:	611a      	str	r2, [r3, #16]
	   LineFollower->Base_speed_L = 140;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	228c      	movs	r2, #140	@ 0x8c
 80019d2:	615a      	str	r2, [r3, #20]
	   LineFollower->Max_speed_L = 140;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	228c      	movs	r2, #140	@ 0x8c
 80019d8:	61da      	str	r2, [r3, #28]
	   LineFollower->Max_speed_R = 140;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	228c      	movs	r2, #140	@ 0x8c
 80019de:	619a      	str	r2, [r3, #24]
	   LineFollower->Sharp_bend_speed_right = -60;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 80019e6:	621a      	str	r2, [r3, #32]
	   LineFollower->Sharp_bend_speed_left = 70;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2246      	movs	r2, #70	@ 0x46
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24
	   LineFollower->Bend_speed_right = -60;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 80019f4:	629a      	str	r2, [r3, #40]	@ 0x28
	   LineFollower->Bend_speed_left = 110;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	226e      	movs	r2, #110	@ 0x6e
 80019fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	   LineFollower->Kp = 0.015;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4a7d      	ldr	r2, [pc, #500]	@ (8001bf4 <App_Controll+0x76c>)
 8001a00:	601a      	str	r2, [r3, #0]
	   LineFollower->Kd = 0.2;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	4a7c      	ldr	r2, [pc, #496]	@ (8001bf8 <App_Controll+0x770>)
 8001a06:	605a      	str	r2, [r3, #4]
	}
	/*ULTRA mode*/
	if(RxData == 'k')
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2b6b      	cmp	r3, #107	@ 0x6b
 8001a0c:	d11f      	bne.n	8001a4e <App_Controll+0x5c6>
	{
		LineFollower->Base_speed_R = 145;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2291      	movs	r2, #145	@ 0x91
 8001a12:	611a      	str	r2, [r3, #16]
		LineFollower->Base_speed_L = 145;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	2291      	movs	r2, #145	@ 0x91
 8001a18:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_L = 145;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2291      	movs	r2, #145	@ 0x91
 8001a1e:	61da      	str	r2, [r3, #28]
		LineFollower->Max_speed_R = 145;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2291      	movs	r2, #145	@ 0x91
 8001a24:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_right = -60;//-70
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 8001a2c:	621a      	str	r2, [r3, #32]
		LineFollower->Sharp_bend_speed_left = 70;//88
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2246      	movs	r2, #70	@ 0x46
 8001a32:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Bend_speed_right = -60;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 8001a3a:	629a      	str	r2, [r3, #40]	@ 0x28
		LineFollower->Bend_speed_left = 110;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	226e      	movs	r2, #110	@ 0x6e
 8001a40:	62da      	str	r2, [r3, #44]	@ 0x2c
		LineFollower->Kp = 0.015;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	4a6b      	ldr	r2, [pc, #428]	@ (8001bf4 <App_Controll+0x76c>)
 8001a46:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.22;     //Jeśli sie gubi wylaturje itd mozna zwiększyć jesli sobie radzi to mozna obniżyc i zwiększyc płynność
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4a6c      	ldr	r2, [pc, #432]	@ (8001bfc <App_Controll+0x774>)
 8001a4c:	605a      	str	r2, [r3, #4]
	 }
	 /*ULTRA+ mode*/
	 if(RxData == 'l')
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	2b6c      	cmp	r3, #108	@ 0x6c
 8001a52:	d11f      	bne.n	8001a94 <App_Controll+0x60c>
	 {
		LineFollower->Base_speed_R = 150;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2296      	movs	r2, #150	@ 0x96
 8001a58:	611a      	str	r2, [r3, #16]
		LineFollower->Base_speed_L = 150;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2296      	movs	r2, #150	@ 0x96
 8001a5e:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_L = 150;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2296      	movs	r2, #150	@ 0x96
 8001a64:	61da      	str	r2, [r3, #28]
		LineFollower->Max_speed_R = 150;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2296      	movs	r2, #150	@ 0x96
 8001a6a:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_right = -55;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f06f 0236 	mvn.w	r2, #54	@ 0x36
 8001a72:	621a      	str	r2, [r3, #32]
		LineFollower->Sharp_bend_speed_left = 75;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	224b      	movs	r2, #75	@ 0x4b
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Bend_speed_right = -60;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 8001a80:	629a      	str	r2, [r3, #40]	@ 0x28
		LineFollower->Bend_speed_left = 120;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2278      	movs	r2, #120	@ 0x78
 8001a86:	62da      	str	r2, [r3, #44]	@ 0x2c
		LineFollower->Kp = 0.015;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4a5a      	ldr	r2, [pc, #360]	@ (8001bf4 <App_Controll+0x76c>)
 8001a8c:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.23;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	4a5b      	ldr	r2, [pc, #364]	@ (8001c00 <App_Controll+0x778>)
 8001a92:	605a      	str	r2, [r3, #4]
	  }
	  /*EXTREME mode*/
	  if(RxData == 'm')
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	2b6d      	cmp	r3, #109	@ 0x6d
 8001a98:	d11f      	bne.n	8001ada <App_Controll+0x652>
	  {
		 LineFollower->Base_speed_R = 155;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	229b      	movs	r2, #155	@ 0x9b
 8001a9e:	611a      	str	r2, [r3, #16]
		 LineFollower->Base_speed_L = 155;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	229b      	movs	r2, #155	@ 0x9b
 8001aa4:	615a      	str	r2, [r3, #20]
		 LineFollower->Max_speed_L = 155;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	229b      	movs	r2, #155	@ 0x9b
 8001aaa:	61da      	str	r2, [r3, #28]
		 LineFollower->Max_speed_R = 155;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	229b      	movs	r2, #155	@ 0x9b
 8001ab0:	619a      	str	r2, [r3, #24]
		 LineFollower->Sharp_bend_speed_right = -70;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001ab8:	621a      	str	r2, [r3, #32]
		 LineFollower->Sharp_bend_speed_left = 85;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2255      	movs	r2, #85	@ 0x55
 8001abe:	625a      	str	r2, [r3, #36]	@ 0x24
		 LineFollower->Bend_speed_right = -50;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001ac6:	629a      	str	r2, [r3, #40]	@ 0x28
		 LineFollower->Bend_speed_left = 30;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	221e      	movs	r2, #30
 8001acc:	62da      	str	r2, [r3, #44]	@ 0x2c
		 LineFollower->Kp = 0.015;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	4a48      	ldr	r2, [pc, #288]	@ (8001bf4 <App_Controll+0x76c>)
 8001ad2:	601a      	str	r2, [r3, #0]
		 LineFollower->Kd = 0.265;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4a4b      	ldr	r2, [pc, #300]	@ (8001c04 <App_Controll+0x77c>)
 8001ad8:	605a      	str	r2, [r3, #4]
	  }

 	  /*EXTREME+ mode*/
 	  if(RxData == 'n')
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2b6e      	cmp	r3, #110	@ 0x6e
 8001ade:	d11f      	bne.n	8001b20 <App_Controll+0x698>
 	  {
 	    LineFollower->Base_speed_R = 160;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	22a0      	movs	r2, #160	@ 0xa0
 8001ae4:	611a      	str	r2, [r3, #16]
 	    LineFollower->Base_speed_L = 160;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	22a0      	movs	r2, #160	@ 0xa0
 8001aea:	615a      	str	r2, [r3, #20]
 	    LineFollower->Max_speed_L = 160;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	22a0      	movs	r2, #160	@ 0xa0
 8001af0:	61da      	str	r2, [r3, #28]
 	  	LineFollower->Max_speed_R = 160;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	22a0      	movs	r2, #160	@ 0xa0
 8001af6:	619a      	str	r2, [r3, #24]
 	 	LineFollower->Sharp_bend_speed_right = -70;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001afe:	621a      	str	r2, [r3, #32]
 		LineFollower->Sharp_bend_speed_left = 85;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2255      	movs	r2, #85	@ 0x55
 8001b04:	625a      	str	r2, [r3, #36]	@ 0x24
 		LineFollower->Bend_speed_right = -50;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001b0c:	629a      	str	r2, [r3, #40]	@ 0x28
 		LineFollower->Bend_speed_left = 30;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	221e      	movs	r2, #30
 8001b12:	62da      	str	r2, [r3, #44]	@ 0x2c
 		LineFollower->Kp = 0.015;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4a37      	ldr	r2, [pc, #220]	@ (8001bf4 <App_Controll+0x76c>)
 8001b18:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 0.265;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	4a39      	ldr	r2, [pc, #228]	@ (8001c04 <App_Controll+0x77c>)
 8001b1e:	605a      	str	r2, [r3, #4]
 	  }
 	  /*SPECIAL mode*/
 	  if(RxData == 'h')
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	2b68      	cmp	r3, #104	@ 0x68
 8001b24:	d11f      	bne.n	8001b66 <App_Controll+0x6de>
// 		LineFollower->Sharp_bend_speed_left = 92;
// 		LineFollower->Bend_speed_right = -50;
// 		LineFollower->Bend_speed_left = 30;
// 		LineFollower->Kp = 0.015;
// 		LineFollower->Kd = 0.2;
 			LineFollower->Base_speed_R = 55;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2237      	movs	r2, #55	@ 0x37
 8001b2a:	611a      	str	r2, [r3, #16]
 			LineFollower->Base_speed_L = 55;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2237      	movs	r2, #55	@ 0x37
 8001b30:	615a      	str	r2, [r3, #20]
 			LineFollower->Max_speed_L = 80;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2250      	movs	r2, #80	@ 0x50
 8001b36:	61da      	str	r2, [r3, #28]
 			LineFollower->Max_speed_R = 80;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	2250      	movs	r2, #80	@ 0x50
 8001b3c:	619a      	str	r2, [r3, #24]
 			LineFollower->Sharp_bend_speed_right = -70;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001b44:	621a      	str	r2, [r3, #32]
 			LineFollower->Sharp_bend_speed_left = 70;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2246      	movs	r2, #70	@ 0x46
 8001b4a:	625a      	str	r2, [r3, #36]	@ 0x24
 			LineFollower->Bend_speed_right = -50;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001b52:	629a      	str	r2, [r3, #40]	@ 0x28
 			LineFollower->Bend_speed_left = 80;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	2250      	movs	r2, #80	@ 0x50
 8001b58:	62da      	str	r2, [r3, #44]	@ 0x2c
 			LineFollower->Kp = 0.015;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	@ (8001bf4 <App_Controll+0x76c>)
 8001b5e:	601a      	str	r2, [r3, #0]
 			LineFollower->Kd = 0.07;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4a29      	ldr	r2, [pc, #164]	@ (8001c08 <App_Controll+0x780>)
 8001b64:	605a      	str	r2, [r3, #4]

 	  }
 	  /*RA-1-final-slower*/
 	  if(RxData == 'o')
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b6f      	cmp	r3, #111	@ 0x6f
 8001b6a:	d11f      	bne.n	8001bac <App_Controll+0x724>
 	  {
 	    LineFollower->Base_speed_R = 143;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	228f      	movs	r2, #143	@ 0x8f
 8001b70:	611a      	str	r2, [r3, #16]
 	    LineFollower->Base_speed_L = 143;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	228f      	movs	r2, #143	@ 0x8f
 8001b76:	615a      	str	r2, [r3, #20]
 	   	LineFollower->Max_speed_L = 182;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	22b6      	movs	r2, #182	@ 0xb6
 8001b7c:	61da      	str	r2, [r3, #28]
 	  	LineFollower->Max_speed_R = 182;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	22b6      	movs	r2, #182	@ 0xb6
 8001b82:	619a      	str	r2, [r3, #24]
 	  	LineFollower->Sharp_bend_speed_right = -76;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001b8a:	621a      	str	r2, [r3, #32]
 		LineFollower->Sharp_bend_speed_left = 90;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	225a      	movs	r2, #90	@ 0x5a
 8001b90:	625a      	str	r2, [r3, #36]	@ 0x24
 		LineFollower->Bend_speed_right = -50;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001b98:	629a      	str	r2, [r3, #40]	@ 0x28
 		LineFollower->Bend_speed_left = 100;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2264      	movs	r2, #100	@ 0x64
 8001b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 		LineFollower->Kp = 0.02;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c0c <App_Controll+0x784>)
 8001ba4:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	@ (8001c10 <App_Controll+0x788>)
 8001baa:	605a      	str	r2, [r3, #4]
 	   }
 	   /*RA-2-eliminations-faster*/
 	   if(RxData == 'u')
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b75      	cmp	r3, #117	@ 0x75
 8001bb0:	d130      	bne.n	8001c14 <App_Controll+0x78c>
 	   {
 	     LineFollower->Base_speed_R = 153;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2299      	movs	r2, #153	@ 0x99
 8001bb6:	611a      	str	r2, [r3, #16]
 	     LineFollower->Base_speed_L = 153;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2299      	movs	r2, #153	@ 0x99
 8001bbc:	615a      	str	r2, [r3, #20]
 	     LineFollower->Max_speed_L = 187;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	22bb      	movs	r2, #187	@ 0xbb
 8001bc2:	61da      	str	r2, [r3, #28]
 	   	 LineFollower->Max_speed_R = 187;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	22bb      	movs	r2, #187	@ 0xbb
 8001bc8:	619a      	str	r2, [r3, #24]
 	  	 LineFollower->Sharp_bend_speed_right = -76;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001bd0:	621a      	str	r2, [r3, #32]
 	 	 LineFollower->Sharp_bend_speed_left = 90;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	225a      	movs	r2, #90	@ 0x5a
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24
 	 	 LineFollower->Bend_speed_right = -50;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001bde:	629a      	str	r2, [r3, #40]	@ 0x28
 	 	 LineFollower->Bend_speed_left = 100;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2264      	movs	r2, #100	@ 0x64
 8001be4:	62da      	str	r2, [r3, #44]	@ 0x2c
 	 	 LineFollower->Kp = 0.02;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	4a08      	ldr	r2, [pc, #32]	@ (8001c0c <App_Controll+0x784>)
 8001bea:	601a      	str	r2, [r3, #0]
 	 	 LineFollower->Kd = 350;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4a08      	ldr	r2, [pc, #32]	@ (8001c10 <App_Controll+0x788>)
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	e00f      	b.n	8001c14 <App_Controll+0x78c>
 8001bf4:	3c75c28f 	.word	0x3c75c28f
 8001bf8:	3e4ccccd 	.word	0x3e4ccccd
 8001bfc:	3e6147ae 	.word	0x3e6147ae
 8001c00:	3e6b851f 	.word	0x3e6b851f
 8001c04:	3e87ae14 	.word	0x3e87ae14
 8001c08:	3d8f5c29 	.word	0x3d8f5c29
 8001c0c:	3ca3d70a 	.word	0x3ca3d70a
 8001c10:	43af0000 	.word	0x43af0000
 	   }
 	  /*Gruzik2.1 Robo Comp 2024r 1*/
 	  if(RxData == 'p')
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	2b70      	cmp	r3, #112	@ 0x70
 8001c18:	d11f      	bne.n	8001c5a <App_Controll+0x7d2>
 	  {
 		 LineFollower->Base_speed_R = 143;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	228f      	movs	r2, #143	@ 0x8f
 8001c1e:	611a      	str	r2, [r3, #16]
 		 LineFollower->Base_speed_L = 143;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	228f      	movs	r2, #143	@ 0x8f
 8001c24:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_L = 182;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	22b6      	movs	r2, #182	@ 0xb6
 8001c2a:	61da      	str	r2, [r3, #28]
 		 LineFollower->Max_speed_R = 182;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	22b6      	movs	r2, #182	@ 0xb6
 8001c30:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001c38:	621a      	str	r2, [r3, #32]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	225a      	movs	r2, #90	@ 0x5a
 8001c3e:	625a      	str	r2, [r3, #36]	@ 0x24
 		 LineFollower->Bend_speed_right = -40;//40
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 8001c46:	629a      	str	r2, [r3, #40]	@ 0x28
 		 LineFollower->Bend_speed_left = 110;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	226e      	movs	r2, #110	@ 0x6e
 8001c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 		 LineFollower->Kp = 0.02;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	4a15      	ldr	r2, [pc, #84]	@ (8001ca8 <App_Controll+0x820>)
 8001c52:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4a15      	ldr	r2, [pc, #84]	@ (8001cac <App_Controll+0x824>)
 8001c58:	605a      	str	r2, [r3, #4]
 	  }
 	  /*Gruzik2.1 Robo Comp 2024 2*/
 	  if(RxData == 'r')
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b72      	cmp	r3, #114	@ 0x72
 8001c5e:	d11f      	bne.n	8001ca0 <App_Controll+0x818>
 	  {
 		 LineFollower->Base_speed_R = 153;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2299      	movs	r2, #153	@ 0x99
 8001c64:	611a      	str	r2, [r3, #16]
 		 LineFollower->Base_speed_L = 153;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2299      	movs	r2, #153	@ 0x99
 8001c6a:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_L = 187;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	22bb      	movs	r2, #187	@ 0xbb
 8001c70:	61da      	str	r2, [r3, #28]
 		 LineFollower->Max_speed_R = 187;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	22bb      	movs	r2, #187	@ 0xbb
 8001c76:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001c7e:	621a      	str	r2, [r3, #32]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	225a      	movs	r2, #90	@ 0x5a
 8001c84:	625a      	str	r2, [r3, #36]	@ 0x24
 		 LineFollower->Bend_speed_right = -40;//40
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 8001c8c:	629a      	str	r2, [r3, #40]	@ 0x28
 		 LineFollower->Bend_speed_left = 110;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	226e      	movs	r2, #110	@ 0x6e
 8001c92:	62da      	str	r2, [r3, #44]	@ 0x2c
 		 LineFollower->Kp = 0.02;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <App_Controll+0x820>)
 8001c98:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	4a03      	ldr	r2, [pc, #12]	@ (8001cac <App_Controll+0x824>)
 8001c9e:	605a      	str	r2, [r3, #4]
 	   }
}
 8001ca0:	3790      	adds	r7, #144	@ 0x90
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	3ca3d70a 	.word	0x3ca3d70a
 8001cac:	43af0000 	.word	0x43af0000

08001cb0 <Mode_change>:

static void Mode_change(LineFollower_t *LF)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001cb8:	490c      	ldr	r1, [pc, #48]	@ (8001cec <Mode_change+0x3c>)
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f010 fc8c 	bl	80125d8 <strtok>
 8001cc0:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 2)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <Mode_change+0x32>
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7fe fb08 	bl	80002e0 <strlen>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d805      	bhi.n	8001ce2 <Mode_change+0x32>
	{
		App_Controll(ParsePointer[0], LF);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fbd3 	bl	8001488 <App_Controll>
	}
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	08017310 	.word	0x08017310

08001cf0 <Parser_Parse>:
void Parser_Parse(uint8_t *ReceivedData, LineFollower_t *LineFollower)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
	char *ParsePointer = strtok((char*)ReceivedData, "=");
 8001cfa:	4939      	ldr	r1, [pc, #228]	@ (8001de0 <Parser_Parse+0xf0>)
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f010 fc6b 	bl	80125d8 <strtok>
 8001d02:	60f8      	str	r0, [r7, #12]

	if(!strcmp("Kp",ParsePointer))
 8001d04:	68f9      	ldr	r1, [r7, #12]
 8001d06:	4837      	ldr	r0, [pc, #220]	@ (8001de4 <Parser_Parse+0xf4>)
 8001d08:	f7fe fa8a 	bl	8000220 <strcmp>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d103      	bne.n	8001d1a <Parser_Parse+0x2a>
	{
		kp_change(LineFollower);
 8001d12:	6838      	ldr	r0, [r7, #0]
 8001d14:	f7ff fa6e 	bl	80011f4 <kp_change>
	}
	else if(!strcmp("Mode",ParsePointer))
	{
		Mode_change(LineFollower);
	}
}
 8001d18:	e05d      	b.n	8001dd6 <Parser_Parse+0xe6>
	else if(!strcmp("Kd",ParsePointer))
 8001d1a:	68f9      	ldr	r1, [r7, #12]
 8001d1c:	4832      	ldr	r0, [pc, #200]	@ (8001de8 <Parser_Parse+0xf8>)
 8001d1e:	f7fe fa7f 	bl	8000220 <strcmp>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d103      	bne.n	8001d30 <Parser_Parse+0x40>
		kd_change(LineFollower);
 8001d28:	6838      	ldr	r0, [r7, #0]
 8001d2a:	f7ff fa89 	bl	8001240 <kd_change>
}
 8001d2e:	e052      	b.n	8001dd6 <Parser_Parse+0xe6>
	else if(!strcmp("Base_speed",ParsePointer))
 8001d30:	68f9      	ldr	r1, [r7, #12]
 8001d32:	482e      	ldr	r0, [pc, #184]	@ (8001dec <Parser_Parse+0xfc>)
 8001d34:	f7fe fa74 	bl	8000220 <strcmp>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d103      	bne.n	8001d46 <Parser_Parse+0x56>
		Base_speed_change(LineFollower);
 8001d3e:	6838      	ldr	r0, [r7, #0]
 8001d40:	f7ff faa4 	bl	800128c <Base_speed_change>
}
 8001d44:	e047      	b.n	8001dd6 <Parser_Parse+0xe6>
	else if(!strcmp("Max_speed",ParsePointer))
 8001d46:	68f9      	ldr	r1, [r7, #12]
 8001d48:	4829      	ldr	r0, [pc, #164]	@ (8001df0 <Parser_Parse+0x100>)
 8001d4a:	f7fe fa69 	bl	8000220 <strcmp>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d103      	bne.n	8001d5c <Parser_Parse+0x6c>
		Max_speed_change(LineFollower);
 8001d54:	6838      	ldr	r0, [r7, #0]
 8001d56:	f7ff facb 	bl	80012f0 <Max_speed_change>
}
 8001d5a:	e03c      	b.n	8001dd6 <Parser_Parse+0xe6>
	else if(!strcmp("Sharp_bend_speed_right",ParsePointer))
 8001d5c:	68f9      	ldr	r1, [r7, #12]
 8001d5e:	4825      	ldr	r0, [pc, #148]	@ (8001df4 <Parser_Parse+0x104>)
 8001d60:	f7fe fa5e 	bl	8000220 <strcmp>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d103      	bne.n	8001d72 <Parser_Parse+0x82>
		Sharp_bend_speed_right_change(LineFollower);
 8001d6a:	6838      	ldr	r0, [r7, #0]
 8001d6c:	f7ff faf2 	bl	8001354 <Sharp_bend_speed_right_change>
}
 8001d70:	e031      	b.n	8001dd6 <Parser_Parse+0xe6>
	else if(!strcmp("Sharp_bend_speed_left",ParsePointer))
 8001d72:	68f9      	ldr	r1, [r7, #12]
 8001d74:	4820      	ldr	r0, [pc, #128]	@ (8001df8 <Parser_Parse+0x108>)
 8001d76:	f7fe fa53 	bl	8000220 <strcmp>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d103      	bne.n	8001d88 <Parser_Parse+0x98>
		Sharp_bend_speed_left_change(LineFollower);
 8001d80:	6838      	ldr	r0, [r7, #0]
 8001d82:	f7ff fb0d 	bl	80013a0 <Sharp_bend_speed_left_change>
}
 8001d86:	e026      	b.n	8001dd6 <Parser_Parse+0xe6>
	else if(!strcmp("Bend_speed_right",ParsePointer))
 8001d88:	68f9      	ldr	r1, [r7, #12]
 8001d8a:	481c      	ldr	r0, [pc, #112]	@ (8001dfc <Parser_Parse+0x10c>)
 8001d8c:	f7fe fa48 	bl	8000220 <strcmp>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <Parser_Parse+0xae>
		Bend_speed_right_change(LineFollower);
 8001d96:	6838      	ldr	r0, [r7, #0]
 8001d98:	f7ff fb28 	bl	80013ec <Bend_speed_right_change>
}
 8001d9c:	e01b      	b.n	8001dd6 <Parser_Parse+0xe6>
	else if(!strcmp("Bend_speed_left",ParsePointer))
 8001d9e:	68f9      	ldr	r1, [r7, #12]
 8001da0:	4817      	ldr	r0, [pc, #92]	@ (8001e00 <Parser_Parse+0x110>)
 8001da2:	f7fe fa3d 	bl	8000220 <strcmp>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d103      	bne.n	8001db4 <Parser_Parse+0xc4>
		Bend_speed_left_change(LineFollower);
 8001dac:	6838      	ldr	r0, [r7, #0]
 8001dae:	f7ff fb43 	bl	8001438 <Bend_speed_left_change>
}
 8001db2:	e010      	b.n	8001dd6 <Parser_Parse+0xe6>
	else if(!strcmp("Treshold",ParsePointer))
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <Parser_Parse+0x114>)
 8001db8:	f7fe fa32 	bl	8000220 <strcmp>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <Parser_Parse+0xe6>
	else if(!strcmp("Mode",ParsePointer))
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	4810      	ldr	r0, [pc, #64]	@ (8001e08 <Parser_Parse+0x118>)
 8001dc6:	f7fe fa2b 	bl	8000220 <strcmp>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <Parser_Parse+0xe6>
		Mode_change(LineFollower);
 8001dd0:	6838      	ldr	r0, [r7, #0]
 8001dd2:	f7ff ff6d 	bl	8001cb0 <Mode_change>
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	08017394 	.word	0x08017394
 8001de4:	08017398 	.word	0x08017398
 8001de8:	0801739c 	.word	0x0801739c
 8001dec:	080173a0 	.word	0x080173a0
 8001df0:	080173ac 	.word	0x080173ac
 8001df4:	080173b8 	.word	0x080173b8
 8001df8:	080173d0 	.word	0x080173d0
 8001dfc:	080173e8 	.word	0x080173e8
 8001e00:	080173fc 	.word	0x080173fc
 8001e04:	0801740c 	.word	0x0801740c
 8001e08:	08017418 	.word	0x08017418

08001e0c <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8001e14:	2254      	movs	r2, #84	@ 0x54
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4803      	ldr	r0, [pc, #12]	@ (8001e28 <MPU6050_Init+0x1c>)
 8001e1a:	f010 fcb0 	bl	801277e <memcpy>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000020c 	.word	0x2000020c

08001e2c <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001e3c:	23d0      	movs	r3, #208	@ 0xd0
 8001e3e:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	b299      	uxth	r1, r3
 8001e48:	f107 020c 	add.w	r2, r7, #12
 8001e4c:	230a      	movs	r3, #10
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2301      	movs	r3, #1
 8001e52:	4808      	ldr	r0, [pc, #32]	@ (8001e74 <I2C_Read+0x48>)
 8001e54:	f005 fd9a 	bl	800798c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	b299      	uxth	r1, r3
 8001e5c:	79bb      	ldrb	r3, [r7, #6]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2264      	movs	r2, #100	@ 0x64
 8001e62:	9200      	str	r2, [sp, #0]
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <I2C_Read+0x48>)
 8001e68:	f005 fea8 	bl	8007bbc <HAL_I2C_Master_Receive>
}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	2000020c 	.word	0x2000020c

08001e78 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460a      	mov	r2, r1
 8001e82:	71fb      	strb	r3, [r7, #7]
 8001e84:	4613      	mov	r3, r2
 8001e86:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001e8c:	79bb      	ldrb	r3, [r7, #6]
 8001e8e:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001e90:	23d0      	movs	r3, #208	@ 0xd0
 8001e92:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	b299      	uxth	r1, r3
 8001e98:	f107 020c 	add.w	r2, r7, #12
 8001e9c:	2364      	movs	r3, #100	@ 0x64
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	4803      	ldr	r0, [pc, #12]	@ (8001eb0 <I2C_Write8+0x38>)
 8001ea4:	f005 fd72 	bl	800798c <HAL_I2C_Master_Transmit>
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	2000020c 	.word	0x2000020c

08001eb4 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	206b      	movs	r0, #107	@ 0x6b
 8001ec4:	f7ff ffd8 	bl	8001e78 <I2C_Write8>
	HAL_Delay(100);
 8001ec8:	2064      	movs	r0, #100	@ 0x64
 8001eca:	f003 fb49 	bl	8005560 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	791b      	ldrb	r3, [r3, #4]
 8001edc:	b25b      	sxtb	r3, r3
 8001ede:	019b      	lsls	r3, r3, #6
 8001ee0:	b25b      	sxtb	r3, r3
 8001ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee6:	b25a      	sxtb	r2, r3
 8001ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	206b      	movs	r0, #107	@ 0x6b
 8001ef8:	f7ff ffbe 	bl	8001e78 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001efc:	2064      	movs	r0, #100	@ 0x64
 8001efe:	f003 fb2f 	bl	8005560 <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	78db      	ldrb	r3, [r3, #3]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	4619      	mov	r1, r3
 8001f14:	201a      	movs	r0, #26
 8001f16:	f7ff ffaf 	bl	8001e78 <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	785b      	ldrb	r3, [r3, #1]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	f003 0318 	and.w	r3, r3, #24
 8001f2a:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	201b      	movs	r0, #27
 8001f32:	f7ff ffa1 	bl	8001e78 <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	789b      	ldrb	r3, [r3, #2]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f003 0318 	and.w	r3, r3, #24
 8001f46:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	201c      	movs	r0, #28
 8001f4e:	f7ff ff93 	bl	8001e78 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001f52:	2004      	movs	r0, #4
 8001f54:	f000 f858 	bl	8002008 <MPU6050_Set_SMPRT_DIV>


	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	789b      	ldrb	r3, [r3, #2]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d81b      	bhi.n	8001f98 <MPU6050_Config+0xe4>
 8001f60:	a201      	add	r2, pc, #4	@ (adr r2, 8001f68 <MPU6050_Config+0xb4>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	08001f79 	.word	0x08001f79
 8001f6c:	08001f81 	.word	0x08001f81
 8001f70:	08001f89 	.word	0x08001f89
 8001f74:	08001f91 	.word	0x08001f91
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <MPU6050_Config+0x130>)
 8001f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <MPU6050_Config+0x134>)
 8001f7c:	601a      	str	r2, [r3, #0]
			break;
 8001f7e:	e00c      	b.n	8001f9a <MPU6050_Config+0xe6>

		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8001f80:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <MPU6050_Config+0x130>)
 8001f82:	4a1a      	ldr	r2, [pc, #104]	@ (8001fec <MPU6050_Config+0x138>)
 8001f84:	601a      	str	r2, [r3, #0]
				break;
 8001f86:	e008      	b.n	8001f9a <MPU6050_Config+0xe6>

		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <MPU6050_Config+0x130>)
 8001f8a:	4a19      	ldr	r2, [pc, #100]	@ (8001ff0 <MPU6050_Config+0x13c>)
 8001f8c:	601a      	str	r2, [r3, #0]
			break;
 8001f8e:	e004      	b.n	8001f9a <MPU6050_Config+0xe6>

		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001f90:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <MPU6050_Config+0x130>)
 8001f92:	4a18      	ldr	r2, [pc, #96]	@ (8001ff4 <MPU6050_Config+0x140>)
 8001f94:	601a      	str	r2, [r3, #0]
			break;
 8001f96:	e000      	b.n	8001f9a <MPU6050_Config+0xe6>

		default:
			break;
 8001f98:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	785b      	ldrb	r3, [r3, #1]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d81a      	bhi.n	8001fd8 <MPU6050_Config+0x124>
 8001fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa8 <MPU6050_Config+0xf4>)
 8001fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa8:	08001fb9 	.word	0x08001fb9
 8001fac:	08001fc1 	.word	0x08001fc1
 8001fb0:	08001fc9 	.word	0x08001fc9
 8001fb4:	08001fd1 	.word	0x08001fd1
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <MPU6050_Config+0x144>)
 8001fba:	4a10      	ldr	r2, [pc, #64]	@ (8001ffc <MPU6050_Config+0x148>)
 8001fbc:	601a      	str	r2, [r3, #0]
			break;
 8001fbe:	e00c      	b.n	8001fda <MPU6050_Config+0x126>

		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <MPU6050_Config+0x144>)
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	@ (8002000 <MPU6050_Config+0x14c>)
 8001fc4:	601a      	str	r2, [r3, #0]
				break;
 8001fc6:	e008      	b.n	8001fda <MPU6050_Config+0x126>

		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <MPU6050_Config+0x144>)
 8001fca:	4a0e      	ldr	r2, [pc, #56]	@ (8002004 <MPU6050_Config+0x150>)
 8001fcc:	601a      	str	r2, [r3, #0]
			break;
 8001fce:	e004      	b.n	8001fda <MPU6050_Config+0x126>

		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8001fd0:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <MPU6050_Config+0x144>)
 8001fd2:	4a05      	ldr	r2, [pc, #20]	@ (8001fe8 <MPU6050_Config+0x134>)
 8001fd4:	601a      	str	r2, [r3, #0]
			break;
 8001fd6:	e000      	b.n	8001fda <MPU6050_Config+0x126>

		default:
			break;
 8001fd8:	bf00      	nop
	}

}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000260 	.word	0x20000260
 8001fe8:	3d7a0000 	.word	0x3d7a0000
 8001fec:	3dfa0000 	.word	0x3dfa0000
 8001ff0:	3e7a0000 	.word	0x3e7a0000
 8001ff4:	3efa0000 	.word	0x3efa0000
 8001ff8:	20000264 	.word	0x20000264
 8001ffc:	3bfa0000 	.word	0x3bfa0000
 8002000:	3c7a0000 	.word	0x3c7a0000
 8002004:	3cfa0000 	.word	0x3cfa0000

08002008 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	4619      	mov	r1, r3
 8002016:	2019      	movs	r0, #25
 8002018:	f7ff ff2e 	bl	8001e78 <I2C_Write8>
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <MPU6050_Get_Accel_RawData>:

}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	3301      	adds	r3, #1
 8002032:	2201      	movs	r2, #1
 8002034:	4619      	mov	r1, r3
 8002036:	203a      	movs	r0, #58	@ 0x3a
 8002038:	f7ff fef8 	bl	8001e2c <I2C_Read>
	if((i2cBuf[1]&&0x01))
 800203c:	7f7b      	ldrb	r3, [r7, #29]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d043      	beq.n	80020ca <MPU6050_Get_Accel_RawData+0xa6>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	2206      	movs	r2, #6
 8002048:	4619      	mov	r1, r3
 800204a:	203b      	movs	r0, #59	@ 0x3b
 800204c:	f7ff feee 	bl	8001e2c <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8002050:	7d3b      	ldrb	r3, [r7, #20]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	b29b      	uxth	r3, r3
 8002056:	7d7a      	ldrb	r2, [r7, #21]
 8002058:	4413      	add	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	b21a      	sxth	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8002062:	7dbb      	ldrb	r3, [r7, #22]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b29b      	uxth	r3, r3
 8002068:	7dfa      	ldrb	r2, [r7, #23]
 800206a:	4413      	add	r3, r2
 800206c:	b29b      	uxth	r3, r3
 800206e:	b21a      	sxth	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8002074:	7e3b      	ldrb	r3, [r7, #24]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	b29b      	uxth	r3, r3
 800207a:	7e7a      	ldrb	r2, [r7, #25]
 800207c:	4413      	add	r3, r2
 800207e:	b29b      	uxth	r3, r3
 8002080:	b21a      	sxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	2206      	movs	r2, #6
 800208c:	4619      	mov	r1, r3
 800208e:	2043      	movs	r0, #67	@ 0x43
 8002090:	f7ff fecc 	bl	8001e2c <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8002094:	7b3b      	ldrb	r3, [r7, #12]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	b29b      	uxth	r3, r3
 800209a:	7b7a      	ldrb	r2, [r7, #13]
 800209c:	4413      	add	r3, r2
 800209e:	b29b      	uxth	r3, r3
 80020a0:	b21a      	sxth	r2, r3
 80020a2:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <MPU6050_Get_Accel_RawData+0xb0>)
 80020a4:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 80020a6:	7bbb      	ldrb	r3, [r7, #14]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	4413      	add	r3, r2
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <MPU6050_Get_Accel_RawData+0xb0>)
 80020b6:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 80020b8:	7c3b      	ldrb	r3, [r7, #16]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	b29b      	uxth	r3, r3
 80020be:	7c7a      	ldrb	r2, [r7, #17]
 80020c0:	4413      	add	r3, r2
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	b21a      	sxth	r2, r3
 80020c6:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <MPU6050_Get_Accel_RawData+0xb0>)
 80020c8:	809a      	strh	r2, [r3, #4]
	}
}
 80020ca:	bf00      	nop
 80020cc:	3720      	adds	r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000268 	.word	0x20000268

080020d8 <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 80020e0:	f107 0308 	add.w	r3, r7, #8
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff9d 	bl	8002024 <MPU6050_Get_Accel_RawData>

	//Accel Scale data
	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
 80020ea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f6:	4b14      	ldr	r3, [pc, #80]	@ (8002148 <MPU6050_Get_Accel_Scale+0x70>)
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
 8002106:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002112:	4b0d      	ldr	r3, [pc, #52]	@ (8002148 <MPU6050_Get_Accel_Scale+0x70>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
 8002122:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <MPU6050_Get_Accel_Scale+0x70>)
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000260 	.word	0x20000260

0800214c <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8002154:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <MPU6050_Get_Gyro_RawData+0x34>)
 8002156:	f9b3 2000 	ldrsh.w	r2, [r3]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 800215e:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <MPU6050_Get_Gyro_RawData+0x34>)
 8002160:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <MPU6050_Get_Gyro_RawData+0x34>)
 800216a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	809a      	strh	r2, [r3, #4]

}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000268 	.word	0x20000268

08002184 <MPU6050_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU6050_Get_Gyro_Scale(ScaledData_Def *scaledDef)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ffdb 	bl	800214c <MPU6050_Get_Gyro_RawData>

	//Gyro Scale data
	scaledDef->x = (myGyroRaw.x)*gyroScalingFactor; // x-Axis
 8002196:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021a2:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <MPU6050_Get_Gyro_Scale+0x70>)
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = (myGyroRaw.y)*gyroScalingFactor; // y-Axis
 80021b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <MPU6050_Get_Gyro_Scale+0x70>)
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = (myGyroRaw.z)*gyroScalingFactor; // z-Axis
 80021ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <MPU6050_Get_Gyro_Scale+0x70>)
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000264 	.word	0x20000264

080021f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08c      	sub	sp, #48	@ 0x30
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80021fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2220      	movs	r2, #32
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f010 f9c6 	bl	80125a2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002216:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 8002218:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800221c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800221e:	4b30      	ldr	r3, [pc, #192]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 8002220:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002224:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002226:	4b2e      	ldr	r3, [pc, #184]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800222c:	4b2c      	ldr	r3, [pc, #176]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002232:	4b2b      	ldr	r3, [pc, #172]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002238:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800223e:	4b28      	ldr	r3, [pc, #160]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 8002240:	2204      	movs	r2, #4
 8002242:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002244:	4b26      	ldr	r3, [pc, #152]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 8002246:	2200      	movs	r2, #0
 8002248:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800224a:	4b25      	ldr	r3, [pc, #148]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 800224c:	2201      	movs	r2, #1
 800224e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002250:	4b23      	ldr	r3, [pc, #140]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 8002252:	2201      	movs	r2, #1
 8002254:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002256:	4b22      	ldr	r3, [pc, #136]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800225e:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 8002260:	2200      	movs	r2, #0
 8002262:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002264:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800226a:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002272:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 8002274:	2200      	movs	r2, #0
 8002276:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002278:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002280:	4817      	ldr	r0, [pc, #92]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 8002282:	f003 fbad 	bl	80059e0 <HAL_ADC_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800228c:	f001 faa6 	bl	80037dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002298:	4619      	mov	r1, r3
 800229a:	4811      	ldr	r0, [pc, #68]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 800229c:	f004 fbde 	bl	8006a5c <HAL_ADCEx_MultiModeConfigChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80022a6:	f001 fa99 	bl	80037dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <MX_ADC1_Init+0xec>)
 80022ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022ae:	2306      	movs	r3, #6
 80022b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80022b2:	2307      	movs	r3, #7
 80022b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80022b6:	237f      	movs	r3, #127	@ 0x7f
 80022b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80022ba:	2304      	movs	r3, #4
 80022bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4806      	ldr	r0, [pc, #24]	@ (80022e0 <MX_ADC1_Init+0xe8>)
 80022c8:	f003 fe38 	bl	8005f3c <HAL_ADC_ConfigChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80022d2:	f001 fa83 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	3730      	adds	r7, #48	@ 0x30
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000270 	.word	0x20000270
 80022e4:	08600004 	.word	0x08600004

080022e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b09e      	sub	sp, #120	@ 0x78
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	2254      	movs	r2, #84	@ 0x54
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f010 f94a 	bl	80125a2 <memset>
  if(adcHandle->Instance==ADC1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002316:	d15f      	bne.n	80023d8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002318:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800231c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800231e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002322:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	4618      	mov	r0, r3
 800232a:	f006 fe6d 	bl	8009008 <HAL_RCCEx_PeriphCLKConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002334:	f001 fa52 	bl	80037dc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002338:	4b29      	ldr	r3, [pc, #164]	@ (80023e0 <HAL_ADC_MspInit+0xf8>)
 800233a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233c:	4a28      	ldr	r2, [pc, #160]	@ (80023e0 <HAL_ADC_MspInit+0xf8>)
 800233e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002344:	4b26      	ldr	r3, [pc, #152]	@ (80023e0 <HAL_ADC_MspInit+0xf8>)
 8002346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002350:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <HAL_ADC_MspInit+0xf8>)
 8002352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002354:	4a22      	ldr	r2, [pc, #136]	@ (80023e0 <HAL_ADC_MspInit+0xf8>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800235c:	4b20      	ldr	r3, [pc, #128]	@ (80023e0 <HAL_ADC_MspInit+0xf8>)
 800235e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002368:	2302      	movs	r3, #2
 800236a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800236c:	2303      	movs	r3, #3
 800236e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002378:	4619      	mov	r1, r3
 800237a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800237e:	f005 f8b7 	bl	80074f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002382:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <HAL_ADC_MspInit+0xfc>)
 8002384:	4a18      	ldr	r2, [pc, #96]	@ (80023e8 <HAL_ADC_MspInit+0x100>)
 8002386:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002388:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <HAL_ADC_MspInit+0xfc>)
 800238a:	2205      	movs	r2, #5
 800238c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_ADC_MspInit+0xfc>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002394:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <HAL_ADC_MspInit+0xfc>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800239a:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_ADC_MspInit+0xfc>)
 800239c:	2280      	movs	r2, #128	@ 0x80
 800239e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023a0:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <HAL_ADC_MspInit+0xfc>)
 80023a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023a8:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <HAL_ADC_MspInit+0xfc>)
 80023aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <HAL_ADC_MspInit+0xfc>)
 80023b2:	2220      	movs	r2, #32
 80023b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <HAL_ADC_MspInit+0xfc>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023bc:	4809      	ldr	r0, [pc, #36]	@ (80023e4 <HAL_ADC_MspInit+0xfc>)
 80023be:	f004 fd65 	bl	8006e8c <HAL_DMA_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80023c8:	f001 fa08 	bl	80037dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a05      	ldr	r2, [pc, #20]	@ (80023e4 <HAL_ADC_MspInit+0xfc>)
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80023d2:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <HAL_ADC_MspInit+0xfc>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80023d8:	bf00      	nop
 80023da:	3778      	adds	r7, #120	@ 0x78
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	200002dc 	.word	0x200002dc
 80023e8:	40020008 	.word	0x40020008

080023ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80023f2:	4b16      	ldr	r3, [pc, #88]	@ (800244c <MX_DMA_Init+0x60>)
 80023f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f6:	4a15      	ldr	r2, [pc, #84]	@ (800244c <MX_DMA_Init+0x60>)
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80023fe:	4b13      	ldr	r3, [pc, #76]	@ (800244c <MX_DMA_Init+0x60>)
 8002400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800240a:	4b10      	ldr	r3, [pc, #64]	@ (800244c <MX_DMA_Init+0x60>)
 800240c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240e:	4a0f      	ldr	r2, [pc, #60]	@ (800244c <MX_DMA_Init+0x60>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6493      	str	r3, [r2, #72]	@ 0x48
 8002416:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <MX_DMA_Init+0x60>)
 8002418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	200b      	movs	r0, #11
 8002428:	f004 fcfb 	bl	8006e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800242c:	200b      	movs	r0, #11
 800242e:	f004 fd12 	bl	8006e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2100      	movs	r1, #0
 8002436:	200c      	movs	r0, #12
 8002438:	f004 fcf3 	bl	8006e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800243c:	200c      	movs	r0, #12
 800243e:	f004 fd0a 	bl	8006e56 <HAL_NVIC_EnableIRQ>

}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000

08002450 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	@ 0x28
 8002454:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
 8002464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002466:	4b5a      	ldr	r3, [pc, #360]	@ (80025d0 <MX_GPIO_Init+0x180>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	4a59      	ldr	r2, [pc, #356]	@ (80025d0 <MX_GPIO_Init+0x180>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002472:	4b57      	ldr	r3, [pc, #348]	@ (80025d0 <MX_GPIO_Init+0x180>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800247e:	4b54      	ldr	r3, [pc, #336]	@ (80025d0 <MX_GPIO_Init+0x180>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	4a53      	ldr	r2, [pc, #332]	@ (80025d0 <MX_GPIO_Init+0x180>)
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800248a:	4b51      	ldr	r3, [pc, #324]	@ (80025d0 <MX_GPIO_Init+0x180>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002496:	4b4e      	ldr	r3, [pc, #312]	@ (80025d0 <MX_GPIO_Init+0x180>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249a:	4a4d      	ldr	r2, [pc, #308]	@ (80025d0 <MX_GPIO_Init+0x180>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024a2:	4b4b      	ldr	r3, [pc, #300]	@ (80025d0 <MX_GPIO_Init+0x180>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	4b48      	ldr	r3, [pc, #288]	@ (80025d0 <MX_GPIO_Init+0x180>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b2:	4a47      	ldr	r2, [pc, #284]	@ (80025d0 <MX_GPIO_Init+0x180>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ba:	4b45      	ldr	r3, [pc, #276]	@ (80025d0 <MX_GPIO_Init+0x180>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024c6:	4b42      	ldr	r3, [pc, #264]	@ (80025d0 <MX_GPIO_Init+0x180>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	4a41      	ldr	r2, [pc, #260]	@ (80025d0 <MX_GPIO_Init+0x180>)
 80024cc:	f043 0308 	orr.w	r3, r3, #8
 80024d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d2:	4b3f      	ldr	r3, [pc, #252]	@ (80025d0 <MX_GPIO_Init+0x180>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDON_Pin|Motor_R_A_Pin|Motor_R_B_Pin|LED_2_Pin
 80024de:	2200      	movs	r2, #0
 80024e0:	f242 017c 	movw	r1, #8316	@ 0x207c
 80024e4:	483b      	ldr	r0, [pc, #236]	@ (80025d4 <MX_GPIO_Init+0x184>)
 80024e6:	f005 f99d 	bl	8007824 <HAL_GPIO_WritePin>
                          |LED_1_Pin|Motor_STBY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_4_Pin|LED_3_Pin|Motor_L_A_Pin|Motor_L_B_Pin, GPIO_PIN_RESET);
 80024ea:	2200      	movs	r2, #0
 80024ec:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80024f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024f4:	f005 f996 	bl	8007824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80024f8:	2200      	movs	r2, #0
 80024fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024fe:	4836      	ldr	r0, [pc, #216]	@ (80025d8 <MX_GPIO_Init+0x188>)
 8002500:	f005 f990 	bl	8007824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDON_Pin Motor_R_A_Pin Motor_R_B_Pin LED_2_Pin
                           LED_1_Pin Motor_STBY_Pin */
  GPIO_InitStruct.Pin = LEDON_Pin|Motor_R_A_Pin|Motor_R_B_Pin|LED_2_Pin
 8002504:	f242 037c 	movw	r3, #8316	@ 0x207c
 8002508:	617b      	str	r3, [r7, #20]
                          |LED_1_Pin|Motor_STBY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250a:	2301      	movs	r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002512:	2300      	movs	r3, #0
 8002514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	482d      	ldr	r0, [pc, #180]	@ (80025d4 <MX_GPIO_Init+0x184>)
 800251e:	f004 ffe7 	bl	80074f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR11_Pin SENSOR12_Pin SENSOR10_Pin */
  GPIO_InitStruct.Pin = SENSOR11_Pin|SENSOR12_Pin|SENSOR10_Pin;
 8002522:	f248 0330 	movw	r3, #32816	@ 0x8030
 8002526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4619      	mov	r1, r3
 8002536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800253a:	f004 ffd9 	bl	80074f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin Motor_L_A_Pin Motor_L_B_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|Motor_L_A_Pin|Motor_L_B_Pin;
 800253e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002544:	2301      	movs	r3, #1
 8002546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800255a:	f004 ffc9 	bl	80074f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800255e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002564:	2301      	movs	r3, #1
 8002566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4619      	mov	r1, r3
 8002576:	4818      	ldr	r0, [pc, #96]	@ (80025d8 <MX_GPIO_Init+0x188>)
 8002578:	f004 ffba 	bl	80074f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR9_Pin SENSOR8_Pin SENSOR7_Pin */
  GPIO_InitStruct.Pin = SENSOR9_Pin|SENSOR8_Pin|SENSOR7_Pin;
 800257c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	4810      	ldr	r0, [pc, #64]	@ (80025d4 <MX_GPIO_Init+0x184>)
 8002592:	f004 ffad 	bl	80074f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR6_Pin */
  GPIO_InitStruct.Pin = SENSOR6_Pin;
 8002596:	2304      	movs	r3, #4
 8002598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR6_GPIO_Port, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	480c      	ldr	r0, [pc, #48]	@ (80025dc <MX_GPIO_Init+0x18c>)
 80025aa:	f004 ffa1 	bl	80074f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR5_Pin SENSOR4_Pin SENSOR3_Pin SENSOR2_Pin
                           SENSOR1_Pin */
  GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin
 80025ae:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 80025b2:	617b      	str	r3, [r7, #20]
                          |SENSOR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	4619      	mov	r1, r3
 80025c2:	4805      	ldr	r0, [pc, #20]	@ (80025d8 <MX_GPIO_Init+0x188>)
 80025c4:	f004 ff94 	bl	80074f0 <HAL_GPIO_Init>

}
 80025c8:	bf00      	nop
 80025ca:	3728      	adds	r7, #40	@ 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	48000800 	.word	0x48000800
 80025d8:	48000400 	.word	0x48000400
 80025dc:	48000c00 	.word	0x48000c00

080025e0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <MX_I2C3_Init+0x74>)
 80025e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <MX_I2C3_Init+0x78>)
 80025e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40621236;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <MX_I2C3_Init+0x74>)
 80025ec:	4a1b      	ldr	r2, [pc, #108]	@ (800265c <MX_I2C3_Init+0x7c>)
 80025ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80025f0:	4b18      	ldr	r3, [pc, #96]	@ (8002654 <MX_I2C3_Init+0x74>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f6:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <MX_I2C3_Init+0x74>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025fc:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <MX_I2C3_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002602:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <MX_I2C3_Init+0x74>)
 8002604:	2200      	movs	r2, #0
 8002606:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002608:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <MX_I2C3_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800260e:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <MX_I2C3_Init+0x74>)
 8002610:	2200      	movs	r2, #0
 8002612:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002614:	4b0f      	ldr	r3, [pc, #60]	@ (8002654 <MX_I2C3_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800261a:	480e      	ldr	r0, [pc, #56]	@ (8002654 <MX_I2C3_Init+0x74>)
 800261c:	f005 f91a 	bl	8007854 <HAL_I2C_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002626:	f001 f8d9 	bl	80037dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800262a:	2100      	movs	r1, #0
 800262c:	4809      	ldr	r0, [pc, #36]	@ (8002654 <MX_I2C3_Init+0x74>)
 800262e:	f005 fe61 	bl	80082f4 <HAL_I2CEx_ConfigAnalogFilter>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002638:	f001 f8d0 	bl	80037dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800263c:	2100      	movs	r1, #0
 800263e:	4805      	ldr	r0, [pc, #20]	@ (8002654 <MX_I2C3_Init+0x74>)
 8002640:	f005 fea3 	bl	800838a <HAL_I2CEx_ConfigDigitalFilter>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800264a:	f001 f8c7 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	2000033c 	.word	0x2000033c
 8002658:	40007800 	.word	0x40007800
 800265c:	40621236 	.word	0x40621236

08002660 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b09e      	sub	sp, #120	@ 0x78
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	2254      	movs	r2, #84	@ 0x54
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f00f ff8e 	bl	80125a2 <memset>
  if(i2cHandle->Instance==I2C3)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1f      	ldr	r2, [pc, #124]	@ (8002708 <HAL_I2C_MspInit+0xa8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d137      	bne.n	8002700 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002694:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002696:	2300      	movs	r3, #0
 8002698:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800269a:	f107 0310 	add.w	r3, r7, #16
 800269e:	4618      	mov	r0, r3
 80026a0:	f006 fcb2 	bl	8009008 <HAL_RCCEx_PeriphCLKConfig>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80026aa:	f001 f897 	bl	80037dc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ae:	4b17      	ldr	r3, [pc, #92]	@ (800270c <HAL_I2C_MspInit+0xac>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	4a16      	ldr	r2, [pc, #88]	@ (800270c <HAL_I2C_MspInit+0xac>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ba:	4b14      	ldr	r3, [pc, #80]	@ (800270c <HAL_I2C_MspInit+0xac>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026ca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026cc:	2312      	movs	r3, #18
 80026ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80026d8:	2308      	movs	r3, #8
 80026da:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026e0:	4619      	mov	r1, r3
 80026e2:	480b      	ldr	r0, [pc, #44]	@ (8002710 <HAL_I2C_MspInit+0xb0>)
 80026e4:	f004 ff04 	bl	80074f0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026e8:	4b08      	ldr	r3, [pc, #32]	@ (800270c <HAL_I2C_MspInit+0xac>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ec:	4a07      	ldr	r2, [pc, #28]	@ (800270c <HAL_I2C_MspInit+0xac>)
 80026ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_I2C_MspInit+0xac>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002700:	bf00      	nop
 8002702:	3778      	adds	r7, #120	@ 0x78
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40007800 	.word	0x40007800
 800270c:	40021000 	.word	0x40021000
 8002710:	48000800 	.word	0x48000800

08002714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002718:	f002 feb1 	bl	800547e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800271c:	f000 f978 	bl	8002a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002720:	f7ff fe96 	bl	8002450 <MX_GPIO_Init>
  MX_DMA_Init();
 8002724:	f7ff fe62 	bl	80023ec <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002728:	f002 fdd6 	bl	80052d8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800272c:	f7ff fd64 	bl	80021f8 <MX_ADC1_Init>
  MX_I2C3_Init();
 8002730:	f7ff ff56 	bl	80025e0 <MX_I2C3_Init>
  MX_SPI2_Init();
 8002734:	f002 f8f6 	bl	8004924 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002738:	f002 faca 	bl	8004cd0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800273c:	f002 fb22 	bl	8004d84 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002740:	f002 fbf0 	bl	8004f24 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002744:	f002 fba0 	bl	8004e88 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002748:	f002 fc42 	bl	8004fd0 <MX_TIM5_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800274c:	f00b f8b8 	bl	800d8c0 <MX_FATFS_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <main+0x46>
    Error_Handler();
 8002756:	f001 f841 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN 2 */
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&GRUZIK.Adc_Value, 1);
 800275a:	2201      	movs	r2, #1
 800275c:	4989      	ldr	r1, [pc, #548]	@ (8002984 <main+0x270>)
 800275e:	488a      	ldr	r0, [pc, #552]	@ (8002988 <main+0x274>)
 8002760:	f003 fafa 	bl	8005d58 <HAL_ADC_Start_DMA>

  	/*Initial values for driving on Optimized route*/
  	map.p = 0.14;//0.14
 8002764:	4b89      	ldr	r3, [pc, #548]	@ (800298c <main+0x278>)
 8002766:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800276a:	f603 635c 	addw	r3, r3, #3676	@ 0xe5c
 800276e:	4a88      	ldr	r2, [pc, #544]	@ (8002990 <main+0x27c>)
 8002770:	601a      	str	r2, [r3, #0]
  	map.i = 0;
 8002772:	4b86      	ldr	r3, [pc, #536]	@ (800298c <main+0x278>)
 8002774:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8002778:	f503 6366 	add.w	r3, r3, #3680	@ 0xe60
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
  	map.d = 14;//14
 8002782:	4b82      	ldr	r3, [pc, #520]	@ (800298c <main+0x278>)
 8002784:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8002788:	f603 6364 	addw	r3, r3, #3684	@ 0xe64
 800278c:	4a81      	ldr	r2, [pc, #516]	@ (8002994 <main+0x280>)
 800278e:	601a      	str	r2, [r3, #0]

  	GRUZIK.DrivingOnMap = 0;
 8002790:	4b81      	ldr	r3, [pc, #516]	@ (8002998 <main+0x284>)
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  	/*Set initial values for PID*/
    GRUZIK.Kp = 0.015;
 8002798:	4b7f      	ldr	r3, [pc, #508]	@ (8002998 <main+0x284>)
 800279a:	4a80      	ldr	r2, [pc, #512]	@ (800299c <main+0x288>)
 800279c:	601a      	str	r2, [r3, #0]
  	GRUZIK.Kd = 0.085;
 800279e:	4b7e      	ldr	r3, [pc, #504]	@ (8002998 <main+0x284>)
 80027a0:	4a7f      	ldr	r2, [pc, #508]	@ (80029a0 <main+0x28c>)
 80027a2:	605a      	str	r2, [r3, #4]
  	GRUZIK.Speed_offset = 0.014;
 80027a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002998 <main+0x284>)
 80027a6:	4a7f      	ldr	r2, [pc, #508]	@ (80029a4 <main+0x290>)
 80027a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  	if(GRUZIK.DrivingOnMap)
 80027aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002998 <main+0x284>)
 80027ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01c      	beq.n	80027ee <main+0xda>
  	{
		GRUZIK.Kp = map.p;
 80027b4:	4b75      	ldr	r3, [pc, #468]	@ (800298c <main+0x278>)
 80027b6:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80027ba:	f603 635c 	addw	r3, r3, #3676	@ 0xe5c
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a75      	ldr	r2, [pc, #468]	@ (8002998 <main+0x284>)
 80027c2:	6013      	str	r3, [r2, #0]
		GRUZIK.Kd = map.d;
 80027c4:	4b71      	ldr	r3, [pc, #452]	@ (800298c <main+0x278>)
 80027c6:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80027ca:	f603 6364 	addw	r3, r3, #3684	@ 0xe64
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a71      	ldr	r2, [pc, #452]	@ (8002998 <main+0x284>)
 80027d2:	6053      	str	r3, [r2, #4]
		GRUZIK.Base_speed_R = map.i;
 80027d4:	4b6d      	ldr	r3, [pc, #436]	@ (800298c <main+0x278>)
 80027d6:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80027da:	f503 6366 	add.w	r3, r3, #3680	@ 0xe60
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e6:	ee17 2a90 	vmov	r2, s15
 80027ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002998 <main+0x284>)
 80027ec:	611a      	str	r2, [r3, #16]
  	}

  	GRUZIK.Base_speed_R = 80;
 80027ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002998 <main+0x284>)
 80027f0:	2250      	movs	r2, #80	@ 0x50
 80027f2:	611a      	str	r2, [r3, #16]
  	GRUZIK.Base_speed_L = 80;
 80027f4:	4b68      	ldr	r3, [pc, #416]	@ (8002998 <main+0x284>)
 80027f6:	2250      	movs	r2, #80	@ 0x50
 80027f8:	615a      	str	r2, [r3, #20]
  	GRUZIK.Max_speed_R = 80;
 80027fa:	4b67      	ldr	r3, [pc, #412]	@ (8002998 <main+0x284>)
 80027fc:	2250      	movs	r2, #80	@ 0x50
 80027fe:	619a      	str	r2, [r3, #24]
  	GRUZIK.Max_speed_L = 80;
 8002800:	4b65      	ldr	r3, [pc, #404]	@ (8002998 <main+0x284>)
 8002802:	2250      	movs	r2, #80	@ 0x50
 8002804:	61da      	str	r2, [r3, #28]

  	/*Sharp turn speed*/
  	GRUZIK.Sharp_bend_speed_right= -40;
 8002806:	4b64      	ldr	r3, [pc, #400]	@ (8002998 <main+0x284>)
 8002808:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 800280c:	621a      	str	r2, [r3, #32]
  	GRUZIK.Sharp_bend_speed_left= 85;
 800280e:	4b62      	ldr	r3, [pc, #392]	@ (8002998 <main+0x284>)
 8002810:	2255      	movs	r2, #85	@ 0x55
 8002812:	625a      	str	r2, [r3, #36]	@ 0x24
  	GRUZIK.Bend_speed_right= -50;
 8002814:	4b60      	ldr	r3, [pc, #384]	@ (8002998 <main+0x284>)
 8002816:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 800281a:	629a      	str	r2, [r3, #40]	@ 0x28
  	GRUZIK.Bend_speed_left= 90;
 800281c:	4b5e      	ldr	r3, [pc, #376]	@ (8002998 <main+0x284>)
 800281e:	225a      	movs	r2, #90	@ 0x5a
 8002820:	62da      	str	r2, [r3, #44]	@ 0x2c

  	map.Kk = 0;
 8002822:	4b5a      	ldr	r3, [pc, #360]	@ (800298c <main+0x278>)
 8002824:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8002828:	f603 53c4 	addw	r3, r3, #3524	@ 0xdc4
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	601a      	str	r2, [r3, #0]


    /*Start receiving data from Blue tooth*/
    HAL_UART_Receive_IT(&hlpuart1, &RxData, 1);
 8002832:	2201      	movs	r2, #1
 8002834:	495c      	ldr	r1, [pc, #368]	@ (80029a8 <main+0x294>)
 8002836:	485d      	ldr	r0, [pc, #372]	@ (80029ac <main+0x298>)
 8002838:	f008 ffd6 	bl	800b7e8 <HAL_UART_Receive_IT>

    /*encoders*/
    HAL_TIM_Base_Start_IT(&htim5);// 100
 800283c:	485c      	ldr	r0, [pc, #368]	@ (80029b0 <main+0x29c>)
 800283e:	f007 fab7 	bl	8009db0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Left Encoder
 8002842:	213c      	movs	r1, #60	@ 0x3c
 8002844:	485b      	ldr	r0, [pc, #364]	@ (80029b4 <main+0x2a0>)
 8002846:	f007 fd45 	bl	800a2d4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // Right Encoder
 800284a:	213c      	movs	r1, #60	@ 0x3c
 800284c:	485a      	ldr	r0, [pc, #360]	@ (80029b8 <main+0x2a4>)
 800284e:	f007 fd41 	bl	800a2d4 <HAL_TIM_Encoder_Start>

    //         Motor     KP    KI
    Motor_Init(&Motor_R, 0.1, 0.2);//0.1 0.2
 8002852:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 80029bc <main+0x2a8>
 8002856:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 80029c0 <main+0x2ac>
 800285a:	485a      	ldr	r0, [pc, #360]	@ (80029c4 <main+0x2b0>)
 800285c:	f001 ffcc 	bl	80047f8 <Motor_Init>
    Motor_Init(&Motor_L, 0.1, 0.2);
 8002860:	eddf 0a56 	vldr	s1, [pc, #344]	@ 80029bc <main+0x2a8>
 8002864:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 80029c0 <main+0x2ac>
 8002868:	4857      	ldr	r0, [pc, #348]	@ (80029c8 <main+0x2b4>)
 800286a:	f001 ffc5 	bl	80047f8 <Motor_Init>
    LowPassFilter_Init(&Motor_R.EncoderRpmFilter, LOW_PASS_FILTER_ALPHA);
 800286e:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 80029cc <main+0x2b8>
 8002872:	4857      	ldr	r0, [pc, #348]	@ (80029d0 <main+0x2bc>)
 8002874:	f7fe fc0c 	bl	8001090 <LowPassFilter_Init>
    LowPassFilter_Init(&Motor_L.EncoderRpmFilter, LOW_PASS_FILTER_ALPHA);
 8002878:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 80029cc <main+0x2b8>
 800287c:	4855      	ldr	r0, [pc, #340]	@ (80029d4 <main+0x2c0>)
 800287e:	f7fe fc07 	bl	8001090 <LowPassFilter_Init>
    LowPassFilter_Init(&Motor_L.MetersPerSecondLPF, LOW_PASS_FILTER_ALPHA);
 8002882:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80029cc <main+0x2b8>
 8002886:	4854      	ldr	r0, [pc, #336]	@ (80029d8 <main+0x2c4>)
 8002888:	f7fe fc02 	bl	8001090 <LowPassFilter_Init>
    LowPassFilter_Init(&Motor_R.MetersPerSecondLPF, LOW_PASS_FILTER_ALPHA);
 800288c:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 80029cc <main+0x2b8>
 8002890:	4852      	ldr	r0, [pc, #328]	@ (80029dc <main+0x2c8>)
 8002892:	f7fe fbfd 	bl	8001090 <LowPassFilter_Init>

    /*SD Card file initialization*/
    FatFsResult = f_mount(&SdFatFs, "", 1);
 8002896:	2201      	movs	r2, #1
 8002898:	4951      	ldr	r1, [pc, #324]	@ (80029e0 <main+0x2cc>)
 800289a:	4852      	ldr	r0, [pc, #328]	@ (80029e4 <main+0x2d0>)
 800289c:	f00d faa4 	bl	800fde8 <f_mount>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b50      	ldr	r3, [pc, #320]	@ (80029e8 <main+0x2d4>)
 80028a6:	701a      	strb	r2, [r3, #0]
    if(GRUZIK.DrivingOnMap != 1)
 80028a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002998 <main+0x284>)
 80028aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d025      	beq.n	80028fe <main+0x1ea>
    {
    	while(!SDReadingReady)
 80028b2:	e00f      	b.n	80028d4 <main+0x1c0>
    	{
    		FatFsResult = f_open(&SdCardFile, "GRUZIK.txt", FA_WRITE|FA_OPEN_APPEND);
 80028b4:	2232      	movs	r2, #50	@ 0x32
 80028b6:	494d      	ldr	r1, [pc, #308]	@ (80029ec <main+0x2d8>)
 80028b8:	484d      	ldr	r0, [pc, #308]	@ (80029f0 <main+0x2dc>)
 80028ba:	f00d fadb 	bl	800fe74 <f_open>
 80028be:	4603      	mov	r3, r0
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b49      	ldr	r3, [pc, #292]	@ (80029e8 <main+0x2d4>)
 80028c4:	701a      	strb	r2, [r3, #0]
    		if(FatFsResult == FR_OK)
 80028c6:	4b48      	ldr	r3, [pc, #288]	@ (80029e8 <main+0x2d4>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <main+0x1c0>
    		{
    			SDReadingReady = 1;
 80028ce:	4b49      	ldr	r3, [pc, #292]	@ (80029f4 <main+0x2e0>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
    	while(!SDReadingReady)
 80028d4:	4b47      	ldr	r3, [pc, #284]	@ (80029f4 <main+0x2e0>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0eb      	beq.n	80028b4 <main+0x1a0>
 80028dc:	e013      	b.n	8002906 <main+0x1f2>
    }
    else
    {
    	while(!SDReadingReady)
    	{
    		FatFsResult = f_open(&SdCardFile, "map.txt", FA_READ);
 80028de:	2201      	movs	r2, #1
 80028e0:	4945      	ldr	r1, [pc, #276]	@ (80029f8 <main+0x2e4>)
 80028e2:	4843      	ldr	r0, [pc, #268]	@ (80029f0 <main+0x2dc>)
 80028e4:	f00d fac6 	bl	800fe74 <f_open>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	4b3e      	ldr	r3, [pc, #248]	@ (80029e8 <main+0x2d4>)
 80028ee:	701a      	strb	r2, [r3, #0]
    		if(FatFsResult == FR_OK)
 80028f0:	4b3d      	ldr	r3, [pc, #244]	@ (80029e8 <main+0x2d4>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <main+0x1ea>
    		{
    			SDReadingReady = 1;
 80028f8:	4b3e      	ldr	r3, [pc, #248]	@ (80029f4 <main+0x2e0>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
    	while(!SDReadingReady)
 80028fe:	4b3d      	ldr	r3, [pc, #244]	@ (80029f4 <main+0x2e0>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0eb      	beq.n	80028de <main+0x1ca>
    		}
    	}
    }
	/*Start timers and PWM on channels*/
	HAL_TIM_Base_Start_IT(&htim3);
 8002906:	483d      	ldr	r0, [pc, #244]	@ (80029fc <main+0x2e8>)
 8002908:	f007 fa52 	bl	8009db0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//right pwm
 800290c:	2100      	movs	r1, #0
 800290e:	483c      	ldr	r0, [pc, #240]	@ (8002a00 <main+0x2ec>)
 8002910:	f007 fb28 	bl	8009f64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);//left pwm
 8002914:	210c      	movs	r1, #12
 8002916:	483a      	ldr	r0, [pc, #232]	@ (8002a00 <main+0x2ec>)
 8002918:	f007 fb24 	bl	8009f64 <HAL_TIM_PWM_Start>

	/*IMU initialization*/
	//1. Initialize the MPU6050 module and I2C
	MPU6050_Init(&hi2c3);
 800291c:	4839      	ldr	r0, [pc, #228]	@ (8002a04 <main+0x2f0>)
 800291e:	f7ff fa75 	bl	8001e0c <MPU6050_Init>

	//2. Configure parameters
	myMpuConfig.Accel_Full_Scale = AFS_SEL_16g;
 8002922:	4b39      	ldr	r3, [pc, #228]	@ (8002a08 <main+0x2f4>)
 8002924:	2203      	movs	r2, #3
 8002926:	709a      	strb	r2, [r3, #2]
	myMpuConfig.ClockSource = Internal_8MHz;
 8002928:	4b37      	ldr	r3, [pc, #220]	@ (8002a08 <main+0x2f4>)
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
	myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 800292e:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <main+0x2f4>)
 8002930:	2201      	movs	r2, #1
 8002932:	70da      	strb	r2, [r3, #3]
	myMpuConfig.Gyro_Full_Scale = FS_SEL_2000;
 8002934:	4b34      	ldr	r3, [pc, #208]	@ (8002a08 <main+0x2f4>)
 8002936:	2203      	movs	r2, #3
 8002938:	705a      	strb	r2, [r3, #1]
	myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 800293a:	4b33      	ldr	r3, [pc, #204]	@ (8002a08 <main+0x2f4>)
 800293c:	2200      	movs	r2, #0
 800293e:	711a      	strb	r2, [r3, #4]
	MPU6050_Config(&myMpuConfig);
 8002940:	4831      	ldr	r0, [pc, #196]	@ (8002a08 <main+0x2f4>)
 8002942:	f7ff fab7 	bl	8001eb4 <MPU6050_Config>

    /*LED diodes initial set*/
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8002946:	2201      	movs	r2, #1
 8002948:	2140      	movs	r1, #64	@ 0x40
 800294a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800294e:	f004 ff69 	bl	8007824 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8002952:	2201      	movs	r2, #1
 8002954:	2180      	movs	r1, #128	@ 0x80
 8002956:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800295a:	f004 ff63 	bl	8007824 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800295e:	2201      	movs	r2, #1
 8002960:	2110      	movs	r1, #16
 8002962:	482a      	ldr	r0, [pc, #168]	@ (8002a0c <main+0x2f8>)
 8002964:	f004 ff5e 	bl	8007824 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8002968:	2201      	movs	r2, #1
 800296a:	2120      	movs	r1, #32
 800296c:	4827      	ldr	r0, [pc, #156]	@ (8002a0c <main+0x2f8>)
 800296e:	f004 ff59 	bl	8007824 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(GRUZIK.DrivingOnMap == 0)
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <main+0x284>)
 8002974:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1fa      	bne.n	8002972 <main+0x25e>
	  {
		  PID_control();
 800297c:	f000 fe6c 	bl	8003658 <PID_control>
	  if(GRUZIK.DrivingOnMap == 0)
 8002980:	e7f7      	b.n	8002972 <main+0x25e>
 8002982:	bf00      	nop
 8002984:	200066c4 	.word	0x200066c4
 8002988:	20000270 	.word	0x20000270
 800298c:	20000394 	.word	0x20000394
 8002990:	3e0f5c29 	.word	0x3e0f5c29
 8002994:	41600000 	.word	0x41600000
 8002998:	20006690 	.word	0x20006690
 800299c:	3c75c28f 	.word	0x3c75c28f
 80029a0:	3dae147b 	.word	0x3dae147b
 80029a4:	3c656042 	.word	0x3c656042
 80029a8:	20006870 	.word	0x20006870
 80029ac:	20006b20 	.word	0x20006b20
 80029b0:	20006a74 	.word	0x20006a74
 80029b4:	20006a28 	.word	0x20006a28
 80029b8:	20006944 	.word	0x20006944
 80029bc:	3e4ccccd 	.word	0x3e4ccccd
 80029c0:	3dcccccd 	.word	0x3dcccccd
 80029c4:	20006778 	.word	0x20006778
 80029c8:	200066dc 	.word	0x200066dc
 80029cc:	3f333333 	.word	0x3f333333
 80029d0:	200067ac 	.word	0x200067ac
 80029d4:	20006710 	.word	0x20006710
 80029d8:	20006718 	.word	0x20006718
 80029dc:	200067b4 	.word	0x200067b4
 80029e0:	08017420 	.word	0x08017420
 80029e4:	2000620c 	.word	0x2000620c
 80029e8:	20006208 	.word	0x20006208
 80029ec:	08017424 	.word	0x08017424
 80029f0:	2000643c 	.word	0x2000643c
 80029f4:	20000390 	.word	0x20000390
 80029f8:	08017430 	.word	0x08017430
 80029fc:	200069dc 	.word	0x200069dc
 8002a00:	20006990 	.word	0x20006990
 8002a04:	2000033c 	.word	0x2000033c
 8002a08:	20006684 	.word	0x20006684
 8002a0c:	48000800 	.word	0x48000800

08002a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b094      	sub	sp, #80	@ 0x50
 8002a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a16:	f107 0318 	add.w	r3, r7, #24
 8002a1a:	2238      	movs	r2, #56	@ 0x38
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f00f fdbf 	bl	80125a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f005 fd06 	bl	8008444 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a38:	f005 fcf4 	bl	8008424 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002a3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ac0 <SystemClock_Config+0xb0>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a42:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac0 <SystemClock_Config+0xb0>)
 8002a44:	f023 0318 	bic.w	r3, r3, #24
 8002a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002a4c:	2306      	movs	r3, #6
 8002a4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a50:	2301      	movs	r3, #1
 8002a52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a5a:	2340      	movs	r3, #64	@ 0x40
 8002a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a62:	2302      	movs	r3, #2
 8002a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002a66:	2304      	movs	r3, #4
 8002a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002a6a:	2355      	movs	r3, #85	@ 0x55
 8002a6c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a72:	2302      	movs	r3, #2
 8002a74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a76:	2302      	movs	r3, #2
 8002a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7a:	f107 0318 	add.w	r3, r7, #24
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f005 fd94 	bl	80085ac <HAL_RCC_OscConfig>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002a8a:	f000 fea7 	bl	80037dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a8e:	230f      	movs	r3, #15
 8002a90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a92:	2303      	movs	r3, #3
 8002a94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f006 f892 	bl	8008bd0 <HAL_RCC_ClockConfig>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002ab2:	f000 fe93 	bl	80037dc <Error_Handler>
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	3750      	adds	r7, #80	@ 0x50
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/*Interrupts*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8002b10 <HAL_UART_RxCpltCallback+0x4c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d117      	bne.n	8002b06 <HAL_UART_RxCpltCallback+0x42>
	{
		if(RB_Write(&ReceiveBuffer, RxData) == RB_OK)
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <HAL_UART_RxCpltCallback+0x50>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	4619      	mov	r1, r3
 8002adc:	480e      	ldr	r0, [pc, #56]	@ (8002b18 <HAL_UART_RxCpltCallback+0x54>)
 8002ade:	f7fe fb0f 	bl	8001100 <RB_Write>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_UART_RxCpltCallback+0x38>
		{
			if(RxData == ENDLINE)
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <HAL_UART_RxCpltCallback+0x50>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b0a      	cmp	r3, #10
 8002aee:	d105      	bne.n	8002afc <HAL_UART_RxCpltCallback+0x38>
			{
				ReceivedLines++;
 8002af0:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <HAL_UART_RxCpltCallback+0x58>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <HAL_UART_RxCpltCallback+0x58>)
 8002afa:	701a      	strb	r2, [r3, #0]
			}
		}
    	HAL_UART_Receive_IT(&hlpuart1,&RxData, 1);
 8002afc:	2201      	movs	r2, #1
 8002afe:	4905      	ldr	r1, [pc, #20]	@ (8002b14 <HAL_UART_RxCpltCallback+0x50>)
 8002b00:	4807      	ldr	r0, [pc, #28]	@ (8002b20 <HAL_UART_RxCpltCallback+0x5c>)
 8002b02:	f008 fe71 	bl	800b7e8 <HAL_UART_Receive_IT>
	}
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40008000 	.word	0x40008000
 8002b14:	20006870 	.word	0x20006870
 8002b18:	20006874 	.word	0x20006874
 8002b1c:	200068d8 	.word	0x200068d8
 8002b20:	20006b20 	.word	0x20006b20
 8002b24:	00000000 	.word	0x00000000

08002b28 <HAL_TIM_PeriodElapsedCallback>:
/*Encoders reading at 1KHz */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a94      	ldr	r2, [pc, #592]	@ (8002d88 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	f040 8110 	bne.w	8002d5c <HAL_TIM_PeriodElapsedCallback+0x234>
	{
		/*Get Encoder values*/
		Motor_L.EncoderValue = __HAL_TIM_GET_COUNTER(&htim4);
 8002b3c:	4b93      	ldr	r3, [pc, #588]	@ (8002d8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	4a93      	ldr	r2, [pc, #588]	@ (8002d90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002b44:	6013      	str	r3, [r2, #0]
		Motor_R.EncoderValue = __HAL_TIM_GET_COUNTER(&htim1);
 8002b46:	4b93      	ldr	r3, [pc, #588]	@ (8002d94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	4a92      	ldr	r2, [pc, #584]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002b4e:	6013      	str	r3, [r2, #0]
		/*Set central point for encoders again*/
		htim4.Instance->CNT = 20000;
 8002b50:	4b8e      	ldr	r3, [pc, #568]	@ (8002d8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24
		htim1.Instance->CNT = 20000;
 8002b5a:	4b8e      	ldr	r3, [pc, #568]	@ (8002d94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002b62:	625a      	str	r2, [r3, #36]	@ 0x24

	    Motor_CalculateSpeed(&Motor_R);
 8002b64:	488c      	ldr	r0, [pc, #560]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002b66:	f001 fd8f 	bl	8004688 <Motor_CalculateSpeed>
	    Motor_CalculateSpeed(&Motor_L);
 8002b6a:	4889      	ldr	r0, [pc, #548]	@ (8002d90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002b6c:	f001 fd8c 	bl	8004688 <Motor_CalculateSpeed>

	    /*integration of Gyroscope data for Z axis*/
	    MPU6050_Get_Accel_Scale(&myAccelScaled);
 8002b70:	488a      	ldr	r0, [pc, #552]	@ (8002d9c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002b72:	f7ff fab1 	bl	80020d8 <MPU6050_Get_Accel_Scale>
	    MPU6050_Get_Gyro_Scale(&myGyroScaled);
 8002b76:	488a      	ldr	r0, [pc, #552]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002b78:	f7ff fb04 	bl	8002184 <MPU6050_Get_Gyro_Scale>

	    //map.OriIMU = (((myGyroScaled.z * YAW_MEASUREMENT_PERIOD) - 0.00095)* 0.01745329251f) * 1.3325;//1.03325
	   // MapUpdate(&map, &Motor_L, &Motor_R);
	    Orientation += map.OriIMU / 0.01745329251f;
 8002b7c:	4b89      	ldr	r3, [pc, #548]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002b7e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8002b82:	f603 6318 	addw	r3, r3, #3608	@ 0xe18
 8002b86:	edd3 7a00 	vldr	s15, [r3]
 8002b8a:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002da8 <HAL_TIM_PeriodElapsedCallback+0x280>
 8002b8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b92:	4b86      	ldr	r3, [pc, #536]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002b94:	edd3 7a00 	vldr	s15, [r3]
 8002b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9c:	4b83      	ldr	r3, [pc, #524]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002b9e:	edc3 7a00 	vstr	s15, [r3]

		if(GRUZIK.blockinterrups == 0)
 8002ba2:	4b83      	ldr	r3, [pc, #524]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f040 80a7 	bne.w	8002cfc <HAL_TIM_PeriodElapsedCallback+0x1d4>
		{
			if((GRUZIK.DrivingOnMap == 1)&&(SDReadingReady == 1))     // 0.0015
 8002bae:	4b80      	ldr	r3, [pc, #512]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d12f      	bne.n	8002c18 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8002bb8:	4b7e      	ldr	r3, [pc, #504]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d12b      	bne.n	8002c18 <HAL_TIM_PeriodElapsedCallback+0xf0>
			{                                                         // 0.00095
			  map.OriIMU = (((myGyroScaled.z * YAW_MEASUREMENT_PERIOD) - 0.001)* 0.01745329251f) * 1;//1.03325
 8002bc0:	4b77      	ldr	r3, [pc, #476]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002bc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bc6:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8002db8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8002bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bce:	ee17 0a90 	vmov	r0, s15
 8002bd2:	f7fd fcf1 	bl	80005b8 <__aeabi_f2d>
 8002bd6:	a364      	add	r3, pc, #400	@ (adr r3, 8002d68 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	f7fd fb8c 	bl	80002f8 <__aeabi_dsub>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	a361      	add	r3, pc, #388	@ (adr r3, 8002d70 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bee:	f7fd fd3b 	bl	8000668 <__aeabi_dmul>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7fe f82d 	bl	8000c58 <__aeabi_d2f>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	4b68      	ldr	r3, [pc, #416]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002c02:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8002c06:	f603 6318 	addw	r3, r3, #3608	@ 0xe18
 8002c0a:	601a      	str	r2, [r3, #0]
			  DriveOnMap(&map, &Motor_L, &Motor_R);
 8002c0c:	4a62      	ldr	r2, [pc, #392]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002c0e:	4960      	ldr	r1, [pc, #384]	@ (8002d90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002c10:	4864      	ldr	r0, [pc, #400]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002c12:	f001 f981 	bl	8003f18 <DriveOnMap>
 8002c16:	e071      	b.n	8002cfc <HAL_TIM_PeriodElapsedCallback+0x1d4>
			}
			else if((GRUZIK.DrivingOnMap == 0)&&(SDReadingReady == 1))
 8002c18:	4b65      	ldr	r3, [pc, #404]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d138      	bne.n	8002c94 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8002c22:	4b64      	ldr	r3, [pc, #400]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d134      	bne.n	8002c94 <HAL_TIM_PeriodElapsedCallback+0x16c>
			{
			  map.OriIMU = (((myGyroScaled.z * YAW_MEASUREMENT_PERIOD) + 0.0008)* 0.01745329251f) * 1.2705f;//1.3325 // zwiększenie zamyka trase
 8002c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002c2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c30:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8002db8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8002c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c38:	ee17 0a90 	vmov	r0, s15
 8002c3c:	f7fd fcbc 	bl	80005b8 <__aeabi_f2d>
 8002c40:	a34d      	add	r3, pc, #308	@ (adr r3, 8002d78 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f7fd fb59 	bl	80002fc <__adddf3>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	a347      	add	r3, pc, #284	@ (adr r3, 8002d70 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	f7fd fd06 	bl	8000668 <__aeabi_dmul>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	a346      	add	r3, pc, #280	@ (adr r3, 8002d80 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f7fd fcfd 	bl	8000668 <__aeabi_dmul>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	f7fd ffef 	bl	8000c58 <__aeabi_d2f>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	4b49      	ldr	r3, [pc, #292]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002c7e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8002c82:	f603 6318 	addw	r3, r3, #3608	@ 0xe18
 8002c86:	601a      	str	r2, [r3, #0]
			  MapUpdate(&map, &Motor_L, &Motor_R);                     //- 0.0065                    1.273
 8002c88:	4a43      	ldr	r2, [pc, #268]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002c8a:	4941      	ldr	r1, [pc, #260]	@ (8002d90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002c8c:	4845      	ldr	r0, [pc, #276]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002c8e:	f000 fdab 	bl	80037e8 <MapUpdate>
 8002c92:	e033      	b.n	8002cfc <HAL_TIM_PeriodElapsedCallback+0x1d4>
			}
																		//- 0.0065                    1.271
																		//- 0.00625                   1.2705
			else if((GRUZIK.DrivingOnMap == 2) && (SDReadingReady == 1))
 8002c94:	4b46      	ldr	r3, [pc, #280]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002c96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d12e      	bne.n	8002cfc <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8002c9e:	4b45      	ldr	r3, [pc, #276]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d12a      	bne.n	8002cfc <HAL_TIM_PeriodElapsedCallback+0x1d4>
			{
				map.OriIMU = (((myGyroScaled.z * YAW_MEASUREMENT_PERIOD) - 0.001)* 0.01745329251f) * 1;//1.03325
 8002ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002ca8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cac:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002db8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8002cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb4:	ee17 0a90 	vmov	r0, s15
 8002cb8:	f7fd fc7e 	bl	80005b8 <__aeabi_f2d>
 8002cbc:	a32a      	add	r3, pc, #168	@ (adr r3, 8002d68 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	f7fd fb19 	bl	80002f8 <__aeabi_dsub>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	a328      	add	r3, pc, #160	@ (adr r3, 8002d70 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	f7fd fcc8 	bl	8000668 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7fd ffba 	bl	8000c58 <__aeabi_d2f>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002ce8:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8002cec:	f603 6318 	addw	r3, r3, #3608	@ 0xe18
 8002cf0:	601a      	str	r2, [r3, #0]
				 MappingV2(&map, &Motor_L, &Motor_R);
 8002cf2:	4a29      	ldr	r2, [pc, #164]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002cf4:	4926      	ldr	r1, [pc, #152]	@ (8002d90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002cf6:	482b      	ldr	r0, [pc, #172]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002cf8:	f001 fb52 	bl	80043a0 <MappingV2>
			}

		}

		  /*If there is a message form Bluetooth Parser it*/
		  if(ReceivedLines > 0)
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002dbc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <HAL_TIM_PeriodElapsedCallback+0x1f8>
		  {
			  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 8002d04:	492e      	ldr	r1, [pc, #184]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002d06:	482f      	ldr	r0, [pc, #188]	@ (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002d08:	f7fe fa4e 	bl	80011a8 <Parser_TakeLine>
			  Parser_Parse(ReceivedData,&GRUZIK);
 8002d0c:	4928      	ldr	r1, [pc, #160]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002d0e:	482c      	ldr	r0, [pc, #176]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002d10:	f7fe ffee 	bl	8001cf0 <Parser_Parse>

			  ReceivedLines--;
 8002d14:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b27      	ldr	r3, [pc, #156]	@ (8002dbc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002d1e:	701a      	strb	r2, [r3, #0]
		  }
		  /*After one cycle of un-mapping drive slowly with route for 2s and then stop*/
		  if(GRUZIK.UnMappingDone == 1)
 8002d20:	4b23      	ldr	r3, [pc, #140]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002d22:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d118      	bne.n	8002d5c <HAL_TIM_PeriodElapsedCallback+0x234>
		  {
			  if(HAL_GetTick() >= (GRUZIK.DoneUnMappingTimer + 1750))
 8002d2a:	f002 fc0d 	bl	8005548 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b1f      	ldr	r3, [pc, #124]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d34:	f203 63d6 	addw	r3, r3, #1750	@ 0x6d6
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d30f      	bcc.n	8002d5c <HAL_TIM_PeriodElapsedCallback+0x234>
			  {
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2140      	movs	r1, #64	@ 0x40
 8002d40:	4821      	ldr	r0, [pc, #132]	@ (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002d42:	f004 fd6f 	bl	8007824 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2120      	movs	r1, #32
 8002d4a:	481f      	ldr	r0, [pc, #124]	@ (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002d4c:	f004 fd6a 	bl	8007824 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002d50:	2200      	movs	r2, #0
 8002d52:	2140      	movs	r1, #64	@ 0x40
 8002d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d58:	f004 fd64 	bl	8007824 <HAL_GPIO_WritePin>
			  }
		  }
	}
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	f3af 8000 	nop.w
 8002d68:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d6c:	3f50624d 	.word	0x3f50624d
 8002d70:	a0000000 	.word	0xa0000000
 8002d74:	3f91df46 	.word	0x3f91df46
 8002d78:	eb1c432d 	.word	0xeb1c432d
 8002d7c:	3f4a36e2 	.word	0x3f4a36e2
 8002d80:	c0000000 	.word	0xc0000000
 8002d84:	3ff453f7 	.word	0x3ff453f7
 8002d88:	40000c00 	.word	0x40000c00
 8002d8c:	20006a28 	.word	0x20006a28
 8002d90:	200066dc 	.word	0x200066dc
 8002d94:	20006944 	.word	0x20006944
 8002d98:	20006778 	.word	0x20006778
 8002d9c:	2000666c 	.word	0x2000666c
 8002da0:	20006678 	.word	0x20006678
 8002da4:	20000394 	.word	0x20000394
 8002da8:	3c8efa35 	.word	0x3c8efa35
 8002dac:	2000668c 	.word	0x2000668c
 8002db0:	20006690 	.word	0x20006690
 8002db4:	20000390 	.word	0x20000390
 8002db8:	3a83126f 	.word	0x3a83126f
 8002dbc:	200068d8 	.word	0x200068d8
 8002dc0:	200068b8 	.word	0x200068b8
 8002dc4:	20006874 	.word	0x20006874
 8002dc8:	48000800 	.word	0x48000800

08002dcc <delay_us>:
/*Functions*/
void delay_us (uint16_t us) //Blocking function
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8002dd6:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <delay_us+0x30>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8002dde:	bf00      	nop
 8002de0:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <delay_us+0x30>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d3f9      	bcc.n	8002de0 <delay_us+0x14>
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	200069dc 	.word	0x200069dc

08002e00 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e20:	2301      	movs	r3, #1
 8002e22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f004 fb5e 	bl	80074f0 <HAL_GPIO_Init>
}
 8002e34:	bf00      	nop
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e60:	2301      	movs	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002e64:	f107 030c 	add.w	r3, r7, #12
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f004 fb40 	bl	80074f0 <HAL_GPIO_Init>
}
 8002e70:	bf00      	nop
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <motor_control>:


void motor_control (double pos_right, double pos_left)

{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002e82:	ed87 1b00 	vstr	d1, [r7]
	#ifdef PI_MOTOR_SPEED_REGULATION
	{
		if (pos_left < 0 )
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e92:	f7fd fe5b 	bl	8000b4c <__aeabi_dcmplt>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d034      	beq.n	8002f06 <motor_control+0x8e>
		{
			Motor_L.set_speed = (pos_left * -1);
 8002e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ea0:	f7fd feda 	bl	8000c58 <__aeabi_d2f>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef1 7a67 	vneg.f32	s15, s15
 8002eae:	4b63      	ldr	r3, [pc, #396]	@ (800303c <motor_control+0x1c4>)
 8002eb0:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
			PI_Loop(&Motor_L);
 8002eb4:	4861      	ldr	r0, [pc, #388]	@ (800303c <motor_control+0x1c4>)
 8002eb6:	f001 fcbb 	bl	8004830 <PI_Loop>

			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_4, (uint32_t)((ARR*Motor_L.speed) * GRUZIK.Speed_level));//PWM_L
 8002eba:	4b61      	ldr	r3, [pc, #388]	@ (8003040 <motor_control+0x1c8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800303c <motor_control+0x1c4>)
 8002ec8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002ecc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed0:	4b5c      	ldr	r3, [pc, #368]	@ (8003044 <motor_control+0x1cc>)
 8002ed2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eda:	4b5b      	ldr	r3, [pc, #364]	@ (8003048 <motor_control+0x1d0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee2:	ee17 2a90 	vmov	r2, s15
 8002ee6:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(Motor_L_A_GPIO_Port, Motor_L_B_Pin, GPIO_PIN_SET);
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002eee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ef2:	f004 fc97 	bl	8007824 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_L_B_GPIO_Port, Motor_L_A_Pin, GPIO_PIN_RESET);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f00:	f004 fc90 	bl	8007824 <HAL_GPIO_WritePin>
 8002f04:	e02e      	b.n	8002f64 <motor_control+0xec>

		}
		else
		{
			Motor_L.set_speed = pos_left;
 8002f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f0a:	f7fd fea5 	bl	8000c58 <__aeabi_d2f>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4a4a      	ldr	r2, [pc, #296]	@ (800303c <motor_control+0x1c4>)
 8002f12:	6513      	str	r3, [r2, #80]	@ 0x50
			PI_Loop(&Motor_L);
 8002f14:	4849      	ldr	r0, [pc, #292]	@ (800303c <motor_control+0x1c4>)
 8002f16:	f001 fc8b 	bl	8004830 <PI_Loop>

			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_4, (uint32_t)((ARR*Motor_L.speed) * GRUZIK.Speed_level));//PWM_L
 8002f1a:	4b49      	ldr	r3, [pc, #292]	@ (8003040 <motor_control+0x1c8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f26:	4b45      	ldr	r3, [pc, #276]	@ (800303c <motor_control+0x1c4>)
 8002f28:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002f2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f30:	4b44      	ldr	r3, [pc, #272]	@ (8003044 <motor_control+0x1cc>)
 8002f32:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3a:	4b43      	ldr	r3, [pc, #268]	@ (8003048 <motor_control+0x1d0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f42:	ee17 2a90 	vmov	r2, s15
 8002f46:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(Motor_L_A_GPIO_Port, Motor_L_B_Pin, GPIO_PIN_RESET);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f52:	f004 fc67 	bl	8007824 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_L_B_GPIO_Port, Motor_L_A_Pin, GPIO_PIN_SET);
 8002f56:	2201      	movs	r2, #1
 8002f58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f60:	f004 fc60 	bl	8007824 <HAL_GPIO_WritePin>
		}
		if (pos_right < 0 )
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f70:	f7fd fdec 	bl	8000b4c <__aeabi_dcmplt>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d030      	beq.n	8002fdc <motor_control+0x164>
		{
			Motor_R.set_speed = (pos_right * -1);
 8002f7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f7e:	f7fd fe6b 	bl	8000c58 <__aeabi_d2f>
 8002f82:	4603      	mov	r3, r0
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef1 7a67 	vneg.f32	s15, s15
 8002f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800304c <motor_control+0x1d4>)
 8002f8e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
			PI_Loop(&Motor_R);
 8002f92:	482e      	ldr	r0, [pc, #184]	@ (800304c <motor_control+0x1d4>)
 8002f94:	f001 fc4c 	bl	8004830 <PI_Loop>

			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, (uint32_t)((ARR*Motor_R.speed) * GRUZIK.Speed_level));//PWM_R
 8002f98:	4b29      	ldr	r3, [pc, #164]	@ (8003040 <motor_control+0x1c8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fa4:	4b29      	ldr	r3, [pc, #164]	@ (800304c <motor_control+0x1d4>)
 8002fa6:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002faa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fae:	4b25      	ldr	r3, [pc, #148]	@ (8003044 <motor_control+0x1cc>)
 8002fb0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb8:	4b23      	ldr	r3, [pc, #140]	@ (8003048 <motor_control+0x1d0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc0:	ee17 2a90 	vmov	r2, s15
 8002fc4:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(Motor_R_A_GPIO_Port, Motor_R_A_Pin, GPIO_PIN_SET);
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	2104      	movs	r1, #4
 8002fca:	4821      	ldr	r0, [pc, #132]	@ (8003050 <motor_control+0x1d8>)
 8002fcc:	f004 fc2a 	bl	8007824 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_R_B_GPIO_Port, Motor_R_B_Pin, GPIO_PIN_RESET);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2108      	movs	r1, #8
 8002fd4:	481e      	ldr	r0, [pc, #120]	@ (8003050 <motor_control+0x1d8>)
 8002fd6:	f004 fc25 	bl	8007824 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_R_B_GPIO_Port, Motor_R_B_Pin, GPIO_PIN_SET);
		}
	}
	#endif

}
 8002fda:	e02a      	b.n	8003032 <motor_control+0x1ba>
			Motor_R.set_speed = pos_right;
 8002fdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fe0:	f7fd fe3a 	bl	8000c58 <__aeabi_d2f>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4a19      	ldr	r2, [pc, #100]	@ (800304c <motor_control+0x1d4>)
 8002fe8:	6513      	str	r3, [r2, #80]	@ 0x50
			PI_Loop(&Motor_R);
 8002fea:	4818      	ldr	r0, [pc, #96]	@ (800304c <motor_control+0x1d4>)
 8002fec:	f001 fc20 	bl	8004830 <PI_Loop>
			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, (uint32_t)((ARR*Motor_R.speed) * GRUZIK.Speed_level));//PWM_R
 8002ff0:	4b13      	ldr	r3, [pc, #76]	@ (8003040 <motor_control+0x1c8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ffc:	4b13      	ldr	r3, [pc, #76]	@ (800304c <motor_control+0x1d4>)
 8002ffe:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003002:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003006:	4b0f      	ldr	r3, [pc, #60]	@ (8003044 <motor_control+0x1cc>)
 8003008:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800300c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003010:	4b0d      	ldr	r3, [pc, #52]	@ (8003048 <motor_control+0x1d0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003018:	ee17 2a90 	vmov	r2, s15
 800301c:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(Motor_R_A_GPIO_Port, Motor_R_A_Pin, GPIO_PIN_RESET);
 800301e:	2200      	movs	r2, #0
 8003020:	2104      	movs	r1, #4
 8003022:	480b      	ldr	r0, [pc, #44]	@ (8003050 <motor_control+0x1d8>)
 8003024:	f004 fbfe 	bl	8007824 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_R_B_GPIO_Port, Motor_R_B_Pin, GPIO_PIN_SET);
 8003028:	2201      	movs	r2, #1
 800302a:	2108      	movs	r1, #8
 800302c:	4808      	ldr	r0, [pc, #32]	@ (8003050 <motor_control+0x1d8>)
 800302e:	f004 fbf9 	bl	8007824 <HAL_GPIO_WritePin>
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200066dc 	.word	0x200066dc
 8003040:	20000000 	.word	0x20000000
 8003044:	20006690 	.word	0x20006690
 8003048:	20006990 	.word	0x20006990
 800304c:	20006778 	.word	0x20006778
 8003050:	48000800 	.word	0x48000800

08003054 <sharp_turn>:


void sharp_turn ()
{
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	af00      	add	r7, sp, #0

	if (Last_idle < 25)
 8003058:	4b30      	ldr	r3, [pc, #192]	@ (800311c <sharp_turn+0xc8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b18      	cmp	r3, #24
 800305e:	dc2d      	bgt.n	80030bc <sharp_turn+0x68>
	{
		if (Last_end == 1)
 8003060:	4b2f      	ldr	r3, [pc, #188]	@ (8003120 <sharp_turn+0xcc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d114      	bne.n	8003092 <sharp_turn+0x3e>
			motor_control(GRUZIK.Sharp_bend_speed_right, GRUZIK.Sharp_bend_speed_left);
 8003068:	4b2e      	ldr	r3, [pc, #184]	@ (8003124 <sharp_turn+0xd0>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fa91 	bl	8000594 <__aeabi_i2d>
 8003072:	4604      	mov	r4, r0
 8003074:	460d      	mov	r5, r1
 8003076:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <sharp_turn+0xd0>)
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fa8a 	bl	8000594 <__aeabi_i2d>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	ec43 2b11 	vmov	d1, r2, r3
 8003088:	ec45 4b10 	vmov	d0, r4, r5
 800308c:	f7ff fef4 	bl	8002e78 <motor_control>
		if (Last_end == 1)
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
		else
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
	}
}
 8003090:	e041      	b.n	8003116 <sharp_turn+0xc2>
			motor_control(GRUZIK.Sharp_bend_speed_left, GRUZIK.Sharp_bend_speed_right);
 8003092:	4b24      	ldr	r3, [pc, #144]	@ (8003124 <sharp_turn+0xd0>)
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fa7c 	bl	8000594 <__aeabi_i2d>
 800309c:	4604      	mov	r4, r0
 800309e:	460d      	mov	r5, r1
 80030a0:	4b20      	ldr	r3, [pc, #128]	@ (8003124 <sharp_turn+0xd0>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd fa75 	bl	8000594 <__aeabi_i2d>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	ec43 2b11 	vmov	d1, r2, r3
 80030b2:	ec45 4b10 	vmov	d0, r4, r5
 80030b6:	f7ff fedf 	bl	8002e78 <motor_control>
}
 80030ba:	e02c      	b.n	8003116 <sharp_turn+0xc2>
		if (Last_end == 1)
 80030bc:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <sharp_turn+0xcc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d114      	bne.n	80030ee <sharp_turn+0x9a>
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
 80030c4:	4b17      	ldr	r3, [pc, #92]	@ (8003124 <sharp_turn+0xd0>)
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa63 	bl	8000594 <__aeabi_i2d>
 80030ce:	4604      	mov	r4, r0
 80030d0:	460d      	mov	r5, r1
 80030d2:	4b14      	ldr	r3, [pc, #80]	@ (8003124 <sharp_turn+0xd0>)
 80030d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd fa5c 	bl	8000594 <__aeabi_i2d>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	ec43 2b11 	vmov	d1, r2, r3
 80030e4:	ec45 4b10 	vmov	d0, r4, r5
 80030e8:	f7ff fec6 	bl	8002e78 <motor_control>
}
 80030ec:	e013      	b.n	8003116 <sharp_turn+0xc2>
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
 80030ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <sharp_turn+0xd0>)
 80030f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fa4e 	bl	8000594 <__aeabi_i2d>
 80030f8:	4604      	mov	r4, r0
 80030fa:	460d      	mov	r5, r1
 80030fc:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <sharp_turn+0xd0>)
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd fa47 	bl	8000594 <__aeabi_i2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	ec43 2b11 	vmov	d1, r2, r3
 800310e:	ec45 4b10 	vmov	d0, r4, r5
 8003112:	f7ff feb1 	bl	8002e78 <motor_control>
}
 8003116:	bf00      	nop
 8003118:	bdb0      	pop	{r4, r5, r7, pc}
 800311a:	bf00      	nop
 800311c:	20006864 	.word	0x20006864
 8003120:	20006860 	.word	0x20006860
 8003124:	20006690 	.word	0x20006690

08003128 <QTR8_read>:
int QTR8_read ()
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 800312e:	2201      	movs	r2, #1
 8003130:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003134:	48bd      	ldr	r0, [pc, #756]	@ (800342c <QTR8_read+0x304>)
 8003136:	f004 fb75 	bl	8007824 <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 800313a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800313e:	48bc      	ldr	r0, [pc, #752]	@ (8003430 <QTR8_read+0x308>)
 8003140:	f7ff fe5e 	bl	8002e00 <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8003144:	2180      	movs	r1, #128	@ 0x80
 8003146:	48ba      	ldr	r0, [pc, #744]	@ (8003430 <QTR8_read+0x308>)
 8003148:	f7ff fe5a 	bl	8002e00 <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 800314c:	2140      	movs	r1, #64	@ 0x40
 800314e:	48b8      	ldr	r0, [pc, #736]	@ (8003430 <QTR8_read+0x308>)
 8003150:	f7ff fe56 	bl	8002e00 <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8003154:	2120      	movs	r1, #32
 8003156:	48b6      	ldr	r0, [pc, #728]	@ (8003430 <QTR8_read+0x308>)
 8003158:	f7ff fe52 	bl	8002e00 <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 800315c:	2110      	movs	r1, #16
 800315e:	48b4      	ldr	r0, [pc, #720]	@ (8003430 <QTR8_read+0x308>)
 8003160:	f7ff fe4e 	bl	8002e00 <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8003164:	2104      	movs	r1, #4
 8003166:	48b3      	ldr	r0, [pc, #716]	@ (8003434 <QTR8_read+0x30c>)
 8003168:	f7ff fe4a 	bl	8002e00 <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 800316c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003170:	48ae      	ldr	r0, [pc, #696]	@ (800342c <QTR8_read+0x304>)
 8003172:	f7ff fe45 	bl	8002e00 <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8003176:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800317a:	48ac      	ldr	r0, [pc, #688]	@ (800342c <QTR8_read+0x304>)
 800317c:	f7ff fe40 	bl	8002e00 <Set_Pin_Output>
	Set_Pin_Output(SENSOR9_GPIO_Port, SENSOR9_Pin);
 8003180:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003184:	48a9      	ldr	r0, [pc, #676]	@ (800342c <QTR8_read+0x304>)
 8003186:	f7ff fe3b 	bl	8002e00 <Set_Pin_Output>
	Set_Pin_Output(SENSOR10_GPIO_Port, SENSOR10_Pin);
 800318a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800318e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003192:	f7ff fe35 	bl	8002e00 <Set_Pin_Output>
	Set_Pin_Output(SENSOR11_GPIO_Port, SENSOR11_Pin);
 8003196:	2110      	movs	r1, #16
 8003198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800319c:	f7ff fe30 	bl	8002e00 <Set_Pin_Output>
	Set_Pin_Output(SENSOR12_GPIO_Port, SENSOR12_Pin);
 80031a0:	2120      	movs	r1, #32
 80031a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031a6:	f7ff fe2b 	bl	8002e00 <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 80031aa:	2201      	movs	r2, #1
 80031ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031b0:	489f      	ldr	r0, [pc, #636]	@ (8003430 <QTR8_read+0x308>)
 80031b2:	f004 fb37 	bl	8007824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 80031b6:	2201      	movs	r2, #1
 80031b8:	2180      	movs	r1, #128	@ 0x80
 80031ba:	489d      	ldr	r0, [pc, #628]	@ (8003430 <QTR8_read+0x308>)
 80031bc:	f004 fb32 	bl	8007824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 80031c0:	2201      	movs	r2, #1
 80031c2:	2140      	movs	r1, #64	@ 0x40
 80031c4:	489a      	ldr	r0, [pc, #616]	@ (8003430 <QTR8_read+0x308>)
 80031c6:	f004 fb2d 	bl	8007824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 80031ca:	2201      	movs	r2, #1
 80031cc:	2120      	movs	r1, #32
 80031ce:	4898      	ldr	r0, [pc, #608]	@ (8003430 <QTR8_read+0x308>)
 80031d0:	f004 fb28 	bl	8007824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 80031d4:	2201      	movs	r2, #1
 80031d6:	2110      	movs	r1, #16
 80031d8:	4895      	ldr	r0, [pc, #596]	@ (8003430 <QTR8_read+0x308>)
 80031da:	f004 fb23 	bl	8007824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 80031de:	2201      	movs	r2, #1
 80031e0:	2104      	movs	r1, #4
 80031e2:	4894      	ldr	r0, [pc, #592]	@ (8003434 <QTR8_read+0x30c>)
 80031e4:	f004 fb1e 	bl	8007824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 80031e8:	2201      	movs	r2, #1
 80031ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80031ee:	488f      	ldr	r0, [pc, #572]	@ (800342c <QTR8_read+0x304>)
 80031f0:	f004 fb18 	bl	8007824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 80031f4:	2201      	movs	r2, #1
 80031f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031fa:	488c      	ldr	r0, [pc, #560]	@ (800342c <QTR8_read+0x304>)
 80031fc:	f004 fb12 	bl	8007824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR9_GPIO_Port, SENSOR9_Pin, 1);
 8003200:	2201      	movs	r2, #1
 8003202:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003206:	4889      	ldr	r0, [pc, #548]	@ (800342c <QTR8_read+0x304>)
 8003208:	f004 fb0c 	bl	8007824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR10_GPIO_Port, SENSOR10_Pin, 1);
 800320c:	2201      	movs	r2, #1
 800320e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003216:	f004 fb05 	bl	8007824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR11_GPIO_Port, SENSOR11_Pin, 1);
 800321a:	2201      	movs	r2, #1
 800321c:	2110      	movs	r1, #16
 800321e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003222:	f004 faff 	bl	8007824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR12_GPIO_Port, SENSOR12_Pin, 1);
 8003226:	2201      	movs	r2, #1
 8003228:	2120      	movs	r1, #32
 800322a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800322e:	f004 faf9 	bl	8007824 <HAL_GPIO_WritePin>

	delay_us(10);
 8003232:	200a      	movs	r0, #10
 8003234:	f7ff fdca 	bl	8002dcc <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8003238:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800323c:	487c      	ldr	r0, [pc, #496]	@ (8003430 <QTR8_read+0x308>)
 800323e:	f7ff fdfd 	bl	8002e3c <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8003242:	2180      	movs	r1, #128	@ 0x80
 8003244:	487a      	ldr	r0, [pc, #488]	@ (8003430 <QTR8_read+0x308>)
 8003246:	f7ff fdf9 	bl	8002e3c <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 800324a:	2140      	movs	r1, #64	@ 0x40
 800324c:	4878      	ldr	r0, [pc, #480]	@ (8003430 <QTR8_read+0x308>)
 800324e:	f7ff fdf5 	bl	8002e3c <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8003252:	2120      	movs	r1, #32
 8003254:	4876      	ldr	r0, [pc, #472]	@ (8003430 <QTR8_read+0x308>)
 8003256:	f7ff fdf1 	bl	8002e3c <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 800325a:	2110      	movs	r1, #16
 800325c:	4874      	ldr	r0, [pc, #464]	@ (8003430 <QTR8_read+0x308>)
 800325e:	f7ff fded 	bl	8002e3c <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8003262:	2104      	movs	r1, #4
 8003264:	4873      	ldr	r0, [pc, #460]	@ (8003434 <QTR8_read+0x30c>)
 8003266:	f7ff fde9 	bl	8002e3c <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 800326a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800326e:	486f      	ldr	r0, [pc, #444]	@ (800342c <QTR8_read+0x304>)
 8003270:	f7ff fde4 	bl	8002e3c <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8003274:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003278:	486c      	ldr	r0, [pc, #432]	@ (800342c <QTR8_read+0x304>)
 800327a:	f7ff fddf 	bl	8002e3c <Set_Pin_Input>
	Set_Pin_Input(SENSOR9_GPIO_Port, SENSOR9_Pin);
 800327e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003282:	486a      	ldr	r0, [pc, #424]	@ (800342c <QTR8_read+0x304>)
 8003284:	f7ff fdda 	bl	8002e3c <Set_Pin_Input>
	Set_Pin_Input(SENSOR10_GPIO_Port, SENSOR10_Pin);
 8003288:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800328c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003290:	f7ff fdd4 	bl	8002e3c <Set_Pin_Input>
	Set_Pin_Input(SENSOR11_GPIO_Port, SENSOR11_Pin);
 8003294:	2110      	movs	r1, #16
 8003296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800329a:	f7ff fdcf 	bl	8002e3c <Set_Pin_Input>
	Set_Pin_Input(SENSOR12_GPIO_Port, SENSOR12_Pin);
 800329e:	2120      	movs	r1, #32
 80032a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032a4:	f7ff fdca 	bl	8002e3c <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 80032a8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80032ac:	f7ff fd8e 	bl	8002dcc <delay_us>
//	 uint8_t Message[124];
//	 sprintf((char*)Message,"S1: %d S2: %d S3: %d S4: %d S5: %d S6: %d S7: %d S8: %d S9: %d S10: %d S11: %d S12: %d \n\r", sensory[0],sensory[1],sensory[2],sensory[3],sensory[4],sensory[5],sensory[6],sensory[7],
//			 sensory[8],sensory[9],sensory[10],sensory[11]);
//	 HAL_UART_Transmit(&hlpuart1, Message, strlen((char*)Message), 100);

	Sensors_read = 0x000000000000;
 80032b0:	4b61      	ldr	r3, [pc, #388]	@ (8003438 <QTR8_read+0x310>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
	int pos = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
  int active = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) { // LEFT SIDE
 80032be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032c2:	485b      	ldr	r0, [pc, #364]	@ (8003430 <QTR8_read+0x308>)
 80032c4:	f004 fa96 	bl	80077f4 <HAL_GPIO_ReadPin>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01c      	beq.n	8003308 <QTR8_read+0x1e0>
		Sensors_read |= 0x000000000001;
 80032ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003438 <QTR8_read+0x310>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	4a58      	ldr	r2, [pc, #352]	@ (8003438 <QTR8_read+0x310>)
 80032d8:	6013      	str	r3, [r2, #0]
		pos += 1000 * SENSOR_SCALE;//1000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80032e0:	607b      	str	r3, [r7, #4]
		active++;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	603b      	str	r3, [r7, #0]
		if(HAL_GetTick() > (LastEndTimer + 50))
 80032e8:	f002 f92e 	bl	8005548 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b53      	ldr	r3, [pc, #332]	@ (800343c <QTR8_read+0x314>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3332      	adds	r3, #50	@ 0x32
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d907      	bls.n	8003308 <QTR8_read+0x1e0>
		{
			LastEndTimer = HAL_GetTick();
 80032f8:	f002 f926 	bl	8005548 <HAL_GetTick>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4a4f      	ldr	r2, [pc, #316]	@ (800343c <QTR8_read+0x314>)
 8003300:	6013      	str	r3, [r2, #0]
			Last_end = 1;
 8003302:	4b4f      	ldr	r3, [pc, #316]	@ (8003440 <QTR8_read+0x318>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]
		}

	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8003308:	2180      	movs	r1, #128	@ 0x80
 800330a:	4849      	ldr	r0, [pc, #292]	@ (8003430 <QTR8_read+0x308>)
 800330c:	f004 fa72 	bl	80077f4 <HAL_GPIO_ReadPin>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00c      	beq.n	8003330 <QTR8_read+0x208>
		Sensors_read |= 0x000000000010;
 8003316:	4b48      	ldr	r3, [pc, #288]	@ (8003438 <QTR8_read+0x310>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f043 0310 	orr.w	r3, r3, #16
 800331e:	4a46      	ldr	r2, [pc, #280]	@ (8003438 <QTR8_read+0x310>)
 8003320:	6013      	str	r3, [r2, #0]
		pos += 2000 * SENSOR_SCALE;//2000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003328:	607b      	str	r3, [r7, #4]
    active++;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	603b      	str	r3, [r7, #0]
    	//Last_end = 1;//1
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8003330:	2140      	movs	r1, #64	@ 0x40
 8003332:	483f      	ldr	r0, [pc, #252]	@ (8003430 <QTR8_read+0x308>)
 8003334:	f004 fa5e 	bl	80077f4 <HAL_GPIO_ReadPin>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00c      	beq.n	8003358 <QTR8_read+0x230>
		Sensors_read |= 0x000000000100;
 800333e:	4b3e      	ldr	r3, [pc, #248]	@ (8003438 <QTR8_read+0x310>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003346:	4a3c      	ldr	r2, [pc, #240]	@ (8003438 <QTR8_read+0x310>)
 8003348:	6013      	str	r3, [r2, #0]
		pos += 3000 * SENSOR_SCALE;//3000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8003350:	607b      	str	r3, [r7, #4]
    active++;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	603b      	str	r3, [r7, #0]
    	//Last_end = 1;//1
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8003358:	2120      	movs	r1, #32
 800335a:	4835      	ldr	r0, [pc, #212]	@ (8003430 <QTR8_read+0x308>)
 800335c:	f004 fa4a 	bl	80077f4 <HAL_GPIO_ReadPin>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00c      	beq.n	8003380 <QTR8_read+0x258>
		Sensors_read |= 0x000000001000;
 8003366:	4b34      	ldr	r3, [pc, #208]	@ (8003438 <QTR8_read+0x310>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800336e:	4a32      	ldr	r2, [pc, #200]	@ (8003438 <QTR8_read+0x310>)
 8003370:	6013      	str	r3, [r2, #0]
		pos += 4000 * SENSOR_SCALE;//4000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f503 637a 	add.w	r3, r3, #4000	@ 0xfa0
 8003378:	607b      	str	r3, [r7, #4]
    active++;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8003380:	2110      	movs	r1, #16
 8003382:	482b      	ldr	r0, [pc, #172]	@ (8003430 <QTR8_read+0x308>)
 8003384:	f004 fa36 	bl	80077f4 <HAL_GPIO_ReadPin>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00d      	beq.n	80033aa <QTR8_read+0x282>
		Sensors_read |= 0x000000010000;
 800338e:	4b2a      	ldr	r3, [pc, #168]	@ (8003438 <QTR8_read+0x310>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003396:	4a28      	ldr	r2, [pc, #160]	@ (8003438 <QTR8_read+0x310>)
 8003398:	6013      	str	r3, [r2, #0]
		pos += 5000 * SENSOR_SCALE;//5000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80033a0:	3308      	adds	r3, #8
 80033a2:	607b      	str	r3, [r7, #4]
    active++;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	3301      	adds	r3, #1
 80033a8:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 80033aa:	2104      	movs	r1, #4
 80033ac:	4821      	ldr	r0, [pc, #132]	@ (8003434 <QTR8_read+0x30c>)
 80033ae:	f004 fa21 	bl	80077f4 <HAL_GPIO_ReadPin>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <QTR8_read+0x2ac>
		Sensors_read |= 0x000000100000;
 80033b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003438 <QTR8_read+0x310>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <QTR8_read+0x310>)
 80033c2:	6013      	str	r3, [r2, #0]
		pos += 6000 * SENSOR_SCALE;//6000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 80033ca:	3310      	adds	r3, #16
 80033cc:	607b      	str	r3, [r7, #4]
    active++;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	3301      	adds	r3, #1
 80033d2:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 80033d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033d8:	4814      	ldr	r0, [pc, #80]	@ (800342c <QTR8_read+0x304>)
 80033da:	f004 fa0b 	bl	80077f4 <HAL_GPIO_ReadPin>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <QTR8_read+0x2d8>
		Sensors_read |= 0x000001000000;
 80033e4:	4b14      	ldr	r3, [pc, #80]	@ (8003438 <QTR8_read+0x310>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ec:	4a12      	ldr	r2, [pc, #72]	@ (8003438 <QTR8_read+0x310>)
 80033ee:	6013      	str	r3, [r2, #0]
		pos += 7000 * SENSOR_SCALE;//7000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f503 53da 	add.w	r3, r3, #6976	@ 0x1b40
 80033f6:	3318      	adds	r3, #24
 80033f8:	607b      	str	r3, [r7, #4]
    active++;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 8003400:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003404:	4809      	ldr	r0, [pc, #36]	@ (800342c <QTR8_read+0x304>)
 8003406:	f004 f9f5 	bl	80077f4 <HAL_GPIO_ReadPin>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d019      	beq.n	8003444 <QTR8_read+0x31c>
		Sensors_read |= 0x000010000000;
 8003410:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <QTR8_read+0x310>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003418:	4a07      	ldr	r2, [pc, #28]	@ (8003438 <QTR8_read+0x310>)
 800341a:	6013      	str	r3, [r2, #0]
		pos += 8000 * SENSOR_SCALE;//8000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 8003422:	607b      	str	r3, [r7, #4]
    active++;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	e00b      	b.n	8003444 <QTR8_read+0x31c>
 800342c:	48000800 	.word	0x48000800
 8003430:	48000400 	.word	0x48000400
 8003434:	48000c00 	.word	0x48000c00
 8003438:	20006814 	.word	0x20006814
 800343c:	2000686c 	.word	0x2000686c
 8003440:	20006860 	.word	0x20006860
  }
  if (HAL_GPIO_ReadPin(SENSOR9_GPIO_Port, SENSOR9_Pin)) {
 8003444:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003448:	4841      	ldr	r0, [pc, #260]	@ (8003550 <QTR8_read+0x428>)
 800344a:	f004 f9d3 	bl	80077f4 <HAL_GPIO_ReadPin>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <QTR8_read+0x344>
	   Sensors_read |= 0x000100000000;
 8003454:	4b3f      	ldr	r3, [pc, #252]	@ (8003554 <QTR8_read+0x42c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a3e      	ldr	r2, [pc, #248]	@ (8003554 <QTR8_read+0x42c>)
 800345a:	6013      	str	r3, [r2, #0]
	   pos += 9000 * SENSOR_SCALE;//8000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8003462:	3328      	adds	r3, #40	@ 0x28
 8003464:	607b      	str	r3, [r7, #4]
	active++;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	603b      	str	r3, [r7, #0]

  }
  if (HAL_GPIO_ReadPin(SENSOR10_GPIO_Port, SENSOR10_Pin)) {
 800346c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003470:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003474:	f004 f9be 	bl	80077f4 <HAL_GPIO_ReadPin>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <QTR8_read+0x36e>
	   Sensors_read |= 0x001000000000;
 800347e:	4b35      	ldr	r3, [pc, #212]	@ (8003554 <QTR8_read+0x42c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a34      	ldr	r2, [pc, #208]	@ (8003554 <QTR8_read+0x42c>)
 8003484:	6013      	str	r3, [r2, #0]
	   pos += 10000 * SENSOR_SCALE;//8000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800348c:	3310      	adds	r3, #16
 800348e:	607b      	str	r3, [r7, #4]
    active++;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	603b      	str	r3, [r7, #0]
	  // Last_end = 0;//0
  }
  if (HAL_GPIO_ReadPin(SENSOR11_GPIO_Port, SENSOR11_Pin)) {
 8003496:	2110      	movs	r1, #16
 8003498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800349c:	f004 f9aa 	bl	80077f4 <HAL_GPIO_ReadPin>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <QTR8_read+0x396>
	   Sensors_read |= 0x010000000000;
 80034a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003554 <QTR8_read+0x42c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003554 <QTR8_read+0x42c>)
 80034ac:	6013      	str	r3, [r2, #0]
	   pos += 11000 * SENSOR_SCALE;//8000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 80034b4:	3338      	adds	r3, #56	@ 0x38
 80034b6:	607b      	str	r3, [r7, #4]
    active++;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	3301      	adds	r3, #1
 80034bc:	603b      	str	r3, [r7, #0]
	  // Last_end = 0;//0
  }
  if (HAL_GPIO_ReadPin(SENSOR12_GPIO_Port, SENSOR12_Pin)) { // RIGHT SIDE
 80034be:	2120      	movs	r1, #32
 80034c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034c4:	f004 f996 	bl	80077f4 <HAL_GPIO_ReadPin>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01b      	beq.n	8003506 <QTR8_read+0x3de>
	   Sensors_read |= 0x100000000000;
 80034ce:	4b21      	ldr	r3, [pc, #132]	@ (8003554 <QTR8_read+0x42c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a20      	ldr	r2, [pc, #128]	@ (8003554 <QTR8_read+0x42c>)
 80034d4:	6013      	str	r3, [r2, #0]
	   pos += 12000 * SENSOR_SCALE;//8000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 80034dc:	3320      	adds	r3, #32
 80034de:	607b      	str	r3, [r7, #4]
       active++;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	603b      	str	r3, [r7, #0]

        if(HAL_GetTick() > (LastEndTimer + 50))//50
 80034e6:	f002 f82f 	bl	8005548 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003558 <QTR8_read+0x430>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3332      	adds	r3, #50	@ 0x32
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d907      	bls.n	8003506 <QTR8_read+0x3de>
		{
			LastEndTimer = HAL_GetTick();
 80034f6:	f002 f827 	bl	8005548 <HAL_GetTick>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4a16      	ldr	r2, [pc, #88]	@ (8003558 <QTR8_read+0x430>)
 80034fe:	6013      	str	r3, [r2, #0]
			Last_end = 0;
 8003500:	4b16      	ldr	r3, [pc, #88]	@ (800355c <QTR8_read+0x434>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
		}

  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800350c:	4810      	ldr	r0, [pc, #64]	@ (8003550 <QTR8_read+0x428>)
 800350e:	f004 f989 	bl	8007824 <HAL_GPIO_WritePin>

  actives = active;
 8003512:	4a13      	ldr	r2, [pc, #76]	@ (8003560 <QTR8_read+0x438>)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6013      	str	r3, [r2, #0]
	Position = pos/active;
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003520:	4a10      	ldr	r2, [pc, #64]	@ (8003564 <QTR8_read+0x43c>)
 8003522:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 8003524:	4b0e      	ldr	r3, [pc, #56]	@ (8003560 <QTR8_read+0x438>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d105      	bne.n	8003538 <QTR8_read+0x410>
		Last_idle++;
 800352c:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <QTR8_read+0x440>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	4a0d      	ldr	r2, [pc, #52]	@ (8003568 <QTR8_read+0x440>)
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e002      	b.n	800353e <QTR8_read+0x416>
	else
		Last_idle = 0;
 8003538:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <QTR8_read+0x440>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

	return pos/active;
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	48000800 	.word	0x48000800
 8003554:	20006814 	.word	0x20006814
 8003558:	2000686c 	.word	0x2000686c
 800355c:	20006860 	.word	0x20006860
 8003560:	20006868 	.word	0x20006868
 8003564:	20006818 	.word	0x20006818
 8003568:	20006864 	.word	0x20006864

0800356c <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 800356c:	b5b0      	push	{r4, r5, r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <forward_brake+0x40>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <forward_brake+0x18>
		sharp_turn();
 800357e:	f7ff fd69 	bl	8003054 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 8003582:	e00f      	b.n	80035a4 <forward_brake+0x38>
	  motor_control(pos_right, pos_left);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fd f805 	bl	8000594 <__aeabi_i2d>
 800358a:	4604      	mov	r4, r0
 800358c:	460d      	mov	r5, r1
 800358e:	6838      	ldr	r0, [r7, #0]
 8003590:	f7fd f800 	bl	8000594 <__aeabi_i2d>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	ec43 2b11 	vmov	d1, r2, r3
 800359c:	ec45 4b10 	vmov	d0, r4, r5
 80035a0:	f7ff fc6a 	bl	8002e78 <motor_control>
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bdb0      	pop	{r4, r5, r7, pc}
 80035ac:	20006868 	.word	0x20006868

080035b0 <past_errors>:

void past_errors (int error)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 80035b8:	2309      	movs	r3, #9
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e00b      	b.n	80035d6 <past_errors+0x26>
      Errors[i] = Errors[i-1];
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	4a0b      	ldr	r2, [pc, #44]	@ (80035f0 <past_errors+0x40>)
 80035c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80035c8:	4909      	ldr	r1, [pc, #36]	@ (80035f0 <past_errors+0x40>)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	dcf0      	bgt.n	80035be <past_errors+0xe>
  Errors[0] = error;
 80035dc:	4a04      	ldr	r2, [pc, #16]	@ (80035f0 <past_errors+0x40>)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6013      	str	r3, [r2, #0]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20006838 	.word	0x20006838

080035f4 <errors_sum>:

int errors_sum (int index, int abs)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  int sum = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	e01a      	b.n	800363e <errors_sum+0x4a>
  {
    if (abs == 1 && Errors[i] < 0)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d10d      	bne.n	800362a <errors_sum+0x36>
 800360e:	4a11      	ldr	r2, [pc, #68]	@ (8003654 <errors_sum+0x60>)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003616:	2b00      	cmp	r3, #0
 8003618:	da07      	bge.n	800362a <errors_sum+0x36>
      sum += -Errors[i];
 800361a:	4a0e      	ldr	r2, [pc, #56]	@ (8003654 <errors_sum+0x60>)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e006      	b.n	8003638 <errors_sum+0x44>
    else
      sum += Errors[i];
 800362a:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <errors_sum+0x60>)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4413      	add	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	3301      	adds	r3, #1
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	429a      	cmp	r2, r3
 8003644:	dbe0      	blt.n	8003608 <errors_sum+0x14>
  }
  return sum;
 8003646:	68fb      	ldr	r3, [r7, #12]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	20006838 	.word	0x20006838

08003658 <PID_control>:

void PID_control()
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 800365e:	f7ff fd63 	bl	8003128 <QTR8_read>
 8003662:	4603      	mov	r3, r0
 8003664:	81fb      	strh	r3, [r7, #14]
  int error = (6500 * SENSOR_SCALE) - position;
 8003666:	89fb      	ldrh	r3, [r7, #14]
 8003668:	f5c3 53cb 	rsb	r3, r3, #6496	@ 0x1960
 800366c:	3304      	adds	r3, #4
 800366e:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8003670:	68b8      	ldr	r0, [r7, #8]
 8003672:	f7ff ff9d 	bl	80035b0 <past_errors>

  P = error;
 8003676:	4a51      	ldr	r2, [pc, #324]	@ (80037bc <PID_control+0x164>)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6013      	str	r3, [r2, #0]
  GRUZIK.Error_P = P;
 800367c:	4b4f      	ldr	r3, [pc, #316]	@ (80037bc <PID_control+0x164>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003688:	4b4d      	ldr	r3, [pc, #308]	@ (80037c0 <PID_control+0x168>)
 800368a:	edc3 7a02 	vstr	s15, [r3, #8]
  I = errors_sum(5, 0);
 800368e:	2100      	movs	r1, #0
 8003690:	2005      	movs	r0, #5
 8003692:	f7ff ffaf 	bl	80035f4 <errors_sum>
 8003696:	4603      	mov	r3, r0
 8003698:	4a4a      	ldr	r2, [pc, #296]	@ (80037c4 <PID_control+0x16c>)
 800369a:	6013      	str	r3, [r2, #0]
  D = error - Last_error;
 800369c:	4b4a      	ldr	r3, [pc, #296]	@ (80037c8 <PID_control+0x170>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	4a49      	ldr	r2, [pc, #292]	@ (80037cc <PID_control+0x174>)
 80036a6:	6013      	str	r3, [r2, #0]
  GRUZIK.Error_D = D;
 80036a8:	4b48      	ldr	r3, [pc, #288]	@ (80037cc <PID_control+0x174>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	ee07 3a90 	vmov	s15, r3
 80036b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b4:	4b42      	ldr	r3, [pc, #264]	@ (80037c0 <PID_control+0x168>)
 80036b6:	edc3 7a03 	vstr	s15, [r3, #12]
  R = errors_sum(5, 1);
 80036ba:	2101      	movs	r1, #1
 80036bc:	2005      	movs	r0, #5
 80036be:	f7ff ff99 	bl	80035f4 <errors_sum>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4a42      	ldr	r2, [pc, #264]	@ (80037d0 <PID_control+0x178>)
 80036c6:	6013      	str	r3, [r2, #0]
  Last_error = error;
 80036c8:	4a3f      	ldr	r2, [pc, #252]	@ (80037c8 <PID_control+0x170>)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6013      	str	r3, [r2, #0]

  int motorspeed = P*GRUZIK.Kp + I*Ki + D*GRUZIK.Kd;
 80036ce:	4b3b      	ldr	r3, [pc, #236]	@ (80037bc <PID_control+0x164>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036da:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <PID_control+0x168>)
 80036dc:	edd3 7a00 	vldr	s15, [r3]
 80036e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036e4:	4b37      	ldr	r3, [pc, #220]	@ (80037c4 <PID_control+0x16c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036f0:	4b38      	ldr	r3, [pc, #224]	@ (80037d4 <PID_control+0x17c>)
 80036f2:	edd3 7a00 	vldr	s15, [r3]
 80036f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036fe:	4b33      	ldr	r3, [pc, #204]	@ (80037cc <PID_control+0x174>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800370a:	4b2d      	ldr	r3, [pc, #180]	@ (80037c0 <PID_control+0x168>)
 800370c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800371c:	ee17 3a90 	vmov	r3, s15
 8003720:	607b      	str	r3, [r7, #4]

  int motorspeedl = GRUZIK.Base_speed_L + motorspeed - R*Kr;
 8003722:	4b27      	ldr	r3, [pc, #156]	@ (80037c0 <PID_control+0x168>)
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	ee07 3a90 	vmov	s15, r3
 800372e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003732:	4b27      	ldr	r3, [pc, #156]	@ (80037d0 <PID_control+0x178>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800373e:	4b26      	ldr	r3, [pc, #152]	@ (80037d8 <PID_control+0x180>)
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003750:	ee17 3a90 	vmov	r3, s15
 8003754:	617b      	str	r3, [r7, #20]
  int motorspeedr = GRUZIK.Base_speed_R - motorspeed - R*Kr;
 8003756:	4b1a      	ldr	r3, [pc, #104]	@ (80037c0 <PID_control+0x168>)
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003766:	4b1a      	ldr	r3, [pc, #104]	@ (80037d0 <PID_control+0x178>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003772:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <PID_control+0x180>)
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800377c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003784:	ee17 3a90 	vmov	r3, s15
 8003788:	613b      	str	r3, [r7, #16]

  if (motorspeedl > GRUZIK.Max_speed_L)
 800378a:	4b0d      	ldr	r3, [pc, #52]	@ (80037c0 <PID_control+0x168>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	429a      	cmp	r2, r3
 8003792:	dd02      	ble.n	800379a <PID_control+0x142>
    motorspeedl = GRUZIK.Max_speed_L;
 8003794:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <PID_control+0x168>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	617b      	str	r3, [r7, #20]
  if (motorspeedr > GRUZIK.Max_speed_R)
 800379a:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <PID_control+0x168>)
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	dd02      	ble.n	80037aa <PID_control+0x152>
    motorspeedr = GRUZIK.Max_speed_R;
 80037a4:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <PID_control+0x168>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	613b      	str	r3, [r7, #16]

	forward_brake(motorspeedr, motorspeedl);
 80037aa:	6979      	ldr	r1, [r7, #20]
 80037ac:	6938      	ldr	r0, [r7, #16]
 80037ae:	f7ff fedd 	bl	800356c <forward_brake>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20006824 	.word	0x20006824
 80037c0:	20006690 	.word	0x20006690
 80037c4:	20006828 	.word	0x20006828
 80037c8:	20006834 	.word	0x20006834
 80037cc:	2000682c 	.word	0x2000682c
 80037d0:	20006830 	.word	0x20006830
 80037d4:	2000681c 	.word	0x2000681c
 80037d8:	20006820 	.word	0x20006820

080037dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037e0:	b672      	cpsid	i
}
 80037e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037e4:	bf00      	nop
 80037e6:	e7fd      	b.n	80037e4 <Error_Handler+0x8>

080037e8 <MapUpdate>:

//-- Line Follower -- //
extern LineFollower_t GRUZIK;

void MapUpdate(Map_t *map, motor_t *MotorLeft, motor_t *MotorRight)
{
 80037e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ec:	ed2d 8b02 	vpush	{d8}
 80037f0:	b0b4      	sub	sp, #208	@ 0xd0
 80037f2:	af0c      	add	r7, sp, #48	@ 0x30
 80037f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80037f6:	6239      	str	r1, [r7, #32]
 80037f8:	61fa      	str	r2, [r7, #28]
	if(map->Mapping == 1)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	f040 8240 	bne.w	8003c84 <MapUpdate+0x49c>
	{
		map->AlhphaOri = 1; //100% IMU 0% encoders
 8003804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003806:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800380a:	f603 631c 	addw	r3, r3, #3612	@ 0xe1c
 800380e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003812:	601a      	str	r2, [r3, #0]
		uint8_t buffer[100];

		//(3.1) -- Save XY
		map->PreviousXri = map->Xri;
 8003814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003816:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800381a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003826:	f603 6304 	addw	r3, r3, #3588	@ 0xe04
 800382a:	601a      	str	r2, [r3, #0]
		map->PreviousYri = map->Yri;
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003832:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800383e:	f603 630c 	addw	r3, r3, #3596	@ 0xe0c
 8003842:	601a      	str	r2, [r3, #0]

		map->PreviousPci[0] = map->Pci[0];
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800384a:	f603 632c 	addw	r3, r3, #3628	@ 0xe2c
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003852:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003856:	f603 6334 	addw	r3, r3, #3636	@ 0xe34
 800385a:	601a      	str	r2, [r3, #0]
		map->PreviousPci[1] = map->Pci[1];
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003862:	f503 6363 	add.w	r3, r3, #3632	@ 0xe30
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800386e:	f603 6338 	addw	r3, r3, #3640	@ 0xe38
 8003872:	601a      	str	r2, [r3, #0]

		//(2.11) -- Translation In Measurement
		float Ti = (MotorLeft->LpfDistanceInMeasurement + MotorRight->LpfDistanceInMeasurement) / 2;
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003884:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003888:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800388c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		//(2.12) -- Rotation In Measurement
		float Ri = (MotorRight->LpfDistanceInMeasurement - MotorLeft->LpfDistanceInMeasurement) / (MAIN_PCB_LENGTH * 2 * 1.085);//1.085
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800389c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a0:	ee17 0a90 	vmov	r0, s15
 80038a4:	f7fc fe88 	bl	80005b8 <__aeabi_f2d>
 80038a8:	f20f 4308 	addw	r3, pc, #1032	@ 0x408
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f7fd f804 	bl	80008bc <__aeabi_ddiv>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	f7fd f9cc 	bl	8000c58 <__aeabi_d2f>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

		//(2.13) -- Main PCB Position
		map->Ori = map->Ori + (((1-map->AlhphaOri)*Ri) + (map->OriIMU * map->AlhphaOri));
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80038cc:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 80038d0:	ed93 7a00 	vldr	s14, [r3]
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80038da:	f603 631c 	addw	r3, r3, #3612	@ 0xe1c
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80038ea:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80038ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80038f8:	f603 6318 	addw	r3, r3, #3608	@ 0xe18
 80038fc:	ed93 6a00 	vldr	s12, [r3]
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003906:	f603 631c 	addw	r3, r3, #3612	@ 0xe1c
 800390a:	edd3 7a00 	vldr	s15, [r3]
 800390e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003920:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8003924:	edc3 7a00 	vstr	s15, [r3]
		map->Xri = map->Xri + ((Ti * cosf(map->Ori))/2);
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800392e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003932:	ed93 8a00 	vldr	s16, [r3]
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800393c:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8003940:	edd3 7a00 	vldr	s15, [r3]
 8003944:	eeb0 0a67 	vmov.f32	s0, s15
 8003948:	f011 fc98 	bl	801527c <cosf>
 800394c:	eeb0 7a40 	vmov.f32	s14, s0
 8003950:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003958:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800395c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003960:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800396a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800396e:	edc3 7a00 	vstr	s15, [r3]
		map->Yri = map->Yri + ((Ti * sinf(map->Ori)))/2;
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003978:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 800397c:	ed93 8a00 	vldr	s16, [r3]
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003986:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 800398a:	edd3 7a00 	vldr	s15, [r3]
 800398e:	eeb0 0a67 	vmov.f32	s0, s15
 8003992:	f011 fcb7 	bl	8015304 <sinf>
 8003996:	eeb0 7a40 	vmov.f32	s14, s0
 800399a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800399e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039a2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80039a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039aa:	ee78 7a27 	vadd.f32	s15, s16, s15
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80039b4:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 80039b8:	edc3 7a00 	vstr	s15, [r3]

		//(2.17) -- Sensor Position
		map->Pci[0] = map->Xri + (MAIN_TO_SENSOR_LENGTH * cosf(map->Ori));
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80039c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80039c6:	ed93 8a00 	vldr	s16, [r3]
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80039d0:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	eeb0 0a67 	vmov.f32	s0, s15
 80039dc:	f011 fc4e 	bl	801527c <cosf>
 80039e0:	eef0 7a40 	vmov.f32	s15, s0
 80039e4:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8003ca0 <MapUpdate+0x4b8>
 80039e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039ec:	ee78 7a27 	vadd.f32	s15, s16, s15
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80039f6:	f603 632c 	addw	r3, r3, #3628	@ 0xe2c
 80039fa:	edc3 7a00 	vstr	s15, [r3]
		map->Pci[1] = map->Yri + (MAIN_TO_SENSOR_LENGTH * sinf(map->Ori));
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003a04:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 8003a08:	ed93 8a00 	vldr	s16, [r3]
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003a12:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8003a16:	edd3 7a00 	vldr	s15, [r3]
 8003a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a1e:	f011 fc71 	bl	8015304 <sinf>
 8003a22:	eef0 7a40 	vmov.f32	s15, s0
 8003a26:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8003ca0 <MapUpdate+0x4b8>
 8003a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a2e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003a38:	f503 6363 	add.w	r3, r3, #3632	@ 0xe30
 8003a3c:	edc3 7a00 	vstr	s15, [r3]

		//Curvature of the route for sensor
		//(3.1) & (3.2)
		float dx = map->Pci[0] - map->PreviousPci[0];
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003a46:	f603 632c 	addw	r3, r3, #3628	@ 0xe2c
 8003a4a:	ed93 7a00 	vldr	s14, [r3]
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003a54:	f603 6334 	addw	r3, r3, #3636	@ 0xe34
 8003a58:	edd3 7a00 	vldr	s15, [r3]
 8003a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a60:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
		float dy = map->Pci[1] - map->PreviousPci[1];
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003a6a:	f503 6363 	add.w	r3, r3, #3632	@ 0xe30
 8003a6e:	ed93 7a00 	vldr	s14, [r3]
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003a78:	f603 6338 	addw	r3, r3, #3640	@ 0xe38
 8003a7c:	edd3 7a00 	vldr	s15, [r3]
 8003a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a84:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		Ti = sqrt(pow(dx, 2) + pow(dy, 2));
 8003a88:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003a8c:	f7fc fd94 	bl	80005b8 <__aeabi_f2d>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	ed9f 1b80 	vldr	d1, [pc, #512]	@ 8003c98 <MapUpdate+0x4b0>
 8003a98:	ec43 2b10 	vmov	d0, r2, r3
 8003a9c:	f011 fb32 	bl	8015104 <pow>
 8003aa0:	ec55 4b10 	vmov	r4, r5, d0
 8003aa4:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8003aa8:	f7fc fd86 	bl	80005b8 <__aeabi_f2d>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	ed9f 1b79 	vldr	d1, [pc, #484]	@ 8003c98 <MapUpdate+0x4b0>
 8003ab4:	ec43 2b10 	vmov	d0, r2, r3
 8003ab8:	f011 fb24 	bl	8015104 <pow>
 8003abc:	ec53 2b10 	vmov	r2, r3, d0
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	f7fc fc1a 	bl	80002fc <__adddf3>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	ec43 2b17 	vmov	d7, r2, r3
 8003ad0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ad4:	eef0 0a67 	vmov.f32	s1, s15
 8003ad8:	f011 fb84 	bl	80151e4 <sqrt>
 8003adc:	ec53 2b10 	vmov	r2, r3, d0
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f7fd f8b8 	bl	8000c58 <__aeabi_d2f>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		map->Si = map->Si + Ti;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003af4:	f603 633c 	addw	r3, r3, #3644	@ 0xe3c
 8003af8:	ed93 7a00 	vldr	s14, [r3]
 8003afc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003b0a:	f603 633c 	addw	r3, r3, #3644	@ 0xe3c
 8003b0e:	edc3 7a00 	vstr	s15, [r3]

		//(3.3)
		map->PreviousAi = map->Ai;
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003b18:	f503 6364 	add.w	r3, r3, #3648	@ 0xe40
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003b24:	f603 6344 	addw	r3, r3, #3652	@ 0xe44
 8003b28:	601a      	str	r2, [r3, #0]
		map->Ai = atan2(dy,dx);
 8003b2a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8003b2e:	f7fc fd43 	bl	80005b8 <__aeabi_f2d>
 8003b32:	4604      	mov	r4, r0
 8003b34:	460d      	mov	r5, r1
 8003b36:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003b3a:	f7fc fd3d 	bl	80005b8 <__aeabi_f2d>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	ec43 2b11 	vmov	d1, r2, r3
 8003b46:	ec45 4b10 	vmov	d0, r4, r5
 8003b4a:	f011 fad9 	bl	8015100 <atan2>
 8003b4e:	ec53 2b10 	vmov	r2, r3, d0
 8003b52:	4610      	mov	r0, r2
 8003b54:	4619      	mov	r1, r3
 8003b56:	f7fd f87f 	bl	8000c58 <__aeabi_d2f>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003b62:	f503 6364 	add.w	r3, r3, #3648	@ 0xe40
 8003b66:	601a      	str	r2, [r3, #0]

		//(3.4) & (3.5)
		float dAi = map->Ai - map->PreviousAi;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003b6e:	f503 6364 	add.w	r3, r3, #3648	@ 0xe40
 8003b72:	ed93 7a00 	vldr	s14, [r3]
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003b7c:	f603 6344 	addw	r3, r3, #3652	@ 0xe44
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b88:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		if(Ti != 0)
 8003b8c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003b90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b98:	d00c      	beq.n	8003bb4 <MapUpdate+0x3cc>
		{
			map->Ki = dAi / Ti;
 8003b9a:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8003b9e:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8003ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003bac:	f603 6348 	addw	r3, r3, #3656	@ 0xe48
 8003bb0:	edc3 7a00 	vstr	s15, [r3]
		}

		sprintf((char*)buffer, " %0.3f	%0.3f	%0.3f	%0.3f	%0.3f	%0.3f	%0.3f \n", map->Xri, map->Yri, map->Pci[0], map->Pci[1], (map->Ori / 0.01745329251f), GRUZIK.Error_P,GRUZIK.Error_D);
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003bba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fc fcf9 	bl	80005b8 <__aeabi_f2d>
 8003bc6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003bd0:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fc fcee 	bl	80005b8 <__aeabi_f2d>
 8003bdc:	4680      	mov	r8, r0
 8003bde:	4689      	mov	r9, r1
 8003be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be2:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003be6:	f603 632c 	addw	r3, r3, #3628	@ 0xe2c
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fc fce3 	bl	80005b8 <__aeabi_f2d>
 8003bf2:	4682      	mov	sl, r0
 8003bf4:	468b      	mov	fp, r1
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003bfc:	f503 6363 	add.w	r3, r3, #3632	@ 0xe30
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fcd8 	bl	80005b8 <__aeabi_f2d>
 8003c08:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003c12:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8003c16:	edd3 7a00 	vldr	s15, [r3]
 8003c1a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003ca4 <MapUpdate+0x4bc>
 8003c1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c22:	ee16 0a90 	vmov	r0, s13
 8003c26:	f7fc fcc7 	bl	80005b8 <__aeabi_f2d>
 8003c2a:	e9c7 0100 	strd	r0, r1, [r7]
 8003c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca8 <MapUpdate+0x4c0>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc fcc0 	bl	80005b8 <__aeabi_f2d>
 8003c38:	4604      	mov	r4, r0
 8003c3a:	460d      	mov	r5, r1
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca8 <MapUpdate+0x4c0>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fc fcb9 	bl	80005b8 <__aeabi_f2d>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003c4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8003c52:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003c56:	ed97 7b00 	vldr	d7, [r7]
 8003c5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003c5e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003c62:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003c66:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003c6a:	e9cd 8900 	strd	r8, r9, [sp]
 8003c6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c72:	490e      	ldr	r1, [pc, #56]	@ (8003cac <MapUpdate+0x4c4>)
 8003c74:	f00e fc30 	bl	80124d8 <siprintf>
		f_printf(&SdCardFile, (char*)buffer);
 8003c78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	480c      	ldr	r0, [pc, #48]	@ (8003cb0 <MapUpdate+0x4c8>)
 8003c80:	f00c fe86 	bl	8010990 <f_printf>
	}
}
 8003c84:	bf00      	nop
 8003c86:	37a0      	adds	r7, #160	@ 0xa0
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	ecbd 8b02 	vpop	{d8}
 8003c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c92:	bf00      	nop
 8003c94:	f3af 8000 	nop.w
 8003c98:	00000000 	.word	0x00000000
 8003c9c:	40000000 	.word	0x40000000
 8003ca0:	3e23d70a 	.word	0x3e23d70a
 8003ca4:	3c8efa35 	.word	0x3c8efa35
 8003ca8:	20006690 	.word	0x20006690
 8003cac:	08017438 	.word	0x08017438
 8003cb0:	2000643c 	.word	0x2000643c
 8003cb4:	2947ae14 	.word	0x2947ae14
 8003cb8:	3fd586c2 	.word	0x3fd586c2
 8003cbc:	00000000 	.word	0x00000000

08003cc0 <normalize_angle>:
float normalize_angle(float angle)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	ed87 0a01 	vstr	s0, [r7, #4]
    while (angle >  M_PI) angle -= 2.0f * M_PI;
 8003cca:	e00f      	b.n	8003cec <normalize_angle+0x2c>
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7fc fc73 	bl	80005b8 <__aeabi_f2d>
 8003cd2:	a31f      	add	r3, pc, #124	@ (adr r3, 8003d50 <normalize_angle+0x90>)
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f7fc fb0e 	bl	80002f8 <__aeabi_dsub>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f7fc ffb8 	bl	8000c58 <__aeabi_d2f>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7fc fc63 	bl	80005b8 <__aeabi_f2d>
 8003cf2:	a319      	add	r3, pc, #100	@ (adr r3, 8003d58 <normalize_angle+0x98>)
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f7fc ff46 	bl	8000b88 <__aeabi_dcmpgt>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e4      	bne.n	8003ccc <normalize_angle+0xc>
    while (angle <= -M_PI) angle += 2.0f * M_PI;
 8003d02:	e00f      	b.n	8003d24 <normalize_angle+0x64>
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7fc fc57 	bl	80005b8 <__aeabi_f2d>
 8003d0a:	a311      	add	r3, pc, #68	@ (adr r3, 8003d50 <normalize_angle+0x90>)
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f7fc faf4 	bl	80002fc <__adddf3>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f7fc ff9c 	bl	8000c58 <__aeabi_d2f>
 8003d20:	4603      	mov	r3, r0
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7fc fc47 	bl	80005b8 <__aeabi_f2d>
 8003d2a:	a30d      	add	r3, pc, #52	@ (adr r3, 8003d60 <normalize_angle+0xa0>)
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f7fc ff16 	bl	8000b60 <__aeabi_dcmple>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e4      	bne.n	8003d04 <normalize_angle+0x44>
    return angle;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	ee07 3a90 	vmov	s15, r3
}
 8003d40:	eeb0 0a67 	vmov.f32	s0, s15
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	f3af 8000 	nop.w
 8003d50:	54442d18 	.word	0x54442d18
 8003d54:	401921fb 	.word	0x401921fb
 8003d58:	54442d18 	.word	0x54442d18
 8003d5c:	400921fb 	.word	0x400921fb
 8003d60:	54442d18 	.word	0x54442d18
 8003d64:	c00921fb 	.word	0xc00921fb

08003d68 <ReadMapLine>:
static void ReadMapLine(Map_t *map)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08e      	sub	sp, #56	@ 0x38
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

	if(FatFsResult != FR_OK)
 8003d70:	4b63      	ldr	r3, [pc, #396]	@ (8003f00 <ReadMapLine+0x198>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f040 80bf 	bne.w	8003ef8 <ReadMapLine+0x190>
		// 1 is how many chars do we want to read
		//idea is to read one line we have to search for /n
		UINT len;
		uint8_t data[32];
		uint8_t sample;
		uint8_t i = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		do
		{
			f_read(&SdCardFile, &sample, 1, &len);
 8003d80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d84:	f107 012b 	add.w	r1, r7, #43	@ 0x2b
 8003d88:	2201      	movs	r2, #1
 8003d8a:	485e      	ldr	r0, [pc, #376]	@ (8003f04 <ReadMapLine+0x19c>)
 8003d8c:	f00c fa2c 	bl	80101e8 <f_read>
			/*If there is no points in map file then stop the robot*/
			if(len == 0)
 8003d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d134      	bne.n	8003e00 <ReadMapLine+0x98>
			{
				/*For next 3s drive slowly using PID because map is done*/
				map->Mapping = 0;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
				GRUZIK.DrivingOnMap = 0;
 8003d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
				GRUZIK.UnMappingDone = 1;
 8003da4:	4b58      	ldr	r3, [pc, #352]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
				GRUZIK.blockinterrups = 1; // blocks un-mapping and mapping
 8003dac:	4b56      	ldr	r3, [pc, #344]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

				/*Set values for PID*/
				GRUZIK.Kp = 0.015;
 8003db4:	4b54      	ldr	r3, [pc, #336]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003db6:	4a55      	ldr	r2, [pc, #340]	@ (8003f0c <ReadMapLine+0x1a4>)
 8003db8:	601a      	str	r2, [r3, #0]
				GRUZIK.Kd = 0.085;
 8003dba:	4b53      	ldr	r3, [pc, #332]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003dbc:	4a54      	ldr	r2, [pc, #336]	@ (8003f10 <ReadMapLine+0x1a8>)
 8003dbe:	605a      	str	r2, [r3, #4]

				GRUZIK.Base_speed_R = 25;
 8003dc0:	4b51      	ldr	r3, [pc, #324]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003dc2:	2219      	movs	r2, #25
 8003dc4:	611a      	str	r2, [r3, #16]
				GRUZIK.Base_speed_L = 25;
 8003dc6:	4b50      	ldr	r3, [pc, #320]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003dc8:	2219      	movs	r2, #25
 8003dca:	615a      	str	r2, [r3, #20]
				GRUZIK.Max_speed_R = 25;
 8003dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003dce:	2219      	movs	r2, #25
 8003dd0:	619a      	str	r2, [r3, #24]
				GRUZIK.Max_speed_L = 25;
 8003dd2:	4b4d      	ldr	r3, [pc, #308]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003dd4:	2219      	movs	r2, #25
 8003dd6:	61da      	str	r2, [r3, #28]

				/*Sharp turn speed*/
				GRUZIK.Sharp_bend_speed_right= -40;
 8003dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003dda:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 8003dde:	621a      	str	r2, [r3, #32]
				GRUZIK.Sharp_bend_speed_left= 85;
 8003de0:	4b49      	ldr	r3, [pc, #292]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003de2:	2255      	movs	r2, #85	@ 0x55
 8003de4:	625a      	str	r2, [r3, #36]	@ 0x24
				GRUZIK.Bend_speed_right= -50;
 8003de6:	4b48      	ldr	r3, [pc, #288]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003de8:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8003dec:	629a      	str	r2, [r3, #40]	@ 0x28
				GRUZIK.Bend_speed_left= 90;
 8003dee:	4b46      	ldr	r3, [pc, #280]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003df0:	225a      	movs	r2, #90	@ 0x5a
 8003df2:	62da      	str	r2, [r3, #44]	@ 0x2c

				GRUZIK.DoneUnMappingTimer = HAL_GetTick();
 8003df4:	f001 fba8 	bl	8005548 <HAL_GetTick>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4a43      	ldr	r2, [pc, #268]	@ (8003f08 <ReadMapLine+0x1a0>)
 8003dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dfe:	e07b      	b.n	8003ef8 <ReadMapLine+0x190>

				/*From now only reset of the micro-controller will allow next cycle of un-mapping*/
				return;
			}
			if(sample == '\n')
 8003e00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e04:	2b0a      	cmp	r3, #10
 8003e06:	d107      	bne.n	8003e18 <ReadMapLine+0xb0>
			{
				data[i] = 0;
 8003e08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003e0c:	3338      	adds	r3, #56	@ 0x38
 8003e0e:	443b      	add	r3, r7
 8003e10:	2200      	movs	r2, #0
 8003e12:	f803 2c30 	strb.w	r2, [r3, #-48]
 8003e16:	e007      	b.n	8003e28 <ReadMapLine+0xc0>
			}
			else
			{
				data[i] = sample;
 8003e18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003e1c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003e20:	3338      	adds	r3, #56	@ 0x38
 8003e22:	443b      	add	r3, r7
 8003e24:	f803 2c30 	strb.w	r2, [r3, #-48]
			}
			i++;
 8003e28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}while(sample != '\n');
 8003e32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e36:	2b0a      	cmp	r3, #10
 8003e38:	d1a2      	bne.n	8003d80 <ReadMapLine+0x18>

		//Read X parameter from line
		//char *ParsePointer = strtok((char*)data, "		");
		char *ParsePointer = strtok((char*)data, " ");
 8003e3a:	f107 0308 	add.w	r3, r7, #8
 8003e3e:	4935      	ldr	r1, [pc, #212]	@ (8003f14 <ReadMapLine+0x1ac>)
 8003e40:	4618      	mov	r0, r3
 8003e42:	f00e fbc9 	bl	80125d8 <strtok>
 8003e46:	6338      	str	r0, [r7, #48]	@ 0x30

		if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8003e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <ReadMapLine+0x114>
 8003e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e52:	f7fc fa45 	bl	80002e0 <strlen>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b1f      	cmp	r3, #31
 8003e5a:	d80f      	bhi.n	8003e7c <ReadMapLine+0x114>
		{
			map->SetX = atof(ParsePointer);
 8003e5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e5e:	f00d f810 	bl	8010e82 <atof>
 8003e62:	ec53 2b10 	vmov	r2, r3, d0
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f7fc fef5 	bl	8000c58 <__aeabi_d2f>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003e76:	f603 634c 	addw	r3, r3, #3660	@ 0xe4c
 8003e7a:	601a      	str	r2, [r3, #0]
		}

		//Read Y parameter from line
		ParsePointer = strtok(NULL, " ");
 8003e7c:	4925      	ldr	r1, [pc, #148]	@ (8003f14 <ReadMapLine+0x1ac>)
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f00e fbaa 	bl	80125d8 <strtok>
 8003e84:	6338      	str	r0, [r7, #48]	@ 0x30

		if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d015      	beq.n	8003eba <ReadMapLine+0x152>
 8003e8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e90:	f7fc fa26 	bl	80002e0 <strlen>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b1f      	cmp	r3, #31
 8003e98:	d80f      	bhi.n	8003eba <ReadMapLine+0x152>
		{
			map->SetY = atof(ParsePointer);
 8003e9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e9c:	f00c fff1 	bl	8010e82 <atof>
 8003ea0:	ec53 2b10 	vmov	r2, r3, d0
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	f7fc fed6 	bl	8000c58 <__aeabi_d2f>
 8003eac:	4602      	mov	r2, r0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003eb4:	f503 6365 	add.w	r3, r3, #3664	@ 0xe50
 8003eb8:	601a      	str	r2, [r3, #0]
		}

		//Read speed parameter from line
		ParsePointer = strtok(NULL, " ");
 8003eba:	4916      	ldr	r1, [pc, #88]	@ (8003f14 <ReadMapLine+0x1ac>)
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f00e fb8b 	bl	80125d8 <strtok>
 8003ec2:	6338      	str	r0, [r7, #48]	@ 0x30

		if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d015      	beq.n	8003ef8 <ReadMapLine+0x190>
 8003ecc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ece:	f7fc fa07 	bl	80002e0 <strlen>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b1f      	cmp	r3, #31
 8003ed6:	d80f      	bhi.n	8003ef8 <ReadMapLine+0x190>
		{
			//map->SetSpeed = atof(ParsePointer); //:TODO: odmien to zeby nie bylo podzielone przez dwa przy odczycie
			map->SetSpeed = atof(ParsePointer);
 8003ed8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003eda:	f00c ffd2 	bl	8010e82 <atof>
 8003ede:	ec53 2b10 	vmov	r2, r3, d0
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f7fc feb7 	bl	8000c58 <__aeabi_d2f>
 8003eea:	4602      	mov	r2, r0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003ef2:	f603 6358 	addw	r3, r3, #3672	@ 0xe58
 8003ef6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8003ef8:	3738      	adds	r7, #56	@ 0x38
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20006208 	.word	0x20006208
 8003f04:	2000643c 	.word	0x2000643c
 8003f08:	20006690 	.word	0x20006690
 8003f0c:	3c75c28f 	.word	0x3c75c28f
 8003f10:	3dae147b 	.word	0x3dae147b
 8003f14:	08017468 	.word	0x08017468

08003f18 <DriveOnMap>:
void DriveOnMap(Map_t *map, motor_t *MotorLeft, motor_t *MotorRight)
{
 8003f18:	b5b0      	push	{r4, r5, r7, lr}
 8003f1a:	ed2d 8b02 	vpush	{d8}
 8003f1e:	b08a      	sub	sp, #40	@ 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
	map->AlhphaOri = 1; //100% IMU 0% encoders
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003f2e:	f603 631c 	addw	r3, r3, #3612	@ 0xe1c
 8003f32:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003f36:	601a      	str	r2, [r3, #0]

	//(3.1) -- Save XY
	map->PreviousXri = map->Xri;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003f3e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003f4a:	f603 6304 	addw	r3, r3, #3588	@ 0xe04
 8003f4e:	601a      	str	r2, [r3, #0]
	map->PreviousYri = map->Yri;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003f56:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003f62:	f603 630c 	addw	r3, r3, #3596	@ 0xe0c
 8003f66:	601a      	str	r2, [r3, #0]

	map->PreviousPci[0] = map->Pci[0];
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003f6e:	f603 632c 	addw	r3, r3, #3628	@ 0xe2c
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003f7a:	f603 6334 	addw	r3, r3, #3636	@ 0xe34
 8003f7e:	601a      	str	r2, [r3, #0]
	map->PreviousPci[1] = map->Pci[1];
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003f86:	f503 6363 	add.w	r3, r3, #3632	@ 0xe30
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003f92:	f603 6338 	addw	r3, r3, #3640	@ 0xe38
 8003f96:	601a      	str	r2, [r3, #0]

	//(2.11) -- Translation In Measurement
	float Ti = (MotorLeft->LpfDistanceInMeasurement + MotorRight->LpfDistanceInMeasurement) / 2;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003fa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fa8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fb0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	//(2.12) -- Rotation In Measurement
	float Ri = (MotorRight->LpfDistanceInMeasurement - MotorLeft->LpfDistanceInMeasurement) / (MAIN_PCB_LENGTH * 2 * 1.085);//1.085
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fc4:	ee17 0a90 	vmov	r0, s15
 8003fc8:	f7fc faf6 	bl	80005b8 <__aeabi_f2d>
 8003fcc:	a3f2      	add	r3, pc, #968	@ (adr r3, 8004398 <DriveOnMap+0x480>)
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	f7fc fc73 	bl	80008bc <__aeabi_ddiv>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f7fc fe3b 	bl	8000c58 <__aeabi_d2f>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	623b      	str	r3, [r7, #32]

	//(2.13) -- Main PCB Position
	map->Ori = map->Ori + (((1-map->AlhphaOri)*Ri) + (map->OriIMU * map->AlhphaOri));
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003fec:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8003ff0:	ed93 7a00 	vldr	s14, [r3]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003ffa:	f603 631c 	addw	r3, r3, #3612	@ 0xe1c
 8003ffe:	edd3 7a00 	vldr	s15, [r3]
 8004002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004006:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800400a:	edd7 7a08 	vldr	s15, [r7, #32]
 800400e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004018:	f603 6318 	addw	r3, r3, #3608	@ 0xe18
 800401c:	ed93 6a00 	vldr	s12, [r3]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004026:	f603 631c 	addw	r3, r3, #3612	@ 0xe1c
 800402a:	edd3 7a00 	vldr	s15, [r3]
 800402e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004040:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8004044:	edc3 7a00 	vstr	s15, [r3]
	map->Ori = normalize_angle(map->Ori);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800404e:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8004052:	edd3 7a00 	vldr	s15, [r3]
 8004056:	eeb0 0a67 	vmov.f32	s0, s15
 800405a:	f7ff fe31 	bl	8003cc0 <normalize_angle>
 800405e:	eef0 7a40 	vmov.f32	s15, s0
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004068:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 800406c:	edc3 7a00 	vstr	s15, [r3]
	map->Xri = map->Xri + ((Ti * cosf(map->Ori))/2);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004076:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800407a:	ed93 8a00 	vldr	s16, [r3]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004084:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8004088:	edd3 7a00 	vldr	s15, [r3]
 800408c:	eeb0 0a67 	vmov.f32	s0, s15
 8004090:	f011 f8f4 	bl	801527c <cosf>
 8004094:	eeb0 7a40 	vmov.f32	s14, s0
 8004098:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800409c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040a0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80040a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040a8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80040b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040b6:	edc3 7a00 	vstr	s15, [r3]
	map->Yri = map->Yri + ((Ti * sinf(map->Ori)))/2;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80040c0:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 80040c4:	ed93 8a00 	vldr	s16, [r3]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80040ce:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 80040d2:	edd3 7a00 	vldr	s15, [r3]
 80040d6:	eeb0 0a67 	vmov.f32	s0, s15
 80040da:	f011 f913 	bl	8015304 <sinf>
 80040de:	eeb0 7a40 	vmov.f32	s14, s0
 80040e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80040ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040f2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80040fc:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 8004100:	edc3 7a00 	vstr	s15, [r3]


	// How near to next point we are ?
	float dx = map->SetX - map->Xri;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800410a:	f603 634c 	addw	r3, r3, #3660	@ 0xe4c
 800410e:	ed93 7a00 	vldr	s14, [r3]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004118:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800411c:	edd3 7a00 	vldr	s15, [r3]
 8004120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004124:	edc7 7a07 	vstr	s15, [r7, #28]
	float dy = map->SetY - map->Yri;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800412e:	f503 6365 	add.w	r3, r3, #3664	@ 0xe50
 8004132:	ed93 7a00 	vldr	s14, [r3]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800413c:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 8004140:	edd3 7a00 	vldr	s15, [r3]
 8004144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004148:	edc7 7a06 	vstr	s15, [r7, #24]
	if(sqrtf(dx*dx + dy*dy) < 0.035f)// 0.05f//
 800414c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004150:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004154:	edd7 7a06 	vldr	s15, [r7, #24]
 8004158:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800415c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004160:	eeb0 0a67 	vmov.f32	s0, s15
 8004164:	f011 f86c 	bl	8015240 <sqrtf>
 8004168:	eef0 7a40 	vmov.f32	s15, s0
 800416c:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8004380 <DriveOnMap+0x468>
 8004170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004178:	d502      	bpl.n	8004180 <DriveOnMap+0x268>
	{
		//Get new rotation, speed & point to go
	    ReadMapLine(map);
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff fdf4 	bl	8003d68 <ReadMapLine>
	}

	map->SetRotation = atan2f((map->SetY - map->Yri),(map->SetX - map->Xri));
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004186:	f503 6365 	add.w	r3, r3, #3664	@ 0xe50
 800418a:	ed93 7a00 	vldr	s14, [r3]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004194:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 8004198:	edd3 7a00 	vldr	s15, [r3]
 800419c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80041a6:	f603 634c 	addw	r3, r3, #3660	@ 0xe4c
 80041aa:	ed93 7a00 	vldr	s14, [r3]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80041b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80041b8:	edd3 7a00 	vldr	s15, [r3]
 80041bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041c0:	eef0 0a67 	vmov.f32	s1, s15
 80041c4:	eeb0 0a66 	vmov.f32	s0, s13
 80041c8:	f011 f838 	bl	801523c <atan2f>
 80041cc:	eef0 7a40 	vmov.f32	s15, s0
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80041d6:	f603 6354 	addw	r3, r3, #3668	@ 0xe54
 80041da:	edc3 7a00 	vstr	s15, [r3]

	//PID to get set rotation
	float Error = (normalize_angle(map->SetRotation - map->Ori)) * 1000.0; //In radians
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80041e4:	f603 6354 	addw	r3, r3, #3668	@ 0xe54
 80041e8:	ed93 7a00 	vldr	s14, [r3]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80041f2:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 80041f6:	edd3 7a00 	vldr	s15, [r3]
 80041fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004202:	f7ff fd5d 	bl	8003cc0 <normalize_angle>
 8004206:	ee10 3a10 	vmov	r3, s0
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f9d4 	bl	80005b8 <__aeabi_f2d>
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	4b5b      	ldr	r3, [pc, #364]	@ (8004384 <DriveOnMap+0x46c>)
 8004216:	f7fc fa27 	bl	8000668 <__aeabi_dmul>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	f7fc fd19 	bl	8000c58 <__aeabi_d2f>
 8004226:	4603      	mov	r3, r0
 8004228:	617b      	str	r3, [r7, #20]

	map->ErrorSum += Error;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004230:	f603 6368 	addw	r3, r3, #3688	@ 0xe68
 8004234:	ed93 7a00 	vldr	s14, [r3]
 8004238:	edd7 7a05 	vldr	s15, [r7, #20]
 800423c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004246:	f603 6368 	addw	r3, r3, #3688	@ 0xe68
 800424a:	edc3 7a00 	vstr	s15, [r3]
	if(map->ErrorSum > 850)//500
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004254:	f603 6368 	addw	r3, r3, #3688	@ 0xe68
 8004258:	edd3 7a00 	vldr	s15, [r3]
 800425c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8004388 <DriveOnMap+0x470>
 8004260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004268:	dd06      	ble.n	8004278 <DriveOnMap+0x360>
	{
		map->ErrorSum  = 850;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004270:	f603 6368 	addw	r3, r3, #3688	@ 0xe68
 8004274:	4a45      	ldr	r2, [pc, #276]	@ (800438c <DriveOnMap+0x474>)
 8004276:	601a      	str	r2, [r3, #0]
	}
	if(map->ErrorSum < -850)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800427e:	f603 6368 	addw	r3, r3, #3688	@ 0xe68
 8004282:	edd3 7a00 	vldr	s15, [r3]
 8004286:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8004390 <DriveOnMap+0x478>
 800428a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004292:	d506      	bpl.n	80042a2 <DriveOnMap+0x38a>
	{
		map->ErrorSum  = -850;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800429a:	f603 6368 	addw	r3, r3, #3688	@ 0xe68
 800429e:	4a3d      	ldr	r2, [pc, #244]	@ (8004394 <DriveOnMap+0x47c>)
 80042a0:	601a      	str	r2, [r3, #0]
	}

	float ErrorDif = map->LastError - Error;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80042a8:	f603 636c 	addw	r3, r3, #3692	@ 0xe6c
 80042ac:	ed93 7a00 	vldr	s14, [r3]
 80042b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80042b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042b8:	edc7 7a04 	vstr	s15, [r7, #16]
	map->LastError = Error;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80042c2:	f603 636c 	addw	r3, r3, #3692	@ 0xe6c
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	601a      	str	r2, [r3, #0]

	motor_control(map->SetSpeed + (map->p * Error) - (map->d * ErrorDif), map->SetSpeed - (map->p * Error)+ (map->d * ErrorDif));
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80042d0:	f603 6358 	addw	r3, r3, #3672	@ 0xe58
 80042d4:	ed93 7a00 	vldr	s14, [r3]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80042de:	f603 635c 	addw	r3, r3, #3676	@ 0xe5c
 80042e2:	edd3 6a00 	vldr	s13, [r3]
 80042e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80042ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80042f8:	f603 6364 	addw	r3, r3, #3684	@ 0xe64
 80042fc:	edd3 6a00 	vldr	s13, [r3]
 8004300:	edd7 7a04 	vldr	s15, [r7, #16]
 8004304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800430c:	ee17 0a90 	vmov	r0, s15
 8004310:	f7fc f952 	bl	80005b8 <__aeabi_f2d>
 8004314:	4604      	mov	r4, r0
 8004316:	460d      	mov	r5, r1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800431e:	f603 6358 	addw	r3, r3, #3672	@ 0xe58
 8004322:	ed93 7a00 	vldr	s14, [r3]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800432c:	f603 635c 	addw	r3, r3, #3676	@ 0xe5c
 8004330:	edd3 6a00 	vldr	s13, [r3]
 8004334:	edd7 7a05 	vldr	s15, [r7, #20]
 8004338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800433c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004346:	f603 6364 	addw	r3, r3, #3684	@ 0xe64
 800434a:	edd3 6a00 	vldr	s13, [r3]
 800434e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800435a:	ee17 0a90 	vmov	r0, s15
 800435e:	f7fc f92b 	bl	80005b8 <__aeabi_f2d>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	ec43 2b11 	vmov	d1, r2, r3
 800436a:	ec45 4b10 	vmov	d0, r4, r5
 800436e:	f7fe fd83 	bl	8002e78 <motor_control>

}
 8004372:	bf00      	nop
 8004374:	3728      	adds	r7, #40	@ 0x28
 8004376:	46bd      	mov	sp, r7
 8004378:	ecbd 8b02 	vpop	{d8}
 800437c:	bdb0      	pop	{r4, r5, r7, pc}
 800437e:	bf00      	nop
 8004380:	3d0f5c29 	.word	0x3d0f5c29
 8004384:	408f4000 	.word	0x408f4000
 8004388:	44548000 	.word	0x44548000
 800438c:	44548000 	.word	0x44548000
 8004390:	c4548000 	.word	0xc4548000
 8004394:	c4548000 	.word	0xc4548000
 8004398:	2947ae14 	.word	0x2947ae14
 800439c:	3fd586c2 	.word	0x3fd586c2

080043a0 <MappingV2>:


void MappingV2(Map_t *map, motor_t *MotorLeft, motor_t *MotorRight)
{
 80043a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a4:	ed2d 8b02 	vpush	{d8}
 80043a8:	b0b2      	sub	sp, #200	@ 0xc8
 80043aa:	af0c      	add	r7, sp, #48	@ 0x30
 80043ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80043ae:	6239      	str	r1, [r7, #32]
 80043b0:	61fa      	str	r2, [r7, #28]
	uint8_t buffer[100];
	map->AlhphaOri = 1; //100% IMU 0% encoders
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80043b8:	f603 631c 	addw	r3, r3, #3612	@ 0xe1c
 80043bc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043c0:	601a      	str	r2, [r3, #0]

	//(3.1) -- Save XY
	map->PreviousXri = map->Xri;
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80043c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80043d4:	f603 6304 	addw	r3, r3, #3588	@ 0xe04
 80043d8:	601a      	str	r2, [r3, #0]
	map->PreviousYri = map->Yri;
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80043e0:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80043ec:	f603 630c 	addw	r3, r3, #3596	@ 0xe0c
 80043f0:	601a      	str	r2, [r3, #0]

	map->PreviousPci[0] = map->Pci[0];
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80043f8:	f603 632c 	addw	r3, r3, #3628	@ 0xe2c
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004404:	f603 6334 	addw	r3, r3, #3636	@ 0xe34
 8004408:	601a      	str	r2, [r3, #0]
	map->PreviousPci[1] = map->Pci[1];
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004410:	f503 6363 	add.w	r3, r3, #3632	@ 0xe30
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800441c:	f603 6338 	addw	r3, r3, #3640	@ 0xe38
 8004420:	601a      	str	r2, [r3, #0]

	//(2.11) -- Translation In Measurement
	float Ti = (MotorLeft->LpfDistanceInMeasurement + MotorRight->LpfDistanceInMeasurement) / 2;
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800442e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004432:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004436:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800443a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	//(2.12) -- Rotation In Measurement
	float Ri = (MotorRight->LpfDistanceInMeasurement - MotorLeft->LpfDistanceInMeasurement) / (MAIN_PCB_LENGTH * 2 * 1.085);//1.085
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800444a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800444e:	ee17 0a90 	vmov	r0, s15
 8004452:	f7fc f8b1 	bl	80005b8 <__aeabi_f2d>
 8004456:	a38a      	add	r3, pc, #552	@ (adr r3, 8004680 <MappingV2+0x2e0>)
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	f7fc fa2e 	bl	80008bc <__aeabi_ddiv>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	f7fc fbf6 	bl	8000c58 <__aeabi_d2f>
 800446c:	4603      	mov	r3, r0
 800446e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	//(2.13) -- Main PCB Position
	map->Ori = map->Ori + (((1-map->AlhphaOri)*Ri) + (map->OriIMU * map->AlhphaOri));
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004478:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 800447c:	ed93 7a00 	vldr	s14, [r3]
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004486:	f603 631c 	addw	r3, r3, #3612	@ 0xe1c
 800448a:	edd3 7a00 	vldr	s15, [r3]
 800448e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004492:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004496:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800449a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80044a4:	f603 6318 	addw	r3, r3, #3608	@ 0xe18
 80044a8:	ed93 6a00 	vldr	s12, [r3]
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80044b2:	f603 631c 	addw	r3, r3, #3612	@ 0xe1c
 80044b6:	edd3 7a00 	vldr	s15, [r3]
 80044ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80044be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80044cc:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 80044d0:	edc3 7a00 	vstr	s15, [r3]
	map->Ori = normalize_angle(map->Ori);
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80044da:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 80044de:	edd3 7a00 	vldr	s15, [r3]
 80044e2:	eeb0 0a67 	vmov.f32	s0, s15
 80044e6:	f7ff fbeb 	bl	8003cc0 <normalize_angle>
 80044ea:	eef0 7a40 	vmov.f32	s15, s0
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80044f4:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 80044f8:	edc3 7a00 	vstr	s15, [r3]
	map->Xri = map->Xri + ((Ti * cosf(map->Ori))/2);
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004502:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004506:	ed93 8a00 	vldr	s16, [r3]
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004510:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8004514:	edd3 7a00 	vldr	s15, [r3]
 8004518:	eeb0 0a67 	vmov.f32	s0, s15
 800451c:	f010 feae 	bl	801527c <cosf>
 8004520:	eeb0 7a40 	vmov.f32	s14, s0
 8004524:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800452c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004530:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004534:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800453e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004542:	edc3 7a00 	vstr	s15, [r3]
	map->Yri = map->Yri + ((Ti * sinf(map->Ori)))/2;
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800454c:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 8004550:	ed93 8a00 	vldr	s16, [r3]
 8004554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004556:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800455a:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 800455e:	edd3 7a00 	vldr	s15, [r3]
 8004562:	eeb0 0a67 	vmov.f32	s0, s15
 8004566:	f010 fecd 	bl	8015304 <sinf>
 800456a:	eeb0 7a40 	vmov.f32	s14, s0
 800456e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004572:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004576:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800457a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800457e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004588:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 800458c:	edc3 7a00 	vstr	s15, [r3]


	sprintf((char*)buffer, " %0.3f	%0.3f	%0.3f	%0.3f	%0.3f	%0.3f	%0.3f \n", map->Xri, map->Yri, map->Pci[0], map->Pci[1], (map->Ori / 0.01745329251f), GRUZIK.Error_P,GRUZIK.Error_D);
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8004596:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7fc f80b 	bl	80005b8 <__aeabi_f2d>
 80045a2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80045ac:	f603 6308 	addw	r3, r3, #3592	@ 0xe08
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fc f800 	bl	80005b8 <__aeabi_f2d>
 80045b8:	4680      	mov	r8, r0
 80045ba:	4689      	mov	r9, r1
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80045c2:	f603 632c 	addw	r3, r3, #3628	@ 0xe2c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fb fff5 	bl	80005b8 <__aeabi_f2d>
 80045ce:	4682      	mov	sl, r0
 80045d0:	468b      	mov	fp, r1
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80045d8:	f503 6363 	add.w	r3, r3, #3632	@ 0xe30
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fb ffea 	bl	80005b8 <__aeabi_f2d>
 80045e4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80045ee:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 80045f2:	edd3 7a00 	vldr	s15, [r3]
 80045f6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004670 <MappingV2+0x2d0>
 80045fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80045fe:	ee16 0a90 	vmov	r0, s13
 8004602:	f7fb ffd9 	bl	80005b8 <__aeabi_f2d>
 8004606:	e9c7 0100 	strd	r0, r1, [r7]
 800460a:	4b1a      	ldr	r3, [pc, #104]	@ (8004674 <MappingV2+0x2d4>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fb ffd2 	bl	80005b8 <__aeabi_f2d>
 8004614:	4604      	mov	r4, r0
 8004616:	460d      	mov	r5, r1
 8004618:	4b16      	ldr	r3, [pc, #88]	@ (8004674 <MappingV2+0x2d4>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fb ffcb 	bl	80005b8 <__aeabi_f2d>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800462a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800462e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004632:	ed97 7b00 	vldr	d7, [r7]
 8004636:	ed8d 7b06 	vstr	d7, [sp, #24]
 800463a:	ed97 7b02 	vldr	d7, [r7, #8]
 800463e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004642:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004646:	e9cd 8900 	strd	r8, r9, [sp]
 800464a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800464e:	490a      	ldr	r1, [pc, #40]	@ (8004678 <MappingV2+0x2d8>)
 8004650:	f00d ff42 	bl	80124d8 <siprintf>
	f_printf(&SdCardFile, (char*)buffer);
 8004654:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004658:	4619      	mov	r1, r3
 800465a:	4808      	ldr	r0, [pc, #32]	@ (800467c <MappingV2+0x2dc>)
 800465c:	f00c f998 	bl	8010990 <f_printf>
}
 8004660:	bf00      	nop
 8004662:	3798      	adds	r7, #152	@ 0x98
 8004664:	46bd      	mov	sp, r7
 8004666:	ecbd 8b02 	vpop	{d8}
 800466a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466e:	bf00      	nop
 8004670:	3c8efa35 	.word	0x3c8efa35
 8004674:	20006690 	.word	0x20006690
 8004678:	08017438 	.word	0x08017438
 800467c:	2000643c 	.word	0x2000643c
 8004680:	2947ae14 	.word	0x2947ae14
 8004684:	3fd586c2 	.word	0x3fd586c2

08004688 <Motor_CalculateSpeed>:

#include "main.h"
#include "motor.h"
#include "LowPassFilter.h"
void Motor_CalculateSpeed(motor_t *motor)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	// (0.0) --  How many impulses did we get ?
	int impulses;
	impulses = (int32_t)motor->EncoderValue - 20000;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 8004698:	3b20      	subs	r3, #32
 800469a:	60fb      	str	r3, [r7, #12]

	// (0.1) -- Invert direction to " FORWARD "
	impulses = impulses * -1;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	425b      	negs	r3, r3
 80046a0:	60fb      	str	r3, [r7, #12]

	/*Distance traveled in 0.001s (One cycle)*/

	motor->DistanceInMeasurement = ((float)impulses * WHEEL_CIRCUMFERENCE) / (IMPULSES_PER_ROTATION * GEAR_RATIO);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	ee07 3a90 	vmov	s15, r3
 80046a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ac:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80047d4 <Motor_CalculateSpeed+0x14c>
 80046b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046b4:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80047d8 <Motor_CalculateSpeed+0x150>
 80046b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	/*Whole distance wheel has traveled*/
	motor->DistanceTraveled = motor->DistanceTraveled + motor->DistanceInMeasurement;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80046ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	/*Get meters per second*/
	/* m/s = m/ms * 1000 */
	motor->MetersPerSecond = motor->DistanceInMeasurement * -1000.0f; // 1s = 1000ms
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80046de:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80047dc <Motor_CalculateSpeed+0x154>
 80046e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	LowPassFilter_Update(&motor->MetersPerSecondLPF, motor->MetersPerSecond);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80046f8:	eeb0 0a67 	vmov.f32	s0, s15
 80046fc:	4610      	mov	r0, r2
 80046fe:	f7fc fcd6 	bl	80010ae <LowPassFilter_Update>

	motor->LpfDistanceInMeasurement = motor->MetersPerSecondLPF.output / -1000.0f;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004708:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80047dc <Motor_CalculateSpeed+0x154>
 800470c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48


    //How many times motor has rotated ?
	motor->NumberOfRotations = (float)impulses / 20000.0f;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	ee07 3a90 	vmov	s15, r3
 800471c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004720:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80047d8 <Motor_CalculateSpeed+0x150>
 8004724:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	//Rotations per minute based on period and impulses
	motor->RPM = motor->NumberOfRotations * -60000.0f; //rotates per minute
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004734:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80047e0 <Motor_CalculateSpeed+0x158>
 8004738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	edc3 7a02 	vstr	s15, [r3, #8]

	/*I know some of them are "magic values" other way it doesn't want to work*/

	if((motor->RPM >= 5000) || (motor->RPM <= -5000)) // |max| = 5000 Other readings are trash
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	edd3 7a02 	vldr	s15, [r3, #8]
 8004748:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80047e4 <Motor_CalculateSpeed+0x15c>
 800474c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004754:	da09      	bge.n	800476a <Motor_CalculateSpeed+0xe2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	edd3 7a02 	vldr	s15, [r3, #8]
 800475c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80047e8 <Motor_CalculateSpeed+0x160>
 8004760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004768:	d803      	bhi.n	8004772 <Motor_CalculateSpeed+0xea>
	{
		motor->RPM = motor->PreviousRPM;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	609a      	str	r2, [r3, #8]
	}
	//Motor_SavePreviousRPMs(motor, motor->RPM);
	LowPassFilter_Update(&motor->EncoderRpmFilter, motor->RPM);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	edd3 7a02 	vldr	s15, [r3, #8]
 800477e:	eeb0 0a67 	vmov.f32	s0, s15
 8004782:	4610      	mov	r0, r2
 8004784:	f7fc fc93 	bl	80010ae <LowPassFilter_Update>
	motor->MetersPerHour = motor->EncoderRpmFilter.output / RPM_TO_MH;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800478e:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80047ec <Motor_CalculateSpeed+0x164>
 8004792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	//motor->MetersPerHour = motor->RPM / RPM_TO_MH;
	motor->KilometersPerHour = motor->MetersPerHour / 1000;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80047a2:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80047f0 <Motor_CalculateSpeed+0x168>
 80047a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	motor->MetersPerSecond = motor->MetersPerHour / 3600;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80047b6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80047f4 <Motor_CalculateSpeed+0x16c>
 80047ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	motor->PreviousRPM = motor->EncoderRpmFilter.output;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60da      	str	r2, [r3, #12]
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	3d90c3bc 	.word	0x3d90c3bc
 80047d8:	469c4000 	.word	0x469c4000
 80047dc:	c47a0000 	.word	0xc47a0000
 80047e0:	c76a6000 	.word	0xc76a6000
 80047e4:	459c4000 	.word	0x459c4000
 80047e8:	c59c4000 	.word	0xc59c4000
 80047ec:	3e555555 	.word	0x3e555555
 80047f0:	447a0000 	.word	0x447a0000
 80047f4:	45610000 	.word	0x45610000

080047f8 <Motor_Init>:

void Motor_Init(motor_t *motor, float Kp, float Ki)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	ed87 0a02 	vstr	s0, [r7, #8]
 8004804:	edc7 0a01 	vstr	s1, [r7, #4]
	motor->kp = Kp;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	motor->ki = Ki;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	motor->MetersPerSecondLPF.alpha = 0.1; // -- works like translation filter
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a04      	ldr	r2, [pc, #16]	@ (800482c <Motor_Init+0x34>)
 800481c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	3dcccccd 	.word	0x3dcccccd

08004830 <PI_Loop>:

void PI_Loop(motor_t *motor)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	motor->current_speed = motor->MetersPerSecond * 23; // From m/s to bananas per second //65
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800483e:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8004842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

	//Get absolute speed
	if(motor->current_speed < 0)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8004852:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485a:	d507      	bpl.n	800486c <PI_Loop+0x3c>
	{
		motor->current_speed = motor->current_speed * -1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8004862:	eef1 7a67 	vneg.f32	s15, s15
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		//Zastanów się czy faktycznie to jest potrzebne
	}

	//Get the difference between speed that we need and actual speed
	motor->error =  motor->set_speed - motor->current_speed;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8004878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

	//Add current error to previous errors
	motor->Error_sum = motor->Error_sum +motor->P;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 800488e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
	if(motor->Error_sum > 100)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 800489e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004914 <PI_Loop+0xe4>
 80048a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048aa:	dd04      	ble.n	80048b6 <PI_Loop+0x86>
	{
		motor->Error_sum = 100;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004918 <PI_Loop+0xe8>)
 80048b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80048b4:	e00d      	b.n	80048d2 <PI_Loop+0xa2>
	}
	else if(motor->Error_sum < -100)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 80048bc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800491c <PI_Loop+0xec>
 80048c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c8:	d503      	bpl.n	80048d2 <PI_Loop+0xa2>
	{
		motor->Error_sum = -100;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a14      	ldr	r2, [pc, #80]	@ (8004920 <PI_Loop+0xf0>)
 80048ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	}

	//Calculate new speed with PI parameters
	motor->speed = motor->set_speed + (motor->error * motor->kp) + (motor->Error_sum *motor->ki);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80048e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	edd3 6a22 	vldr	s13, [r3, #136]	@ 0x88
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 80048f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	42c80000 	.word	0x42c80000
 8004918:	42c80000 	.word	0x42c80000
 800491c:	c2c80000 	.word	0xc2c80000
 8004920:	c2c80000 	.word	0xc2c80000

08004924 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004928:	4b1b      	ldr	r3, [pc, #108]	@ (8004998 <MX_SPI2_Init+0x74>)
 800492a:	4a1c      	ldr	r2, [pc, #112]	@ (800499c <MX_SPI2_Init+0x78>)
 800492c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800492e:	4b1a      	ldr	r3, [pc, #104]	@ (8004998 <MX_SPI2_Init+0x74>)
 8004930:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004934:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004936:	4b18      	ldr	r3, [pc, #96]	@ (8004998 <MX_SPI2_Init+0x74>)
 8004938:	2200      	movs	r2, #0
 800493a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800493c:	4b16      	ldr	r3, [pc, #88]	@ (8004998 <MX_SPI2_Init+0x74>)
 800493e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004942:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004944:	4b14      	ldr	r3, [pc, #80]	@ (8004998 <MX_SPI2_Init+0x74>)
 8004946:	2200      	movs	r2, #0
 8004948:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800494a:	4b13      	ldr	r3, [pc, #76]	@ (8004998 <MX_SPI2_Init+0x74>)
 800494c:	2200      	movs	r2, #0
 800494e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004950:	4b11      	ldr	r3, [pc, #68]	@ (8004998 <MX_SPI2_Init+0x74>)
 8004952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004956:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004958:	4b0f      	ldr	r3, [pc, #60]	@ (8004998 <MX_SPI2_Init+0x74>)
 800495a:	2238      	movs	r2, #56	@ 0x38
 800495c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800495e:	4b0e      	ldr	r3, [pc, #56]	@ (8004998 <MX_SPI2_Init+0x74>)
 8004960:	2200      	movs	r2, #0
 8004962:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004964:	4b0c      	ldr	r3, [pc, #48]	@ (8004998 <MX_SPI2_Init+0x74>)
 8004966:	2200      	movs	r2, #0
 8004968:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800496a:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <MX_SPI2_Init+0x74>)
 800496c:	2200      	movs	r2, #0
 800496e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004970:	4b09      	ldr	r3, [pc, #36]	@ (8004998 <MX_SPI2_Init+0x74>)
 8004972:	2207      	movs	r2, #7
 8004974:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004976:	4b08      	ldr	r3, [pc, #32]	@ (8004998 <MX_SPI2_Init+0x74>)
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800497c:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <MX_SPI2_Init+0x74>)
 800497e:	2208      	movs	r2, #8
 8004980:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004982:	4805      	ldr	r0, [pc, #20]	@ (8004998 <MX_SPI2_Init+0x74>)
 8004984:	f004 fd8e 	bl	80094a4 <HAL_SPI_Init>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800498e:	f7fe ff25 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004992:	bf00      	nop
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	200068dc 	.word	0x200068dc
 800499c:	40003800 	.word	0x40003800

080049a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	@ 0x28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a8:	f107 0314 	add.w	r3, r7, #20
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	605a      	str	r2, [r3, #4]
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a17      	ldr	r2, [pc, #92]	@ (8004a1c <HAL_SPI_MspInit+0x7c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d128      	bne.n	8004a14 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80049c2:	4b17      	ldr	r3, [pc, #92]	@ (8004a20 <HAL_SPI_MspInit+0x80>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c6:	4a16      	ldr	r2, [pc, #88]	@ (8004a20 <HAL_SPI_MspInit+0x80>)
 80049c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ce:	4b14      	ldr	r3, [pc, #80]	@ (8004a20 <HAL_SPI_MspInit+0x80>)
 80049d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049da:	4b11      	ldr	r3, [pc, #68]	@ (8004a20 <HAL_SPI_MspInit+0x80>)
 80049dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049de:	4a10      	ldr	r2, [pc, #64]	@ (8004a20 <HAL_SPI_MspInit+0x80>)
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a20 <HAL_SPI_MspInit+0x80>)
 80049e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80049f2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80049f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f8:	2302      	movs	r3, #2
 80049fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a00:	2300      	movs	r3, #0
 8004a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a04:	2305      	movs	r3, #5
 8004a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a08:	f107 0314 	add.w	r3, r7, #20
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4805      	ldr	r0, [pc, #20]	@ (8004a24 <HAL_SPI_MspInit+0x84>)
 8004a10:	f002 fd6e 	bl	80074f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004a14:	bf00      	nop
 8004a16:	3728      	adds	r7, #40	@ 0x28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40003800 	.word	0x40003800
 8004a20:	40021000 	.word	0x40021000
 8004a24:	48000400 	.word	0x48000400

08004a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a6c <HAL_MspInit+0x44>)
 8004a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a32:	4a0e      	ldr	r2, [pc, #56]	@ (8004a6c <HAL_MspInit+0x44>)
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a6c <HAL_MspInit+0x44>)
 8004a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a46:	4b09      	ldr	r3, [pc, #36]	@ (8004a6c <HAL_MspInit+0x44>)
 8004a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4a:	4a08      	ldr	r2, [pc, #32]	@ (8004a6c <HAL_MspInit+0x44>)
 8004a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a52:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <HAL_MspInit+0x44>)
 8004a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004a5e:	f003 fd95 	bl	800858c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000

08004a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <NMI_Handler+0x4>

08004a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a7c:	bf00      	nop
 8004a7e:	e7fd      	b.n	8004a7c <HardFault_Handler+0x4>

08004a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <MemManage_Handler+0x4>

08004a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <BusFault_Handler+0x4>

08004a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a94:	bf00      	nop
 8004a96:	e7fd      	b.n	8004a94 <UsageFault_Handler+0x4>

08004a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a9c:	bf00      	nop
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004aaa:	bf00      	nop
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ac6:	f000 fd2d 	bl	8005524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ad4:	4802      	ldr	r0, [pc, #8]	@ (8004ae0 <DMA1_Channel1_IRQHandler+0x10>)
 8004ad6:	f002 fbbc 	bl	8007252 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004ada:	bf00      	nop
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	200002dc 	.word	0x200002dc

08004ae4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8004ae8:	4802      	ldr	r0, [pc, #8]	@ (8004af4 <DMA1_Channel2_IRQHandler+0x10>)
 8004aea:	f002 fbb2 	bl	8007252 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20006ac0 	.word	0x20006ac0

08004af8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004afc:	4802      	ldr	r0, [pc, #8]	@ (8004b08 <TIM5_IRQHandler+0x10>)
 8004afe:	f005 fc77 	bl	800a3f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20006a74 	.word	0x20006a74

08004b0c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004b10:	4802      	ldr	r0, [pc, #8]	@ (8004b1c <LPUART1_IRQHandler+0x10>)
 8004b12:	f006 feb5 	bl	800b880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20006b20 	.word	0x20006b20

08004b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return 1;
 8004b24:	2301      	movs	r3, #1
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <_kill>:

int _kill(int pid, int sig)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b3a:	f00d fdf3 	bl	8012724 <__errno>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2216      	movs	r2, #22
 8004b42:	601a      	str	r2, [r3, #0]
  return -1;
 8004b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <_exit>:

void _exit (int status)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b58:	f04f 31ff 	mov.w	r1, #4294967295
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ffe7 	bl	8004b30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b62:	bf00      	nop
 8004b64:	e7fd      	b.n	8004b62 <_exit+0x12>

08004b66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b086      	sub	sp, #24
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	e00a      	b.n	8004b8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b78:	f3af 8000 	nop.w
 8004b7c:	4601      	mov	r1, r0
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	60ba      	str	r2, [r7, #8]
 8004b84:	b2ca      	uxtb	r2, r1
 8004b86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	dbf0      	blt.n	8004b78 <_read+0x12>
  }

  return len;
 8004b96:	687b      	ldr	r3, [r7, #4]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e009      	b.n	8004bc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	60ba      	str	r2, [r7, #8]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	dbf1      	blt.n	8004bb2 <_write+0x12>
  }
  return len;
 8004bce:	687b      	ldr	r3, [r7, #4]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <_close>:

int _close(int file)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c00:	605a      	str	r2, [r3, #4]
  return 0;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <_isatty>:

int _isatty(int file)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c18:	2301      	movs	r3, #1
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c48:	4a14      	ldr	r2, [pc, #80]	@ (8004c9c <_sbrk+0x5c>)
 8004c4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ca0 <_sbrk+0x60>)
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c54:	4b13      	ldr	r3, [pc, #76]	@ (8004ca4 <_sbrk+0x64>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c5c:	4b11      	ldr	r3, [pc, #68]	@ (8004ca4 <_sbrk+0x64>)
 8004c5e:	4a12      	ldr	r2, [pc, #72]	@ (8004ca8 <_sbrk+0x68>)
 8004c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c62:	4b10      	ldr	r3, [pc, #64]	@ (8004ca4 <_sbrk+0x64>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4413      	add	r3, r2
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d207      	bcs.n	8004c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c70:	f00d fd58 	bl	8012724 <__errno>
 8004c74:	4603      	mov	r3, r0
 8004c76:	220c      	movs	r2, #12
 8004c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7e:	e009      	b.n	8004c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c80:	4b08      	ldr	r3, [pc, #32]	@ (8004ca4 <_sbrk+0x64>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c86:	4b07      	ldr	r3, [pc, #28]	@ (8004ca4 <_sbrk+0x64>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	4a05      	ldr	r2, [pc, #20]	@ (8004ca4 <_sbrk+0x64>)
 8004c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c92:	68fb      	ldr	r3, [r7, #12]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20020000 	.word	0x20020000
 8004ca0:	00000400 	.word	0x00000400
 8004ca4:	20006940 	.word	0x20006940
 8004ca8:	20006d48 	.word	0x20006d48

08004cac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004cb0:	4b06      	ldr	r3, [pc, #24]	@ (8004ccc <SystemInit+0x20>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb6:	4a05      	ldr	r2, [pc, #20]	@ (8004ccc <SystemInit+0x20>)
 8004cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	e000ed00 	.word	0xe000ed00

08004cd0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim4_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	@ 0x30
 8004cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004cd6:	f107 030c 	add.w	r3, r7, #12
 8004cda:	2224      	movs	r2, #36	@ 0x24
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f00d fc5f 	bl	80125a2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	605a      	str	r2, [r3, #4]
 8004cec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004cee:	4b23      	ldr	r3, [pc, #140]	@ (8004d7c <MX_TIM1_Init+0xac>)
 8004cf0:	4a23      	ldr	r2, [pc, #140]	@ (8004d80 <MX_TIM1_Init+0xb0>)
 8004cf2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004cf4:	4b21      	ldr	r3, [pc, #132]	@ (8004d7c <MX_TIM1_Init+0xac>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cfa:	4b20      	ldr	r3, [pc, #128]	@ (8004d7c <MX_TIM1_Init+0xac>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004d00:	4b1e      	ldr	r3, [pc, #120]	@ (8004d7c <MX_TIM1_Init+0xac>)
 8004d02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d08:	4b1c      	ldr	r3, [pc, #112]	@ (8004d7c <MX_TIM1_Init+0xac>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d7c <MX_TIM1_Init+0xac>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d14:	4b19      	ldr	r3, [pc, #100]	@ (8004d7c <MX_TIM1_Init+0xac>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d22:	2301      	movs	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004d32:	2301      	movs	r3, #1
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004d36:	2300      	movs	r3, #0
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004d3e:	f107 030c 	add.w	r3, r7, #12
 8004d42:	4619      	mov	r1, r3
 8004d44:	480d      	ldr	r0, [pc, #52]	@ (8004d7c <MX_TIM1_Init+0xac>)
 8004d46:	f005 fa1f 	bl	800a188 <HAL_TIM_Encoder_Init>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8004d50:	f7fe fd44 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d54:	2300      	movs	r3, #0
 8004d56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d60:	463b      	mov	r3, r7
 8004d62:	4619      	mov	r1, r3
 8004d64:	4805      	ldr	r0, [pc, #20]	@ (8004d7c <MX_TIM1_Init+0xac>)
 8004d66:	f006 fb85 	bl	800b474 <HAL_TIMEx_MasterConfigSynchronization>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8004d70:	f7fe fd34 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004d74:	bf00      	nop
 8004d76:	3730      	adds	r7, #48	@ 0x30
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20006944 	.word	0x20006944
 8004d80:	40012c00 	.word	0x40012c00

08004d84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08e      	sub	sp, #56	@ 0x38
 8004d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	605a      	str	r2, [r3, #4]
 8004d94:	609a      	str	r2, [r3, #8]
 8004d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d98:	f107 031c 	add.w	r3, r7, #28
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	605a      	str	r2, [r3, #4]
 8004da2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004da4:	463b      	mov	r3, r7
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	605a      	str	r2, [r3, #4]
 8004dac:	609a      	str	r2, [r3, #8]
 8004dae:	60da      	str	r2, [r3, #12]
 8004db0:	611a      	str	r2, [r3, #16]
 8004db2:	615a      	str	r2, [r3, #20]
 8004db4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004db6:	4b33      	ldr	r3, [pc, #204]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004db8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004dbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8004dbe:	4b31      	ldr	r3, [pc, #196]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004dc0:	22a9      	movs	r2, #169	@ 0xa9
 8004dc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004dca:	4b2e      	ldr	r3, [pc, #184]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004dcc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004dd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004dde:	4829      	ldr	r0, [pc, #164]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004de0:	f004 ff8e 	bl	8009d00 <HAL_TIM_Base_Init>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004dea:	f7fe fcf7 	bl	80037dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004df4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4822      	ldr	r0, [pc, #136]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004dfc:	f005 fd5c 	bl	800a8b8 <HAL_TIM_ConfigClockSource>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004e06:	f7fe fce9 	bl	80037dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004e0a:	481e      	ldr	r0, [pc, #120]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004e0c:	f005 f848 	bl	8009ea0 <HAL_TIM_PWM_Init>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004e16:	f7fe fce1 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e22:	f107 031c 	add.w	r3, r7, #28
 8004e26:	4619      	mov	r1, r3
 8004e28:	4816      	ldr	r0, [pc, #88]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004e2a:	f006 fb23 	bl	800b474 <HAL_TIMEx_MasterConfigSynchronization>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004e34:	f7fe fcd2 	bl	80037dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e38:	2360      	movs	r3, #96	@ 0x60
 8004e3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e44:	2300      	movs	r3, #0
 8004e46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e48:	463b      	mov	r3, r7
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	480d      	ldr	r0, [pc, #52]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004e50:	f005 fc1e 	bl	800a690 <HAL_TIM_PWM_ConfigChannel>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004e5a:	f7fe fcbf 	bl	80037dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004e5e:	463b      	mov	r3, r7
 8004e60:	220c      	movs	r2, #12
 8004e62:	4619      	mov	r1, r3
 8004e64:	4807      	ldr	r0, [pc, #28]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004e66:	f005 fc13 	bl	800a690 <HAL_TIM_PWM_ConfigChannel>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004e70:	f7fe fcb4 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004e74:	4803      	ldr	r0, [pc, #12]	@ (8004e84 <MX_TIM2_Init+0x100>)
 8004e76:	f000 f9e9 	bl	800524c <HAL_TIM_MspPostInit>

}
 8004e7a:	bf00      	nop
 8004e7c:	3738      	adds	r7, #56	@ 0x38
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20006990 	.word	0x20006990

08004e88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e8e:	f107 0310 	add.w	r3, r7, #16
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	605a      	str	r2, [r3, #4]
 8004e98:	609a      	str	r2, [r3, #8]
 8004e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e9c:	1d3b      	adds	r3, r7, #4
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	605a      	str	r2, [r3, #4]
 8004ea4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f1c <MX_TIM3_Init+0x94>)
 8004ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f20 <MX_TIM3_Init+0x98>)
 8004eaa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8004eac:	4b1b      	ldr	r3, [pc, #108]	@ (8004f1c <MX_TIM3_Init+0x94>)
 8004eae:	22a9      	movs	r2, #169	@ 0xa9
 8004eb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f1c <MX_TIM3_Init+0x94>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004eb8:	4b18      	ldr	r3, [pc, #96]	@ (8004f1c <MX_TIM3_Init+0x94>)
 8004eba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ebe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ec0:	4b16      	ldr	r3, [pc, #88]	@ (8004f1c <MX_TIM3_Init+0x94>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ec6:	4b15      	ldr	r3, [pc, #84]	@ (8004f1c <MX_TIM3_Init+0x94>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004ecc:	4813      	ldr	r0, [pc, #76]	@ (8004f1c <MX_TIM3_Init+0x94>)
 8004ece:	f004 ff17 	bl	8009d00 <HAL_TIM_Base_Init>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004ed8:	f7fe fc80 	bl	80037dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ee0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004ee2:	f107 0310 	add.w	r3, r7, #16
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	480c      	ldr	r0, [pc, #48]	@ (8004f1c <MX_TIM3_Init+0x94>)
 8004eea:	f005 fce5 	bl	800a8b8 <HAL_TIM_ConfigClockSource>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004ef4:	f7fe fc72 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f00:	1d3b      	adds	r3, r7, #4
 8004f02:	4619      	mov	r1, r3
 8004f04:	4805      	ldr	r0, [pc, #20]	@ (8004f1c <MX_TIM3_Init+0x94>)
 8004f06:	f006 fab5 	bl	800b474 <HAL_TIMEx_MasterConfigSynchronization>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004f10:	f7fe fc64 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004f14:	bf00      	nop
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	200069dc 	.word	0x200069dc
 8004f20:	40000400 	.word	0x40000400

08004f24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	@ 0x30
 8004f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004f2a:	f107 030c 	add.w	r3, r7, #12
 8004f2e:	2224      	movs	r2, #36	@ 0x24
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f00d fb35 	bl	80125a2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f38:	463b      	mov	r3, r7
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	605a      	str	r2, [r3, #4]
 8004f40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004f42:	4b21      	ldr	r3, [pc, #132]	@ (8004fc8 <MX_TIM4_Init+0xa4>)
 8004f44:	4a21      	ldr	r2, [pc, #132]	@ (8004fcc <MX_TIM4_Init+0xa8>)
 8004f46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004f48:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc8 <MX_TIM4_Init+0xa4>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc8 <MX_TIM4_Init+0xa4>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004f54:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc8 <MX_TIM4_Init+0xa4>)
 8004f56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc8 <MX_TIM4_Init+0xa4>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f62:	4b19      	ldr	r3, [pc, #100]	@ (8004fc8 <MX_TIM4_Init+0xa4>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f70:	2301      	movs	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f80:	2301      	movs	r3, #1
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004f84:	2300      	movs	r3, #0
 8004f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004f8c:	f107 030c 	add.w	r3, r7, #12
 8004f90:	4619      	mov	r1, r3
 8004f92:	480d      	ldr	r0, [pc, #52]	@ (8004fc8 <MX_TIM4_Init+0xa4>)
 8004f94:	f005 f8f8 	bl	800a188 <HAL_TIM_Encoder_Init>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004f9e:	f7fe fc1d 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004faa:	463b      	mov	r3, r7
 8004fac:	4619      	mov	r1, r3
 8004fae:	4806      	ldr	r0, [pc, #24]	@ (8004fc8 <MX_TIM4_Init+0xa4>)
 8004fb0:	f006 fa60 	bl	800b474 <HAL_TIMEx_MasterConfigSynchronization>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004fba:	f7fe fc0f 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004fbe:	bf00      	nop
 8004fc0:	3730      	adds	r7, #48	@ 0x30
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20006a28 	.word	0x20006a28
 8004fcc:	40000800 	.word	0x40000800

08004fd0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fd6:	f107 0310 	add.w	r3, r7, #16
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	605a      	str	r2, [r3, #4]
 8004fe0:	609a      	str	r2, [r3, #8]
 8004fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fe4:	1d3b      	adds	r3, r7, #4
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	605a      	str	r2, [r3, #4]
 8004fec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004fee:	4b1d      	ldr	r3, [pc, #116]	@ (8005064 <MX_TIM5_Init+0x94>)
 8004ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8005068 <MX_TIM5_Init+0x98>)
 8004ff2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8004ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8005064 <MX_TIM5_Init+0x94>)
 8004ff6:	22a9      	movs	r2, #169	@ 0xa9
 8004ff8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8005064 <MX_TIM5_Init+0x94>)
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8005000:	4b18      	ldr	r3, [pc, #96]	@ (8005064 <MX_TIM5_Init+0x94>)
 8005002:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005006:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005008:	4b16      	ldr	r3, [pc, #88]	@ (8005064 <MX_TIM5_Init+0x94>)
 800500a:	2200      	movs	r2, #0
 800500c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800500e:	4b15      	ldr	r3, [pc, #84]	@ (8005064 <MX_TIM5_Init+0x94>)
 8005010:	2200      	movs	r2, #0
 8005012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005014:	4813      	ldr	r0, [pc, #76]	@ (8005064 <MX_TIM5_Init+0x94>)
 8005016:	f004 fe73 	bl	8009d00 <HAL_TIM_Base_Init>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005020:	f7fe fbdc 	bl	80037dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005028:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800502a:	f107 0310 	add.w	r3, r7, #16
 800502e:	4619      	mov	r1, r3
 8005030:	480c      	ldr	r0, [pc, #48]	@ (8005064 <MX_TIM5_Init+0x94>)
 8005032:	f005 fc41 	bl	800a8b8 <HAL_TIM_ConfigClockSource>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800503c:	f7fe fbce 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005040:	2300      	movs	r3, #0
 8005042:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005048:	1d3b      	adds	r3, r7, #4
 800504a:	4619      	mov	r1, r3
 800504c:	4805      	ldr	r0, [pc, #20]	@ (8005064 <MX_TIM5_Init+0x94>)
 800504e:	f006 fa11 	bl	800b474 <HAL_TIMEx_MasterConfigSynchronization>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005058:	f7fe fbc0 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800505c:	bf00      	nop
 800505e:	3720      	adds	r7, #32
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20006a74 	.word	0x20006a74
 8005068:	40000c00 	.word	0x40000c00

0800506c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08c      	sub	sp, #48	@ 0x30
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005074:	f107 031c 	add.w	r3, r7, #28
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	60da      	str	r2, [r3, #12]
 8005082:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a44      	ldr	r2, [pc, #272]	@ (800519c <HAL_TIM_Encoder_MspInit+0x130>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d128      	bne.n	80050e0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800508e:	4b44      	ldr	r3, [pc, #272]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0x134>)
 8005090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005092:	4a43      	ldr	r2, [pc, #268]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0x134>)
 8005094:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005098:	6613      	str	r3, [r2, #96]	@ 0x60
 800509a:	4b41      	ldr	r3, [pc, #260]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0x134>)
 800509c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800509e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050a6:	4b3e      	ldr	r3, [pc, #248]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0x134>)
 80050a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050aa:	4a3d      	ldr	r2, [pc, #244]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0x134>)
 80050ac:	f043 0304 	orr.w	r3, r3, #4
 80050b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050b2:	4b3b      	ldr	r3, [pc, #236]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0x134>)
 80050b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R_1_Pin|ENCODER_R_2_Pin;
 80050be:	2303      	movs	r3, #3
 80050c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c2:	2302      	movs	r3, #2
 80050c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ca:	2300      	movs	r3, #0
 80050cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80050ce:	2302      	movs	r3, #2
 80050d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050d2:	f107 031c 	add.w	r3, r7, #28
 80050d6:	4619      	mov	r1, r3
 80050d8:	4832      	ldr	r0, [pc, #200]	@ (80051a4 <HAL_TIM_Encoder_MspInit+0x138>)
 80050da:	f002 fa09 	bl	80074f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80050de:	e059      	b.n	8005194 <HAL_TIM_Encoder_MspInit+0x128>
  else if(tim_encoderHandle->Instance==TIM4)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a30      	ldr	r2, [pc, #192]	@ (80051a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d154      	bne.n	8005194 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050ea:	4b2d      	ldr	r3, [pc, #180]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0x134>)
 80050ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ee:	4a2c      	ldr	r2, [pc, #176]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0x134>)
 80050f0:	f043 0304 	orr.w	r3, r3, #4
 80050f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80050f6:	4b2a      	ldr	r3, [pc, #168]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0x134>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005102:	4b27      	ldr	r3, [pc, #156]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0x134>)
 8005104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005106:	4a26      	ldr	r2, [pc, #152]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0x134>)
 8005108:	f043 0301 	orr.w	r3, r3, #1
 800510c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800510e:	4b24      	ldr	r3, [pc, #144]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0x134>)
 8005110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_L_1_Pin|ENCODER_L_2_Pin;
 800511a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800511e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005120:	2302      	movs	r3, #2
 8005122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005124:	2300      	movs	r3, #0
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005128:	2300      	movs	r3, #0
 800512a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800512c:	230a      	movs	r3, #10
 800512e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005130:	f107 031c 	add.w	r3, r7, #28
 8005134:	4619      	mov	r1, r3
 8005136:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800513a:	f002 f9d9 	bl	80074f0 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Channel2;
 800513e:	4b1b      	ldr	r3, [pc, #108]	@ (80051ac <HAL_TIM_Encoder_MspInit+0x140>)
 8005140:	4a1b      	ldr	r2, [pc, #108]	@ (80051b0 <HAL_TIM_Encoder_MspInit+0x144>)
 8005142:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8005144:	4b19      	ldr	r3, [pc, #100]	@ (80051ac <HAL_TIM_Encoder_MspInit+0x140>)
 8005146:	2247      	movs	r2, #71	@ 0x47
 8005148:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800514a:	4b18      	ldr	r3, [pc, #96]	@ (80051ac <HAL_TIM_Encoder_MspInit+0x140>)
 800514c:	2200      	movs	r2, #0
 800514e:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8005150:	4b16      	ldr	r3, [pc, #88]	@ (80051ac <HAL_TIM_Encoder_MspInit+0x140>)
 8005152:	2200      	movs	r2, #0
 8005154:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 8005156:	4b15      	ldr	r3, [pc, #84]	@ (80051ac <HAL_TIM_Encoder_MspInit+0x140>)
 8005158:	2200      	movs	r2, #0
 800515a:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800515c:	4b13      	ldr	r3, [pc, #76]	@ (80051ac <HAL_TIM_Encoder_MspInit+0x140>)
 800515e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005162:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005164:	4b11      	ldr	r3, [pc, #68]	@ (80051ac <HAL_TIM_Encoder_MspInit+0x140>)
 8005166:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800516a:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 800516c:	4b0f      	ldr	r3, [pc, #60]	@ (80051ac <HAL_TIM_Encoder_MspInit+0x140>)
 800516e:	2220      	movs	r2, #32
 8005170:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8005172:	4b0e      	ldr	r3, [pc, #56]	@ (80051ac <HAL_TIM_Encoder_MspInit+0x140>)
 8005174:	2200      	movs	r2, #0
 8005176:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8005178:	480c      	ldr	r0, [pc, #48]	@ (80051ac <HAL_TIM_Encoder_MspInit+0x140>)
 800517a:	f001 fe87 	bl	8006e8c <HAL_DMA_Init>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <HAL_TIM_Encoder_MspInit+0x11c>
      Error_Handler();
 8005184:	f7fe fb2a 	bl	80037dc <Error_Handler>
    __HAL_LINKDMA(tim_encoderHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a08      	ldr	r2, [pc, #32]	@ (80051ac <HAL_TIM_Encoder_MspInit+0x140>)
 800518c:	621a      	str	r2, [r3, #32]
 800518e:	4a07      	ldr	r2, [pc, #28]	@ (80051ac <HAL_TIM_Encoder_MspInit+0x140>)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8005194:	bf00      	nop
 8005196:	3730      	adds	r7, #48	@ 0x30
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40012c00 	.word	0x40012c00
 80051a0:	40021000 	.word	0x40021000
 80051a4:	48000800 	.word	0x48000800
 80051a8:	40000800 	.word	0x40000800
 80051ac:	20006ac0 	.word	0x20006ac0
 80051b0:	4002001c 	.word	0x4002001c

080051b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c4:	d10c      	bne.n	80051e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005240 <HAL_TIM_Base_MspInit+0x8c>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005240 <HAL_TIM_Base_MspInit+0x8c>)
 80051cc:	f043 0301 	orr.w	r3, r3, #1
 80051d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80051d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005240 <HAL_TIM_Base_MspInit+0x8c>)
 80051d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80051de:	e02a      	b.n	8005236 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a17      	ldr	r2, [pc, #92]	@ (8005244 <HAL_TIM_Base_MspInit+0x90>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d10c      	bne.n	8005204 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051ea:	4b15      	ldr	r3, [pc, #84]	@ (8005240 <HAL_TIM_Base_MspInit+0x8c>)
 80051ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ee:	4a14      	ldr	r2, [pc, #80]	@ (8005240 <HAL_TIM_Base_MspInit+0x8c>)
 80051f0:	f043 0302 	orr.w	r3, r3, #2
 80051f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051f6:	4b12      	ldr	r3, [pc, #72]	@ (8005240 <HAL_TIM_Base_MspInit+0x8c>)
 80051f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	693b      	ldr	r3, [r7, #16]
}
 8005202:	e018      	b.n	8005236 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM5)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a0f      	ldr	r2, [pc, #60]	@ (8005248 <HAL_TIM_Base_MspInit+0x94>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d113      	bne.n	8005236 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800520e:	4b0c      	ldr	r3, [pc, #48]	@ (8005240 <HAL_TIM_Base_MspInit+0x8c>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005212:	4a0b      	ldr	r2, [pc, #44]	@ (8005240 <HAL_TIM_Base_MspInit+0x8c>)
 8005214:	f043 0308 	orr.w	r3, r3, #8
 8005218:	6593      	str	r3, [r2, #88]	@ 0x58
 800521a:	4b09      	ldr	r3, [pc, #36]	@ (8005240 <HAL_TIM_Base_MspInit+0x8c>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005226:	2200      	movs	r2, #0
 8005228:	2100      	movs	r1, #0
 800522a:	2032      	movs	r0, #50	@ 0x32
 800522c:	f001 fdf9 	bl	8006e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005230:	2032      	movs	r0, #50	@ 0x32
 8005232:	f001 fe10 	bl	8006e56 <HAL_NVIC_EnableIRQ>
}
 8005236:	bf00      	nop
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40021000 	.word	0x40021000
 8005244:	40000400 	.word	0x40000400
 8005248:	40000c00 	.word	0x40000c00

0800524c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005254:	f107 030c 	add.w	r3, r7, #12
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	60da      	str	r2, [r3, #12]
 8005262:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800526c:	d12e      	bne.n	80052cc <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800526e:	4b19      	ldr	r3, [pc, #100]	@ (80052d4 <HAL_TIM_MspPostInit+0x88>)
 8005270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005272:	4a18      	ldr	r2, [pc, #96]	@ (80052d4 <HAL_TIM_MspPostInit+0x88>)
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800527a:	4b16      	ldr	r3, [pc, #88]	@ (80052d4 <HAL_TIM_MspPostInit+0x88>)
 800527c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_R_Pin;
 8005286:	2301      	movs	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528a:	2302      	movs	r3, #2
 800528c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005292:	2300      	movs	r3, #0
 8005294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005296:	2301      	movs	r3, #1
 8005298:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 800529a:	f107 030c 	add.w	r3, r7, #12
 800529e:	4619      	mov	r1, r3
 80052a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052a4:	f002 f924 	bl	80074f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_L_Pin;
 80052a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ae:	2302      	movs	r3, #2
 80052b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80052ba:	230a      	movs	r3, #10
 80052bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 80052be:	f107 030c 	add.w	r3, r7, #12
 80052c2:	4619      	mov	r1, r3
 80052c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052c8:	f002 f912 	bl	80074f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80052cc:	bf00      	nop
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40021000 	.word	0x40021000

080052d8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80052dc:	4b21      	ldr	r3, [pc, #132]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 80052de:	4a22      	ldr	r2, [pc, #136]	@ (8005368 <MX_LPUART1_UART_Init+0x90>)
 80052e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80052e2:	4b20      	ldr	r3, [pc, #128]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 80052e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80052e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80052f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80052f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80052fc:	4b19      	ldr	r3, [pc, #100]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 80052fe:	220c      	movs	r2, #12
 8005300:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005302:	4b18      	ldr	r3, [pc, #96]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 8005304:	2200      	movs	r2, #0
 8005306:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005308:	4b16      	ldr	r3, [pc, #88]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 800530a:	2200      	movs	r2, #0
 800530c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800530e:	4b15      	ldr	r3, [pc, #84]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 8005310:	2200      	movs	r2, #0
 8005312:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005314:	4b13      	ldr	r3, [pc, #76]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 8005316:	2200      	movs	r2, #0
 8005318:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800531a:	4812      	ldr	r0, [pc, #72]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 800531c:	f006 f986 	bl	800b62c <HAL_UART_Init>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8005326:	f7fe fa59 	bl	80037dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800532a:	2100      	movs	r1, #0
 800532c:	480d      	ldr	r0, [pc, #52]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 800532e:	f008 f9fc 	bl	800d72a <HAL_UARTEx_SetTxFifoThreshold>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8005338:	f7fe fa50 	bl	80037dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800533c:	2100      	movs	r1, #0
 800533e:	4809      	ldr	r0, [pc, #36]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 8005340:	f008 fa31 	bl	800d7a6 <HAL_UARTEx_SetRxFifoThreshold>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800534a:	f7fe fa47 	bl	80037dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800534e:	4805      	ldr	r0, [pc, #20]	@ (8005364 <MX_LPUART1_UART_Init+0x8c>)
 8005350:	f008 f9b2 	bl	800d6b8 <HAL_UARTEx_DisableFifoMode>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800535a:	f7fe fa3f 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20006b20 	.word	0x20006b20
 8005368:	40008000 	.word	0x40008000

0800536c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b09e      	sub	sp, #120	@ 0x78
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005374:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005384:	f107 0310 	add.w	r3, r7, #16
 8005388:	2254      	movs	r2, #84	@ 0x54
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f00d f908 	bl	80125a2 <memset>
  if(uartHandle->Instance==LPUART1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a23      	ldr	r2, [pc, #140]	@ (8005424 <HAL_UART_MspInit+0xb8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d13f      	bne.n	800541c <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800539c:	2320      	movs	r3, #32
 800539e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 80053a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053a6:	f107 0310 	add.w	r3, r7, #16
 80053aa:	4618      	mov	r0, r3
 80053ac:	f003 fe2c 	bl	8009008 <HAL_RCCEx_PeriphCLKConfig>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80053b6:	f7fe fa11 	bl	80037dc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80053ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <HAL_UART_MspInit+0xbc>)
 80053bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053be:	4a1a      	ldr	r2, [pc, #104]	@ (8005428 <HAL_UART_MspInit+0xbc>)
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80053c6:	4b18      	ldr	r3, [pc, #96]	@ (8005428 <HAL_UART_MspInit+0xbc>)
 80053c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053d2:	4b15      	ldr	r3, [pc, #84]	@ (8005428 <HAL_UART_MspInit+0xbc>)
 80053d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d6:	4a14      	ldr	r2, [pc, #80]	@ (8005428 <HAL_UART_MspInit+0xbc>)
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053de:	4b12      	ldr	r3, [pc, #72]	@ (8005428 <HAL_UART_MspInit+0xbc>)
 80053e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80053ea:	230c      	movs	r3, #12
 80053ec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ee:	2302      	movs	r3, #2
 80053f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f6:	2300      	movs	r3, #0
 80053f8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80053fa:	230c      	movs	r3, #12
 80053fc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053fe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005402:	4619      	mov	r1, r3
 8005404:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005408:	f002 f872 	bl	80074f0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800540c:	2200      	movs	r2, #0
 800540e:	2100      	movs	r1, #0
 8005410:	205b      	movs	r0, #91	@ 0x5b
 8005412:	f001 fd06 	bl	8006e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005416:	205b      	movs	r0, #91	@ 0x5b
 8005418:	f001 fd1d 	bl	8006e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800541c:	bf00      	nop
 800541e:	3778      	adds	r7, #120	@ 0x78
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40008000 	.word	0x40008000
 8005428:	40021000 	.word	0x40021000

0800542c <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 800542c:	480d      	ldr	r0, [pc, #52]	@ (8005464 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800542e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005430:	f7ff fc3c 	bl	8004cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005434:	480c      	ldr	r0, [pc, #48]	@ (8005468 <LoopForever+0x6>)
  ldr r1, =_edata
 8005436:	490d      	ldr	r1, [pc, #52]	@ (800546c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005438:	4a0d      	ldr	r2, [pc, #52]	@ (8005470 <LoopForever+0xe>)
  movs r3, #0
 800543a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800543c:	e002      	b.n	8005444 <LoopCopyDataInit>

0800543e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800543e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005442:	3304      	adds	r3, #4

08005444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005448:	d3f9      	bcc.n	800543e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800544a:	4a0a      	ldr	r2, [pc, #40]	@ (8005474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800544c:	4c0a      	ldr	r4, [pc, #40]	@ (8005478 <LoopForever+0x16>)
  movs r3, #0
 800544e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005450:	e001      	b.n	8005456 <LoopFillZerobss>

08005452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005454:	3204      	adds	r2, #4

08005456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005458:	d3fb      	bcc.n	8005452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800545a:	f00d f969 	bl	8012730 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800545e:	f7fd f959 	bl	8002714 <main>

08005462 <LoopForever>:

LoopForever:
    b LoopForever
 8005462:	e7fe      	b.n	8005462 <LoopForever>
  ldr   r0, =_estack
 8005464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800546c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005470:	08017ec0 	.word	0x08017ec0
  ldr r2, =_sbss
 8005474:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005478:	20006d48 	.word	0x20006d48

0800547c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800547c:	e7fe      	b.n	800547c <ADC1_2_IRQHandler>

0800547e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005488:	2003      	movs	r0, #3
 800548a:	f001 fcbf 	bl	8006e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800548e:	2000      	movs	r0, #0
 8005490:	f000 f80e 	bl	80054b0 <HAL_InitTick>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	71fb      	strb	r3, [r7, #7]
 800549e:	e001      	b.n	80054a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054a0:	f7ff fac2 	bl	8004a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054a4:	79fb      	ldrb	r3, [r7, #7]

}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80054bc:	4b16      	ldr	r3, [pc, #88]	@ (8005518 <HAL_InitTick+0x68>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d022      	beq.n	800550a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054c4:	4b15      	ldr	r3, [pc, #84]	@ (800551c <HAL_InitTick+0x6c>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	4b13      	ldr	r3, [pc, #76]	@ (8005518 <HAL_InitTick+0x68>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80054d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 fcca 	bl	8006e72 <HAL_SYSTICK_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10f      	bne.n	8005504 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b0f      	cmp	r3, #15
 80054e8:	d809      	bhi.n	80054fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054ea:	2200      	movs	r2, #0
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	f04f 30ff 	mov.w	r0, #4294967295
 80054f2:	f001 fc96 	bl	8006e22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005520 <HAL_InitTick+0x70>)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	e007      	b.n	800550e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	73fb      	strb	r3, [r7, #15]
 8005502:	e004      	b.n	800550e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	73fb      	strb	r3, [r7, #15]
 8005508:	e001      	b.n	800550e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800550e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	2000000c 	.word	0x2000000c
 800551c:	20000004 	.word	0x20000004
 8005520:	20000008 	.word	0x20000008

08005524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005528:	4b05      	ldr	r3, [pc, #20]	@ (8005540 <HAL_IncTick+0x1c>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <HAL_IncTick+0x20>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4413      	add	r3, r2
 8005532:	4a03      	ldr	r2, [pc, #12]	@ (8005540 <HAL_IncTick+0x1c>)
 8005534:	6013      	str	r3, [r2, #0]
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	20006bb4 	.word	0x20006bb4
 8005544:	2000000c 	.word	0x2000000c

08005548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return uwTick;
 800554c:	4b03      	ldr	r3, [pc, #12]	@ (800555c <HAL_GetTick+0x14>)
 800554e:	681b      	ldr	r3, [r3, #0]
}
 8005550:	4618      	mov	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20006bb4 	.word	0x20006bb4

08005560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005568:	f7ff ffee 	bl	8005548 <HAL_GetTick>
 800556c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d004      	beq.n	8005584 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800557a:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <HAL_Delay+0x40>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005584:	bf00      	nop
 8005586:	f7ff ffdf 	bl	8005548 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	429a      	cmp	r2, r3
 8005594:	d8f7      	bhi.n	8005586 <HAL_Delay+0x26>
  {
  }
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	2000000c 	.word	0x2000000c

080055a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	609a      	str	r2, [r3, #8]
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	609a      	str	r2, [r3, #8]
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3360      	adds	r3, #96	@ 0x60
 800561e:	461a      	mov	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b08      	ldr	r3, [pc, #32]	@ (8005650 <LL_ADC_SetOffset+0x44>)
 800562e:	4013      	ands	r3, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	4313      	orrs	r3, r2
 800563c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	03fff000 	.word	0x03fff000

08005654 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3360      	adds	r3, #96	@ 0x60
 8005662:	461a      	mov	r2, r3
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3360      	adds	r3, #96	@ 0x60
 8005690:	461a      	mov	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	431a      	orrs	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3360      	adds	r3, #96	@ 0x60
 80056c6:	461a      	mov	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	431a      	orrs	r2, r3
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80056e0:	bf00      	nop
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3360      	adds	r3, #96	@ 0x60
 80056fc:	461a      	mov	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	431a      	orrs	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	615a      	str	r2, [r3, #20]
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800576e:	b480      	push	{r7}
 8005770:	b087      	sub	sp, #28
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3330      	adds	r3, #48	@ 0x30
 800577e:	461a      	mov	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	4413      	add	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	211f      	movs	r1, #31
 800579a:	fa01 f303 	lsl.w	r3, r1, r3
 800579e:	43db      	mvns	r3, r3
 80057a0:	401a      	ands	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	0e9b      	lsrs	r3, r3, #26
 80057a6:	f003 011f 	and.w	r1, r3, #31
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	fa01 f303 	lsl.w	r3, r1, r3
 80057b4:	431a      	orrs	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b087      	sub	sp, #28
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3314      	adds	r3, #20
 80057d6:	461a      	mov	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	0e5b      	lsrs	r3, r3, #25
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	4413      	add	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	0d1b      	lsrs	r3, r3, #20
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	2107      	movs	r1, #7
 80057f4:	fa01 f303 	lsl.w	r3, r1, r3
 80057f8:	43db      	mvns	r3, r3
 80057fa:	401a      	ands	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	0d1b      	lsrs	r3, r3, #20
 8005800:	f003 031f 	and.w	r3, r3, #31
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	431a      	orrs	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005834:	43db      	mvns	r3, r3
 8005836:	401a      	ands	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f003 0318 	and.w	r3, r3, #24
 800583e:	4908      	ldr	r1, [pc, #32]	@ (8005860 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005840:	40d9      	lsrs	r1, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	400b      	ands	r3, r1
 8005846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800584a:	431a      	orrs	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005852:	bf00      	nop
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	0007ffff 	.word	0x0007ffff

08005864 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 031f 	and.w	r3, r3, #31
}
 8005874:	4618      	mov	r0, r3
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005890:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6093      	str	r3, [r2, #8]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058b8:	d101      	bne.n	80058be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80058dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005904:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005908:	d101      	bne.n	800590e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800592c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005930:	f043 0201 	orr.w	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <LL_ADC_IsEnabled+0x18>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <LL_ADC_IsEnabled+0x1a>
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800597a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800597e:	f043 0204 	orr.w	r2, r3, #4
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d101      	bne.n	80059aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d101      	bne.n	80059d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
	...

080059e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80059e0:	b590      	push	{r4, r7, lr}
 80059e2:	b089      	sub	sp, #36	@ 0x24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e1a9      	b.n	8005d4e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d109      	bne.n	8005a1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7fc fc6d 	bl	80022e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff ff3f 	bl	80058a4 <LL_ADC_IsDeepPowerDownEnabled>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff ff25 	bl	8005880 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff ff5a 	bl	80058f4 <LL_ADC_IsInternalRegulatorEnabled>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d115      	bne.n	8005a72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff ff3e 	bl	80058cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a50:	4b9c      	ldr	r3, [pc, #624]	@ (8005cc4 <HAL_ADC_Init+0x2e4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	099b      	lsrs	r3, r3, #6
 8005a56:	4a9c      	ldr	r2, [pc, #624]	@ (8005cc8 <HAL_ADC_Init+0x2e8>)
 8005a58:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5c:	099b      	lsrs	r3, r3, #6
 8005a5e:	3301      	adds	r3, #1
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005a64:	e002      	b.n	8005a6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f9      	bne.n	8005a66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff ff3c 	bl	80058f4 <LL_ADC_IsInternalRegulatorEnabled>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10d      	bne.n	8005a9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a86:	f043 0210 	orr.w	r2, r3, #16
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a92:	f043 0201 	orr.w	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff ff75 	bl	8005992 <LL_ADC_REG_IsConversionOngoing>
 8005aa8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 8142 	bne.w	8005d3c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f040 813e 	bne.w	8005d3c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005ac8:	f043 0202 	orr.w	r2, r3, #2
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff ff35 	bl	8005944 <LL_ADC_IsEnabled>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d141      	bne.n	8005b64 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ae8:	d004      	beq.n	8005af4 <HAL_ADC_Init+0x114>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a77      	ldr	r2, [pc, #476]	@ (8005ccc <HAL_ADC_Init+0x2ec>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d10f      	bne.n	8005b14 <HAL_ADC_Init+0x134>
 8005af4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005af8:	f7ff ff24 	bl	8005944 <LL_ADC_IsEnabled>
 8005afc:	4604      	mov	r4, r0
 8005afe:	4873      	ldr	r0, [pc, #460]	@ (8005ccc <HAL_ADC_Init+0x2ec>)
 8005b00:	f7ff ff20 	bl	8005944 <LL_ADC_IsEnabled>
 8005b04:	4603      	mov	r3, r0
 8005b06:	4323      	orrs	r3, r4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2301      	moveq	r3, #1
 8005b0e:	2300      	movne	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	e012      	b.n	8005b3a <HAL_ADC_Init+0x15a>
 8005b14:	486e      	ldr	r0, [pc, #440]	@ (8005cd0 <HAL_ADC_Init+0x2f0>)
 8005b16:	f7ff ff15 	bl	8005944 <LL_ADC_IsEnabled>
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	486d      	ldr	r0, [pc, #436]	@ (8005cd4 <HAL_ADC_Init+0x2f4>)
 8005b1e:	f7ff ff11 	bl	8005944 <LL_ADC_IsEnabled>
 8005b22:	4603      	mov	r3, r0
 8005b24:	431c      	orrs	r4, r3
 8005b26:	486c      	ldr	r0, [pc, #432]	@ (8005cd8 <HAL_ADC_Init+0x2f8>)
 8005b28:	f7ff ff0c 	bl	8005944 <LL_ADC_IsEnabled>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	4323      	orrs	r3, r4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	bf0c      	ite	eq
 8005b34:	2301      	moveq	r3, #1
 8005b36:	2300      	movne	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d012      	beq.n	8005b64 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b46:	d004      	beq.n	8005b52 <HAL_ADC_Init+0x172>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a5f      	ldr	r2, [pc, #380]	@ (8005ccc <HAL_ADC_Init+0x2ec>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d101      	bne.n	8005b56 <HAL_ADC_Init+0x176>
 8005b52:	4a62      	ldr	r2, [pc, #392]	@ (8005cdc <HAL_ADC_Init+0x2fc>)
 8005b54:	e000      	b.n	8005b58 <HAL_ADC_Init+0x178>
 8005b56:	4a62      	ldr	r2, [pc, #392]	@ (8005ce0 <HAL_ADC_Init+0x300>)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f7ff fd20 	bl	80055a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	7f5b      	ldrb	r3, [r3, #29]
 8005b68:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b6e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005b74:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005b7a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b82:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b84:	4313      	orrs	r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d106      	bne.n	8005ba0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b96:	3b01      	subs	r3, #1
 8005b98:	045b      	lsls	r3, r3, #17
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	4b48      	ldr	r3, [pc, #288]	@ (8005ce4 <HAL_ADC_Init+0x304>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	69b9      	ldr	r1, [r7, #24]
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fee4 	bl	80059b8 <LL_ADC_INJ_IsConversionOngoing>
 8005bf0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d17f      	bne.n	8005cf8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d17c      	bne.n	8005cf8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c02:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c0a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c1a:	f023 0302 	bic.w	r3, r3, #2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	69b9      	ldr	r1, [r7, #24]
 8005c24:	430b      	orrs	r3, r1
 8005c26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d017      	beq.n	8005c60 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005c3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c48:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005c4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6911      	ldr	r1, [r2, #16]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005c5e:	e013      	b.n	8005c88 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005c6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005c80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c84:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d12a      	bne.n	8005ce8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005c9c:	f023 0304 	bic.w	r3, r3, #4
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ca8:	4311      	orrs	r1, r2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005cae:	4311      	orrs	r1, r2
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0201 	orr.w	r2, r2, #1
 8005cc0:	611a      	str	r2, [r3, #16]
 8005cc2:	e019      	b.n	8005cf8 <HAL_ADC_Init+0x318>
 8005cc4:	20000004 	.word	0x20000004
 8005cc8:	053e2d63 	.word	0x053e2d63
 8005ccc:	50000100 	.word	0x50000100
 8005cd0:	50000400 	.word	0x50000400
 8005cd4:	50000500 	.word	0x50000500
 8005cd8:	50000600 	.word	0x50000600
 8005cdc:	50000300 	.word	0x50000300
 8005ce0:	50000700 	.word	0x50000700
 8005ce4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691a      	ldr	r2, [r3, #16]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0201 	bic.w	r2, r2, #1
 8005cf6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d10c      	bne.n	8005d1a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d06:	f023 010f 	bic.w	r1, r3, #15
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	1e5a      	subs	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d18:	e007      	b.n	8005d2a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 020f 	bic.w	r2, r2, #15
 8005d28:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	f043 0201 	orr.w	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d3a:	e007      	b.n	8005d4c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d40:	f043 0210 	orr.w	r2, r3, #16
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3724      	adds	r7, #36	@ 0x24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd90      	pop	{r4, r7, pc}
 8005d56:	bf00      	nop

08005d58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d6c:	d004      	beq.n	8005d78 <HAL_ADC_Start_DMA+0x20>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a5a      	ldr	r2, [pc, #360]	@ (8005edc <HAL_ADC_Start_DMA+0x184>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d101      	bne.n	8005d7c <HAL_ADC_Start_DMA+0x24>
 8005d78:	4b59      	ldr	r3, [pc, #356]	@ (8005ee0 <HAL_ADC_Start_DMA+0x188>)
 8005d7a:	e000      	b.n	8005d7e <HAL_ADC_Start_DMA+0x26>
 8005d7c:	4b59      	ldr	r3, [pc, #356]	@ (8005ee4 <HAL_ADC_Start_DMA+0x18c>)
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff fd70 	bl	8005864 <LL_ADC_GetMultimode>
 8005d84:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff fe01 	bl	8005992 <LL_ADC_REG_IsConversionOngoing>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f040 809b 	bne.w	8005ece <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_ADC_Start_DMA+0x4e>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e096      	b.n	8005ed4 <HAL_ADC_Start_DMA+0x17c>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a4d      	ldr	r2, [pc, #308]	@ (8005ee8 <HAL_ADC_Start_DMA+0x190>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d008      	beq.n	8005dca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b05      	cmp	r3, #5
 8005dc2:	d002      	beq.n	8005dca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	2b09      	cmp	r3, #9
 8005dc8:	d17a      	bne.n	8005ec0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fcf6 	bl	80067bc <ADC_Enable>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d16d      	bne.n	8005eb6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dde:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a3a      	ldr	r2, [pc, #232]	@ (8005edc <HAL_ADC_Start_DMA+0x184>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_ADC_Start_DMA+0xb4>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8005eec <HAL_ADC_Start_DMA+0x194>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d002      	beq.n	8005e08 <HAL_ADC_Start_DMA+0xb0>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	e003      	b.n	8005e10 <HAL_ADC_Start_DMA+0xb8>
 8005e08:	4b39      	ldr	r3, [pc, #228]	@ (8005ef0 <HAL_ADC_Start_DMA+0x198>)
 8005e0a:	e001      	b.n	8005e10 <HAL_ADC_Start_DMA+0xb8>
 8005e0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d002      	beq.n	8005e1e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d105      	bne.n	8005e2a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e22:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d006      	beq.n	8005e44 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e3a:	f023 0206 	bic.w	r2, r3, #6
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e42:	e002      	b.n	8005e4a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4e:	4a29      	ldr	r2, [pc, #164]	@ (8005ef4 <HAL_ADC_Start_DMA+0x19c>)
 8005e50:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e56:	4a28      	ldr	r2, [pc, #160]	@ (8005ef8 <HAL_ADC_Start_DMA+0x1a0>)
 8005e58:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5e:	4a27      	ldr	r2, [pc, #156]	@ (8005efc <HAL_ADC_Start_DMA+0x1a4>)
 8005e60:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	221c      	movs	r2, #28
 8005e68:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0210 	orr.w	r2, r2, #16
 8005e80:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3340      	adds	r3, #64	@ 0x40
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f001 f89b 	bl	8006fdc <HAL_DMA_Start_IT>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fd5b 	bl	800596a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005eb4:	e00d      	b.n	8005ed2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005ebe:	e008      	b.n	8005ed2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005ecc:	e001      	b.n	8005ed2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005ece:	2302      	movs	r3, #2
 8005ed0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	50000100 	.word	0x50000100
 8005ee0:	50000300 	.word	0x50000300
 8005ee4:	50000700 	.word	0x50000700
 8005ee8:	50000600 	.word	0x50000600
 8005eec:	50000500 	.word	0x50000500
 8005ef0:	50000400 	.word	0x50000400
 8005ef4:	080068e9 	.word	0x080068e9
 8005ef8:	080069c1 	.word	0x080069c1
 8005efc:	080069dd 	.word	0x080069dd

08005f00 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b0b6      	sub	sp, #216	@ 0xd8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d102      	bne.n	8005f60 <HAL_ADC_ConfigChannel+0x24>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	f000 bc13 	b.w	8006786 <HAL_ADC_ConfigChannel+0x84a>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff fd10 	bl	8005992 <LL_ADC_REG_IsConversionOngoing>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 83f3 	bne.w	8006760 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	6859      	ldr	r1, [r3, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f7ff fbf1 	bl	800576e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff fcfe 	bl	8005992 <LL_ADC_REG_IsConversionOngoing>
 8005f96:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fd0a 	bl	80059b8 <LL_ADC_INJ_IsConversionOngoing>
 8005fa4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fa8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f040 81d9 	bne.w	8006364 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f040 81d4 	bne.w	8006364 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fc4:	d10f      	bne.n	8005fe6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f7ff fbf8 	bl	80057c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff fb9f 	bl	8005722 <LL_ADC_SetSamplingTimeCommonConfig>
 8005fe4:	e00e      	b.n	8006004 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6818      	ldr	r0, [r3, #0]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6819      	ldr	r1, [r3, #0]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f7ff fbe7 	bl	80057c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fb8f 	bl	8005722 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	08db      	lsrs	r3, r3, #3
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b04      	cmp	r3, #4
 8006024:	d022      	beq.n	800606c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6919      	ldr	r1, [r3, #16]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006036:	f7ff fae9 	bl	800560c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6919      	ldr	r1, [r3, #16]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	461a      	mov	r2, r3
 8006048:	f7ff fb35 	bl	80056b6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006058:	2b01      	cmp	r3, #1
 800605a:	d102      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x126>
 800605c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006060:	e000      	b.n	8006064 <HAL_ADC_ConfigChannel+0x128>
 8006062:	2300      	movs	r3, #0
 8006064:	461a      	mov	r2, r3
 8006066:	f7ff fb41 	bl	80056ec <LL_ADC_SetOffsetSaturation>
 800606a:	e17b      	b.n	8006364 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2100      	movs	r1, #0
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff faee 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8006078:	4603      	mov	r3, r0
 800607a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <HAL_ADC_ConfigChannel+0x15c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2100      	movs	r1, #0
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff fae3 	bl	8005654 <LL_ADC_GetOffsetChannel>
 800608e:	4603      	mov	r3, r0
 8006090:	0e9b      	lsrs	r3, r3, #26
 8006092:	f003 021f 	and.w	r2, r3, #31
 8006096:	e01e      	b.n	80060d6 <HAL_ADC_ConfigChannel+0x19a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2100      	movs	r1, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fad8 	bl	8005654 <LL_ADC_GetOffsetChannel>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80060ae:	fa93 f3a3 	rbit	r3, r3
 80060b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80060b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80060be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80060c6:	2320      	movs	r3, #32
 80060c8:	e004      	b.n	80060d4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80060ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060ce:	fab3 f383 	clz	r3, r3
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d105      	bne.n	80060ee <HAL_ADC_ConfigChannel+0x1b2>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	0e9b      	lsrs	r3, r3, #26
 80060e8:	f003 031f 	and.w	r3, r3, #31
 80060ec:	e018      	b.n	8006120 <HAL_ADC_ConfigChannel+0x1e4>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80060fa:	fa93 f3a3 	rbit	r3, r3
 80060fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006106:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800610a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006112:	2320      	movs	r3, #32
 8006114:	e004      	b.n	8006120 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800611a:	fab3 f383 	clz	r3, r3
 800611e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006120:	429a      	cmp	r2, r3
 8006122:	d106      	bne.n	8006132 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2200      	movs	r2, #0
 800612a:	2100      	movs	r1, #0
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff faa7 	bl	8005680 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2101      	movs	r1, #1
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff fa8b 	bl	8005654 <LL_ADC_GetOffsetChannel>
 800613e:	4603      	mov	r3, r0
 8006140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <HAL_ADC_ConfigChannel+0x222>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2101      	movs	r1, #1
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fa80 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8006154:	4603      	mov	r3, r0
 8006156:	0e9b      	lsrs	r3, r3, #26
 8006158:	f003 021f 	and.w	r2, r3, #31
 800615c:	e01e      	b.n	800619c <HAL_ADC_ConfigChannel+0x260>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2101      	movs	r1, #1
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff fa75 	bl	8005654 <LL_ADC_GetOffsetChannel>
 800616a:	4603      	mov	r3, r0
 800616c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006170:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006174:	fa93 f3a3 	rbit	r3, r3
 8006178:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800617c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800618c:	2320      	movs	r3, #32
 800618e:	e004      	b.n	800619a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006190:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006194:	fab3 f383 	clz	r3, r3
 8006198:	b2db      	uxtb	r3, r3
 800619a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d105      	bne.n	80061b4 <HAL_ADC_ConfigChannel+0x278>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	0e9b      	lsrs	r3, r3, #26
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	e018      	b.n	80061e6 <HAL_ADC_ConfigChannel+0x2aa>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061c0:	fa93 f3a3 	rbit	r3, r3
 80061c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80061c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80061cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80061d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80061d8:	2320      	movs	r3, #32
 80061da:	e004      	b.n	80061e6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80061dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061e0:	fab3 f383 	clz	r3, r3
 80061e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d106      	bne.n	80061f8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	2101      	movs	r1, #1
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff fa44 	bl	8005680 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2102      	movs	r1, #2
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff fa28 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8006204:	4603      	mov	r3, r0
 8006206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <HAL_ADC_ConfigChannel+0x2e8>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2102      	movs	r1, #2
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fa1d 	bl	8005654 <LL_ADC_GetOffsetChannel>
 800621a:	4603      	mov	r3, r0
 800621c:	0e9b      	lsrs	r3, r3, #26
 800621e:	f003 021f 	and.w	r2, r3, #31
 8006222:	e01e      	b.n	8006262 <HAL_ADC_ConfigChannel+0x326>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2102      	movs	r1, #2
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff fa12 	bl	8005654 <LL_ADC_GetOffsetChannel>
 8006230:	4603      	mov	r3, r0
 8006232:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006236:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800623a:	fa93 f3a3 	rbit	r3, r3
 800623e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006242:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006246:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800624a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006252:	2320      	movs	r3, #32
 8006254:	e004      	b.n	8006260 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006256:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800625a:	fab3 f383 	clz	r3, r3
 800625e:	b2db      	uxtb	r3, r3
 8006260:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800626a:	2b00      	cmp	r3, #0
 800626c:	d105      	bne.n	800627a <HAL_ADC_ConfigChannel+0x33e>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	0e9b      	lsrs	r3, r3, #26
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	e016      	b.n	80062a8 <HAL_ADC_ConfigChannel+0x36c>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006282:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006286:	fa93 f3a3 	rbit	r3, r3
 800628a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800628c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800628e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006292:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800629a:	2320      	movs	r3, #32
 800629c:	e004      	b.n	80062a8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800629e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062a2:	fab3 f383 	clz	r3, r3
 80062a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d106      	bne.n	80062ba <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2200      	movs	r2, #0
 80062b2:	2102      	movs	r1, #2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff f9e3 	bl	8005680 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2103      	movs	r1, #3
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff f9c7 	bl	8005654 <LL_ADC_GetOffsetChannel>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <HAL_ADC_ConfigChannel+0x3aa>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2103      	movs	r1, #3
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff f9bc 	bl	8005654 <LL_ADC_GetOffsetChannel>
 80062dc:	4603      	mov	r3, r0
 80062de:	0e9b      	lsrs	r3, r3, #26
 80062e0:	f003 021f 	and.w	r2, r3, #31
 80062e4:	e017      	b.n	8006316 <HAL_ADC_ConfigChannel+0x3da>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2103      	movs	r1, #3
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff f9b1 	bl	8005654 <LL_ADC_GetOffsetChannel>
 80062f2:	4603      	mov	r3, r0
 80062f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062f8:	fa93 f3a3 	rbit	r3, r3
 80062fc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80062fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006300:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006302:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006308:	2320      	movs	r3, #32
 800630a:	e003      	b.n	8006314 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800630c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800630e:	fab3 f383 	clz	r3, r3
 8006312:	b2db      	uxtb	r3, r3
 8006314:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800631e:	2b00      	cmp	r3, #0
 8006320:	d105      	bne.n	800632e <HAL_ADC_ConfigChannel+0x3f2>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	0e9b      	lsrs	r3, r3, #26
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	e011      	b.n	8006352 <HAL_ADC_ConfigChannel+0x416>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006334:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006336:	fa93 f3a3 	rbit	r3, r3
 800633a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800633c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800633e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006346:	2320      	movs	r3, #32
 8006348:	e003      	b.n	8006352 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800634a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800634c:	fab3 f383 	clz	r3, r3
 8006350:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006352:	429a      	cmp	r2, r3
 8006354:	d106      	bne.n	8006364 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2200      	movs	r2, #0
 800635c:	2103      	movs	r1, #3
 800635e:	4618      	mov	r0, r3
 8006360:	f7ff f98e 	bl	8005680 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff faeb 	bl	8005944 <LL_ADC_IsEnabled>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	f040 813d 	bne.w	80065f0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	6819      	ldr	r1, [r3, #0]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	461a      	mov	r2, r3
 8006384:	f7ff fa4a 	bl	800581c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	4aa2      	ldr	r2, [pc, #648]	@ (8006618 <HAL_ADC_ConfigChannel+0x6dc>)
 800638e:	4293      	cmp	r3, r2
 8006390:	f040 812e 	bne.w	80065f0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <HAL_ADC_ConfigChannel+0x480>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	0e9b      	lsrs	r3, r3, #26
 80063aa:	3301      	adds	r3, #1
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	2b09      	cmp	r3, #9
 80063b2:	bf94      	ite	ls
 80063b4:	2301      	movls	r3, #1
 80063b6:	2300      	movhi	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	e019      	b.n	80063f0 <HAL_ADC_ConfigChannel+0x4b4>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063c4:	fa93 f3a3 	rbit	r3, r3
 80063c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80063ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063cc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80063ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80063d4:	2320      	movs	r3, #32
 80063d6:	e003      	b.n	80063e0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80063d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063da:	fab3 f383 	clz	r3, r3
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	3301      	adds	r3, #1
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	2b09      	cmp	r3, #9
 80063e8:	bf94      	ite	ls
 80063ea:	2301      	movls	r3, #1
 80063ec:	2300      	movhi	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d079      	beq.n	80064e8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d107      	bne.n	8006410 <HAL_ADC_ConfigChannel+0x4d4>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	0e9b      	lsrs	r3, r3, #26
 8006406:	3301      	adds	r3, #1
 8006408:	069b      	lsls	r3, r3, #26
 800640a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800640e:	e015      	b.n	800643c <HAL_ADC_ConfigChannel+0x500>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006418:	fa93 f3a3 	rbit	r3, r3
 800641c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800641e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006420:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006428:	2320      	movs	r3, #32
 800642a:	e003      	b.n	8006434 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800642c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800642e:	fab3 f383 	clz	r3, r3
 8006432:	b2db      	uxtb	r3, r3
 8006434:	3301      	adds	r3, #1
 8006436:	069b      	lsls	r3, r3, #26
 8006438:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <HAL_ADC_ConfigChannel+0x520>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	0e9b      	lsrs	r3, r3, #26
 800644e:	3301      	adds	r3, #1
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	2101      	movs	r1, #1
 8006456:	fa01 f303 	lsl.w	r3, r1, r3
 800645a:	e017      	b.n	800648c <HAL_ADC_ConfigChannel+0x550>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006464:	fa93 f3a3 	rbit	r3, r3
 8006468:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800646a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800646c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800646e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006474:	2320      	movs	r3, #32
 8006476:	e003      	b.n	8006480 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800647a:	fab3 f383 	clz	r3, r3
 800647e:	b2db      	uxtb	r3, r3
 8006480:	3301      	adds	r3, #1
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	2101      	movs	r1, #1
 8006488:	fa01 f303 	lsl.w	r3, r1, r3
 800648c:	ea42 0103 	orr.w	r1, r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <HAL_ADC_ConfigChannel+0x576>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	0e9b      	lsrs	r3, r3, #26
 80064a2:	3301      	adds	r3, #1
 80064a4:	f003 021f 	and.w	r2, r3, #31
 80064a8:	4613      	mov	r3, r2
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	4413      	add	r3, r2
 80064ae:	051b      	lsls	r3, r3, #20
 80064b0:	e018      	b.n	80064e4 <HAL_ADC_ConfigChannel+0x5a8>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ba:	fa93 f3a3 	rbit	r3, r3
 80064be:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80064c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80064c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80064ca:	2320      	movs	r3, #32
 80064cc:	e003      	b.n	80064d6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80064ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d0:	fab3 f383 	clz	r3, r3
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	3301      	adds	r3, #1
 80064d8:	f003 021f 	and.w	r2, r3, #31
 80064dc:	4613      	mov	r3, r2
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	4413      	add	r3, r2
 80064e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064e4:	430b      	orrs	r3, r1
 80064e6:	e07e      	b.n	80065e6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <HAL_ADC_ConfigChannel+0x5c8>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	0e9b      	lsrs	r3, r3, #26
 80064fa:	3301      	adds	r3, #1
 80064fc:	069b      	lsls	r3, r3, #26
 80064fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006502:	e015      	b.n	8006530 <HAL_ADC_ConfigChannel+0x5f4>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650c:	fa93 f3a3 	rbit	r3, r3
 8006510:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006514:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800651c:	2320      	movs	r3, #32
 800651e:	e003      	b.n	8006528 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006522:	fab3 f383 	clz	r3, r3
 8006526:	b2db      	uxtb	r3, r3
 8006528:	3301      	adds	r3, #1
 800652a:	069b      	lsls	r3, r3, #26
 800652c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006538:	2b00      	cmp	r3, #0
 800653a:	d109      	bne.n	8006550 <HAL_ADC_ConfigChannel+0x614>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	0e9b      	lsrs	r3, r3, #26
 8006542:	3301      	adds	r3, #1
 8006544:	f003 031f 	and.w	r3, r3, #31
 8006548:	2101      	movs	r1, #1
 800654a:	fa01 f303 	lsl.w	r3, r1, r3
 800654e:	e017      	b.n	8006580 <HAL_ADC_ConfigChannel+0x644>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	fa93 f3a3 	rbit	r3, r3
 800655c:	61fb      	str	r3, [r7, #28]
  return result;
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006568:	2320      	movs	r3, #32
 800656a:	e003      	b.n	8006574 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800656c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656e:	fab3 f383 	clz	r3, r3
 8006572:	b2db      	uxtb	r3, r3
 8006574:	3301      	adds	r3, #1
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2101      	movs	r1, #1
 800657c:	fa01 f303 	lsl.w	r3, r1, r3
 8006580:	ea42 0103 	orr.w	r1, r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10d      	bne.n	80065ac <HAL_ADC_ConfigChannel+0x670>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	0e9b      	lsrs	r3, r3, #26
 8006596:	3301      	adds	r3, #1
 8006598:	f003 021f 	and.w	r2, r3, #31
 800659c:	4613      	mov	r3, r2
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	4413      	add	r3, r2
 80065a2:	3b1e      	subs	r3, #30
 80065a4:	051b      	lsls	r3, r3, #20
 80065a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80065aa:	e01b      	b.n	80065e4 <HAL_ADC_ConfigChannel+0x6a8>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	fa93 f3a3 	rbit	r3, r3
 80065b8:	613b      	str	r3, [r7, #16]
  return result;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80065c4:	2320      	movs	r3, #32
 80065c6:	e003      	b.n	80065d0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	fab3 f383 	clz	r3, r3
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	3301      	adds	r3, #1
 80065d2:	f003 021f 	and.w	r2, r3, #31
 80065d6:	4613      	mov	r3, r2
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	4413      	add	r3, r2
 80065dc:	3b1e      	subs	r3, #30
 80065de:	051b      	lsls	r3, r3, #20
 80065e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065ea:	4619      	mov	r1, r3
 80065ec:	f7ff f8eb 	bl	80057c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4b09      	ldr	r3, [pc, #36]	@ (800661c <HAL_ADC_ConfigChannel+0x6e0>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 80be 	beq.w	800677a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006606:	d004      	beq.n	8006612 <HAL_ADC_ConfigChannel+0x6d6>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a04      	ldr	r2, [pc, #16]	@ (8006620 <HAL_ADC_ConfigChannel+0x6e4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d10a      	bne.n	8006628 <HAL_ADC_ConfigChannel+0x6ec>
 8006612:	4b04      	ldr	r3, [pc, #16]	@ (8006624 <HAL_ADC_ConfigChannel+0x6e8>)
 8006614:	e009      	b.n	800662a <HAL_ADC_ConfigChannel+0x6ee>
 8006616:	bf00      	nop
 8006618:	407f0000 	.word	0x407f0000
 800661c:	80080000 	.word	0x80080000
 8006620:	50000100 	.word	0x50000100
 8006624:	50000300 	.word	0x50000300
 8006628:	4b59      	ldr	r3, [pc, #356]	@ (8006790 <HAL_ADC_ConfigChannel+0x854>)
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe ffe0 	bl	80055f0 <LL_ADC_GetCommonPathInternalCh>
 8006630:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a56      	ldr	r2, [pc, #344]	@ (8006794 <HAL_ADC_ConfigChannel+0x858>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <HAL_ADC_ConfigChannel+0x70c>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a55      	ldr	r2, [pc, #340]	@ (8006798 <HAL_ADC_ConfigChannel+0x85c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d13a      	bne.n	80066be <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006648:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800664c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d134      	bne.n	80066be <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800665c:	d005      	beq.n	800666a <HAL_ADC_ConfigChannel+0x72e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a4e      	ldr	r2, [pc, #312]	@ (800679c <HAL_ADC_ConfigChannel+0x860>)
 8006664:	4293      	cmp	r3, r2
 8006666:	f040 8085 	bne.w	8006774 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006672:	d004      	beq.n	800667e <HAL_ADC_ConfigChannel+0x742>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a49      	ldr	r2, [pc, #292]	@ (80067a0 <HAL_ADC_ConfigChannel+0x864>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d101      	bne.n	8006682 <HAL_ADC_ConfigChannel+0x746>
 800667e:	4a49      	ldr	r2, [pc, #292]	@ (80067a4 <HAL_ADC_ConfigChannel+0x868>)
 8006680:	e000      	b.n	8006684 <HAL_ADC_ConfigChannel+0x748>
 8006682:	4a43      	ldr	r2, [pc, #268]	@ (8006790 <HAL_ADC_ConfigChannel+0x854>)
 8006684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006688:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f7fe ff9b 	bl	80055ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006694:	4b44      	ldr	r3, [pc, #272]	@ (80067a8 <HAL_ADC_ConfigChannel+0x86c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	099b      	lsrs	r3, r3, #6
 800669a:	4a44      	ldr	r2, [pc, #272]	@ (80067ac <HAL_ADC_ConfigChannel+0x870>)
 800669c:	fba2 2303 	umull	r2, r3, r2, r3
 80066a0:	099b      	lsrs	r3, r3, #6
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	4613      	mov	r3, r2
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80066ae:	e002      	b.n	80066b6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f9      	bne.n	80066b0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066bc:	e05a      	b.n	8006774 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a3b      	ldr	r2, [pc, #236]	@ (80067b0 <HAL_ADC_ConfigChannel+0x874>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d125      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80066c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d11f      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a31      	ldr	r2, [pc, #196]	@ (80067a0 <HAL_ADC_ConfigChannel+0x864>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d104      	bne.n	80066e8 <HAL_ADC_ConfigChannel+0x7ac>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a34      	ldr	r2, [pc, #208]	@ (80067b4 <HAL_ADC_ConfigChannel+0x878>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d047      	beq.n	8006778 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066f0:	d004      	beq.n	80066fc <HAL_ADC_ConfigChannel+0x7c0>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a2a      	ldr	r2, [pc, #168]	@ (80067a0 <HAL_ADC_ConfigChannel+0x864>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d101      	bne.n	8006700 <HAL_ADC_ConfigChannel+0x7c4>
 80066fc:	4a29      	ldr	r2, [pc, #164]	@ (80067a4 <HAL_ADC_ConfigChannel+0x868>)
 80066fe:	e000      	b.n	8006702 <HAL_ADC_ConfigChannel+0x7c6>
 8006700:	4a23      	ldr	r2, [pc, #140]	@ (8006790 <HAL_ADC_ConfigChannel+0x854>)
 8006702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800670a:	4619      	mov	r1, r3
 800670c:	4610      	mov	r0, r2
 800670e:	f7fe ff5c 	bl	80055ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006712:	e031      	b.n	8006778 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a27      	ldr	r2, [pc, #156]	@ (80067b8 <HAL_ADC_ConfigChannel+0x87c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d12d      	bne.n	800677a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800671e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d127      	bne.n	800677a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1c      	ldr	r2, [pc, #112]	@ (80067a0 <HAL_ADC_ConfigChannel+0x864>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d022      	beq.n	800677a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800673c:	d004      	beq.n	8006748 <HAL_ADC_ConfigChannel+0x80c>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a17      	ldr	r2, [pc, #92]	@ (80067a0 <HAL_ADC_ConfigChannel+0x864>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d101      	bne.n	800674c <HAL_ADC_ConfigChannel+0x810>
 8006748:	4a16      	ldr	r2, [pc, #88]	@ (80067a4 <HAL_ADC_ConfigChannel+0x868>)
 800674a:	e000      	b.n	800674e <HAL_ADC_ConfigChannel+0x812>
 800674c:	4a10      	ldr	r2, [pc, #64]	@ (8006790 <HAL_ADC_ConfigChannel+0x854>)
 800674e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006752:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f7fe ff36 	bl	80055ca <LL_ADC_SetCommonPathInternalCh>
 800675e:	e00c      	b.n	800677a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006764:	f043 0220 	orr.w	r2, r3, #32
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006772:	e002      	b.n	800677a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006774:	bf00      	nop
 8006776:	e000      	b.n	800677a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006778:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006782:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006786:	4618      	mov	r0, r3
 8006788:	37d8      	adds	r7, #216	@ 0xd8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	50000700 	.word	0x50000700
 8006794:	c3210000 	.word	0xc3210000
 8006798:	90c00010 	.word	0x90c00010
 800679c:	50000600 	.word	0x50000600
 80067a0:	50000100 	.word	0x50000100
 80067a4:	50000300 	.word	0x50000300
 80067a8:	20000004 	.word	0x20000004
 80067ac:	053e2d63 	.word	0x053e2d63
 80067b0:	c7520000 	.word	0xc7520000
 80067b4:	50000500 	.word	0x50000500
 80067b8:	cb840000 	.word	0xcb840000

080067bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff f8b9 	bl	8005944 <LL_ADC_IsEnabled>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d176      	bne.n	80068c6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	4b3c      	ldr	r3, [pc, #240]	@ (80068d0 <ADC_Enable+0x114>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00d      	beq.n	8006802 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ea:	f043 0210 	orr.w	r2, r3, #16
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067f6:	f043 0201 	orr.w	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e062      	b.n	80068c8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff f888 	bl	800591c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006814:	d004      	beq.n	8006820 <ADC_Enable+0x64>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a2e      	ldr	r2, [pc, #184]	@ (80068d4 <ADC_Enable+0x118>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d101      	bne.n	8006824 <ADC_Enable+0x68>
 8006820:	4b2d      	ldr	r3, [pc, #180]	@ (80068d8 <ADC_Enable+0x11c>)
 8006822:	e000      	b.n	8006826 <ADC_Enable+0x6a>
 8006824:	4b2d      	ldr	r3, [pc, #180]	@ (80068dc <ADC_Enable+0x120>)
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe fee2 	bl	80055f0 <LL_ADC_GetCommonPathInternalCh>
 800682c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800682e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006832:	2b00      	cmp	r3, #0
 8006834:	d013      	beq.n	800685e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006836:	4b2a      	ldr	r3, [pc, #168]	@ (80068e0 <ADC_Enable+0x124>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	099b      	lsrs	r3, r3, #6
 800683c:	4a29      	ldr	r2, [pc, #164]	@ (80068e4 <ADC_Enable+0x128>)
 800683e:	fba2 2303 	umull	r2, r3, r2, r3
 8006842:	099b      	lsrs	r3, r3, #6
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	4613      	mov	r3, r2
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006850:	e002      	b.n	8006858 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	3b01      	subs	r3, #1
 8006856:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f9      	bne.n	8006852 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800685e:	f7fe fe73 	bl	8005548 <HAL_GetTick>
 8006862:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006864:	e028      	b.n	80068b8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff f86a 	bl	8005944 <LL_ADC_IsEnabled>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff f84e 	bl	800591c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006880:	f7fe fe62 	bl	8005548 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d914      	bls.n	80068b8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b01      	cmp	r3, #1
 800689a:	d00d      	beq.n	80068b8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068a0:	f043 0210 	orr.w	r2, r3, #16
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ac:	f043 0201 	orr.w	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e007      	b.n	80068c8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d1cf      	bne.n	8006866 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	8000003f 	.word	0x8000003f
 80068d4:	50000100 	.word	0x50000100
 80068d8:	50000300 	.word	0x50000300
 80068dc:	50000700 	.word	0x50000700
 80068e0:	20000004 	.word	0x20000004
 80068e4:	053e2d63 	.word	0x053e2d63

080068e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d14b      	bne.n	800699a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006906:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b00      	cmp	r3, #0
 800691a:	d021      	beq.n	8006960 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe ff11 	bl	8005748 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d032      	beq.n	8006992 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d12b      	bne.n	8006992 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800693e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800694a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d11f      	bne.n	8006992 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006956:	f043 0201 	orr.w	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800695e:	e018      	b.n	8006992 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d111      	bne.n	8006992 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006972:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800697e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d105      	bne.n	8006992 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698a:	f043 0201 	orr.w	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f7ff fab4 	bl	8005f00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006998:	e00e      	b.n	80069b8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800699e:	f003 0310 	and.w	r3, r3, #16
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff fabe 	bl	8005f28 <HAL_ADC_ErrorCallback>
}
 80069ac:	e004      	b.n	80069b8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff faa0 	bl	8005f14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069fa:	f043 0204 	orr.w	r2, r3, #4
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff fa90 	bl	8005f28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a08:	bf00      	nop
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <LL_ADC_IsEnabled>:
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <LL_ADC_IsEnabled+0x18>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <LL_ADC_IsEnabled+0x1a>
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <LL_ADC_REG_IsConversionOngoing>:
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d101      	bne.n	8006a4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006a5c:	b590      	push	{r4, r7, lr}
 8006a5e:	b0a1      	sub	sp, #132	@ 0x84
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d101      	bne.n	8006a7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006a76:	2302      	movs	r3, #2
 8006a78:	e0e7      	b.n	8006c4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006a82:	2300      	movs	r3, #0
 8006a84:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006a86:	2300      	movs	r3, #0
 8006a88:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a92:	d102      	bne.n	8006a9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006a94:	4b6f      	ldr	r3, [pc, #444]	@ (8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006a96:	60bb      	str	r3, [r7, #8]
 8006a98:	e009      	b.n	8006aae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a6e      	ldr	r2, [pc, #440]	@ (8006c58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d102      	bne.n	8006aaa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006aa4:	4b6d      	ldr	r3, [pc, #436]	@ (8006c5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006aa6:	60bb      	str	r3, [r7, #8]
 8006aa8:	e001      	b.n	8006aae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10b      	bne.n	8006acc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab8:	f043 0220 	orr.w	r2, r3, #32
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0be      	b.n	8006c4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff ffb1 	bl	8006a36 <LL_ADC_REG_IsConversionOngoing>
 8006ad4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff ffab 	bl	8006a36 <LL_ADC_REG_IsConversionOngoing>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f040 80a0 	bne.w	8006c28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006ae8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f040 809c 	bne.w	8006c28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006af8:	d004      	beq.n	8006b04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a55      	ldr	r2, [pc, #340]	@ (8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d101      	bne.n	8006b08 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006b04:	4b56      	ldr	r3, [pc, #344]	@ (8006c60 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006b06:	e000      	b.n	8006b0a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006b08:	4b56      	ldr	r3, [pc, #344]	@ (8006c64 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006b0a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d04b      	beq.n	8006bac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006b14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	6859      	ldr	r1, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b26:	035b      	lsls	r3, r3, #13
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b38:	d004      	beq.n	8006b44 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a45      	ldr	r2, [pc, #276]	@ (8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d10f      	bne.n	8006b64 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006b44:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006b48:	f7ff ff62 	bl	8006a10 <LL_ADC_IsEnabled>
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	4841      	ldr	r0, [pc, #260]	@ (8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b50:	f7ff ff5e 	bl	8006a10 <LL_ADC_IsEnabled>
 8006b54:	4603      	mov	r3, r0
 8006b56:	4323      	orrs	r3, r4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bf0c      	ite	eq
 8006b5c:	2301      	moveq	r3, #1
 8006b5e:	2300      	movne	r3, #0
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	e012      	b.n	8006b8a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006b64:	483c      	ldr	r0, [pc, #240]	@ (8006c58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006b66:	f7ff ff53 	bl	8006a10 <LL_ADC_IsEnabled>
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	483b      	ldr	r0, [pc, #236]	@ (8006c5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006b6e:	f7ff ff4f 	bl	8006a10 <LL_ADC_IsEnabled>
 8006b72:	4603      	mov	r3, r0
 8006b74:	431c      	orrs	r4, r3
 8006b76:	483c      	ldr	r0, [pc, #240]	@ (8006c68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006b78:	f7ff ff4a 	bl	8006a10 <LL_ADC_IsEnabled>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	4323      	orrs	r3, r4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	bf0c      	ite	eq
 8006b84:	2301      	moveq	r3, #1
 8006b86:	2300      	movne	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d056      	beq.n	8006c3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006b8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006b96:	f023 030f 	bic.w	r3, r3, #15
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	6811      	ldr	r1, [r2, #0]
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	6892      	ldr	r2, [r2, #8]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ba8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006baa:	e047      	b.n	8006c3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006bac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bc0:	d004      	beq.n	8006bcc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a23      	ldr	r2, [pc, #140]	@ (8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d10f      	bne.n	8006bec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006bcc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006bd0:	f7ff ff1e 	bl	8006a10 <LL_ADC_IsEnabled>
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	481f      	ldr	r0, [pc, #124]	@ (8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006bd8:	f7ff ff1a 	bl	8006a10 <LL_ADC_IsEnabled>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	4323      	orrs	r3, r4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	bf0c      	ite	eq
 8006be4:	2301      	moveq	r3, #1
 8006be6:	2300      	movne	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	e012      	b.n	8006c12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006bec:	481a      	ldr	r0, [pc, #104]	@ (8006c58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006bee:	f7ff ff0f 	bl	8006a10 <LL_ADC_IsEnabled>
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	4819      	ldr	r0, [pc, #100]	@ (8006c5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006bf6:	f7ff ff0b 	bl	8006a10 <LL_ADC_IsEnabled>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	431c      	orrs	r4, r3
 8006bfe:	481a      	ldr	r0, [pc, #104]	@ (8006c68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006c00:	f7ff ff06 	bl	8006a10 <LL_ADC_IsEnabled>
 8006c04:	4603      	mov	r3, r0
 8006c06:	4323      	orrs	r3, r4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bf0c      	ite	eq
 8006c0c:	2301      	moveq	r3, #1
 8006c0e:	2300      	movne	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d012      	beq.n	8006c3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006c16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006c1e:	f023 030f 	bic.w	r3, r3, #15
 8006c22:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006c24:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006c26:	e009      	b.n	8006c3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c2c:	f043 0220 	orr.w	r2, r3, #32
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006c3a:	e000      	b.n	8006c3e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006c3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006c46:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3784      	adds	r7, #132	@ 0x84
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd90      	pop	{r4, r7, pc}
 8006c52:	bf00      	nop
 8006c54:	50000100 	.word	0x50000100
 8006c58:	50000400 	.word	0x50000400
 8006c5c:	50000500 	.word	0x50000500
 8006c60:	50000300 	.word	0x50000300
 8006c64:	50000700 	.word	0x50000700
 8006c68:	50000600 	.word	0x50000600

08006c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006c88:	4013      	ands	r3, r2
 8006c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c9e:	4a04      	ldr	r2, [pc, #16]	@ (8006cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	60d3      	str	r3, [r2, #12]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	e000ed00 	.word	0xe000ed00

08006cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cb8:	4b04      	ldr	r3, [pc, #16]	@ (8006ccc <__NVIC_GetPriorityGrouping+0x18>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	0a1b      	lsrs	r3, r3, #8
 8006cbe:	f003 0307 	and.w	r3, r3, #7
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	e000ed00 	.word	0xe000ed00

08006cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	db0b      	blt.n	8006cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	f003 021f 	and.w	r2, r3, #31
 8006ce8:	4907      	ldr	r1, [pc, #28]	@ (8006d08 <__NVIC_EnableIRQ+0x38>)
 8006cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8006cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	e000e100 	.word	0xe000e100

08006d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	6039      	str	r1, [r7, #0]
 8006d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	db0a      	blt.n	8006d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	490c      	ldr	r1, [pc, #48]	@ (8006d58 <__NVIC_SetPriority+0x4c>)
 8006d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d2a:	0112      	lsls	r2, r2, #4
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	440b      	add	r3, r1
 8006d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d34:	e00a      	b.n	8006d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	4908      	ldr	r1, [pc, #32]	@ (8006d5c <__NVIC_SetPriority+0x50>)
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	3b04      	subs	r3, #4
 8006d44:	0112      	lsls	r2, r2, #4
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	440b      	add	r3, r1
 8006d4a:	761a      	strb	r2, [r3, #24]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	e000e100 	.word	0xe000e100
 8006d5c:	e000ed00 	.word	0xe000ed00

08006d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b089      	sub	sp, #36	@ 0x24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f1c3 0307 	rsb	r3, r3, #7
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	bf28      	it	cs
 8006d7e:	2304      	movcs	r3, #4
 8006d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	3304      	adds	r3, #4
 8006d86:	2b06      	cmp	r3, #6
 8006d88:	d902      	bls.n	8006d90 <NVIC_EncodePriority+0x30>
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	3b03      	subs	r3, #3
 8006d8e:	e000      	b.n	8006d92 <NVIC_EncodePriority+0x32>
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d94:	f04f 32ff 	mov.w	r2, #4294967295
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	43da      	mvns	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	401a      	ands	r2, r3
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006da8:	f04f 31ff 	mov.w	r1, #4294967295
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	fa01 f303 	lsl.w	r3, r1, r3
 8006db2:	43d9      	mvns	r1, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006db8:	4313      	orrs	r3, r2
         );
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3724      	adds	r7, #36	@ 0x24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
	...

08006dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dd8:	d301      	bcc.n	8006dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e00f      	b.n	8006dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dde:	4a0a      	ldr	r2, [pc, #40]	@ (8006e08 <SysTick_Config+0x40>)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006de6:	210f      	movs	r1, #15
 8006de8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dec:	f7ff ff8e 	bl	8006d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006df0:	4b05      	ldr	r3, [pc, #20]	@ (8006e08 <SysTick_Config+0x40>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006df6:	4b04      	ldr	r3, [pc, #16]	@ (8006e08 <SysTick_Config+0x40>)
 8006df8:	2207      	movs	r2, #7
 8006dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	e000e010 	.word	0xe000e010

08006e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff ff29 	bl	8006c6c <__NVIC_SetPriorityGrouping>
}
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b086      	sub	sp, #24
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	4603      	mov	r3, r0
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e30:	f7ff ff40 	bl	8006cb4 <__NVIC_GetPriorityGrouping>
 8006e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	6978      	ldr	r0, [r7, #20]
 8006e3c:	f7ff ff90 	bl	8006d60 <NVIC_EncodePriority>
 8006e40:	4602      	mov	r2, r0
 8006e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e46:	4611      	mov	r1, r2
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7ff ff5f 	bl	8006d0c <__NVIC_SetPriority>
}
 8006e4e:	bf00      	nop
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff ff33 	bl	8006cd0 <__NVIC_EnableIRQ>
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff ffa4 	bl	8006dc8 <SysTick_Config>
 8006e80:	4603      	mov	r3, r0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e08d      	b.n	8006fba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	4b47      	ldr	r3, [pc, #284]	@ (8006fc4 <HAL_DMA_Init+0x138>)
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d80f      	bhi.n	8006eca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	4b45      	ldr	r3, [pc, #276]	@ (8006fc8 <HAL_DMA_Init+0x13c>)
 8006eb2:	4413      	add	r3, r2
 8006eb4:	4a45      	ldr	r2, [pc, #276]	@ (8006fcc <HAL_DMA_Init+0x140>)
 8006eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eba:	091b      	lsrs	r3, r3, #4
 8006ebc:	009a      	lsls	r2, r3, #2
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a42      	ldr	r2, [pc, #264]	@ (8006fd0 <HAL_DMA_Init+0x144>)
 8006ec6:	641a      	str	r2, [r3, #64]	@ 0x40
 8006ec8:	e00e      	b.n	8006ee8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	4b40      	ldr	r3, [pc, #256]	@ (8006fd4 <HAL_DMA_Init+0x148>)
 8006ed2:	4413      	add	r3, r2
 8006ed4:	4a3d      	ldr	r2, [pc, #244]	@ (8006fcc <HAL_DMA_Init+0x140>)
 8006ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eda:	091b      	lsrs	r3, r3, #4
 8006edc:	009a      	lsls	r2, r3, #2
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a3c      	ldr	r2, [pc, #240]	@ (8006fd8 <HAL_DMA_Init+0x14c>)
 8006ee6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa76 	bl	800742c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f48:	d102      	bne.n	8006f50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006f64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d010      	beq.n	8006f90 <HAL_DMA_Init+0x104>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d80c      	bhi.n	8006f90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa96 	bl	80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006f8c:	605a      	str	r2, [r3, #4]
 8006f8e:	e008      	b.n	8006fa2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40020407 	.word	0x40020407
 8006fc8:	bffdfff8 	.word	0xbffdfff8
 8006fcc:	cccccccd 	.word	0xcccccccd
 8006fd0:	40020000 	.word	0x40020000
 8006fd4:	bffdfbf8 	.word	0xbffdfbf8
 8006fd8:	40020400 	.word	0x40020400

08006fdc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_DMA_Start_IT+0x20>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e066      	b.n	80070ca <HAL_DMA_Start_IT+0xee>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b01      	cmp	r3, #1
 800700e:	d155      	bne.n	80070bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0201 	bic.w	r2, r2, #1
 800702c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f9bb 	bl	80073b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703e:	2b00      	cmp	r3, #0
 8007040:	d008      	beq.n	8007054 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 020e 	orr.w	r2, r2, #14
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	e00f      	b.n	8007074 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0204 	bic.w	r2, r2, #4
 8007062:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 020a 	orr.w	r2, r2, #10
 8007072:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800708c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007090:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	e005      	b.n	80070c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80070c4:	2302      	movs	r3, #2
 80070c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d005      	beq.n	80070f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2204      	movs	r2, #4
 80070ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]
 80070f4:	e037      	b.n	8007166 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 020e 	bic.w	r2, r2, #14
 8007104:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007110:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007114:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0201 	bic.w	r2, r2, #1
 8007124:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712a:	f003 021f 	and.w	r2, r3, #31
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007132:	2101      	movs	r1, #1
 8007134:	fa01 f202 	lsl.w	r2, r1, r2
 8007138:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007142:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00c      	beq.n	8007166 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007156:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800715a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007164:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007176:	7bfb      	ldrb	r3, [r7, #15]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d00d      	beq.n	80071b8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2204      	movs	r2, #4
 80071a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	73fb      	strb	r3, [r7, #15]
 80071b6:	e047      	b.n	8007248 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 020e 	bic.w	r2, r2, #14
 80071c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0201 	bic.w	r2, r2, #1
 80071d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ec:	f003 021f 	and.w	r2, r3, #31
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f4:	2101      	movs	r1, #1
 80071f6:	fa01 f202 	lsl.w	r2, r1, r2
 80071fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007204:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00c      	beq.n	8007228 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007218:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800721c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007226:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	4798      	blx	r3
    }
  }
  return status;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726e:	f003 031f 	and.w	r3, r3, #31
 8007272:	2204      	movs	r2, #4
 8007274:	409a      	lsls	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d026      	beq.n	80072cc <HAL_DMA_IRQHandler+0x7a>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d021      	beq.n	80072cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d107      	bne.n	80072a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0204 	bic.w	r2, r2, #4
 80072a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072aa:	f003 021f 	and.w	r2, r3, #31
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b2:	2104      	movs	r1, #4
 80072b4:	fa01 f202 	lsl.w	r2, r1, r2
 80072b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d071      	beq.n	80073a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80072ca:	e06c      	b.n	80073a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d0:	f003 031f 	and.w	r3, r3, #31
 80072d4:	2202      	movs	r2, #2
 80072d6:	409a      	lsls	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4013      	ands	r3, r2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d02e      	beq.n	800733e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d029      	beq.n	800733e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10b      	bne.n	8007310 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 020a 	bic.w	r2, r2, #10
 8007306:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007314:	f003 021f 	and.w	r2, r3, #31
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731c:	2102      	movs	r1, #2
 800731e:	fa01 f202 	lsl.w	r2, r1, r2
 8007322:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007330:	2b00      	cmp	r3, #0
 8007332:	d038      	beq.n	80073a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800733c:	e033      	b.n	80073a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	2208      	movs	r2, #8
 8007348:	409a      	lsls	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4013      	ands	r3, r2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d02a      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f003 0308 	and.w	r3, r3, #8
 8007358:	2b00      	cmp	r3, #0
 800735a:	d025      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 020e 	bic.w	r2, r2, #14
 800736a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007370:	f003 021f 	and.w	r2, r3, #31
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007378:	2101      	movs	r1, #1
 800737a:	fa01 f202 	lsl.w	r2, r1, r2
 800737e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739a:	2b00      	cmp	r3, #0
 800739c:	d004      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80073a6:	bf00      	nop
 80073a8:	bf00      	nop
}
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80073c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d004      	beq.n	80073da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80073d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073de:	f003 021f 	and.w	r2, r3, #31
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e6:	2101      	movs	r1, #1
 80073e8:	fa01 f202 	lsl.w	r2, r1, r2
 80073ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	2b10      	cmp	r3, #16
 80073fc:	d108      	bne.n	8007410 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800740e:	e007      	b.n	8007420 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	60da      	str	r2, [r3, #12]
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	461a      	mov	r2, r3
 800743a:	4b16      	ldr	r3, [pc, #88]	@ (8007494 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800743c:	429a      	cmp	r2, r3
 800743e:	d802      	bhi.n	8007446 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007440:	4b15      	ldr	r3, [pc, #84]	@ (8007498 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	e001      	b.n	800744a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007446:	4b15      	ldr	r3, [pc, #84]	@ (800749c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007448:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	3b08      	subs	r3, #8
 8007456:	4a12      	ldr	r2, [pc, #72]	@ (80074a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007458:	fba2 2303 	umull	r2, r3, r2, r3
 800745c:	091b      	lsrs	r3, r3, #4
 800745e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007464:	089b      	lsrs	r3, r3, #2
 8007466:	009a      	lsls	r2, r3, #2
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	4413      	add	r3, r2
 800746c:	461a      	mov	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a0b      	ldr	r2, [pc, #44]	@ (80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007476:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f003 031f 	and.w	r3, r3, #31
 800747e:	2201      	movs	r2, #1
 8007480:	409a      	lsls	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007486:	bf00      	nop
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40020407 	.word	0x40020407
 8007498:	40020800 	.word	0x40020800
 800749c:	40020820 	.word	0x40020820
 80074a0:	cccccccd 	.word	0xcccccccd
 80074a4:	40020880 	.word	0x40020880

080074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4b0b      	ldr	r3, [pc, #44]	@ (80074e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80074bc:	4413      	add	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	461a      	mov	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a08      	ldr	r2, [pc, #32]	@ (80074ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80074ca:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	f003 031f 	and.w	r3, r3, #31
 80074d4:	2201      	movs	r2, #1
 80074d6:	409a      	lsls	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	1000823f 	.word	0x1000823f
 80074ec:	40020940 	.word	0x40020940

080074f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80074fe:	e15a      	b.n	80077b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	2101      	movs	r1, #1
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	fa01 f303 	lsl.w	r3, r1, r3
 800750c:	4013      	ands	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 814c 	beq.w	80077b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d005      	beq.n	8007530 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800752c:	2b02      	cmp	r3, #2
 800752e:	d130      	bne.n	8007592 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	2203      	movs	r2, #3
 800753c:	fa02 f303 	lsl.w	r3, r2, r3
 8007540:	43db      	mvns	r3, r3
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	4013      	ands	r3, r2
 8007546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	005b      	lsls	r3, r3, #1
 8007550:	fa02 f303 	lsl.w	r3, r2, r3
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	4313      	orrs	r3, r2
 8007558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007566:	2201      	movs	r2, #1
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	fa02 f303 	lsl.w	r3, r2, r3
 800756e:	43db      	mvns	r3, r3
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	4013      	ands	r3, r2
 8007574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	091b      	lsrs	r3, r3, #4
 800757c:	f003 0201 	and.w	r2, r3, #1
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4313      	orrs	r3, r2
 800758a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f003 0303 	and.w	r3, r3, #3
 800759a:	2b03      	cmp	r3, #3
 800759c:	d017      	beq.n	80075ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	2203      	movs	r2, #3
 80075aa:	fa02 f303 	lsl.w	r3, r2, r3
 80075ae:	43db      	mvns	r3, r3
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4013      	ands	r3, r2
 80075b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	fa02 f303 	lsl.w	r3, r2, r3
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f003 0303 	and.w	r3, r3, #3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d123      	bne.n	8007622 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	08da      	lsrs	r2, r3, #3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3208      	adds	r2, #8
 80075e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f003 0307 	and.w	r3, r3, #7
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	220f      	movs	r2, #15
 80075f2:	fa02 f303 	lsl.w	r3, r2, r3
 80075f6:	43db      	mvns	r3, r3
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4013      	ands	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	fa02 f303 	lsl.w	r3, r2, r3
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	4313      	orrs	r3, r2
 8007612:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	08da      	lsrs	r2, r3, #3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3208      	adds	r2, #8
 800761c:	6939      	ldr	r1, [r7, #16]
 800761e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	2203      	movs	r2, #3
 800762e:	fa02 f303 	lsl.w	r3, r2, r3
 8007632:	43db      	mvns	r3, r3
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	4013      	ands	r3, r2
 8007638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f003 0203 	and.w	r2, r3, #3
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 80a6 	beq.w	80077b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007664:	4b5b      	ldr	r3, [pc, #364]	@ (80077d4 <HAL_GPIO_Init+0x2e4>)
 8007666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007668:	4a5a      	ldr	r2, [pc, #360]	@ (80077d4 <HAL_GPIO_Init+0x2e4>)
 800766a:	f043 0301 	orr.w	r3, r3, #1
 800766e:	6613      	str	r3, [r2, #96]	@ 0x60
 8007670:	4b58      	ldr	r3, [pc, #352]	@ (80077d4 <HAL_GPIO_Init+0x2e4>)
 8007672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	60bb      	str	r3, [r7, #8]
 800767a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800767c:	4a56      	ldr	r2, [pc, #344]	@ (80077d8 <HAL_GPIO_Init+0x2e8>)
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	089b      	lsrs	r3, r3, #2
 8007682:	3302      	adds	r3, #2
 8007684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f003 0303 	and.w	r3, r3, #3
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	220f      	movs	r2, #15
 8007694:	fa02 f303 	lsl.w	r3, r2, r3
 8007698:	43db      	mvns	r3, r3
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	4013      	ands	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80076a6:	d01f      	beq.n	80076e8 <HAL_GPIO_Init+0x1f8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a4c      	ldr	r2, [pc, #304]	@ (80077dc <HAL_GPIO_Init+0x2ec>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d019      	beq.n	80076e4 <HAL_GPIO_Init+0x1f4>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a4b      	ldr	r2, [pc, #300]	@ (80077e0 <HAL_GPIO_Init+0x2f0>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d013      	beq.n	80076e0 <HAL_GPIO_Init+0x1f0>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a4a      	ldr	r2, [pc, #296]	@ (80077e4 <HAL_GPIO_Init+0x2f4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d00d      	beq.n	80076dc <HAL_GPIO_Init+0x1ec>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a49      	ldr	r2, [pc, #292]	@ (80077e8 <HAL_GPIO_Init+0x2f8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d007      	beq.n	80076d8 <HAL_GPIO_Init+0x1e8>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a48      	ldr	r2, [pc, #288]	@ (80077ec <HAL_GPIO_Init+0x2fc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d101      	bne.n	80076d4 <HAL_GPIO_Init+0x1e4>
 80076d0:	2305      	movs	r3, #5
 80076d2:	e00a      	b.n	80076ea <HAL_GPIO_Init+0x1fa>
 80076d4:	2306      	movs	r3, #6
 80076d6:	e008      	b.n	80076ea <HAL_GPIO_Init+0x1fa>
 80076d8:	2304      	movs	r3, #4
 80076da:	e006      	b.n	80076ea <HAL_GPIO_Init+0x1fa>
 80076dc:	2303      	movs	r3, #3
 80076de:	e004      	b.n	80076ea <HAL_GPIO_Init+0x1fa>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e002      	b.n	80076ea <HAL_GPIO_Init+0x1fa>
 80076e4:	2301      	movs	r3, #1
 80076e6:	e000      	b.n	80076ea <HAL_GPIO_Init+0x1fa>
 80076e8:	2300      	movs	r3, #0
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	f002 0203 	and.w	r2, r2, #3
 80076f0:	0092      	lsls	r2, r2, #2
 80076f2:	4093      	lsls	r3, r2
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076fa:	4937      	ldr	r1, [pc, #220]	@ (80077d8 <HAL_GPIO_Init+0x2e8>)
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	089b      	lsrs	r3, r3, #2
 8007700:	3302      	adds	r3, #2
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007708:	4b39      	ldr	r3, [pc, #228]	@ (80077f0 <HAL_GPIO_Init+0x300>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	43db      	mvns	r3, r3
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	4013      	ands	r3, r2
 8007716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4313      	orrs	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800772c:	4a30      	ldr	r2, [pc, #192]	@ (80077f0 <HAL_GPIO_Init+0x300>)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007732:	4b2f      	ldr	r3, [pc, #188]	@ (80077f0 <HAL_GPIO_Init+0x300>)
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	43db      	mvns	r3, r3
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4013      	ands	r3, r2
 8007740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007756:	4a26      	ldr	r2, [pc, #152]	@ (80077f0 <HAL_GPIO_Init+0x300>)
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800775c:	4b24      	ldr	r3, [pc, #144]	@ (80077f0 <HAL_GPIO_Init+0x300>)
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	43db      	mvns	r3, r3
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4013      	ands	r3, r2
 800776a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007780:	4a1b      	ldr	r2, [pc, #108]	@ (80077f0 <HAL_GPIO_Init+0x300>)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007786:	4b1a      	ldr	r3, [pc, #104]	@ (80077f0 <HAL_GPIO_Init+0x300>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	43db      	mvns	r3, r3
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4013      	ands	r3, r2
 8007794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80077aa:	4a11      	ldr	r2, [pc, #68]	@ (80077f0 <HAL_GPIO_Init+0x300>)
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	3301      	adds	r3, #1
 80077b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	fa22 f303 	lsr.w	r3, r2, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f47f ae9d 	bne.w	8007500 <HAL_GPIO_Init+0x10>
  }
}
 80077c6:	bf00      	nop
 80077c8:	bf00      	nop
 80077ca:	371c      	adds	r7, #28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	40021000 	.word	0x40021000
 80077d8:	40010000 	.word	0x40010000
 80077dc:	48000400 	.word	0x48000400
 80077e0:	48000800 	.word	0x48000800
 80077e4:	48000c00 	.word	0x48000c00
 80077e8:	48001000 	.word	0x48001000
 80077ec:	48001400 	.word	0x48001400
 80077f0:	40010400 	.word	0x40010400

080077f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	887b      	ldrh	r3, [r7, #2]
 8007806:	4013      	ands	r3, r2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800780c:	2301      	movs	r3, #1
 800780e:	73fb      	strb	r3, [r7, #15]
 8007810:	e001      	b.n	8007816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007812:	2300      	movs	r3, #0
 8007814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007816:	7bfb      	ldrb	r3, [r7, #15]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	807b      	strh	r3, [r7, #2]
 8007830:	4613      	mov	r3, r2
 8007832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007834:	787b      	ldrb	r3, [r7, #1]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800783a:	887a      	ldrh	r2, [r7, #2]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007840:	e002      	b.n	8007848 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007842:	887a      	ldrh	r2, [r7, #2]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e08d      	b.n	8007982 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fa fef0 	bl	8002660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2224      	movs	r2, #36	@ 0x24
 8007884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0201 	bic.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80078a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d107      	bne.n	80078ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078ca:	609a      	str	r2, [r3, #8]
 80078cc:	e006      	b.n	80078dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80078da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d108      	bne.n	80078f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078f2:	605a      	str	r2, [r3, #4]
 80078f4:	e007      	b.n	8007906 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007904:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	6812      	ldr	r2, [r2, #0]
 8007910:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007918:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68da      	ldr	r2, [r3, #12]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007928:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691a      	ldr	r2, [r3, #16]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	69d9      	ldr	r1, [r3, #28]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a1a      	ldr	r2, [r3, #32]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 0201 	orr.w	r2, r2, #1
 8007962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af02      	add	r7, sp, #8
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	607a      	str	r2, [r7, #4]
 8007996:	461a      	mov	r2, r3
 8007998:	460b      	mov	r3, r1
 800799a:	817b      	strh	r3, [r7, #10]
 800799c:	4613      	mov	r3, r2
 800799e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b20      	cmp	r3, #32
 80079aa:	f040 80fd 	bne.w	8007ba8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d101      	bne.n	80079bc <HAL_I2C_Master_Transmit+0x30>
 80079b8:	2302      	movs	r3, #2
 80079ba:	e0f6      	b.n	8007baa <HAL_I2C_Master_Transmit+0x21e>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80079c4:	f7fd fdc0 	bl	8005548 <HAL_GetTick>
 80079c8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	2319      	movs	r3, #25
 80079d0:	2201      	movs	r2, #1
 80079d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 fa0a 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e0e1      	b.n	8007baa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2221      	movs	r2, #33	@ 0x21
 80079ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2210      	movs	r2, #16
 80079f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	893a      	ldrh	r2, [r7, #8]
 8007a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2bff      	cmp	r3, #255	@ 0xff
 8007a16:	d906      	bls.n	8007a26 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	22ff      	movs	r2, #255	@ 0xff
 8007a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007a1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	e007      	b.n	8007a36 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007a30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a34:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d024      	beq.n	8007a88 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a42:	781a      	ldrb	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	3301      	adds	r3, #1
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	8979      	ldrh	r1, [r7, #10]
 8007a7a:	4b4e      	ldr	r3, [pc, #312]	@ (8007bb4 <HAL_I2C_Master_Transmit+0x228>)
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fc05 	bl	8008290 <I2C_TransferConfig>
 8007a86:	e066      	b.n	8007b56 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	8979      	ldrh	r1, [r7, #10]
 8007a90:	4b48      	ldr	r3, [pc, #288]	@ (8007bb4 <HAL_I2C_Master_Transmit+0x228>)
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fbfa 	bl	8008290 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007a9c:	e05b      	b.n	8007b56 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	6a39      	ldr	r1, [r7, #32]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 f9fd 	bl	8007ea2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e07b      	b.n	8007baa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab6:	781a      	ldrb	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d034      	beq.n	8007b56 <HAL_I2C_Master_Transmit+0x1ca>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d130      	bne.n	8007b56 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	2200      	movs	r2, #0
 8007afc:	2180      	movs	r1, #128	@ 0x80
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 f976 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e04d      	b.n	8007baa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2bff      	cmp	r3, #255	@ 0xff
 8007b16:	d90e      	bls.n	8007b36 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	22ff      	movs	r2, #255	@ 0xff
 8007b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	8979      	ldrh	r1, [r7, #10]
 8007b26:	2300      	movs	r3, #0
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 fbae 	bl	8008290 <I2C_TransferConfig>
 8007b34:	e00f      	b.n	8007b56 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	8979      	ldrh	r1, [r7, #10]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 fb9d 	bl	8008290 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d19e      	bne.n	8007a9e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	6a39      	ldr	r1, [r7, #32]
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 f9e3 	bl	8007f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e01a      	b.n	8007baa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6859      	ldr	r1, [r3, #4]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb8 <HAL_I2C_Master_Transmit+0x22c>)
 8007b88:	400b      	ands	r3, r1
 8007b8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e000      	b.n	8007baa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007ba8:	2302      	movs	r3, #2
  }
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	80002000 	.word	0x80002000
 8007bb8:	fe00e800 	.word	0xfe00e800

08007bbc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af02      	add	r7, sp, #8
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	607a      	str	r2, [r7, #4]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	460b      	mov	r3, r1
 8007bca:	817b      	strh	r3, [r7, #10]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	f040 80db 	bne.w	8007d94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d101      	bne.n	8007bec <HAL_I2C_Master_Receive+0x30>
 8007be8:	2302      	movs	r3, #2
 8007bea:	e0d4      	b.n	8007d96 <HAL_I2C_Master_Receive+0x1da>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007bf4:	f7fd fca8 	bl	8005548 <HAL_GetTick>
 8007bf8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	2319      	movs	r3, #25
 8007c00:	2201      	movs	r2, #1
 8007c02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 f8f2 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e0bf      	b.n	8007d96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2222      	movs	r2, #34	@ 0x22
 8007c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2210      	movs	r2, #16
 8007c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	893a      	ldrh	r2, [r7, #8]
 8007c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2bff      	cmp	r3, #255	@ 0xff
 8007c46:	d90e      	bls.n	8007c66 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	22ff      	movs	r2, #255	@ 0xff
 8007c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	8979      	ldrh	r1, [r7, #10]
 8007c56:	4b52      	ldr	r3, [pc, #328]	@ (8007da0 <HAL_I2C_Master_Receive+0x1e4>)
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fb16 	bl	8008290 <I2C_TransferConfig>
 8007c64:	e06d      	b.n	8007d42 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	8979      	ldrh	r1, [r7, #10]
 8007c78:	4b49      	ldr	r3, [pc, #292]	@ (8007da0 <HAL_I2C_Master_Receive+0x1e4>)
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 fb05 	bl	8008290 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007c86:	e05c      	b.n	8007d42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	6a39      	ldr	r1, [r7, #32]
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 f993 	bl	8007fb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e07c      	b.n	8007d96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d034      	beq.n	8007d42 <HAL_I2C_Master_Receive+0x186>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d130      	bne.n	8007d42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2180      	movs	r1, #128	@ 0x80
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 f880 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e04d      	b.n	8007d96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	2bff      	cmp	r3, #255	@ 0xff
 8007d02:	d90e      	bls.n	8007d22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	22ff      	movs	r2, #255	@ 0xff
 8007d08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	8979      	ldrh	r1, [r7, #10]
 8007d12:	2300      	movs	r3, #0
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 fab8 	bl	8008290 <I2C_TransferConfig>
 8007d20:	e00f      	b.n	8007d42 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	8979      	ldrh	r1, [r7, #10]
 8007d34:	2300      	movs	r3, #0
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 faa7 	bl	8008290 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d19d      	bne.n	8007c88 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	6a39      	ldr	r1, [r7, #32]
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f8ed 	bl	8007f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e01a      	b.n	8007d96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2220      	movs	r2, #32
 8007d66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6859      	ldr	r1, [r3, #4]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	4b0c      	ldr	r3, [pc, #48]	@ (8007da4 <HAL_I2C_Master_Receive+0x1e8>)
 8007d74:	400b      	ands	r3, r1
 8007d76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	e000      	b.n	8007d96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007d94:	2302      	movs	r3, #2
  }
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	80002400 	.word	0x80002400
 8007da4:	fe00e800 	.word	0xfe00e800

08007da8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d103      	bne.n	8007dc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d007      	beq.n	8007de4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	699a      	ldr	r2, [r3, #24]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0201 	orr.w	r2, r2, #1
 8007de2:	619a      	str	r2, [r3, #24]
  }
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	603b      	str	r3, [r7, #0]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e00:	e03b      	b.n	8007e7a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 f962 	bl	80080d0 <I2C_IsErrorOccurred>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e041      	b.n	8007e9a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1c:	d02d      	beq.n	8007e7a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e1e:	f7fd fb93 	bl	8005548 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d302      	bcc.n	8007e34 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d122      	bne.n	8007e7a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699a      	ldr	r2, [r3, #24]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	bf0c      	ite	eq
 8007e44:	2301      	moveq	r3, #1
 8007e46:	2300      	movne	r3, #0
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d113      	bne.n	8007e7a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e56:	f043 0220 	orr.w	r2, r3, #32
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e00f      	b.n	8007e9a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	699a      	ldr	r2, [r3, #24]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4013      	ands	r3, r2
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	bf0c      	ite	eq
 8007e8a:	2301      	moveq	r3, #1
 8007e8c:	2300      	movne	r3, #0
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	461a      	mov	r2, r3
 8007e92:	79fb      	ldrb	r3, [r7, #7]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d0b4      	beq.n	8007e02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007eae:	e033      	b.n	8007f18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 f90b 	bl	80080d0 <I2C_IsErrorOccurred>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e031      	b.n	8007f28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eca:	d025      	beq.n	8007f18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ecc:	f7fd fb3c 	bl	8005548 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d302      	bcc.n	8007ee2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d11a      	bne.n	8007f18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d013      	beq.n	8007f18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef4:	f043 0220 	orr.w	r2, r3, #32
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e007      	b.n	8007f28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d1c4      	bne.n	8007eb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f3c:	e02f      	b.n	8007f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	68b9      	ldr	r1, [r7, #8]
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 f8c4 	bl	80080d0 <I2C_IsErrorOccurred>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e02d      	b.n	8007fae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f52:	f7fd faf9 	bl	8005548 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d302      	bcc.n	8007f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d11a      	bne.n	8007f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b20      	cmp	r3, #32
 8007f74:	d013      	beq.n	8007f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7a:	f043 0220 	orr.w	r2, r3, #32
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e007      	b.n	8007fae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	d1c8      	bne.n	8007f3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007fc8:	e071      	b.n	80080ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 f87e 	bl	80080d0 <I2C_IsErrorOccurred>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	f003 0320 	and.w	r3, r3, #32
 8007fe8:	2b20      	cmp	r3, #32
 8007fea:	d13b      	bne.n	8008064 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d138      	bne.n	8008064 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	d105      	bne.n	800800c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	f003 0310 	and.w	r3, r3, #16
 8008016:	2b10      	cmp	r3, #16
 8008018:	d121      	bne.n	800805e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2210      	movs	r2, #16
 8008020:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2204      	movs	r2, #4
 8008026:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2220      	movs	r2, #32
 800802e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6859      	ldr	r1, [r3, #4]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	4b24      	ldr	r3, [pc, #144]	@ (80080cc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800803c:	400b      	ands	r3, r1
 800803e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2220      	movs	r2, #32
 8008044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	75fb      	strb	r3, [r7, #23]
 800805c:	e002      	b.n	8008064 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008064:	f7fd fa70 	bl	8005548 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	429a      	cmp	r2, r3
 8008072:	d302      	bcc.n	800807a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d119      	bne.n	80080ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d116      	bne.n	80080ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	f003 0304 	and.w	r3, r3, #4
 800808a:	2b04      	cmp	r3, #4
 800808c:	d00f      	beq.n	80080ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008092:	f043 0220 	orr.w	r2, r3, #32
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2220      	movs	r2, #32
 800809e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	d002      	beq.n	80080c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80080bc:	7dfb      	ldrb	r3, [r7, #23]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d083      	beq.n	8007fca <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	fe00e800 	.word	0xfe00e800

080080d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08a      	sub	sp, #40	@ 0x28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	f003 0310 	and.w	r3, r3, #16
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d068      	beq.n	80081ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2210      	movs	r2, #16
 8008102:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008104:	e049      	b.n	800819a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810c:	d045      	beq.n	800819a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800810e:	f7fd fa1b 	bl	8005548 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	429a      	cmp	r2, r3
 800811c:	d302      	bcc.n	8008124 <I2C_IsErrorOccurred+0x54>
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d13a      	bne.n	800819a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800812e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008136:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008146:	d121      	bne.n	800818c <I2C_IsErrorOccurred+0xbc>
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800814e:	d01d      	beq.n	800818c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008150:	7cfb      	ldrb	r3, [r7, #19]
 8008152:	2b20      	cmp	r3, #32
 8008154:	d01a      	beq.n	800818c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008164:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008166:	f7fd f9ef 	bl	8005548 <HAL_GetTick>
 800816a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800816c:	e00e      	b.n	800818c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800816e:	f7fd f9eb 	bl	8005548 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b19      	cmp	r3, #25
 800817a:	d907      	bls.n	800818c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	f043 0320 	orr.w	r3, r3, #32
 8008182:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800818a:	e006      	b.n	800819a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	f003 0320 	and.w	r3, r3, #32
 8008196:	2b20      	cmp	r3, #32
 8008198:	d1e9      	bne.n	800816e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f003 0320 	and.w	r3, r3, #32
 80081a4:	2b20      	cmp	r3, #32
 80081a6:	d003      	beq.n	80081b0 <I2C_IsErrorOccurred+0xe0>
 80081a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0aa      	beq.n	8008106 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80081b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d103      	bne.n	80081c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2220      	movs	r2, #32
 80081be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	f043 0304 	orr.w	r3, r3, #4
 80081c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00b      	beq.n	80081f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	f043 0301 	orr.w	r3, r3, #1
 80081e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00b      	beq.n	800821a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	f043 0308 	orr.w	r3, r3, #8
 8008208:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008212:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	f043 0302 	orr.w	r3, r3, #2
 800822a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008234:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800823c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008240:	2b00      	cmp	r3, #0
 8008242:	d01c      	beq.n	800827e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff fdaf 	bl	8007da8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6859      	ldr	r1, [r3, #4]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	4b0d      	ldr	r3, [pc, #52]	@ (800828c <I2C_IsErrorOccurred+0x1bc>)
 8008256:	400b      	ands	r3, r1
 8008258:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	431a      	orrs	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2220      	movs	r2, #32
 800826a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800827e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008282:	4618      	mov	r0, r3
 8008284:	3728      	adds	r7, #40	@ 0x28
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	fe00e800 	.word	0xfe00e800

08008290 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	607b      	str	r3, [r7, #4]
 800829a:	460b      	mov	r3, r1
 800829c:	817b      	strh	r3, [r7, #10]
 800829e:	4613      	mov	r3, r2
 80082a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80082a2:	897b      	ldrh	r3, [r7, #10]
 80082a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80082a8:	7a7b      	ldrb	r3, [r7, #9]
 80082aa:	041b      	lsls	r3, r3, #16
 80082ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80082b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	0d5b      	lsrs	r3, r3, #21
 80082ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80082ce:	4b08      	ldr	r3, [pc, #32]	@ (80082f0 <I2C_TransferConfig+0x60>)
 80082d0:	430b      	orrs	r3, r1
 80082d2:	43db      	mvns	r3, r3
 80082d4:	ea02 0103 	and.w	r1, r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	430a      	orrs	r2, r1
 80082e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80082e2:	bf00      	nop
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	03ff63ff 	.word	0x03ff63ff

080082f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b20      	cmp	r3, #32
 8008308:	d138      	bne.n	800837c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008310:	2b01      	cmp	r3, #1
 8008312:	d101      	bne.n	8008318 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008314:	2302      	movs	r3, #2
 8008316:	e032      	b.n	800837e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2224      	movs	r2, #36	@ 0x24
 8008324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0201 	bic.w	r2, r2, #1
 8008336:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008346:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6819      	ldr	r1, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0201 	orr.w	r2, r2, #1
 8008366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2220      	movs	r2, #32
 800836c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	e000      	b.n	800837e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800837c:	2302      	movs	r3, #2
  }
}
 800837e:	4618      	mov	r0, r3
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800838a:	b480      	push	{r7}
 800838c:	b085      	sub	sp, #20
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b20      	cmp	r3, #32
 800839e:	d139      	bne.n	8008414 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d101      	bne.n	80083ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80083aa:	2302      	movs	r3, #2
 80083ac:	e033      	b.n	8008416 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2224      	movs	r2, #36	@ 0x24
 80083ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0201 	bic.w	r2, r2, #1
 80083cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80083dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0201 	orr.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	e000      	b.n	8008416 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008414:	2302      	movs	r3, #2
  }
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
	...

08008424 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008428:	4b05      	ldr	r3, [pc, #20]	@ (8008440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a04      	ldr	r2, [pc, #16]	@ (8008440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800842e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008432:	6013      	str	r3, [r2, #0]
}
 8008434:	bf00      	nop
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	40007000 	.word	0x40007000

08008444 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d141      	bne.n	80084d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008452:	4b4b      	ldr	r3, [pc, #300]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800845a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800845e:	d131      	bne.n	80084c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008460:	4b47      	ldr	r3, [pc, #284]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008466:	4a46      	ldr	r2, [pc, #280]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800846c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008470:	4b43      	ldr	r3, [pc, #268]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008478:	4a41      	ldr	r2, [pc, #260]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800847a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800847e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008480:	4b40      	ldr	r3, [pc, #256]	@ (8008584 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2232      	movs	r2, #50	@ 0x32
 8008486:	fb02 f303 	mul.w	r3, r2, r3
 800848a:	4a3f      	ldr	r2, [pc, #252]	@ (8008588 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800848c:	fba2 2303 	umull	r2, r3, r2, r3
 8008490:	0c9b      	lsrs	r3, r3, #18
 8008492:	3301      	adds	r3, #1
 8008494:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008496:	e002      	b.n	800849e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3b01      	subs	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800849e:	4b38      	ldr	r3, [pc, #224]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084aa:	d102      	bne.n	80084b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1f2      	bne.n	8008498 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084b2:	4b33      	ldr	r3, [pc, #204]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084be:	d158      	bne.n	8008572 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e057      	b.n	8008574 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084c4:	4b2e      	ldr	r3, [pc, #184]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084ca:	4a2d      	ldr	r2, [pc, #180]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80084d4:	e04d      	b.n	8008572 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084dc:	d141      	bne.n	8008562 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80084de:	4b28      	ldr	r3, [pc, #160]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80084e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084ea:	d131      	bne.n	8008550 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084ec:	4b24      	ldr	r3, [pc, #144]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084f2:	4a23      	ldr	r2, [pc, #140]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80084fc:	4b20      	ldr	r3, [pc, #128]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008504:	4a1e      	ldr	r2, [pc, #120]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800850a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800850c:	4b1d      	ldr	r3, [pc, #116]	@ (8008584 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2232      	movs	r2, #50	@ 0x32
 8008512:	fb02 f303 	mul.w	r3, r2, r3
 8008516:	4a1c      	ldr	r2, [pc, #112]	@ (8008588 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008518:	fba2 2303 	umull	r2, r3, r2, r3
 800851c:	0c9b      	lsrs	r3, r3, #18
 800851e:	3301      	adds	r3, #1
 8008520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008522:	e002      	b.n	800852a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3b01      	subs	r3, #1
 8008528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800852a:	4b15      	ldr	r3, [pc, #84]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008536:	d102      	bne.n	800853e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1f2      	bne.n	8008524 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800853e:	4b10      	ldr	r3, [pc, #64]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800854a:	d112      	bne.n	8008572 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e011      	b.n	8008574 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008550:	4b0b      	ldr	r3, [pc, #44]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008556:	4a0a      	ldr	r2, [pc, #40]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800855c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008560:	e007      	b.n	8008572 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008562:	4b07      	ldr	r3, [pc, #28]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800856a:	4a05      	ldr	r2, [pc, #20]	@ (8008580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800856c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008570:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	40007000 	.word	0x40007000
 8008584:	20000004 	.word	0x20000004
 8008588:	431bde83 	.word	0x431bde83

0800858c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008590:	4b05      	ldr	r3, [pc, #20]	@ (80085a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	4a04      	ldr	r2, [pc, #16]	@ (80085a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800859a:	6093      	str	r3, [r2, #8]
}
 800859c:	bf00      	nop
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	40007000 	.word	0x40007000

080085ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e2fe      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d075      	beq.n	80086b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085ca:	4b97      	ldr	r3, [pc, #604]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f003 030c 	and.w	r3, r3, #12
 80085d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085d4:	4b94      	ldr	r3, [pc, #592]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	f003 0303 	and.w	r3, r3, #3
 80085dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2b0c      	cmp	r3, #12
 80085e2:	d102      	bne.n	80085ea <HAL_RCC_OscConfig+0x3e>
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d002      	beq.n	80085f0 <HAL_RCC_OscConfig+0x44>
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d10b      	bne.n	8008608 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085f0:	4b8d      	ldr	r3, [pc, #564]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d05b      	beq.n	80086b4 <HAL_RCC_OscConfig+0x108>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d157      	bne.n	80086b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e2d9      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008610:	d106      	bne.n	8008620 <HAL_RCC_OscConfig+0x74>
 8008612:	4b85      	ldr	r3, [pc, #532]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a84      	ldr	r2, [pc, #528]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	e01d      	b.n	800865c <HAL_RCC_OscConfig+0xb0>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008628:	d10c      	bne.n	8008644 <HAL_RCC_OscConfig+0x98>
 800862a:	4b7f      	ldr	r3, [pc, #508]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a7e      	ldr	r2, [pc, #504]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	4b7c      	ldr	r3, [pc, #496]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a7b      	ldr	r2, [pc, #492]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 800863c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	e00b      	b.n	800865c <HAL_RCC_OscConfig+0xb0>
 8008644:	4b78      	ldr	r3, [pc, #480]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a77      	ldr	r2, [pc, #476]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 800864a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	4b75      	ldr	r3, [pc, #468]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a74      	ldr	r2, [pc, #464]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800865a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d013      	beq.n	800868c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008664:	f7fc ff70 	bl	8005548 <HAL_GetTick>
 8008668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800866a:	e008      	b.n	800867e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800866c:	f7fc ff6c 	bl	8005548 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	2b64      	cmp	r3, #100	@ 0x64
 8008678:	d901      	bls.n	800867e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e29e      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800867e:	4b6a      	ldr	r3, [pc, #424]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0f0      	beq.n	800866c <HAL_RCC_OscConfig+0xc0>
 800868a:	e014      	b.n	80086b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800868c:	f7fc ff5c 	bl	8005548 <HAL_GetTick>
 8008690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008692:	e008      	b.n	80086a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008694:	f7fc ff58 	bl	8005548 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b64      	cmp	r3, #100	@ 0x64
 80086a0:	d901      	bls.n	80086a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e28a      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086a6:	4b60      	ldr	r3, [pc, #384]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f0      	bne.n	8008694 <HAL_RCC_OscConfig+0xe8>
 80086b2:	e000      	b.n	80086b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d075      	beq.n	80087ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086c2:	4b59      	ldr	r3, [pc, #356]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 030c 	and.w	r3, r3, #12
 80086ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086cc:	4b56      	ldr	r3, [pc, #344]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f003 0303 	and.w	r3, r3, #3
 80086d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2b0c      	cmp	r3, #12
 80086da:	d102      	bne.n	80086e2 <HAL_RCC_OscConfig+0x136>
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d002      	beq.n	80086e8 <HAL_RCC_OscConfig+0x13c>
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	2b04      	cmp	r3, #4
 80086e6:	d11f      	bne.n	8008728 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086e8:	4b4f      	ldr	r3, [pc, #316]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <HAL_RCC_OscConfig+0x154>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e25d      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008700:	4b49      	ldr	r3, [pc, #292]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	061b      	lsls	r3, r3, #24
 800870e:	4946      	ldr	r1, [pc, #280]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008710:	4313      	orrs	r3, r2
 8008712:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008714:	4b45      	ldr	r3, [pc, #276]	@ (800882c <HAL_RCC_OscConfig+0x280>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4618      	mov	r0, r3
 800871a:	f7fc fec9 	bl	80054b0 <HAL_InitTick>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d043      	beq.n	80087ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e249      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d023      	beq.n	8008778 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008730:	4b3d      	ldr	r3, [pc, #244]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a3c      	ldr	r2, [pc, #240]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800873a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873c:	f7fc ff04 	bl	8005548 <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008744:	f7fc ff00 	bl	8005548 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e232      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008756:	4b34      	ldr	r3, [pc, #208]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0f0      	beq.n	8008744 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008762:	4b31      	ldr	r3, [pc, #196]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	061b      	lsls	r3, r3, #24
 8008770:	492d      	ldr	r1, [pc, #180]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008772:	4313      	orrs	r3, r2
 8008774:	604b      	str	r3, [r1, #4]
 8008776:	e01a      	b.n	80087ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008778:	4b2b      	ldr	r3, [pc, #172]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a2a      	ldr	r2, [pc, #168]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 800877e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008784:	f7fc fee0 	bl	8005548 <HAL_GetTick>
 8008788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800878a:	e008      	b.n	800879e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800878c:	f7fc fedc 	bl	8005548 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d901      	bls.n	800879e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e20e      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800879e:	4b22      	ldr	r3, [pc, #136]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1f0      	bne.n	800878c <HAL_RCC_OscConfig+0x1e0>
 80087aa:	e000      	b.n	80087ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0308 	and.w	r3, r3, #8
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d041      	beq.n	800883e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d01c      	beq.n	80087fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087c2:	4b19      	ldr	r3, [pc, #100]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 80087c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087c8:	4a17      	ldr	r2, [pc, #92]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 80087ca:	f043 0301 	orr.w	r3, r3, #1
 80087ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d2:	f7fc feb9 	bl	8005548 <HAL_GetTick>
 80087d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087d8:	e008      	b.n	80087ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087da:	f7fc feb5 	bl	8005548 <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d901      	bls.n	80087ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e1e7      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 80087ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0ef      	beq.n	80087da <HAL_RCC_OscConfig+0x22e>
 80087fa:	e020      	b.n	800883e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 80087fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008802:	4a09      	ldr	r2, [pc, #36]	@ (8008828 <HAL_RCC_OscConfig+0x27c>)
 8008804:	f023 0301 	bic.w	r3, r3, #1
 8008808:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880c:	f7fc fe9c 	bl	8005548 <HAL_GetTick>
 8008810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008812:	e00d      	b.n	8008830 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008814:	f7fc fe98 	bl	8005548 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b02      	cmp	r3, #2
 8008820:	d906      	bls.n	8008830 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e1ca      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
 8008826:	bf00      	nop
 8008828:	40021000 	.word	0x40021000
 800882c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008830:	4b8c      	ldr	r3, [pc, #560]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 8008832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1ea      	bne.n	8008814 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0304 	and.w	r3, r3, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 80a6 	beq.w	8008998 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800884c:	2300      	movs	r3, #0
 800884e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008850:	4b84      	ldr	r3, [pc, #528]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 8008852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d101      	bne.n	8008860 <HAL_RCC_OscConfig+0x2b4>
 800885c:	2301      	movs	r3, #1
 800885e:	e000      	b.n	8008862 <HAL_RCC_OscConfig+0x2b6>
 8008860:	2300      	movs	r3, #0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00d      	beq.n	8008882 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008866:	4b7f      	ldr	r3, [pc, #508]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 8008868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800886a:	4a7e      	ldr	r2, [pc, #504]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 800886c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008870:	6593      	str	r3, [r2, #88]	@ 0x58
 8008872:	4b7c      	ldr	r3, [pc, #496]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 8008874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800887e:	2301      	movs	r3, #1
 8008880:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008882:	4b79      	ldr	r3, [pc, #484]	@ (8008a68 <HAL_RCC_OscConfig+0x4bc>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800888a:	2b00      	cmp	r3, #0
 800888c:	d118      	bne.n	80088c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800888e:	4b76      	ldr	r3, [pc, #472]	@ (8008a68 <HAL_RCC_OscConfig+0x4bc>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a75      	ldr	r2, [pc, #468]	@ (8008a68 <HAL_RCC_OscConfig+0x4bc>)
 8008894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800889a:	f7fc fe55 	bl	8005548 <HAL_GetTick>
 800889e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088a0:	e008      	b.n	80088b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088a2:	f7fc fe51 	bl	8005548 <HAL_GetTick>
 80088a6:	4602      	mov	r2, r0
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d901      	bls.n	80088b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e183      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088b4:	4b6c      	ldr	r3, [pc, #432]	@ (8008a68 <HAL_RCC_OscConfig+0x4bc>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0f0      	beq.n	80088a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d108      	bne.n	80088da <HAL_RCC_OscConfig+0x32e>
 80088c8:	4b66      	ldr	r3, [pc, #408]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 80088ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ce:	4a65      	ldr	r2, [pc, #404]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 80088d0:	f043 0301 	orr.w	r3, r3, #1
 80088d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088d8:	e024      	b.n	8008924 <HAL_RCC_OscConfig+0x378>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	2b05      	cmp	r3, #5
 80088e0:	d110      	bne.n	8008904 <HAL_RCC_OscConfig+0x358>
 80088e2:	4b60      	ldr	r3, [pc, #384]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 80088e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e8:	4a5e      	ldr	r2, [pc, #376]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 80088ea:	f043 0304 	orr.w	r3, r3, #4
 80088ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088f2:	4b5c      	ldr	r3, [pc, #368]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 80088f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088f8:	4a5a      	ldr	r2, [pc, #360]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 80088fa:	f043 0301 	orr.w	r3, r3, #1
 80088fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008902:	e00f      	b.n	8008924 <HAL_RCC_OscConfig+0x378>
 8008904:	4b57      	ldr	r3, [pc, #348]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 8008906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800890a:	4a56      	ldr	r2, [pc, #344]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 800890c:	f023 0301 	bic.w	r3, r3, #1
 8008910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008914:	4b53      	ldr	r3, [pc, #332]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 8008916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800891a:	4a52      	ldr	r2, [pc, #328]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 800891c:	f023 0304 	bic.w	r3, r3, #4
 8008920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d016      	beq.n	800895a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800892c:	f7fc fe0c 	bl	8005548 <HAL_GetTick>
 8008930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008932:	e00a      	b.n	800894a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008934:	f7fc fe08 	bl	8005548 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008942:	4293      	cmp	r3, r2
 8008944:	d901      	bls.n	800894a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e138      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800894a:	4b46      	ldr	r3, [pc, #280]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 800894c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d0ed      	beq.n	8008934 <HAL_RCC_OscConfig+0x388>
 8008958:	e015      	b.n	8008986 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800895a:	f7fc fdf5 	bl	8005548 <HAL_GetTick>
 800895e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008960:	e00a      	b.n	8008978 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008962:	f7fc fdf1 	bl	8005548 <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008970:	4293      	cmp	r3, r2
 8008972:	d901      	bls.n	8008978 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e121      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008978:	4b3a      	ldr	r3, [pc, #232]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 800897a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1ed      	bne.n	8008962 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008986:	7ffb      	ldrb	r3, [r7, #31]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d105      	bne.n	8008998 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800898c:	4b35      	ldr	r3, [pc, #212]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 800898e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008990:	4a34      	ldr	r2, [pc, #208]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 8008992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008996:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0320 	and.w	r3, r3, #32
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d03c      	beq.n	8008a1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01c      	beq.n	80089e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80089ac:	4b2d      	ldr	r3, [pc, #180]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 80089ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089b2:	4a2c      	ldr	r2, [pc, #176]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 80089b4:	f043 0301 	orr.w	r3, r3, #1
 80089b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089bc:	f7fc fdc4 	bl	8005548 <HAL_GetTick>
 80089c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089c2:	e008      	b.n	80089d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089c4:	f7fc fdc0 	bl	8005548 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d901      	bls.n	80089d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e0f2      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089d6:	4b23      	ldr	r3, [pc, #140]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 80089d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d0ef      	beq.n	80089c4 <HAL_RCC_OscConfig+0x418>
 80089e4:	e01b      	b.n	8008a1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80089e6:	4b1f      	ldr	r3, [pc, #124]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 80089e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 80089ee:	f023 0301 	bic.w	r3, r3, #1
 80089f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089f6:	f7fc fda7 	bl	8005548 <HAL_GetTick>
 80089fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80089fc:	e008      	b.n	8008a10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089fe:	f7fc fda3 	bl	8005548 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d901      	bls.n	8008a10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e0d5      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008a10:	4b14      	ldr	r3, [pc, #80]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 8008a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1ef      	bne.n	80089fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 80c9 	beq.w	8008bba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a28:	4b0e      	ldr	r3, [pc, #56]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f003 030c 	and.w	r3, r3, #12
 8008a30:	2b0c      	cmp	r3, #12
 8008a32:	f000 8083 	beq.w	8008b3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d15e      	bne.n	8008afc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a3e:	4b09      	ldr	r3, [pc, #36]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a08      	ldr	r2, [pc, #32]	@ (8008a64 <HAL_RCC_OscConfig+0x4b8>)
 8008a44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a4a:	f7fc fd7d 	bl	8005548 <HAL_GetTick>
 8008a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a50:	e00c      	b.n	8008a6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a52:	f7fc fd79 	bl	8005548 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d905      	bls.n	8008a6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e0ab      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
 8008a64:	40021000 	.word	0x40021000
 8008a68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a6c:	4b55      	ldr	r3, [pc, #340]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1ec      	bne.n	8008a52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a78:	4b52      	ldr	r3, [pc, #328]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	4b52      	ldr	r3, [pc, #328]	@ (8008bc8 <HAL_RCC_OscConfig+0x61c>)
 8008a7e:	4013      	ands	r3, r2
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6a11      	ldr	r1, [r2, #32]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a88:	3a01      	subs	r2, #1
 8008a8a:	0112      	lsls	r2, r2, #4
 8008a8c:	4311      	orrs	r1, r2
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008a92:	0212      	lsls	r2, r2, #8
 8008a94:	4311      	orrs	r1, r2
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008a9a:	0852      	lsrs	r2, r2, #1
 8008a9c:	3a01      	subs	r2, #1
 8008a9e:	0552      	lsls	r2, r2, #21
 8008aa0:	4311      	orrs	r1, r2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008aa6:	0852      	lsrs	r2, r2, #1
 8008aa8:	3a01      	subs	r2, #1
 8008aaa:	0652      	lsls	r2, r2, #25
 8008aac:	4311      	orrs	r1, r2
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008ab2:	06d2      	lsls	r2, r2, #27
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	4943      	ldr	r1, [pc, #268]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008abc:	4b41      	ldr	r3, [pc, #260]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a40      	ldr	r2, [pc, #256]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ac6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	4a3d      	ldr	r2, [pc, #244]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ad2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad4:	f7fc fd38 	bl	8005548 <HAL_GetTick>
 8008ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ada:	e008      	b.n	8008aee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008adc:	f7fc fd34 	bl	8005548 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e066      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008aee:	4b35      	ldr	r3, [pc, #212]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0f0      	beq.n	8008adc <HAL_RCC_OscConfig+0x530>
 8008afa:	e05e      	b.n	8008bba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008afc:	4b31      	ldr	r3, [pc, #196]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a30      	ldr	r2, [pc, #192]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008b02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b08:	f7fc fd1e 	bl	8005548 <HAL_GetTick>
 8008b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b0e:	e008      	b.n	8008b22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b10:	f7fc fd1a 	bl	8005548 <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d901      	bls.n	8008b22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e04c      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b22:	4b28      	ldr	r3, [pc, #160]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1f0      	bne.n	8008b10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008b2e:	4b25      	ldr	r3, [pc, #148]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008b30:	68da      	ldr	r2, [r3, #12]
 8008b32:	4924      	ldr	r1, [pc, #144]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008b34:	4b25      	ldr	r3, [pc, #148]	@ (8008bcc <HAL_RCC_OscConfig+0x620>)
 8008b36:	4013      	ands	r3, r2
 8008b38:	60cb      	str	r3, [r1, #12]
 8008b3a:	e03e      	b.n	8008bba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	69db      	ldr	r3, [r3, #28]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e039      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008b48:	4b1e      	ldr	r3, [pc, #120]	@ (8008bc4 <HAL_RCC_OscConfig+0x618>)
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f003 0203 	and.w	r2, r3, #3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d12c      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b66:	3b01      	subs	r3, #1
 8008b68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d123      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d11b      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d113      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b98:	085b      	lsrs	r3, r3, #1
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d109      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bac:	085b      	lsrs	r3, r3, #1
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d001      	beq.n	8008bba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e000      	b.n	8008bbc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3720      	adds	r7, #32
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	40021000 	.word	0x40021000
 8008bc8:	019f800c 	.word	0x019f800c
 8008bcc:	feeefffc 	.word	0xfeeefffc

08008bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e11e      	b.n	8008e26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008be8:	4b91      	ldr	r3, [pc, #580]	@ (8008e30 <HAL_RCC_ClockConfig+0x260>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 030f 	and.w	r3, r3, #15
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d910      	bls.n	8008c18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf6:	4b8e      	ldr	r3, [pc, #568]	@ (8008e30 <HAL_RCC_ClockConfig+0x260>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f023 020f 	bic.w	r2, r3, #15
 8008bfe:	498c      	ldr	r1, [pc, #560]	@ (8008e30 <HAL_RCC_ClockConfig+0x260>)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c06:	4b8a      	ldr	r3, [pc, #552]	@ (8008e30 <HAL_RCC_ClockConfig+0x260>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 030f 	and.w	r3, r3, #15
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d001      	beq.n	8008c18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e106      	b.n	8008e26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d073      	beq.n	8008d0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d129      	bne.n	8008c80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c2c:	4b81      	ldr	r3, [pc, #516]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e0f4      	b.n	8008e26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008c3c:	f000 f99e 	bl	8008f7c <RCC_GetSysClockFreqFromPLLSource>
 8008c40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	4a7c      	ldr	r2, [pc, #496]	@ (8008e38 <HAL_RCC_ClockConfig+0x268>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d93f      	bls.n	8008cca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d009      	beq.n	8008c6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d033      	beq.n	8008cca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d12f      	bne.n	8008cca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c6a:	4b72      	ldr	r3, [pc, #456]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c72:	4a70      	ldr	r2, [pc, #448]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008c7a:	2380      	movs	r3, #128	@ 0x80
 8008c7c:	617b      	str	r3, [r7, #20]
 8008c7e:	e024      	b.n	8008cca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d107      	bne.n	8008c98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c88:	4b6a      	ldr	r3, [pc, #424]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d109      	bne.n	8008ca8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	e0c6      	b.n	8008e26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c98:	4b66      	ldr	r3, [pc, #408]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e0be      	b.n	8008e26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008ca8:	f000 f8ce 	bl	8008e48 <HAL_RCC_GetSysClockFreq>
 8008cac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	4a61      	ldr	r2, [pc, #388]	@ (8008e38 <HAL_RCC_ClockConfig+0x268>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d909      	bls.n	8008cca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cbe:	4a5d      	ldr	r2, [pc, #372]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008cc6:	2380      	movs	r3, #128	@ 0x80
 8008cc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008cca:	4b5a      	ldr	r3, [pc, #360]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f023 0203 	bic.w	r2, r3, #3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	4957      	ldr	r1, [pc, #348]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cdc:	f7fc fc34 	bl	8005548 <HAL_GetTick>
 8008ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ce2:	e00a      	b.n	8008cfa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ce4:	f7fc fc30 	bl	8005548 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e095      	b.n	8008e26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f003 020c 	and.w	r2, r3, #12
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d1eb      	bne.n	8008ce4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d023      	beq.n	8008d60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d005      	beq.n	8008d30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d24:	4b43      	ldr	r3, [pc, #268]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	4a42      	ldr	r2, [pc, #264]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008d2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008d2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0308 	and.w	r3, r3, #8
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d007      	beq.n	8008d4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008d44:	4a3b      	ldr	r2, [pc, #236]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008d46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008d4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d4c:	4b39      	ldr	r3, [pc, #228]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	4936      	ldr	r1, [pc, #216]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	608b      	str	r3, [r1, #8]
 8008d5e:	e008      	b.n	8008d72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2b80      	cmp	r3, #128	@ 0x80
 8008d64:	d105      	bne.n	8008d72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008d66:	4b33      	ldr	r3, [pc, #204]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	4a32      	ldr	r2, [pc, #200]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008d6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d72:	4b2f      	ldr	r3, [pc, #188]	@ (8008e30 <HAL_RCC_ClockConfig+0x260>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 030f 	and.w	r3, r3, #15
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d21d      	bcs.n	8008dbc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d80:	4b2b      	ldr	r3, [pc, #172]	@ (8008e30 <HAL_RCC_ClockConfig+0x260>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f023 020f 	bic.w	r2, r3, #15
 8008d88:	4929      	ldr	r1, [pc, #164]	@ (8008e30 <HAL_RCC_ClockConfig+0x260>)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008d90:	f7fc fbda 	bl	8005548 <HAL_GetTick>
 8008d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d96:	e00a      	b.n	8008dae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d98:	f7fc fbd6 	bl	8005548 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d901      	bls.n	8008dae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e03b      	b.n	8008e26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dae:	4b20      	ldr	r3, [pc, #128]	@ (8008e30 <HAL_RCC_ClockConfig+0x260>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d1ed      	bne.n	8008d98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d008      	beq.n	8008dda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	4917      	ldr	r1, [pc, #92]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0308 	and.w	r3, r3, #8
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008de6:	4b13      	ldr	r3, [pc, #76]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	490f      	ldr	r1, [pc, #60]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008dfa:	f000 f825 	bl	8008e48 <HAL_RCC_GetSysClockFreq>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	4b0c      	ldr	r3, [pc, #48]	@ (8008e34 <HAL_RCC_ClockConfig+0x264>)
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	091b      	lsrs	r3, r3, #4
 8008e06:	f003 030f 	and.w	r3, r3, #15
 8008e0a:	490c      	ldr	r1, [pc, #48]	@ (8008e3c <HAL_RCC_ClockConfig+0x26c>)
 8008e0c:	5ccb      	ldrb	r3, [r1, r3]
 8008e0e:	f003 031f 	and.w	r3, r3, #31
 8008e12:	fa22 f303 	lsr.w	r3, r2, r3
 8008e16:	4a0a      	ldr	r2, [pc, #40]	@ (8008e40 <HAL_RCC_ClockConfig+0x270>)
 8008e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e44 <HAL_RCC_ClockConfig+0x274>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fc fb46 	bl	80054b0 <HAL_InitTick>
 8008e24:	4603      	mov	r3, r0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	40022000 	.word	0x40022000
 8008e34:	40021000 	.word	0x40021000
 8008e38:	04c4b400 	.word	0x04c4b400
 8008e3c:	080174b0 	.word	0x080174b0
 8008e40:	20000004 	.word	0x20000004
 8008e44:	20000008 	.word	0x20000008

08008e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8008f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f003 030c 	and.w	r3, r3, #12
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d102      	bne.n	8008e60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e5c:	613b      	str	r3, [r7, #16]
 8008e5e:	e047      	b.n	8008ef0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008e60:	4b27      	ldr	r3, [pc, #156]	@ (8008f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f003 030c 	and.w	r3, r3, #12
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d102      	bne.n	8008e72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008e6c:	4b26      	ldr	r3, [pc, #152]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e6e:	613b      	str	r3, [r7, #16]
 8008e70:	e03e      	b.n	8008ef0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008e72:	4b23      	ldr	r3, [pc, #140]	@ (8008f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f003 030c 	and.w	r3, r3, #12
 8008e7a:	2b0c      	cmp	r3, #12
 8008e7c:	d136      	bne.n	8008eec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e7e:	4b20      	ldr	r3, [pc, #128]	@ (8008f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e88:	4b1d      	ldr	r3, [pc, #116]	@ (8008f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	091b      	lsrs	r3, r3, #4
 8008e8e:	f003 030f 	and.w	r3, r3, #15
 8008e92:	3301      	adds	r3, #1
 8008e94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d10c      	bne.n	8008eb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea4:	4a16      	ldr	r2, [pc, #88]	@ (8008f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ea6:	68d2      	ldr	r2, [r2, #12]
 8008ea8:	0a12      	lsrs	r2, r2, #8
 8008eaa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008eae:	fb02 f303 	mul.w	r3, r2, r3
 8008eb2:	617b      	str	r3, [r7, #20]
      break;
 8008eb4:	e00c      	b.n	8008ed0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008eb6:	4a13      	ldr	r2, [pc, #76]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ebe:	4a10      	ldr	r2, [pc, #64]	@ (8008f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ec0:	68d2      	ldr	r2, [r2, #12]
 8008ec2:	0a12      	lsrs	r2, r2, #8
 8008ec4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008ec8:	fb02 f303 	mul.w	r3, r2, r3
 8008ecc:	617b      	str	r3, [r7, #20]
      break;
 8008ece:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8008f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	0e5b      	lsrs	r3, r3, #25
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	3301      	adds	r3, #1
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee8:	613b      	str	r3, [r7, #16]
 8008eea:	e001      	b.n	8008ef0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008ef0:	693b      	ldr	r3, [r7, #16]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	371c      	adds	r7, #28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	40021000 	.word	0x40021000
 8008f04:	00f42400 	.word	0x00f42400
 8008f08:	016e3600 	.word	0x016e3600

08008f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f10:	4b03      	ldr	r3, [pc, #12]	@ (8008f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f12:	681b      	ldr	r3, [r3, #0]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	20000004 	.word	0x20000004

08008f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008f28:	f7ff fff0 	bl	8008f0c <HAL_RCC_GetHCLKFreq>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	4b06      	ldr	r3, [pc, #24]	@ (8008f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	0a1b      	lsrs	r3, r3, #8
 8008f34:	f003 0307 	and.w	r3, r3, #7
 8008f38:	4904      	ldr	r1, [pc, #16]	@ (8008f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f3a:	5ccb      	ldrb	r3, [r1, r3]
 8008f3c:	f003 031f 	and.w	r3, r3, #31
 8008f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	40021000 	.word	0x40021000
 8008f4c:	080174c0 	.word	0x080174c0

08008f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008f54:	f7ff ffda 	bl	8008f0c <HAL_RCC_GetHCLKFreq>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	4b06      	ldr	r3, [pc, #24]	@ (8008f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	0adb      	lsrs	r3, r3, #11
 8008f60:	f003 0307 	and.w	r3, r3, #7
 8008f64:	4904      	ldr	r1, [pc, #16]	@ (8008f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f66:	5ccb      	ldrb	r3, [r1, r3]
 8008f68:	f003 031f 	and.w	r3, r3, #31
 8008f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	40021000 	.word	0x40021000
 8008f78:	080174c0 	.word	0x080174c0

08008f7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f82:	4b1e      	ldr	r3, [pc, #120]	@ (8008ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8008ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	091b      	lsrs	r3, r3, #4
 8008f92:	f003 030f 	and.w	r3, r3, #15
 8008f96:	3301      	adds	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d10c      	bne.n	8008fba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008fa0:	4a17      	ldr	r2, [pc, #92]	@ (8009000 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa8:	4a14      	ldr	r2, [pc, #80]	@ (8008ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008faa:	68d2      	ldr	r2, [r2, #12]
 8008fac:	0a12      	lsrs	r2, r2, #8
 8008fae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008fb2:	fb02 f303 	mul.w	r3, r2, r3
 8008fb6:	617b      	str	r3, [r7, #20]
    break;
 8008fb8:	e00c      	b.n	8008fd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008fba:	4a12      	ldr	r2, [pc, #72]	@ (8009004 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8008ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008fc4:	68d2      	ldr	r2, [r2, #12]
 8008fc6:	0a12      	lsrs	r2, r2, #8
 8008fc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008fcc:	fb02 f303 	mul.w	r3, r2, r3
 8008fd0:	617b      	str	r3, [r7, #20]
    break;
 8008fd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008fd4:	4b09      	ldr	r3, [pc, #36]	@ (8008ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	0e5b      	lsrs	r3, r3, #25
 8008fda:	f003 0303 	and.w	r3, r3, #3
 8008fde:	3301      	adds	r3, #1
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008fee:	687b      	ldr	r3, [r7, #4]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	371c      	adds	r7, #28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	40021000 	.word	0x40021000
 8009000:	016e3600 	.word	0x016e3600
 8009004:	00f42400 	.word	0x00f42400

08009008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009010:	2300      	movs	r3, #0
 8009012:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009014:	2300      	movs	r3, #0
 8009016:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 8098 	beq.w	8009156 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009026:	2300      	movs	r3, #0
 8009028:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800902a:	4b43      	ldr	r3, [pc, #268]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800902c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800902e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10d      	bne.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009036:	4b40      	ldr	r3, [pc, #256]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800903a:	4a3f      	ldr	r2, [pc, #252]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800903c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009040:	6593      	str	r3, [r2, #88]	@ 0x58
 8009042:	4b3d      	ldr	r3, [pc, #244]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800904a:	60bb      	str	r3, [r7, #8]
 800904c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800904e:	2301      	movs	r3, #1
 8009050:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009052:	4b3a      	ldr	r3, [pc, #232]	@ (800913c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a39      	ldr	r2, [pc, #228]	@ (800913c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800905c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800905e:	f7fc fa73 	bl	8005548 <HAL_GetTick>
 8009062:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009064:	e009      	b.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009066:	f7fc fa6f 	bl	8005548 <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d902      	bls.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	74fb      	strb	r3, [r7, #19]
        break;
 8009078:	e005      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800907a:	4b30      	ldr	r3, [pc, #192]	@ (800913c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0ef      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009086:	7cfb      	ldrb	r3, [r7, #19]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d159      	bne.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800908c:	4b2a      	ldr	r3, [pc, #168]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800908e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009096:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d01e      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d019      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80090a8:	4b23      	ldr	r3, [pc, #140]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090b4:	4b20      	ldr	r3, [pc, #128]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ba:	4a1f      	ldr	r2, [pc, #124]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80090d4:	4a18      	ldr	r2, [pc, #96]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d016      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e6:	f7fc fa2f 	bl	8005548 <HAL_GetTick>
 80090ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090ec:	e00b      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090ee:	f7fc fa2b 	bl	8005548 <HAL_GetTick>
 80090f2:	4602      	mov	r2, r0
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d902      	bls.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	74fb      	strb	r3, [r7, #19]
            break;
 8009104:	e006      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009106:	4b0c      	ldr	r3, [pc, #48]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800910c:	f003 0302 	and.w	r3, r3, #2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d0ec      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009114:	7cfb      	ldrb	r3, [r7, #19]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10b      	bne.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800911a:	4b07      	ldr	r3, [pc, #28]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800911c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009120:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009128:	4903      	ldr	r1, [pc, #12]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800912a:	4313      	orrs	r3, r2
 800912c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009130:	e008      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009132:	7cfb      	ldrb	r3, [r7, #19]
 8009134:	74bb      	strb	r3, [r7, #18]
 8009136:	e005      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009138:	40021000 	.word	0x40021000
 800913c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009140:	7cfb      	ldrb	r3, [r7, #19]
 8009142:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009144:	7c7b      	ldrb	r3, [r7, #17]
 8009146:	2b01      	cmp	r3, #1
 8009148:	d105      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800914a:	4ba7      	ldr	r3, [pc, #668]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800914c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800914e:	4aa6      	ldr	r2, [pc, #664]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009150:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009154:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00a      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009162:	4ba1      	ldr	r3, [pc, #644]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009168:	f023 0203 	bic.w	r2, r3, #3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	499d      	ldr	r1, [pc, #628]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009172:	4313      	orrs	r3, r2
 8009174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0302 	and.w	r3, r3, #2
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00a      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009184:	4b98      	ldr	r3, [pc, #608]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800918a:	f023 020c 	bic.w	r2, r3, #12
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	4995      	ldr	r1, [pc, #596]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009194:	4313      	orrs	r3, r2
 8009196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0304 	and.w	r3, r3, #4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80091a6:	4b90      	ldr	r3, [pc, #576]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	498c      	ldr	r1, [pc, #560]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0308 	and.w	r3, r3, #8
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00a      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80091c8:	4b87      	ldr	r3, [pc, #540]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	4984      	ldr	r1, [pc, #528]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0310 	and.w	r3, r3, #16
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00a      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80091ea:	4b7f      	ldr	r3, [pc, #508]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	497b      	ldr	r1, [pc, #492]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 0320 	and.w	r3, r3, #32
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00a      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800920c:	4b76      	ldr	r3, [pc, #472]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800920e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009212:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	4973      	ldr	r1, [pc, #460]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800921c:	4313      	orrs	r3, r2
 800921e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00a      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800922e:	4b6e      	ldr	r3, [pc, #440]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009234:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	496a      	ldr	r1, [pc, #424]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800923e:	4313      	orrs	r3, r2
 8009240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00a      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009250:	4b65      	ldr	r3, [pc, #404]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009256:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	4962      	ldr	r1, [pc, #392]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009260:	4313      	orrs	r3, r2
 8009262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009272:	4b5d      	ldr	r3, [pc, #372]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009278:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009280:	4959      	ldr	r1, [pc, #356]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009282:	4313      	orrs	r3, r2
 8009284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00a      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009294:	4b54      	ldr	r3, [pc, #336]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009296:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800929a:	f023 0203 	bic.w	r2, r3, #3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a2:	4951      	ldr	r1, [pc, #324]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80092b6:	4b4c      	ldr	r3, [pc, #304]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c4:	4948      	ldr	r1, [pc, #288]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d015      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092d8:	4b43      	ldr	r3, [pc, #268]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e6:	4940      	ldr	r1, [pc, #256]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092f6:	d105      	bne.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092f8:	4b3b      	ldr	r3, [pc, #236]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	4a3a      	ldr	r2, [pc, #232]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009302:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800930c:	2b00      	cmp	r3, #0
 800930e:	d015      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009310:	4b35      	ldr	r3, [pc, #212]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009316:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800931e:	4932      	ldr	r1, [pc, #200]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009320:	4313      	orrs	r3, r2
 8009322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800932a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800932e:	d105      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009330:	4b2d      	ldr	r3, [pc, #180]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	4a2c      	ldr	r2, [pc, #176]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800933a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d015      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009348:	4b27      	ldr	r3, [pc, #156]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800934a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800934e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009356:	4924      	ldr	r1, [pc, #144]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009358:	4313      	orrs	r3, r2
 800935a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009362:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009366:	d105      	bne.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009368:	4b1f      	ldr	r3, [pc, #124]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	4a1e      	ldr	r2, [pc, #120]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800936e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009372:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d015      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009380:	4b19      	ldr	r3, [pc, #100]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009386:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800938e:	4916      	ldr	r1, [pc, #88]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009390:	4313      	orrs	r3, r2
 8009392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800939a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800939e:	d105      	bne.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093a0:	4b11      	ldr	r3, [pc, #68]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	4a10      	ldr	r2, [pc, #64]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d019      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80093b8:	4b0b      	ldr	r3, [pc, #44]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c6:	4908      	ldr	r1, [pc, #32]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093d6:	d109      	bne.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093d8:	4b03      	ldr	r3, [pc, #12]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	4a02      	ldr	r2, [pc, #8]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093e2:	60d3      	str	r3, [r2, #12]
 80093e4:	e002      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80093e6:	bf00      	nop
 80093e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d015      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80093f8:	4b29      	ldr	r3, [pc, #164]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009406:	4926      	ldr	r1, [pc, #152]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009408:	4313      	orrs	r3, r2
 800940a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009412:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009416:	d105      	bne.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009418:	4b21      	ldr	r3, [pc, #132]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	4a20      	ldr	r2, [pc, #128]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800941e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009422:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d015      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009430:	4b1b      	ldr	r3, [pc, #108]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009436:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800943e:	4918      	ldr	r1, [pc, #96]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009440:	4313      	orrs	r3, r2
 8009442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800944a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800944e:	d105      	bne.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009450:	4b13      	ldr	r3, [pc, #76]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	4a12      	ldr	r2, [pc, #72]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800945a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d015      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009468:	4b0d      	ldr	r3, [pc, #52]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800946a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800946e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009476:	490a      	ldr	r1, [pc, #40]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009478:	4313      	orrs	r3, r2
 800947a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009482:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009486:	d105      	bne.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009488:	4b05      	ldr	r3, [pc, #20]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	4a04      	ldr	r2, [pc, #16]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800948e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009492:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009494:	7cbb      	ldrb	r3, [r7, #18]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	40021000 	.word	0x40021000

080094a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e09d      	b.n	80095f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d108      	bne.n	80094d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094c6:	d009      	beq.n	80094dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	61da      	str	r2, [r3, #28]
 80094ce:	e005      	b.n	80094dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d106      	bne.n	80094fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7fb fa52 	bl	80049a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2202      	movs	r2, #2
 8009500:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009512:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800951c:	d902      	bls.n	8009524 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800951e:	2300      	movs	r3, #0
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	e002      	b.n	800952a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009524:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009528:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009532:	d007      	beq.n	8009544 <HAL_SPI_Init+0xa0>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800953c:	d002      	beq.n	8009544 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009554:	431a      	orrs	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	f003 0302 	and.w	r3, r3, #2
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	431a      	orrs	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009572:	431a      	orrs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800957c:	431a      	orrs	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009586:	ea42 0103 	orr.w	r1, r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800958e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	430a      	orrs	r2, r1
 8009598:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	0c1b      	lsrs	r3, r3, #16
 80095a0:	f003 0204 	and.w	r2, r3, #4
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a8:	f003 0310 	and.w	r3, r3, #16
 80095ac:	431a      	orrs	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095b2:	f003 0308 	and.w	r3, r3, #8
 80095b6:	431a      	orrs	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80095c0:	ea42 0103 	orr.w	r1, r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	430a      	orrs	r2, r1
 80095d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	69da      	ldr	r2, [r3, #28]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b08a      	sub	sp, #40	@ 0x28
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	607a      	str	r2, [r7, #4]
 8009606:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009608:	2301      	movs	r3, #1
 800960a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800960c:	f7fb ff9c 	bl	8005548 <HAL_GetTick>
 8009610:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009618:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009620:	887b      	ldrh	r3, [r7, #2]
 8009622:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8009624:	887b      	ldrh	r3, [r7, #2]
 8009626:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009628:	7ffb      	ldrb	r3, [r7, #31]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d00c      	beq.n	8009648 <HAL_SPI_TransmitReceive+0x4e>
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009634:	d106      	bne.n	8009644 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d102      	bne.n	8009644 <HAL_SPI_TransmitReceive+0x4a>
 800963e:	7ffb      	ldrb	r3, [r7, #31]
 8009640:	2b04      	cmp	r3, #4
 8009642:	d001      	beq.n	8009648 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009644:	2302      	movs	r3, #2
 8009646:	e1f3      	b.n	8009a30 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d005      	beq.n	800965a <HAL_SPI_TransmitReceive+0x60>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <HAL_SPI_TransmitReceive+0x60>
 8009654:	887b      	ldrh	r3, [r7, #2]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d101      	bne.n	800965e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e1e8      	b.n	8009a30 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009664:	2b01      	cmp	r3, #1
 8009666:	d101      	bne.n	800966c <HAL_SPI_TransmitReceive+0x72>
 8009668:	2302      	movs	r3, #2
 800966a:	e1e1      	b.n	8009a30 <HAL_SPI_TransmitReceive+0x436>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b04      	cmp	r3, #4
 800967e:	d003      	beq.n	8009688 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2205      	movs	r2, #5
 8009684:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	887a      	ldrh	r2, [r7, #2]
 8009698:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	887a      	ldrh	r2, [r7, #2]
 80096a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	887a      	ldrh	r2, [r7, #2]
 80096ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	887a      	ldrh	r2, [r7, #2]
 80096b4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80096ca:	d802      	bhi.n	80096d2 <HAL_SPI_TransmitReceive+0xd8>
 80096cc:	8abb      	ldrh	r3, [r7, #20]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d908      	bls.n	80096e4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	685a      	ldr	r2, [r3, #4]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80096e0:	605a      	str	r2, [r3, #4]
 80096e2:	e007      	b.n	80096f4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80096f2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096fe:	2b40      	cmp	r3, #64	@ 0x40
 8009700:	d007      	beq.n	8009712 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009710:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800971a:	f240 8083 	bls.w	8009824 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <HAL_SPI_TransmitReceive+0x132>
 8009726:	8afb      	ldrh	r3, [r7, #22]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d16f      	bne.n	800980c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009730:	881a      	ldrh	r2, [r3, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973c:	1c9a      	adds	r2, r3, #2
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009746:	b29b      	uxth	r3, r3
 8009748:	3b01      	subs	r3, #1
 800974a:	b29a      	uxth	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009750:	e05c      	b.n	800980c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f003 0302 	and.w	r3, r3, #2
 800975c:	2b02      	cmp	r3, #2
 800975e:	d11b      	bne.n	8009798 <HAL_SPI_TransmitReceive+0x19e>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009764:	b29b      	uxth	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d016      	beq.n	8009798 <HAL_SPI_TransmitReceive+0x19e>
 800976a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976c:	2b01      	cmp	r3, #1
 800976e:	d113      	bne.n	8009798 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009774:	881a      	ldrh	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009780:	1c9a      	adds	r2, r3, #2
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800978a:	b29b      	uxth	r3, r3
 800978c:	3b01      	subs	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009794:	2300      	movs	r3, #0
 8009796:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d11c      	bne.n	80097e0 <HAL_SPI_TransmitReceive+0x1e6>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d016      	beq.n	80097e0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68da      	ldr	r2, [r3, #12]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097bc:	b292      	uxth	r2, r2
 80097be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c4:	1c9a      	adds	r2, r3, #2
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	3b01      	subs	r3, #1
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097dc:	2301      	movs	r3, #1
 80097de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80097e0:	f7fb feb2 	bl	8005548 <HAL_GetTick>
 80097e4:	4602      	mov	r2, r0
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d80d      	bhi.n	800980c <HAL_SPI_TransmitReceive+0x212>
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f6:	d009      	beq.n	800980c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e111      	b.n	8009a30 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009810:	b29b      	uxth	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d19d      	bne.n	8009752 <HAL_SPI_TransmitReceive+0x158>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800981c:	b29b      	uxth	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d197      	bne.n	8009752 <HAL_SPI_TransmitReceive+0x158>
 8009822:	e0e5      	b.n	80099f0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <HAL_SPI_TransmitReceive+0x23a>
 800982c:	8afb      	ldrh	r3, [r7, #22]
 800982e:	2b01      	cmp	r3, #1
 8009830:	f040 80d1 	bne.w	80099d6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009838:	b29b      	uxth	r3, r3
 800983a:	2b01      	cmp	r3, #1
 800983c:	d912      	bls.n	8009864 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009842:	881a      	ldrh	r2, [r3, #0]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800984e:	1c9a      	adds	r2, r3, #2
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009858:	b29b      	uxth	r3, r3
 800985a:	3b02      	subs	r3, #2
 800985c:	b29a      	uxth	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009862:	e0b8      	b.n	80099d6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	330c      	adds	r3, #12
 800986e:	7812      	ldrb	r2, [r2, #0]
 8009870:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009880:	b29b      	uxth	r3, r3
 8009882:	3b01      	subs	r3, #1
 8009884:	b29a      	uxth	r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800988a:	e0a4      	b.n	80099d6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	2b02      	cmp	r3, #2
 8009898:	d134      	bne.n	8009904 <HAL_SPI_TransmitReceive+0x30a>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800989e:	b29b      	uxth	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d02f      	beq.n	8009904 <HAL_SPI_TransmitReceive+0x30a>
 80098a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d12c      	bne.n	8009904 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d912      	bls.n	80098da <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b8:	881a      	ldrh	r2, [r3, #0]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c4:	1c9a      	adds	r2, r3, #2
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	3b02      	subs	r3, #2
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80098d8:	e012      	b.n	8009900 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	330c      	adds	r3, #12
 80098e4:	7812      	ldrb	r2, [r2, #0]
 80098e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	3b01      	subs	r3, #1
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009900:	2300      	movs	r3, #0
 8009902:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	2b01      	cmp	r3, #1
 8009910:	d148      	bne.n	80099a4 <HAL_SPI_TransmitReceive+0x3aa>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009918:	b29b      	uxth	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d042      	beq.n	80099a4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009924:	b29b      	uxth	r3, r3
 8009926:	2b01      	cmp	r3, #1
 8009928:	d923      	bls.n	8009972 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68da      	ldr	r2, [r3, #12]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009934:	b292      	uxth	r2, r2
 8009936:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800993c:	1c9a      	adds	r2, r3, #2
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009948:	b29b      	uxth	r3, r3
 800994a:	3b02      	subs	r3, #2
 800994c:	b29a      	uxth	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800995a:	b29b      	uxth	r3, r3
 800995c:	2b01      	cmp	r3, #1
 800995e:	d81f      	bhi.n	80099a0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800996e:	605a      	str	r2, [r3, #4]
 8009970:	e016      	b.n	80099a0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f103 020c 	add.w	r2, r3, #12
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800997e:	7812      	ldrb	r2, [r2, #0]
 8009980:	b2d2      	uxtb	r2, r2
 8009982:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009988:	1c5a      	adds	r2, r3, #1
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009994:	b29b      	uxth	r3, r3
 8009996:	3b01      	subs	r3, #1
 8009998:	b29a      	uxth	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80099a0:	2301      	movs	r3, #1
 80099a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80099a4:	f7fb fdd0 	bl	8005548 <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d803      	bhi.n	80099bc <HAL_SPI_TransmitReceive+0x3c2>
 80099b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ba:	d102      	bne.n	80099c2 <HAL_SPI_TransmitReceive+0x3c8>
 80099bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d109      	bne.n	80099d6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e02c      	b.n	8009a30 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099da:	b29b      	uxth	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f47f af55 	bne.w	800988c <HAL_SPI_TransmitReceive+0x292>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f47f af4e 	bne.w	800988c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099f0:	6a3a      	ldr	r2, [r7, #32]
 80099f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 f93d 	bl	8009c74 <SPI_EndRxTxTransaction>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d008      	beq.n	8009a12 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2220      	movs	r2, #32
 8009a04:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e00e      	b.n	8009a30 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e000      	b.n	8009a30 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
  }
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3728      	adds	r7, #40	@ 0x28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	603b      	str	r3, [r7, #0]
 8009a44:	4613      	mov	r3, r2
 8009a46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a48:	f7fb fd7e 	bl	8005548 <HAL_GetTick>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a50:	1a9b      	subs	r3, r3, r2
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	4413      	add	r3, r2
 8009a56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a58:	f7fb fd76 	bl	8005548 <HAL_GetTick>
 8009a5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a5e:	4b39      	ldr	r3, [pc, #228]	@ (8009b44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	015b      	lsls	r3, r3, #5
 8009a64:	0d1b      	lsrs	r3, r3, #20
 8009a66:	69fa      	ldr	r2, [r7, #28]
 8009a68:	fb02 f303 	mul.w	r3, r2, r3
 8009a6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a6e:	e054      	b.n	8009b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a76:	d050      	beq.n	8009b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a78:	f7fb fd66 	bl	8005548 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	69fa      	ldr	r2, [r7, #28]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d902      	bls.n	8009a8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d13d      	bne.n	8009b0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009a9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009aa6:	d111      	bne.n	8009acc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ab0:	d004      	beq.n	8009abc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aba:	d107      	bne.n	8009acc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009aca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ad4:	d10f      	bne.n	8009af6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009af4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e017      	b.n	8009b3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	3b01      	subs	r3, #1
 8009b18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689a      	ldr	r2, [r3, #8]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	4013      	ands	r3, r2
 8009b24:	68ba      	ldr	r2, [r7, #8]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	bf0c      	ite	eq
 8009b2a:	2301      	moveq	r3, #1
 8009b2c:	2300      	movne	r3, #0
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	461a      	mov	r2, r3
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d19b      	bne.n	8009a70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3720      	adds	r7, #32
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20000004 	.word	0x20000004

08009b48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08a      	sub	sp, #40	@ 0x28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009b5a:	f7fb fcf5 	bl	8005548 <HAL_GetTick>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b62:	1a9b      	subs	r3, r3, r2
 8009b64:	683a      	ldr	r2, [r7, #0]
 8009b66:	4413      	add	r3, r2
 8009b68:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009b6a:	f7fb fced 	bl	8005548 <HAL_GetTick>
 8009b6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	330c      	adds	r3, #12
 8009b76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009b78:	4b3d      	ldr	r3, [pc, #244]	@ (8009c70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	00da      	lsls	r2, r3, #3
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	0d1b      	lsrs	r3, r3, #20
 8009b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b8a:	fb02 f303 	mul.w	r3, r2, r3
 8009b8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009b90:	e060      	b.n	8009c54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009b98:	d107      	bne.n	8009baa <SPI_WaitFifoStateUntilTimeout+0x62>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d104      	bne.n	8009baa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb0:	d050      	beq.n	8009c54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009bb2:	f7fb fcc9 	bl	8005548 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d902      	bls.n	8009bc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d13d      	bne.n	8009c44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009bd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009be0:	d111      	bne.n	8009c06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bea:	d004      	beq.n	8009bf6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bf4:	d107      	bne.n	8009c06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c0e:	d10f      	bne.n	8009c30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e010      	b.n	8009c66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689a      	ldr	r2, [r3, #8]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d196      	bne.n	8009b92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3728      	adds	r7, #40	@ 0x28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20000004 	.word	0x20000004

08009c74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af02      	add	r7, sp, #8
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f7ff ff5b 	bl	8009b48 <SPI_WaitFifoStateUntilTimeout>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d007      	beq.n	8009ca8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c9c:	f043 0220 	orr.w	r2, r3, #32
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e027      	b.n	8009cf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	2180      	movs	r1, #128	@ 0x80
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f7ff fec0 	bl	8009a38 <SPI_WaitFlagStateUntilTimeout>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d007      	beq.n	8009cce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cc2:	f043 0220 	orr.w	r2, r3, #32
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e014      	b.n	8009cf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f7ff ff34 	bl	8009b48 <SPI_WaitFifoStateUntilTimeout>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d007      	beq.n	8009cf6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cea:	f043 0220 	orr.w	r2, r3, #32
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e000      	b.n	8009cf8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e049      	b.n	8009da6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d106      	bne.n	8009d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7fb fa44 	bl	80051b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	4610      	mov	r0, r2
 8009d40:	f000 fef8 	bl	800ab34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
	...

08009db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d001      	beq.n	8009dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e054      	b.n	8009e72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68da      	ldr	r2, [r3, #12]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f042 0201 	orr.w	r2, r2, #1
 8009dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a26      	ldr	r2, [pc, #152]	@ (8009e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d022      	beq.n	8009e30 <HAL_TIM_Base_Start_IT+0x80>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009df2:	d01d      	beq.n	8009e30 <HAL_TIM_Base_Start_IT+0x80>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a22      	ldr	r2, [pc, #136]	@ (8009e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d018      	beq.n	8009e30 <HAL_TIM_Base_Start_IT+0x80>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a21      	ldr	r2, [pc, #132]	@ (8009e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d013      	beq.n	8009e30 <HAL_TIM_Base_Start_IT+0x80>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8009e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d00e      	beq.n	8009e30 <HAL_TIM_Base_Start_IT+0x80>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a1e      	ldr	r2, [pc, #120]	@ (8009e90 <HAL_TIM_Base_Start_IT+0xe0>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d009      	beq.n	8009e30 <HAL_TIM_Base_Start_IT+0x80>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a1c      	ldr	r2, [pc, #112]	@ (8009e94 <HAL_TIM_Base_Start_IT+0xe4>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d004      	beq.n	8009e30 <HAL_TIM_Base_Start_IT+0x80>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8009e98 <HAL_TIM_Base_Start_IT+0xe8>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d115      	bne.n	8009e5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689a      	ldr	r2, [r3, #8]
 8009e36:	4b19      	ldr	r3, [pc, #100]	@ (8009e9c <HAL_TIM_Base_Start_IT+0xec>)
 8009e38:	4013      	ands	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b06      	cmp	r3, #6
 8009e40:	d015      	beq.n	8009e6e <HAL_TIM_Base_Start_IT+0xbe>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e48:	d011      	beq.n	8009e6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f042 0201 	orr.w	r2, r2, #1
 8009e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e5a:	e008      	b.n	8009e6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f042 0201 	orr.w	r2, r2, #1
 8009e6a:	601a      	str	r2, [r3, #0]
 8009e6c:	e000      	b.n	8009e70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	40012c00 	.word	0x40012c00
 8009e84:	40000400 	.word	0x40000400
 8009e88:	40000800 	.word	0x40000800
 8009e8c:	40000c00 	.word	0x40000c00
 8009e90:	40013400 	.word	0x40013400
 8009e94:	40014000 	.word	0x40014000
 8009e98:	40015000 	.word	0x40015000
 8009e9c:	00010007 	.word	0x00010007

08009ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e049      	b.n	8009f46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d106      	bne.n	8009ecc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f841 	bl	8009f4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	3304      	adds	r3, #4
 8009edc:	4619      	mov	r1, r3
 8009ede:	4610      	mov	r0, r2
 8009ee0:	f000 fe28 	bl	800ab34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b083      	sub	sp, #12
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
	...

08009f64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d109      	bne.n	8009f88 <HAL_TIM_PWM_Start+0x24>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	bf14      	ite	ne
 8009f80:	2301      	movne	r3, #1
 8009f82:	2300      	moveq	r3, #0
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	e03c      	b.n	800a002 <HAL_TIM_PWM_Start+0x9e>
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	2b04      	cmp	r3, #4
 8009f8c:	d109      	bne.n	8009fa2 <HAL_TIM_PWM_Start+0x3e>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	bf14      	ite	ne
 8009f9a:	2301      	movne	r3, #1
 8009f9c:	2300      	moveq	r3, #0
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	e02f      	b.n	800a002 <HAL_TIM_PWM_Start+0x9e>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b08      	cmp	r3, #8
 8009fa6:	d109      	bne.n	8009fbc <HAL_TIM_PWM_Start+0x58>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	bf14      	ite	ne
 8009fb4:	2301      	movne	r3, #1
 8009fb6:	2300      	moveq	r3, #0
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	e022      	b.n	800a002 <HAL_TIM_PWM_Start+0x9e>
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	2b0c      	cmp	r3, #12
 8009fc0:	d109      	bne.n	8009fd6 <HAL_TIM_PWM_Start+0x72>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	bf14      	ite	ne
 8009fce:	2301      	movne	r3, #1
 8009fd0:	2300      	moveq	r3, #0
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	e015      	b.n	800a002 <HAL_TIM_PWM_Start+0x9e>
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	2b10      	cmp	r3, #16
 8009fda:	d109      	bne.n	8009ff0 <HAL_TIM_PWM_Start+0x8c>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	bf14      	ite	ne
 8009fe8:	2301      	movne	r3, #1
 8009fea:	2300      	moveq	r3, #0
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	e008      	b.n	800a002 <HAL_TIM_PWM_Start+0x9e>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	bf14      	ite	ne
 8009ffc:	2301      	movne	r3, #1
 8009ffe:	2300      	moveq	r3, #0
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e0a6      	b.n	800a158 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d104      	bne.n	800a01a <HAL_TIM_PWM_Start+0xb6>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2202      	movs	r2, #2
 800a014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a018:	e023      	b.n	800a062 <HAL_TIM_PWM_Start+0xfe>
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	2b04      	cmp	r3, #4
 800a01e:	d104      	bne.n	800a02a <HAL_TIM_PWM_Start+0xc6>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2202      	movs	r2, #2
 800a024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a028:	e01b      	b.n	800a062 <HAL_TIM_PWM_Start+0xfe>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b08      	cmp	r3, #8
 800a02e:	d104      	bne.n	800a03a <HAL_TIM_PWM_Start+0xd6>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a038:	e013      	b.n	800a062 <HAL_TIM_PWM_Start+0xfe>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b0c      	cmp	r3, #12
 800a03e:	d104      	bne.n	800a04a <HAL_TIM_PWM_Start+0xe6>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a048:	e00b      	b.n	800a062 <HAL_TIM_PWM_Start+0xfe>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b10      	cmp	r3, #16
 800a04e:	d104      	bne.n	800a05a <HAL_TIM_PWM_Start+0xf6>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2202      	movs	r2, #2
 800a054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a058:	e003      	b.n	800a062 <HAL_TIM_PWM_Start+0xfe>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2202      	movs	r2, #2
 800a05e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2201      	movs	r2, #1
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f001 f9dc 	bl	800b428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a3a      	ldr	r2, [pc, #232]	@ (800a160 <HAL_TIM_PWM_Start+0x1fc>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d018      	beq.n	800a0ac <HAL_TIM_PWM_Start+0x148>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a39      	ldr	r2, [pc, #228]	@ (800a164 <HAL_TIM_PWM_Start+0x200>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d013      	beq.n	800a0ac <HAL_TIM_PWM_Start+0x148>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a37      	ldr	r2, [pc, #220]	@ (800a168 <HAL_TIM_PWM_Start+0x204>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d00e      	beq.n	800a0ac <HAL_TIM_PWM_Start+0x148>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a36      	ldr	r2, [pc, #216]	@ (800a16c <HAL_TIM_PWM_Start+0x208>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d009      	beq.n	800a0ac <HAL_TIM_PWM_Start+0x148>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a34      	ldr	r2, [pc, #208]	@ (800a170 <HAL_TIM_PWM_Start+0x20c>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d004      	beq.n	800a0ac <HAL_TIM_PWM_Start+0x148>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a33      	ldr	r2, [pc, #204]	@ (800a174 <HAL_TIM_PWM_Start+0x210>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d101      	bne.n	800a0b0 <HAL_TIM_PWM_Start+0x14c>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e000      	b.n	800a0b2 <HAL_TIM_PWM_Start+0x14e>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d007      	beq.n	800a0c6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a25      	ldr	r2, [pc, #148]	@ (800a160 <HAL_TIM_PWM_Start+0x1fc>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d022      	beq.n	800a116 <HAL_TIM_PWM_Start+0x1b2>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0d8:	d01d      	beq.n	800a116 <HAL_TIM_PWM_Start+0x1b2>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a26      	ldr	r2, [pc, #152]	@ (800a178 <HAL_TIM_PWM_Start+0x214>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d018      	beq.n	800a116 <HAL_TIM_PWM_Start+0x1b2>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a24      	ldr	r2, [pc, #144]	@ (800a17c <HAL_TIM_PWM_Start+0x218>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d013      	beq.n	800a116 <HAL_TIM_PWM_Start+0x1b2>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a23      	ldr	r2, [pc, #140]	@ (800a180 <HAL_TIM_PWM_Start+0x21c>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d00e      	beq.n	800a116 <HAL_TIM_PWM_Start+0x1b2>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a19      	ldr	r2, [pc, #100]	@ (800a164 <HAL_TIM_PWM_Start+0x200>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d009      	beq.n	800a116 <HAL_TIM_PWM_Start+0x1b2>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a18      	ldr	r2, [pc, #96]	@ (800a168 <HAL_TIM_PWM_Start+0x204>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d004      	beq.n	800a116 <HAL_TIM_PWM_Start+0x1b2>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a18      	ldr	r2, [pc, #96]	@ (800a174 <HAL_TIM_PWM_Start+0x210>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d115      	bne.n	800a142 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	689a      	ldr	r2, [r3, #8]
 800a11c:	4b19      	ldr	r3, [pc, #100]	@ (800a184 <HAL_TIM_PWM_Start+0x220>)
 800a11e:	4013      	ands	r3, r2
 800a120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b06      	cmp	r3, #6
 800a126:	d015      	beq.n	800a154 <HAL_TIM_PWM_Start+0x1f0>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a12e:	d011      	beq.n	800a154 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f042 0201 	orr.w	r2, r2, #1
 800a13e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a140:	e008      	b.n	800a154 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f042 0201 	orr.w	r2, r2, #1
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	e000      	b.n	800a156 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a154:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	40012c00 	.word	0x40012c00
 800a164:	40013400 	.word	0x40013400
 800a168:	40014000 	.word	0x40014000
 800a16c:	40014400 	.word	0x40014400
 800a170:	40014800 	.word	0x40014800
 800a174:	40015000 	.word	0x40015000
 800a178:	40000400 	.word	0x40000400
 800a17c:	40000800 	.word	0x40000800
 800a180:	40000c00 	.word	0x40000c00
 800a184:	00010007 	.word	0x00010007

0800a188 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e097      	b.n	800a2cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d106      	bne.n	800a1b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7fa ff5b 	bl	800506c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2202      	movs	r2, #2
 800a1ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	6812      	ldr	r2, [r2, #0]
 800a1c8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a1cc:	f023 0307 	bic.w	r3, r3, #7
 800a1d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	3304      	adds	r3, #4
 800a1da:	4619      	mov	r1, r3
 800a1dc:	4610      	mov	r0, r2
 800a1de:	f000 fca9 	bl	800ab34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	4313      	orrs	r3, r2
 800a202:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a20a:	f023 0303 	bic.w	r3, r3, #3
 800a20e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	689a      	ldr	r2, [r3, #8]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	4313      	orrs	r3, r2
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	4313      	orrs	r3, r2
 800a220:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a228:	f023 030c 	bic.w	r3, r3, #12
 800a22c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a234:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	68da      	ldr	r2, [r3, #12]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	021b      	lsls	r3, r3, #8
 800a244:	4313      	orrs	r3, r2
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	4313      	orrs	r3, r2
 800a24a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	011a      	lsls	r2, r3, #4
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	031b      	lsls	r3, r3, #12
 800a258:	4313      	orrs	r3, r2
 800a25a:	693a      	ldr	r2, [r7, #16]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a266:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a26e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	695b      	ldr	r3, [r3, #20]
 800a278:	011b      	lsls	r3, r3, #4
 800a27a:	4313      	orrs	r3, r2
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	4313      	orrs	r3, r2
 800a280:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	693a      	ldr	r2, [r7, #16]
 800a290:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a2e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a2ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a2f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a2fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d110      	bne.n	800a326 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a304:	7bfb      	ldrb	r3, [r7, #15]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d102      	bne.n	800a310 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a30a:	7b7b      	ldrb	r3, [r7, #13]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d001      	beq.n	800a314 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e069      	b.n	800a3e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2202      	movs	r2, #2
 800a318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2202      	movs	r2, #2
 800a320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a324:	e031      	b.n	800a38a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	2b04      	cmp	r3, #4
 800a32a:	d110      	bne.n	800a34e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d102      	bne.n	800a338 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a332:	7b3b      	ldrb	r3, [r7, #12]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d001      	beq.n	800a33c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e055      	b.n	800a3e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2202      	movs	r2, #2
 800a340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2202      	movs	r2, #2
 800a348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a34c:	e01d      	b.n	800a38a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d108      	bne.n	800a366 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a354:	7bbb      	ldrb	r3, [r7, #14]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d105      	bne.n	800a366 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a35a:	7b7b      	ldrb	r3, [r7, #13]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d102      	bne.n	800a366 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a360:	7b3b      	ldrb	r3, [r7, #12]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d001      	beq.n	800a36a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e03e      	b.n	800a3e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2202      	movs	r2, #2
 800a36e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2202      	movs	r2, #2
 800a376:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2202      	movs	r2, #2
 800a37e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2202      	movs	r2, #2
 800a386:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d003      	beq.n	800a398 <HAL_TIM_Encoder_Start+0xc4>
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	2b04      	cmp	r3, #4
 800a394:	d008      	beq.n	800a3a8 <HAL_TIM_Encoder_Start+0xd4>
 800a396:	e00f      	b.n	800a3b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2201      	movs	r2, #1
 800a39e:	2100      	movs	r1, #0
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f001 f841 	bl	800b428 <TIM_CCxChannelCmd>
      break;
 800a3a6:	e016      	b.n	800a3d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	2104      	movs	r1, #4
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f001 f839 	bl	800b428 <TIM_CCxChannelCmd>
      break;
 800a3b6:	e00e      	b.n	800a3d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	2100      	movs	r1, #0
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f001 f831 	bl	800b428 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	2104      	movs	r1, #4
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f001 f82a 	bl	800b428 <TIM_CCxChannelCmd>
      break;
 800a3d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f042 0201 	orr.w	r2, r2, #1
 800a3e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	f003 0302 	and.w	r3, r3, #2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d020      	beq.n	800a454 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d01b      	beq.n	800a454 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f06f 0202 	mvn.w	r2, #2
 800a424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	f003 0303 	and.w	r3, r3, #3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fb5c 	bl	800aaf8 <HAL_TIM_IC_CaptureCallback>
 800a440:	e005      	b.n	800a44e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 fb4e 	bl	800aae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fb5f 	bl	800ab0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f003 0304 	and.w	r3, r3, #4
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d020      	beq.n	800a4a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f003 0304 	and.w	r3, r3, #4
 800a464:	2b00      	cmp	r3, #0
 800a466:	d01b      	beq.n	800a4a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f06f 0204 	mvn.w	r2, #4
 800a470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2202      	movs	r2, #2
 800a476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fb36 	bl	800aaf8 <HAL_TIM_IC_CaptureCallback>
 800a48c:	e005      	b.n	800a49a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fb28 	bl	800aae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fb39 	bl	800ab0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	f003 0308 	and.w	r3, r3, #8
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d020      	beq.n	800a4ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f003 0308 	and.w	r3, r3, #8
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d01b      	beq.n	800a4ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f06f 0208 	mvn.w	r2, #8
 800a4bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2204      	movs	r2, #4
 800a4c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	69db      	ldr	r3, [r3, #28]
 800a4ca:	f003 0303 	and.w	r3, r3, #3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d003      	beq.n	800a4da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fb10 	bl	800aaf8 <HAL_TIM_IC_CaptureCallback>
 800a4d8:	e005      	b.n	800a4e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fb02 	bl	800aae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fb13 	bl	800ab0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	f003 0310 	and.w	r3, r3, #16
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d020      	beq.n	800a538 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f003 0310 	and.w	r3, r3, #16
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d01b      	beq.n	800a538 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f06f 0210 	mvn.w	r2, #16
 800a508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2208      	movs	r2, #8
 800a50e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	69db      	ldr	r3, [r3, #28]
 800a516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d003      	beq.n	800a526 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 faea 	bl	800aaf8 <HAL_TIM_IC_CaptureCallback>
 800a524:	e005      	b.n	800a532 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fadc 	bl	800aae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 faed 	bl	800ab0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00c      	beq.n	800a55c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f003 0301 	and.w	r3, r3, #1
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d007      	beq.n	800a55c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f06f 0201 	mvn.w	r2, #1
 800a554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7f8 fae6 	bl	8002b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a562:	2b00      	cmp	r3, #0
 800a564:	d104      	bne.n	800a570 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00c      	beq.n	800a58a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a576:	2b00      	cmp	r3, #0
 800a578:	d007      	beq.n	800a58a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 f815 	bl	800b5b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00c      	beq.n	800a5ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d007      	beq.n	800a5ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a5a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f001 f80d 	bl	800b5c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00c      	beq.n	800a5d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d007      	beq.n	800a5d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 faa7 	bl	800ab20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f003 0320 	and.w	r3, r3, #32
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00c      	beq.n	800a5f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f003 0320 	and.w	r3, r3, #32
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d007      	beq.n	800a5f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f06f 0220 	mvn.w	r2, #32
 800a5ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 ffd5 	bl	800b5a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00c      	beq.n	800a61a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d007      	beq.n	800a61a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 ffe1 	bl	800b5dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00c      	beq.n	800a63e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d007      	beq.n	800a63e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 ffd9 	bl	800b5f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00c      	beq.n	800a662 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d007      	beq.n	800a662 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a65a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 ffd1 	bl	800b604 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00c      	beq.n	800a686 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a672:	2b00      	cmp	r3, #0
 800a674:	d007      	beq.n	800a686 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a67e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 ffc9 	bl	800b618 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a686:	bf00      	nop
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
	...

0800a690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d101      	bne.n	800a6ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	e0ff      	b.n	800a8ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b14      	cmp	r3, #20
 800a6ba:	f200 80f0 	bhi.w	800a89e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a6be:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c4:	0800a719 	.word	0x0800a719
 800a6c8:	0800a89f 	.word	0x0800a89f
 800a6cc:	0800a89f 	.word	0x0800a89f
 800a6d0:	0800a89f 	.word	0x0800a89f
 800a6d4:	0800a759 	.word	0x0800a759
 800a6d8:	0800a89f 	.word	0x0800a89f
 800a6dc:	0800a89f 	.word	0x0800a89f
 800a6e0:	0800a89f 	.word	0x0800a89f
 800a6e4:	0800a79b 	.word	0x0800a79b
 800a6e8:	0800a89f 	.word	0x0800a89f
 800a6ec:	0800a89f 	.word	0x0800a89f
 800a6f0:	0800a89f 	.word	0x0800a89f
 800a6f4:	0800a7db 	.word	0x0800a7db
 800a6f8:	0800a89f 	.word	0x0800a89f
 800a6fc:	0800a89f 	.word	0x0800a89f
 800a700:	0800a89f 	.word	0x0800a89f
 800a704:	0800a81d 	.word	0x0800a81d
 800a708:	0800a89f 	.word	0x0800a89f
 800a70c:	0800a89f 	.word	0x0800a89f
 800a710:	0800a89f 	.word	0x0800a89f
 800a714:	0800a85d 	.word	0x0800a85d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	68b9      	ldr	r1, [r7, #8]
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 fabc 	bl	800ac9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	699a      	ldr	r2, [r3, #24]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f042 0208 	orr.w	r2, r2, #8
 800a732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	699a      	ldr	r2, [r3, #24]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f022 0204 	bic.w	r2, r2, #4
 800a742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6999      	ldr	r1, [r3, #24]
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	691a      	ldr	r2, [r3, #16]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	430a      	orrs	r2, r1
 800a754:	619a      	str	r2, [r3, #24]
      break;
 800a756:	e0a5      	b.n	800a8a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68b9      	ldr	r1, [r7, #8]
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 fb36 	bl	800add0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	699a      	ldr	r2, [r3, #24]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	699a      	ldr	r2, [r3, #24]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6999      	ldr	r1, [r3, #24]
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	021a      	lsls	r2, r3, #8
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	430a      	orrs	r2, r1
 800a796:	619a      	str	r2, [r3, #24]
      break;
 800a798:	e084      	b.n	800a8a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68b9      	ldr	r1, [r7, #8]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 fba9 	bl	800aef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	69da      	ldr	r2, [r3, #28]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f042 0208 	orr.w	r2, r2, #8
 800a7b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	69da      	ldr	r2, [r3, #28]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f022 0204 	bic.w	r2, r2, #4
 800a7c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	69d9      	ldr	r1, [r3, #28]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	691a      	ldr	r2, [r3, #16]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	61da      	str	r2, [r3, #28]
      break;
 800a7d8:	e064      	b.n	800a8a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68b9      	ldr	r1, [r7, #8]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 fc1b 	bl	800b01c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	69da      	ldr	r2, [r3, #28]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	69da      	ldr	r2, [r3, #28]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	69d9      	ldr	r1, [r3, #28]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	021a      	lsls	r2, r3, #8
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	430a      	orrs	r2, r1
 800a818:	61da      	str	r2, [r3, #28]
      break;
 800a81a:	e043      	b.n	800a8a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68b9      	ldr	r1, [r7, #8]
 800a822:	4618      	mov	r0, r3
 800a824:	f000 fc8e 	bl	800b144 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f042 0208 	orr.w	r2, r2, #8
 800a836:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f022 0204 	bic.w	r2, r2, #4
 800a846:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	691a      	ldr	r2, [r3, #16]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	430a      	orrs	r2, r1
 800a858:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a85a:	e023      	b.n	800a8a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68b9      	ldr	r1, [r7, #8]
 800a862:	4618      	mov	r0, r3
 800a864:	f000 fcd8 	bl	800b218 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a876:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a886:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	021a      	lsls	r2, r3, #8
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	430a      	orrs	r2, r1
 800a89a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a89c:	e002      	b.n	800a8a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3718      	adds	r7, #24
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop

0800a8b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d101      	bne.n	800a8d4 <HAL_TIM_ConfigClockSource+0x1c>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	e0f6      	b.n	800aac2 <HAL_TIM_ConfigClockSource+0x20a>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a8f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a8f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a6f      	ldr	r2, [pc, #444]	@ (800aacc <HAL_TIM_ConfigClockSource+0x214>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	f000 80c1 	beq.w	800aa96 <HAL_TIM_ConfigClockSource+0x1de>
 800a914:	4a6d      	ldr	r2, [pc, #436]	@ (800aacc <HAL_TIM_ConfigClockSource+0x214>)
 800a916:	4293      	cmp	r3, r2
 800a918:	f200 80c6 	bhi.w	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a91c:	4a6c      	ldr	r2, [pc, #432]	@ (800aad0 <HAL_TIM_ConfigClockSource+0x218>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	f000 80b9 	beq.w	800aa96 <HAL_TIM_ConfigClockSource+0x1de>
 800a924:	4a6a      	ldr	r2, [pc, #424]	@ (800aad0 <HAL_TIM_ConfigClockSource+0x218>)
 800a926:	4293      	cmp	r3, r2
 800a928:	f200 80be 	bhi.w	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a92c:	4a69      	ldr	r2, [pc, #420]	@ (800aad4 <HAL_TIM_ConfigClockSource+0x21c>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	f000 80b1 	beq.w	800aa96 <HAL_TIM_ConfigClockSource+0x1de>
 800a934:	4a67      	ldr	r2, [pc, #412]	@ (800aad4 <HAL_TIM_ConfigClockSource+0x21c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	f200 80b6 	bhi.w	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a93c:	4a66      	ldr	r2, [pc, #408]	@ (800aad8 <HAL_TIM_ConfigClockSource+0x220>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	f000 80a9 	beq.w	800aa96 <HAL_TIM_ConfigClockSource+0x1de>
 800a944:	4a64      	ldr	r2, [pc, #400]	@ (800aad8 <HAL_TIM_ConfigClockSource+0x220>)
 800a946:	4293      	cmp	r3, r2
 800a948:	f200 80ae 	bhi.w	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a94c:	4a63      	ldr	r2, [pc, #396]	@ (800aadc <HAL_TIM_ConfigClockSource+0x224>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	f000 80a1 	beq.w	800aa96 <HAL_TIM_ConfigClockSource+0x1de>
 800a954:	4a61      	ldr	r2, [pc, #388]	@ (800aadc <HAL_TIM_ConfigClockSource+0x224>)
 800a956:	4293      	cmp	r3, r2
 800a958:	f200 80a6 	bhi.w	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a95c:	4a60      	ldr	r2, [pc, #384]	@ (800aae0 <HAL_TIM_ConfigClockSource+0x228>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	f000 8099 	beq.w	800aa96 <HAL_TIM_ConfigClockSource+0x1de>
 800a964:	4a5e      	ldr	r2, [pc, #376]	@ (800aae0 <HAL_TIM_ConfigClockSource+0x228>)
 800a966:	4293      	cmp	r3, r2
 800a968:	f200 809e 	bhi.w	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a96c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a970:	f000 8091 	beq.w	800aa96 <HAL_TIM_ConfigClockSource+0x1de>
 800a974:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a978:	f200 8096 	bhi.w	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a97c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a980:	f000 8089 	beq.w	800aa96 <HAL_TIM_ConfigClockSource+0x1de>
 800a984:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a988:	f200 808e 	bhi.w	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a98c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a990:	d03e      	beq.n	800aa10 <HAL_TIM_ConfigClockSource+0x158>
 800a992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a996:	f200 8087 	bhi.w	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a99a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a99e:	f000 8086 	beq.w	800aaae <HAL_TIM_ConfigClockSource+0x1f6>
 800a9a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9a6:	d87f      	bhi.n	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9a8:	2b70      	cmp	r3, #112	@ 0x70
 800a9aa:	d01a      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x12a>
 800a9ac:	2b70      	cmp	r3, #112	@ 0x70
 800a9ae:	d87b      	bhi.n	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9b0:	2b60      	cmp	r3, #96	@ 0x60
 800a9b2:	d050      	beq.n	800aa56 <HAL_TIM_ConfigClockSource+0x19e>
 800a9b4:	2b60      	cmp	r3, #96	@ 0x60
 800a9b6:	d877      	bhi.n	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9b8:	2b50      	cmp	r3, #80	@ 0x50
 800a9ba:	d03c      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x17e>
 800a9bc:	2b50      	cmp	r3, #80	@ 0x50
 800a9be:	d873      	bhi.n	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9c0:	2b40      	cmp	r3, #64	@ 0x40
 800a9c2:	d058      	beq.n	800aa76 <HAL_TIM_ConfigClockSource+0x1be>
 800a9c4:	2b40      	cmp	r3, #64	@ 0x40
 800a9c6:	d86f      	bhi.n	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9c8:	2b30      	cmp	r3, #48	@ 0x30
 800a9ca:	d064      	beq.n	800aa96 <HAL_TIM_ConfigClockSource+0x1de>
 800a9cc:	2b30      	cmp	r3, #48	@ 0x30
 800a9ce:	d86b      	bhi.n	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9d0:	2b20      	cmp	r3, #32
 800a9d2:	d060      	beq.n	800aa96 <HAL_TIM_ConfigClockSource+0x1de>
 800a9d4:	2b20      	cmp	r3, #32
 800a9d6:	d867      	bhi.n	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d05c      	beq.n	800aa96 <HAL_TIM_ConfigClockSource+0x1de>
 800a9dc:	2b10      	cmp	r3, #16
 800a9de:	d05a      	beq.n	800aa96 <HAL_TIM_ConfigClockSource+0x1de>
 800a9e0:	e062      	b.n	800aaa8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9f2:	f000 fcf9 	bl	800b3e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	609a      	str	r2, [r3, #8]
      break;
 800aa0e:	e04f      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa20:	f000 fce2 	bl	800b3e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	689a      	ldr	r2, [r3, #8]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa32:	609a      	str	r2, [r3, #8]
      break;
 800aa34:	e03c      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa42:	461a      	mov	r2, r3
 800aa44:	f000 fc54 	bl	800b2f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2150      	movs	r1, #80	@ 0x50
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 fcad 	bl	800b3ae <TIM_ITRx_SetConfig>
      break;
 800aa54:	e02c      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa62:	461a      	mov	r2, r3
 800aa64:	f000 fc73 	bl	800b34e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2160      	movs	r1, #96	@ 0x60
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f000 fc9d 	bl	800b3ae <TIM_ITRx_SetConfig>
      break;
 800aa74:	e01c      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa82:	461a      	mov	r2, r3
 800aa84:	f000 fc34 	bl	800b2f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2140      	movs	r1, #64	@ 0x40
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 fc8d 	bl	800b3ae <TIM_ITRx_SetConfig>
      break;
 800aa94:	e00c      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	f000 fc84 	bl	800b3ae <TIM_ITRx_SetConfig>
      break;
 800aaa6:	e003      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	73fb      	strb	r3, [r7, #15]
      break;
 800aaac:	e000      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800aaae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	00100070 	.word	0x00100070
 800aad0:	00100060 	.word	0x00100060
 800aad4:	00100050 	.word	0x00100050
 800aad8:	00100040 	.word	0x00100040
 800aadc:	00100030 	.word	0x00100030
 800aae0:	00100020 	.word	0x00100020

0800aae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a4c      	ldr	r2, [pc, #304]	@ (800ac78 <TIM_Base_SetConfig+0x144>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d017      	beq.n	800ab7c <TIM_Base_SetConfig+0x48>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab52:	d013      	beq.n	800ab7c <TIM_Base_SetConfig+0x48>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a49      	ldr	r2, [pc, #292]	@ (800ac7c <TIM_Base_SetConfig+0x148>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d00f      	beq.n	800ab7c <TIM_Base_SetConfig+0x48>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a48      	ldr	r2, [pc, #288]	@ (800ac80 <TIM_Base_SetConfig+0x14c>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d00b      	beq.n	800ab7c <TIM_Base_SetConfig+0x48>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a47      	ldr	r2, [pc, #284]	@ (800ac84 <TIM_Base_SetConfig+0x150>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d007      	beq.n	800ab7c <TIM_Base_SetConfig+0x48>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a46      	ldr	r2, [pc, #280]	@ (800ac88 <TIM_Base_SetConfig+0x154>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d003      	beq.n	800ab7c <TIM_Base_SetConfig+0x48>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a45      	ldr	r2, [pc, #276]	@ (800ac8c <TIM_Base_SetConfig+0x158>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d108      	bne.n	800ab8e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a39      	ldr	r2, [pc, #228]	@ (800ac78 <TIM_Base_SetConfig+0x144>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d023      	beq.n	800abde <TIM_Base_SetConfig+0xaa>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab9c:	d01f      	beq.n	800abde <TIM_Base_SetConfig+0xaa>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a36      	ldr	r2, [pc, #216]	@ (800ac7c <TIM_Base_SetConfig+0x148>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d01b      	beq.n	800abde <TIM_Base_SetConfig+0xaa>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a35      	ldr	r2, [pc, #212]	@ (800ac80 <TIM_Base_SetConfig+0x14c>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d017      	beq.n	800abde <TIM_Base_SetConfig+0xaa>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4a34      	ldr	r2, [pc, #208]	@ (800ac84 <TIM_Base_SetConfig+0x150>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d013      	beq.n	800abde <TIM_Base_SetConfig+0xaa>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a33      	ldr	r2, [pc, #204]	@ (800ac88 <TIM_Base_SetConfig+0x154>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d00f      	beq.n	800abde <TIM_Base_SetConfig+0xaa>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a33      	ldr	r2, [pc, #204]	@ (800ac90 <TIM_Base_SetConfig+0x15c>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d00b      	beq.n	800abde <TIM_Base_SetConfig+0xaa>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a32      	ldr	r2, [pc, #200]	@ (800ac94 <TIM_Base_SetConfig+0x160>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d007      	beq.n	800abde <TIM_Base_SetConfig+0xaa>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a31      	ldr	r2, [pc, #196]	@ (800ac98 <TIM_Base_SetConfig+0x164>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d003      	beq.n	800abde <TIM_Base_SetConfig+0xaa>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a2c      	ldr	r2, [pc, #176]	@ (800ac8c <TIM_Base_SetConfig+0x158>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d108      	bne.n	800abf0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4313      	orrs	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	695b      	ldr	r3, [r3, #20]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	689a      	ldr	r2, [r3, #8]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a18      	ldr	r2, [pc, #96]	@ (800ac78 <TIM_Base_SetConfig+0x144>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d013      	beq.n	800ac44 <TIM_Base_SetConfig+0x110>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a1a      	ldr	r2, [pc, #104]	@ (800ac88 <TIM_Base_SetConfig+0x154>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d00f      	beq.n	800ac44 <TIM_Base_SetConfig+0x110>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a1a      	ldr	r2, [pc, #104]	@ (800ac90 <TIM_Base_SetConfig+0x15c>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d00b      	beq.n	800ac44 <TIM_Base_SetConfig+0x110>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a19      	ldr	r2, [pc, #100]	@ (800ac94 <TIM_Base_SetConfig+0x160>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d007      	beq.n	800ac44 <TIM_Base_SetConfig+0x110>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a18      	ldr	r2, [pc, #96]	@ (800ac98 <TIM_Base_SetConfig+0x164>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d003      	beq.n	800ac44 <TIM_Base_SetConfig+0x110>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a13      	ldr	r2, [pc, #76]	@ (800ac8c <TIM_Base_SetConfig+0x158>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d103      	bne.n	800ac4c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	691a      	ldr	r2, [r3, #16]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	f003 0301 	and.w	r3, r3, #1
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d105      	bne.n	800ac6a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	f023 0201 	bic.w	r2, r3, #1
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	611a      	str	r2, [r3, #16]
  }
}
 800ac6a:	bf00      	nop
 800ac6c:	3714      	adds	r7, #20
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	40012c00 	.word	0x40012c00
 800ac7c:	40000400 	.word	0x40000400
 800ac80:	40000800 	.word	0x40000800
 800ac84:	40000c00 	.word	0x40000c00
 800ac88:	40013400 	.word	0x40013400
 800ac8c:	40015000 	.word	0x40015000
 800ac90:	40014000 	.word	0x40014000
 800ac94:	40014400 	.word	0x40014400
 800ac98:	40014800 	.word	0x40014800

0800ac9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a1b      	ldr	r3, [r3, #32]
 800acb0:	f023 0201 	bic.w	r2, r3, #1
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800acca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f023 0303 	bic.w	r3, r3, #3
 800acd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f023 0302 	bic.w	r3, r3, #2
 800ace8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a30      	ldr	r2, [pc, #192]	@ (800adb8 <TIM_OC1_SetConfig+0x11c>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d013      	beq.n	800ad24 <TIM_OC1_SetConfig+0x88>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a2f      	ldr	r2, [pc, #188]	@ (800adbc <TIM_OC1_SetConfig+0x120>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d00f      	beq.n	800ad24 <TIM_OC1_SetConfig+0x88>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a2e      	ldr	r2, [pc, #184]	@ (800adc0 <TIM_OC1_SetConfig+0x124>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d00b      	beq.n	800ad24 <TIM_OC1_SetConfig+0x88>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a2d      	ldr	r2, [pc, #180]	@ (800adc4 <TIM_OC1_SetConfig+0x128>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d007      	beq.n	800ad24 <TIM_OC1_SetConfig+0x88>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a2c      	ldr	r2, [pc, #176]	@ (800adc8 <TIM_OC1_SetConfig+0x12c>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d003      	beq.n	800ad24 <TIM_OC1_SetConfig+0x88>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a2b      	ldr	r2, [pc, #172]	@ (800adcc <TIM_OC1_SetConfig+0x130>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d10c      	bne.n	800ad3e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f023 0308 	bic.w	r3, r3, #8
 800ad2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f023 0304 	bic.w	r3, r3, #4
 800ad3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a1d      	ldr	r2, [pc, #116]	@ (800adb8 <TIM_OC1_SetConfig+0x11c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d013      	beq.n	800ad6e <TIM_OC1_SetConfig+0xd2>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a1c      	ldr	r2, [pc, #112]	@ (800adbc <TIM_OC1_SetConfig+0x120>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d00f      	beq.n	800ad6e <TIM_OC1_SetConfig+0xd2>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a1b      	ldr	r2, [pc, #108]	@ (800adc0 <TIM_OC1_SetConfig+0x124>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d00b      	beq.n	800ad6e <TIM_OC1_SetConfig+0xd2>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a1a      	ldr	r2, [pc, #104]	@ (800adc4 <TIM_OC1_SetConfig+0x128>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d007      	beq.n	800ad6e <TIM_OC1_SetConfig+0xd2>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a19      	ldr	r2, [pc, #100]	@ (800adc8 <TIM_OC1_SetConfig+0x12c>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d003      	beq.n	800ad6e <TIM_OC1_SetConfig+0xd2>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a18      	ldr	r2, [pc, #96]	@ (800adcc <TIM_OC1_SetConfig+0x130>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d111      	bne.n	800ad92 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	695b      	ldr	r3, [r3, #20]
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	621a      	str	r2, [r3, #32]
}
 800adac:	bf00      	nop
 800adae:	371c      	adds	r7, #28
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	40012c00 	.word	0x40012c00
 800adbc:	40013400 	.word	0x40013400
 800adc0:	40014000 	.word	0x40014000
 800adc4:	40014400 	.word	0x40014400
 800adc8:	40014800 	.word	0x40014800
 800adcc:	40015000 	.word	0x40015000

0800add0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	f023 0210 	bic.w	r2, r3, #16
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800adfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	021b      	lsls	r3, r3, #8
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	f023 0320 	bic.w	r3, r3, #32
 800ae1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	011b      	lsls	r3, r3, #4
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a2c      	ldr	r2, [pc, #176]	@ (800aee0 <TIM_OC2_SetConfig+0x110>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d007      	beq.n	800ae44 <TIM_OC2_SetConfig+0x74>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a2b      	ldr	r2, [pc, #172]	@ (800aee4 <TIM_OC2_SetConfig+0x114>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d003      	beq.n	800ae44 <TIM_OC2_SetConfig+0x74>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a2a      	ldr	r2, [pc, #168]	@ (800aee8 <TIM_OC2_SetConfig+0x118>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d10d      	bne.n	800ae60 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	011b      	lsls	r3, r3, #4
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a1f      	ldr	r2, [pc, #124]	@ (800aee0 <TIM_OC2_SetConfig+0x110>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d013      	beq.n	800ae90 <TIM_OC2_SetConfig+0xc0>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a1e      	ldr	r2, [pc, #120]	@ (800aee4 <TIM_OC2_SetConfig+0x114>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d00f      	beq.n	800ae90 <TIM_OC2_SetConfig+0xc0>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a1e      	ldr	r2, [pc, #120]	@ (800aeec <TIM_OC2_SetConfig+0x11c>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d00b      	beq.n	800ae90 <TIM_OC2_SetConfig+0xc0>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a1d      	ldr	r2, [pc, #116]	@ (800aef0 <TIM_OC2_SetConfig+0x120>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d007      	beq.n	800ae90 <TIM_OC2_SetConfig+0xc0>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a1c      	ldr	r2, [pc, #112]	@ (800aef4 <TIM_OC2_SetConfig+0x124>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d003      	beq.n	800ae90 <TIM_OC2_SetConfig+0xc0>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a17      	ldr	r2, [pc, #92]	@ (800aee8 <TIM_OC2_SetConfig+0x118>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d113      	bne.n	800aeb8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	693a      	ldr	r2, [r7, #16]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	621a      	str	r2, [r3, #32]
}
 800aed2:	bf00      	nop
 800aed4:	371c      	adds	r7, #28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	40012c00 	.word	0x40012c00
 800aee4:	40013400 	.word	0x40013400
 800aee8:	40015000 	.word	0x40015000
 800aeec:	40014000 	.word	0x40014000
 800aef0:	40014400 	.word	0x40014400
 800aef4:	40014800 	.word	0x40014800

0800aef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 0303 	bic.w	r3, r3, #3
 800af32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	021b      	lsls	r3, r3, #8
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	4313      	orrs	r3, r2
 800af50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a2b      	ldr	r2, [pc, #172]	@ (800b004 <TIM_OC3_SetConfig+0x10c>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d007      	beq.n	800af6a <TIM_OC3_SetConfig+0x72>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a2a      	ldr	r2, [pc, #168]	@ (800b008 <TIM_OC3_SetConfig+0x110>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d003      	beq.n	800af6a <TIM_OC3_SetConfig+0x72>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4a29      	ldr	r2, [pc, #164]	@ (800b00c <TIM_OC3_SetConfig+0x114>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d10d      	bne.n	800af86 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	021b      	lsls	r3, r3, #8
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a1e      	ldr	r2, [pc, #120]	@ (800b004 <TIM_OC3_SetConfig+0x10c>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d013      	beq.n	800afb6 <TIM_OC3_SetConfig+0xbe>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a1d      	ldr	r2, [pc, #116]	@ (800b008 <TIM_OC3_SetConfig+0x110>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d00f      	beq.n	800afb6 <TIM_OC3_SetConfig+0xbe>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a1d      	ldr	r2, [pc, #116]	@ (800b010 <TIM_OC3_SetConfig+0x118>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d00b      	beq.n	800afb6 <TIM_OC3_SetConfig+0xbe>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a1c      	ldr	r2, [pc, #112]	@ (800b014 <TIM_OC3_SetConfig+0x11c>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d007      	beq.n	800afb6 <TIM_OC3_SetConfig+0xbe>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a1b      	ldr	r2, [pc, #108]	@ (800b018 <TIM_OC3_SetConfig+0x120>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d003      	beq.n	800afb6 <TIM_OC3_SetConfig+0xbe>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a16      	ldr	r2, [pc, #88]	@ (800b00c <TIM_OC3_SetConfig+0x114>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d113      	bne.n	800afde <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800afbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800afc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	011b      	lsls	r3, r3, #4
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	4313      	orrs	r3, r2
 800afd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	011b      	lsls	r3, r3, #4
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	4313      	orrs	r3, r2
 800afdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	621a      	str	r2, [r3, #32]
}
 800aff8:	bf00      	nop
 800affa:	371c      	adds	r7, #28
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr
 800b004:	40012c00 	.word	0x40012c00
 800b008:	40013400 	.word	0x40013400
 800b00c:	40015000 	.word	0x40015000
 800b010:	40014000 	.word	0x40014000
 800b014:	40014400 	.word	0x40014400
 800b018:	40014800 	.word	0x40014800

0800b01c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a1b      	ldr	r3, [r3, #32]
 800b02a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	69db      	ldr	r3, [r3, #28]
 800b042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b04a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	021b      	lsls	r3, r3, #8
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	4313      	orrs	r3, r2
 800b062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b06a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	031b      	lsls	r3, r3, #12
 800b072:	697a      	ldr	r2, [r7, #20]
 800b074:	4313      	orrs	r3, r2
 800b076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a2c      	ldr	r2, [pc, #176]	@ (800b12c <TIM_OC4_SetConfig+0x110>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d007      	beq.n	800b090 <TIM_OC4_SetConfig+0x74>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a2b      	ldr	r2, [pc, #172]	@ (800b130 <TIM_OC4_SetConfig+0x114>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d003      	beq.n	800b090 <TIM_OC4_SetConfig+0x74>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a2a      	ldr	r2, [pc, #168]	@ (800b134 <TIM_OC4_SetConfig+0x118>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d10d      	bne.n	800b0ac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	031b      	lsls	r3, r3, #12
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a1f      	ldr	r2, [pc, #124]	@ (800b12c <TIM_OC4_SetConfig+0x110>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d013      	beq.n	800b0dc <TIM_OC4_SetConfig+0xc0>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a1e      	ldr	r2, [pc, #120]	@ (800b130 <TIM_OC4_SetConfig+0x114>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d00f      	beq.n	800b0dc <TIM_OC4_SetConfig+0xc0>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a1e      	ldr	r2, [pc, #120]	@ (800b138 <TIM_OC4_SetConfig+0x11c>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d00b      	beq.n	800b0dc <TIM_OC4_SetConfig+0xc0>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a1d      	ldr	r2, [pc, #116]	@ (800b13c <TIM_OC4_SetConfig+0x120>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d007      	beq.n	800b0dc <TIM_OC4_SetConfig+0xc0>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a1c      	ldr	r2, [pc, #112]	@ (800b140 <TIM_OC4_SetConfig+0x124>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d003      	beq.n	800b0dc <TIM_OC4_SetConfig+0xc0>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4a17      	ldr	r2, [pc, #92]	@ (800b134 <TIM_OC4_SetConfig+0x118>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d113      	bne.n	800b104 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b0ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	019b      	lsls	r3, r3, #6
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	019b      	lsls	r3, r3, #6
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	4313      	orrs	r3, r2
 800b102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	697a      	ldr	r2, [r7, #20]
 800b11c:	621a      	str	r2, [r3, #32]
}
 800b11e:	bf00      	nop
 800b120:	371c      	adds	r7, #28
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	40012c00 	.word	0x40012c00
 800b130:	40013400 	.word	0x40013400
 800b134:	40015000 	.word	0x40015000
 800b138:	40014000 	.word	0x40014000
 800b13c:	40014400 	.word	0x40014400
 800b140:	40014800 	.word	0x40014800

0800b144 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b144:	b480      	push	{r7}
 800b146:	b087      	sub	sp, #28
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a1b      	ldr	r3, [r3, #32]
 800b152:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6a1b      	ldr	r3, [r3, #32]
 800b158:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	4313      	orrs	r3, r2
 800b180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b188:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	041b      	lsls	r3, r3, #16
 800b190:	693a      	ldr	r2, [r7, #16]
 800b192:	4313      	orrs	r3, r2
 800b194:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a19      	ldr	r2, [pc, #100]	@ (800b200 <TIM_OC5_SetConfig+0xbc>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d013      	beq.n	800b1c6 <TIM_OC5_SetConfig+0x82>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a18      	ldr	r2, [pc, #96]	@ (800b204 <TIM_OC5_SetConfig+0xc0>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d00f      	beq.n	800b1c6 <TIM_OC5_SetConfig+0x82>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a17      	ldr	r2, [pc, #92]	@ (800b208 <TIM_OC5_SetConfig+0xc4>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d00b      	beq.n	800b1c6 <TIM_OC5_SetConfig+0x82>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a16      	ldr	r2, [pc, #88]	@ (800b20c <TIM_OC5_SetConfig+0xc8>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d007      	beq.n	800b1c6 <TIM_OC5_SetConfig+0x82>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a15      	ldr	r2, [pc, #84]	@ (800b210 <TIM_OC5_SetConfig+0xcc>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d003      	beq.n	800b1c6 <TIM_OC5_SetConfig+0x82>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a14      	ldr	r2, [pc, #80]	@ (800b214 <TIM_OC5_SetConfig+0xd0>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d109      	bne.n	800b1da <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	697a      	ldr	r2, [r7, #20]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	697a      	ldr	r2, [r7, #20]
 800b1de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	685a      	ldr	r2, [r3, #4]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	693a      	ldr	r2, [r7, #16]
 800b1f2:	621a      	str	r2, [r3, #32]
}
 800b1f4:	bf00      	nop
 800b1f6:	371c      	adds	r7, #28
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr
 800b200:	40012c00 	.word	0x40012c00
 800b204:	40013400 	.word	0x40013400
 800b208:	40014000 	.word	0x40014000
 800b20c:	40014400 	.word	0x40014400
 800b210:	40014800 	.word	0x40014800
 800b214:	40015000 	.word	0x40015000

0800b218 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b218:	b480      	push	{r7}
 800b21a:	b087      	sub	sp, #28
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a1b      	ldr	r3, [r3, #32]
 800b22c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b24a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	021b      	lsls	r3, r3, #8
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	4313      	orrs	r3, r2
 800b256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b25e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	051b      	lsls	r3, r3, #20
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	4313      	orrs	r3, r2
 800b26a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a1a      	ldr	r2, [pc, #104]	@ (800b2d8 <TIM_OC6_SetConfig+0xc0>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d013      	beq.n	800b29c <TIM_OC6_SetConfig+0x84>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a19      	ldr	r2, [pc, #100]	@ (800b2dc <TIM_OC6_SetConfig+0xc4>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d00f      	beq.n	800b29c <TIM_OC6_SetConfig+0x84>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a18      	ldr	r2, [pc, #96]	@ (800b2e0 <TIM_OC6_SetConfig+0xc8>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d00b      	beq.n	800b29c <TIM_OC6_SetConfig+0x84>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a17      	ldr	r2, [pc, #92]	@ (800b2e4 <TIM_OC6_SetConfig+0xcc>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d007      	beq.n	800b29c <TIM_OC6_SetConfig+0x84>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a16      	ldr	r2, [pc, #88]	@ (800b2e8 <TIM_OC6_SetConfig+0xd0>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d003      	beq.n	800b29c <TIM_OC6_SetConfig+0x84>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a15      	ldr	r2, [pc, #84]	@ (800b2ec <TIM_OC6_SetConfig+0xd4>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d109      	bne.n	800b2b0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b2a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	695b      	ldr	r3, [r3, #20]
 800b2a8:	029b      	lsls	r3, r3, #10
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	697a      	ldr	r2, [r7, #20]
 800b2b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	621a      	str	r2, [r3, #32]
}
 800b2ca:	bf00      	nop
 800b2cc:	371c      	adds	r7, #28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	40012c00 	.word	0x40012c00
 800b2dc:	40013400 	.word	0x40013400
 800b2e0:	40014000 	.word	0x40014000
 800b2e4:	40014400 	.word	0x40014400
 800b2e8:	40014800 	.word	0x40014800
 800b2ec:	40015000 	.word	0x40015000

0800b2f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b087      	sub	sp, #28
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6a1b      	ldr	r3, [r3, #32]
 800b300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	f023 0201 	bic.w	r2, r3, #1
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b31a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	011b      	lsls	r3, r3, #4
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	4313      	orrs	r3, r2
 800b324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f023 030a 	bic.w	r3, r3, #10
 800b32c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	4313      	orrs	r3, r2
 800b334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	697a      	ldr	r2, [r7, #20]
 800b340:	621a      	str	r2, [r3, #32]
}
 800b342:	bf00      	nop
 800b344:	371c      	adds	r7, #28
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b34e:	b480      	push	{r7}
 800b350:	b087      	sub	sp, #28
 800b352:	af00      	add	r7, sp, #0
 800b354:	60f8      	str	r0, [r7, #12]
 800b356:	60b9      	str	r1, [r7, #8]
 800b358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6a1b      	ldr	r3, [r3, #32]
 800b364:	f023 0210 	bic.w	r2, r3, #16
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	031b      	lsls	r3, r3, #12
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	4313      	orrs	r3, r2
 800b382:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b38a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	011b      	lsls	r3, r3, #4
 800b390:	697a      	ldr	r2, [r7, #20]
 800b392:	4313      	orrs	r3, r2
 800b394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	693a      	ldr	r2, [r7, #16]
 800b39a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	697a      	ldr	r2, [r7, #20]
 800b3a0:	621a      	str	r2, [r3, #32]
}
 800b3a2:	bf00      	nop
 800b3a4:	371c      	adds	r7, #28
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b3ae:	b480      	push	{r7}
 800b3b0:	b085      	sub	sp, #20
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b3c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3ca:	683a      	ldr	r2, [r7, #0]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	f043 0307 	orr.w	r3, r3, #7
 800b3d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	609a      	str	r2, [r3, #8]
}
 800b3dc:	bf00      	nop
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	021a      	lsls	r2, r3, #8
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	431a      	orrs	r2, r3
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4313      	orrs	r3, r2
 800b410:	697a      	ldr	r2, [r7, #20]
 800b412:	4313      	orrs	r3, r2
 800b414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	609a      	str	r2, [r3, #8]
}
 800b41c:	bf00      	nop
 800b41e:	371c      	adds	r7, #28
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	f003 031f 	and.w	r3, r3, #31
 800b43a:	2201      	movs	r2, #1
 800b43c:	fa02 f303 	lsl.w	r3, r2, r3
 800b440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6a1a      	ldr	r2, [r3, #32]
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	43db      	mvns	r3, r3
 800b44a:	401a      	ands	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6a1a      	ldr	r2, [r3, #32]
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	f003 031f 	and.w	r3, r3, #31
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	fa01 f303 	lsl.w	r3, r1, r3
 800b460:	431a      	orrs	r2, r3
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	621a      	str	r2, [r3, #32]
}
 800b466:	bf00      	nop
 800b468:	371c      	adds	r7, #28
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
	...

0800b474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b484:	2b01      	cmp	r3, #1
 800b486:	d101      	bne.n	800b48c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b488:	2302      	movs	r3, #2
 800b48a:	e074      	b.n	800b576 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2202      	movs	r2, #2
 800b498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a34      	ldr	r2, [pc, #208]	@ (800b584 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d009      	beq.n	800b4ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a33      	ldr	r2, [pc, #204]	@ (800b588 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d004      	beq.n	800b4ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a31      	ldr	r2, [pc, #196]	@ (800b58c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d108      	bne.n	800b4dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b4d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b4e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a21      	ldr	r2, [pc, #132]	@ (800b584 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d022      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b50c:	d01d      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a1f      	ldr	r2, [pc, #124]	@ (800b590 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d018      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a1d      	ldr	r2, [pc, #116]	@ (800b594 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d013      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a1c      	ldr	r2, [pc, #112]	@ (800b598 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d00e      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a15      	ldr	r2, [pc, #84]	@ (800b588 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d009      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a18      	ldr	r2, [pc, #96]	@ (800b59c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d004      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a11      	ldr	r2, [pc, #68]	@ (800b58c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d10c      	bne.n	800b564 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	4313      	orrs	r3, r2
 800b55a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3714      	adds	r7, #20
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	40012c00 	.word	0x40012c00
 800b588:	40013400 	.word	0x40013400
 800b58c:	40015000 	.word	0x40015000
 800b590:	40000400 	.word	0x40000400
 800b594:	40000800 	.word	0x40000800
 800b598:	40000c00 	.word	0x40000c00
 800b59c:	40014000 	.word	0x40014000

0800b5a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b5f8:	bf00      	nop
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b60c:	bf00      	nop
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d101      	bne.n	800b63e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e042      	b.n	800b6c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b644:	2b00      	cmp	r3, #0
 800b646:	d106      	bne.n	800b656 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f7f9 fe8b 	bl	800536c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2224      	movs	r2, #36	@ 0x24
 800b65a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f022 0201 	bic.w	r2, r2, #1
 800b66c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b672:	2b00      	cmp	r3, #0
 800b674:	d002      	beq.n	800b67c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 ff60 	bl	800c53c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fc61 	bl	800bf44 <UART_SetConfig>
 800b682:	4603      	mov	r3, r0
 800b684:	2b01      	cmp	r3, #1
 800b686:	d101      	bne.n	800b68c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b688:	2301      	movs	r3, #1
 800b68a:	e01b      	b.n	800b6c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	685a      	ldr	r2, [r3, #4]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b69a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	689a      	ldr	r2, [r3, #8]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b6aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f042 0201 	orr.w	r2, r2, #1
 800b6ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 ffdf 	bl	800c680 <UART_CheckIdleState>
 800b6c2:	4603      	mov	r3, r0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08a      	sub	sp, #40	@ 0x28
 800b6d0:	af02      	add	r7, sp, #8
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	603b      	str	r3, [r7, #0]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6e2:	2b20      	cmp	r3, #32
 800b6e4:	d17b      	bne.n	800b7de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <HAL_UART_Transmit+0x26>
 800b6ec:	88fb      	ldrh	r3, [r7, #6]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d101      	bne.n	800b6f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e074      	b.n	800b7e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2221      	movs	r2, #33	@ 0x21
 800b702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b706:	f7f9 ff1f 	bl	8005548 <HAL_GetTick>
 800b70a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	88fa      	ldrh	r2, [r7, #6]
 800b710:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	88fa      	ldrh	r2, [r7, #6]
 800b718:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b724:	d108      	bne.n	800b738 <HAL_UART_Transmit+0x6c>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d104      	bne.n	800b738 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b72e:	2300      	movs	r3, #0
 800b730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	61bb      	str	r3, [r7, #24]
 800b736:	e003      	b.n	800b740 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b73c:	2300      	movs	r3, #0
 800b73e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b740:	e030      	b.n	800b7a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	2200      	movs	r2, #0
 800b74a:	2180      	movs	r1, #128	@ 0x80
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f001 f841 	bl	800c7d4 <UART_WaitOnFlagUntilTimeout>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d005      	beq.n	800b764 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2220      	movs	r2, #32
 800b75c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b760:	2303      	movs	r3, #3
 800b762:	e03d      	b.n	800b7e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10b      	bne.n	800b782 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	881b      	ldrh	r3, [r3, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b778:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	3302      	adds	r3, #2
 800b77e:	61bb      	str	r3, [r7, #24]
 800b780:	e007      	b.n	800b792 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	781a      	ldrb	r2, [r3, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	3301      	adds	r3, #1
 800b790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b798:	b29b      	uxth	r3, r3
 800b79a:	3b01      	subs	r3, #1
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d1c8      	bne.n	800b742 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	2140      	movs	r1, #64	@ 0x40
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f001 f80a 	bl	800c7d4 <UART_WaitOnFlagUntilTimeout>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d005      	beq.n	800b7d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b7ce:	2303      	movs	r3, #3
 800b7d0:	e006      	b.n	800b7e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2220      	movs	r2, #32
 800b7d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	e000      	b.n	800b7e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b7de:	2302      	movs	r3, #2
  }
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3720      	adds	r7, #32
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b08a      	sub	sp, #40	@ 0x28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7fc:	2b20      	cmp	r3, #32
 800b7fe:	d137      	bne.n	800b870 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d002      	beq.n	800b80c <HAL_UART_Receive_IT+0x24>
 800b806:	88fb      	ldrh	r3, [r7, #6]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e030      	b.n	800b872 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2200      	movs	r2, #0
 800b814:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a18      	ldr	r2, [pc, #96]	@ (800b87c <HAL_UART_Receive_IT+0x94>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d01f      	beq.n	800b860 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d018      	beq.n	800b860 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	e853 3f00 	ldrex	r3, [r3]
 800b83a:	613b      	str	r3, [r7, #16]
   return(result);
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b842:	627b      	str	r3, [r7, #36]	@ 0x24
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	461a      	mov	r2, r3
 800b84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84c:	623b      	str	r3, [r7, #32]
 800b84e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b850:	69f9      	ldr	r1, [r7, #28]
 800b852:	6a3a      	ldr	r2, [r7, #32]
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	61bb      	str	r3, [r7, #24]
   return(result);
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e6      	bne.n	800b82e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b860:	88fb      	ldrh	r3, [r7, #6]
 800b862:	461a      	mov	r2, r3
 800b864:	68b9      	ldr	r1, [r7, #8]
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f001 f822 	bl	800c8b0 <UART_Start_Receive_IT>
 800b86c:	4603      	mov	r3, r0
 800b86e:	e000      	b.n	800b872 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b870:	2302      	movs	r3, #2
  }
}
 800b872:	4618      	mov	r0, r3
 800b874:	3728      	adds	r7, #40	@ 0x28
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	40008000 	.word	0x40008000

0800b880 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b0ba      	sub	sp, #232	@ 0xe8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	69db      	ldr	r3, [r3, #28]
 800b88e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b8a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b8aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b8ae:	4013      	ands	r3, r2
 800b8b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b8b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d11b      	bne.n	800b8f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8c0:	f003 0320 	and.w	r3, r3, #32
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d015      	beq.n	800b8f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8cc:	f003 0320 	and.w	r3, r3, #32
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d105      	bne.n	800b8e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b8d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d009      	beq.n	800b8f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 8300 	beq.w	800beea <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	4798      	blx	r3
      }
      return;
 800b8f2:	e2fa      	b.n	800beea <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b8f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f000 8123 	beq.w	800bb44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b8fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b902:	4b8d      	ldr	r3, [pc, #564]	@ (800bb38 <HAL_UART_IRQHandler+0x2b8>)
 800b904:	4013      	ands	r3, r2
 800b906:	2b00      	cmp	r3, #0
 800b908:	d106      	bne.n	800b918 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b90a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b90e:	4b8b      	ldr	r3, [pc, #556]	@ (800bb3c <HAL_UART_IRQHandler+0x2bc>)
 800b910:	4013      	ands	r3, r2
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 8116 	beq.w	800bb44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b91c:	f003 0301 	and.w	r3, r3, #1
 800b920:	2b00      	cmp	r3, #0
 800b922:	d011      	beq.n	800b948 <HAL_UART_IRQHandler+0xc8>
 800b924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00b      	beq.n	800b948 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2201      	movs	r2, #1
 800b936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b93e:	f043 0201 	orr.w	r2, r3, #1
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b94c:	f003 0302 	and.w	r3, r3, #2
 800b950:	2b00      	cmp	r3, #0
 800b952:	d011      	beq.n	800b978 <HAL_UART_IRQHandler+0xf8>
 800b954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b958:	f003 0301 	and.w	r3, r3, #1
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00b      	beq.n	800b978 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2202      	movs	r2, #2
 800b966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b96e:	f043 0204 	orr.w	r2, r3, #4
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b00      	cmp	r3, #0
 800b982:	d011      	beq.n	800b9a8 <HAL_UART_IRQHandler+0x128>
 800b984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00b      	beq.n	800b9a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2204      	movs	r2, #4
 800b996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b99e:	f043 0202 	orr.w	r2, r3, #2
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9ac:	f003 0308 	and.w	r3, r3, #8
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d017      	beq.n	800b9e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b9b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9b8:	f003 0320 	and.w	r3, r3, #32
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d105      	bne.n	800b9cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b9c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b9c4:	4b5c      	ldr	r3, [pc, #368]	@ (800bb38 <HAL_UART_IRQHandler+0x2b8>)
 800b9c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00b      	beq.n	800b9e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2208      	movs	r2, #8
 800b9d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9da:	f043 0208 	orr.w	r2, r3, #8
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d012      	beq.n	800ba16 <HAL_UART_IRQHandler+0x196>
 800b9f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00c      	beq.n	800ba16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba0c:	f043 0220 	orr.w	r2, r3, #32
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f000 8266 	beq.w	800beee <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba26:	f003 0320 	and.w	r3, r3, #32
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d013      	beq.n	800ba56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba32:	f003 0320 	and.w	r3, r3, #32
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d105      	bne.n	800ba46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d007      	beq.n	800ba56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba6a:	2b40      	cmp	r3, #64	@ 0x40
 800ba6c:	d005      	beq.n	800ba7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ba6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ba72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d054      	beq.n	800bb24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f001 f83a 	bl	800caf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba8a:	2b40      	cmp	r3, #64	@ 0x40
 800ba8c:	d146      	bne.n	800bb1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	3308      	adds	r3, #8
 800ba94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba9c:	e853 3f00 	ldrex	r3, [r3]
 800baa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800baa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800baa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800baac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	3308      	adds	r3, #8
 800bab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800baba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800babe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800baca:	e841 2300 	strex	r3, r2, [r1]
 800bace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1d9      	bne.n	800ba8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d017      	beq.n	800bb14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baea:	4a15      	ldr	r2, [pc, #84]	@ (800bb40 <HAL_UART_IRQHandler+0x2c0>)
 800baec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fb fb45 	bl	8007184 <HAL_DMA_Abort_IT>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d019      	beq.n	800bb34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bb0e:	4610      	mov	r0, r2
 800bb10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb12:	e00f      	b.n	800bb34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f9ff 	bl	800bf18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb1a:	e00b      	b.n	800bb34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f9fb 	bl	800bf18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb22:	e007      	b.n	800bb34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 f9f7 	bl	800bf18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bb32:	e1dc      	b.n	800beee <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb34:	bf00      	nop
    return;
 800bb36:	e1da      	b.n	800beee <HAL_UART_IRQHandler+0x66e>
 800bb38:	10000001 	.word	0x10000001
 800bb3c:	04000120 	.word	0x04000120
 800bb40:	0800cbc1 	.word	0x0800cbc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	f040 8170 	bne.w	800be2e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bb4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb52:	f003 0310 	and.w	r3, r3, #16
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	f000 8169 	beq.w	800be2e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bb5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb60:	f003 0310 	and.w	r3, r3, #16
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 8162 	beq.w	800be2e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2210      	movs	r2, #16
 800bb70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb7c:	2b40      	cmp	r3, #64	@ 0x40
 800bb7e:	f040 80d8 	bne.w	800bd32 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 80af 	beq.w	800bcf8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bba0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bba4:	429a      	cmp	r2, r3
 800bba6:	f080 80a7 	bcs.w	800bcf8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bbb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f003 0320 	and.w	r3, r3, #32
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f040 8087 	bne.w	800bcd6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bbd4:	e853 3f00 	ldrex	r3, [r3]
 800bbd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bbdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bbe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	461a      	mov	r2, r3
 800bbee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bbf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bbf6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bbfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bc02:	e841 2300 	strex	r3, r2, [r1]
 800bc06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bc0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1da      	bne.n	800bbc8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3308      	adds	r3, #8
 800bc18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc1c:	e853 3f00 	ldrex	r3, [r3]
 800bc20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bc22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc24:	f023 0301 	bic.w	r3, r3, #1
 800bc28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3308      	adds	r3, #8
 800bc32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bc36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bc3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bc3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bc42:	e841 2300 	strex	r3, r2, [r1]
 800bc46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bc48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1e1      	bne.n	800bc12 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3308      	adds	r3, #8
 800bc54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc58:	e853 3f00 	ldrex	r3, [r3]
 800bc5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bc5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bc72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bc74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bc78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bc7a:	e841 2300 	strex	r3, r2, [r1]
 800bc7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bc80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1e3      	bne.n	800bc4e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2220      	movs	r2, #32
 800bc8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc9c:	e853 3f00 	ldrex	r3, [r3]
 800bca0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bca4:	f023 0310 	bic.w	r3, r3, #16
 800bca8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bcbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bcbe:	e841 2300 	strex	r3, r2, [r1]
 800bcc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bcc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1e4      	bne.n	800bc94 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7fb f9fe 	bl	80070d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2202      	movs	r2, #2
 800bcda:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f91b 	bl	800bf2c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bcf6:	e0fc      	b.n	800bef2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bcfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bd02:	429a      	cmp	r2, r3
 800bd04:	f040 80f5 	bne.w	800bef2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f003 0320 	and.w	r3, r3, #32
 800bd16:	2b20      	cmp	r3, #32
 800bd18:	f040 80eb 	bne.w	800bef2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2202      	movs	r2, #2
 800bd20:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bd28:	4619      	mov	r1, r3
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f8fe 	bl	800bf2c <HAL_UARTEx_RxEventCallback>
      return;
 800bd30:	e0df      	b.n	800bef2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	1ad3      	subs	r3, r2, r3
 800bd42:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 80d1 	beq.w	800bef6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800bd54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f000 80cc 	beq.w	800bef6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd66:	e853 3f00 	ldrex	r3, [r3]
 800bd6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd80:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd88:	e841 2300 	strex	r3, r2, [r1]
 800bd8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1e4      	bne.n	800bd5e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	3308      	adds	r3, #8
 800bd9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9e:	e853 3f00 	ldrex	r3, [r3]
 800bda2:	623b      	str	r3, [r7, #32]
   return(result);
 800bda4:	6a3b      	ldr	r3, [r7, #32]
 800bda6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bdaa:	f023 0301 	bic.w	r3, r3, #1
 800bdae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	3308      	adds	r3, #8
 800bdb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bdbc:	633a      	str	r2, [r7, #48]	@ 0x30
 800bdbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bdc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdc4:	e841 2300 	strex	r3, r2, [r1]
 800bdc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bdca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1e1      	bne.n	800bd94 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	e853 3f00 	ldrex	r3, [r3]
 800bdf0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f023 0310 	bic.w	r3, r3, #16
 800bdf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	461a      	mov	r2, r3
 800be02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be06:	61fb      	str	r3, [r7, #28]
 800be08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0a:	69b9      	ldr	r1, [r7, #24]
 800be0c:	69fa      	ldr	r2, [r7, #28]
 800be0e:	e841 2300 	strex	r3, r2, [r1]
 800be12:	617b      	str	r3, [r7, #20]
   return(result);
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1e4      	bne.n	800bde4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2202      	movs	r2, #2
 800be1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be24:	4619      	mov	r1, r3
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f880 	bl	800bf2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be2c:	e063      	b.n	800bef6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00e      	beq.n	800be58 <HAL_UART_IRQHandler+0x5d8>
 800be3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be42:	2b00      	cmp	r3, #0
 800be44:	d008      	beq.n	800be58 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800be4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f001 fc13 	bl	800d67c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be56:	e051      	b.n	800befc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800be58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be60:	2b00      	cmp	r3, #0
 800be62:	d014      	beq.n	800be8e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800be64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d105      	bne.n	800be7c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d008      	beq.n	800be8e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be80:	2b00      	cmp	r3, #0
 800be82:	d03a      	beq.n	800befa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	4798      	blx	r3
    }
    return;
 800be8c:	e035      	b.n	800befa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800be8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be96:	2b00      	cmp	r3, #0
 800be98:	d009      	beq.n	800beae <HAL_UART_IRQHandler+0x62e>
 800be9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d003      	beq.n	800beae <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fe9c 	bl	800cbe4 <UART_EndTransmit_IT>
    return;
 800beac:	e026      	b.n	800befc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800beae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800beb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d009      	beq.n	800bece <HAL_UART_IRQHandler+0x64e>
 800beba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bebe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f001 fbec 	bl	800d6a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800becc:	e016      	b.n	800befc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bed2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d010      	beq.n	800befc <HAL_UART_IRQHandler+0x67c>
 800beda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	da0c      	bge.n	800befc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f001 fbd4 	bl	800d690 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bee8:	e008      	b.n	800befc <HAL_UART_IRQHandler+0x67c>
      return;
 800beea:	bf00      	nop
 800beec:	e006      	b.n	800befc <HAL_UART_IRQHandler+0x67c>
    return;
 800beee:	bf00      	nop
 800bef0:	e004      	b.n	800befc <HAL_UART_IRQHandler+0x67c>
      return;
 800bef2:	bf00      	nop
 800bef4:	e002      	b.n	800befc <HAL_UART_IRQHandler+0x67c>
      return;
 800bef6:	bf00      	nop
 800bef8:	e000      	b.n	800befc <HAL_UART_IRQHandler+0x67c>
    return;
 800befa:	bf00      	nop
  }
}
 800befc:	37e8      	adds	r7, #232	@ 0xe8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop

0800bf04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bf0c:	bf00      	nop
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	460b      	mov	r3, r1
 800bf36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf38:	bf00      	nop
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf48:	b08c      	sub	sp, #48	@ 0x30
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	689a      	ldr	r2, [r3, #8]
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	691b      	ldr	r3, [r3, #16]
 800bf5c:	431a      	orrs	r2, r3
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	695b      	ldr	r3, [r3, #20]
 800bf62:	431a      	orrs	r2, r3
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	69db      	ldr	r3, [r3, #28]
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	4baa      	ldr	r3, [pc, #680]	@ (800c21c <UART_SetConfig+0x2d8>)
 800bf74:	4013      	ands	r3, r2
 800bf76:	697a      	ldr	r2, [r7, #20]
 800bf78:	6812      	ldr	r2, [r2, #0]
 800bf7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf7c:	430b      	orrs	r3, r1
 800bf7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	68da      	ldr	r2, [r3, #12]
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	430a      	orrs	r2, r1
 800bf94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a9f      	ldr	r2, [pc, #636]	@ (800c220 <UART_SetConfig+0x2dc>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d004      	beq.n	800bfb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	6a1b      	ldr	r3, [r3, #32]
 800bfaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfac:	4313      	orrs	r3, r2
 800bfae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800bfba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	6812      	ldr	r2, [r2, #0]
 800bfc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfc4:	430b      	orrs	r3, r1
 800bfc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfce:	f023 010f 	bic.w	r1, r3, #15
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a90      	ldr	r2, [pc, #576]	@ (800c224 <UART_SetConfig+0x2e0>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d125      	bne.n	800c034 <UART_SetConfig+0xf0>
 800bfe8:	4b8f      	ldr	r3, [pc, #572]	@ (800c228 <UART_SetConfig+0x2e4>)
 800bfea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfee:	f003 0303 	and.w	r3, r3, #3
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	d81a      	bhi.n	800c02c <UART_SetConfig+0xe8>
 800bff6:	a201      	add	r2, pc, #4	@ (adr r2, 800bffc <UART_SetConfig+0xb8>)
 800bff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffc:	0800c00d 	.word	0x0800c00d
 800c000:	0800c01d 	.word	0x0800c01d
 800c004:	0800c015 	.word	0x0800c015
 800c008:	0800c025 	.word	0x0800c025
 800c00c:	2301      	movs	r3, #1
 800c00e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c012:	e116      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c014:	2302      	movs	r3, #2
 800c016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c01a:	e112      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c01c:	2304      	movs	r3, #4
 800c01e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c022:	e10e      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c024:	2308      	movs	r3, #8
 800c026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c02a:	e10a      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c02c:	2310      	movs	r3, #16
 800c02e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c032:	e106      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a7c      	ldr	r2, [pc, #496]	@ (800c22c <UART_SetConfig+0x2e8>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d138      	bne.n	800c0b0 <UART_SetConfig+0x16c>
 800c03e:	4b7a      	ldr	r3, [pc, #488]	@ (800c228 <UART_SetConfig+0x2e4>)
 800c040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c044:	f003 030c 	and.w	r3, r3, #12
 800c048:	2b0c      	cmp	r3, #12
 800c04a:	d82d      	bhi.n	800c0a8 <UART_SetConfig+0x164>
 800c04c:	a201      	add	r2, pc, #4	@ (adr r2, 800c054 <UART_SetConfig+0x110>)
 800c04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c052:	bf00      	nop
 800c054:	0800c089 	.word	0x0800c089
 800c058:	0800c0a9 	.word	0x0800c0a9
 800c05c:	0800c0a9 	.word	0x0800c0a9
 800c060:	0800c0a9 	.word	0x0800c0a9
 800c064:	0800c099 	.word	0x0800c099
 800c068:	0800c0a9 	.word	0x0800c0a9
 800c06c:	0800c0a9 	.word	0x0800c0a9
 800c070:	0800c0a9 	.word	0x0800c0a9
 800c074:	0800c091 	.word	0x0800c091
 800c078:	0800c0a9 	.word	0x0800c0a9
 800c07c:	0800c0a9 	.word	0x0800c0a9
 800c080:	0800c0a9 	.word	0x0800c0a9
 800c084:	0800c0a1 	.word	0x0800c0a1
 800c088:	2300      	movs	r3, #0
 800c08a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c08e:	e0d8      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c090:	2302      	movs	r3, #2
 800c092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c096:	e0d4      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c098:	2304      	movs	r3, #4
 800c09a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c09e:	e0d0      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c0a0:	2308      	movs	r3, #8
 800c0a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0a6:	e0cc      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c0a8:	2310      	movs	r3, #16
 800c0aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0ae:	e0c8      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a5e      	ldr	r2, [pc, #376]	@ (800c230 <UART_SetConfig+0x2ec>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d125      	bne.n	800c106 <UART_SetConfig+0x1c2>
 800c0ba:	4b5b      	ldr	r3, [pc, #364]	@ (800c228 <UART_SetConfig+0x2e4>)
 800c0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c0c4:	2b30      	cmp	r3, #48	@ 0x30
 800c0c6:	d016      	beq.n	800c0f6 <UART_SetConfig+0x1b2>
 800c0c8:	2b30      	cmp	r3, #48	@ 0x30
 800c0ca:	d818      	bhi.n	800c0fe <UART_SetConfig+0x1ba>
 800c0cc:	2b20      	cmp	r3, #32
 800c0ce:	d00a      	beq.n	800c0e6 <UART_SetConfig+0x1a2>
 800c0d0:	2b20      	cmp	r3, #32
 800c0d2:	d814      	bhi.n	800c0fe <UART_SetConfig+0x1ba>
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d002      	beq.n	800c0de <UART_SetConfig+0x19a>
 800c0d8:	2b10      	cmp	r3, #16
 800c0da:	d008      	beq.n	800c0ee <UART_SetConfig+0x1aa>
 800c0dc:	e00f      	b.n	800c0fe <UART_SetConfig+0x1ba>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0e4:	e0ad      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0ec:	e0a9      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c0ee:	2304      	movs	r3, #4
 800c0f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0f4:	e0a5      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c0f6:	2308      	movs	r3, #8
 800c0f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0fc:	e0a1      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c0fe:	2310      	movs	r3, #16
 800c100:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c104:	e09d      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a4a      	ldr	r2, [pc, #296]	@ (800c234 <UART_SetConfig+0x2f0>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d125      	bne.n	800c15c <UART_SetConfig+0x218>
 800c110:	4b45      	ldr	r3, [pc, #276]	@ (800c228 <UART_SetConfig+0x2e4>)
 800c112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c116:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c11a:	2bc0      	cmp	r3, #192	@ 0xc0
 800c11c:	d016      	beq.n	800c14c <UART_SetConfig+0x208>
 800c11e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c120:	d818      	bhi.n	800c154 <UART_SetConfig+0x210>
 800c122:	2b80      	cmp	r3, #128	@ 0x80
 800c124:	d00a      	beq.n	800c13c <UART_SetConfig+0x1f8>
 800c126:	2b80      	cmp	r3, #128	@ 0x80
 800c128:	d814      	bhi.n	800c154 <UART_SetConfig+0x210>
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d002      	beq.n	800c134 <UART_SetConfig+0x1f0>
 800c12e:	2b40      	cmp	r3, #64	@ 0x40
 800c130:	d008      	beq.n	800c144 <UART_SetConfig+0x200>
 800c132:	e00f      	b.n	800c154 <UART_SetConfig+0x210>
 800c134:	2300      	movs	r3, #0
 800c136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c13a:	e082      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c13c:	2302      	movs	r3, #2
 800c13e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c142:	e07e      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c144:	2304      	movs	r3, #4
 800c146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c14a:	e07a      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c14c:	2308      	movs	r3, #8
 800c14e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c152:	e076      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c154:	2310      	movs	r3, #16
 800c156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c15a:	e072      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a35      	ldr	r2, [pc, #212]	@ (800c238 <UART_SetConfig+0x2f4>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d12a      	bne.n	800c1bc <UART_SetConfig+0x278>
 800c166:	4b30      	ldr	r3, [pc, #192]	@ (800c228 <UART_SetConfig+0x2e4>)
 800c168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c16c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c174:	d01a      	beq.n	800c1ac <UART_SetConfig+0x268>
 800c176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c17a:	d81b      	bhi.n	800c1b4 <UART_SetConfig+0x270>
 800c17c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c180:	d00c      	beq.n	800c19c <UART_SetConfig+0x258>
 800c182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c186:	d815      	bhi.n	800c1b4 <UART_SetConfig+0x270>
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <UART_SetConfig+0x250>
 800c18c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c190:	d008      	beq.n	800c1a4 <UART_SetConfig+0x260>
 800c192:	e00f      	b.n	800c1b4 <UART_SetConfig+0x270>
 800c194:	2300      	movs	r3, #0
 800c196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c19a:	e052      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c19c:	2302      	movs	r3, #2
 800c19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1a2:	e04e      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c1a4:	2304      	movs	r3, #4
 800c1a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1aa:	e04a      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c1ac:	2308      	movs	r3, #8
 800c1ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1b2:	e046      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c1b4:	2310      	movs	r3, #16
 800c1b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1ba:	e042      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a17      	ldr	r2, [pc, #92]	@ (800c220 <UART_SetConfig+0x2dc>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d13a      	bne.n	800c23c <UART_SetConfig+0x2f8>
 800c1c6:	4b18      	ldr	r3, [pc, #96]	@ (800c228 <UART_SetConfig+0x2e4>)
 800c1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c1d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1d4:	d01a      	beq.n	800c20c <UART_SetConfig+0x2c8>
 800c1d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1da:	d81b      	bhi.n	800c214 <UART_SetConfig+0x2d0>
 800c1dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1e0:	d00c      	beq.n	800c1fc <UART_SetConfig+0x2b8>
 800c1e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1e6:	d815      	bhi.n	800c214 <UART_SetConfig+0x2d0>
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d003      	beq.n	800c1f4 <UART_SetConfig+0x2b0>
 800c1ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1f0:	d008      	beq.n	800c204 <UART_SetConfig+0x2c0>
 800c1f2:	e00f      	b.n	800c214 <UART_SetConfig+0x2d0>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1fa:	e022      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c202:	e01e      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c204:	2304      	movs	r3, #4
 800c206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c20a:	e01a      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c20c:	2308      	movs	r3, #8
 800c20e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c212:	e016      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c214:	2310      	movs	r3, #16
 800c216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c21a:	e012      	b.n	800c242 <UART_SetConfig+0x2fe>
 800c21c:	cfff69f3 	.word	0xcfff69f3
 800c220:	40008000 	.word	0x40008000
 800c224:	40013800 	.word	0x40013800
 800c228:	40021000 	.word	0x40021000
 800c22c:	40004400 	.word	0x40004400
 800c230:	40004800 	.word	0x40004800
 800c234:	40004c00 	.word	0x40004c00
 800c238:	40005000 	.word	0x40005000
 800c23c:	2310      	movs	r3, #16
 800c23e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4aae      	ldr	r2, [pc, #696]	@ (800c500 <UART_SetConfig+0x5bc>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	f040 8097 	bne.w	800c37c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c24e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c252:	2b08      	cmp	r3, #8
 800c254:	d823      	bhi.n	800c29e <UART_SetConfig+0x35a>
 800c256:	a201      	add	r2, pc, #4	@ (adr r2, 800c25c <UART_SetConfig+0x318>)
 800c258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25c:	0800c281 	.word	0x0800c281
 800c260:	0800c29f 	.word	0x0800c29f
 800c264:	0800c289 	.word	0x0800c289
 800c268:	0800c29f 	.word	0x0800c29f
 800c26c:	0800c28f 	.word	0x0800c28f
 800c270:	0800c29f 	.word	0x0800c29f
 800c274:	0800c29f 	.word	0x0800c29f
 800c278:	0800c29f 	.word	0x0800c29f
 800c27c:	0800c297 	.word	0x0800c297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c280:	f7fc fe50 	bl	8008f24 <HAL_RCC_GetPCLK1Freq>
 800c284:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c286:	e010      	b.n	800c2aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c288:	4b9e      	ldr	r3, [pc, #632]	@ (800c504 <UART_SetConfig+0x5c0>)
 800c28a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c28c:	e00d      	b.n	800c2aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c28e:	f7fc fddb 	bl	8008e48 <HAL_RCC_GetSysClockFreq>
 800c292:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c294:	e009      	b.n	800c2aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c29a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c29c:	e005      	b.n	800c2aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c2a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f000 8130 	beq.w	800c512 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b6:	4a94      	ldr	r2, [pc, #592]	@ (800c508 <UART_SetConfig+0x5c4>)
 800c2b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2bc:	461a      	mov	r2, r3
 800c2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	685a      	ldr	r2, [r3, #4]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	005b      	lsls	r3, r3, #1
 800c2ce:	4413      	add	r3, r2
 800c2d0:	69ba      	ldr	r2, [r7, #24]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d305      	bcc.n	800c2e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2dc:	69ba      	ldr	r2, [r7, #24]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d903      	bls.n	800c2ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c2e8:	e113      	b.n	800c512 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	60bb      	str	r3, [r7, #8]
 800c2f0:	60fa      	str	r2, [r7, #12]
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2f6:	4a84      	ldr	r2, [pc, #528]	@ (800c508 <UART_SetConfig+0x5c4>)
 800c2f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	2200      	movs	r2, #0
 800c300:	603b      	str	r3, [r7, #0]
 800c302:	607a      	str	r2, [r7, #4]
 800c304:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c308:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c30c:	f7f4 fcf4 	bl	8000cf8 <__aeabi_uldivmod>
 800c310:	4602      	mov	r2, r0
 800c312:	460b      	mov	r3, r1
 800c314:	4610      	mov	r0, r2
 800c316:	4619      	mov	r1, r3
 800c318:	f04f 0200 	mov.w	r2, #0
 800c31c:	f04f 0300 	mov.w	r3, #0
 800c320:	020b      	lsls	r3, r1, #8
 800c322:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c326:	0202      	lsls	r2, r0, #8
 800c328:	6979      	ldr	r1, [r7, #20]
 800c32a:	6849      	ldr	r1, [r1, #4]
 800c32c:	0849      	lsrs	r1, r1, #1
 800c32e:	2000      	movs	r0, #0
 800c330:	460c      	mov	r4, r1
 800c332:	4605      	mov	r5, r0
 800c334:	eb12 0804 	adds.w	r8, r2, r4
 800c338:	eb43 0905 	adc.w	r9, r3, r5
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	469a      	mov	sl, r3
 800c344:	4693      	mov	fp, r2
 800c346:	4652      	mov	r2, sl
 800c348:	465b      	mov	r3, fp
 800c34a:	4640      	mov	r0, r8
 800c34c:	4649      	mov	r1, r9
 800c34e:	f7f4 fcd3 	bl	8000cf8 <__aeabi_uldivmod>
 800c352:	4602      	mov	r2, r0
 800c354:	460b      	mov	r3, r1
 800c356:	4613      	mov	r3, r2
 800c358:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c35a:	6a3b      	ldr	r3, [r7, #32]
 800c35c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c360:	d308      	bcc.n	800c374 <UART_SetConfig+0x430>
 800c362:	6a3b      	ldr	r3, [r7, #32]
 800c364:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c368:	d204      	bcs.n	800c374 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	6a3a      	ldr	r2, [r7, #32]
 800c370:	60da      	str	r2, [r3, #12]
 800c372:	e0ce      	b.n	800c512 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c37a:	e0ca      	b.n	800c512 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	69db      	ldr	r3, [r3, #28]
 800c380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c384:	d166      	bne.n	800c454 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c386:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c38a:	2b08      	cmp	r3, #8
 800c38c:	d827      	bhi.n	800c3de <UART_SetConfig+0x49a>
 800c38e:	a201      	add	r2, pc, #4	@ (adr r2, 800c394 <UART_SetConfig+0x450>)
 800c390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c394:	0800c3b9 	.word	0x0800c3b9
 800c398:	0800c3c1 	.word	0x0800c3c1
 800c39c:	0800c3c9 	.word	0x0800c3c9
 800c3a0:	0800c3df 	.word	0x0800c3df
 800c3a4:	0800c3cf 	.word	0x0800c3cf
 800c3a8:	0800c3df 	.word	0x0800c3df
 800c3ac:	0800c3df 	.word	0x0800c3df
 800c3b0:	0800c3df 	.word	0x0800c3df
 800c3b4:	0800c3d7 	.word	0x0800c3d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3b8:	f7fc fdb4 	bl	8008f24 <HAL_RCC_GetPCLK1Freq>
 800c3bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c3be:	e014      	b.n	800c3ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3c0:	f7fc fdc6 	bl	8008f50 <HAL_RCC_GetPCLK2Freq>
 800c3c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c3c6:	e010      	b.n	800c3ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c3c8:	4b4e      	ldr	r3, [pc, #312]	@ (800c504 <UART_SetConfig+0x5c0>)
 800c3ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c3cc:	e00d      	b.n	800c3ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c3ce:	f7fc fd3b 	bl	8008e48 <HAL_RCC_GetSysClockFreq>
 800c3d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c3d4:	e009      	b.n	800c3ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c3dc:	e005      	b.n	800c3ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c3e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f000 8090 	beq.w	800c512 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f6:	4a44      	ldr	r2, [pc, #272]	@ (800c508 <UART_SetConfig+0x5c4>)
 800c3f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c400:	fbb3 f3f2 	udiv	r3, r3, r2
 800c404:	005a      	lsls	r2, r3, #1
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	085b      	lsrs	r3, r3, #1
 800c40c:	441a      	add	r2, r3
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	fbb2 f3f3 	udiv	r3, r2, r3
 800c416:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	2b0f      	cmp	r3, #15
 800c41c:	d916      	bls.n	800c44c <UART_SetConfig+0x508>
 800c41e:	6a3b      	ldr	r3, [r7, #32]
 800c420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c424:	d212      	bcs.n	800c44c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c426:	6a3b      	ldr	r3, [r7, #32]
 800c428:	b29b      	uxth	r3, r3
 800c42a:	f023 030f 	bic.w	r3, r3, #15
 800c42e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c430:	6a3b      	ldr	r3, [r7, #32]
 800c432:	085b      	lsrs	r3, r3, #1
 800c434:	b29b      	uxth	r3, r3
 800c436:	f003 0307 	and.w	r3, r3, #7
 800c43a:	b29a      	uxth	r2, r3
 800c43c:	8bfb      	ldrh	r3, [r7, #30]
 800c43e:	4313      	orrs	r3, r2
 800c440:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	8bfa      	ldrh	r2, [r7, #30]
 800c448:	60da      	str	r2, [r3, #12]
 800c44a:	e062      	b.n	800c512 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c452:	e05e      	b.n	800c512 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c454:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c458:	2b08      	cmp	r3, #8
 800c45a:	d828      	bhi.n	800c4ae <UART_SetConfig+0x56a>
 800c45c:	a201      	add	r2, pc, #4	@ (adr r2, 800c464 <UART_SetConfig+0x520>)
 800c45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c462:	bf00      	nop
 800c464:	0800c489 	.word	0x0800c489
 800c468:	0800c491 	.word	0x0800c491
 800c46c:	0800c499 	.word	0x0800c499
 800c470:	0800c4af 	.word	0x0800c4af
 800c474:	0800c49f 	.word	0x0800c49f
 800c478:	0800c4af 	.word	0x0800c4af
 800c47c:	0800c4af 	.word	0x0800c4af
 800c480:	0800c4af 	.word	0x0800c4af
 800c484:	0800c4a7 	.word	0x0800c4a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c488:	f7fc fd4c 	bl	8008f24 <HAL_RCC_GetPCLK1Freq>
 800c48c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c48e:	e014      	b.n	800c4ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c490:	f7fc fd5e 	bl	8008f50 <HAL_RCC_GetPCLK2Freq>
 800c494:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c496:	e010      	b.n	800c4ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c498:	4b1a      	ldr	r3, [pc, #104]	@ (800c504 <UART_SetConfig+0x5c0>)
 800c49a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c49c:	e00d      	b.n	800c4ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c49e:	f7fc fcd3 	bl	8008e48 <HAL_RCC_GetSysClockFreq>
 800c4a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c4a4:	e009      	b.n	800c4ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c4ac:	e005      	b.n	800c4ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c4b8:	bf00      	nop
    }

    if (pclk != 0U)
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d028      	beq.n	800c512 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c4:	4a10      	ldr	r2, [pc, #64]	@ (800c508 <UART_SetConfig+0x5c4>)
 800c4c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	085b      	lsrs	r3, r3, #1
 800c4d8:	441a      	add	r2, r3
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4e4:	6a3b      	ldr	r3, [r7, #32]
 800c4e6:	2b0f      	cmp	r3, #15
 800c4e8:	d910      	bls.n	800c50c <UART_SetConfig+0x5c8>
 800c4ea:	6a3b      	ldr	r3, [r7, #32]
 800c4ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4f0:	d20c      	bcs.n	800c50c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c4f2:	6a3b      	ldr	r3, [r7, #32]
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	60da      	str	r2, [r3, #12]
 800c4fc:	e009      	b.n	800c512 <UART_SetConfig+0x5ce>
 800c4fe:	bf00      	nop
 800c500:	40008000 	.word	0x40008000
 800c504:	00f42400 	.word	0x00f42400
 800c508:	080174c8 	.word	0x080174c8
      }
      else
      {
        ret = HAL_ERROR;
 800c50c:	2301      	movs	r3, #1
 800c50e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	2201      	movs	r2, #1
 800c516:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	2200      	movs	r2, #0
 800c526:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	2200      	movs	r2, #0
 800c52c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c52e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c532:	4618      	mov	r0, r3
 800c534:	3730      	adds	r7, #48	@ 0x30
 800c536:	46bd      	mov	sp, r7
 800c538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c53c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c548:	f003 0308 	and.w	r3, r3, #8
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00a      	beq.n	800c566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	430a      	orrs	r2, r1
 800c564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c56a:	f003 0301 	and.w	r3, r3, #1
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00a      	beq.n	800c588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	430a      	orrs	r2, r1
 800c586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c58c:	f003 0302 	and.w	r3, r3, #2
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00a      	beq.n	800c5aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	430a      	orrs	r2, r1
 800c5a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5ae:	f003 0304 	and.w	r3, r3, #4
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00a      	beq.n	800c5cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	430a      	orrs	r2, r1
 800c5ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5d0:	f003 0310 	and.w	r3, r3, #16
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d00a      	beq.n	800c5ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	430a      	orrs	r2, r1
 800c5ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f2:	f003 0320 	and.w	r3, r3, #32
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00a      	beq.n	800c610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	430a      	orrs	r2, r1
 800c60e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d01a      	beq.n	800c652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	430a      	orrs	r2, r1
 800c630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c63a:	d10a      	bne.n	800c652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	430a      	orrs	r2, r1
 800c650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00a      	beq.n	800c674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	430a      	orrs	r2, r1
 800c672:	605a      	str	r2, [r3, #4]
  }
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b098      	sub	sp, #96	@ 0x60
 800c684:	af02      	add	r7, sp, #8
 800c686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c690:	f7f8 ff5a 	bl	8005548 <HAL_GetTick>
 800c694:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 0308 	and.w	r3, r3, #8
 800c6a0:	2b08      	cmp	r3, #8
 800c6a2:	d12f      	bne.n	800c704 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 f88e 	bl	800c7d4 <UART_WaitOnFlagUntilTimeout>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d022      	beq.n	800c704 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c6:	e853 3f00 	ldrex	r3, [r3]
 800c6ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c6d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c6e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6e4:	e841 2300 	strex	r3, r2, [r1]
 800c6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c6ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d1e6      	bne.n	800c6be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2220      	movs	r2, #32
 800c6f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c700:	2303      	movs	r3, #3
 800c702:	e063      	b.n	800c7cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f003 0304 	and.w	r3, r3, #4
 800c70e:	2b04      	cmp	r3, #4
 800c710:	d149      	bne.n	800c7a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c712:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c71a:	2200      	movs	r2, #0
 800c71c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 f857 	bl	800c7d4 <UART_WaitOnFlagUntilTimeout>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d03c      	beq.n	800c7a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c734:	e853 3f00 	ldrex	r3, [r3]
 800c738:	623b      	str	r3, [r7, #32]
   return(result);
 800c73a:	6a3b      	ldr	r3, [r7, #32]
 800c73c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	461a      	mov	r2, r3
 800c748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c74a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c74c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c752:	e841 2300 	strex	r3, r2, [r1]
 800c756:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d1e6      	bne.n	800c72c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3308      	adds	r3, #8
 800c764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	e853 3f00 	ldrex	r3, [r3]
 800c76c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f023 0301 	bic.w	r3, r3, #1
 800c774:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	3308      	adds	r3, #8
 800c77c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c77e:	61fa      	str	r2, [r7, #28]
 800c780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c782:	69b9      	ldr	r1, [r7, #24]
 800c784:	69fa      	ldr	r2, [r7, #28]
 800c786:	e841 2300 	strex	r3, r2, [r1]
 800c78a:	617b      	str	r3, [r7, #20]
   return(result);
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1e5      	bne.n	800c75e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2220      	movs	r2, #32
 800c796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	e012      	b.n	800c7cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2220      	movs	r2, #32
 800c7b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3758      	adds	r7, #88	@ 0x58
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	603b      	str	r3, [r7, #0]
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7e4:	e04f      	b.n	800c886 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7e6:	69bb      	ldr	r3, [r7, #24]
 800c7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ec:	d04b      	beq.n	800c886 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7ee:	f7f8 feab 	bl	8005548 <HAL_GetTick>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	69ba      	ldr	r2, [r7, #24]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d302      	bcc.n	800c804 <UART_WaitOnFlagUntilTimeout+0x30>
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d101      	bne.n	800c808 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c804:	2303      	movs	r3, #3
 800c806:	e04e      	b.n	800c8a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f003 0304 	and.w	r3, r3, #4
 800c812:	2b00      	cmp	r3, #0
 800c814:	d037      	beq.n	800c886 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	2b80      	cmp	r3, #128	@ 0x80
 800c81a:	d034      	beq.n	800c886 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2b40      	cmp	r3, #64	@ 0x40
 800c820:	d031      	beq.n	800c886 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	69db      	ldr	r3, [r3, #28]
 800c828:	f003 0308 	and.w	r3, r3, #8
 800c82c:	2b08      	cmp	r3, #8
 800c82e:	d110      	bne.n	800c852 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2208      	movs	r2, #8
 800c836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f000 f95b 	bl	800caf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2208      	movs	r2, #8
 800c842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2200      	movs	r2, #0
 800c84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c84e:	2301      	movs	r3, #1
 800c850:	e029      	b.n	800c8a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	69db      	ldr	r3, [r3, #28]
 800c858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c85c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c860:	d111      	bne.n	800c886 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c86a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f000 f941 	bl	800caf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2220      	movs	r2, #32
 800c876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c882:	2303      	movs	r3, #3
 800c884:	e00f      	b.n	800c8a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	69da      	ldr	r2, [r3, #28]
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	4013      	ands	r3, r2
 800c890:	68ba      	ldr	r2, [r7, #8]
 800c892:	429a      	cmp	r2, r3
 800c894:	bf0c      	ite	eq
 800c896:	2301      	moveq	r3, #1
 800c898:	2300      	movne	r3, #0
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	461a      	mov	r2, r3
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d0a0      	beq.n	800c7e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
	...

0800c8b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b0a3      	sub	sp, #140	@ 0x8c
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	88fa      	ldrh	r2, [r7, #6]
 800c8c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	88fa      	ldrh	r2, [r7, #6]
 800c8d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8e2:	d10e      	bne.n	800c902 <UART_Start_Receive_IT+0x52>
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d105      	bne.n	800c8f8 <UART_Start_Receive_IT+0x48>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c8f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c8f6:	e02d      	b.n	800c954 <UART_Start_Receive_IT+0xa4>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	22ff      	movs	r2, #255	@ 0xff
 800c8fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c900:	e028      	b.n	800c954 <UART_Start_Receive_IT+0xa4>
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10d      	bne.n	800c926 <UART_Start_Receive_IT+0x76>
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d104      	bne.n	800c91c <UART_Start_Receive_IT+0x6c>
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	22ff      	movs	r2, #255	@ 0xff
 800c916:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c91a:	e01b      	b.n	800c954 <UART_Start_Receive_IT+0xa4>
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	227f      	movs	r2, #127	@ 0x7f
 800c920:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c924:	e016      	b.n	800c954 <UART_Start_Receive_IT+0xa4>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c92e:	d10d      	bne.n	800c94c <UART_Start_Receive_IT+0x9c>
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d104      	bne.n	800c942 <UART_Start_Receive_IT+0x92>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	227f      	movs	r2, #127	@ 0x7f
 800c93c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c940:	e008      	b.n	800c954 <UART_Start_Receive_IT+0xa4>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	223f      	movs	r2, #63	@ 0x3f
 800c946:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c94a:	e003      	b.n	800c954 <UART_Start_Receive_IT+0xa4>
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2222      	movs	r2, #34	@ 0x22
 800c960:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3308      	adds	r3, #8
 800c96a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c96c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c96e:	e853 3f00 	ldrex	r3, [r3]
 800c972:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c976:	f043 0301 	orr.w	r3, r3, #1
 800c97a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	3308      	adds	r3, #8
 800c984:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c988:	673a      	str	r2, [r7, #112]	@ 0x70
 800c98a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c98c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c98e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c990:	e841 2300 	strex	r3, r2, [r1]
 800c994:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c996:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1e3      	bne.n	800c964 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9a4:	d14f      	bne.n	800ca46 <UART_Start_Receive_IT+0x196>
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c9ac:	88fa      	ldrh	r2, [r7, #6]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d349      	bcc.n	800ca46 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9ba:	d107      	bne.n	800c9cc <UART_Start_Receive_IT+0x11c>
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d103      	bne.n	800c9cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	4a47      	ldr	r2, [pc, #284]	@ (800cae4 <UART_Start_Receive_IT+0x234>)
 800c9c8:	675a      	str	r2, [r3, #116]	@ 0x74
 800c9ca:	e002      	b.n	800c9d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	4a46      	ldr	r2, [pc, #280]	@ (800cae8 <UART_Start_Receive_IT+0x238>)
 800c9d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	691b      	ldr	r3, [r3, #16]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d01a      	beq.n	800ca10 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9e2:	e853 3f00 	ldrex	r3, [r3]
 800c9e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c9e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c9ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c9fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c9fe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ca02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ca04:	e841 2300 	strex	r3, r2, [r1]
 800ca08:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ca0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1e4      	bne.n	800c9da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	3308      	adds	r3, #8
 800ca16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca1a:	e853 3f00 	ldrex	r3, [r3]
 800ca1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	3308      	adds	r3, #8
 800ca2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ca30:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ca32:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca38:	e841 2300 	strex	r3, r2, [r1]
 800ca3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ca3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1e5      	bne.n	800ca10 <UART_Start_Receive_IT+0x160>
 800ca44:	e046      	b.n	800cad4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca4e:	d107      	bne.n	800ca60 <UART_Start_Receive_IT+0x1b0>
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d103      	bne.n	800ca60 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	4a24      	ldr	r2, [pc, #144]	@ (800caec <UART_Start_Receive_IT+0x23c>)
 800ca5c:	675a      	str	r2, [r3, #116]	@ 0x74
 800ca5e:	e002      	b.n	800ca66 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	4a23      	ldr	r2, [pc, #140]	@ (800caf0 <UART_Start_Receive_IT+0x240>)
 800ca64:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d019      	beq.n	800caa2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca76:	e853 3f00 	ldrex	r3, [r3]
 800ca7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ca82:	677b      	str	r3, [r7, #116]	@ 0x74
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	461a      	mov	r2, r3
 800ca8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca8e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ca92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca94:	e841 2300 	strex	r3, r2, [r1]
 800ca98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ca9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d1e6      	bne.n	800ca6e <UART_Start_Receive_IT+0x1be>
 800caa0:	e018      	b.n	800cad4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	e853 3f00 	ldrex	r3, [r3]
 800caae:	613b      	str	r3, [r7, #16]
   return(result);
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	f043 0320 	orr.w	r3, r3, #32
 800cab6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	461a      	mov	r2, r3
 800cabe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cac0:	623b      	str	r3, [r7, #32]
 800cac2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac4:	69f9      	ldr	r1, [r7, #28]
 800cac6:	6a3a      	ldr	r2, [r7, #32]
 800cac8:	e841 2300 	strex	r3, r2, [r1]
 800cacc:	61bb      	str	r3, [r7, #24]
   return(result);
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d1e6      	bne.n	800caa2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	378c      	adds	r7, #140	@ 0x8c
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	0800d311 	.word	0x0800d311
 800cae8:	0800cfad 	.word	0x0800cfad
 800caec:	0800cdf5 	.word	0x0800cdf5
 800caf0:	0800cc3d 	.word	0x0800cc3d

0800caf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b095      	sub	sp, #84	@ 0x54
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb04:	e853 3f00 	ldrex	r3, [r3]
 800cb08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	461a      	mov	r2, r3
 800cb18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb22:	e841 2300 	strex	r3, r2, [r1]
 800cb26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1e6      	bne.n	800cafc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	3308      	adds	r3, #8
 800cb34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb36:	6a3b      	ldr	r3, [r7, #32]
 800cb38:	e853 3f00 	ldrex	r3, [r3]
 800cb3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb44:	f023 0301 	bic.w	r3, r3, #1
 800cb48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	3308      	adds	r3, #8
 800cb50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb5a:	e841 2300 	strex	r3, r2, [r1]
 800cb5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d1e3      	bne.n	800cb2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d118      	bne.n	800cba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	e853 3f00 	ldrex	r3, [r3]
 800cb7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	f023 0310 	bic.w	r3, r3, #16
 800cb82:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	461a      	mov	r2, r3
 800cb8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb8c:	61bb      	str	r3, [r7, #24]
 800cb8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb90:	6979      	ldr	r1, [r7, #20]
 800cb92:	69ba      	ldr	r2, [r7, #24]
 800cb94:	e841 2300 	strex	r3, r2, [r1]
 800cb98:	613b      	str	r3, [r7, #16]
   return(result);
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1e6      	bne.n	800cb6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2220      	movs	r2, #32
 800cba4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cbb4:	bf00      	nop
 800cbb6:	3754      	adds	r7, #84	@ 0x54
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7ff f99e 	bl	800bf18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbdc:	bf00      	nop
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b088      	sub	sp, #32
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	e853 3f00 	ldrex	r3, [r3]
 800cbf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc00:	61fb      	str	r3, [r7, #28]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	461a      	mov	r2, r3
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	61bb      	str	r3, [r7, #24]
 800cc0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc0e:	6979      	ldr	r1, [r7, #20]
 800cc10:	69ba      	ldr	r2, [r7, #24]
 800cc12:	e841 2300 	strex	r3, r2, [r1]
 800cc16:	613b      	str	r3, [r7, #16]
   return(result);
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1e6      	bne.n	800cbec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2220      	movs	r2, #32
 800cc22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7ff f969 	bl	800bf04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc32:	bf00      	nop
 800cc34:	3720      	adds	r7, #32
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
	...

0800cc3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b09c      	sub	sp, #112	@ 0x70
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cc4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc54:	2b22      	cmp	r3, #34	@ 0x22
 800cc56:	f040 80be 	bne.w	800cdd6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cc64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cc68:	b2d9      	uxtb	r1, r3
 800cc6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cc6e:	b2da      	uxtb	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc74:	400a      	ands	r2, r1
 800cc76:	b2d2      	uxtb	r2, r2
 800cc78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc7e:	1c5a      	adds	r2, r3, #1
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	f040 80a1 	bne.w	800cde6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccac:	e853 3f00 	ldrex	r3, [r3]
 800ccb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ccb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ccb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ccb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ccc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ccc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ccc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccca:	e841 2300 	strex	r3, r2, [r1]
 800ccce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ccd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d1e6      	bne.n	800cca4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	3308      	adds	r3, #8
 800ccdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce0:	e853 3f00 	ldrex	r3, [r3]
 800cce4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce8:	f023 0301 	bic.w	r3, r3, #1
 800ccec:	667b      	str	r3, [r7, #100]	@ 0x64
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3308      	adds	r3, #8
 800ccf4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ccf6:	647a      	str	r2, [r7, #68]	@ 0x44
 800ccf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccfe:	e841 2300 	strex	r3, r2, [r1]
 800cd02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d1e5      	bne.n	800ccd6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2220      	movs	r2, #32
 800cd0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a33      	ldr	r2, [pc, #204]	@ (800cdf0 <UART_RxISR_8BIT+0x1b4>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d01f      	beq.n	800cd68 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d018      	beq.n	800cd68 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3e:	e853 3f00 	ldrex	r3, [r3]
 800cd42:	623b      	str	r3, [r7, #32]
   return(result);
 800cd44:	6a3b      	ldr	r3, [r7, #32]
 800cd46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cd4a:	663b      	str	r3, [r7, #96]	@ 0x60
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	461a      	mov	r2, r3
 800cd52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd54:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd56:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd5c:	e841 2300 	strex	r3, r2, [r1]
 800cd60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1e6      	bne.n	800cd36 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d12e      	bne.n	800cdce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	e853 3f00 	ldrex	r3, [r3]
 800cd82:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f023 0310 	bic.w	r3, r3, #16
 800cd8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	461a      	mov	r2, r3
 800cd92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd94:	61fb      	str	r3, [r7, #28]
 800cd96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd98:	69b9      	ldr	r1, [r7, #24]
 800cd9a:	69fa      	ldr	r2, [r7, #28]
 800cd9c:	e841 2300 	strex	r3, r2, [r1]
 800cda0:	617b      	str	r3, [r7, #20]
   return(result);
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d1e6      	bne.n	800cd76 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	69db      	ldr	r3, [r3, #28]
 800cdae:	f003 0310 	and.w	r3, r3, #16
 800cdb2:	2b10      	cmp	r3, #16
 800cdb4:	d103      	bne.n	800cdbe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2210      	movs	r2, #16
 800cdbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7ff f8b0 	bl	800bf2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cdcc:	e00b      	b.n	800cde6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7f5 fe78 	bl	8002ac4 <HAL_UART_RxCpltCallback>
}
 800cdd4:	e007      	b.n	800cde6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	699a      	ldr	r2, [r3, #24]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f042 0208 	orr.w	r2, r2, #8
 800cde4:	619a      	str	r2, [r3, #24]
}
 800cde6:	bf00      	nop
 800cde8:	3770      	adds	r7, #112	@ 0x70
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	40008000 	.word	0x40008000

0800cdf4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b09c      	sub	sp, #112	@ 0x70
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ce02:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce0c:	2b22      	cmp	r3, #34	@ 0x22
 800ce0e:	f040 80be 	bne.w	800cf8e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce18:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce20:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ce22:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ce26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ce2a:	4013      	ands	r3, r2
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ce30:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce36:	1c9a      	adds	r2, r3, #2
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	3b01      	subs	r3, #1
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f040 80a1 	bne.w	800cf9e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce64:	e853 3f00 	ldrex	r3, [r3]
 800ce68:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ce6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce70:	667b      	str	r3, [r7, #100]	@ 0x64
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	461a      	mov	r2, r3
 800ce78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce7a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce7c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce82:	e841 2300 	strex	r3, r2, [r1]
 800ce86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ce88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d1e6      	bne.n	800ce5c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	3308      	adds	r3, #8
 800ce94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce98:	e853 3f00 	ldrex	r3, [r3]
 800ce9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea0:	f023 0301 	bic.w	r3, r3, #1
 800cea4:	663b      	str	r3, [r7, #96]	@ 0x60
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	3308      	adds	r3, #8
 800ceac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ceae:	643a      	str	r2, [r7, #64]	@ 0x40
 800ceb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ceb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ceb6:	e841 2300 	strex	r3, r2, [r1]
 800ceba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1e5      	bne.n	800ce8e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2220      	movs	r2, #32
 800cec6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a33      	ldr	r2, [pc, #204]	@ (800cfa8 <UART_RxISR_16BIT+0x1b4>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d01f      	beq.n	800cf20 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d018      	beq.n	800cf20 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	e853 3f00 	ldrex	r3, [r3]
 800cefa:	61fb      	str	r3, [r7, #28]
   return(result);
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cf02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	461a      	mov	r2, r3
 800cf0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf0e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf14:	e841 2300 	strex	r3, r2, [r1]
 800cf18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d1e6      	bne.n	800ceee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d12e      	bne.n	800cf86 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	e853 3f00 	ldrex	r3, [r3]
 800cf3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	f023 0310 	bic.w	r3, r3, #16
 800cf42:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	461a      	mov	r2, r3
 800cf4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf4c:	61bb      	str	r3, [r7, #24]
 800cf4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf50:	6979      	ldr	r1, [r7, #20]
 800cf52:	69ba      	ldr	r2, [r7, #24]
 800cf54:	e841 2300 	strex	r3, r2, [r1]
 800cf58:	613b      	str	r3, [r7, #16]
   return(result);
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1e6      	bne.n	800cf2e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	69db      	ldr	r3, [r3, #28]
 800cf66:	f003 0310 	and.w	r3, r3, #16
 800cf6a:	2b10      	cmp	r3, #16
 800cf6c:	d103      	bne.n	800cf76 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2210      	movs	r2, #16
 800cf74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f7fe ffd4 	bl	800bf2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf84:	e00b      	b.n	800cf9e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7f5 fd9c 	bl	8002ac4 <HAL_UART_RxCpltCallback>
}
 800cf8c:	e007      	b.n	800cf9e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	699a      	ldr	r2, [r3, #24]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f042 0208 	orr.w	r2, r2, #8
 800cf9c:	619a      	str	r2, [r3, #24]
}
 800cf9e:	bf00      	nop
 800cfa0:	3770      	adds	r7, #112	@ 0x70
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	40008000 	.word	0x40008000

0800cfac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b0ac      	sub	sp, #176	@ 0xb0
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cfba:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	69db      	ldr	r3, [r3, #28]
 800cfc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cfe2:	2b22      	cmp	r3, #34	@ 0x22
 800cfe4:	f040 8183 	bne.w	800d2ee <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cfee:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cff2:	e126      	b.n	800d242 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cffa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cffe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d002:	b2d9      	uxtb	r1, r3
 800d004:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d008:	b2da      	uxtb	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d00e:	400a      	ands	r2, r1
 800d010:	b2d2      	uxtb	r2, r2
 800d012:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d018:	1c5a      	adds	r2, r3, #1
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d024:	b29b      	uxth	r3, r3
 800d026:	3b01      	subs	r3, #1
 800d028:	b29a      	uxth	r2, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	69db      	ldr	r3, [r3, #28]
 800d036:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d03a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d03e:	f003 0307 	and.w	r3, r3, #7
 800d042:	2b00      	cmp	r3, #0
 800d044:	d053      	beq.n	800d0ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d04a:	f003 0301 	and.w	r3, r3, #1
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d011      	beq.n	800d076 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00b      	beq.n	800d076 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2201      	movs	r2, #1
 800d064:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d06c:	f043 0201 	orr.w	r2, r3, #1
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d07a:	f003 0302 	and.w	r3, r3, #2
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d011      	beq.n	800d0a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d086:	f003 0301 	and.w	r3, r3, #1
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d00b      	beq.n	800d0a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2202      	movs	r2, #2
 800d094:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d09c:	f043 0204 	orr.w	r2, r3, #4
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0aa:	f003 0304 	and.w	r3, r3, #4
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d011      	beq.n	800d0d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d0b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d0b6:	f003 0301 	and.w	r3, r3, #1
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00b      	beq.n	800d0d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2204      	movs	r2, #4
 800d0c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0cc:	f043 0202 	orr.w	r2, r3, #2
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d006      	beq.n	800d0ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7fe ff19 	bl	800bf18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f040 80a3 	bne.w	800d242 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d104:	e853 3f00 	ldrex	r3, [r3]
 800d108:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d10a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d10c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	461a      	mov	r2, r3
 800d11a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d11e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d120:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d122:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d124:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d126:	e841 2300 	strex	r3, r2, [r1]
 800d12a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d12c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1e4      	bne.n	800d0fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	3308      	adds	r3, #8
 800d138:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d13c:	e853 3f00 	ldrex	r3, [r3]
 800d140:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d142:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d148:	f023 0301 	bic.w	r3, r3, #1
 800d14c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	3308      	adds	r3, #8
 800d156:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d15a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d15c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d160:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d162:	e841 2300 	strex	r3, r2, [r1]
 800d166:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d168:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d1e1      	bne.n	800d132 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2220      	movs	r2, #32
 800d172:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a60      	ldr	r2, [pc, #384]	@ (800d308 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d021      	beq.n	800d1d0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d196:	2b00      	cmp	r3, #0
 800d198:	d01a      	beq.n	800d1d0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1a2:	e853 3f00 	ldrex	r3, [r3]
 800d1a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d1a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d1ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d1bc:	657b      	str	r3, [r7, #84]	@ 0x54
 800d1be:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d1c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d1c4:	e841 2300 	strex	r3, r2, [r1]
 800d1c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d1ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1e4      	bne.n	800d19a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d130      	bne.n	800d23a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1e6:	e853 3f00 	ldrex	r3, [r3]
 800d1ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ee:	f023 0310 	bic.w	r3, r3, #16
 800d1f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d200:	643b      	str	r3, [r7, #64]	@ 0x40
 800d202:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d204:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d206:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d208:	e841 2300 	strex	r3, r2, [r1]
 800d20c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d210:	2b00      	cmp	r3, #0
 800d212:	d1e4      	bne.n	800d1de <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	69db      	ldr	r3, [r3, #28]
 800d21a:	f003 0310 	and.w	r3, r3, #16
 800d21e:	2b10      	cmp	r3, #16
 800d220:	d103      	bne.n	800d22a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2210      	movs	r2, #16
 800d228:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d230:	4619      	mov	r1, r3
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f7fe fe7a 	bl	800bf2c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800d238:	e00e      	b.n	800d258 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f7f5 fc42 	bl	8002ac4 <HAL_UART_RxCpltCallback>
        break;
 800d240:	e00a      	b.n	800d258 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d242:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d246:	2b00      	cmp	r3, #0
 800d248:	d006      	beq.n	800d258 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800d24a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d24e:	f003 0320 	and.w	r3, r3, #32
 800d252:	2b00      	cmp	r3, #0
 800d254:	f47f aece 	bne.w	800cff4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d25e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d262:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d266:	2b00      	cmp	r3, #0
 800d268:	d049      	beq.n	800d2fe <UART_RxISR_8BIT_FIFOEN+0x352>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d270:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d274:	429a      	cmp	r2, r3
 800d276:	d242      	bcs.n	800d2fe <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3308      	adds	r3, #8
 800d27e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d280:	6a3b      	ldr	r3, [r7, #32]
 800d282:	e853 3f00 	ldrex	r3, [r3]
 800d286:	61fb      	str	r3, [r7, #28]
   return(result);
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d28e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	3308      	adds	r3, #8
 800d298:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d29c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d29e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2a4:	e841 2300 	strex	r3, r2, [r1]
 800d2a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1e3      	bne.n	800d278 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	4a16      	ldr	r2, [pc, #88]	@ (800d30c <UART_RxISR_8BIT_FIFOEN+0x360>)
 800d2b4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	e853 3f00 	ldrex	r3, [r3]
 800d2c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	f043 0320 	orr.w	r3, r3, #32
 800d2ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d2d8:	61bb      	str	r3, [r7, #24]
 800d2da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2dc:	6979      	ldr	r1, [r7, #20]
 800d2de:	69ba      	ldr	r2, [r7, #24]
 800d2e0:	e841 2300 	strex	r3, r2, [r1]
 800d2e4:	613b      	str	r3, [r7, #16]
   return(result);
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d1e4      	bne.n	800d2b6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d2ec:	e007      	b.n	800d2fe <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	699a      	ldr	r2, [r3, #24]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f042 0208 	orr.w	r2, r2, #8
 800d2fc:	619a      	str	r2, [r3, #24]
}
 800d2fe:	bf00      	nop
 800d300:	37b0      	adds	r7, #176	@ 0xb0
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	40008000 	.word	0x40008000
 800d30c:	0800cc3d 	.word	0x0800cc3d

0800d310 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b0ae      	sub	sp, #184	@ 0xb8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d31e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	69db      	ldr	r3, [r3, #28]
 800d328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d346:	2b22      	cmp	r3, #34	@ 0x22
 800d348:	f040 8187 	bne.w	800d65a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d352:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d356:	e12a      	b.n	800d5ae <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d35e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d36a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d36e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d372:	4013      	ands	r3, r2
 800d374:	b29a      	uxth	r2, r3
 800d376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d37a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d380:	1c9a      	adds	r2, r3, #2
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	3b01      	subs	r3, #1
 800d390:	b29a      	uxth	r2, r3
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	69db      	ldr	r3, [r3, #28]
 800d39e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d3a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d3a6:	f003 0307 	and.w	r3, r3, #7
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d053      	beq.n	800d456 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d3ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d3b2:	f003 0301 	and.w	r3, r3, #1
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d011      	beq.n	800d3de <UART_RxISR_16BIT_FIFOEN+0xce>
 800d3ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00b      	beq.n	800d3de <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3d4:	f043 0201 	orr.w	r2, r3, #1
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d3e2:	f003 0302 	and.w	r3, r3, #2
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d011      	beq.n	800d40e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d3ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d3ee:	f003 0301 	and.w	r3, r3, #1
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00b      	beq.n	800d40e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2202      	movs	r2, #2
 800d3fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d404:	f043 0204 	orr.w	r2, r3, #4
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d40e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d412:	f003 0304 	and.w	r3, r3, #4
 800d416:	2b00      	cmp	r3, #0
 800d418:	d011      	beq.n	800d43e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d41a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d41e:	f003 0301 	and.w	r3, r3, #1
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00b      	beq.n	800d43e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2204      	movs	r2, #4
 800d42c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d434:	f043 0202 	orr.w	r2, r3, #2
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d444:	2b00      	cmp	r3, #0
 800d446:	d006      	beq.n	800d456 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f7fe fd65 	bl	800bf18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2200      	movs	r2, #0
 800d452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f040 80a5 	bne.w	800d5ae <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d46c:	e853 3f00 	ldrex	r3, [r3]
 800d470:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d472:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d478:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	461a      	mov	r2, r3
 800d482:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d486:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d48a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d48e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d492:	e841 2300 	strex	r3, r2, [r1]
 800d496:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d498:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d1e2      	bne.n	800d464 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	3308      	adds	r3, #8
 800d4a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d4a8:	e853 3f00 	ldrex	r3, [r3]
 800d4ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d4ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d4b4:	f023 0301 	bic.w	r3, r3, #1
 800d4b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d4c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d4c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d4cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d4ce:	e841 2300 	strex	r3, r2, [r1]
 800d4d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d4d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1e1      	bne.n	800d49e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2220      	movs	r2, #32
 800d4de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a60      	ldr	r2, [pc, #384]	@ (800d674 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d021      	beq.n	800d53c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d502:	2b00      	cmp	r3, #0
 800d504:	d01a      	beq.n	800d53c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d50c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d50e:	e853 3f00 	ldrex	r3, [r3]
 800d512:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d516:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d51a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	461a      	mov	r2, r3
 800d524:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d528:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d52a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d52c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d52e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d530:	e841 2300 	strex	r3, r2, [r1]
 800d534:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1e4      	bne.n	800d506 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d540:	2b01      	cmp	r3, #1
 800d542:	d130      	bne.n	800d5a6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d552:	e853 3f00 	ldrex	r3, [r3]
 800d556:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d55a:	f023 0310 	bic.w	r3, r3, #16
 800d55e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	461a      	mov	r2, r3
 800d568:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d56c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d56e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d570:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d574:	e841 2300 	strex	r3, r2, [r1]
 800d578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d57a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1e4      	bne.n	800d54a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	69db      	ldr	r3, [r3, #28]
 800d586:	f003 0310 	and.w	r3, r3, #16
 800d58a:	2b10      	cmp	r3, #16
 800d58c:	d103      	bne.n	800d596 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2210      	movs	r2, #16
 800d594:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d59c:	4619      	mov	r1, r3
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f7fe fcc4 	bl	800bf2c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800d5a4:	e00e      	b.n	800d5c4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f7f5 fa8c 	bl	8002ac4 <HAL_UART_RxCpltCallback>
        break;
 800d5ac:	e00a      	b.n	800d5c4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d5ae:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d006      	beq.n	800d5c4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800d5b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d5ba:	f003 0320 	and.w	r3, r3, #32
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f47f aeca 	bne.w	800d358 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5ca:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d5ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d049      	beq.n	800d66a <UART_RxISR_16BIT_FIFOEN+0x35a>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d5dc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d242      	bcs.n	800d66a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	3308      	adds	r3, #8
 800d5ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ee:	e853 3f00 	ldrex	r3, [r3]
 800d5f2:	623b      	str	r3, [r7, #32]
   return(result);
 800d5f4:	6a3b      	ldr	r3, [r7, #32]
 800d5f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d5fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	3308      	adds	r3, #8
 800d604:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d608:	633a      	str	r2, [r7, #48]	@ 0x30
 800d60a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d60e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d610:	e841 2300 	strex	r3, r2, [r1]
 800d614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d1e3      	bne.n	800d5e4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a16      	ldr	r2, [pc, #88]	@ (800d678 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800d620:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	e853 3f00 	ldrex	r3, [r3]
 800d62e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f043 0320 	orr.w	r3, r3, #32
 800d636:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	461a      	mov	r2, r3
 800d640:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d644:	61fb      	str	r3, [r7, #28]
 800d646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d648:	69b9      	ldr	r1, [r7, #24]
 800d64a:	69fa      	ldr	r2, [r7, #28]
 800d64c:	e841 2300 	strex	r3, r2, [r1]
 800d650:	617b      	str	r3, [r7, #20]
   return(result);
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1e4      	bne.n	800d622 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d658:	e007      	b.n	800d66a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	699a      	ldr	r2, [r3, #24]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f042 0208 	orr.w	r2, r2, #8
 800d668:	619a      	str	r2, [r3, #24]
}
 800d66a:	bf00      	nop
 800d66c:	37b8      	adds	r7, #184	@ 0xb8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	40008000 	.word	0x40008000
 800d678:	0800cdf5 	.word	0x0800cdf5

0800d67c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d6ac:	bf00      	nop
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d101      	bne.n	800d6ce <HAL_UARTEx_DisableFifoMode+0x16>
 800d6ca:	2302      	movs	r3, #2
 800d6cc:	e027      	b.n	800d71e <HAL_UARTEx_DisableFifoMode+0x66>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2224      	movs	r2, #36	@ 0x24
 800d6da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f022 0201 	bic.w	r2, r2, #1
 800d6f4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d6fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2220      	movs	r2, #32
 800d710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3714      	adds	r7, #20
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
 800d732:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d101      	bne.n	800d742 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d73e:	2302      	movs	r3, #2
 800d740:	e02d      	b.n	800d79e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2224      	movs	r2, #36	@ 0x24
 800d74e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f022 0201 	bic.w	r2, r2, #1
 800d768:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	430a      	orrs	r2, r1
 800d77c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 f850 	bl	800d824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2220      	movs	r2, #32
 800d790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b084      	sub	sp, #16
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
 800d7ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d101      	bne.n	800d7be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d7ba:	2302      	movs	r3, #2
 800d7bc:	e02d      	b.n	800d81a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2224      	movs	r2, #36	@ 0x24
 800d7ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f022 0201 	bic.w	r2, r2, #1
 800d7e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	683a      	ldr	r2, [r7, #0]
 800d7f6:	430a      	orrs	r2, r1
 800d7f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 f812 	bl	800d824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	68fa      	ldr	r2, [r7, #12]
 800d806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2220      	movs	r2, #32
 800d80c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
	...

0800d824 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d830:	2b00      	cmp	r3, #0
 800d832:	d108      	bne.n	800d846 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d844:	e031      	b.n	800d8aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d846:	2308      	movs	r3, #8
 800d848:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d84a:	2308      	movs	r3, #8
 800d84c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	0e5b      	lsrs	r3, r3, #25
 800d856:	b2db      	uxtb	r3, r3
 800d858:	f003 0307 	and.w	r3, r3, #7
 800d85c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	0f5b      	lsrs	r3, r3, #29
 800d866:	b2db      	uxtb	r3, r3
 800d868:	f003 0307 	and.w	r3, r3, #7
 800d86c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d86e:	7bbb      	ldrb	r3, [r7, #14]
 800d870:	7b3a      	ldrb	r2, [r7, #12]
 800d872:	4911      	ldr	r1, [pc, #68]	@ (800d8b8 <UARTEx_SetNbDataToProcess+0x94>)
 800d874:	5c8a      	ldrb	r2, [r1, r2]
 800d876:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d87a:	7b3a      	ldrb	r2, [r7, #12]
 800d87c:	490f      	ldr	r1, [pc, #60]	@ (800d8bc <UARTEx_SetNbDataToProcess+0x98>)
 800d87e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d880:	fb93 f3f2 	sdiv	r3, r3, r2
 800d884:	b29a      	uxth	r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d88c:	7bfb      	ldrb	r3, [r7, #15]
 800d88e:	7b7a      	ldrb	r2, [r7, #13]
 800d890:	4909      	ldr	r1, [pc, #36]	@ (800d8b8 <UARTEx_SetNbDataToProcess+0x94>)
 800d892:	5c8a      	ldrb	r2, [r1, r2]
 800d894:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d898:	7b7a      	ldrb	r2, [r7, #13]
 800d89a:	4908      	ldr	r1, [pc, #32]	@ (800d8bc <UARTEx_SetNbDataToProcess+0x98>)
 800d89c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d89e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d8aa:	bf00      	nop
 800d8ac:	3714      	adds	r7, #20
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	080174e0 	.word	0x080174e0
 800d8bc:	080174e8 	.word	0x080174e8

0800d8c0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800d8c4:	4907      	ldr	r1, [pc, #28]	@ (800d8e4 <MX_FATFS_Init+0x24>)
 800d8c6:	4808      	ldr	r0, [pc, #32]	@ (800d8e8 <MX_FATFS_Init+0x28>)
 800d8c8:	f003 facc 	bl	8010e64 <FATFS_LinkDriver>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d002      	beq.n	800d8d8 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800d8d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d8d6:	e003      	b.n	800d8e0 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800d8d8:	4b04      	ldr	r3, [pc, #16]	@ (800d8ec <MX_FATFS_Init+0x2c>)
 800d8da:	2201      	movs	r2, #1
 800d8dc:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800d8de:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	20006bb8 	.word	0x20006bb8
 800d8e8:	20000010 	.word	0x20000010
 800d8ec:	20006bbc 	.word	0x20006bbc

0800d8f0 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d8f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	4603      	mov	r3, r0
 800d908:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800d90a:	79fb      	ldrb	r3, [r7, #7]
 800d90c:	4618      	mov	r0, r3
 800d90e:	f000 f9dd 	bl	800dccc <USER_SPI_initialize>
 800d912:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800d914:	4618      	mov	r0, r3
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	4603      	mov	r3, r0
 800d924:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800d926:	79fb      	ldrb	r3, [r7, #7]
 800d928:	4618      	mov	r0, r3
 800d92a:	f000 fab9 	bl	800dea0 <USER_SPI_status>
 800d92e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800d930:	4618      	mov	r0, r3
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60b9      	str	r1, [r7, #8]
 800d940:	607a      	str	r2, [r7, #4]
 800d942:	603b      	str	r3, [r7, #0]
 800d944:	4603      	mov	r3, r0
 800d946:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800d948:	7bf8      	ldrb	r0, [r7, #15]
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	68b9      	ldr	r1, [r7, #8]
 800d950:	f000 fabc 	bl	800decc <USER_SPI_read>
 800d954:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800d956:	4618      	mov	r0, r3
 800d958:	3710      	adds	r7, #16
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d95e:	b580      	push	{r7, lr}
 800d960:	b084      	sub	sp, #16
 800d962:	af00      	add	r7, sp, #0
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	607a      	str	r2, [r7, #4]
 800d968:	603b      	str	r3, [r7, #0]
 800d96a:	4603      	mov	r3, r0
 800d96c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800d96e:	7bf8      	ldrb	r0, [r7, #15]
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	68b9      	ldr	r1, [r7, #8]
 800d976:	f000 fb0f 	bl	800df98 <USER_SPI_write>
 800d97a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	4603      	mov	r3, r0
 800d98c:	603a      	str	r2, [r7, #0]
 800d98e:	71fb      	strb	r3, [r7, #7]
 800d990:	460b      	mov	r3, r1
 800d992:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800d994:	79b9      	ldrb	r1, [r7, #6]
 800d996:	79fb      	ldrb	r3, [r7, #7]
 800d998:	683a      	ldr	r2, [r7, #0]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f000 fb78 	bl	800e090 <USER_SPI_ioctl>
 800d9a0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3708      	adds	r7, #8
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
	...

0800d9ac <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800d9b4:	f7f7 fdc8 	bl	8005548 <HAL_GetTick>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	4a04      	ldr	r2, [pc, #16]	@ (800d9cc <SPI_Timer_On+0x20>)
 800d9bc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800d9be:	4a04      	ldr	r2, [pc, #16]	@ (800d9d0 <SPI_Timer_On+0x24>)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6013      	str	r3, [r2, #0]
}
 800d9c4:	bf00      	nop
 800d9c6:	3708      	adds	r7, #8
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	20006bc0 	.word	0x20006bc0
 800d9d0:	20006bc4 	.word	0x20006bc4

0800d9d4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800d9d8:	f7f7 fdb6 	bl	8005548 <HAL_GetTick>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	4b06      	ldr	r3, [pc, #24]	@ (800d9f8 <SPI_Timer_Status+0x24>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	1ad2      	subs	r2, r2, r3
 800d9e4:	4b05      	ldr	r3, [pc, #20]	@ (800d9fc <SPI_Timer_Status+0x28>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	bf34      	ite	cc
 800d9ec:	2301      	movcc	r3, #1
 800d9ee:	2300      	movcs	r3, #0
 800d9f0:	b2db      	uxtb	r3, r3
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	20006bc0 	.word	0x20006bc0
 800d9fc:	20006bc4 	.word	0x20006bc4

0800da00 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b086      	sub	sp, #24
 800da04:	af02      	add	r7, sp, #8
 800da06:	4603      	mov	r3, r0
 800da08:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 50);
 800da0a:	f107 020f 	add.w	r2, r7, #15
 800da0e:	1df9      	adds	r1, r7, #7
 800da10:	2332      	movs	r3, #50	@ 0x32
 800da12:	9300      	str	r3, [sp, #0]
 800da14:	2301      	movs	r3, #1
 800da16:	4804      	ldr	r0, [pc, #16]	@ (800da28 <xchg_spi+0x28>)
 800da18:	f7fb fdef 	bl	80095fa <HAL_SPI_TransmitReceive>
    return rxDat;
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	200068dc 	.word	0x200068dc

0800da2c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800da2c:	b590      	push	{r4, r7, lr}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800da36:	2300      	movs	r3, #0
 800da38:	60fb      	str	r3, [r7, #12]
 800da3a:	e00a      	b.n	800da52 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	18d4      	adds	r4, r2, r3
 800da42:	20ff      	movs	r0, #255	@ 0xff
 800da44:	f7ff ffdc 	bl	800da00 <xchg_spi>
 800da48:	4603      	mov	r3, r0
 800da4a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	3301      	adds	r3, #1
 800da50:	60fb      	str	r3, [r7, #12]
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	429a      	cmp	r2, r3
 800da58:	d3f0      	bcc.n	800da3c <rcvr_spi_multi+0x10>
	}
}
 800da5a:	bf00      	nop
 800da5c:	bf00      	nop
 800da5e:	3714      	adds	r7, #20
 800da60:	46bd      	mov	sp, r7
 800da62:	bd90      	pop	{r4, r7, pc}

0800da64 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800da6e:	2300      	movs	r3, #0
 800da70:	60fb      	str	r3, [r7, #12]
 800da72:	e009      	b.n	800da88 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	4413      	add	r3, r2
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7ff ffbf 	bl	800da00 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	3301      	adds	r3, #1
 800da86:	60fb      	str	r3, [r7, #12]
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d3f1      	bcc.n	800da74 <xmit_spi_multi+0x10>
	}
}
 800da90:	bf00      	nop
 800da92:	bf00      	nop
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b086      	sub	sp, #24
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800daa2:	f7f7 fd51 	bl	8005548 <HAL_GetTick>
 800daa6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800daac:	20ff      	movs	r0, #255	@ 0xff
 800daae:	f7ff ffa7 	bl	800da00 <xchg_spi>
 800dab2:	4603      	mov	r3, r0
 800dab4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800dab6:	7bfb      	ldrb	r3, [r7, #15]
 800dab8:	2bff      	cmp	r3, #255	@ 0xff
 800daba:	d007      	beq.n	800dacc <wait_ready+0x32>
 800dabc:	f7f7 fd44 	bl	8005548 <HAL_GetTick>
 800dac0:	4602      	mov	r2, r0
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	693a      	ldr	r2, [r7, #16]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d8ef      	bhi.n	800daac <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800dacc:	7bfb      	ldrb	r3, [r7, #15]
 800dace:	2bff      	cmp	r3, #255	@ 0xff
 800dad0:	bf0c      	ite	eq
 800dad2:	2301      	moveq	r3, #1
 800dad4:	2300      	movne	r3, #0
 800dad6:	b2db      	uxtb	r3, r3
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3718      	adds	r7, #24
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800dae4:	2201      	movs	r2, #1
 800dae6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800daea:	4804      	ldr	r0, [pc, #16]	@ (800dafc <despiselect+0x1c>)
 800daec:	f7f9 fe9a 	bl	8007824 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800daf0:	20ff      	movs	r0, #255	@ 0xff
 800daf2:	f7ff ff85 	bl	800da00 <xchg_spi>

}
 800daf6:	bf00      	nop
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	48000400 	.word	0x48000400

0800db00 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800db00:	b580      	push	{r7, lr}
 800db02:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800db04:	2200      	movs	r2, #0
 800db06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800db0a:	480a      	ldr	r0, [pc, #40]	@ (800db34 <spiselect+0x34>)
 800db0c:	f7f9 fe8a 	bl	8007824 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800db10:	20ff      	movs	r0, #255	@ 0xff
 800db12:	f7ff ff75 	bl	800da00 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800db16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800db1a:	f7ff ffbe 	bl	800da9a <wait_ready>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d001      	beq.n	800db28 <spiselect+0x28>
 800db24:	2301      	movs	r3, #1
 800db26:	e002      	b.n	800db2e <spiselect+0x2e>

	despiselect();
 800db28:	f7ff ffda 	bl	800dae0 <despiselect>
	return 0;	/* Timeout */
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	48000400 	.word	0x48000400

0800db38 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800db42:	20c8      	movs	r0, #200	@ 0xc8
 800db44:	f7ff ff32 	bl	800d9ac <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800db48:	20ff      	movs	r0, #255	@ 0xff
 800db4a:	f7ff ff59 	bl	800da00 <xchg_spi>
 800db4e:	4603      	mov	r3, r0
 800db50:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800db52:	7bfb      	ldrb	r3, [r7, #15]
 800db54:	2bff      	cmp	r3, #255	@ 0xff
 800db56:	d104      	bne.n	800db62 <rcvr_datablock+0x2a>
 800db58:	f7ff ff3c 	bl	800d9d4 <SPI_Timer_Status>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d1f2      	bne.n	800db48 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800db62:	7bfb      	ldrb	r3, [r7, #15]
 800db64:	2bfe      	cmp	r3, #254	@ 0xfe
 800db66:	d001      	beq.n	800db6c <rcvr_datablock+0x34>
 800db68:	2300      	movs	r3, #0
 800db6a:	e00a      	b.n	800db82 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800db6c:	6839      	ldr	r1, [r7, #0]
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7ff ff5c 	bl	800da2c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800db74:	20ff      	movs	r0, #255	@ 0xff
 800db76:	f7ff ff43 	bl	800da00 <xchg_spi>
 800db7a:	20ff      	movs	r0, #255	@ 0xff
 800db7c:	f7ff ff40 	bl	800da00 <xchg_spi>

	return 1;						/* Function succeeded */
 800db80:	2301      	movs	r3, #1
}
 800db82:	4618      	mov	r0, r3
 800db84:	3710      	adds	r7, #16
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b084      	sub	sp, #16
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	460b      	mov	r3, r1
 800db94:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800db96:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800db9a:	f7ff ff7e 	bl	800da9a <wait_ready>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d101      	bne.n	800dba8 <xmit_datablock+0x1e>
 800dba4:	2300      	movs	r3, #0
 800dba6:	e01e      	b.n	800dbe6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800dba8:	78fb      	ldrb	r3, [r7, #3]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7ff ff28 	bl	800da00 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800dbb0:	78fb      	ldrb	r3, [r7, #3]
 800dbb2:	2bfd      	cmp	r3, #253	@ 0xfd
 800dbb4:	d016      	beq.n	800dbe4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800dbb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff ff52 	bl	800da64 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800dbc0:	20ff      	movs	r0, #255	@ 0xff
 800dbc2:	f7ff ff1d 	bl	800da00 <xchg_spi>
 800dbc6:	20ff      	movs	r0, #255	@ 0xff
 800dbc8:	f7ff ff1a 	bl	800da00 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800dbcc:	20ff      	movs	r0, #255	@ 0xff
 800dbce:	f7ff ff17 	bl	800da00 <xchg_spi>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800dbd6:	7bfb      	ldrb	r3, [r7, #15]
 800dbd8:	f003 031f 	and.w	r3, r3, #31
 800dbdc:	2b05      	cmp	r3, #5
 800dbde:	d001      	beq.n	800dbe4 <xmit_datablock+0x5a>
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	e000      	b.n	800dbe6 <xmit_datablock+0x5c>
	}
	return 1;
 800dbe4:	2301      	movs	r3, #1
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	6039      	str	r1, [r7, #0]
 800dbf8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800dbfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	da0e      	bge.n	800dc20 <send_cmd+0x32>
		cmd &= 0x7F;
 800dc02:	79fb      	ldrb	r3, [r7, #7]
 800dc04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc08:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	2037      	movs	r0, #55	@ 0x37
 800dc0e:	f7ff ffee 	bl	800dbee <send_cmd>
 800dc12:	4603      	mov	r3, r0
 800dc14:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800dc16:	7bbb      	ldrb	r3, [r7, #14]
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d901      	bls.n	800dc20 <send_cmd+0x32>
 800dc1c:	7bbb      	ldrb	r3, [r7, #14]
 800dc1e:	e051      	b.n	800dcc4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800dc20:	79fb      	ldrb	r3, [r7, #7]
 800dc22:	2b0c      	cmp	r3, #12
 800dc24:	d008      	beq.n	800dc38 <send_cmd+0x4a>
		despiselect();
 800dc26:	f7ff ff5b 	bl	800dae0 <despiselect>
		if (!spiselect()) return 0xFF;
 800dc2a:	f7ff ff69 	bl	800db00 <spiselect>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d101      	bne.n	800dc38 <send_cmd+0x4a>
 800dc34:	23ff      	movs	r3, #255	@ 0xff
 800dc36:	e045      	b.n	800dcc4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff fedd 	bl	800da00 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	0e1b      	lsrs	r3, r3, #24
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff fed7 	bl	800da00 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	0c1b      	lsrs	r3, r3, #16
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff fed1 	bl	800da00 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	0a1b      	lsrs	r3, r3, #8
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7ff fecb 	bl	800da00 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7ff fec6 	bl	800da00 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800dc74:	2301      	movs	r3, #1
 800dc76:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800dc78:	79fb      	ldrb	r3, [r7, #7]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d101      	bne.n	800dc82 <send_cmd+0x94>
 800dc7e:	2395      	movs	r3, #149	@ 0x95
 800dc80:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800dc82:	79fb      	ldrb	r3, [r7, #7]
 800dc84:	2b08      	cmp	r3, #8
 800dc86:	d101      	bne.n	800dc8c <send_cmd+0x9e>
 800dc88:	2387      	movs	r3, #135	@ 0x87
 800dc8a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800dc8c:	7bfb      	ldrb	r3, [r7, #15]
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff feb6 	bl	800da00 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800dc94:	79fb      	ldrb	r3, [r7, #7]
 800dc96:	2b0c      	cmp	r3, #12
 800dc98:	d102      	bne.n	800dca0 <send_cmd+0xb2>
 800dc9a:	20ff      	movs	r0, #255	@ 0xff
 800dc9c:	f7ff feb0 	bl	800da00 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800dca0:	230a      	movs	r3, #10
 800dca2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800dca4:	20ff      	movs	r0, #255	@ 0xff
 800dca6:	f7ff feab 	bl	800da00 <xchg_spi>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800dcae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	da05      	bge.n	800dcc2 <send_cmd+0xd4>
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	73fb      	strb	r3, [r7, #15]
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1f0      	bne.n	800dca4 <send_cmd+0xb6>

	return res;							/* Return received response */
 800dcc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800dccc:	b590      	push	{r4, r7, lr}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800dcd6:	79fb      	ldrb	r3, [r7, #7]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d001      	beq.n	800dce0 <USER_SPI_initialize+0x14>
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e0d4      	b.n	800de8a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800dce0:	4b6c      	ldr	r3, [pc, #432]	@ (800de94 <USER_SPI_initialize+0x1c8>)
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	f003 0302 	and.w	r3, r3, #2
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d003      	beq.n	800dcf6 <USER_SPI_initialize+0x2a>
 800dcee:	4b69      	ldr	r3, [pc, #420]	@ (800de94 <USER_SPI_initialize+0x1c8>)
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	e0c9      	b.n	800de8a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800dcf6:	4b68      	ldr	r3, [pc, #416]	@ (800de98 <USER_SPI_initialize+0x1cc>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	4b66      	ldr	r3, [pc, #408]	@ (800de98 <USER_SPI_initialize+0x1cc>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 800dd04:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800dd06:	230a      	movs	r3, #10
 800dd08:	73fb      	strb	r3, [r7, #15]
 800dd0a:	e005      	b.n	800dd18 <USER_SPI_initialize+0x4c>
 800dd0c:	20ff      	movs	r0, #255	@ 0xff
 800dd0e:	f7ff fe77 	bl	800da00 <xchg_spi>
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
 800dd14:	3b01      	subs	r3, #1
 800dd16:	73fb      	strb	r3, [r7, #15]
 800dd18:	7bfb      	ldrb	r3, [r7, #15]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1f6      	bne.n	800dd0c <USER_SPI_initialize+0x40>

	ty = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800dd22:	2100      	movs	r1, #0
 800dd24:	2000      	movs	r0, #0
 800dd26:	f7ff ff62 	bl	800dbee <send_cmd>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	f040 808b 	bne.w	800de48 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800dd32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800dd36:	f7ff fe39 	bl	800d9ac <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800dd3a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800dd3e:	2008      	movs	r0, #8
 800dd40:	f7ff ff55 	bl	800dbee <send_cmd>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d151      	bne.n	800ddee <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	73fb      	strb	r3, [r7, #15]
 800dd4e:	e00d      	b.n	800dd6c <USER_SPI_initialize+0xa0>
 800dd50:	7bfc      	ldrb	r4, [r7, #15]
 800dd52:	20ff      	movs	r0, #255	@ 0xff
 800dd54:	f7ff fe54 	bl	800da00 <xchg_spi>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	f104 0310 	add.w	r3, r4, #16
 800dd60:	443b      	add	r3, r7
 800dd62:	f803 2c08 	strb.w	r2, [r3, #-8]
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	73fb      	strb	r3, [r7, #15]
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	2b03      	cmp	r3, #3
 800dd70:	d9ee      	bls.n	800dd50 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800dd72:	7abb      	ldrb	r3, [r7, #10]
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d167      	bne.n	800de48 <USER_SPI_initialize+0x17c>
 800dd78:	7afb      	ldrb	r3, [r7, #11]
 800dd7a:	2baa      	cmp	r3, #170	@ 0xaa
 800dd7c:	d164      	bne.n	800de48 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800dd7e:	bf00      	nop
 800dd80:	f7ff fe28 	bl	800d9d4 <SPI_Timer_Status>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d007      	beq.n	800dd9a <USER_SPI_initialize+0xce>
 800dd8a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800dd8e:	20a9      	movs	r0, #169	@ 0xa9
 800dd90:	f7ff ff2d 	bl	800dbee <send_cmd>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1f2      	bne.n	800dd80 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800dd9a:	f7ff fe1b 	bl	800d9d4 <SPI_Timer_Status>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d051      	beq.n	800de48 <USER_SPI_initialize+0x17c>
 800dda4:	2100      	movs	r1, #0
 800dda6:	203a      	movs	r0, #58	@ 0x3a
 800dda8:	f7ff ff21 	bl	800dbee <send_cmd>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d14a      	bne.n	800de48 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	73fb      	strb	r3, [r7, #15]
 800ddb6:	e00d      	b.n	800ddd4 <USER_SPI_initialize+0x108>
 800ddb8:	7bfc      	ldrb	r4, [r7, #15]
 800ddba:	20ff      	movs	r0, #255	@ 0xff
 800ddbc:	f7ff fe20 	bl	800da00 <xchg_spi>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	f104 0310 	add.w	r3, r4, #16
 800ddc8:	443b      	add	r3, r7
 800ddca:	f803 2c08 	strb.w	r2, [r3, #-8]
 800ddce:	7bfb      	ldrb	r3, [r7, #15]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	73fb      	strb	r3, [r7, #15]
 800ddd4:	7bfb      	ldrb	r3, [r7, #15]
 800ddd6:	2b03      	cmp	r3, #3
 800ddd8:	d9ee      	bls.n	800ddb8 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800ddda:	7a3b      	ldrb	r3, [r7, #8]
 800dddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <USER_SPI_initialize+0x11c>
 800dde4:	230c      	movs	r3, #12
 800dde6:	e000      	b.n	800ddea <USER_SPI_initialize+0x11e>
 800dde8:	2304      	movs	r3, #4
 800ddea:	737b      	strb	r3, [r7, #13]
 800ddec:	e02c      	b.n	800de48 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800ddee:	2100      	movs	r1, #0
 800ddf0:	20a9      	movs	r0, #169	@ 0xa9
 800ddf2:	f7ff fefc 	bl	800dbee <send_cmd>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d804      	bhi.n	800de06 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800ddfc:	2302      	movs	r3, #2
 800ddfe:	737b      	strb	r3, [r7, #13]
 800de00:	23a9      	movs	r3, #169	@ 0xa9
 800de02:	73bb      	strb	r3, [r7, #14]
 800de04:	e003      	b.n	800de0e <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800de06:	2301      	movs	r3, #1
 800de08:	737b      	strb	r3, [r7, #13]
 800de0a:	2301      	movs	r3, #1
 800de0c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800de0e:	bf00      	nop
 800de10:	f7ff fde0 	bl	800d9d4 <SPI_Timer_Status>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d007      	beq.n	800de2a <USER_SPI_initialize+0x15e>
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	2100      	movs	r1, #0
 800de1e:	4618      	mov	r0, r3
 800de20:	f7ff fee5 	bl	800dbee <send_cmd>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1f2      	bne.n	800de10 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800de2a:	f7ff fdd3 	bl	800d9d4 <SPI_Timer_Status>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d007      	beq.n	800de44 <USER_SPI_initialize+0x178>
 800de34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800de38:	2010      	movs	r0, #16
 800de3a:	f7ff fed8 	bl	800dbee <send_cmd>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d001      	beq.n	800de48 <USER_SPI_initialize+0x17c>
				ty = 0;
 800de44:	2300      	movs	r3, #0
 800de46:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 800de48:	4a14      	ldr	r2, [pc, #80]	@ (800de9c <USER_SPI_initialize+0x1d0>)
 800de4a:	7b7b      	ldrb	r3, [r7, #13]
 800de4c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800de4e:	f7ff fe47 	bl	800dae0 <despiselect>

	if (ty) {			/* OK */
 800de52:	7b7b      	ldrb	r3, [r7, #13]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d012      	beq.n	800de7e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800de58:	4b0f      	ldr	r3, [pc, #60]	@ (800de98 <USER_SPI_initialize+0x1cc>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800de62:	4b0d      	ldr	r3, [pc, #52]	@ (800de98 <USER_SPI_initialize+0x1cc>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f042 0220 	orr.w	r2, r2, #32
 800de6a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800de6c:	4b09      	ldr	r3, [pc, #36]	@ (800de94 <USER_SPI_initialize+0x1c8>)
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	b2db      	uxtb	r3, r3
 800de72:	f023 0301 	bic.w	r3, r3, #1
 800de76:	b2da      	uxtb	r2, r3
 800de78:	4b06      	ldr	r3, [pc, #24]	@ (800de94 <USER_SPI_initialize+0x1c8>)
 800de7a:	701a      	strb	r2, [r3, #0]
 800de7c:	e002      	b.n	800de84 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800de7e:	4b05      	ldr	r3, [pc, #20]	@ (800de94 <USER_SPI_initialize+0x1c8>)
 800de80:	2201      	movs	r2, #1
 800de82:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800de84:	4b03      	ldr	r3, [pc, #12]	@ (800de94 <USER_SPI_initialize+0x1c8>)
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	b2db      	uxtb	r3, r3
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3714      	adds	r7, #20
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd90      	pop	{r4, r7, pc}
 800de92:	bf00      	nop
 800de94:	20000024 	.word	0x20000024
 800de98:	200068dc 	.word	0x200068dc
 800de9c:	20006bbd 	.word	0x20006bbd

0800dea0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	4603      	mov	r3, r0
 800dea8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800deaa:	79fb      	ldrb	r3, [r7, #7]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d001      	beq.n	800deb4 <USER_SPI_status+0x14>
 800deb0:	2301      	movs	r3, #1
 800deb2:	e002      	b.n	800deba <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800deb4:	4b04      	ldr	r3, [pc, #16]	@ (800dec8 <USER_SPI_status+0x28>)
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	b2db      	uxtb	r3, r3
}
 800deba:	4618      	mov	r0, r3
 800debc:	370c      	adds	r7, #12
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr
 800dec6:	bf00      	nop
 800dec8:	20000024 	.word	0x20000024

0800decc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60b9      	str	r1, [r7, #8]
 800ded4:	607a      	str	r2, [r7, #4]
 800ded6:	603b      	str	r3, [r7, #0]
 800ded8:	4603      	mov	r3, r0
 800deda:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800dedc:	7bfb      	ldrb	r3, [r7, #15]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d102      	bne.n	800dee8 <USER_SPI_read+0x1c>
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d101      	bne.n	800deec <USER_SPI_read+0x20>
 800dee8:	2304      	movs	r3, #4
 800deea:	e04d      	b.n	800df88 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800deec:	4b28      	ldr	r3, [pc, #160]	@ (800df90 <USER_SPI_read+0xc4>)
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	b2db      	uxtb	r3, r3
 800def2:	f003 0301 	and.w	r3, r3, #1
 800def6:	2b00      	cmp	r3, #0
 800def8:	d001      	beq.n	800defe <USER_SPI_read+0x32>
 800defa:	2303      	movs	r3, #3
 800defc:	e044      	b.n	800df88 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800defe:	4b25      	ldr	r3, [pc, #148]	@ (800df94 <USER_SPI_read+0xc8>)
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	f003 0308 	and.w	r3, r3, #8
 800df06:	2b00      	cmp	r3, #0
 800df08:	d102      	bne.n	800df10 <USER_SPI_read+0x44>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	025b      	lsls	r3, r3, #9
 800df0e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	2b01      	cmp	r3, #1
 800df14:	d111      	bne.n	800df3a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800df16:	6879      	ldr	r1, [r7, #4]
 800df18:	2011      	movs	r0, #17
 800df1a:	f7ff fe68 	bl	800dbee <send_cmd>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d129      	bne.n	800df78 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800df24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800df28:	68b8      	ldr	r0, [r7, #8]
 800df2a:	f7ff fe05 	bl	800db38 <rcvr_datablock>
 800df2e:	4603      	mov	r3, r0
 800df30:	2b00      	cmp	r3, #0
 800df32:	d021      	beq.n	800df78 <USER_SPI_read+0xac>
			count = 0;
 800df34:	2300      	movs	r3, #0
 800df36:	603b      	str	r3, [r7, #0]
 800df38:	e01e      	b.n	800df78 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800df3a:	6879      	ldr	r1, [r7, #4]
 800df3c:	2012      	movs	r0, #18
 800df3e:	f7ff fe56 	bl	800dbee <send_cmd>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d117      	bne.n	800df78 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800df48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800df4c:	68b8      	ldr	r0, [r7, #8]
 800df4e:	f7ff fdf3 	bl	800db38 <rcvr_datablock>
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00a      	beq.n	800df6e <USER_SPI_read+0xa2>
				buff += 512;
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800df5e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	3b01      	subs	r3, #1
 800df64:	603b      	str	r3, [r7, #0]
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d1ed      	bne.n	800df48 <USER_SPI_read+0x7c>
 800df6c:	e000      	b.n	800df70 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800df6e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800df70:	2100      	movs	r1, #0
 800df72:	200c      	movs	r0, #12
 800df74:	f7ff fe3b 	bl	800dbee <send_cmd>
		}
	}
	despiselect();
 800df78:	f7ff fdb2 	bl	800dae0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	bf14      	ite	ne
 800df82:	2301      	movne	r3, #1
 800df84:	2300      	moveq	r3, #0
 800df86:	b2db      	uxtb	r3, r3
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3710      	adds	r7, #16
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	20000024 	.word	0x20000024
 800df94:	20006bbd 	.word	0x20006bbd

0800df98 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	60b9      	str	r1, [r7, #8]
 800dfa0:	607a      	str	r2, [r7, #4]
 800dfa2:	603b      	str	r3, [r7, #0]
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800dfa8:	7bfb      	ldrb	r3, [r7, #15]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d102      	bne.n	800dfb4 <USER_SPI_write+0x1c>
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <USER_SPI_write+0x20>
 800dfb4:	2304      	movs	r3, #4
 800dfb6:	e063      	b.n	800e080 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800dfb8:	4b33      	ldr	r3, [pc, #204]	@ (800e088 <USER_SPI_write+0xf0>)
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	f003 0301 	and.w	r3, r3, #1
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d001      	beq.n	800dfca <USER_SPI_write+0x32>
 800dfc6:	2303      	movs	r3, #3
 800dfc8:	e05a      	b.n	800e080 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800dfca:	4b2f      	ldr	r3, [pc, #188]	@ (800e088 <USER_SPI_write+0xf0>)
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	f003 0304 	and.w	r3, r3, #4
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <USER_SPI_write+0x44>
 800dfd8:	2302      	movs	r3, #2
 800dfda:	e051      	b.n	800e080 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800dfdc:	4b2b      	ldr	r3, [pc, #172]	@ (800e08c <USER_SPI_write+0xf4>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	f003 0308 	and.w	r3, r3, #8
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d102      	bne.n	800dfee <USER_SPI_write+0x56>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	025b      	lsls	r3, r3, #9
 800dfec:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d110      	bne.n	800e016 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800dff4:	6879      	ldr	r1, [r7, #4]
 800dff6:	2018      	movs	r0, #24
 800dff8:	f7ff fdf9 	bl	800dbee <send_cmd>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d136      	bne.n	800e070 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800e002:	21fe      	movs	r1, #254	@ 0xfe
 800e004:	68b8      	ldr	r0, [r7, #8]
 800e006:	f7ff fdc0 	bl	800db8a <xmit_datablock>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d02f      	beq.n	800e070 <USER_SPI_write+0xd8>
			count = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	603b      	str	r3, [r7, #0]
 800e014:	e02c      	b.n	800e070 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800e016:	4b1d      	ldr	r3, [pc, #116]	@ (800e08c <USER_SPI_write+0xf4>)
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	f003 0306 	and.w	r3, r3, #6
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d003      	beq.n	800e02a <USER_SPI_write+0x92>
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	2097      	movs	r0, #151	@ 0x97
 800e026:	f7ff fde2 	bl	800dbee <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800e02a:	6879      	ldr	r1, [r7, #4]
 800e02c:	2019      	movs	r0, #25
 800e02e:	f7ff fdde 	bl	800dbee <send_cmd>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d11b      	bne.n	800e070 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800e038:	21fc      	movs	r1, #252	@ 0xfc
 800e03a:	68b8      	ldr	r0, [r7, #8]
 800e03c:	f7ff fda5 	bl	800db8a <xmit_datablock>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00a      	beq.n	800e05c <USER_SPI_write+0xc4>
				buff += 512;
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e04c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	3b01      	subs	r3, #1
 800e052:	603b      	str	r3, [r7, #0]
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1ee      	bne.n	800e038 <USER_SPI_write+0xa0>
 800e05a:	e000      	b.n	800e05e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800e05c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800e05e:	21fd      	movs	r1, #253	@ 0xfd
 800e060:	2000      	movs	r0, #0
 800e062:	f7ff fd92 	bl	800db8a <xmit_datablock>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d101      	bne.n	800e070 <USER_SPI_write+0xd8>
 800e06c:	2301      	movs	r3, #1
 800e06e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800e070:	f7ff fd36 	bl	800dae0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	bf14      	ite	ne
 800e07a:	2301      	movne	r3, #1
 800e07c:	2300      	moveq	r3, #0
 800e07e:	b2db      	uxtb	r3, r3
}
 800e080:	4618      	mov	r0, r3
 800e082:	3710      	adds	r7, #16
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	20000024 	.word	0x20000024
 800e08c:	20006bbd 	.word	0x20006bbd

0800e090 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b08c      	sub	sp, #48	@ 0x30
 800e094:	af00      	add	r7, sp, #0
 800e096:	4603      	mov	r3, r0
 800e098:	603a      	str	r2, [r7, #0]
 800e09a:	71fb      	strb	r3, [r7, #7]
 800e09c:	460b      	mov	r3, r1
 800e09e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800e0a0:	79fb      	ldrb	r3, [r7, #7]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d001      	beq.n	800e0aa <USER_SPI_ioctl+0x1a>
 800e0a6:	2304      	movs	r3, #4
 800e0a8:	e15a      	b.n	800e360 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e0aa:	4baf      	ldr	r3, [pc, #700]	@ (800e368 <USER_SPI_ioctl+0x2d8>)
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	f003 0301 	and.w	r3, r3, #1
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d001      	beq.n	800e0bc <USER_SPI_ioctl+0x2c>
 800e0b8:	2303      	movs	r3, #3
 800e0ba:	e151      	b.n	800e360 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800e0c2:	79bb      	ldrb	r3, [r7, #6]
 800e0c4:	2b04      	cmp	r3, #4
 800e0c6:	f200 8136 	bhi.w	800e336 <USER_SPI_ioctl+0x2a6>
 800e0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800e0d0 <USER_SPI_ioctl+0x40>)
 800e0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d0:	0800e0e5 	.word	0x0800e0e5
 800e0d4:	0800e0f9 	.word	0x0800e0f9
 800e0d8:	0800e337 	.word	0x0800e337
 800e0dc:	0800e1a5 	.word	0x0800e1a5
 800e0e0:	0800e29b 	.word	0x0800e29b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800e0e4:	f7ff fd0c 	bl	800db00 <spiselect>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	f000 8127 	beq.w	800e33e <USER_SPI_ioctl+0x2ae>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800e0f6:	e122      	b.n	800e33e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	2009      	movs	r0, #9
 800e0fc:	f7ff fd77 	bl	800dbee <send_cmd>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	f040 811d 	bne.w	800e342 <USER_SPI_ioctl+0x2b2>
 800e108:	f107 030c 	add.w	r3, r7, #12
 800e10c:	2110      	movs	r1, #16
 800e10e:	4618      	mov	r0, r3
 800e110:	f7ff fd12 	bl	800db38 <rcvr_datablock>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	f000 8113 	beq.w	800e342 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800e11c:	7b3b      	ldrb	r3, [r7, #12]
 800e11e:	099b      	lsrs	r3, r3, #6
 800e120:	b2db      	uxtb	r3, r3
 800e122:	2b01      	cmp	r3, #1
 800e124:	d111      	bne.n	800e14a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800e126:	7d7b      	ldrb	r3, [r7, #21]
 800e128:	461a      	mov	r2, r3
 800e12a:	7d3b      	ldrb	r3, [r7, #20]
 800e12c:	021b      	lsls	r3, r3, #8
 800e12e:	4413      	add	r3, r2
 800e130:	461a      	mov	r2, r3
 800e132:	7cfb      	ldrb	r3, [r7, #19]
 800e134:	041b      	lsls	r3, r3, #16
 800e136:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800e13a:	4413      	add	r3, r2
 800e13c:	3301      	adds	r3, #1
 800e13e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	029a      	lsls	r2, r3, #10
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	601a      	str	r2, [r3, #0]
 800e148:	e028      	b.n	800e19c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e14a:	7c7b      	ldrb	r3, [r7, #17]
 800e14c:	f003 030f 	and.w	r3, r3, #15
 800e150:	b2da      	uxtb	r2, r3
 800e152:	7dbb      	ldrb	r3, [r7, #22]
 800e154:	09db      	lsrs	r3, r3, #7
 800e156:	b2db      	uxtb	r3, r3
 800e158:	4413      	add	r3, r2
 800e15a:	b2da      	uxtb	r2, r3
 800e15c:	7d7b      	ldrb	r3, [r7, #21]
 800e15e:	005b      	lsls	r3, r3, #1
 800e160:	b2db      	uxtb	r3, r3
 800e162:	f003 0306 	and.w	r3, r3, #6
 800e166:	b2db      	uxtb	r3, r3
 800e168:	4413      	add	r3, r2
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	3302      	adds	r3, #2
 800e16e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800e172:	7d3b      	ldrb	r3, [r7, #20]
 800e174:	099b      	lsrs	r3, r3, #6
 800e176:	b2db      	uxtb	r3, r3
 800e178:	461a      	mov	r2, r3
 800e17a:	7cfb      	ldrb	r3, [r7, #19]
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	441a      	add	r2, r3
 800e180:	7cbb      	ldrb	r3, [r7, #18]
 800e182:	029b      	lsls	r3, r3, #10
 800e184:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e188:	4413      	add	r3, r2
 800e18a:	3301      	adds	r3, #1
 800e18c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800e18e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e192:	3b09      	subs	r3, #9
 800e194:	69fa      	ldr	r2, [r7, #28]
 800e196:	409a      	lsls	r2, r3
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800e19c:	2300      	movs	r3, #0
 800e19e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800e1a2:	e0ce      	b.n	800e342 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800e1a4:	4b71      	ldr	r3, [pc, #452]	@ (800e36c <USER_SPI_ioctl+0x2dc>)
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	f003 0304 	and.w	r3, r3, #4
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d031      	beq.n	800e214 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	208d      	movs	r0, #141	@ 0x8d
 800e1b4:	f7ff fd1b 	bl	800dbee <send_cmd>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f040 80c3 	bne.w	800e346 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800e1c0:	20ff      	movs	r0, #255	@ 0xff
 800e1c2:	f7ff fc1d 	bl	800da00 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800e1c6:	f107 030c 	add.w	r3, r7, #12
 800e1ca:	2110      	movs	r1, #16
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7ff fcb3 	bl	800db38 <rcvr_datablock>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	f000 80b6 	beq.w	800e346 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800e1da:	2330      	movs	r3, #48	@ 0x30
 800e1dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800e1e0:	e007      	b.n	800e1f2 <USER_SPI_ioctl+0x162>
 800e1e2:	20ff      	movs	r0, #255	@ 0xff
 800e1e4:	f7ff fc0c 	bl	800da00 <xchg_spi>
 800e1e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e1ec:	3b01      	subs	r3, #1
 800e1ee:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800e1f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1f3      	bne.n	800e1e2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800e1fa:	7dbb      	ldrb	r3, [r7, #22]
 800e1fc:	091b      	lsrs	r3, r3, #4
 800e1fe:	b2db      	uxtb	r3, r3
 800e200:	461a      	mov	r2, r3
 800e202:	2310      	movs	r3, #16
 800e204:	fa03 f202 	lsl.w	r2, r3, r2
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800e20c:	2300      	movs	r3, #0
 800e20e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800e212:	e098      	b.n	800e346 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800e214:	2100      	movs	r1, #0
 800e216:	2009      	movs	r0, #9
 800e218:	f7ff fce9 	bl	800dbee <send_cmd>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	f040 8091 	bne.w	800e346 <USER_SPI_ioctl+0x2b6>
 800e224:	f107 030c 	add.w	r3, r7, #12
 800e228:	2110      	movs	r1, #16
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7ff fc84 	bl	800db38 <rcvr_datablock>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	f000 8087 	beq.w	800e346 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800e238:	4b4c      	ldr	r3, [pc, #304]	@ (800e36c <USER_SPI_ioctl+0x2dc>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	f003 0302 	and.w	r3, r3, #2
 800e240:	2b00      	cmp	r3, #0
 800e242:	d012      	beq.n	800e26a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800e244:	7dbb      	ldrb	r3, [r7, #22]
 800e246:	005b      	lsls	r3, r3, #1
 800e248:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800e24c:	7dfa      	ldrb	r2, [r7, #23]
 800e24e:	09d2      	lsrs	r2, r2, #7
 800e250:	b2d2      	uxtb	r2, r2
 800e252:	4413      	add	r3, r2
 800e254:	1c5a      	adds	r2, r3, #1
 800e256:	7e7b      	ldrb	r3, [r7, #25]
 800e258:	099b      	lsrs	r3, r3, #6
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	3b01      	subs	r3, #1
 800e25e:	fa02 f303 	lsl.w	r3, r2, r3
 800e262:	461a      	mov	r2, r3
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	601a      	str	r2, [r3, #0]
 800e268:	e013      	b.n	800e292 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800e26a:	7dbb      	ldrb	r3, [r7, #22]
 800e26c:	109b      	asrs	r3, r3, #2
 800e26e:	b29b      	uxth	r3, r3
 800e270:	f003 031f 	and.w	r3, r3, #31
 800e274:	3301      	adds	r3, #1
 800e276:	7dfa      	ldrb	r2, [r7, #23]
 800e278:	00d2      	lsls	r2, r2, #3
 800e27a:	f002 0218 	and.w	r2, r2, #24
 800e27e:	7df9      	ldrb	r1, [r7, #23]
 800e280:	0949      	lsrs	r1, r1, #5
 800e282:	b2c9      	uxtb	r1, r1
 800e284:	440a      	add	r2, r1
 800e286:	3201      	adds	r2, #1
 800e288:	fb02 f303 	mul.w	r3, r2, r3
 800e28c:	461a      	mov	r2, r3
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800e292:	2300      	movs	r3, #0
 800e294:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800e298:	e055      	b.n	800e346 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e29a:	4b34      	ldr	r3, [pc, #208]	@ (800e36c <USER_SPI_ioctl+0x2dc>)
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	f003 0306 	and.w	r3, r3, #6
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d051      	beq.n	800e34a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e2a6:	f107 020c 	add.w	r2, r7, #12
 800e2aa:	79fb      	ldrb	r3, [r7, #7]
 800e2ac:	210b      	movs	r1, #11
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7ff feee 	bl	800e090 <USER_SPI_ioctl>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d149      	bne.n	800e34e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e2ba:	7b3b      	ldrb	r3, [r7, #12]
 800e2bc:	099b      	lsrs	r3, r3, #6
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d104      	bne.n	800e2ce <USER_SPI_ioctl+0x23e>
 800e2c4:	7dbb      	ldrb	r3, [r7, #22]
 800e2c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d041      	beq.n	800e352 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	623b      	str	r3, [r7, #32]
 800e2d2:	6a3b      	ldr	r3, [r7, #32]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e2d8:	6a3b      	ldr	r3, [r7, #32]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800e2de:	4b23      	ldr	r3, [pc, #140]	@ (800e36c <USER_SPI_ioctl+0x2dc>)
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	f003 0308 	and.w	r3, r3, #8
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d105      	bne.n	800e2f6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800e2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ec:	025b      	lsls	r3, r3, #9
 800e2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f2:	025b      	lsls	r3, r3, #9
 800e2f4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800e2f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e2f8:	2020      	movs	r0, #32
 800e2fa:	f7ff fc78 	bl	800dbee <send_cmd>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d128      	bne.n	800e356 <USER_SPI_ioctl+0x2c6>
 800e304:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e306:	2021      	movs	r0, #33	@ 0x21
 800e308:	f7ff fc71 	bl	800dbee <send_cmd>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d121      	bne.n	800e356 <USER_SPI_ioctl+0x2c6>
 800e312:	2100      	movs	r1, #0
 800e314:	2026      	movs	r0, #38	@ 0x26
 800e316:	f7ff fc6a 	bl	800dbee <send_cmd>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d11a      	bne.n	800e356 <USER_SPI_ioctl+0x2c6>
 800e320:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e324:	f7ff fbb9 	bl	800da9a <wait_ready>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d013      	beq.n	800e356 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800e32e:	2300      	movs	r3, #0
 800e330:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800e334:	e00f      	b.n	800e356 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800e336:	2304      	movs	r3, #4
 800e338:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e33c:	e00c      	b.n	800e358 <USER_SPI_ioctl+0x2c8>
		break;
 800e33e:	bf00      	nop
 800e340:	e00a      	b.n	800e358 <USER_SPI_ioctl+0x2c8>
		break;
 800e342:	bf00      	nop
 800e344:	e008      	b.n	800e358 <USER_SPI_ioctl+0x2c8>
		break;
 800e346:	bf00      	nop
 800e348:	e006      	b.n	800e358 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e34a:	bf00      	nop
 800e34c:	e004      	b.n	800e358 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e34e:	bf00      	nop
 800e350:	e002      	b.n	800e358 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e352:	bf00      	nop
 800e354:	e000      	b.n	800e358 <USER_SPI_ioctl+0x2c8>
		break;
 800e356:	bf00      	nop
	}

	despiselect();
 800e358:	f7ff fbc2 	bl	800dae0 <despiselect>

	return res;
 800e35c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e360:	4618      	mov	r0, r3
 800e362:	3730      	adds	r7, #48	@ 0x30
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20000024 	.word	0x20000024
 800e36c:	20006bbd 	.word	0x20006bbd

0800e370 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	4603      	mov	r3, r0
 800e378:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e37a:	79fb      	ldrb	r3, [r7, #7]
 800e37c:	4a08      	ldr	r2, [pc, #32]	@ (800e3a0 <disk_status+0x30>)
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	4413      	add	r3, r2
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	79fa      	ldrb	r2, [r7, #7]
 800e388:	4905      	ldr	r1, [pc, #20]	@ (800e3a0 <disk_status+0x30>)
 800e38a:	440a      	add	r2, r1
 800e38c:	7a12      	ldrb	r2, [r2, #8]
 800e38e:	4610      	mov	r0, r2
 800e390:	4798      	blx	r3
 800e392:	4603      	mov	r3, r0
 800e394:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e396:	7bfb      	ldrb	r3, [r7, #15]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	20006bf0 	.word	0x20006bf0

0800e3a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e3b2:	79fb      	ldrb	r3, [r7, #7]
 800e3b4:	4a0d      	ldr	r2, [pc, #52]	@ (800e3ec <disk_initialize+0x48>)
 800e3b6:	5cd3      	ldrb	r3, [r2, r3]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d111      	bne.n	800e3e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e3bc:	79fb      	ldrb	r3, [r7, #7]
 800e3be:	4a0b      	ldr	r2, [pc, #44]	@ (800e3ec <disk_initialize+0x48>)
 800e3c0:	2101      	movs	r1, #1
 800e3c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e3c4:	79fb      	ldrb	r3, [r7, #7]
 800e3c6:	4a09      	ldr	r2, [pc, #36]	@ (800e3ec <disk_initialize+0x48>)
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	4413      	add	r3, r2
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	79fa      	ldrb	r2, [r7, #7]
 800e3d2:	4906      	ldr	r1, [pc, #24]	@ (800e3ec <disk_initialize+0x48>)
 800e3d4:	440a      	add	r2, r1
 800e3d6:	7a12      	ldrb	r2, [r2, #8]
 800e3d8:	4610      	mov	r0, r2
 800e3da:	4798      	blx	r3
 800e3dc:	4603      	mov	r3, r0
 800e3de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	20006bf0 	.word	0x20006bf0

0800e3f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e3f0:	b590      	push	{r4, r7, lr}
 800e3f2:	b087      	sub	sp, #28
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60b9      	str	r1, [r7, #8]
 800e3f8:	607a      	str	r2, [r7, #4]
 800e3fa:	603b      	str	r3, [r7, #0]
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	4a0a      	ldr	r2, [pc, #40]	@ (800e42c <disk_read+0x3c>)
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4413      	add	r3, r2
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	689c      	ldr	r4, [r3, #8]
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
 800e40e:	4a07      	ldr	r2, [pc, #28]	@ (800e42c <disk_read+0x3c>)
 800e410:	4413      	add	r3, r2
 800e412:	7a18      	ldrb	r0, [r3, #8]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	68b9      	ldr	r1, [r7, #8]
 800e41a:	47a0      	blx	r4
 800e41c:	4603      	mov	r3, r0
 800e41e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e420:	7dfb      	ldrb	r3, [r7, #23]
}
 800e422:	4618      	mov	r0, r3
 800e424:	371c      	adds	r7, #28
 800e426:	46bd      	mov	sp, r7
 800e428:	bd90      	pop	{r4, r7, pc}
 800e42a:	bf00      	nop
 800e42c:	20006bf0 	.word	0x20006bf0

0800e430 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e430:	b590      	push	{r4, r7, lr}
 800e432:	b087      	sub	sp, #28
 800e434:	af00      	add	r7, sp, #0
 800e436:	60b9      	str	r1, [r7, #8]
 800e438:	607a      	str	r2, [r7, #4]
 800e43a:	603b      	str	r3, [r7, #0]
 800e43c:	4603      	mov	r3, r0
 800e43e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e440:	7bfb      	ldrb	r3, [r7, #15]
 800e442:	4a0a      	ldr	r2, [pc, #40]	@ (800e46c <disk_write+0x3c>)
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4413      	add	r3, r2
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	68dc      	ldr	r4, [r3, #12]
 800e44c:	7bfb      	ldrb	r3, [r7, #15]
 800e44e:	4a07      	ldr	r2, [pc, #28]	@ (800e46c <disk_write+0x3c>)
 800e450:	4413      	add	r3, r2
 800e452:	7a18      	ldrb	r0, [r3, #8]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	68b9      	ldr	r1, [r7, #8]
 800e45a:	47a0      	blx	r4
 800e45c:	4603      	mov	r3, r0
 800e45e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e460:	7dfb      	ldrb	r3, [r7, #23]
}
 800e462:	4618      	mov	r0, r3
 800e464:	371c      	adds	r7, #28
 800e466:	46bd      	mov	sp, r7
 800e468:	bd90      	pop	{r4, r7, pc}
 800e46a:	bf00      	nop
 800e46c:	20006bf0 	.word	0x20006bf0

0800e470 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	4603      	mov	r3, r0
 800e478:	603a      	str	r2, [r7, #0]
 800e47a:	71fb      	strb	r3, [r7, #7]
 800e47c:	460b      	mov	r3, r1
 800e47e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e480:	79fb      	ldrb	r3, [r7, #7]
 800e482:	4a09      	ldr	r2, [pc, #36]	@ (800e4a8 <disk_ioctl+0x38>)
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	691b      	ldr	r3, [r3, #16]
 800e48c:	79fa      	ldrb	r2, [r7, #7]
 800e48e:	4906      	ldr	r1, [pc, #24]	@ (800e4a8 <disk_ioctl+0x38>)
 800e490:	440a      	add	r2, r1
 800e492:	7a10      	ldrb	r0, [r2, #8]
 800e494:	79b9      	ldrb	r1, [r7, #6]
 800e496:	683a      	ldr	r2, [r7, #0]
 800e498:	4798      	blx	r3
 800e49a:	4603      	mov	r3, r0
 800e49c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3710      	adds	r7, #16
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	20006bf0 	.word	0x20006bf0

0800e4ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b085      	sub	sp, #20
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e4bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e4c0:	021b      	lsls	r3, r3, #8
 800e4c2:	b21a      	sxth	r2, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	b21b      	sxth	r3, r3
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	b21b      	sxth	r3, r3
 800e4ce:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e4d0:	89fb      	ldrh	r3, [r7, #14]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr

0800e4de <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e4de:	b480      	push	{r7}
 800e4e0:	b085      	sub	sp, #20
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	3303      	adds	r3, #3
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	021b      	lsls	r3, r3, #8
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	3202      	adds	r2, #2
 800e4f6:	7812      	ldrb	r2, [r2, #0]
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	021b      	lsls	r3, r3, #8
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	3201      	adds	r2, #1
 800e504:	7812      	ldrb	r2, [r2, #0]
 800e506:	4313      	orrs	r3, r2
 800e508:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	021b      	lsls	r3, r3, #8
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	7812      	ldrb	r2, [r2, #0]
 800e512:	4313      	orrs	r3, r2
 800e514:	60fb      	str	r3, [r7, #12]
	return rv;
 800e516:	68fb      	ldr	r3, [r7, #12]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	460b      	mov	r3, r1
 800e52e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	1c5a      	adds	r2, r3, #1
 800e534:	607a      	str	r2, [r7, #4]
 800e536:	887a      	ldrh	r2, [r7, #2]
 800e538:	b2d2      	uxtb	r2, r2
 800e53a:	701a      	strb	r2, [r3, #0]
 800e53c:	887b      	ldrh	r3, [r7, #2]
 800e53e:	0a1b      	lsrs	r3, r3, #8
 800e540:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	1c5a      	adds	r2, r3, #1
 800e546:	607a      	str	r2, [r7, #4]
 800e548:	887a      	ldrh	r2, [r7, #2]
 800e54a:	b2d2      	uxtb	r2, r2
 800e54c:	701a      	strb	r2, [r3, #0]
}
 800e54e:	bf00      	nop
 800e550:	370c      	adds	r7, #12
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr

0800e55a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e55a:	b480      	push	{r7}
 800e55c:	b083      	sub	sp, #12
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
 800e562:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	1c5a      	adds	r2, r3, #1
 800e568:	607a      	str	r2, [r7, #4]
 800e56a:	683a      	ldr	r2, [r7, #0]
 800e56c:	b2d2      	uxtb	r2, r2
 800e56e:	701a      	strb	r2, [r3, #0]
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	0a1b      	lsrs	r3, r3, #8
 800e574:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	1c5a      	adds	r2, r3, #1
 800e57a:	607a      	str	r2, [r7, #4]
 800e57c:	683a      	ldr	r2, [r7, #0]
 800e57e:	b2d2      	uxtb	r2, r2
 800e580:	701a      	strb	r2, [r3, #0]
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	0a1b      	lsrs	r3, r3, #8
 800e586:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	1c5a      	adds	r2, r3, #1
 800e58c:	607a      	str	r2, [r7, #4]
 800e58e:	683a      	ldr	r2, [r7, #0]
 800e590:	b2d2      	uxtb	r2, r2
 800e592:	701a      	strb	r2, [r3, #0]
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	0a1b      	lsrs	r3, r3, #8
 800e598:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	1c5a      	adds	r2, r3, #1
 800e59e:	607a      	str	r2, [r7, #4]
 800e5a0:	683a      	ldr	r2, [r7, #0]
 800e5a2:	b2d2      	uxtb	r2, r2
 800e5a4:	701a      	strb	r2, [r3, #0]
}
 800e5a6:	bf00      	nop
 800e5a8:	370c      	adds	r7, #12
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr

0800e5b2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e5b2:	b480      	push	{r7}
 800e5b4:	b087      	sub	sp, #28
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	60f8      	str	r0, [r7, #12]
 800e5ba:	60b9      	str	r1, [r7, #8]
 800e5bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d00d      	beq.n	800e5e8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e5cc:	693a      	ldr	r2, [r7, #16]
 800e5ce:	1c53      	adds	r3, r2, #1
 800e5d0:	613b      	str	r3, [r7, #16]
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	1c59      	adds	r1, r3, #1
 800e5d6:	6179      	str	r1, [r7, #20]
 800e5d8:	7812      	ldrb	r2, [r2, #0]
 800e5da:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	607b      	str	r3, [r7, #4]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1f1      	bne.n	800e5cc <mem_cpy+0x1a>
	}
}
 800e5e8:	bf00      	nop
 800e5ea:	371c      	adds	r7, #28
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e5f4:	b480      	push	{r7}
 800e5f6:	b087      	sub	sp, #28
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	1c5a      	adds	r2, r3, #1
 800e608:	617a      	str	r2, [r7, #20]
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	b2d2      	uxtb	r2, r2
 800e60e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	3b01      	subs	r3, #1
 800e614:	607b      	str	r3, [r7, #4]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d1f3      	bne.n	800e604 <mem_set+0x10>
}
 800e61c:	bf00      	nop
 800e61e:	bf00      	nop
 800e620:	371c      	adds	r7, #28
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr

0800e62a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e62a:	b480      	push	{r7}
 800e62c:	b089      	sub	sp, #36	@ 0x24
 800e62e:	af00      	add	r7, sp, #0
 800e630:	60f8      	str	r0, [r7, #12]
 800e632:	60b9      	str	r1, [r7, #8]
 800e634:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	61fb      	str	r3, [r7, #28]
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e63e:	2300      	movs	r3, #0
 800e640:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	1c5a      	adds	r2, r3, #1
 800e646:	61fa      	str	r2, [r7, #28]
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	4619      	mov	r1, r3
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	1c5a      	adds	r2, r3, #1
 800e650:	61ba      	str	r2, [r7, #24]
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	1acb      	subs	r3, r1, r3
 800e656:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	3b01      	subs	r3, #1
 800e65c:	607b      	str	r3, [r7, #4]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d002      	beq.n	800e66a <mem_cmp+0x40>
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d0eb      	beq.n	800e642 <mem_cmp+0x18>

	return r;
 800e66a:	697b      	ldr	r3, [r7, #20]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3724      	adds	r7, #36	@ 0x24
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e682:	e002      	b.n	800e68a <chk_chr+0x12>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	3301      	adds	r3, #1
 800e688:	607b      	str	r3, [r7, #4]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d005      	beq.n	800e69e <chk_chr+0x26>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	461a      	mov	r2, r3
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d1f2      	bne.n	800e684 <chk_chr+0xc>
	return *str;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	370c      	adds	r7, #12
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
	...

0800e6b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b085      	sub	sp, #20
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	60bb      	str	r3, [r7, #8]
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	60fb      	str	r3, [r7, #12]
 800e6c2:	e029      	b.n	800e718 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e6c4:	4a27      	ldr	r2, [pc, #156]	@ (800e764 <chk_lock+0xb4>)
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	011b      	lsls	r3, r3, #4
 800e6ca:	4413      	add	r3, r2
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d01d      	beq.n	800e70e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e6d2:	4a24      	ldr	r2, [pc, #144]	@ (800e764 <chk_lock+0xb4>)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	011b      	lsls	r3, r3, #4
 800e6d8:	4413      	add	r3, r2
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d116      	bne.n	800e712 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e6e4:	4a1f      	ldr	r2, [pc, #124]	@ (800e764 <chk_lock+0xb4>)
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	011b      	lsls	r3, r3, #4
 800e6ea:	4413      	add	r3, r2
 800e6ec:	3304      	adds	r3, #4
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d10c      	bne.n	800e712 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e6f8:	4a1a      	ldr	r2, [pc, #104]	@ (800e764 <chk_lock+0xb4>)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	011b      	lsls	r3, r3, #4
 800e6fe:	4413      	add	r3, r2
 800e700:	3308      	adds	r3, #8
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e708:	429a      	cmp	r2, r3
 800e70a:	d102      	bne.n	800e712 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e70c:	e007      	b.n	800e71e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e70e:	2301      	movs	r3, #1
 800e710:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	3301      	adds	r3, #1
 800e716:	60fb      	str	r3, [r7, #12]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2b01      	cmp	r3, #1
 800e71c:	d9d2      	bls.n	800e6c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2b02      	cmp	r3, #2
 800e722:	d109      	bne.n	800e738 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d102      	bne.n	800e730 <chk_lock+0x80>
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	2b02      	cmp	r3, #2
 800e72e:	d101      	bne.n	800e734 <chk_lock+0x84>
 800e730:	2300      	movs	r3, #0
 800e732:	e010      	b.n	800e756 <chk_lock+0xa6>
 800e734:	2312      	movs	r3, #18
 800e736:	e00e      	b.n	800e756 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d108      	bne.n	800e750 <chk_lock+0xa0>
 800e73e:	4a09      	ldr	r2, [pc, #36]	@ (800e764 <chk_lock+0xb4>)
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	011b      	lsls	r3, r3, #4
 800e744:	4413      	add	r3, r2
 800e746:	330c      	adds	r3, #12
 800e748:	881b      	ldrh	r3, [r3, #0]
 800e74a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e74e:	d101      	bne.n	800e754 <chk_lock+0xa4>
 800e750:	2310      	movs	r3, #16
 800e752:	e000      	b.n	800e756 <chk_lock+0xa6>
 800e754:	2300      	movs	r3, #0
}
 800e756:	4618      	mov	r0, r3
 800e758:	3714      	adds	r7, #20
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr
 800e762:	bf00      	nop
 800e764:	20006bd0 	.word	0x20006bd0

0800e768 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e76e:	2300      	movs	r3, #0
 800e770:	607b      	str	r3, [r7, #4]
 800e772:	e002      	b.n	800e77a <enq_lock+0x12>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	3301      	adds	r3, #1
 800e778:	607b      	str	r3, [r7, #4]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d806      	bhi.n	800e78e <enq_lock+0x26>
 800e780:	4a09      	ldr	r2, [pc, #36]	@ (800e7a8 <enq_lock+0x40>)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	011b      	lsls	r3, r3, #4
 800e786:	4413      	add	r3, r2
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d1f2      	bne.n	800e774 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2b02      	cmp	r3, #2
 800e792:	bf14      	ite	ne
 800e794:	2301      	movne	r3, #1
 800e796:	2300      	moveq	r3, #0
 800e798:	b2db      	uxtb	r3, r3
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	370c      	adds	r7, #12
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr
 800e7a6:	bf00      	nop
 800e7a8:	20006bd0 	.word	0x20006bd0

0800e7ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b085      	sub	sp, #20
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	60fb      	str	r3, [r7, #12]
 800e7ba:	e01f      	b.n	800e7fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e7bc:	4a41      	ldr	r2, [pc, #260]	@ (800e8c4 <inc_lock+0x118>)
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	011b      	lsls	r3, r3, #4
 800e7c2:	4413      	add	r3, r2
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d113      	bne.n	800e7f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e7ce:	4a3d      	ldr	r2, [pc, #244]	@ (800e8c4 <inc_lock+0x118>)
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	011b      	lsls	r3, r3, #4
 800e7d4:	4413      	add	r3, r2
 800e7d6:	3304      	adds	r3, #4
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d109      	bne.n	800e7f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e7e2:	4a38      	ldr	r2, [pc, #224]	@ (800e8c4 <inc_lock+0x118>)
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	011b      	lsls	r3, r3, #4
 800e7e8:	4413      	add	r3, r2
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d006      	beq.n	800e804 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	60fb      	str	r3, [r7, #12]
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d9dc      	bls.n	800e7bc <inc_lock+0x10>
 800e802:	e000      	b.n	800e806 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e804:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2b02      	cmp	r3, #2
 800e80a:	d132      	bne.n	800e872 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e80c:	2300      	movs	r3, #0
 800e80e:	60fb      	str	r3, [r7, #12]
 800e810:	e002      	b.n	800e818 <inc_lock+0x6c>
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	3301      	adds	r3, #1
 800e816:	60fb      	str	r3, [r7, #12]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d806      	bhi.n	800e82c <inc_lock+0x80>
 800e81e:	4a29      	ldr	r2, [pc, #164]	@ (800e8c4 <inc_lock+0x118>)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	011b      	lsls	r3, r3, #4
 800e824:	4413      	add	r3, r2
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1f2      	bne.n	800e812 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2b02      	cmp	r3, #2
 800e830:	d101      	bne.n	800e836 <inc_lock+0x8a>
 800e832:	2300      	movs	r3, #0
 800e834:	e040      	b.n	800e8b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	4922      	ldr	r1, [pc, #136]	@ (800e8c4 <inc_lock+0x118>)
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	011b      	lsls	r3, r3, #4
 800e840:	440b      	add	r3, r1
 800e842:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	689a      	ldr	r2, [r3, #8]
 800e848:	491e      	ldr	r1, [pc, #120]	@ (800e8c4 <inc_lock+0x118>)
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	011b      	lsls	r3, r3, #4
 800e84e:	440b      	add	r3, r1
 800e850:	3304      	adds	r3, #4
 800e852:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	695a      	ldr	r2, [r3, #20]
 800e858:	491a      	ldr	r1, [pc, #104]	@ (800e8c4 <inc_lock+0x118>)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	011b      	lsls	r3, r3, #4
 800e85e:	440b      	add	r3, r1
 800e860:	3308      	adds	r3, #8
 800e862:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e864:	4a17      	ldr	r2, [pc, #92]	@ (800e8c4 <inc_lock+0x118>)
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	011b      	lsls	r3, r3, #4
 800e86a:	4413      	add	r3, r2
 800e86c:	330c      	adds	r3, #12
 800e86e:	2200      	movs	r2, #0
 800e870:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d009      	beq.n	800e88c <inc_lock+0xe0>
 800e878:	4a12      	ldr	r2, [pc, #72]	@ (800e8c4 <inc_lock+0x118>)
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	011b      	lsls	r3, r3, #4
 800e87e:	4413      	add	r3, r2
 800e880:	330c      	adds	r3, #12
 800e882:	881b      	ldrh	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d001      	beq.n	800e88c <inc_lock+0xe0>
 800e888:	2300      	movs	r3, #0
 800e88a:	e015      	b.n	800e8b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d108      	bne.n	800e8a4 <inc_lock+0xf8>
 800e892:	4a0c      	ldr	r2, [pc, #48]	@ (800e8c4 <inc_lock+0x118>)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	011b      	lsls	r3, r3, #4
 800e898:	4413      	add	r3, r2
 800e89a:	330c      	adds	r3, #12
 800e89c:	881b      	ldrh	r3, [r3, #0]
 800e89e:	3301      	adds	r3, #1
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	e001      	b.n	800e8a8 <inc_lock+0xfc>
 800e8a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e8a8:	4906      	ldr	r1, [pc, #24]	@ (800e8c4 <inc_lock+0x118>)
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	011b      	lsls	r3, r3, #4
 800e8ae:	440b      	add	r3, r1
 800e8b0:	330c      	adds	r3, #12
 800e8b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	3301      	adds	r3, #1
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3714      	adds	r7, #20
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr
 800e8c4:	20006bd0 	.word	0x20006bd0

0800e8c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b085      	sub	sp, #20
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	607b      	str	r3, [r7, #4]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d825      	bhi.n	800e928 <dec_lock+0x60>
		n = Files[i].ctr;
 800e8dc:	4a17      	ldr	r2, [pc, #92]	@ (800e93c <dec_lock+0x74>)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	011b      	lsls	r3, r3, #4
 800e8e2:	4413      	add	r3, r2
 800e8e4:	330c      	adds	r3, #12
 800e8e6:	881b      	ldrh	r3, [r3, #0]
 800e8e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e8ea:	89fb      	ldrh	r3, [r7, #14]
 800e8ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8f0:	d101      	bne.n	800e8f6 <dec_lock+0x2e>
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e8f6:	89fb      	ldrh	r3, [r7, #14]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d002      	beq.n	800e902 <dec_lock+0x3a>
 800e8fc:	89fb      	ldrh	r3, [r7, #14]
 800e8fe:	3b01      	subs	r3, #1
 800e900:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e902:	4a0e      	ldr	r2, [pc, #56]	@ (800e93c <dec_lock+0x74>)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	011b      	lsls	r3, r3, #4
 800e908:	4413      	add	r3, r2
 800e90a:	330c      	adds	r3, #12
 800e90c:	89fa      	ldrh	r2, [r7, #14]
 800e90e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e910:	89fb      	ldrh	r3, [r7, #14]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d105      	bne.n	800e922 <dec_lock+0x5a>
 800e916:	4a09      	ldr	r2, [pc, #36]	@ (800e93c <dec_lock+0x74>)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	011b      	lsls	r3, r3, #4
 800e91c:	4413      	add	r3, r2
 800e91e:	2200      	movs	r2, #0
 800e920:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e922:	2300      	movs	r3, #0
 800e924:	737b      	strb	r3, [r7, #13]
 800e926:	e001      	b.n	800e92c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e928:	2302      	movs	r3, #2
 800e92a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e92c:	7b7b      	ldrb	r3, [r7, #13]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	20006bd0 	.word	0x20006bd0

0800e940 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e940:	b480      	push	{r7}
 800e942:	b085      	sub	sp, #20
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e948:	2300      	movs	r3, #0
 800e94a:	60fb      	str	r3, [r7, #12]
 800e94c:	e010      	b.n	800e970 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e94e:	4a0d      	ldr	r2, [pc, #52]	@ (800e984 <clear_lock+0x44>)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	011b      	lsls	r3, r3, #4
 800e954:	4413      	add	r3, r2
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d105      	bne.n	800e96a <clear_lock+0x2a>
 800e95e:	4a09      	ldr	r2, [pc, #36]	@ (800e984 <clear_lock+0x44>)
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	011b      	lsls	r3, r3, #4
 800e964:	4413      	add	r3, r2
 800e966:	2200      	movs	r2, #0
 800e968:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	3301      	adds	r3, #1
 800e96e:	60fb      	str	r3, [r7, #12]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d9eb      	bls.n	800e94e <clear_lock+0xe>
	}
}
 800e976:	bf00      	nop
 800e978:	bf00      	nop
 800e97a:	3714      	adds	r7, #20
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr
 800e984:	20006bd0 	.word	0x20006bd0

0800e988 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b086      	sub	sp, #24
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e990:	2300      	movs	r3, #0
 800e992:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	78db      	ldrb	r3, [r3, #3]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d034      	beq.n	800ea06 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	7858      	ldrb	r0, [r3, #1]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	697a      	ldr	r2, [r7, #20]
 800e9b0:	f7ff fd3e 	bl	800e430 <disk_write>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d002      	beq.n	800e9c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	73fb      	strb	r3, [r7, #15]
 800e9be:	e022      	b.n	800ea06 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6a1b      	ldr	r3, [r3, #32]
 800e9ca:	697a      	ldr	r2, [r7, #20]
 800e9cc:	1ad2      	subs	r2, r2, r3
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	699b      	ldr	r3, [r3, #24]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d217      	bcs.n	800ea06 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	789b      	ldrb	r3, [r3, #2]
 800e9da:	613b      	str	r3, [r7, #16]
 800e9dc:	e010      	b.n	800ea00 <sync_window+0x78>
					wsect += fs->fsize;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	699b      	ldr	r3, [r3, #24]
 800e9e2:	697a      	ldr	r2, [r7, #20]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	7858      	ldrb	r0, [r3, #1]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	697a      	ldr	r2, [r7, #20]
 800e9f6:	f7ff fd1b 	bl	800e430 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	613b      	str	r3, [r7, #16]
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d8eb      	bhi.n	800e9de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ea06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3718      	adds	r7, #24
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea22:	683a      	ldr	r2, [r7, #0]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d01b      	beq.n	800ea60 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f7ff ffad 	bl	800e988 <sync_window>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ea32:	7bfb      	ldrb	r3, [r7, #15]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d113      	bne.n	800ea60 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	7858      	ldrb	r0, [r3, #1]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea42:	2301      	movs	r3, #1
 800ea44:	683a      	ldr	r2, [r7, #0]
 800ea46:	f7ff fcd3 	bl	800e3f0 <disk_read>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d004      	beq.n	800ea5a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ea50:	f04f 33ff 	mov.w	r3, #4294967295
 800ea54:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ea56:	2301      	movs	r3, #1
 800ea58:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	683a      	ldr	r2, [r7, #0]
 800ea5e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800ea60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
	...

0800ea6c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7ff ff87 	bl	800e988 <sync_window>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ea7e:	7bfb      	ldrb	r3, [r7, #15]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d158      	bne.n	800eb36 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	2b03      	cmp	r3, #3
 800ea8a:	d148      	bne.n	800eb1e <sync_fs+0xb2>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	791b      	ldrb	r3, [r3, #4]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d144      	bne.n	800eb1e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	3330      	adds	r3, #48	@ 0x30
 800ea98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea9c:	2100      	movs	r1, #0
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7ff fda8 	bl	800e5f4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	3330      	adds	r3, #48	@ 0x30
 800eaa8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800eaac:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7ff fd37 	bl	800e524 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	3330      	adds	r3, #48	@ 0x30
 800eaba:	4921      	ldr	r1, [pc, #132]	@ (800eb40 <sync_fs+0xd4>)
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7ff fd4c 	bl	800e55a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	3330      	adds	r3, #48	@ 0x30
 800eac6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800eaca:	491e      	ldr	r1, [pc, #120]	@ (800eb44 <sync_fs+0xd8>)
 800eacc:	4618      	mov	r0, r3
 800eace:	f7ff fd44 	bl	800e55a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	3330      	adds	r3, #48	@ 0x30
 800ead6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	691b      	ldr	r3, [r3, #16]
 800eade:	4619      	mov	r1, r3
 800eae0:	4610      	mov	r0, r2
 800eae2:	f7ff fd3a 	bl	800e55a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	3330      	adds	r3, #48	@ 0x30
 800eaea:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	4610      	mov	r0, r2
 800eaf6:	f7ff fd30 	bl	800e55a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	69db      	ldr	r3, [r3, #28]
 800eafe:	1c5a      	adds	r2, r3, #1
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	7858      	ldrb	r0, [r3, #1]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb12:	2301      	movs	r3, #1
 800eb14:	f7ff fc8c 	bl	800e430 <disk_write>
			fs->fsi_flag = 0;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	785b      	ldrb	r3, [r3, #1]
 800eb22:	2200      	movs	r2, #0
 800eb24:	2100      	movs	r1, #0
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7ff fca2 	bl	800e470 <disk_ioctl>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d001      	beq.n	800eb36 <sync_fs+0xca>
 800eb32:	2301      	movs	r3, #1
 800eb34:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800eb36:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3710      	adds	r7, #16
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	41615252 	.word	0x41615252
 800eb44:	61417272 	.word	0x61417272

0800eb48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	3b02      	subs	r3, #2
 800eb56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	695b      	ldr	r3, [r3, #20]
 800eb5c:	3b02      	subs	r3, #2
 800eb5e:	683a      	ldr	r2, [r7, #0]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d301      	bcc.n	800eb68 <clust2sect+0x20>
 800eb64:	2300      	movs	r3, #0
 800eb66:	e008      	b.n	800eb7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	895b      	ldrh	r3, [r3, #10]
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	fb03 f202 	mul.w	r2, r3, r2
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb78:	4413      	add	r3, r2
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	370c      	adds	r7, #12
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb84:	4770      	bx	lr

0800eb86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b086      	sub	sp, #24
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
 800eb8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d904      	bls.n	800eba6 <get_fat+0x20>
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	695b      	ldr	r3, [r3, #20]
 800eba0:	683a      	ldr	r2, [r7, #0]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d302      	bcc.n	800ebac <get_fat+0x26>
		val = 1;	/* Internal error */
 800eba6:	2301      	movs	r3, #1
 800eba8:	617b      	str	r3, [r7, #20]
 800ebaa:	e08e      	b.n	800ecca <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ebac:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	2b03      	cmp	r3, #3
 800ebb8:	d061      	beq.n	800ec7e <get_fat+0xf8>
 800ebba:	2b03      	cmp	r3, #3
 800ebbc:	dc7b      	bgt.n	800ecb6 <get_fat+0x130>
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d002      	beq.n	800ebc8 <get_fat+0x42>
 800ebc2:	2b02      	cmp	r3, #2
 800ebc4:	d041      	beq.n	800ec4a <get_fat+0xc4>
 800ebc6:	e076      	b.n	800ecb6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	085b      	lsrs	r3, r3, #1
 800ebd0:	68fa      	ldr	r2, [r7, #12]
 800ebd2:	4413      	add	r3, r2
 800ebd4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	6a1a      	ldr	r2, [r3, #32]
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	0a5b      	lsrs	r3, r3, #9
 800ebde:	4413      	add	r3, r2
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	6938      	ldr	r0, [r7, #16]
 800ebe4:	f7ff ff14 	bl	800ea10 <move_window>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d166      	bne.n	800ecbc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	1c5a      	adds	r2, r3, #1
 800ebf2:	60fa      	str	r2, [r7, #12]
 800ebf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebf8:	693a      	ldr	r2, [r7, #16]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ec00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	6a1a      	ldr	r2, [r3, #32]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	0a5b      	lsrs	r3, r3, #9
 800ec0a:	4413      	add	r3, r2
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	6938      	ldr	r0, [r7, #16]
 800ec10:	f7ff fefe 	bl	800ea10 <move_window>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d152      	bne.n	800ecc0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec20:	693a      	ldr	r2, [r7, #16]
 800ec22:	4413      	add	r3, r2
 800ec24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ec28:	021b      	lsls	r3, r3, #8
 800ec2a:	68ba      	ldr	r2, [r7, #8]
 800ec2c:	4313      	orrs	r3, r2
 800ec2e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	f003 0301 	and.w	r3, r3, #1
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d002      	beq.n	800ec40 <get_fat+0xba>
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	091b      	lsrs	r3, r3, #4
 800ec3e:	e002      	b.n	800ec46 <get_fat+0xc0>
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec46:	617b      	str	r3, [r7, #20]
			break;
 800ec48:	e03f      	b.n	800ecca <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	6a1a      	ldr	r2, [r3, #32]
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	0a1b      	lsrs	r3, r3, #8
 800ec52:	4413      	add	r3, r2
 800ec54:	4619      	mov	r1, r3
 800ec56:	6938      	ldr	r0, [r7, #16]
 800ec58:	f7ff feda 	bl	800ea10 <move_window>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d130      	bne.n	800ecc4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	005b      	lsls	r3, r3, #1
 800ec6c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ec70:	4413      	add	r3, r2
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7ff fc1a 	bl	800e4ac <ld_word>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	617b      	str	r3, [r7, #20]
			break;
 800ec7c:	e025      	b.n	800ecca <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	6a1a      	ldr	r2, [r3, #32]
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	09db      	lsrs	r3, r3, #7
 800ec86:	4413      	add	r3, r2
 800ec88:	4619      	mov	r1, r3
 800ec8a:	6938      	ldr	r0, [r7, #16]
 800ec8c:	f7ff fec0 	bl	800ea10 <move_window>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d118      	bne.n	800ecc8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	009b      	lsls	r3, r3, #2
 800eca0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800eca4:	4413      	add	r3, r2
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7ff fc19 	bl	800e4de <ld_dword>
 800ecac:	4603      	mov	r3, r0
 800ecae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ecb2:	617b      	str	r3, [r7, #20]
			break;
 800ecb4:	e009      	b.n	800ecca <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	617b      	str	r3, [r7, #20]
 800ecba:	e006      	b.n	800ecca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ecbc:	bf00      	nop
 800ecbe:	e004      	b.n	800ecca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ecc0:	bf00      	nop
 800ecc2:	e002      	b.n	800ecca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ecc4:	bf00      	nop
 800ecc6:	e000      	b.n	800ecca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ecc8:	bf00      	nop
		}
	}

	return val;
 800ecca:	697b      	ldr	r3, [r7, #20]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3718      	adds	r7, #24
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ecd4:	b590      	push	{r4, r7, lr}
 800ecd6:	b089      	sub	sp, #36	@ 0x24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ece0:	2302      	movs	r3, #2
 800ece2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	f240 80d9 	bls.w	800ee9e <put_fat+0x1ca>
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	695b      	ldr	r3, [r3, #20]
 800ecf0:	68ba      	ldr	r2, [r7, #8]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	f080 80d3 	bcs.w	800ee9e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	2b03      	cmp	r3, #3
 800ecfe:	f000 8096 	beq.w	800ee2e <put_fat+0x15a>
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	f300 80cb 	bgt.w	800ee9e <put_fat+0x1ca>
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d002      	beq.n	800ed12 <put_fat+0x3e>
 800ed0c:	2b02      	cmp	r3, #2
 800ed0e:	d06e      	beq.n	800edee <put_fat+0x11a>
 800ed10:	e0c5      	b.n	800ee9e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	61bb      	str	r3, [r7, #24]
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	085b      	lsrs	r3, r3, #1
 800ed1a:	69ba      	ldr	r2, [r7, #24]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6a1a      	ldr	r2, [r3, #32]
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	0a5b      	lsrs	r3, r3, #9
 800ed28:	4413      	add	r3, r2
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	68f8      	ldr	r0, [r7, #12]
 800ed2e:	f7ff fe6f 	bl	800ea10 <move_window>
 800ed32:	4603      	mov	r3, r0
 800ed34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed36:	7ffb      	ldrb	r3, [r7, #31]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	f040 80a9 	bne.w	800ee90 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	1c59      	adds	r1, r3, #1
 800ed48:	61b9      	str	r1, [r7, #24]
 800ed4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed4e:	4413      	add	r3, r2
 800ed50:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	f003 0301 	and.w	r3, r3, #1
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00d      	beq.n	800ed78 <put_fat+0xa4>
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	b25b      	sxtb	r3, r3
 800ed62:	f003 030f 	and.w	r3, r3, #15
 800ed66:	b25a      	sxtb	r2, r3
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	b25b      	sxtb	r3, r3
 800ed6c:	011b      	lsls	r3, r3, #4
 800ed6e:	b25b      	sxtb	r3, r3
 800ed70:	4313      	orrs	r3, r2
 800ed72:	b25b      	sxtb	r3, r3
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	e001      	b.n	800ed7c <put_fat+0xa8>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	697a      	ldr	r2, [r7, #20]
 800ed7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2201      	movs	r2, #1
 800ed84:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	6a1a      	ldr	r2, [r3, #32]
 800ed8a:	69bb      	ldr	r3, [r7, #24]
 800ed8c:	0a5b      	lsrs	r3, r3, #9
 800ed8e:	4413      	add	r3, r2
 800ed90:	4619      	mov	r1, r3
 800ed92:	68f8      	ldr	r0, [r7, #12]
 800ed94:	f7ff fe3c 	bl	800ea10 <move_window>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed9c:	7ffb      	ldrb	r3, [r7, #31]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d178      	bne.n	800ee94 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edae:	4413      	add	r3, r2
 800edb0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	f003 0301 	and.w	r3, r3, #1
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d003      	beq.n	800edc4 <put_fat+0xf0>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	091b      	lsrs	r3, r3, #4
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	e00e      	b.n	800ede2 <put_fat+0x10e>
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	b25b      	sxtb	r3, r3
 800edca:	f023 030f 	bic.w	r3, r3, #15
 800edce:	b25a      	sxtb	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	0a1b      	lsrs	r3, r3, #8
 800edd4:	b25b      	sxtb	r3, r3
 800edd6:	f003 030f 	and.w	r3, r3, #15
 800edda:	b25b      	sxtb	r3, r3
 800eddc:	4313      	orrs	r3, r2
 800edde:	b25b      	sxtb	r3, r3
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	697a      	ldr	r2, [r7, #20]
 800ede4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2201      	movs	r2, #1
 800edea:	70da      	strb	r2, [r3, #3]
			break;
 800edec:	e057      	b.n	800ee9e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6a1a      	ldr	r2, [r3, #32]
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	0a1b      	lsrs	r3, r3, #8
 800edf6:	4413      	add	r3, r2
 800edf8:	4619      	mov	r1, r3
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f7ff fe08 	bl	800ea10 <move_window>
 800ee00:	4603      	mov	r3, r0
 800ee02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee04:	7ffb      	ldrb	r3, [r7, #31]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d146      	bne.n	800ee98 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ee18:	4413      	add	r3, r2
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	b292      	uxth	r2, r2
 800ee1e:	4611      	mov	r1, r2
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7ff fb7f 	bl	800e524 <st_word>
			fs->wflag = 1;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	70da      	strb	r2, [r3, #3]
			break;
 800ee2c:	e037      	b.n	800ee9e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6a1a      	ldr	r2, [r3, #32]
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	09db      	lsrs	r3, r3, #7
 800ee36:	4413      	add	r3, r2
 800ee38:	4619      	mov	r1, r3
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f7ff fde8 	bl	800ea10 <move_window>
 800ee40:	4603      	mov	r3, r0
 800ee42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee44:	7ffb      	ldrb	r3, [r7, #31]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d128      	bne.n	800ee9c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ee5e:	4413      	add	r3, r2
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7ff fb3c 	bl	800e4de <ld_dword>
 800ee66:	4603      	mov	r3, r0
 800ee68:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ee6c:	4323      	orrs	r3, r4
 800ee6e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ee7e:	4413      	add	r3, r2
 800ee80:	6879      	ldr	r1, [r7, #4]
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7ff fb69 	bl	800e55a <st_dword>
			fs->wflag = 1;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	70da      	strb	r2, [r3, #3]
			break;
 800ee8e:	e006      	b.n	800ee9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ee90:	bf00      	nop
 800ee92:	e004      	b.n	800ee9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ee94:	bf00      	nop
 800ee96:	e002      	b.n	800ee9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ee98:	bf00      	nop
 800ee9a:	e000      	b.n	800ee9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ee9c:	bf00      	nop
		}
	}
	return res;
 800ee9e:	7ffb      	ldrb	r3, [r7, #31]
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3724      	adds	r7, #36	@ 0x24
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd90      	pop	{r4, r7, pc}

0800eea8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b088      	sub	sp, #32
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d904      	bls.n	800eece <remove_chain+0x26>
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	695b      	ldr	r3, [r3, #20]
 800eec8:	68ba      	ldr	r2, [r7, #8]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d301      	bcc.n	800eed2 <remove_chain+0x2a>
 800eece:	2302      	movs	r3, #2
 800eed0:	e04b      	b.n	800ef6a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d00c      	beq.n	800eef2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800eed8:	f04f 32ff 	mov.w	r2, #4294967295
 800eedc:	6879      	ldr	r1, [r7, #4]
 800eede:	69b8      	ldr	r0, [r7, #24]
 800eee0:	f7ff fef8 	bl	800ecd4 <put_fat>
 800eee4:	4603      	mov	r3, r0
 800eee6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800eee8:	7ffb      	ldrb	r3, [r7, #31]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <remove_chain+0x4a>
 800eeee:	7ffb      	ldrb	r3, [r7, #31]
 800eef0:	e03b      	b.n	800ef6a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800eef2:	68b9      	ldr	r1, [r7, #8]
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f7ff fe46 	bl	800eb86 <get_fat>
 800eefa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d031      	beq.n	800ef66 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d101      	bne.n	800ef0c <remove_chain+0x64>
 800ef08:	2302      	movs	r3, #2
 800ef0a:	e02e      	b.n	800ef6a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef12:	d101      	bne.n	800ef18 <remove_chain+0x70>
 800ef14:	2301      	movs	r3, #1
 800ef16:	e028      	b.n	800ef6a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ef18:	2200      	movs	r2, #0
 800ef1a:	68b9      	ldr	r1, [r7, #8]
 800ef1c:	69b8      	ldr	r0, [r7, #24]
 800ef1e:	f7ff fed9 	bl	800ecd4 <put_fat>
 800ef22:	4603      	mov	r3, r0
 800ef24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ef26:	7ffb      	ldrb	r3, [r7, #31]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d001      	beq.n	800ef30 <remove_chain+0x88>
 800ef2c:	7ffb      	ldrb	r3, [r7, #31]
 800ef2e:	e01c      	b.n	800ef6a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	691a      	ldr	r2, [r3, #16]
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	695b      	ldr	r3, [r3, #20]
 800ef38:	3b02      	subs	r3, #2
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d20b      	bcs.n	800ef56 <remove_chain+0xae>
			fs->free_clst++;
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	691b      	ldr	r3, [r3, #16]
 800ef42:	1c5a      	adds	r2, r3, #1
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	791b      	ldrb	r3, [r3, #4]
 800ef4c:	f043 0301 	orr.w	r3, r3, #1
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	695b      	ldr	r3, [r3, #20]
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d3c6      	bcc.n	800eef2 <remove_chain+0x4a>
 800ef64:	e000      	b.n	800ef68 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ef66:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ef68:	2300      	movs	r3, #0
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3720      	adds	r7, #32
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b088      	sub	sp, #32
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
 800ef7a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d10d      	bne.n	800efa4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d004      	beq.n	800ef9e <create_chain+0x2c>
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	695b      	ldr	r3, [r3, #20]
 800ef98:	69ba      	ldr	r2, [r7, #24]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d31b      	bcc.n	800efd6 <create_chain+0x64>
 800ef9e:	2301      	movs	r3, #1
 800efa0:	61bb      	str	r3, [r7, #24]
 800efa2:	e018      	b.n	800efd6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800efa4:	6839      	ldr	r1, [r7, #0]
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7ff fded 	bl	800eb86 <get_fat>
 800efac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d801      	bhi.n	800efb8 <create_chain+0x46>
 800efb4:	2301      	movs	r3, #1
 800efb6:	e070      	b.n	800f09a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efbe:	d101      	bne.n	800efc4 <create_chain+0x52>
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	e06a      	b.n	800f09a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	695b      	ldr	r3, [r3, #20]
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d201      	bcs.n	800efd2 <create_chain+0x60>
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	e063      	b.n	800f09a <create_chain+0x128>
		scl = clst;
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800efd6:	69bb      	ldr	r3, [r7, #24]
 800efd8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	3301      	adds	r3, #1
 800efde:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	695b      	ldr	r3, [r3, #20]
 800efe4:	69fa      	ldr	r2, [r7, #28]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d307      	bcc.n	800effa <create_chain+0x88>
				ncl = 2;
 800efea:	2302      	movs	r3, #2
 800efec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800efee:	69fa      	ldr	r2, [r7, #28]
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d901      	bls.n	800effa <create_chain+0x88>
 800eff6:	2300      	movs	r3, #0
 800eff8:	e04f      	b.n	800f09a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800effa:	69f9      	ldr	r1, [r7, #28]
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f7ff fdc2 	bl	800eb86 <get_fat>
 800f002:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d00e      	beq.n	800f028 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d003      	beq.n	800f018 <create_chain+0xa6>
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f016:	d101      	bne.n	800f01c <create_chain+0xaa>
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	e03e      	b.n	800f09a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f01c:	69fa      	ldr	r2, [r7, #28]
 800f01e:	69bb      	ldr	r3, [r7, #24]
 800f020:	429a      	cmp	r2, r3
 800f022:	d1da      	bne.n	800efda <create_chain+0x68>
 800f024:	2300      	movs	r3, #0
 800f026:	e038      	b.n	800f09a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f028:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f02a:	f04f 32ff 	mov.w	r2, #4294967295
 800f02e:	69f9      	ldr	r1, [r7, #28]
 800f030:	6938      	ldr	r0, [r7, #16]
 800f032:	f7ff fe4f 	bl	800ecd4 <put_fat>
 800f036:	4603      	mov	r3, r0
 800f038:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f03a:	7dfb      	ldrb	r3, [r7, #23]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d109      	bne.n	800f054 <create_chain+0xe2>
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d006      	beq.n	800f054 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f046:	69fa      	ldr	r2, [r7, #28]
 800f048:	6839      	ldr	r1, [r7, #0]
 800f04a:	6938      	ldr	r0, [r7, #16]
 800f04c:	f7ff fe42 	bl	800ecd4 <put_fat>
 800f050:	4603      	mov	r3, r0
 800f052:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f054:	7dfb      	ldrb	r3, [r7, #23]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d116      	bne.n	800f088 <create_chain+0x116>
		fs->last_clst = ncl;
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	69fa      	ldr	r2, [r7, #28]
 800f05e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	691a      	ldr	r2, [r3, #16]
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	695b      	ldr	r3, [r3, #20]
 800f068:	3b02      	subs	r3, #2
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d804      	bhi.n	800f078 <create_chain+0x106>
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	691b      	ldr	r3, [r3, #16]
 800f072:	1e5a      	subs	r2, r3, #1
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	791b      	ldrb	r3, [r3, #4]
 800f07c:	f043 0301 	orr.w	r3, r3, #1
 800f080:	b2da      	uxtb	r2, r3
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	711a      	strb	r2, [r3, #4]
 800f086:	e007      	b.n	800f098 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f088:	7dfb      	ldrb	r3, [r7, #23]
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d102      	bne.n	800f094 <create_chain+0x122>
 800f08e:	f04f 33ff 	mov.w	r3, #4294967295
 800f092:	e000      	b.n	800f096 <create_chain+0x124>
 800f094:	2301      	movs	r3, #1
 800f096:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f098:	69fb      	ldr	r3, [r7, #28]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3720      	adds	r7, #32
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f0a2:	b480      	push	{r7}
 800f0a4:	b087      	sub	sp, #28
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0b6:	3304      	adds	r3, #4
 800f0b8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	0a5b      	lsrs	r3, r3, #9
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	8952      	ldrh	r2, [r2, #10]
 800f0c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0c6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	1d1a      	adds	r2, r3, #4
 800f0cc:	613a      	str	r2, [r7, #16]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d101      	bne.n	800f0dc <clmt_clust+0x3a>
 800f0d8:	2300      	movs	r3, #0
 800f0da:	e010      	b.n	800f0fe <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f0dc:	697a      	ldr	r2, [r7, #20]
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d307      	bcc.n	800f0f4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f0e4:	697a      	ldr	r2, [r7, #20]
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	1ad3      	subs	r3, r2, r3
 800f0ea:	617b      	str	r3, [r7, #20]
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	3304      	adds	r3, #4
 800f0f0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f0f2:	e7e9      	b.n	800f0c8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f0f4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	4413      	add	r3, r2
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	371c      	adds	r7, #28
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr

0800f10a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f10a:	b580      	push	{r7, lr}
 800f10c:	b086      	sub	sp, #24
 800f10e:	af00      	add	r7, sp, #0
 800f110:	6078      	str	r0, [r7, #4]
 800f112:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f120:	d204      	bcs.n	800f12c <dir_sdi+0x22>
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	f003 031f 	and.w	r3, r3, #31
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d001      	beq.n	800f130 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f12c:	2302      	movs	r3, #2
 800f12e:	e063      	b.n	800f1f8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	683a      	ldr	r2, [r7, #0]
 800f134:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	689b      	ldr	r3, [r3, #8]
 800f13a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d106      	bne.n	800f150 <dir_sdi+0x46>
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	2b02      	cmp	r3, #2
 800f148:	d902      	bls.n	800f150 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f14e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d10c      	bne.n	800f170 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	095b      	lsrs	r3, r3, #5
 800f15a:	693a      	ldr	r2, [r7, #16]
 800f15c:	8912      	ldrh	r2, [r2, #8]
 800f15e:	4293      	cmp	r3, r2
 800f160:	d301      	bcc.n	800f166 <dir_sdi+0x5c>
 800f162:	2302      	movs	r3, #2
 800f164:	e048      	b.n	800f1f8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	61da      	str	r2, [r3, #28]
 800f16e:	e029      	b.n	800f1c4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	895b      	ldrh	r3, [r3, #10]
 800f174:	025b      	lsls	r3, r3, #9
 800f176:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f178:	e019      	b.n	800f1ae <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6979      	ldr	r1, [r7, #20]
 800f17e:	4618      	mov	r0, r3
 800f180:	f7ff fd01 	bl	800eb86 <get_fat>
 800f184:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f18c:	d101      	bne.n	800f192 <dir_sdi+0x88>
 800f18e:	2301      	movs	r3, #1
 800f190:	e032      	b.n	800f1f8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	2b01      	cmp	r3, #1
 800f196:	d904      	bls.n	800f1a2 <dir_sdi+0x98>
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	695b      	ldr	r3, [r3, #20]
 800f19c:	697a      	ldr	r2, [r7, #20]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d301      	bcc.n	800f1a6 <dir_sdi+0x9c>
 800f1a2:	2302      	movs	r3, #2
 800f1a4:	e028      	b.n	800f1f8 <dir_sdi+0xee>
			ofs -= csz;
 800f1a6:	683a      	ldr	r2, [r7, #0]
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	1ad3      	subs	r3, r2, r3
 800f1ac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f1ae:	683a      	ldr	r2, [r7, #0]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d2e1      	bcs.n	800f17a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f1b6:	6979      	ldr	r1, [r7, #20]
 800f1b8:	6938      	ldr	r0, [r7, #16]
 800f1ba:	f7ff fcc5 	bl	800eb48 <clust2sect>
 800f1be:	4602      	mov	r2, r0
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	697a      	ldr	r2, [r7, #20]
 800f1c8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	69db      	ldr	r3, [r3, #28]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d101      	bne.n	800f1d6 <dir_sdi+0xcc>
 800f1d2:	2302      	movs	r3, #2
 800f1d4:	e010      	b.n	800f1f8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	69da      	ldr	r2, [r3, #28]
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	0a5b      	lsrs	r3, r3, #9
 800f1de:	441a      	add	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1f0:	441a      	add	r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f1f6:	2300      	movs	r3, #0
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3718      	adds	r7, #24
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b086      	sub	sp, #24
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	695b      	ldr	r3, [r3, #20]
 800f214:	3320      	adds	r3, #32
 800f216:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	69db      	ldr	r3, [r3, #28]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d003      	beq.n	800f228 <dir_next+0x28>
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f226:	d301      	bcc.n	800f22c <dir_next+0x2c>
 800f228:	2304      	movs	r3, #4
 800f22a:	e0aa      	b.n	800f382 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f232:	2b00      	cmp	r3, #0
 800f234:	f040 8098 	bne.w	800f368 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	69db      	ldr	r3, [r3, #28]
 800f23c:	1c5a      	adds	r2, r3, #1
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	699b      	ldr	r3, [r3, #24]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d10b      	bne.n	800f262 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	095b      	lsrs	r3, r3, #5
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	8912      	ldrh	r2, [r2, #8]
 800f252:	4293      	cmp	r3, r2
 800f254:	f0c0 8088 	bcc.w	800f368 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2200      	movs	r2, #0
 800f25c:	61da      	str	r2, [r3, #28]
 800f25e:	2304      	movs	r3, #4
 800f260:	e08f      	b.n	800f382 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	0a5b      	lsrs	r3, r3, #9
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	8952      	ldrh	r2, [r2, #10]
 800f26a:	3a01      	subs	r2, #1
 800f26c:	4013      	ands	r3, r2
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d17a      	bne.n	800f368 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	699b      	ldr	r3, [r3, #24]
 800f278:	4619      	mov	r1, r3
 800f27a:	4610      	mov	r0, r2
 800f27c:	f7ff fc83 	bl	800eb86 <get_fat>
 800f280:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	2b01      	cmp	r3, #1
 800f286:	d801      	bhi.n	800f28c <dir_next+0x8c>
 800f288:	2302      	movs	r3, #2
 800f28a:	e07a      	b.n	800f382 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f292:	d101      	bne.n	800f298 <dir_next+0x98>
 800f294:	2301      	movs	r3, #1
 800f296:	e074      	b.n	800f382 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	695b      	ldr	r3, [r3, #20]
 800f29c:	697a      	ldr	r2, [r7, #20]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d358      	bcc.n	800f354 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d104      	bne.n	800f2b2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	61da      	str	r2, [r3, #28]
 800f2ae:	2304      	movs	r3, #4
 800f2b0:	e067      	b.n	800f382 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	699b      	ldr	r3, [r3, #24]
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	4610      	mov	r0, r2
 800f2bc:	f7ff fe59 	bl	800ef72 <create_chain>
 800f2c0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d101      	bne.n	800f2cc <dir_next+0xcc>
 800f2c8:	2307      	movs	r3, #7
 800f2ca:	e05a      	b.n	800f382 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	d101      	bne.n	800f2d6 <dir_next+0xd6>
 800f2d2:	2302      	movs	r3, #2
 800f2d4:	e055      	b.n	800f382 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2dc:	d101      	bne.n	800f2e2 <dir_next+0xe2>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	e04f      	b.n	800f382 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f2e2:	68f8      	ldr	r0, [r7, #12]
 800f2e4:	f7ff fb50 	bl	800e988 <sync_window>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d001      	beq.n	800f2f2 <dir_next+0xf2>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	e047      	b.n	800f382 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	3330      	adds	r3, #48	@ 0x30
 800f2f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f2fa:	2100      	movs	r1, #0
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7ff f979 	bl	800e5f4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f302:	2300      	movs	r3, #0
 800f304:	613b      	str	r3, [r7, #16]
 800f306:	6979      	ldr	r1, [r7, #20]
 800f308:	68f8      	ldr	r0, [r7, #12]
 800f30a:	f7ff fc1d 	bl	800eb48 <clust2sect>
 800f30e:	4602      	mov	r2, r0
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f314:	e012      	b.n	800f33c <dir_next+0x13c>
						fs->wflag = 1;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	2201      	movs	r2, #1
 800f31a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f31c:	68f8      	ldr	r0, [r7, #12]
 800f31e:	f7ff fb33 	bl	800e988 <sync_window>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d001      	beq.n	800f32c <dir_next+0x12c>
 800f328:	2301      	movs	r3, #1
 800f32a:	e02a      	b.n	800f382 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	3301      	adds	r3, #1
 800f330:	613b      	str	r3, [r7, #16]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f336:	1c5a      	adds	r2, r3, #1
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	895b      	ldrh	r3, [r3, #10]
 800f340:	461a      	mov	r2, r3
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	4293      	cmp	r3, r2
 800f346:	d3e6      	bcc.n	800f316 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	1ad2      	subs	r2, r2, r3
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	697a      	ldr	r2, [r7, #20]
 800f358:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f35a:	6979      	ldr	r1, [r7, #20]
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f7ff fbf3 	bl	800eb48 <clust2sect>
 800f362:	4602      	mov	r2, r0
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f37a:	441a      	add	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f380:	2300      	movs	r3, #0
}
 800f382:	4618      	mov	r0, r3
 800f384:	3718      	adds	r7, #24
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b086      	sub	sp, #24
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
 800f392:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f39a:	2100      	movs	r1, #0
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f7ff feb4 	bl	800f10a <dir_sdi>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f3a6:	7dfb      	ldrb	r3, [r7, #23]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d12b      	bne.n	800f404 <dir_alloc+0x7a>
		n = 0;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	69db      	ldr	r3, [r3, #28]
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f7ff fb2a 	bl	800ea10 <move_window>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f3c0:	7dfb      	ldrb	r3, [r7, #23]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d11d      	bne.n	800f402 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6a1b      	ldr	r3, [r3, #32]
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	2be5      	cmp	r3, #229	@ 0xe5
 800f3ce:	d004      	beq.n	800f3da <dir_alloc+0x50>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6a1b      	ldr	r3, [r3, #32]
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d107      	bne.n	800f3ea <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	613b      	str	r3, [r7, #16]
 800f3e0:	693a      	ldr	r2, [r7, #16]
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d102      	bne.n	800f3ee <dir_alloc+0x64>
 800f3e8:	e00c      	b.n	800f404 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f3ee:	2101      	movs	r1, #1
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f7ff ff05 	bl	800f200 <dir_next>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f3fa:	7dfb      	ldrb	r3, [r7, #23]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d0d7      	beq.n	800f3b0 <dir_alloc+0x26>
 800f400:	e000      	b.n	800f404 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f402:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f404:	7dfb      	ldrb	r3, [r7, #23]
 800f406:	2b04      	cmp	r3, #4
 800f408:	d101      	bne.n	800f40e <dir_alloc+0x84>
 800f40a:	2307      	movs	r3, #7
 800f40c:	75fb      	strb	r3, [r7, #23]
	return res;
 800f40e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f410:	4618      	mov	r0, r3
 800f412:	3718      	adds	r7, #24
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	331a      	adds	r3, #26
 800f426:	4618      	mov	r0, r3
 800f428:	f7ff f840 	bl	800e4ac <ld_word>
 800f42c:	4603      	mov	r3, r0
 800f42e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	2b03      	cmp	r3, #3
 800f436:	d109      	bne.n	800f44c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	3314      	adds	r3, #20
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7ff f835 	bl	800e4ac <ld_word>
 800f442:	4603      	mov	r3, r0
 800f444:	041b      	lsls	r3, r3, #16
 800f446:	68fa      	ldr	r2, [r7, #12]
 800f448:	4313      	orrs	r3, r2
 800f44a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f44c:	68fb      	ldr	r3, [r7, #12]
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3710      	adds	r7, #16
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}

0800f456 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f456:	b580      	push	{r7, lr}
 800f458:	b084      	sub	sp, #16
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	60f8      	str	r0, [r7, #12]
 800f45e:	60b9      	str	r1, [r7, #8]
 800f460:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	331a      	adds	r3, #26
 800f466:	687a      	ldr	r2, [r7, #4]
 800f468:	b292      	uxth	r2, r2
 800f46a:	4611      	mov	r1, r2
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7ff f859 	bl	800e524 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	2b03      	cmp	r3, #3
 800f478:	d109      	bne.n	800f48e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	f103 0214 	add.w	r2, r3, #20
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	0c1b      	lsrs	r3, r3, #16
 800f484:	b29b      	uxth	r3, r3
 800f486:	4619      	mov	r1, r3
 800f488:	4610      	mov	r0, r2
 800f48a:	f7ff f84b 	bl	800e524 <st_word>
	}
}
 800f48e:	bf00      	nop
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f496:	b580      	push	{r7, lr}
 800f498:	b086      	sub	sp, #24
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f7ff fe2f 	bl	800f10a <dir_sdi>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f4b0:	7dfb      	ldrb	r3, [r7, #23]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d001      	beq.n	800f4ba <dir_find+0x24>
 800f4b6:	7dfb      	ldrb	r3, [r7, #23]
 800f4b8:	e03e      	b.n	800f538 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	69db      	ldr	r3, [r3, #28]
 800f4be:	4619      	mov	r1, r3
 800f4c0:	6938      	ldr	r0, [r7, #16]
 800f4c2:	f7ff faa5 	bl	800ea10 <move_window>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f4ca:	7dfb      	ldrb	r3, [r7, #23]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d12f      	bne.n	800f530 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6a1b      	ldr	r3, [r3, #32]
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d102      	bne.n	800f4e4 <dir_find+0x4e>
 800f4de:	2304      	movs	r3, #4
 800f4e0:	75fb      	strb	r3, [r7, #23]
 800f4e2:	e028      	b.n	800f536 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a1b      	ldr	r3, [r3, #32]
 800f4e8:	330b      	adds	r3, #11
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f4f0:	b2da      	uxtb	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6a1b      	ldr	r3, [r3, #32]
 800f4fa:	330b      	adds	r3, #11
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	f003 0308 	and.w	r3, r3, #8
 800f502:	2b00      	cmp	r3, #0
 800f504:	d10a      	bne.n	800f51c <dir_find+0x86>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6a18      	ldr	r0, [r3, #32]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	3324      	adds	r3, #36	@ 0x24
 800f50e:	220b      	movs	r2, #11
 800f510:	4619      	mov	r1, r3
 800f512:	f7ff f88a 	bl	800e62a <mem_cmp>
 800f516:	4603      	mov	r3, r0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d00b      	beq.n	800f534 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f51c:	2100      	movs	r1, #0
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f7ff fe6e 	bl	800f200 <dir_next>
 800f524:	4603      	mov	r3, r0
 800f526:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f528:	7dfb      	ldrb	r3, [r7, #23]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d0c5      	beq.n	800f4ba <dir_find+0x24>
 800f52e:	e002      	b.n	800f536 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f530:	bf00      	nop
 800f532:	e000      	b.n	800f536 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f534:	bf00      	nop

	return res;
 800f536:	7dfb      	ldrb	r3, [r7, #23]
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3718      	adds	r7, #24
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}

0800f540 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b084      	sub	sp, #16
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f54e:	2101      	movs	r1, #1
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7ff ff1a 	bl	800f38a <dir_alloc>
 800f556:	4603      	mov	r3, r0
 800f558:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f55a:	7bfb      	ldrb	r3, [r7, #15]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d11c      	bne.n	800f59a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	69db      	ldr	r3, [r3, #28]
 800f564:	4619      	mov	r1, r3
 800f566:	68b8      	ldr	r0, [r7, #8]
 800f568:	f7ff fa52 	bl	800ea10 <move_window>
 800f56c:	4603      	mov	r3, r0
 800f56e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f570:	7bfb      	ldrb	r3, [r7, #15]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d111      	bne.n	800f59a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6a1b      	ldr	r3, [r3, #32]
 800f57a:	2220      	movs	r2, #32
 800f57c:	2100      	movs	r1, #0
 800f57e:	4618      	mov	r0, r3
 800f580:	f7ff f838 	bl	800e5f4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6a18      	ldr	r0, [r3, #32]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	3324      	adds	r3, #36	@ 0x24
 800f58c:	220b      	movs	r2, #11
 800f58e:	4619      	mov	r1, r3
 800f590:	f7ff f80f 	bl	800e5b2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2201      	movs	r2, #1
 800f598:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3710      	adds	r7, #16
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b088      	sub	sp, #32
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	60fb      	str	r3, [r7, #12]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	3324      	adds	r3, #36	@ 0x24
 800f5b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f5ba:	220b      	movs	r2, #11
 800f5bc:	2120      	movs	r1, #32
 800f5be:	68b8      	ldr	r0, [r7, #8]
 800f5c0:	f7ff f818 	bl	800e5f4 <mem_set>
	si = i = 0; ni = 8;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	613b      	str	r3, [r7, #16]
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	61fb      	str	r3, [r7, #28]
 800f5cc:	2308      	movs	r3, #8
 800f5ce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	1c5a      	adds	r2, r3, #1
 800f5d4:	61fa      	str	r2, [r7, #28]
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	4413      	add	r3, r2
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f5de:	7efb      	ldrb	r3, [r7, #27]
 800f5e0:	2b20      	cmp	r3, #32
 800f5e2:	d94e      	bls.n	800f682 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f5e4:	7efb      	ldrb	r3, [r7, #27]
 800f5e6:	2b2f      	cmp	r3, #47	@ 0x2f
 800f5e8:	d006      	beq.n	800f5f8 <create_name+0x54>
 800f5ea:	7efb      	ldrb	r3, [r7, #27]
 800f5ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800f5ee:	d110      	bne.n	800f612 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f5f0:	e002      	b.n	800f5f8 <create_name+0x54>
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	61fb      	str	r3, [r7, #28]
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	69fb      	ldr	r3, [r7, #28]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2b2f      	cmp	r3, #47	@ 0x2f
 800f602:	d0f6      	beq.n	800f5f2 <create_name+0x4e>
 800f604:	68fa      	ldr	r2, [r7, #12]
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	4413      	add	r3, r2
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f60e:	d0f0      	beq.n	800f5f2 <create_name+0x4e>
			break;
 800f610:	e038      	b.n	800f684 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f612:	7efb      	ldrb	r3, [r7, #27]
 800f614:	2b2e      	cmp	r3, #46	@ 0x2e
 800f616:	d003      	beq.n	800f620 <create_name+0x7c>
 800f618:	693a      	ldr	r2, [r7, #16]
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d30c      	bcc.n	800f63a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	2b0b      	cmp	r3, #11
 800f624:	d002      	beq.n	800f62c <create_name+0x88>
 800f626:	7efb      	ldrb	r3, [r7, #27]
 800f628:	2b2e      	cmp	r3, #46	@ 0x2e
 800f62a:	d001      	beq.n	800f630 <create_name+0x8c>
 800f62c:	2306      	movs	r3, #6
 800f62e:	e044      	b.n	800f6ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f630:	2308      	movs	r3, #8
 800f632:	613b      	str	r3, [r7, #16]
 800f634:	230b      	movs	r3, #11
 800f636:	617b      	str	r3, [r7, #20]
			continue;
 800f638:	e022      	b.n	800f680 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f63a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	da04      	bge.n	800f64c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f642:	7efb      	ldrb	r3, [r7, #27]
 800f644:	3b80      	subs	r3, #128	@ 0x80
 800f646:	4a1f      	ldr	r2, [pc, #124]	@ (800f6c4 <create_name+0x120>)
 800f648:	5cd3      	ldrb	r3, [r2, r3]
 800f64a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f64c:	7efb      	ldrb	r3, [r7, #27]
 800f64e:	4619      	mov	r1, r3
 800f650:	481d      	ldr	r0, [pc, #116]	@ (800f6c8 <create_name+0x124>)
 800f652:	f7ff f811 	bl	800e678 <chk_chr>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d001      	beq.n	800f660 <create_name+0xbc>
 800f65c:	2306      	movs	r3, #6
 800f65e:	e02c      	b.n	800f6ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f660:	7efb      	ldrb	r3, [r7, #27]
 800f662:	2b60      	cmp	r3, #96	@ 0x60
 800f664:	d905      	bls.n	800f672 <create_name+0xce>
 800f666:	7efb      	ldrb	r3, [r7, #27]
 800f668:	2b7a      	cmp	r3, #122	@ 0x7a
 800f66a:	d802      	bhi.n	800f672 <create_name+0xce>
 800f66c:	7efb      	ldrb	r3, [r7, #27]
 800f66e:	3b20      	subs	r3, #32
 800f670:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	1c5a      	adds	r2, r3, #1
 800f676:	613a      	str	r2, [r7, #16]
 800f678:	68ba      	ldr	r2, [r7, #8]
 800f67a:	4413      	add	r3, r2
 800f67c:	7efa      	ldrb	r2, [r7, #27]
 800f67e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f680:	e7a6      	b.n	800f5d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f682:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f684:	68fa      	ldr	r2, [r7, #12]
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	441a      	add	r2, r3
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d101      	bne.n	800f698 <create_name+0xf4>
 800f694:	2306      	movs	r3, #6
 800f696:	e010      	b.n	800f6ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	2be5      	cmp	r3, #229	@ 0xe5
 800f69e:	d102      	bne.n	800f6a6 <create_name+0x102>
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	2205      	movs	r2, #5
 800f6a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f6a6:	7efb      	ldrb	r3, [r7, #27]
 800f6a8:	2b20      	cmp	r3, #32
 800f6aa:	d801      	bhi.n	800f6b0 <create_name+0x10c>
 800f6ac:	2204      	movs	r2, #4
 800f6ae:	e000      	b.n	800f6b2 <create_name+0x10e>
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	330b      	adds	r3, #11
 800f6b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f6b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3720      	adds	r7, #32
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	080174f0 	.word	0x080174f0
 800f6c8:	0801746c 	.word	0x0801746c

0800f6cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b086      	sub	sp, #24
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f6e0:	e002      	b.n	800f6e8 <follow_path+0x1c>
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	603b      	str	r3, [r7, #0]
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	2b2f      	cmp	r3, #47	@ 0x2f
 800f6ee:	d0f8      	beq.n	800f6e2 <follow_path+0x16>
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	2b5c      	cmp	r3, #92	@ 0x5c
 800f6f6:	d0f4      	beq.n	800f6e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	2b1f      	cmp	r3, #31
 800f704:	d80a      	bhi.n	800f71c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2280      	movs	r2, #128	@ 0x80
 800f70a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f70e:	2100      	movs	r1, #0
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f7ff fcfa 	bl	800f10a <dir_sdi>
 800f716:	4603      	mov	r3, r0
 800f718:	75fb      	strb	r3, [r7, #23]
 800f71a:	e043      	b.n	800f7a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f71c:	463b      	mov	r3, r7
 800f71e:	4619      	mov	r1, r3
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f7ff ff3f 	bl	800f5a4 <create_name>
 800f726:	4603      	mov	r3, r0
 800f728:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f72a:	7dfb      	ldrb	r3, [r7, #23]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d134      	bne.n	800f79a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7ff feb0 	bl	800f496 <dir_find>
 800f736:	4603      	mov	r3, r0
 800f738:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f740:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f742:	7dfb      	ldrb	r3, [r7, #23]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d00a      	beq.n	800f75e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f748:	7dfb      	ldrb	r3, [r7, #23]
 800f74a:	2b04      	cmp	r3, #4
 800f74c:	d127      	bne.n	800f79e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f74e:	7afb      	ldrb	r3, [r7, #11]
 800f750:	f003 0304 	and.w	r3, r3, #4
 800f754:	2b00      	cmp	r3, #0
 800f756:	d122      	bne.n	800f79e <follow_path+0xd2>
 800f758:	2305      	movs	r3, #5
 800f75a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f75c:	e01f      	b.n	800f79e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f75e:	7afb      	ldrb	r3, [r7, #11]
 800f760:	f003 0304 	and.w	r3, r3, #4
 800f764:	2b00      	cmp	r3, #0
 800f766:	d11c      	bne.n	800f7a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	799b      	ldrb	r3, [r3, #6]
 800f76c:	f003 0310 	and.w	r3, r3, #16
 800f770:	2b00      	cmp	r3, #0
 800f772:	d102      	bne.n	800f77a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f774:	2305      	movs	r3, #5
 800f776:	75fb      	strb	r3, [r7, #23]
 800f778:	e014      	b.n	800f7a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	695b      	ldr	r3, [r3, #20]
 800f784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f788:	4413      	add	r3, r2
 800f78a:	4619      	mov	r1, r3
 800f78c:	68f8      	ldr	r0, [r7, #12]
 800f78e:	f7ff fe43 	bl	800f418 <ld_clust>
 800f792:	4602      	mov	r2, r0
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f798:	e7c0      	b.n	800f71c <follow_path+0x50>
			if (res != FR_OK) break;
 800f79a:	bf00      	nop
 800f79c:	e002      	b.n	800f7a4 <follow_path+0xd8>
				break;
 800f79e:	bf00      	nop
 800f7a0:	e000      	b.n	800f7a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f7a2:	bf00      	nop
			}
		}
	}

	return res;
 800f7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3718      	adds	r7, #24
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f7ae:	b480      	push	{r7}
 800f7b0:	b087      	sub	sp, #28
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d031      	beq.n	800f828 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	617b      	str	r3, [r7, #20]
 800f7ca:	e002      	b.n	800f7d2 <get_ldnumber+0x24>
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	3301      	adds	r3, #1
 800f7d0:	617b      	str	r3, [r7, #20]
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	2b20      	cmp	r3, #32
 800f7d8:	d903      	bls.n	800f7e2 <get_ldnumber+0x34>
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	2b3a      	cmp	r3, #58	@ 0x3a
 800f7e0:	d1f4      	bne.n	800f7cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	2b3a      	cmp	r3, #58	@ 0x3a
 800f7e8:	d11c      	bne.n	800f824 <get_ldnumber+0x76>
			tp = *path;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	1c5a      	adds	r2, r3, #1
 800f7f4:	60fa      	str	r2, [r7, #12]
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	3b30      	subs	r3, #48	@ 0x30
 800f7fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	2b09      	cmp	r3, #9
 800f800:	d80e      	bhi.n	800f820 <get_ldnumber+0x72>
 800f802:	68fa      	ldr	r2, [r7, #12]
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	429a      	cmp	r2, r3
 800f808:	d10a      	bne.n	800f820 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d107      	bne.n	800f820 <get_ldnumber+0x72>
					vol = (int)i;
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	3301      	adds	r3, #1
 800f818:	617b      	str	r3, [r7, #20]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	e002      	b.n	800f82a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f824:	2300      	movs	r3, #0
 800f826:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f828:	693b      	ldr	r3, [r7, #16]
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	371c      	adds	r7, #28
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr
	...

0800f838 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2200      	movs	r2, #0
 800f846:	70da      	strb	r2, [r3, #3]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f04f 32ff 	mov.w	r2, #4294967295
 800f84e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f850:	6839      	ldr	r1, [r7, #0]
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f7ff f8dc 	bl	800ea10 <move_window>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d001      	beq.n	800f862 <check_fs+0x2a>
 800f85e:	2304      	movs	r3, #4
 800f860:	e038      	b.n	800f8d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	3330      	adds	r3, #48	@ 0x30
 800f866:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fe fe1e 	bl	800e4ac <ld_word>
 800f870:	4603      	mov	r3, r0
 800f872:	461a      	mov	r2, r3
 800f874:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f878:	429a      	cmp	r2, r3
 800f87a:	d001      	beq.n	800f880 <check_fs+0x48>
 800f87c:	2303      	movs	r3, #3
 800f87e:	e029      	b.n	800f8d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f886:	2be9      	cmp	r3, #233	@ 0xe9
 800f888:	d009      	beq.n	800f89e <check_fs+0x66>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f890:	2beb      	cmp	r3, #235	@ 0xeb
 800f892:	d11e      	bne.n	800f8d2 <check_fs+0x9a>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f89a:	2b90      	cmp	r3, #144	@ 0x90
 800f89c:	d119      	bne.n	800f8d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	3330      	adds	r3, #48	@ 0x30
 800f8a2:	3336      	adds	r3, #54	@ 0x36
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7fe fe1a 	bl	800e4de <ld_dword>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f8b0:	4a0a      	ldr	r2, [pc, #40]	@ (800f8dc <check_fs+0xa4>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d101      	bne.n	800f8ba <check_fs+0x82>
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	e00c      	b.n	800f8d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	3330      	adds	r3, #48	@ 0x30
 800f8be:	3352      	adds	r3, #82	@ 0x52
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7fe fe0c 	bl	800e4de <ld_dword>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	4a05      	ldr	r2, [pc, #20]	@ (800f8e0 <check_fs+0xa8>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d101      	bne.n	800f8d2 <check_fs+0x9a>
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	e000      	b.n	800f8d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f8d2:	2302      	movs	r3, #2
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	00544146 	.word	0x00544146
 800f8e0:	33544146 	.word	0x33544146

0800f8e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b096      	sub	sp, #88	@ 0x58
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	4613      	mov	r3, r2
 800f8f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f8f8:	68f8      	ldr	r0, [r7, #12]
 800f8fa:	f7ff ff58 	bl	800f7ae <get_ldnumber>
 800f8fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f902:	2b00      	cmp	r3, #0
 800f904:	da01      	bge.n	800f90a <find_volume+0x26>
 800f906:	230b      	movs	r3, #11
 800f908:	e22d      	b.n	800fd66 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f90a:	4aa1      	ldr	r2, [pc, #644]	@ (800fb90 <find_volume+0x2ac>)
 800f90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f912:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f916:	2b00      	cmp	r3, #0
 800f918:	d101      	bne.n	800f91e <find_volume+0x3a>
 800f91a:	230c      	movs	r3, #12
 800f91c:	e223      	b.n	800fd66 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f922:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f924:	79fb      	ldrb	r3, [r7, #7]
 800f926:	f023 0301 	bic.w	r3, r3, #1
 800f92a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d01a      	beq.n	800f96a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f936:	785b      	ldrb	r3, [r3, #1]
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fe fd19 	bl	800e370 <disk_status>
 800f93e:	4603      	mov	r3, r0
 800f940:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f944:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f948:	f003 0301 	and.w	r3, r3, #1
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10c      	bne.n	800f96a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f950:	79fb      	ldrb	r3, [r7, #7]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d007      	beq.n	800f966 <find_volume+0x82>
 800f956:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f95a:	f003 0304 	and.w	r3, r3, #4
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d001      	beq.n	800f966 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f962:	230a      	movs	r3, #10
 800f964:	e1ff      	b.n	800fd66 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f966:	2300      	movs	r3, #0
 800f968:	e1fd      	b.n	800fd66 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f96c:	2200      	movs	r2, #0
 800f96e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f972:	b2da      	uxtb	r2, r3
 800f974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f976:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f97a:	785b      	ldrb	r3, [r3, #1]
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fe fd11 	bl	800e3a4 <disk_initialize>
 800f982:	4603      	mov	r3, r0
 800f984:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f988:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f98c:	f003 0301 	and.w	r3, r3, #1
 800f990:	2b00      	cmp	r3, #0
 800f992:	d001      	beq.n	800f998 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f994:	2303      	movs	r3, #3
 800f996:	e1e6      	b.n	800fd66 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f998:	79fb      	ldrb	r3, [r7, #7]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d007      	beq.n	800f9ae <find_volume+0xca>
 800f99e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f9a2:	f003 0304 	and.w	r3, r3, #4
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d001      	beq.n	800f9ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f9aa:	230a      	movs	r3, #10
 800f9ac:	e1db      	b.n	800fd66 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f9b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f9b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f9b6:	f7ff ff3f 	bl	800f838 <check_fs>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f9c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f9c4:	2b02      	cmp	r3, #2
 800f9c6:	d149      	bne.n	800fa5c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800f9cc:	e01e      	b.n	800fa0c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f9d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9d6:	011b      	lsls	r3, r3, #4
 800f9d8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f9dc:	4413      	add	r3, r2
 800f9de:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9e2:	3304      	adds	r3, #4
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d006      	beq.n	800f9f8 <find_volume+0x114>
 800f9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9ec:	3308      	adds	r3, #8
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fe fd75 	bl	800e4de <ld_dword>
 800f9f4:	4602      	mov	r2, r0
 800f9f6:	e000      	b.n	800f9fa <find_volume+0x116>
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9fc:	009b      	lsls	r3, r3, #2
 800f9fe:	3358      	adds	r3, #88	@ 0x58
 800fa00:	443b      	add	r3, r7
 800fa02:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fa06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa08:	3301      	adds	r3, #1
 800fa0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa0e:	2b03      	cmp	r3, #3
 800fa10:	d9dd      	bls.n	800f9ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fa12:	2300      	movs	r3, #0
 800fa14:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800fa16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d002      	beq.n	800fa22 <find_volume+0x13e>
 800fa1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa1e:	3b01      	subs	r3, #1
 800fa20:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fa22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa24:	009b      	lsls	r3, r3, #2
 800fa26:	3358      	adds	r3, #88	@ 0x58
 800fa28:	443b      	add	r3, r7
 800fa2a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fa2e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fa30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d005      	beq.n	800fa42 <find_volume+0x15e>
 800fa36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa38:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fa3a:	f7ff fefd 	bl	800f838 <check_fs>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	e000      	b.n	800fa44 <find_volume+0x160>
 800fa42:	2303      	movs	r3, #3
 800fa44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fa48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa4c:	2b01      	cmp	r3, #1
 800fa4e:	d905      	bls.n	800fa5c <find_volume+0x178>
 800fa50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa52:	3301      	adds	r3, #1
 800fa54:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa58:	2b03      	cmp	r3, #3
 800fa5a:	d9e2      	bls.n	800fa22 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fa5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa60:	2b04      	cmp	r3, #4
 800fa62:	d101      	bne.n	800fa68 <find_volume+0x184>
 800fa64:	2301      	movs	r3, #1
 800fa66:	e17e      	b.n	800fd66 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fa68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa6c:	2b01      	cmp	r3, #1
 800fa6e:	d901      	bls.n	800fa74 <find_volume+0x190>
 800fa70:	230d      	movs	r3, #13
 800fa72:	e178      	b.n	800fd66 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fa74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa76:	3330      	adds	r3, #48	@ 0x30
 800fa78:	330b      	adds	r3, #11
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7fe fd16 	bl	800e4ac <ld_word>
 800fa80:	4603      	mov	r3, r0
 800fa82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa86:	d001      	beq.n	800fa8c <find_volume+0x1a8>
 800fa88:	230d      	movs	r3, #13
 800fa8a:	e16c      	b.n	800fd66 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8e:	3330      	adds	r3, #48	@ 0x30
 800fa90:	3316      	adds	r3, #22
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fe fd0a 	bl	800e4ac <ld_word>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fa9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d106      	bne.n	800fab0 <find_volume+0x1cc>
 800faa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa4:	3330      	adds	r3, #48	@ 0x30
 800faa6:	3324      	adds	r3, #36	@ 0x24
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7fe fd18 	bl	800e4de <ld_dword>
 800faae:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800fab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fab4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800fabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fabe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fac2:	789b      	ldrb	r3, [r3, #2]
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d005      	beq.n	800fad4 <find_volume+0x1f0>
 800fac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faca:	789b      	ldrb	r3, [r3, #2]
 800facc:	2b02      	cmp	r3, #2
 800face:	d001      	beq.n	800fad4 <find_volume+0x1f0>
 800fad0:	230d      	movs	r3, #13
 800fad2:	e148      	b.n	800fd66 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad6:	789b      	ldrb	r3, [r3, #2]
 800fad8:	461a      	mov	r2, r3
 800fada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fadc:	fb02 f303 	mul.w	r3, r2, r3
 800fae0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fae8:	461a      	mov	r2, r3
 800faea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800faee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faf0:	895b      	ldrh	r3, [r3, #10]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d008      	beq.n	800fb08 <find_volume+0x224>
 800faf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faf8:	895b      	ldrh	r3, [r3, #10]
 800fafa:	461a      	mov	r2, r3
 800fafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fafe:	895b      	ldrh	r3, [r3, #10]
 800fb00:	3b01      	subs	r3, #1
 800fb02:	4013      	ands	r3, r2
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d001      	beq.n	800fb0c <find_volume+0x228>
 800fb08:	230d      	movs	r3, #13
 800fb0a:	e12c      	b.n	800fd66 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fb0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb0e:	3330      	adds	r3, #48	@ 0x30
 800fb10:	3311      	adds	r3, #17
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fe fcca 	bl	800e4ac <ld_word>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb1e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fb20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb22:	891b      	ldrh	r3, [r3, #8]
 800fb24:	f003 030f 	and.w	r3, r3, #15
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d001      	beq.n	800fb32 <find_volume+0x24e>
 800fb2e:	230d      	movs	r3, #13
 800fb30:	e119      	b.n	800fd66 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb34:	3330      	adds	r3, #48	@ 0x30
 800fb36:	3313      	adds	r3, #19
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fe fcb7 	bl	800e4ac <ld_word>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fb42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d106      	bne.n	800fb56 <find_volume+0x272>
 800fb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb4a:	3330      	adds	r3, #48	@ 0x30
 800fb4c:	3320      	adds	r3, #32
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7fe fcc5 	bl	800e4de <ld_dword>
 800fb54:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fb56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb58:	3330      	adds	r3, #48	@ 0x30
 800fb5a:	330e      	adds	r3, #14
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7fe fca5 	bl	800e4ac <ld_word>
 800fb62:	4603      	mov	r3, r0
 800fb64:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fb66:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d101      	bne.n	800fb70 <find_volume+0x28c>
 800fb6c:	230d      	movs	r3, #13
 800fb6e:	e0fa      	b.n	800fd66 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fb70:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fb72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb74:	4413      	add	r3, r2
 800fb76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb78:	8912      	ldrh	r2, [r2, #8]
 800fb7a:	0912      	lsrs	r2, r2, #4
 800fb7c:	b292      	uxth	r2, r2
 800fb7e:	4413      	add	r3, r2
 800fb80:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fb82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d204      	bcs.n	800fb94 <find_volume+0x2b0>
 800fb8a:	230d      	movs	r3, #13
 800fb8c:	e0eb      	b.n	800fd66 <find_volume+0x482>
 800fb8e:	bf00      	nop
 800fb90:	20006bc8 	.word	0x20006bc8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fb94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb98:	1ad3      	subs	r3, r2, r3
 800fb9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb9c:	8952      	ldrh	r2, [r2, #10]
 800fb9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fba2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d101      	bne.n	800fbae <find_volume+0x2ca>
 800fbaa:	230d      	movs	r3, #13
 800fbac:	e0db      	b.n	800fd66 <find_volume+0x482>
		fmt = FS_FAT32;
 800fbae:	2303      	movs	r3, #3
 800fbb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d802      	bhi.n	800fbc4 <find_volume+0x2e0>
 800fbbe:	2302      	movs	r3, #2
 800fbc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d802      	bhi.n	800fbd4 <find_volume+0x2f0>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbd6:	1c9a      	adds	r2, r3, #2
 800fbd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbda:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fbe0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fbe2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fbe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbe6:	441a      	add	r2, r3
 800fbe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbea:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800fbec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbf0:	441a      	add	r2, r3
 800fbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbf4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800fbf6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fbfa:	2b03      	cmp	r3, #3
 800fbfc:	d11e      	bne.n	800fc3c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc00:	3330      	adds	r3, #48	@ 0x30
 800fc02:	332a      	adds	r3, #42	@ 0x2a
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fe fc51 	bl	800e4ac <ld_word>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d001      	beq.n	800fc14 <find_volume+0x330>
 800fc10:	230d      	movs	r3, #13
 800fc12:	e0a8      	b.n	800fd66 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc16:	891b      	ldrh	r3, [r3, #8]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d001      	beq.n	800fc20 <find_volume+0x33c>
 800fc1c:	230d      	movs	r3, #13
 800fc1e:	e0a2      	b.n	800fd66 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc22:	3330      	adds	r3, #48	@ 0x30
 800fc24:	332c      	adds	r3, #44	@ 0x2c
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fe fc59 	bl	800e4de <ld_dword>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc30:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc34:	695b      	ldr	r3, [r3, #20]
 800fc36:	009b      	lsls	r3, r3, #2
 800fc38:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc3a:	e01f      	b.n	800fc7c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc3e:	891b      	ldrh	r3, [r3, #8]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d101      	bne.n	800fc48 <find_volume+0x364>
 800fc44:	230d      	movs	r3, #13
 800fc46:	e08e      	b.n	800fd66 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc4a:	6a1a      	ldr	r2, [r3, #32]
 800fc4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc4e:	441a      	add	r2, r3
 800fc50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc52:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fc54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fc58:	2b02      	cmp	r3, #2
 800fc5a:	d103      	bne.n	800fc64 <find_volume+0x380>
 800fc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5e:	695b      	ldr	r3, [r3, #20]
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	e00a      	b.n	800fc7a <find_volume+0x396>
 800fc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc66:	695a      	ldr	r2, [r3, #20]
 800fc68:	4613      	mov	r3, r2
 800fc6a:	005b      	lsls	r3, r3, #1
 800fc6c:	4413      	add	r3, r2
 800fc6e:	085a      	lsrs	r2, r3, #1
 800fc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc72:	695b      	ldr	r3, [r3, #20]
 800fc74:	f003 0301 	and.w	r3, r3, #1
 800fc78:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fc7a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc7e:	699a      	ldr	r2, [r3, #24]
 800fc80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc82:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800fc86:	0a5b      	lsrs	r3, r3, #9
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d201      	bcs.n	800fc90 <find_volume+0x3ac>
 800fc8c:	230d      	movs	r3, #13
 800fc8e:	e06a      	b.n	800fd66 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc92:	f04f 32ff 	mov.w	r2, #4294967295
 800fc96:	611a      	str	r2, [r3, #16]
 800fc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc9a:	691a      	ldr	r2, [r3, #16]
 800fc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc9e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca2:	2280      	movs	r2, #128	@ 0x80
 800fca4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fca6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fcaa:	2b03      	cmp	r3, #3
 800fcac:	d149      	bne.n	800fd42 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fcae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcb0:	3330      	adds	r3, #48	@ 0x30
 800fcb2:	3330      	adds	r3, #48	@ 0x30
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7fe fbf9 	bl	800e4ac <ld_word>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b01      	cmp	r3, #1
 800fcbe:	d140      	bne.n	800fd42 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fcc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fcc8:	f7fe fea2 	bl	800ea10 <move_window>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d137      	bne.n	800fd42 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcda:	3330      	adds	r3, #48	@ 0x30
 800fcdc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7fe fbe3 	bl	800e4ac <ld_word>
 800fce6:	4603      	mov	r3, r0
 800fce8:	461a      	mov	r2, r3
 800fcea:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d127      	bne.n	800fd42 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fcf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf4:	3330      	adds	r3, #48	@ 0x30
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fe fbf1 	bl	800e4de <ld_dword>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	4a1c      	ldr	r2, [pc, #112]	@ (800fd70 <find_volume+0x48c>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d11e      	bne.n	800fd42 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd06:	3330      	adds	r3, #48	@ 0x30
 800fd08:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7fe fbe6 	bl	800e4de <ld_dword>
 800fd12:	4603      	mov	r3, r0
 800fd14:	4a17      	ldr	r2, [pc, #92]	@ (800fd74 <find_volume+0x490>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d113      	bne.n	800fd42 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd1c:	3330      	adds	r3, #48	@ 0x30
 800fd1e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7fe fbdb 	bl	800e4de <ld_dword>
 800fd28:	4602      	mov	r2, r0
 800fd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd2c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd30:	3330      	adds	r3, #48	@ 0x30
 800fd32:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fe fbd1 	bl	800e4de <ld_dword>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd40:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd44:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800fd48:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fd4a:	4b0b      	ldr	r3, [pc, #44]	@ (800fd78 <find_volume+0x494>)
 800fd4c:	881b      	ldrh	r3, [r3, #0]
 800fd4e:	3301      	adds	r3, #1
 800fd50:	b29a      	uxth	r2, r3
 800fd52:	4b09      	ldr	r3, [pc, #36]	@ (800fd78 <find_volume+0x494>)
 800fd54:	801a      	strh	r2, [r3, #0]
 800fd56:	4b08      	ldr	r3, [pc, #32]	@ (800fd78 <find_volume+0x494>)
 800fd58:	881a      	ldrh	r2, [r3, #0]
 800fd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd5c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fd5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fd60:	f7fe fdee 	bl	800e940 <clear_lock>
#endif
	return FR_OK;
 800fd64:	2300      	movs	r3, #0
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3758      	adds	r7, #88	@ 0x58
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	41615252 	.word	0x41615252
 800fd74:	61417272 	.word	0x61417272
 800fd78:	20006bcc 	.word	0x20006bcc

0800fd7c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fd86:	2309      	movs	r3, #9
 800fd88:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d01c      	beq.n	800fdca <validate+0x4e>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d018      	beq.n	800fdca <validate+0x4e>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d013      	beq.n	800fdca <validate+0x4e>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	889a      	ldrh	r2, [r3, #4]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	88db      	ldrh	r3, [r3, #6]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d10c      	bne.n	800fdca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	785b      	ldrb	r3, [r3, #1]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fe fada 	bl	800e370 <disk_status>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	f003 0301 	and.w	r3, r3, #1
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d101      	bne.n	800fdca <validate+0x4e>
			res = FR_OK;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fdca:	7bfb      	ldrb	r3, [r7, #15]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d102      	bne.n	800fdd6 <validate+0x5a>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	e000      	b.n	800fdd8 <validate+0x5c>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	683a      	ldr	r2, [r7, #0]
 800fdda:	6013      	str	r3, [r2, #0]
	return res;
 800fddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
	...

0800fde8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b088      	sub	sp, #32
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	4613      	mov	r3, r2
 800fdf4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fdfa:	f107 0310 	add.w	r3, r7, #16
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7ff fcd5 	bl	800f7ae <get_ldnumber>
 800fe04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	da01      	bge.n	800fe10 <f_mount+0x28>
 800fe0c:	230b      	movs	r3, #11
 800fe0e:	e02b      	b.n	800fe68 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fe10:	4a17      	ldr	r2, [pc, #92]	@ (800fe70 <f_mount+0x88>)
 800fe12:	69fb      	ldr	r3, [r7, #28]
 800fe14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fe1a:	69bb      	ldr	r3, [r7, #24]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d005      	beq.n	800fe2c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fe20:	69b8      	ldr	r0, [r7, #24]
 800fe22:	f7fe fd8d 	bl	800e940 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fe26:	69bb      	ldr	r3, [r7, #24]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d002      	beq.n	800fe38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2200      	movs	r2, #0
 800fe36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	490d      	ldr	r1, [pc, #52]	@ (800fe70 <f_mount+0x88>)
 800fe3c:	69fb      	ldr	r3, [r7, #28]
 800fe3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d002      	beq.n	800fe4e <f_mount+0x66>
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d001      	beq.n	800fe52 <f_mount+0x6a>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	e00a      	b.n	800fe68 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fe52:	f107 010c 	add.w	r1, r7, #12
 800fe56:	f107 0308 	add.w	r3, r7, #8
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7ff fd41 	bl	800f8e4 <find_volume>
 800fe62:	4603      	mov	r3, r0
 800fe64:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fe66:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3720      	adds	r7, #32
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}
 800fe70:	20006bc8 	.word	0x20006bc8

0800fe74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b098      	sub	sp, #96	@ 0x60
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	4613      	mov	r3, r2
 800fe80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d101      	bne.n	800fe8c <f_open+0x18>
 800fe88:	2309      	movs	r3, #9
 800fe8a:	e1a9      	b.n	80101e0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fe8c:	79fb      	ldrb	r3, [r7, #7]
 800fe8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fe94:	79fa      	ldrb	r2, [r7, #7]
 800fe96:	f107 0110 	add.w	r1, r7, #16
 800fe9a:	f107 0308 	add.w	r3, r7, #8
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7ff fd20 	bl	800f8e4 <find_volume>
 800fea4:	4603      	mov	r3, r0
 800fea6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800feaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f040 818d 	bne.w	80101ce <f_open+0x35a>
		dj.obj.fs = fs;
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800feb8:	68ba      	ldr	r2, [r7, #8]
 800feba:	f107 0314 	add.w	r3, r7, #20
 800febe:	4611      	mov	r1, r2
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7ff fc03 	bl	800f6cc <follow_path>
 800fec6:	4603      	mov	r3, r0
 800fec8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fecc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d118      	bne.n	800ff06 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fed4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fed8:	b25b      	sxtb	r3, r3
 800feda:	2b00      	cmp	r3, #0
 800fedc:	da03      	bge.n	800fee6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fede:	2306      	movs	r3, #6
 800fee0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fee4:	e00f      	b.n	800ff06 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fee6:	79fb      	ldrb	r3, [r7, #7]
 800fee8:	2b01      	cmp	r3, #1
 800feea:	bf8c      	ite	hi
 800feec:	2301      	movhi	r3, #1
 800feee:	2300      	movls	r3, #0
 800fef0:	b2db      	uxtb	r3, r3
 800fef2:	461a      	mov	r2, r3
 800fef4:	f107 0314 	add.w	r3, r7, #20
 800fef8:	4611      	mov	r1, r2
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fe fbd8 	bl	800e6b0 <chk_lock>
 800ff00:	4603      	mov	r3, r0
 800ff02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ff06:	79fb      	ldrb	r3, [r7, #7]
 800ff08:	f003 031c 	and.w	r3, r3, #28
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d07f      	beq.n	8010010 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ff10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d017      	beq.n	800ff48 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ff18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ff1c:	2b04      	cmp	r3, #4
 800ff1e:	d10e      	bne.n	800ff3e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ff20:	f7fe fc22 	bl	800e768 <enq_lock>
 800ff24:	4603      	mov	r3, r0
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d006      	beq.n	800ff38 <f_open+0xc4>
 800ff2a:	f107 0314 	add.w	r3, r7, #20
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7ff fb06 	bl	800f540 <dir_register>
 800ff34:	4603      	mov	r3, r0
 800ff36:	e000      	b.n	800ff3a <f_open+0xc6>
 800ff38:	2312      	movs	r3, #18
 800ff3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ff3e:	79fb      	ldrb	r3, [r7, #7]
 800ff40:	f043 0308 	orr.w	r3, r3, #8
 800ff44:	71fb      	strb	r3, [r7, #7]
 800ff46:	e010      	b.n	800ff6a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ff48:	7ebb      	ldrb	r3, [r7, #26]
 800ff4a:	f003 0311 	and.w	r3, r3, #17
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d003      	beq.n	800ff5a <f_open+0xe6>
					res = FR_DENIED;
 800ff52:	2307      	movs	r3, #7
 800ff54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ff58:	e007      	b.n	800ff6a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ff5a:	79fb      	ldrb	r3, [r7, #7]
 800ff5c:	f003 0304 	and.w	r3, r3, #4
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d002      	beq.n	800ff6a <f_open+0xf6>
 800ff64:	2308      	movs	r3, #8
 800ff66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ff6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d168      	bne.n	8010044 <f_open+0x1d0>
 800ff72:	79fb      	ldrb	r3, [r7, #7]
 800ff74:	f003 0308 	and.w	r3, r3, #8
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d063      	beq.n	8010044 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ff7c:	f7fd fcb8 	bl	800d8f0 <get_fattime>
 800ff80:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ff82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff84:	330e      	adds	r3, #14
 800ff86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7fe fae6 	bl	800e55a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ff8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff90:	3316      	adds	r3, #22
 800ff92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7fe fae0 	bl	800e55a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ff9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff9c:	330b      	adds	r3, #11
 800ff9e:	2220      	movs	r2, #32
 800ffa0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ffa6:	4611      	mov	r1, r2
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7ff fa35 	bl	800f418 <ld_clust>
 800ffae:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7ff fa4d 	bl	800f456 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ffbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffbe:	331c      	adds	r3, #28
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fe fac9 	bl	800e55a <st_dword>
					fs->wflag = 1;
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	2201      	movs	r2, #1
 800ffcc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ffce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d037      	beq.n	8010044 <f_open+0x1d0>
						dw = fs->winsect;
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffd8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ffda:	f107 0314 	add.w	r3, r7, #20
 800ffde:	2200      	movs	r2, #0
 800ffe0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7fe ff60 	bl	800eea8 <remove_chain>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800ffee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d126      	bne.n	8010044 <f_open+0x1d0>
							res = move_window(fs, dw);
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fe fd08 	bl	800ea10 <move_window>
 8010000:	4603      	mov	r3, r0
 8010002:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801000a:	3a01      	subs	r2, #1
 801000c:	60da      	str	r2, [r3, #12]
 801000e:	e019      	b.n	8010044 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010010:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010014:	2b00      	cmp	r3, #0
 8010016:	d115      	bne.n	8010044 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010018:	7ebb      	ldrb	r3, [r7, #26]
 801001a:	f003 0310 	and.w	r3, r3, #16
 801001e:	2b00      	cmp	r3, #0
 8010020:	d003      	beq.n	801002a <f_open+0x1b6>
					res = FR_NO_FILE;
 8010022:	2304      	movs	r3, #4
 8010024:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010028:	e00c      	b.n	8010044 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801002a:	79fb      	ldrb	r3, [r7, #7]
 801002c:	f003 0302 	and.w	r3, r3, #2
 8010030:	2b00      	cmp	r3, #0
 8010032:	d007      	beq.n	8010044 <f_open+0x1d0>
 8010034:	7ebb      	ldrb	r3, [r7, #26]
 8010036:	f003 0301 	and.w	r3, r3, #1
 801003a:	2b00      	cmp	r3, #0
 801003c:	d002      	beq.n	8010044 <f_open+0x1d0>
						res = FR_DENIED;
 801003e:	2307      	movs	r3, #7
 8010040:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010044:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010048:	2b00      	cmp	r3, #0
 801004a:	d126      	bne.n	801009a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801004c:	79fb      	ldrb	r3, [r7, #7]
 801004e:	f003 0308 	and.w	r3, r3, #8
 8010052:	2b00      	cmp	r3, #0
 8010054:	d003      	beq.n	801005e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8010056:	79fb      	ldrb	r3, [r7, #7]
 8010058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801005c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8010066:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801006c:	79fb      	ldrb	r3, [r7, #7]
 801006e:	2b01      	cmp	r3, #1
 8010070:	bf8c      	ite	hi
 8010072:	2301      	movhi	r3, #1
 8010074:	2300      	movls	r3, #0
 8010076:	b2db      	uxtb	r3, r3
 8010078:	461a      	mov	r2, r3
 801007a:	f107 0314 	add.w	r3, r7, #20
 801007e:	4611      	mov	r1, r2
 8010080:	4618      	mov	r0, r3
 8010082:	f7fe fb93 	bl	800e7ac <inc_lock>
 8010086:	4602      	mov	r2, r0
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	691b      	ldr	r3, [r3, #16]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d102      	bne.n	801009a <f_open+0x226>
 8010094:	2302      	movs	r3, #2
 8010096:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801009a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801009e:	2b00      	cmp	r3, #0
 80100a0:	f040 8095 	bne.w	80101ce <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80100a8:	4611      	mov	r1, r2
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7ff f9b4 	bl	800f418 <ld_clust>
 80100b0:	4602      	mov	r2, r0
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80100b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100b8:	331c      	adds	r3, #28
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7fe fa0f 	bl	800e4de <ld_dword>
 80100c0:	4602      	mov	r2, r0
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2200      	movs	r2, #0
 80100ca:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80100cc:	693a      	ldr	r2, [r7, #16]
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	88da      	ldrh	r2, [r3, #6]
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	79fa      	ldrb	r2, [r7, #7]
 80100de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2200      	movs	r2, #0
 80100e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2200      	movs	r2, #0
 80100ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	2200      	movs	r2, #0
 80100f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	3330      	adds	r3, #48	@ 0x30
 80100f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100fa:	2100      	movs	r1, #0
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fe fa79 	bl	800e5f4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010102:	79fb      	ldrb	r3, [r7, #7]
 8010104:	f003 0320 	and.w	r3, r3, #32
 8010108:	2b00      	cmp	r3, #0
 801010a:	d060      	beq.n	80101ce <f_open+0x35a>
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d05c      	beq.n	80101ce <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	68da      	ldr	r2, [r3, #12]
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	895b      	ldrh	r3, [r3, #10]
 8010120:	025b      	lsls	r3, r3, #9
 8010122:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	689b      	ldr	r3, [r3, #8]
 8010128:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	68db      	ldr	r3, [r3, #12]
 801012e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010130:	e016      	b.n	8010160 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010136:	4618      	mov	r0, r3
 8010138:	f7fe fd25 	bl	800eb86 <get_fat>
 801013c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801013e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010140:	2b01      	cmp	r3, #1
 8010142:	d802      	bhi.n	801014a <f_open+0x2d6>
 8010144:	2302      	movs	r3, #2
 8010146:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801014a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801014c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010150:	d102      	bne.n	8010158 <f_open+0x2e4>
 8010152:	2301      	movs	r3, #1
 8010154:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010158:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801015a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801015c:	1ad3      	subs	r3, r2, r3
 801015e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010160:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010164:	2b00      	cmp	r3, #0
 8010166:	d103      	bne.n	8010170 <f_open+0x2fc>
 8010168:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801016a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801016c:	429a      	cmp	r2, r3
 801016e:	d8e0      	bhi.n	8010132 <f_open+0x2be>
				}
				fp->clust = clst;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010174:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010176:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801017a:	2b00      	cmp	r3, #0
 801017c:	d127      	bne.n	80101ce <f_open+0x35a>
 801017e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010184:	2b00      	cmp	r3, #0
 8010186:	d022      	beq.n	80101ce <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801018c:	4618      	mov	r0, r3
 801018e:	f7fe fcdb 	bl	800eb48 <clust2sect>
 8010192:	6478      	str	r0, [r7, #68]	@ 0x44
 8010194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010196:	2b00      	cmp	r3, #0
 8010198:	d103      	bne.n	80101a2 <f_open+0x32e>
						res = FR_INT_ERR;
 801019a:	2302      	movs	r3, #2
 801019c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80101a0:	e015      	b.n	80101ce <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80101a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101a4:	0a5a      	lsrs	r2, r3, #9
 80101a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101a8:	441a      	add	r2, r3
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	7858      	ldrb	r0, [r3, #1]
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	6a1a      	ldr	r2, [r3, #32]
 80101bc:	2301      	movs	r3, #1
 80101be:	f7fe f917 	bl	800e3f0 <disk_read>
 80101c2:	4603      	mov	r3, r0
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d002      	beq.n	80101ce <f_open+0x35a>
 80101c8:	2301      	movs	r3, #1
 80101ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80101ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d002      	beq.n	80101dc <f_open+0x368>
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2200      	movs	r2, #0
 80101da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80101dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3760      	adds	r7, #96	@ 0x60
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b08e      	sub	sp, #56	@ 0x38
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	607a      	str	r2, [r7, #4]
 80101f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	2200      	movs	r2, #0
 80101fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f107 0214 	add.w	r2, r7, #20
 8010206:	4611      	mov	r1, r2
 8010208:	4618      	mov	r0, r3
 801020a:	f7ff fdb7 	bl	800fd7c <validate>
 801020e:	4603      	mov	r3, r0
 8010210:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010214:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010218:	2b00      	cmp	r3, #0
 801021a:	d107      	bne.n	801022c <f_read+0x44>
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	7d5b      	ldrb	r3, [r3, #21]
 8010220:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010224:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010228:	2b00      	cmp	r3, #0
 801022a:	d002      	beq.n	8010232 <f_read+0x4a>
 801022c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010230:	e115      	b.n	801045e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	7d1b      	ldrb	r3, [r3, #20]
 8010236:	f003 0301 	and.w	r3, r3, #1
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <f_read+0x5a>
 801023e:	2307      	movs	r3, #7
 8010240:	e10d      	b.n	801045e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	68da      	ldr	r2, [r3, #12]
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	699b      	ldr	r3, [r3, #24]
 801024a:	1ad3      	subs	r3, r2, r3
 801024c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	6a3b      	ldr	r3, [r7, #32]
 8010252:	429a      	cmp	r2, r3
 8010254:	f240 80fe 	bls.w	8010454 <f_read+0x26c>
 8010258:	6a3b      	ldr	r3, [r7, #32]
 801025a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801025c:	e0fa      	b.n	8010454 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	699b      	ldr	r3, [r3, #24]
 8010262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010266:	2b00      	cmp	r3, #0
 8010268:	f040 80c6 	bne.w	80103f8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	699b      	ldr	r3, [r3, #24]
 8010270:	0a5b      	lsrs	r3, r3, #9
 8010272:	697a      	ldr	r2, [r7, #20]
 8010274:	8952      	ldrh	r2, [r2, #10]
 8010276:	3a01      	subs	r2, #1
 8010278:	4013      	ands	r3, r2
 801027a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d12f      	bne.n	80102e2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	699b      	ldr	r3, [r3, #24]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d103      	bne.n	8010292 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010290:	e013      	b.n	80102ba <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010296:	2b00      	cmp	r3, #0
 8010298:	d007      	beq.n	80102aa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	699b      	ldr	r3, [r3, #24]
 801029e:	4619      	mov	r1, r3
 80102a0:	68f8      	ldr	r0, [r7, #12]
 80102a2:	f7fe fefe 	bl	800f0a2 <clmt_clust>
 80102a6:	6338      	str	r0, [r7, #48]	@ 0x30
 80102a8:	e007      	b.n	80102ba <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	69db      	ldr	r3, [r3, #28]
 80102b0:	4619      	mov	r1, r3
 80102b2:	4610      	mov	r0, r2
 80102b4:	f7fe fc67 	bl	800eb86 <get_fat>
 80102b8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80102ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d804      	bhi.n	80102ca <f_read+0xe2>
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	2202      	movs	r2, #2
 80102c4:	755a      	strb	r2, [r3, #21]
 80102c6:	2302      	movs	r3, #2
 80102c8:	e0c9      	b.n	801045e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80102ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d0:	d104      	bne.n	80102dc <f_read+0xf4>
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2201      	movs	r2, #1
 80102d6:	755a      	strb	r2, [r3, #21]
 80102d8:	2301      	movs	r3, #1
 80102da:	e0c0      	b.n	801045e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102e0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80102e2:	697a      	ldr	r2, [r7, #20]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	69db      	ldr	r3, [r3, #28]
 80102e8:	4619      	mov	r1, r3
 80102ea:	4610      	mov	r0, r2
 80102ec:	f7fe fc2c 	bl	800eb48 <clust2sect>
 80102f0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d104      	bne.n	8010302 <f_read+0x11a>
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	2202      	movs	r2, #2
 80102fc:	755a      	strb	r2, [r3, #21]
 80102fe:	2302      	movs	r3, #2
 8010300:	e0ad      	b.n	801045e <f_read+0x276>
			sect += csect;
 8010302:	69ba      	ldr	r2, [r7, #24]
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	4413      	add	r3, r2
 8010308:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	0a5b      	lsrs	r3, r3, #9
 801030e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010312:	2b00      	cmp	r3, #0
 8010314:	d039      	beq.n	801038a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010316:	69fa      	ldr	r2, [r7, #28]
 8010318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801031a:	4413      	add	r3, r2
 801031c:	697a      	ldr	r2, [r7, #20]
 801031e:	8952      	ldrh	r2, [r2, #10]
 8010320:	4293      	cmp	r3, r2
 8010322:	d905      	bls.n	8010330 <f_read+0x148>
					cc = fs->csize - csect;
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	895b      	ldrh	r3, [r3, #10]
 8010328:	461a      	mov	r2, r3
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	1ad3      	subs	r3, r2, r3
 801032e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	7858      	ldrb	r0, [r3, #1]
 8010334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010336:	69ba      	ldr	r2, [r7, #24]
 8010338:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801033a:	f7fe f859 	bl	800e3f0 <disk_read>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d004      	beq.n	801034e <f_read+0x166>
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2201      	movs	r2, #1
 8010348:	755a      	strb	r2, [r3, #21]
 801034a:	2301      	movs	r3, #1
 801034c:	e087      	b.n	801045e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	7d1b      	ldrb	r3, [r3, #20]
 8010352:	b25b      	sxtb	r3, r3
 8010354:	2b00      	cmp	r3, #0
 8010356:	da14      	bge.n	8010382 <f_read+0x19a>
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	6a1a      	ldr	r2, [r3, #32]
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	1ad3      	subs	r3, r2, r3
 8010360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010362:	429a      	cmp	r2, r3
 8010364:	d90d      	bls.n	8010382 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	6a1a      	ldr	r2, [r3, #32]
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	1ad3      	subs	r3, r2, r3
 801036e:	025b      	lsls	r3, r3, #9
 8010370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010372:	18d0      	adds	r0, r2, r3
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	3330      	adds	r3, #48	@ 0x30
 8010378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801037c:	4619      	mov	r1, r3
 801037e:	f7fe f918 	bl	800e5b2 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010384:	025b      	lsls	r3, r3, #9
 8010386:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8010388:	e050      	b.n	801042c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	6a1b      	ldr	r3, [r3, #32]
 801038e:	69ba      	ldr	r2, [r7, #24]
 8010390:	429a      	cmp	r2, r3
 8010392:	d02e      	beq.n	80103f2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	7d1b      	ldrb	r3, [r3, #20]
 8010398:	b25b      	sxtb	r3, r3
 801039a:	2b00      	cmp	r3, #0
 801039c:	da18      	bge.n	80103d0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	7858      	ldrb	r0, [r3, #1]
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6a1a      	ldr	r2, [r3, #32]
 80103ac:	2301      	movs	r3, #1
 80103ae:	f7fe f83f 	bl	800e430 <disk_write>
 80103b2:	4603      	mov	r3, r0
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d004      	beq.n	80103c2 <f_read+0x1da>
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2201      	movs	r2, #1
 80103bc:	755a      	strb	r2, [r3, #21]
 80103be:	2301      	movs	r3, #1
 80103c0:	e04d      	b.n	801045e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	7d1b      	ldrb	r3, [r3, #20]
 80103c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80103ca:	b2da      	uxtb	r2, r3
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	7858      	ldrb	r0, [r3, #1]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80103da:	2301      	movs	r3, #1
 80103dc:	69ba      	ldr	r2, [r7, #24]
 80103de:	f7fe f807 	bl	800e3f0 <disk_read>
 80103e2:	4603      	mov	r3, r0
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d004      	beq.n	80103f2 <f_read+0x20a>
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	2201      	movs	r2, #1
 80103ec:	755a      	strb	r2, [r3, #21]
 80103ee:	2301      	movs	r3, #1
 80103f0:	e035      	b.n	801045e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	69ba      	ldr	r2, [r7, #24]
 80103f6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	699b      	ldr	r3, [r3, #24]
 80103fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010400:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010404:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	429a      	cmp	r2, r3
 801040c:	d901      	bls.n	8010412 <f_read+0x22a>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	699b      	ldr	r3, [r3, #24]
 801041c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010420:	4413      	add	r3, r2
 8010422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010424:	4619      	mov	r1, r3
 8010426:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010428:	f7fe f8c3 	bl	800e5b2 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801042c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801042e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010430:	4413      	add	r3, r2
 8010432:	627b      	str	r3, [r7, #36]	@ 0x24
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	699a      	ldr	r2, [r3, #24]
 8010438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801043a:	441a      	add	r2, r3
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	619a      	str	r2, [r3, #24]
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010446:	441a      	add	r2, r3
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	601a      	str	r2, [r3, #0]
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010450:	1ad3      	subs	r3, r2, r3
 8010452:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	f47f af01 	bne.w	801025e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801045c:	2300      	movs	r3, #0
}
 801045e:	4618      	mov	r0, r3
 8010460:	3738      	adds	r7, #56	@ 0x38
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}

08010466 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b08c      	sub	sp, #48	@ 0x30
 801046a:	af00      	add	r7, sp, #0
 801046c:	60f8      	str	r0, [r7, #12]
 801046e:	60b9      	str	r1, [r7, #8]
 8010470:	607a      	str	r2, [r7, #4]
 8010472:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	2200      	movs	r2, #0
 801047c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f107 0210 	add.w	r2, r7, #16
 8010484:	4611      	mov	r1, r2
 8010486:	4618      	mov	r0, r3
 8010488:	f7ff fc78 	bl	800fd7c <validate>
 801048c:	4603      	mov	r3, r0
 801048e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010492:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010496:	2b00      	cmp	r3, #0
 8010498:	d107      	bne.n	80104aa <f_write+0x44>
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	7d5b      	ldrb	r3, [r3, #21]
 801049e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80104a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d002      	beq.n	80104b0 <f_write+0x4a>
 80104aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80104ae:	e14b      	b.n	8010748 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	7d1b      	ldrb	r3, [r3, #20]
 80104b4:	f003 0302 	and.w	r3, r3, #2
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d101      	bne.n	80104c0 <f_write+0x5a>
 80104bc:	2307      	movs	r3, #7
 80104be:	e143      	b.n	8010748 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	699a      	ldr	r2, [r3, #24]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	441a      	add	r2, r3
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	699b      	ldr	r3, [r3, #24]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	f080 812d 	bcs.w	801072c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	699b      	ldr	r3, [r3, #24]
 80104d6:	43db      	mvns	r3, r3
 80104d8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80104da:	e127      	b.n	801072c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	699b      	ldr	r3, [r3, #24]
 80104e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	f040 80e3 	bne.w	80106b0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	699b      	ldr	r3, [r3, #24]
 80104ee:	0a5b      	lsrs	r3, r3, #9
 80104f0:	693a      	ldr	r2, [r7, #16]
 80104f2:	8952      	ldrh	r2, [r2, #10]
 80104f4:	3a01      	subs	r2, #1
 80104f6:	4013      	ands	r3, r2
 80104f8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d143      	bne.n	8010588 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	699b      	ldr	r3, [r3, #24]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d10c      	bne.n	8010522 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	689b      	ldr	r3, [r3, #8]
 801050c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801050e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010510:	2b00      	cmp	r3, #0
 8010512:	d11a      	bne.n	801054a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2100      	movs	r1, #0
 8010518:	4618      	mov	r0, r3
 801051a:	f7fe fd2a 	bl	800ef72 <create_chain>
 801051e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010520:	e013      	b.n	801054a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010526:	2b00      	cmp	r3, #0
 8010528:	d007      	beq.n	801053a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	699b      	ldr	r3, [r3, #24]
 801052e:	4619      	mov	r1, r3
 8010530:	68f8      	ldr	r0, [r7, #12]
 8010532:	f7fe fdb6 	bl	800f0a2 <clmt_clust>
 8010536:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010538:	e007      	b.n	801054a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801053a:	68fa      	ldr	r2, [r7, #12]
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	69db      	ldr	r3, [r3, #28]
 8010540:	4619      	mov	r1, r3
 8010542:	4610      	mov	r0, r2
 8010544:	f7fe fd15 	bl	800ef72 <create_chain>
 8010548:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801054a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801054c:	2b00      	cmp	r3, #0
 801054e:	f000 80f2 	beq.w	8010736 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010554:	2b01      	cmp	r3, #1
 8010556:	d104      	bne.n	8010562 <f_write+0xfc>
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2202      	movs	r2, #2
 801055c:	755a      	strb	r2, [r3, #21]
 801055e:	2302      	movs	r3, #2
 8010560:	e0f2      	b.n	8010748 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010568:	d104      	bne.n	8010574 <f_write+0x10e>
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	2201      	movs	r2, #1
 801056e:	755a      	strb	r2, [r3, #21]
 8010570:	2301      	movs	r3, #1
 8010572:	e0e9      	b.n	8010748 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010578:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d102      	bne.n	8010588 <f_write+0x122>
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010586:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	7d1b      	ldrb	r3, [r3, #20]
 801058c:	b25b      	sxtb	r3, r3
 801058e:	2b00      	cmp	r3, #0
 8010590:	da18      	bge.n	80105c4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	7858      	ldrb	r0, [r3, #1]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	6a1a      	ldr	r2, [r3, #32]
 80105a0:	2301      	movs	r3, #1
 80105a2:	f7fd ff45 	bl	800e430 <disk_write>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d004      	beq.n	80105b6 <f_write+0x150>
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	2201      	movs	r2, #1
 80105b0:	755a      	strb	r2, [r3, #21]
 80105b2:	2301      	movs	r3, #1
 80105b4:	e0c8      	b.n	8010748 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	7d1b      	ldrb	r3, [r3, #20]
 80105ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80105be:	b2da      	uxtb	r2, r3
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80105c4:	693a      	ldr	r2, [r7, #16]
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	69db      	ldr	r3, [r3, #28]
 80105ca:	4619      	mov	r1, r3
 80105cc:	4610      	mov	r0, r2
 80105ce:	f7fe fabb 	bl	800eb48 <clust2sect>
 80105d2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d104      	bne.n	80105e4 <f_write+0x17e>
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2202      	movs	r2, #2
 80105de:	755a      	strb	r2, [r3, #21]
 80105e0:	2302      	movs	r3, #2
 80105e2:	e0b1      	b.n	8010748 <f_write+0x2e2>
			sect += csect;
 80105e4:	697a      	ldr	r2, [r7, #20]
 80105e6:	69bb      	ldr	r3, [r7, #24]
 80105e8:	4413      	add	r3, r2
 80105ea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	0a5b      	lsrs	r3, r3, #9
 80105f0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80105f2:	6a3b      	ldr	r3, [r7, #32]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d03c      	beq.n	8010672 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80105f8:	69ba      	ldr	r2, [r7, #24]
 80105fa:	6a3b      	ldr	r3, [r7, #32]
 80105fc:	4413      	add	r3, r2
 80105fe:	693a      	ldr	r2, [r7, #16]
 8010600:	8952      	ldrh	r2, [r2, #10]
 8010602:	4293      	cmp	r3, r2
 8010604:	d905      	bls.n	8010612 <f_write+0x1ac>
					cc = fs->csize - csect;
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	895b      	ldrh	r3, [r3, #10]
 801060a:	461a      	mov	r2, r3
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	1ad3      	subs	r3, r2, r3
 8010610:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	7858      	ldrb	r0, [r3, #1]
 8010616:	6a3b      	ldr	r3, [r7, #32]
 8010618:	697a      	ldr	r2, [r7, #20]
 801061a:	69f9      	ldr	r1, [r7, #28]
 801061c:	f7fd ff08 	bl	800e430 <disk_write>
 8010620:	4603      	mov	r3, r0
 8010622:	2b00      	cmp	r3, #0
 8010624:	d004      	beq.n	8010630 <f_write+0x1ca>
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2201      	movs	r2, #1
 801062a:	755a      	strb	r2, [r3, #21]
 801062c:	2301      	movs	r3, #1
 801062e:	e08b      	b.n	8010748 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	6a1a      	ldr	r2, [r3, #32]
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	1ad3      	subs	r3, r2, r3
 8010638:	6a3a      	ldr	r2, [r7, #32]
 801063a:	429a      	cmp	r2, r3
 801063c:	d915      	bls.n	801066a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	6a1a      	ldr	r2, [r3, #32]
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	025b      	lsls	r3, r3, #9
 801064e:	69fa      	ldr	r2, [r7, #28]
 8010650:	4413      	add	r3, r2
 8010652:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010656:	4619      	mov	r1, r3
 8010658:	f7fd ffab 	bl	800e5b2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	7d1b      	ldrb	r3, [r3, #20]
 8010660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010664:	b2da      	uxtb	r2, r3
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801066a:	6a3b      	ldr	r3, [r7, #32]
 801066c:	025b      	lsls	r3, r3, #9
 801066e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8010670:	e03f      	b.n	80106f2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	6a1b      	ldr	r3, [r3, #32]
 8010676:	697a      	ldr	r2, [r7, #20]
 8010678:	429a      	cmp	r2, r3
 801067a:	d016      	beq.n	80106aa <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	699a      	ldr	r2, [r3, #24]
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010684:	429a      	cmp	r2, r3
 8010686:	d210      	bcs.n	80106aa <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	7858      	ldrb	r0, [r3, #1]
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010692:	2301      	movs	r3, #1
 8010694:	697a      	ldr	r2, [r7, #20]
 8010696:	f7fd feab 	bl	800e3f0 <disk_read>
 801069a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801069c:	2b00      	cmp	r3, #0
 801069e:	d004      	beq.n	80106aa <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	2201      	movs	r2, #1
 80106a4:	755a      	strb	r2, [r3, #21]
 80106a6:	2301      	movs	r3, #1
 80106a8:	e04e      	b.n	8010748 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	699b      	ldr	r3, [r3, #24]
 80106b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106b8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80106bc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80106be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d901      	bls.n	80106ca <f_write+0x264>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	699b      	ldr	r3, [r3, #24]
 80106d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106d8:	4413      	add	r3, r2
 80106da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106dc:	69f9      	ldr	r1, [r7, #28]
 80106de:	4618      	mov	r0, r3
 80106e0:	f7fd ff67 	bl	800e5b2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	7d1b      	ldrb	r3, [r3, #20]
 80106e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80106ec:	b2da      	uxtb	r2, r3
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80106f2:	69fa      	ldr	r2, [r7, #28]
 80106f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106f6:	4413      	add	r3, r2
 80106f8:	61fb      	str	r3, [r7, #28]
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	699a      	ldr	r2, [r3, #24]
 80106fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010700:	441a      	add	r2, r3
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	619a      	str	r2, [r3, #24]
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	68da      	ldr	r2, [r3, #12]
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	699b      	ldr	r3, [r3, #24]
 801070e:	429a      	cmp	r2, r3
 8010710:	bf38      	it	cc
 8010712:	461a      	movcc	r2, r3
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	60da      	str	r2, [r3, #12]
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801071e:	441a      	add	r2, r3
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	601a      	str	r2, [r3, #0]
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010728:	1ad3      	subs	r3, r2, r3
 801072a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	f47f aed4 	bne.w	80104dc <f_write+0x76>
 8010734:	e000      	b.n	8010738 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010736:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	7d1b      	ldrb	r3, [r3, #20]
 801073c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010740:	b2da      	uxtb	r2, r3
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3730      	adds	r7, #48	@ 0x30
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b086      	sub	sp, #24
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f107 0208 	add.w	r2, r7, #8
 801075e:	4611      	mov	r1, r2
 8010760:	4618      	mov	r0, r3
 8010762:	f7ff fb0b 	bl	800fd7c <validate>
 8010766:	4603      	mov	r3, r0
 8010768:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801076a:	7dfb      	ldrb	r3, [r7, #23]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d168      	bne.n	8010842 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	7d1b      	ldrb	r3, [r3, #20]
 8010774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010778:	2b00      	cmp	r3, #0
 801077a:	d062      	beq.n	8010842 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	7d1b      	ldrb	r3, [r3, #20]
 8010780:	b25b      	sxtb	r3, r3
 8010782:	2b00      	cmp	r3, #0
 8010784:	da15      	bge.n	80107b2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	7858      	ldrb	r0, [r3, #1]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6a1a      	ldr	r2, [r3, #32]
 8010794:	2301      	movs	r3, #1
 8010796:	f7fd fe4b 	bl	800e430 <disk_write>
 801079a:	4603      	mov	r3, r0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d001      	beq.n	80107a4 <f_sync+0x54>
 80107a0:	2301      	movs	r3, #1
 80107a2:	e04f      	b.n	8010844 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	7d1b      	ldrb	r3, [r3, #20]
 80107a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80107ac:	b2da      	uxtb	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80107b2:	f7fd f89d 	bl	800d8f0 <get_fattime>
 80107b6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80107b8:	68ba      	ldr	r2, [r7, #8]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107be:	4619      	mov	r1, r3
 80107c0:	4610      	mov	r0, r2
 80107c2:	f7fe f925 	bl	800ea10 <move_window>
 80107c6:	4603      	mov	r3, r0
 80107c8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80107ca:	7dfb      	ldrb	r3, [r7, #23]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d138      	bne.n	8010842 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107d4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	330b      	adds	r3, #11
 80107da:	781a      	ldrb	r2, [r3, #0]
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	330b      	adds	r3, #11
 80107e0:	f042 0220 	orr.w	r2, r2, #32
 80107e4:	b2d2      	uxtb	r2, r2
 80107e6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6818      	ldr	r0, [r3, #0]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	689b      	ldr	r3, [r3, #8]
 80107f0:	461a      	mov	r2, r3
 80107f2:	68f9      	ldr	r1, [r7, #12]
 80107f4:	f7fe fe2f 	bl	800f456 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	f103 021c 	add.w	r2, r3, #28
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	4619      	mov	r1, r3
 8010804:	4610      	mov	r0, r2
 8010806:	f7fd fea8 	bl	800e55a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	3316      	adds	r3, #22
 801080e:	6939      	ldr	r1, [r7, #16]
 8010810:	4618      	mov	r0, r3
 8010812:	f7fd fea2 	bl	800e55a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	3312      	adds	r3, #18
 801081a:	2100      	movs	r1, #0
 801081c:	4618      	mov	r0, r3
 801081e:	f7fd fe81 	bl	800e524 <st_word>
					fs->wflag = 1;
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	2201      	movs	r2, #1
 8010826:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	4618      	mov	r0, r3
 801082c:	f7fe f91e 	bl	800ea6c <sync_fs>
 8010830:	4603      	mov	r3, r0
 8010832:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	7d1b      	ldrb	r3, [r3, #20]
 8010838:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801083c:	b2da      	uxtb	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010842:	7dfb      	ldrb	r3, [r7, #23]
}
 8010844:	4618      	mov	r0, r3
 8010846:	3718      	adds	r7, #24
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b084      	sub	sp, #16
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f7ff ff7b 	bl	8010750 <f_sync>
 801085a:	4603      	mov	r3, r0
 801085c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801085e:	7bfb      	ldrb	r3, [r7, #15]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d118      	bne.n	8010896 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f107 0208 	add.w	r2, r7, #8
 801086a:	4611      	mov	r1, r2
 801086c:	4618      	mov	r0, r3
 801086e:	f7ff fa85 	bl	800fd7c <validate>
 8010872:	4603      	mov	r3, r0
 8010874:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010876:	7bfb      	ldrb	r3, [r7, #15]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d10c      	bne.n	8010896 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	691b      	ldr	r3, [r3, #16]
 8010880:	4618      	mov	r0, r3
 8010882:	f7fe f821 	bl	800e8c8 <dec_lock>
 8010886:	4603      	mov	r3, r0
 8010888:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801088a:	7bfb      	ldrb	r3, [r7, #15]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d102      	bne.n	8010896 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2200      	movs	r2, #0
 8010894:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010896:	7bfb      	ldrb	r3, [r7, #15]
}
 8010898:	4618      	mov	r0, r3
 801089a:	3710      	adds	r7, #16
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	460b      	mov	r3, r1
 80108aa:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80108ac:	78fb      	ldrb	r3, [r7, #3]
 80108ae:	2b0a      	cmp	r3, #10
 80108b0:	d103      	bne.n	80108ba <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80108b2:	210d      	movs	r1, #13
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f7ff fff3 	bl	80108a0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	db25      	blt.n	8010912 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	1c5a      	adds	r2, r3, #1
 80108ca:	60fa      	str	r2, [r7, #12]
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	4413      	add	r3, r2
 80108d0:	78fa      	ldrb	r2, [r7, #3]
 80108d2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2b3c      	cmp	r3, #60	@ 0x3c
 80108d8:	dd12      	ble.n	8010900 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6818      	ldr	r0, [r3, #0]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f103 010c 	add.w	r1, r3, #12
 80108e4:	68fa      	ldr	r2, [r7, #12]
 80108e6:	f107 0308 	add.w	r3, r7, #8
 80108ea:	f7ff fdbc 	bl	8010466 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80108ee:	68ba      	ldr	r2, [r7, #8]
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d101      	bne.n	80108fa <putc_bfd+0x5a>
 80108f6:	2300      	movs	r3, #0
 80108f8:	e001      	b.n	80108fe <putc_bfd+0x5e>
 80108fa:	f04f 33ff 	mov.w	r3, #4294967295
 80108fe:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	68fa      	ldr	r2, [r7, #12]
 8010904:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	689b      	ldr	r3, [r3, #8]
 801090a:	1c5a      	adds	r2, r3, #1
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	609a      	str	r2, [r3, #8]
 8010910:	e000      	b.n	8010914 <putc_bfd+0x74>
	if (i < 0) return;
 8010912:	bf00      	nop
}
 8010914:	3710      	adds	r7, #16
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801091a:	b580      	push	{r7, lr}
 801091c:	b084      	sub	sp, #16
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	2b00      	cmp	r3, #0
 8010928:	db16      	blt.n	8010958 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6818      	ldr	r0, [r3, #0]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f103 010c 	add.w	r1, r3, #12
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	461a      	mov	r2, r3
 801093a:	f107 030c 	add.w	r3, r7, #12
 801093e:	f7ff fd92 	bl	8010466 <f_write>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	d107      	bne.n	8010958 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	68fa      	ldr	r2, [r7, #12]
 801094e:	4293      	cmp	r3, r2
 8010950:	d102      	bne.n	8010958 <putc_flush+0x3e>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	689b      	ldr	r3, [r3, #8]
 8010956:	e001      	b.n	801095c <putc_flush+0x42>
	return EOF;
 8010958:	f04f 33ff 	mov.w	r3, #4294967295
}
 801095c:	4618      	mov	r0, r3
 801095e:	3710      	adds	r7, #16
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8010964:	b480      	push	{r7}
 8010966:	b083      	sub	sp, #12
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	683a      	ldr	r2, [r7, #0]
 8010972:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2200      	movs	r2, #0
 8010978:	605a      	str	r2, [r3, #4]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	685a      	ldr	r2, [r3, #4]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	609a      	str	r2, [r3, #8]
}
 8010982:	bf00      	nop
 8010984:	370c      	adds	r7, #12
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr
	...

08010990 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8010990:	b40e      	push	{r1, r2, r3}
 8010992:	b580      	push	{r7, lr}
 8010994:	b0a7      	sub	sp, #156	@ 0x9c
 8010996:	af00      	add	r7, sp, #0
 8010998:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801099a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801099e:	6879      	ldr	r1, [r7, #4]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7ff ffdf 	bl	8010964 <putc_init>

	va_start(arp, fmt);
 80109a6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80109aa:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 80109ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80109b0:	1c5a      	adds	r2, r3, #1
 80109b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 80109bc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f000 81f2 	beq.w	8010daa <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80109c6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80109ca:	2b25      	cmp	r3, #37	@ 0x25
 80109cc:	d008      	beq.n	80109e0 <f_printf+0x50>
			putc_bfd(&pb, c);
 80109ce:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80109d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80109d6:	4611      	mov	r1, r2
 80109d8:	4618      	mov	r0, r3
 80109da:	f7ff ff61 	bl	80108a0 <putc_bfd>
			continue;
 80109de:	e1e3      	b.n	8010da8 <f_printf+0x418>
		}
		w = f = 0;
 80109e0:	2300      	movs	r3, #0
 80109e2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80109e6:	2300      	movs	r3, #0
 80109e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 80109ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80109f0:	1c5a      	adds	r2, r3, #1
 80109f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80109fc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010a00:	2b30      	cmp	r3, #48	@ 0x30
 8010a02:	d10b      	bne.n	8010a1c <f_printf+0x8c>
			f = 1; c = *fmt++;
 8010a04:	2301      	movs	r3, #1
 8010a06:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8010a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010a0e:	1c5a      	adds	r2, r3, #1
 8010a10:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8010a1a:	e024      	b.n	8010a66 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8010a1c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010a20:	2b2d      	cmp	r3, #45	@ 0x2d
 8010a22:	d120      	bne.n	8010a66 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8010a24:	2302      	movs	r3, #2
 8010a26:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8010a2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010a2e:	1c5a      	adds	r2, r3, #1
 8010a30:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8010a3a:	e014      	b.n	8010a66 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8010a3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010a40:	4613      	mov	r3, r2
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	4413      	add	r3, r2
 8010a46:	005b      	lsls	r3, r3, #1
 8010a48:	461a      	mov	r2, r3
 8010a4a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010a4e:	4413      	add	r3, r2
 8010a50:	3b30      	subs	r3, #48	@ 0x30
 8010a52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8010a56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010a5a:	1c5a      	adds	r2, r3, #1
 8010a5c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8010a66:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010a6a:	2b2f      	cmp	r3, #47	@ 0x2f
 8010a6c:	d903      	bls.n	8010a76 <f_printf+0xe6>
 8010a6e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010a72:	2b39      	cmp	r3, #57	@ 0x39
 8010a74:	d9e2      	bls.n	8010a3c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8010a76:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010a7a:	2b6c      	cmp	r3, #108	@ 0x6c
 8010a7c:	d003      	beq.n	8010a86 <f_printf+0xf6>
 8010a7e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010a82:	2b4c      	cmp	r3, #76	@ 0x4c
 8010a84:	d10d      	bne.n	8010aa2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8010a86:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010a8a:	f043 0304 	orr.w	r3, r3, #4
 8010a8e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8010a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010a96:	1c5a      	adds	r2, r3, #1
 8010a98:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8010aa2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	f000 8181 	beq.w	8010dae <f_printf+0x41e>
		d = c;
 8010aac:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010ab0:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8010ab4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8010ab8:	2b60      	cmp	r3, #96	@ 0x60
 8010aba:	d908      	bls.n	8010ace <f_printf+0x13e>
 8010abc:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8010ac0:	2b7a      	cmp	r3, #122	@ 0x7a
 8010ac2:	d804      	bhi.n	8010ace <f_printf+0x13e>
 8010ac4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8010ac8:	3b20      	subs	r3, #32
 8010aca:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8010ace:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8010ad2:	3b42      	subs	r3, #66	@ 0x42
 8010ad4:	2b16      	cmp	r3, #22
 8010ad6:	f200 8098 	bhi.w	8010c0a <f_printf+0x27a>
 8010ada:	a201      	add	r2, pc, #4	@ (adr r2, 8010ae0 <f_printf+0x150>)
 8010adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae0:	08010beb 	.word	0x08010beb
 8010ae4:	08010bd3 	.word	0x08010bd3
 8010ae8:	08010bfb 	.word	0x08010bfb
 8010aec:	08010c0b 	.word	0x08010c0b
 8010af0:	08010c0b 	.word	0x08010c0b
 8010af4:	08010c0b 	.word	0x08010c0b
 8010af8:	08010c0b 	.word	0x08010c0b
 8010afc:	08010c0b 	.word	0x08010c0b
 8010b00:	08010c0b 	.word	0x08010c0b
 8010b04:	08010c0b 	.word	0x08010c0b
 8010b08:	08010c0b 	.word	0x08010c0b
 8010b0c:	08010c0b 	.word	0x08010c0b
 8010b10:	08010c0b 	.word	0x08010c0b
 8010b14:	08010bf3 	.word	0x08010bf3
 8010b18:	08010c0b 	.word	0x08010c0b
 8010b1c:	08010c0b 	.word	0x08010c0b
 8010b20:	08010c0b 	.word	0x08010c0b
 8010b24:	08010b3d 	.word	0x08010b3d
 8010b28:	08010c0b 	.word	0x08010c0b
 8010b2c:	08010bfb 	.word	0x08010bfb
 8010b30:	08010c0b 	.word	0x08010c0b
 8010b34:	08010c0b 	.word	0x08010c0b
 8010b38:	08010c03 	.word	0x08010c03
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8010b3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010b3e:	1d1a      	adds	r2, r3, #4
 8010b40:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8010b46:	2300      	movs	r3, #0
 8010b48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010b4c:	e004      	b.n	8010b58 <f_printf+0x1c8>
 8010b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010b52:	3301      	adds	r3, #1
 8010b54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010b58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010b5e:	4413      	add	r3, r2
 8010b60:	781b      	ldrb	r3, [r3, #0]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d1f3      	bne.n	8010b4e <f_printf+0x1be>
			if (!(f & 2)) {
 8010b66:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010b6a:	f003 0302 	and.w	r3, r3, #2
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d11a      	bne.n	8010ba8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8010b72:	e005      	b.n	8010b80 <f_printf+0x1f0>
 8010b74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010b78:	2120      	movs	r1, #32
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7ff fe90 	bl	80108a0 <putc_bfd>
 8010b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010b84:	1c5a      	adds	r2, r3, #1
 8010b86:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010b8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d8f0      	bhi.n	8010b74 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8010b92:	e009      	b.n	8010ba8 <f_printf+0x218>
 8010b94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010b96:	1c5a      	adds	r2, r3, #1
 8010b98:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010b9a:	781a      	ldrb	r2, [r3, #0]
 8010b9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010ba0:	4611      	mov	r1, r2
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7ff fe7c 	bl	80108a0 <putc_bfd>
 8010ba8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d1f1      	bne.n	8010b94 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8010bb0:	e005      	b.n	8010bbe <f_printf+0x22e>
 8010bb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010bb6:	2120      	movs	r1, #32
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7ff fe71 	bl	80108a0 <putc_bfd>
 8010bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010bc2:	1c5a      	adds	r2, r3, #1
 8010bc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010bc8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d8f0      	bhi.n	8010bb2 <f_printf+0x222>
			continue;
 8010bd0:	e0ea      	b.n	8010da8 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8010bd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010bd4:	1d1a      	adds	r2, r3, #4
 8010bd6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	b2da      	uxtb	r2, r3
 8010bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010be0:	4611      	mov	r1, r2
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7ff fe5c 	bl	80108a0 <putc_bfd>
 8010be8:	e0de      	b.n	8010da8 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8010bea:	2302      	movs	r3, #2
 8010bec:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8010bf0:	e014      	b.n	8010c1c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8010bf2:	2308      	movs	r3, #8
 8010bf4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8010bf8:	e010      	b.n	8010c1c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8010bfa:	230a      	movs	r3, #10
 8010bfc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8010c00:	e00c      	b.n	8010c1c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8010c02:	2310      	movs	r3, #16
 8010c04:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8010c08:	e008      	b.n	8010c1c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8010c0a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8010c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010c12:	4611      	mov	r1, r2
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7ff fe43 	bl	80108a0 <putc_bfd>
 8010c1a:	e0c5      	b.n	8010da8 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8010c1c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010c20:	f003 0304 	and.w	r3, r3, #4
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d004      	beq.n	8010c32 <f_printf+0x2a2>
 8010c28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010c2a:	1d1a      	adds	r2, r3, #4
 8010c2c:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	e00c      	b.n	8010c4c <f_printf+0x2bc>
 8010c32:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8010c36:	2b44      	cmp	r3, #68	@ 0x44
 8010c38:	d104      	bne.n	8010c44 <f_printf+0x2b4>
 8010c3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010c3c:	1d1a      	adds	r2, r3, #4
 8010c3e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	e003      	b.n	8010c4c <f_printf+0x2bc>
 8010c44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010c46:	1d1a      	adds	r2, r3, #4
 8010c48:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8010c50:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8010c54:	2b44      	cmp	r3, #68	@ 0x44
 8010c56:	d10e      	bne.n	8010c76 <f_printf+0x2e6>
 8010c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	da0a      	bge.n	8010c76 <f_printf+0x2e6>
			v = 0 - v;
 8010c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010c64:	425b      	negs	r3, r3
 8010c66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8010c6a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010c6e:	f043 0308 	orr.w	r3, r3, #8
 8010c72:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8010c76:	2300      	movs	r3, #0
 8010c78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8010c7c:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8010c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010c84:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c88:	fb01 f202 	mul.w	r2, r1, r2
 8010c8c:	1a9b      	subs	r3, r3, r2
 8010c8e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8010c92:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8010c96:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8010ca2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8010ca6:	2b09      	cmp	r3, #9
 8010ca8:	d90b      	bls.n	8010cc2 <f_printf+0x332>
 8010caa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010cae:	2b78      	cmp	r3, #120	@ 0x78
 8010cb0:	d101      	bne.n	8010cb6 <f_printf+0x326>
 8010cb2:	2227      	movs	r2, #39	@ 0x27
 8010cb4:	e000      	b.n	8010cb8 <f_printf+0x328>
 8010cb6:	2207      	movs	r2, #7
 8010cb8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8010cbc:	4413      	add	r3, r2
 8010cbe:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8010cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010cc6:	1c5a      	adds	r2, r3, #1
 8010cc8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8010ccc:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8010cd0:	3230      	adds	r2, #48	@ 0x30
 8010cd2:	b2d2      	uxtb	r2, r2
 8010cd4:	3398      	adds	r3, #152	@ 0x98
 8010cd6:	443b      	add	r3, r7
 8010cd8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8010cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d003      	beq.n	8010cec <f_printf+0x35c>
 8010ce4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010ce8:	2b1f      	cmp	r3, #31
 8010cea:	d9c7      	bls.n	8010c7c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8010cec:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010cf0:	f003 0308 	and.w	r3, r3, #8
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d009      	beq.n	8010d0c <f_printf+0x37c>
 8010cf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010cfc:	1c5a      	adds	r2, r3, #1
 8010cfe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8010d02:	3398      	adds	r3, #152	@ 0x98
 8010d04:	443b      	add	r3, r7
 8010d06:	222d      	movs	r2, #45	@ 0x2d
 8010d08:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8010d0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010d10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010d14:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010d18:	f003 0301 	and.w	r3, r3, #1
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d001      	beq.n	8010d24 <f_printf+0x394>
 8010d20:	2330      	movs	r3, #48	@ 0x30
 8010d22:	e000      	b.n	8010d26 <f_printf+0x396>
 8010d24:	2320      	movs	r3, #32
 8010d26:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8010d2a:	e007      	b.n	8010d3c <f_printf+0x3ac>
 8010d2c:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8010d30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010d34:	4611      	mov	r1, r2
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7ff fdb2 	bl	80108a0 <putc_bfd>
 8010d3c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010d40:	f003 0302 	and.w	r3, r3, #2
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d108      	bne.n	8010d5a <f_printf+0x3ca>
 8010d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010d4c:	1c5a      	adds	r2, r3, #1
 8010d4e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010d52:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d8e8      	bhi.n	8010d2c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8010d5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010d5e:	3b01      	subs	r3, #1
 8010d60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010d64:	f107 020c 	add.w	r2, r7, #12
 8010d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010d6c:	4413      	add	r3, r2
 8010d6e:	781a      	ldrb	r2, [r3, #0]
 8010d70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010d74:	4611      	mov	r1, r2
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7ff fd92 	bl	80108a0 <putc_bfd>
		} while (i);
 8010d7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d1ea      	bne.n	8010d5a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8010d84:	e007      	b.n	8010d96 <f_printf+0x406>
 8010d86:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8010d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010d8e:	4611      	mov	r1, r2
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7ff fd85 	bl	80108a0 <putc_bfd>
 8010d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010d9a:	1c5a      	adds	r2, r3, #1
 8010d9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010da0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d8ee      	bhi.n	8010d86 <f_printf+0x3f6>
		c = *fmt++;
 8010da8:	e600      	b.n	80109ac <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8010daa:	bf00      	nop
 8010dac:	e000      	b.n	8010db0 <f_printf+0x420>
		if (!c) break;
 8010dae:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8010db0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff fdb0 	bl	801091a <putc_flush>
 8010dba:	4603      	mov	r3, r0
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	379c      	adds	r7, #156	@ 0x9c
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010dc6:	b003      	add	sp, #12
 8010dc8:	4770      	bx	lr
 8010dca:	bf00      	nop

08010dcc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b087      	sub	sp, #28
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010dda:	2301      	movs	r3, #1
 8010ddc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010dde:	2300      	movs	r3, #0
 8010de0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010de2:	4b1f      	ldr	r3, [pc, #124]	@ (8010e60 <FATFS_LinkDriverEx+0x94>)
 8010de4:	7a5b      	ldrb	r3, [r3, #9]
 8010de6:	b2db      	uxtb	r3, r3
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d131      	bne.n	8010e50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010dec:	4b1c      	ldr	r3, [pc, #112]	@ (8010e60 <FATFS_LinkDriverEx+0x94>)
 8010dee:	7a5b      	ldrb	r3, [r3, #9]
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	461a      	mov	r2, r3
 8010df4:	4b1a      	ldr	r3, [pc, #104]	@ (8010e60 <FATFS_LinkDriverEx+0x94>)
 8010df6:	2100      	movs	r1, #0
 8010df8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010dfa:	4b19      	ldr	r3, [pc, #100]	@ (8010e60 <FATFS_LinkDriverEx+0x94>)
 8010dfc:	7a5b      	ldrb	r3, [r3, #9]
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	4a17      	ldr	r2, [pc, #92]	@ (8010e60 <FATFS_LinkDriverEx+0x94>)
 8010e02:	009b      	lsls	r3, r3, #2
 8010e04:	4413      	add	r3, r2
 8010e06:	68fa      	ldr	r2, [r7, #12]
 8010e08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010e0a:	4b15      	ldr	r3, [pc, #84]	@ (8010e60 <FATFS_LinkDriverEx+0x94>)
 8010e0c:	7a5b      	ldrb	r3, [r3, #9]
 8010e0e:	b2db      	uxtb	r3, r3
 8010e10:	461a      	mov	r2, r3
 8010e12:	4b13      	ldr	r3, [pc, #76]	@ (8010e60 <FATFS_LinkDriverEx+0x94>)
 8010e14:	4413      	add	r3, r2
 8010e16:	79fa      	ldrb	r2, [r7, #7]
 8010e18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010e1a:	4b11      	ldr	r3, [pc, #68]	@ (8010e60 <FATFS_LinkDriverEx+0x94>)
 8010e1c:	7a5b      	ldrb	r3, [r3, #9]
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	1c5a      	adds	r2, r3, #1
 8010e22:	b2d1      	uxtb	r1, r2
 8010e24:	4a0e      	ldr	r2, [pc, #56]	@ (8010e60 <FATFS_LinkDriverEx+0x94>)
 8010e26:	7251      	strb	r1, [r2, #9]
 8010e28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010e2a:	7dbb      	ldrb	r3, [r7, #22]
 8010e2c:	3330      	adds	r3, #48	@ 0x30
 8010e2e:	b2da      	uxtb	r2, r3
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	3301      	adds	r3, #1
 8010e38:	223a      	movs	r2, #58	@ 0x3a
 8010e3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	3302      	adds	r3, #2
 8010e40:	222f      	movs	r2, #47	@ 0x2f
 8010e42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	3303      	adds	r3, #3
 8010e48:	2200      	movs	r2, #0
 8010e4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	371c      	adds	r7, #28
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr
 8010e5e:	bf00      	nop
 8010e60:	20006bf0 	.word	0x20006bf0

08010e64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010e6e:	2200      	movs	r2, #0
 8010e70:	6839      	ldr	r1, [r7, #0]
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f7ff ffaa 	bl	8010dcc <FATFS_LinkDriverEx>
 8010e78:	4603      	mov	r3, r0
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3708      	adds	r7, #8
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}

08010e82 <atof>:
 8010e82:	2100      	movs	r1, #0
 8010e84:	f000 be04 	b.w	8011a90 <strtod>

08010e88 <sulp>:
 8010e88:	b570      	push	{r4, r5, r6, lr}
 8010e8a:	4604      	mov	r4, r0
 8010e8c:	460d      	mov	r5, r1
 8010e8e:	ec45 4b10 	vmov	d0, r4, r5
 8010e92:	4616      	mov	r6, r2
 8010e94:	f003 fabc 	bl	8014410 <__ulp>
 8010e98:	ec51 0b10 	vmov	r0, r1, d0
 8010e9c:	b17e      	cbz	r6, 8010ebe <sulp+0x36>
 8010e9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010ea2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	dd09      	ble.n	8010ebe <sulp+0x36>
 8010eaa:	051b      	lsls	r3, r3, #20
 8010eac:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010eb0:	2400      	movs	r4, #0
 8010eb2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010eb6:	4622      	mov	r2, r4
 8010eb8:	462b      	mov	r3, r5
 8010eba:	f7ef fbd5 	bl	8000668 <__aeabi_dmul>
 8010ebe:	ec41 0b10 	vmov	d0, r0, r1
 8010ec2:	bd70      	pop	{r4, r5, r6, pc}
 8010ec4:	0000      	movs	r0, r0
	...

08010ec8 <_strtod_l>:
 8010ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ecc:	b09f      	sub	sp, #124	@ 0x7c
 8010ece:	460c      	mov	r4, r1
 8010ed0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	921a      	str	r2, [sp, #104]	@ 0x68
 8010ed6:	9005      	str	r0, [sp, #20]
 8010ed8:	f04f 0a00 	mov.w	sl, #0
 8010edc:	f04f 0b00 	mov.w	fp, #0
 8010ee0:	460a      	mov	r2, r1
 8010ee2:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ee4:	7811      	ldrb	r1, [r2, #0]
 8010ee6:	292b      	cmp	r1, #43	@ 0x2b
 8010ee8:	d04a      	beq.n	8010f80 <_strtod_l+0xb8>
 8010eea:	d838      	bhi.n	8010f5e <_strtod_l+0x96>
 8010eec:	290d      	cmp	r1, #13
 8010eee:	d832      	bhi.n	8010f56 <_strtod_l+0x8e>
 8010ef0:	2908      	cmp	r1, #8
 8010ef2:	d832      	bhi.n	8010f5a <_strtod_l+0x92>
 8010ef4:	2900      	cmp	r1, #0
 8010ef6:	d03b      	beq.n	8010f70 <_strtod_l+0xa8>
 8010ef8:	2200      	movs	r2, #0
 8010efa:	920e      	str	r2, [sp, #56]	@ 0x38
 8010efc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010efe:	782a      	ldrb	r2, [r5, #0]
 8010f00:	2a30      	cmp	r2, #48	@ 0x30
 8010f02:	f040 80b2 	bne.w	801106a <_strtod_l+0x1a2>
 8010f06:	786a      	ldrb	r2, [r5, #1]
 8010f08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010f0c:	2a58      	cmp	r2, #88	@ 0x58
 8010f0e:	d16e      	bne.n	8010fee <_strtod_l+0x126>
 8010f10:	9302      	str	r3, [sp, #8]
 8010f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f14:	9301      	str	r3, [sp, #4]
 8010f16:	ab1a      	add	r3, sp, #104	@ 0x68
 8010f18:	9300      	str	r3, [sp, #0]
 8010f1a:	4a8f      	ldr	r2, [pc, #572]	@ (8011158 <_strtod_l+0x290>)
 8010f1c:	9805      	ldr	r0, [sp, #20]
 8010f1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010f20:	a919      	add	r1, sp, #100	@ 0x64
 8010f22:	f002 fb6f 	bl	8013604 <__gethex>
 8010f26:	f010 060f 	ands.w	r6, r0, #15
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	d005      	beq.n	8010f3a <_strtod_l+0x72>
 8010f2e:	2e06      	cmp	r6, #6
 8010f30:	d128      	bne.n	8010f84 <_strtod_l+0xbc>
 8010f32:	3501      	adds	r5, #1
 8010f34:	2300      	movs	r3, #0
 8010f36:	9519      	str	r5, [sp, #100]	@ 0x64
 8010f38:	930e      	str	r3, [sp, #56]	@ 0x38
 8010f3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	f040 858e 	bne.w	8011a5e <_strtod_l+0xb96>
 8010f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f44:	b1cb      	cbz	r3, 8010f7a <_strtod_l+0xb2>
 8010f46:	4652      	mov	r2, sl
 8010f48:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010f4c:	ec43 2b10 	vmov	d0, r2, r3
 8010f50:	b01f      	add	sp, #124	@ 0x7c
 8010f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f56:	2920      	cmp	r1, #32
 8010f58:	d1ce      	bne.n	8010ef8 <_strtod_l+0x30>
 8010f5a:	3201      	adds	r2, #1
 8010f5c:	e7c1      	b.n	8010ee2 <_strtod_l+0x1a>
 8010f5e:	292d      	cmp	r1, #45	@ 0x2d
 8010f60:	d1ca      	bne.n	8010ef8 <_strtod_l+0x30>
 8010f62:	2101      	movs	r1, #1
 8010f64:	910e      	str	r1, [sp, #56]	@ 0x38
 8010f66:	1c51      	adds	r1, r2, #1
 8010f68:	9119      	str	r1, [sp, #100]	@ 0x64
 8010f6a:	7852      	ldrb	r2, [r2, #1]
 8010f6c:	2a00      	cmp	r2, #0
 8010f6e:	d1c5      	bne.n	8010efc <_strtod_l+0x34>
 8010f70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010f72:	9419      	str	r4, [sp, #100]	@ 0x64
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	f040 8570 	bne.w	8011a5a <_strtod_l+0xb92>
 8010f7a:	4652      	mov	r2, sl
 8010f7c:	465b      	mov	r3, fp
 8010f7e:	e7e5      	b.n	8010f4c <_strtod_l+0x84>
 8010f80:	2100      	movs	r1, #0
 8010f82:	e7ef      	b.n	8010f64 <_strtod_l+0x9c>
 8010f84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010f86:	b13a      	cbz	r2, 8010f98 <_strtod_l+0xd0>
 8010f88:	2135      	movs	r1, #53	@ 0x35
 8010f8a:	a81c      	add	r0, sp, #112	@ 0x70
 8010f8c:	f003 fb3a 	bl	8014604 <__copybits>
 8010f90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010f92:	9805      	ldr	r0, [sp, #20]
 8010f94:	f002 ff10 	bl	8013db8 <_Bfree>
 8010f98:	3e01      	subs	r6, #1
 8010f9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010f9c:	2e04      	cmp	r6, #4
 8010f9e:	d806      	bhi.n	8010fae <_strtod_l+0xe6>
 8010fa0:	e8df f006 	tbb	[pc, r6]
 8010fa4:	201d0314 	.word	0x201d0314
 8010fa8:	14          	.byte	0x14
 8010fa9:	00          	.byte	0x00
 8010faa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010fae:	05e1      	lsls	r1, r4, #23
 8010fb0:	bf48      	it	mi
 8010fb2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010fb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010fba:	0d1b      	lsrs	r3, r3, #20
 8010fbc:	051b      	lsls	r3, r3, #20
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d1bb      	bne.n	8010f3a <_strtod_l+0x72>
 8010fc2:	f001 fbaf 	bl	8012724 <__errno>
 8010fc6:	2322      	movs	r3, #34	@ 0x22
 8010fc8:	6003      	str	r3, [r0, #0]
 8010fca:	e7b6      	b.n	8010f3a <_strtod_l+0x72>
 8010fcc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010fd0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010fd4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010fd8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010fdc:	e7e7      	b.n	8010fae <_strtod_l+0xe6>
 8010fde:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8011160 <_strtod_l+0x298>
 8010fe2:	e7e4      	b.n	8010fae <_strtod_l+0xe6>
 8010fe4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010fe8:	f04f 3aff 	mov.w	sl, #4294967295
 8010fec:	e7df      	b.n	8010fae <_strtod_l+0xe6>
 8010fee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ff0:	1c5a      	adds	r2, r3, #1
 8010ff2:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ff4:	785b      	ldrb	r3, [r3, #1]
 8010ff6:	2b30      	cmp	r3, #48	@ 0x30
 8010ff8:	d0f9      	beq.n	8010fee <_strtod_l+0x126>
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d09d      	beq.n	8010f3a <_strtod_l+0x72>
 8010ffe:	2301      	movs	r3, #1
 8011000:	2700      	movs	r7, #0
 8011002:	9308      	str	r3, [sp, #32]
 8011004:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011006:	930c      	str	r3, [sp, #48]	@ 0x30
 8011008:	970b      	str	r7, [sp, #44]	@ 0x2c
 801100a:	46b9      	mov	r9, r7
 801100c:	220a      	movs	r2, #10
 801100e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011010:	7805      	ldrb	r5, [r0, #0]
 8011012:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011016:	b2d9      	uxtb	r1, r3
 8011018:	2909      	cmp	r1, #9
 801101a:	d928      	bls.n	801106e <_strtod_l+0x1a6>
 801101c:	494f      	ldr	r1, [pc, #316]	@ (801115c <_strtod_l+0x294>)
 801101e:	2201      	movs	r2, #1
 8011020:	f001 fac7 	bl	80125b2 <strncmp>
 8011024:	2800      	cmp	r0, #0
 8011026:	d032      	beq.n	801108e <_strtod_l+0x1c6>
 8011028:	2000      	movs	r0, #0
 801102a:	462a      	mov	r2, r5
 801102c:	900a      	str	r0, [sp, #40]	@ 0x28
 801102e:	464d      	mov	r5, r9
 8011030:	4603      	mov	r3, r0
 8011032:	2a65      	cmp	r2, #101	@ 0x65
 8011034:	d001      	beq.n	801103a <_strtod_l+0x172>
 8011036:	2a45      	cmp	r2, #69	@ 0x45
 8011038:	d114      	bne.n	8011064 <_strtod_l+0x19c>
 801103a:	b91d      	cbnz	r5, 8011044 <_strtod_l+0x17c>
 801103c:	9a08      	ldr	r2, [sp, #32]
 801103e:	4302      	orrs	r2, r0
 8011040:	d096      	beq.n	8010f70 <_strtod_l+0xa8>
 8011042:	2500      	movs	r5, #0
 8011044:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011046:	1c62      	adds	r2, r4, #1
 8011048:	9219      	str	r2, [sp, #100]	@ 0x64
 801104a:	7862      	ldrb	r2, [r4, #1]
 801104c:	2a2b      	cmp	r2, #43	@ 0x2b
 801104e:	d07a      	beq.n	8011146 <_strtod_l+0x27e>
 8011050:	2a2d      	cmp	r2, #45	@ 0x2d
 8011052:	d07e      	beq.n	8011152 <_strtod_l+0x28a>
 8011054:	f04f 0c00 	mov.w	ip, #0
 8011058:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801105c:	2909      	cmp	r1, #9
 801105e:	f240 8085 	bls.w	801116c <_strtod_l+0x2a4>
 8011062:	9419      	str	r4, [sp, #100]	@ 0x64
 8011064:	f04f 0800 	mov.w	r8, #0
 8011068:	e0a5      	b.n	80111b6 <_strtod_l+0x2ee>
 801106a:	2300      	movs	r3, #0
 801106c:	e7c8      	b.n	8011000 <_strtod_l+0x138>
 801106e:	f1b9 0f08 	cmp.w	r9, #8
 8011072:	bfd8      	it	le
 8011074:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8011076:	f100 0001 	add.w	r0, r0, #1
 801107a:	bfda      	itte	le
 801107c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011080:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8011082:	fb02 3707 	mlagt	r7, r2, r7, r3
 8011086:	f109 0901 	add.w	r9, r9, #1
 801108a:	9019      	str	r0, [sp, #100]	@ 0x64
 801108c:	e7bf      	b.n	801100e <_strtod_l+0x146>
 801108e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011090:	1c5a      	adds	r2, r3, #1
 8011092:	9219      	str	r2, [sp, #100]	@ 0x64
 8011094:	785a      	ldrb	r2, [r3, #1]
 8011096:	f1b9 0f00 	cmp.w	r9, #0
 801109a:	d03b      	beq.n	8011114 <_strtod_l+0x24c>
 801109c:	900a      	str	r0, [sp, #40]	@ 0x28
 801109e:	464d      	mov	r5, r9
 80110a0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80110a4:	2b09      	cmp	r3, #9
 80110a6:	d912      	bls.n	80110ce <_strtod_l+0x206>
 80110a8:	2301      	movs	r3, #1
 80110aa:	e7c2      	b.n	8011032 <_strtod_l+0x16a>
 80110ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110ae:	1c5a      	adds	r2, r3, #1
 80110b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80110b2:	785a      	ldrb	r2, [r3, #1]
 80110b4:	3001      	adds	r0, #1
 80110b6:	2a30      	cmp	r2, #48	@ 0x30
 80110b8:	d0f8      	beq.n	80110ac <_strtod_l+0x1e4>
 80110ba:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80110be:	2b08      	cmp	r3, #8
 80110c0:	f200 84d2 	bhi.w	8011a68 <_strtod_l+0xba0>
 80110c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80110c8:	2000      	movs	r0, #0
 80110ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80110cc:	4605      	mov	r5, r0
 80110ce:	3a30      	subs	r2, #48	@ 0x30
 80110d0:	f100 0301 	add.w	r3, r0, #1
 80110d4:	d018      	beq.n	8011108 <_strtod_l+0x240>
 80110d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80110d8:	4419      	add	r1, r3
 80110da:	910a      	str	r1, [sp, #40]	@ 0x28
 80110dc:	462e      	mov	r6, r5
 80110de:	f04f 0e0a 	mov.w	lr, #10
 80110e2:	1c71      	adds	r1, r6, #1
 80110e4:	eba1 0c05 	sub.w	ip, r1, r5
 80110e8:	4563      	cmp	r3, ip
 80110ea:	dc15      	bgt.n	8011118 <_strtod_l+0x250>
 80110ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80110f0:	182b      	adds	r3, r5, r0
 80110f2:	2b08      	cmp	r3, #8
 80110f4:	f105 0501 	add.w	r5, r5, #1
 80110f8:	4405      	add	r5, r0
 80110fa:	dc1a      	bgt.n	8011132 <_strtod_l+0x26a>
 80110fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80110fe:	230a      	movs	r3, #10
 8011100:	fb03 2301 	mla	r3, r3, r1, r2
 8011104:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011106:	2300      	movs	r3, #0
 8011108:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801110a:	1c51      	adds	r1, r2, #1
 801110c:	9119      	str	r1, [sp, #100]	@ 0x64
 801110e:	7852      	ldrb	r2, [r2, #1]
 8011110:	4618      	mov	r0, r3
 8011112:	e7c5      	b.n	80110a0 <_strtod_l+0x1d8>
 8011114:	4648      	mov	r0, r9
 8011116:	e7ce      	b.n	80110b6 <_strtod_l+0x1ee>
 8011118:	2e08      	cmp	r6, #8
 801111a:	dc05      	bgt.n	8011128 <_strtod_l+0x260>
 801111c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801111e:	fb0e f606 	mul.w	r6, lr, r6
 8011122:	960b      	str	r6, [sp, #44]	@ 0x2c
 8011124:	460e      	mov	r6, r1
 8011126:	e7dc      	b.n	80110e2 <_strtod_l+0x21a>
 8011128:	2910      	cmp	r1, #16
 801112a:	bfd8      	it	le
 801112c:	fb0e f707 	mulle.w	r7, lr, r7
 8011130:	e7f8      	b.n	8011124 <_strtod_l+0x25c>
 8011132:	2b0f      	cmp	r3, #15
 8011134:	bfdc      	itt	le
 8011136:	230a      	movle	r3, #10
 8011138:	fb03 2707 	mlale	r7, r3, r7, r2
 801113c:	e7e3      	b.n	8011106 <_strtod_l+0x23e>
 801113e:	2300      	movs	r3, #0
 8011140:	930a      	str	r3, [sp, #40]	@ 0x28
 8011142:	2301      	movs	r3, #1
 8011144:	e77a      	b.n	801103c <_strtod_l+0x174>
 8011146:	f04f 0c00 	mov.w	ip, #0
 801114a:	1ca2      	adds	r2, r4, #2
 801114c:	9219      	str	r2, [sp, #100]	@ 0x64
 801114e:	78a2      	ldrb	r2, [r4, #2]
 8011150:	e782      	b.n	8011058 <_strtod_l+0x190>
 8011152:	f04f 0c01 	mov.w	ip, #1
 8011156:	e7f8      	b.n	801114a <_strtod_l+0x282>
 8011158:	080177b0 	.word	0x080177b0
 801115c:	08017570 	.word	0x08017570
 8011160:	7ff00000 	.word	0x7ff00000
 8011164:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011166:	1c51      	adds	r1, r2, #1
 8011168:	9119      	str	r1, [sp, #100]	@ 0x64
 801116a:	7852      	ldrb	r2, [r2, #1]
 801116c:	2a30      	cmp	r2, #48	@ 0x30
 801116e:	d0f9      	beq.n	8011164 <_strtod_l+0x29c>
 8011170:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011174:	2908      	cmp	r1, #8
 8011176:	f63f af75 	bhi.w	8011064 <_strtod_l+0x19c>
 801117a:	3a30      	subs	r2, #48	@ 0x30
 801117c:	9209      	str	r2, [sp, #36]	@ 0x24
 801117e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011180:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011182:	f04f 080a 	mov.w	r8, #10
 8011186:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011188:	1c56      	adds	r6, r2, #1
 801118a:	9619      	str	r6, [sp, #100]	@ 0x64
 801118c:	7852      	ldrb	r2, [r2, #1]
 801118e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011192:	f1be 0f09 	cmp.w	lr, #9
 8011196:	d939      	bls.n	801120c <_strtod_l+0x344>
 8011198:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801119a:	1a76      	subs	r6, r6, r1
 801119c:	2e08      	cmp	r6, #8
 801119e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80111a2:	dc03      	bgt.n	80111ac <_strtod_l+0x2e4>
 80111a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80111a6:	4588      	cmp	r8, r1
 80111a8:	bfa8      	it	ge
 80111aa:	4688      	movge	r8, r1
 80111ac:	f1bc 0f00 	cmp.w	ip, #0
 80111b0:	d001      	beq.n	80111b6 <_strtod_l+0x2ee>
 80111b2:	f1c8 0800 	rsb	r8, r8, #0
 80111b6:	2d00      	cmp	r5, #0
 80111b8:	d14e      	bne.n	8011258 <_strtod_l+0x390>
 80111ba:	9908      	ldr	r1, [sp, #32]
 80111bc:	4308      	orrs	r0, r1
 80111be:	f47f aebc 	bne.w	8010f3a <_strtod_l+0x72>
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	f47f aed4 	bne.w	8010f70 <_strtod_l+0xa8>
 80111c8:	2a69      	cmp	r2, #105	@ 0x69
 80111ca:	d028      	beq.n	801121e <_strtod_l+0x356>
 80111cc:	dc25      	bgt.n	801121a <_strtod_l+0x352>
 80111ce:	2a49      	cmp	r2, #73	@ 0x49
 80111d0:	d025      	beq.n	801121e <_strtod_l+0x356>
 80111d2:	2a4e      	cmp	r2, #78	@ 0x4e
 80111d4:	f47f aecc 	bne.w	8010f70 <_strtod_l+0xa8>
 80111d8:	499a      	ldr	r1, [pc, #616]	@ (8011444 <_strtod_l+0x57c>)
 80111da:	a819      	add	r0, sp, #100	@ 0x64
 80111dc:	f002 fc34 	bl	8013a48 <__match>
 80111e0:	2800      	cmp	r0, #0
 80111e2:	f43f aec5 	beq.w	8010f70 <_strtod_l+0xa8>
 80111e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	2b28      	cmp	r3, #40	@ 0x28
 80111ec:	d12e      	bne.n	801124c <_strtod_l+0x384>
 80111ee:	4996      	ldr	r1, [pc, #600]	@ (8011448 <_strtod_l+0x580>)
 80111f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80111f2:	a819      	add	r0, sp, #100	@ 0x64
 80111f4:	f002 fc3c 	bl	8013a70 <__hexnan>
 80111f8:	2805      	cmp	r0, #5
 80111fa:	d127      	bne.n	801124c <_strtod_l+0x384>
 80111fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80111fe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011202:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011206:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801120a:	e696      	b.n	8010f3a <_strtod_l+0x72>
 801120c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801120e:	fb08 2101 	mla	r1, r8, r1, r2
 8011212:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011216:	9209      	str	r2, [sp, #36]	@ 0x24
 8011218:	e7b5      	b.n	8011186 <_strtod_l+0x2be>
 801121a:	2a6e      	cmp	r2, #110	@ 0x6e
 801121c:	e7da      	b.n	80111d4 <_strtod_l+0x30c>
 801121e:	498b      	ldr	r1, [pc, #556]	@ (801144c <_strtod_l+0x584>)
 8011220:	a819      	add	r0, sp, #100	@ 0x64
 8011222:	f002 fc11 	bl	8013a48 <__match>
 8011226:	2800      	cmp	r0, #0
 8011228:	f43f aea2 	beq.w	8010f70 <_strtod_l+0xa8>
 801122c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801122e:	4988      	ldr	r1, [pc, #544]	@ (8011450 <_strtod_l+0x588>)
 8011230:	3b01      	subs	r3, #1
 8011232:	a819      	add	r0, sp, #100	@ 0x64
 8011234:	9319      	str	r3, [sp, #100]	@ 0x64
 8011236:	f002 fc07 	bl	8013a48 <__match>
 801123a:	b910      	cbnz	r0, 8011242 <_strtod_l+0x37a>
 801123c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801123e:	3301      	adds	r3, #1
 8011240:	9319      	str	r3, [sp, #100]	@ 0x64
 8011242:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8011460 <_strtod_l+0x598>
 8011246:	f04f 0a00 	mov.w	sl, #0
 801124a:	e676      	b.n	8010f3a <_strtod_l+0x72>
 801124c:	4881      	ldr	r0, [pc, #516]	@ (8011454 <_strtod_l+0x58c>)
 801124e:	f001 faa7 	bl	80127a0 <nan>
 8011252:	ec5b ab10 	vmov	sl, fp, d0
 8011256:	e670      	b.n	8010f3a <_strtod_l+0x72>
 8011258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801125a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801125c:	eba8 0303 	sub.w	r3, r8, r3
 8011260:	f1b9 0f00 	cmp.w	r9, #0
 8011264:	bf08      	it	eq
 8011266:	46a9      	moveq	r9, r5
 8011268:	2d10      	cmp	r5, #16
 801126a:	9309      	str	r3, [sp, #36]	@ 0x24
 801126c:	462c      	mov	r4, r5
 801126e:	bfa8      	it	ge
 8011270:	2410      	movge	r4, #16
 8011272:	f7ef f97f 	bl	8000574 <__aeabi_ui2d>
 8011276:	2d09      	cmp	r5, #9
 8011278:	4682      	mov	sl, r0
 801127a:	468b      	mov	fp, r1
 801127c:	dc13      	bgt.n	80112a6 <_strtod_l+0x3de>
 801127e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011280:	2b00      	cmp	r3, #0
 8011282:	f43f ae5a 	beq.w	8010f3a <_strtod_l+0x72>
 8011286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011288:	dd78      	ble.n	801137c <_strtod_l+0x4b4>
 801128a:	2b16      	cmp	r3, #22
 801128c:	dc5f      	bgt.n	801134e <_strtod_l+0x486>
 801128e:	4972      	ldr	r1, [pc, #456]	@ (8011458 <_strtod_l+0x590>)
 8011290:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011298:	4652      	mov	r2, sl
 801129a:	465b      	mov	r3, fp
 801129c:	f7ef f9e4 	bl	8000668 <__aeabi_dmul>
 80112a0:	4682      	mov	sl, r0
 80112a2:	468b      	mov	fp, r1
 80112a4:	e649      	b.n	8010f3a <_strtod_l+0x72>
 80112a6:	4b6c      	ldr	r3, [pc, #432]	@ (8011458 <_strtod_l+0x590>)
 80112a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80112ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80112b0:	f7ef f9da 	bl	8000668 <__aeabi_dmul>
 80112b4:	4682      	mov	sl, r0
 80112b6:	4638      	mov	r0, r7
 80112b8:	468b      	mov	fp, r1
 80112ba:	f7ef f95b 	bl	8000574 <__aeabi_ui2d>
 80112be:	4602      	mov	r2, r0
 80112c0:	460b      	mov	r3, r1
 80112c2:	4650      	mov	r0, sl
 80112c4:	4659      	mov	r1, fp
 80112c6:	f7ef f819 	bl	80002fc <__adddf3>
 80112ca:	2d0f      	cmp	r5, #15
 80112cc:	4682      	mov	sl, r0
 80112ce:	468b      	mov	fp, r1
 80112d0:	ddd5      	ble.n	801127e <_strtod_l+0x3b6>
 80112d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112d4:	1b2c      	subs	r4, r5, r4
 80112d6:	441c      	add	r4, r3
 80112d8:	2c00      	cmp	r4, #0
 80112da:	f340 8093 	ble.w	8011404 <_strtod_l+0x53c>
 80112de:	f014 030f 	ands.w	r3, r4, #15
 80112e2:	d00a      	beq.n	80112fa <_strtod_l+0x432>
 80112e4:	495c      	ldr	r1, [pc, #368]	@ (8011458 <_strtod_l+0x590>)
 80112e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80112ea:	4652      	mov	r2, sl
 80112ec:	465b      	mov	r3, fp
 80112ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112f2:	f7ef f9b9 	bl	8000668 <__aeabi_dmul>
 80112f6:	4682      	mov	sl, r0
 80112f8:	468b      	mov	fp, r1
 80112fa:	f034 040f 	bics.w	r4, r4, #15
 80112fe:	d073      	beq.n	80113e8 <_strtod_l+0x520>
 8011300:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011304:	dd49      	ble.n	801139a <_strtod_l+0x4d2>
 8011306:	2400      	movs	r4, #0
 8011308:	46a0      	mov	r8, r4
 801130a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801130c:	46a1      	mov	r9, r4
 801130e:	9a05      	ldr	r2, [sp, #20]
 8011310:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8011460 <_strtod_l+0x598>
 8011314:	2322      	movs	r3, #34	@ 0x22
 8011316:	6013      	str	r3, [r2, #0]
 8011318:	f04f 0a00 	mov.w	sl, #0
 801131c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801131e:	2b00      	cmp	r3, #0
 8011320:	f43f ae0b 	beq.w	8010f3a <_strtod_l+0x72>
 8011324:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011326:	9805      	ldr	r0, [sp, #20]
 8011328:	f002 fd46 	bl	8013db8 <_Bfree>
 801132c:	9805      	ldr	r0, [sp, #20]
 801132e:	4649      	mov	r1, r9
 8011330:	f002 fd42 	bl	8013db8 <_Bfree>
 8011334:	9805      	ldr	r0, [sp, #20]
 8011336:	4641      	mov	r1, r8
 8011338:	f002 fd3e 	bl	8013db8 <_Bfree>
 801133c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801133e:	9805      	ldr	r0, [sp, #20]
 8011340:	f002 fd3a 	bl	8013db8 <_Bfree>
 8011344:	9805      	ldr	r0, [sp, #20]
 8011346:	4621      	mov	r1, r4
 8011348:	f002 fd36 	bl	8013db8 <_Bfree>
 801134c:	e5f5      	b.n	8010f3a <_strtod_l+0x72>
 801134e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011350:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011354:	4293      	cmp	r3, r2
 8011356:	dbbc      	blt.n	80112d2 <_strtod_l+0x40a>
 8011358:	4c3f      	ldr	r4, [pc, #252]	@ (8011458 <_strtod_l+0x590>)
 801135a:	f1c5 050f 	rsb	r5, r5, #15
 801135e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011362:	4652      	mov	r2, sl
 8011364:	465b      	mov	r3, fp
 8011366:	e9d1 0100 	ldrd	r0, r1, [r1]
 801136a:	f7ef f97d 	bl	8000668 <__aeabi_dmul>
 801136e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011370:	1b5d      	subs	r5, r3, r5
 8011372:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011376:	e9d4 2300 	ldrd	r2, r3, [r4]
 801137a:	e78f      	b.n	801129c <_strtod_l+0x3d4>
 801137c:	3316      	adds	r3, #22
 801137e:	dba8      	blt.n	80112d2 <_strtod_l+0x40a>
 8011380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011382:	eba3 0808 	sub.w	r8, r3, r8
 8011386:	4b34      	ldr	r3, [pc, #208]	@ (8011458 <_strtod_l+0x590>)
 8011388:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801138c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011390:	4650      	mov	r0, sl
 8011392:	4659      	mov	r1, fp
 8011394:	f7ef fa92 	bl	80008bc <__aeabi_ddiv>
 8011398:	e782      	b.n	80112a0 <_strtod_l+0x3d8>
 801139a:	2300      	movs	r3, #0
 801139c:	4f2f      	ldr	r7, [pc, #188]	@ (801145c <_strtod_l+0x594>)
 801139e:	1124      	asrs	r4, r4, #4
 80113a0:	4650      	mov	r0, sl
 80113a2:	4659      	mov	r1, fp
 80113a4:	461e      	mov	r6, r3
 80113a6:	2c01      	cmp	r4, #1
 80113a8:	dc21      	bgt.n	80113ee <_strtod_l+0x526>
 80113aa:	b10b      	cbz	r3, 80113b0 <_strtod_l+0x4e8>
 80113ac:	4682      	mov	sl, r0
 80113ae:	468b      	mov	fp, r1
 80113b0:	492a      	ldr	r1, [pc, #168]	@ (801145c <_strtod_l+0x594>)
 80113b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80113b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80113ba:	4652      	mov	r2, sl
 80113bc:	465b      	mov	r3, fp
 80113be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113c2:	f7ef f951 	bl	8000668 <__aeabi_dmul>
 80113c6:	4b26      	ldr	r3, [pc, #152]	@ (8011460 <_strtod_l+0x598>)
 80113c8:	460a      	mov	r2, r1
 80113ca:	400b      	ands	r3, r1
 80113cc:	4925      	ldr	r1, [pc, #148]	@ (8011464 <_strtod_l+0x59c>)
 80113ce:	428b      	cmp	r3, r1
 80113d0:	4682      	mov	sl, r0
 80113d2:	d898      	bhi.n	8011306 <_strtod_l+0x43e>
 80113d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80113d8:	428b      	cmp	r3, r1
 80113da:	bf86      	itte	hi
 80113dc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8011468 <_strtod_l+0x5a0>
 80113e0:	f04f 3aff 	movhi.w	sl, #4294967295
 80113e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80113e8:	2300      	movs	r3, #0
 80113ea:	9308      	str	r3, [sp, #32]
 80113ec:	e076      	b.n	80114dc <_strtod_l+0x614>
 80113ee:	07e2      	lsls	r2, r4, #31
 80113f0:	d504      	bpl.n	80113fc <_strtod_l+0x534>
 80113f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80113f6:	f7ef f937 	bl	8000668 <__aeabi_dmul>
 80113fa:	2301      	movs	r3, #1
 80113fc:	3601      	adds	r6, #1
 80113fe:	1064      	asrs	r4, r4, #1
 8011400:	3708      	adds	r7, #8
 8011402:	e7d0      	b.n	80113a6 <_strtod_l+0x4de>
 8011404:	d0f0      	beq.n	80113e8 <_strtod_l+0x520>
 8011406:	4264      	negs	r4, r4
 8011408:	f014 020f 	ands.w	r2, r4, #15
 801140c:	d00a      	beq.n	8011424 <_strtod_l+0x55c>
 801140e:	4b12      	ldr	r3, [pc, #72]	@ (8011458 <_strtod_l+0x590>)
 8011410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011414:	4650      	mov	r0, sl
 8011416:	4659      	mov	r1, fp
 8011418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141c:	f7ef fa4e 	bl	80008bc <__aeabi_ddiv>
 8011420:	4682      	mov	sl, r0
 8011422:	468b      	mov	fp, r1
 8011424:	1124      	asrs	r4, r4, #4
 8011426:	d0df      	beq.n	80113e8 <_strtod_l+0x520>
 8011428:	2c1f      	cmp	r4, #31
 801142a:	dd1f      	ble.n	801146c <_strtod_l+0x5a4>
 801142c:	2400      	movs	r4, #0
 801142e:	46a0      	mov	r8, r4
 8011430:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011432:	46a1      	mov	r9, r4
 8011434:	9a05      	ldr	r2, [sp, #20]
 8011436:	2322      	movs	r3, #34	@ 0x22
 8011438:	f04f 0a00 	mov.w	sl, #0
 801143c:	f04f 0b00 	mov.w	fp, #0
 8011440:	6013      	str	r3, [r2, #0]
 8011442:	e76b      	b.n	801131c <_strtod_l+0x454>
 8011444:	0801757f 	.word	0x0801757f
 8011448:	0801779c 	.word	0x0801779c
 801144c:	08017577 	.word	0x08017577
 8011450:	0801765e 	.word	0x0801765e
 8011454:	0801765a 	.word	0x0801765a
 8011458:	08017828 	.word	0x08017828
 801145c:	08017800 	.word	0x08017800
 8011460:	7ff00000 	.word	0x7ff00000
 8011464:	7ca00000 	.word	0x7ca00000
 8011468:	7fefffff 	.word	0x7fefffff
 801146c:	f014 0310 	ands.w	r3, r4, #16
 8011470:	bf18      	it	ne
 8011472:	236a      	movne	r3, #106	@ 0x6a
 8011474:	4ea9      	ldr	r6, [pc, #676]	@ (801171c <_strtod_l+0x854>)
 8011476:	9308      	str	r3, [sp, #32]
 8011478:	4650      	mov	r0, sl
 801147a:	4659      	mov	r1, fp
 801147c:	2300      	movs	r3, #0
 801147e:	07e7      	lsls	r7, r4, #31
 8011480:	d504      	bpl.n	801148c <_strtod_l+0x5c4>
 8011482:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011486:	f7ef f8ef 	bl	8000668 <__aeabi_dmul>
 801148a:	2301      	movs	r3, #1
 801148c:	1064      	asrs	r4, r4, #1
 801148e:	f106 0608 	add.w	r6, r6, #8
 8011492:	d1f4      	bne.n	801147e <_strtod_l+0x5b6>
 8011494:	b10b      	cbz	r3, 801149a <_strtod_l+0x5d2>
 8011496:	4682      	mov	sl, r0
 8011498:	468b      	mov	fp, r1
 801149a:	9b08      	ldr	r3, [sp, #32]
 801149c:	b1b3      	cbz	r3, 80114cc <_strtod_l+0x604>
 801149e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80114a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	4659      	mov	r1, fp
 80114aa:	dd0f      	ble.n	80114cc <_strtod_l+0x604>
 80114ac:	2b1f      	cmp	r3, #31
 80114ae:	dd56      	ble.n	801155e <_strtod_l+0x696>
 80114b0:	2b34      	cmp	r3, #52	@ 0x34
 80114b2:	bfde      	ittt	le
 80114b4:	f04f 33ff 	movle.w	r3, #4294967295
 80114b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80114bc:	4093      	lslle	r3, r2
 80114be:	f04f 0a00 	mov.w	sl, #0
 80114c2:	bfcc      	ite	gt
 80114c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80114c8:	ea03 0b01 	andle.w	fp, r3, r1
 80114cc:	2200      	movs	r2, #0
 80114ce:	2300      	movs	r3, #0
 80114d0:	4650      	mov	r0, sl
 80114d2:	4659      	mov	r1, fp
 80114d4:	f7ef fb30 	bl	8000b38 <__aeabi_dcmpeq>
 80114d8:	2800      	cmp	r0, #0
 80114da:	d1a7      	bne.n	801142c <_strtod_l+0x564>
 80114dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80114de:	9300      	str	r3, [sp, #0]
 80114e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80114e2:	9805      	ldr	r0, [sp, #20]
 80114e4:	462b      	mov	r3, r5
 80114e6:	464a      	mov	r2, r9
 80114e8:	f002 fcce 	bl	8013e88 <__s2b>
 80114ec:	900b      	str	r0, [sp, #44]	@ 0x2c
 80114ee:	2800      	cmp	r0, #0
 80114f0:	f43f af09 	beq.w	8011306 <_strtod_l+0x43e>
 80114f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80114f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114f8:	2a00      	cmp	r2, #0
 80114fa:	eba3 0308 	sub.w	r3, r3, r8
 80114fe:	bfa8      	it	ge
 8011500:	2300      	movge	r3, #0
 8011502:	9312      	str	r3, [sp, #72]	@ 0x48
 8011504:	2400      	movs	r4, #0
 8011506:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801150a:	9316      	str	r3, [sp, #88]	@ 0x58
 801150c:	46a0      	mov	r8, r4
 801150e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011510:	9805      	ldr	r0, [sp, #20]
 8011512:	6859      	ldr	r1, [r3, #4]
 8011514:	f002 fc10 	bl	8013d38 <_Balloc>
 8011518:	4681      	mov	r9, r0
 801151a:	2800      	cmp	r0, #0
 801151c:	f43f aef7 	beq.w	801130e <_strtod_l+0x446>
 8011520:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011522:	691a      	ldr	r2, [r3, #16]
 8011524:	3202      	adds	r2, #2
 8011526:	f103 010c 	add.w	r1, r3, #12
 801152a:	0092      	lsls	r2, r2, #2
 801152c:	300c      	adds	r0, #12
 801152e:	f001 f926 	bl	801277e <memcpy>
 8011532:	ec4b ab10 	vmov	d0, sl, fp
 8011536:	9805      	ldr	r0, [sp, #20]
 8011538:	aa1c      	add	r2, sp, #112	@ 0x70
 801153a:	a91b      	add	r1, sp, #108	@ 0x6c
 801153c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011540:	f002 ffd6 	bl	80144f0 <__d2b>
 8011544:	901a      	str	r0, [sp, #104]	@ 0x68
 8011546:	2800      	cmp	r0, #0
 8011548:	f43f aee1 	beq.w	801130e <_strtod_l+0x446>
 801154c:	9805      	ldr	r0, [sp, #20]
 801154e:	2101      	movs	r1, #1
 8011550:	f002 fd30 	bl	8013fb4 <__i2b>
 8011554:	4680      	mov	r8, r0
 8011556:	b948      	cbnz	r0, 801156c <_strtod_l+0x6a4>
 8011558:	f04f 0800 	mov.w	r8, #0
 801155c:	e6d7      	b.n	801130e <_strtod_l+0x446>
 801155e:	f04f 32ff 	mov.w	r2, #4294967295
 8011562:	fa02 f303 	lsl.w	r3, r2, r3
 8011566:	ea03 0a0a 	and.w	sl, r3, sl
 801156a:	e7af      	b.n	80114cc <_strtod_l+0x604>
 801156c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801156e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011570:	2d00      	cmp	r5, #0
 8011572:	bfab      	itete	ge
 8011574:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011576:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011578:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801157a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801157c:	bfac      	ite	ge
 801157e:	18ef      	addge	r7, r5, r3
 8011580:	1b5e      	sublt	r6, r3, r5
 8011582:	9b08      	ldr	r3, [sp, #32]
 8011584:	1aed      	subs	r5, r5, r3
 8011586:	4415      	add	r5, r2
 8011588:	4b65      	ldr	r3, [pc, #404]	@ (8011720 <_strtod_l+0x858>)
 801158a:	3d01      	subs	r5, #1
 801158c:	429d      	cmp	r5, r3
 801158e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011592:	da50      	bge.n	8011636 <_strtod_l+0x76e>
 8011594:	1b5b      	subs	r3, r3, r5
 8011596:	2b1f      	cmp	r3, #31
 8011598:	eba2 0203 	sub.w	r2, r2, r3
 801159c:	f04f 0101 	mov.w	r1, #1
 80115a0:	dc3d      	bgt.n	801161e <_strtod_l+0x756>
 80115a2:	fa01 f303 	lsl.w	r3, r1, r3
 80115a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80115a8:	2300      	movs	r3, #0
 80115aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80115ac:	18bd      	adds	r5, r7, r2
 80115ae:	9b08      	ldr	r3, [sp, #32]
 80115b0:	42af      	cmp	r7, r5
 80115b2:	4416      	add	r6, r2
 80115b4:	441e      	add	r6, r3
 80115b6:	463b      	mov	r3, r7
 80115b8:	bfa8      	it	ge
 80115ba:	462b      	movge	r3, r5
 80115bc:	42b3      	cmp	r3, r6
 80115be:	bfa8      	it	ge
 80115c0:	4633      	movge	r3, r6
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	bfc2      	ittt	gt
 80115c6:	1aed      	subgt	r5, r5, r3
 80115c8:	1af6      	subgt	r6, r6, r3
 80115ca:	1aff      	subgt	r7, r7, r3
 80115cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	dd16      	ble.n	8011600 <_strtod_l+0x738>
 80115d2:	4641      	mov	r1, r8
 80115d4:	9805      	ldr	r0, [sp, #20]
 80115d6:	461a      	mov	r2, r3
 80115d8:	f002 fda4 	bl	8014124 <__pow5mult>
 80115dc:	4680      	mov	r8, r0
 80115de:	2800      	cmp	r0, #0
 80115e0:	d0ba      	beq.n	8011558 <_strtod_l+0x690>
 80115e2:	4601      	mov	r1, r0
 80115e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80115e6:	9805      	ldr	r0, [sp, #20]
 80115e8:	f002 fcfa 	bl	8013fe0 <__multiply>
 80115ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80115ee:	2800      	cmp	r0, #0
 80115f0:	f43f ae8d 	beq.w	801130e <_strtod_l+0x446>
 80115f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80115f6:	9805      	ldr	r0, [sp, #20]
 80115f8:	f002 fbde 	bl	8013db8 <_Bfree>
 80115fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8011600:	2d00      	cmp	r5, #0
 8011602:	dc1d      	bgt.n	8011640 <_strtod_l+0x778>
 8011604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011606:	2b00      	cmp	r3, #0
 8011608:	dd23      	ble.n	8011652 <_strtod_l+0x78a>
 801160a:	4649      	mov	r1, r9
 801160c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801160e:	9805      	ldr	r0, [sp, #20]
 8011610:	f002 fd88 	bl	8014124 <__pow5mult>
 8011614:	4681      	mov	r9, r0
 8011616:	b9e0      	cbnz	r0, 8011652 <_strtod_l+0x78a>
 8011618:	f04f 0900 	mov.w	r9, #0
 801161c:	e677      	b.n	801130e <_strtod_l+0x446>
 801161e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011622:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011626:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801162a:	35e2      	adds	r5, #226	@ 0xe2
 801162c:	fa01 f305 	lsl.w	r3, r1, r5
 8011630:	9310      	str	r3, [sp, #64]	@ 0x40
 8011632:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011634:	e7ba      	b.n	80115ac <_strtod_l+0x6e4>
 8011636:	2300      	movs	r3, #0
 8011638:	9310      	str	r3, [sp, #64]	@ 0x40
 801163a:	2301      	movs	r3, #1
 801163c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801163e:	e7b5      	b.n	80115ac <_strtod_l+0x6e4>
 8011640:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011642:	9805      	ldr	r0, [sp, #20]
 8011644:	462a      	mov	r2, r5
 8011646:	f002 fdc7 	bl	80141d8 <__lshift>
 801164a:	901a      	str	r0, [sp, #104]	@ 0x68
 801164c:	2800      	cmp	r0, #0
 801164e:	d1d9      	bne.n	8011604 <_strtod_l+0x73c>
 8011650:	e65d      	b.n	801130e <_strtod_l+0x446>
 8011652:	2e00      	cmp	r6, #0
 8011654:	dd07      	ble.n	8011666 <_strtod_l+0x79e>
 8011656:	4649      	mov	r1, r9
 8011658:	9805      	ldr	r0, [sp, #20]
 801165a:	4632      	mov	r2, r6
 801165c:	f002 fdbc 	bl	80141d8 <__lshift>
 8011660:	4681      	mov	r9, r0
 8011662:	2800      	cmp	r0, #0
 8011664:	d0d8      	beq.n	8011618 <_strtod_l+0x750>
 8011666:	2f00      	cmp	r7, #0
 8011668:	dd08      	ble.n	801167c <_strtod_l+0x7b4>
 801166a:	4641      	mov	r1, r8
 801166c:	9805      	ldr	r0, [sp, #20]
 801166e:	463a      	mov	r2, r7
 8011670:	f002 fdb2 	bl	80141d8 <__lshift>
 8011674:	4680      	mov	r8, r0
 8011676:	2800      	cmp	r0, #0
 8011678:	f43f ae49 	beq.w	801130e <_strtod_l+0x446>
 801167c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801167e:	9805      	ldr	r0, [sp, #20]
 8011680:	464a      	mov	r2, r9
 8011682:	f002 fe31 	bl	80142e8 <__mdiff>
 8011686:	4604      	mov	r4, r0
 8011688:	2800      	cmp	r0, #0
 801168a:	f43f ae40 	beq.w	801130e <_strtod_l+0x446>
 801168e:	68c3      	ldr	r3, [r0, #12]
 8011690:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011692:	2300      	movs	r3, #0
 8011694:	60c3      	str	r3, [r0, #12]
 8011696:	4641      	mov	r1, r8
 8011698:	f002 fe0a 	bl	80142b0 <__mcmp>
 801169c:	2800      	cmp	r0, #0
 801169e:	da45      	bge.n	801172c <_strtod_l+0x864>
 80116a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116a2:	ea53 030a 	orrs.w	r3, r3, sl
 80116a6:	d16b      	bne.n	8011780 <_strtod_l+0x8b8>
 80116a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d167      	bne.n	8011780 <_strtod_l+0x8b8>
 80116b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80116b4:	0d1b      	lsrs	r3, r3, #20
 80116b6:	051b      	lsls	r3, r3, #20
 80116b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80116bc:	d960      	bls.n	8011780 <_strtod_l+0x8b8>
 80116be:	6963      	ldr	r3, [r4, #20]
 80116c0:	b913      	cbnz	r3, 80116c8 <_strtod_l+0x800>
 80116c2:	6923      	ldr	r3, [r4, #16]
 80116c4:	2b01      	cmp	r3, #1
 80116c6:	dd5b      	ble.n	8011780 <_strtod_l+0x8b8>
 80116c8:	4621      	mov	r1, r4
 80116ca:	2201      	movs	r2, #1
 80116cc:	9805      	ldr	r0, [sp, #20]
 80116ce:	f002 fd83 	bl	80141d8 <__lshift>
 80116d2:	4641      	mov	r1, r8
 80116d4:	4604      	mov	r4, r0
 80116d6:	f002 fdeb 	bl	80142b0 <__mcmp>
 80116da:	2800      	cmp	r0, #0
 80116dc:	dd50      	ble.n	8011780 <_strtod_l+0x8b8>
 80116de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80116e2:	9a08      	ldr	r2, [sp, #32]
 80116e4:	0d1b      	lsrs	r3, r3, #20
 80116e6:	051b      	lsls	r3, r3, #20
 80116e8:	2a00      	cmp	r2, #0
 80116ea:	d06a      	beq.n	80117c2 <_strtod_l+0x8fa>
 80116ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80116f0:	d867      	bhi.n	80117c2 <_strtod_l+0x8fa>
 80116f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80116f6:	f67f ae9d 	bls.w	8011434 <_strtod_l+0x56c>
 80116fa:	4b0a      	ldr	r3, [pc, #40]	@ (8011724 <_strtod_l+0x85c>)
 80116fc:	4650      	mov	r0, sl
 80116fe:	4659      	mov	r1, fp
 8011700:	2200      	movs	r2, #0
 8011702:	f7ee ffb1 	bl	8000668 <__aeabi_dmul>
 8011706:	4b08      	ldr	r3, [pc, #32]	@ (8011728 <_strtod_l+0x860>)
 8011708:	400b      	ands	r3, r1
 801170a:	4682      	mov	sl, r0
 801170c:	468b      	mov	fp, r1
 801170e:	2b00      	cmp	r3, #0
 8011710:	f47f ae08 	bne.w	8011324 <_strtod_l+0x45c>
 8011714:	9a05      	ldr	r2, [sp, #20]
 8011716:	2322      	movs	r3, #34	@ 0x22
 8011718:	6013      	str	r3, [r2, #0]
 801171a:	e603      	b.n	8011324 <_strtod_l+0x45c>
 801171c:	080177c8 	.word	0x080177c8
 8011720:	fffffc02 	.word	0xfffffc02
 8011724:	39500000 	.word	0x39500000
 8011728:	7ff00000 	.word	0x7ff00000
 801172c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011730:	d165      	bne.n	80117fe <_strtod_l+0x936>
 8011732:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011738:	b35a      	cbz	r2, 8011792 <_strtod_l+0x8ca>
 801173a:	4a9f      	ldr	r2, [pc, #636]	@ (80119b8 <_strtod_l+0xaf0>)
 801173c:	4293      	cmp	r3, r2
 801173e:	d12b      	bne.n	8011798 <_strtod_l+0x8d0>
 8011740:	9b08      	ldr	r3, [sp, #32]
 8011742:	4651      	mov	r1, sl
 8011744:	b303      	cbz	r3, 8011788 <_strtod_l+0x8c0>
 8011746:	4b9d      	ldr	r3, [pc, #628]	@ (80119bc <_strtod_l+0xaf4>)
 8011748:	465a      	mov	r2, fp
 801174a:	4013      	ands	r3, r2
 801174c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011750:	f04f 32ff 	mov.w	r2, #4294967295
 8011754:	d81b      	bhi.n	801178e <_strtod_l+0x8c6>
 8011756:	0d1b      	lsrs	r3, r3, #20
 8011758:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801175c:	fa02 f303 	lsl.w	r3, r2, r3
 8011760:	4299      	cmp	r1, r3
 8011762:	d119      	bne.n	8011798 <_strtod_l+0x8d0>
 8011764:	4b96      	ldr	r3, [pc, #600]	@ (80119c0 <_strtod_l+0xaf8>)
 8011766:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011768:	429a      	cmp	r2, r3
 801176a:	d102      	bne.n	8011772 <_strtod_l+0x8aa>
 801176c:	3101      	adds	r1, #1
 801176e:	f43f adce 	beq.w	801130e <_strtod_l+0x446>
 8011772:	4b92      	ldr	r3, [pc, #584]	@ (80119bc <_strtod_l+0xaf4>)
 8011774:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011776:	401a      	ands	r2, r3
 8011778:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801177c:	f04f 0a00 	mov.w	sl, #0
 8011780:	9b08      	ldr	r3, [sp, #32]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d1b9      	bne.n	80116fa <_strtod_l+0x832>
 8011786:	e5cd      	b.n	8011324 <_strtod_l+0x45c>
 8011788:	f04f 33ff 	mov.w	r3, #4294967295
 801178c:	e7e8      	b.n	8011760 <_strtod_l+0x898>
 801178e:	4613      	mov	r3, r2
 8011790:	e7e6      	b.n	8011760 <_strtod_l+0x898>
 8011792:	ea53 030a 	orrs.w	r3, r3, sl
 8011796:	d0a2      	beq.n	80116de <_strtod_l+0x816>
 8011798:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801179a:	b1db      	cbz	r3, 80117d4 <_strtod_l+0x90c>
 801179c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801179e:	4213      	tst	r3, r2
 80117a0:	d0ee      	beq.n	8011780 <_strtod_l+0x8b8>
 80117a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117a4:	9a08      	ldr	r2, [sp, #32]
 80117a6:	4650      	mov	r0, sl
 80117a8:	4659      	mov	r1, fp
 80117aa:	b1bb      	cbz	r3, 80117dc <_strtod_l+0x914>
 80117ac:	f7ff fb6c 	bl	8010e88 <sulp>
 80117b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80117b4:	ec53 2b10 	vmov	r2, r3, d0
 80117b8:	f7ee fda0 	bl	80002fc <__adddf3>
 80117bc:	4682      	mov	sl, r0
 80117be:	468b      	mov	fp, r1
 80117c0:	e7de      	b.n	8011780 <_strtod_l+0x8b8>
 80117c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80117c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80117ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80117ce:	f04f 3aff 	mov.w	sl, #4294967295
 80117d2:	e7d5      	b.n	8011780 <_strtod_l+0x8b8>
 80117d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80117d6:	ea13 0f0a 	tst.w	r3, sl
 80117da:	e7e1      	b.n	80117a0 <_strtod_l+0x8d8>
 80117dc:	f7ff fb54 	bl	8010e88 <sulp>
 80117e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80117e4:	ec53 2b10 	vmov	r2, r3, d0
 80117e8:	f7ee fd86 	bl	80002f8 <__aeabi_dsub>
 80117ec:	2200      	movs	r2, #0
 80117ee:	2300      	movs	r3, #0
 80117f0:	4682      	mov	sl, r0
 80117f2:	468b      	mov	fp, r1
 80117f4:	f7ef f9a0 	bl	8000b38 <__aeabi_dcmpeq>
 80117f8:	2800      	cmp	r0, #0
 80117fa:	d0c1      	beq.n	8011780 <_strtod_l+0x8b8>
 80117fc:	e61a      	b.n	8011434 <_strtod_l+0x56c>
 80117fe:	4641      	mov	r1, r8
 8011800:	4620      	mov	r0, r4
 8011802:	f002 fecd 	bl	80145a0 <__ratio>
 8011806:	ec57 6b10 	vmov	r6, r7, d0
 801180a:	2200      	movs	r2, #0
 801180c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011810:	4630      	mov	r0, r6
 8011812:	4639      	mov	r1, r7
 8011814:	f7ef f9a4 	bl	8000b60 <__aeabi_dcmple>
 8011818:	2800      	cmp	r0, #0
 801181a:	d06f      	beq.n	80118fc <_strtod_l+0xa34>
 801181c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801181e:	2b00      	cmp	r3, #0
 8011820:	d17a      	bne.n	8011918 <_strtod_l+0xa50>
 8011822:	f1ba 0f00 	cmp.w	sl, #0
 8011826:	d158      	bne.n	80118da <_strtod_l+0xa12>
 8011828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801182a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801182e:	2b00      	cmp	r3, #0
 8011830:	d15a      	bne.n	80118e8 <_strtod_l+0xa20>
 8011832:	4b64      	ldr	r3, [pc, #400]	@ (80119c4 <_strtod_l+0xafc>)
 8011834:	2200      	movs	r2, #0
 8011836:	4630      	mov	r0, r6
 8011838:	4639      	mov	r1, r7
 801183a:	f7ef f987 	bl	8000b4c <__aeabi_dcmplt>
 801183e:	2800      	cmp	r0, #0
 8011840:	d159      	bne.n	80118f6 <_strtod_l+0xa2e>
 8011842:	4630      	mov	r0, r6
 8011844:	4639      	mov	r1, r7
 8011846:	4b60      	ldr	r3, [pc, #384]	@ (80119c8 <_strtod_l+0xb00>)
 8011848:	2200      	movs	r2, #0
 801184a:	f7ee ff0d 	bl	8000668 <__aeabi_dmul>
 801184e:	4606      	mov	r6, r0
 8011850:	460f      	mov	r7, r1
 8011852:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011856:	9606      	str	r6, [sp, #24]
 8011858:	9307      	str	r3, [sp, #28]
 801185a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801185e:	4d57      	ldr	r5, [pc, #348]	@ (80119bc <_strtod_l+0xaf4>)
 8011860:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011866:	401d      	ands	r5, r3
 8011868:	4b58      	ldr	r3, [pc, #352]	@ (80119cc <_strtod_l+0xb04>)
 801186a:	429d      	cmp	r5, r3
 801186c:	f040 80b2 	bne.w	80119d4 <_strtod_l+0xb0c>
 8011870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011872:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011876:	ec4b ab10 	vmov	d0, sl, fp
 801187a:	f002 fdc9 	bl	8014410 <__ulp>
 801187e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011882:	ec51 0b10 	vmov	r0, r1, d0
 8011886:	f7ee feef 	bl	8000668 <__aeabi_dmul>
 801188a:	4652      	mov	r2, sl
 801188c:	465b      	mov	r3, fp
 801188e:	f7ee fd35 	bl	80002fc <__adddf3>
 8011892:	460b      	mov	r3, r1
 8011894:	4949      	ldr	r1, [pc, #292]	@ (80119bc <_strtod_l+0xaf4>)
 8011896:	4a4e      	ldr	r2, [pc, #312]	@ (80119d0 <_strtod_l+0xb08>)
 8011898:	4019      	ands	r1, r3
 801189a:	4291      	cmp	r1, r2
 801189c:	4682      	mov	sl, r0
 801189e:	d942      	bls.n	8011926 <_strtod_l+0xa5e>
 80118a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80118a2:	4b47      	ldr	r3, [pc, #284]	@ (80119c0 <_strtod_l+0xaf8>)
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d103      	bne.n	80118b0 <_strtod_l+0x9e8>
 80118a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118aa:	3301      	adds	r3, #1
 80118ac:	f43f ad2f 	beq.w	801130e <_strtod_l+0x446>
 80118b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80119c0 <_strtod_l+0xaf8>
 80118b4:	f04f 3aff 	mov.w	sl, #4294967295
 80118b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80118ba:	9805      	ldr	r0, [sp, #20]
 80118bc:	f002 fa7c 	bl	8013db8 <_Bfree>
 80118c0:	9805      	ldr	r0, [sp, #20]
 80118c2:	4649      	mov	r1, r9
 80118c4:	f002 fa78 	bl	8013db8 <_Bfree>
 80118c8:	9805      	ldr	r0, [sp, #20]
 80118ca:	4641      	mov	r1, r8
 80118cc:	f002 fa74 	bl	8013db8 <_Bfree>
 80118d0:	9805      	ldr	r0, [sp, #20]
 80118d2:	4621      	mov	r1, r4
 80118d4:	f002 fa70 	bl	8013db8 <_Bfree>
 80118d8:	e619      	b.n	801150e <_strtod_l+0x646>
 80118da:	f1ba 0f01 	cmp.w	sl, #1
 80118de:	d103      	bne.n	80118e8 <_strtod_l+0xa20>
 80118e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	f43f ada6 	beq.w	8011434 <_strtod_l+0x56c>
 80118e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011998 <_strtod_l+0xad0>
 80118ec:	4f35      	ldr	r7, [pc, #212]	@ (80119c4 <_strtod_l+0xafc>)
 80118ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80118f2:	2600      	movs	r6, #0
 80118f4:	e7b1      	b.n	801185a <_strtod_l+0x992>
 80118f6:	4f34      	ldr	r7, [pc, #208]	@ (80119c8 <_strtod_l+0xb00>)
 80118f8:	2600      	movs	r6, #0
 80118fa:	e7aa      	b.n	8011852 <_strtod_l+0x98a>
 80118fc:	4b32      	ldr	r3, [pc, #200]	@ (80119c8 <_strtod_l+0xb00>)
 80118fe:	4630      	mov	r0, r6
 8011900:	4639      	mov	r1, r7
 8011902:	2200      	movs	r2, #0
 8011904:	f7ee feb0 	bl	8000668 <__aeabi_dmul>
 8011908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801190a:	4606      	mov	r6, r0
 801190c:	460f      	mov	r7, r1
 801190e:	2b00      	cmp	r3, #0
 8011910:	d09f      	beq.n	8011852 <_strtod_l+0x98a>
 8011912:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011916:	e7a0      	b.n	801185a <_strtod_l+0x992>
 8011918:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80119a0 <_strtod_l+0xad8>
 801191c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011920:	ec57 6b17 	vmov	r6, r7, d7
 8011924:	e799      	b.n	801185a <_strtod_l+0x992>
 8011926:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801192a:	9b08      	ldr	r3, [sp, #32]
 801192c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011930:	2b00      	cmp	r3, #0
 8011932:	d1c1      	bne.n	80118b8 <_strtod_l+0x9f0>
 8011934:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011938:	0d1b      	lsrs	r3, r3, #20
 801193a:	051b      	lsls	r3, r3, #20
 801193c:	429d      	cmp	r5, r3
 801193e:	d1bb      	bne.n	80118b8 <_strtod_l+0x9f0>
 8011940:	4630      	mov	r0, r6
 8011942:	4639      	mov	r1, r7
 8011944:	f7ef f9f0 	bl	8000d28 <__aeabi_d2lz>
 8011948:	f7ee fe60 	bl	800060c <__aeabi_l2d>
 801194c:	4602      	mov	r2, r0
 801194e:	460b      	mov	r3, r1
 8011950:	4630      	mov	r0, r6
 8011952:	4639      	mov	r1, r7
 8011954:	f7ee fcd0 	bl	80002f8 <__aeabi_dsub>
 8011958:	460b      	mov	r3, r1
 801195a:	4602      	mov	r2, r0
 801195c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011960:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011966:	ea46 060a 	orr.w	r6, r6, sl
 801196a:	431e      	orrs	r6, r3
 801196c:	d06f      	beq.n	8011a4e <_strtod_l+0xb86>
 801196e:	a30e      	add	r3, pc, #56	@ (adr r3, 80119a8 <_strtod_l+0xae0>)
 8011970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011974:	f7ef f8ea 	bl	8000b4c <__aeabi_dcmplt>
 8011978:	2800      	cmp	r0, #0
 801197a:	f47f acd3 	bne.w	8011324 <_strtod_l+0x45c>
 801197e:	a30c      	add	r3, pc, #48	@ (adr r3, 80119b0 <_strtod_l+0xae8>)
 8011980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011988:	f7ef f8fe 	bl	8000b88 <__aeabi_dcmpgt>
 801198c:	2800      	cmp	r0, #0
 801198e:	d093      	beq.n	80118b8 <_strtod_l+0x9f0>
 8011990:	e4c8      	b.n	8011324 <_strtod_l+0x45c>
 8011992:	bf00      	nop
 8011994:	f3af 8000 	nop.w
 8011998:	00000000 	.word	0x00000000
 801199c:	bff00000 	.word	0xbff00000
 80119a0:	00000000 	.word	0x00000000
 80119a4:	3ff00000 	.word	0x3ff00000
 80119a8:	94a03595 	.word	0x94a03595
 80119ac:	3fdfffff 	.word	0x3fdfffff
 80119b0:	35afe535 	.word	0x35afe535
 80119b4:	3fe00000 	.word	0x3fe00000
 80119b8:	000fffff 	.word	0x000fffff
 80119bc:	7ff00000 	.word	0x7ff00000
 80119c0:	7fefffff 	.word	0x7fefffff
 80119c4:	3ff00000 	.word	0x3ff00000
 80119c8:	3fe00000 	.word	0x3fe00000
 80119cc:	7fe00000 	.word	0x7fe00000
 80119d0:	7c9fffff 	.word	0x7c9fffff
 80119d4:	9b08      	ldr	r3, [sp, #32]
 80119d6:	b323      	cbz	r3, 8011a22 <_strtod_l+0xb5a>
 80119d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80119dc:	d821      	bhi.n	8011a22 <_strtod_l+0xb5a>
 80119de:	a328      	add	r3, pc, #160	@ (adr r3, 8011a80 <_strtod_l+0xbb8>)
 80119e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e4:	4630      	mov	r0, r6
 80119e6:	4639      	mov	r1, r7
 80119e8:	f7ef f8ba 	bl	8000b60 <__aeabi_dcmple>
 80119ec:	b1a0      	cbz	r0, 8011a18 <_strtod_l+0xb50>
 80119ee:	4639      	mov	r1, r7
 80119f0:	4630      	mov	r0, r6
 80119f2:	f7ef f911 	bl	8000c18 <__aeabi_d2uiz>
 80119f6:	2801      	cmp	r0, #1
 80119f8:	bf38      	it	cc
 80119fa:	2001      	movcc	r0, #1
 80119fc:	f7ee fdba 	bl	8000574 <__aeabi_ui2d>
 8011a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a02:	4606      	mov	r6, r0
 8011a04:	460f      	mov	r7, r1
 8011a06:	b9fb      	cbnz	r3, 8011a48 <_strtod_l+0xb80>
 8011a08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011a0c:	9014      	str	r0, [sp, #80]	@ 0x50
 8011a0e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011a10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011a14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011a18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011a1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011a1e:	1b5b      	subs	r3, r3, r5
 8011a20:	9311      	str	r3, [sp, #68]	@ 0x44
 8011a22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011a26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011a2a:	f002 fcf1 	bl	8014410 <__ulp>
 8011a2e:	4650      	mov	r0, sl
 8011a30:	ec53 2b10 	vmov	r2, r3, d0
 8011a34:	4659      	mov	r1, fp
 8011a36:	f7ee fe17 	bl	8000668 <__aeabi_dmul>
 8011a3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011a3e:	f7ee fc5d 	bl	80002fc <__adddf3>
 8011a42:	4682      	mov	sl, r0
 8011a44:	468b      	mov	fp, r1
 8011a46:	e770      	b.n	801192a <_strtod_l+0xa62>
 8011a48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011a4c:	e7e0      	b.n	8011a10 <_strtod_l+0xb48>
 8011a4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011a88 <_strtod_l+0xbc0>)
 8011a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a54:	f7ef f87a 	bl	8000b4c <__aeabi_dcmplt>
 8011a58:	e798      	b.n	801198c <_strtod_l+0xac4>
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8011a5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011a60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a62:	6013      	str	r3, [r2, #0]
 8011a64:	f7ff ba6d 	b.w	8010f42 <_strtod_l+0x7a>
 8011a68:	2a65      	cmp	r2, #101	@ 0x65
 8011a6a:	f43f ab68 	beq.w	801113e <_strtod_l+0x276>
 8011a6e:	2a45      	cmp	r2, #69	@ 0x45
 8011a70:	f43f ab65 	beq.w	801113e <_strtod_l+0x276>
 8011a74:	2301      	movs	r3, #1
 8011a76:	f7ff bba0 	b.w	80111ba <_strtod_l+0x2f2>
 8011a7a:	bf00      	nop
 8011a7c:	f3af 8000 	nop.w
 8011a80:	ffc00000 	.word	0xffc00000
 8011a84:	41dfffff 	.word	0x41dfffff
 8011a88:	94a03595 	.word	0x94a03595
 8011a8c:	3fcfffff 	.word	0x3fcfffff

08011a90 <strtod>:
 8011a90:	460a      	mov	r2, r1
 8011a92:	4601      	mov	r1, r0
 8011a94:	4802      	ldr	r0, [pc, #8]	@ (8011aa0 <strtod+0x10>)
 8011a96:	4b03      	ldr	r3, [pc, #12]	@ (8011aa4 <strtod+0x14>)
 8011a98:	6800      	ldr	r0, [r0, #0]
 8011a9a:	f7ff ba15 	b.w	8010ec8 <_strtod_l>
 8011a9e:	bf00      	nop
 8011aa0:	200001a0 	.word	0x200001a0
 8011aa4:	20000034 	.word	0x20000034

08011aa8 <__cvt>:
 8011aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011aac:	ec57 6b10 	vmov	r6, r7, d0
 8011ab0:	2f00      	cmp	r7, #0
 8011ab2:	460c      	mov	r4, r1
 8011ab4:	4619      	mov	r1, r3
 8011ab6:	463b      	mov	r3, r7
 8011ab8:	bfbb      	ittet	lt
 8011aba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011abe:	461f      	movlt	r7, r3
 8011ac0:	2300      	movge	r3, #0
 8011ac2:	232d      	movlt	r3, #45	@ 0x2d
 8011ac4:	700b      	strb	r3, [r1, #0]
 8011ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011ac8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011acc:	4691      	mov	r9, r2
 8011ace:	f023 0820 	bic.w	r8, r3, #32
 8011ad2:	bfbc      	itt	lt
 8011ad4:	4632      	movlt	r2, r6
 8011ad6:	4616      	movlt	r6, r2
 8011ad8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011adc:	d005      	beq.n	8011aea <__cvt+0x42>
 8011ade:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011ae2:	d100      	bne.n	8011ae6 <__cvt+0x3e>
 8011ae4:	3401      	adds	r4, #1
 8011ae6:	2102      	movs	r1, #2
 8011ae8:	e000      	b.n	8011aec <__cvt+0x44>
 8011aea:	2103      	movs	r1, #3
 8011aec:	ab03      	add	r3, sp, #12
 8011aee:	9301      	str	r3, [sp, #4]
 8011af0:	ab02      	add	r3, sp, #8
 8011af2:	9300      	str	r3, [sp, #0]
 8011af4:	ec47 6b10 	vmov	d0, r6, r7
 8011af8:	4653      	mov	r3, sl
 8011afa:	4622      	mov	r2, r4
 8011afc:	f000 ff00 	bl	8012900 <_dtoa_r>
 8011b00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011b04:	4605      	mov	r5, r0
 8011b06:	d119      	bne.n	8011b3c <__cvt+0x94>
 8011b08:	f019 0f01 	tst.w	r9, #1
 8011b0c:	d00e      	beq.n	8011b2c <__cvt+0x84>
 8011b0e:	eb00 0904 	add.w	r9, r0, r4
 8011b12:	2200      	movs	r2, #0
 8011b14:	2300      	movs	r3, #0
 8011b16:	4630      	mov	r0, r6
 8011b18:	4639      	mov	r1, r7
 8011b1a:	f7ef f80d 	bl	8000b38 <__aeabi_dcmpeq>
 8011b1e:	b108      	cbz	r0, 8011b24 <__cvt+0x7c>
 8011b20:	f8cd 900c 	str.w	r9, [sp, #12]
 8011b24:	2230      	movs	r2, #48	@ 0x30
 8011b26:	9b03      	ldr	r3, [sp, #12]
 8011b28:	454b      	cmp	r3, r9
 8011b2a:	d31e      	bcc.n	8011b6a <__cvt+0xc2>
 8011b2c:	9b03      	ldr	r3, [sp, #12]
 8011b2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b30:	1b5b      	subs	r3, r3, r5
 8011b32:	4628      	mov	r0, r5
 8011b34:	6013      	str	r3, [r2, #0]
 8011b36:	b004      	add	sp, #16
 8011b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011b40:	eb00 0904 	add.w	r9, r0, r4
 8011b44:	d1e5      	bne.n	8011b12 <__cvt+0x6a>
 8011b46:	7803      	ldrb	r3, [r0, #0]
 8011b48:	2b30      	cmp	r3, #48	@ 0x30
 8011b4a:	d10a      	bne.n	8011b62 <__cvt+0xba>
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	2300      	movs	r3, #0
 8011b50:	4630      	mov	r0, r6
 8011b52:	4639      	mov	r1, r7
 8011b54:	f7ee fff0 	bl	8000b38 <__aeabi_dcmpeq>
 8011b58:	b918      	cbnz	r0, 8011b62 <__cvt+0xba>
 8011b5a:	f1c4 0401 	rsb	r4, r4, #1
 8011b5e:	f8ca 4000 	str.w	r4, [sl]
 8011b62:	f8da 3000 	ldr.w	r3, [sl]
 8011b66:	4499      	add	r9, r3
 8011b68:	e7d3      	b.n	8011b12 <__cvt+0x6a>
 8011b6a:	1c59      	adds	r1, r3, #1
 8011b6c:	9103      	str	r1, [sp, #12]
 8011b6e:	701a      	strb	r2, [r3, #0]
 8011b70:	e7d9      	b.n	8011b26 <__cvt+0x7e>

08011b72 <__exponent>:
 8011b72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b74:	2900      	cmp	r1, #0
 8011b76:	bfba      	itte	lt
 8011b78:	4249      	neglt	r1, r1
 8011b7a:	232d      	movlt	r3, #45	@ 0x2d
 8011b7c:	232b      	movge	r3, #43	@ 0x2b
 8011b7e:	2909      	cmp	r1, #9
 8011b80:	7002      	strb	r2, [r0, #0]
 8011b82:	7043      	strb	r3, [r0, #1]
 8011b84:	dd29      	ble.n	8011bda <__exponent+0x68>
 8011b86:	f10d 0307 	add.w	r3, sp, #7
 8011b8a:	461d      	mov	r5, r3
 8011b8c:	270a      	movs	r7, #10
 8011b8e:	461a      	mov	r2, r3
 8011b90:	fbb1 f6f7 	udiv	r6, r1, r7
 8011b94:	fb07 1416 	mls	r4, r7, r6, r1
 8011b98:	3430      	adds	r4, #48	@ 0x30
 8011b9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011b9e:	460c      	mov	r4, r1
 8011ba0:	2c63      	cmp	r4, #99	@ 0x63
 8011ba2:	f103 33ff 	add.w	r3, r3, #4294967295
 8011ba6:	4631      	mov	r1, r6
 8011ba8:	dcf1      	bgt.n	8011b8e <__exponent+0x1c>
 8011baa:	3130      	adds	r1, #48	@ 0x30
 8011bac:	1e94      	subs	r4, r2, #2
 8011bae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011bb2:	1c41      	adds	r1, r0, #1
 8011bb4:	4623      	mov	r3, r4
 8011bb6:	42ab      	cmp	r3, r5
 8011bb8:	d30a      	bcc.n	8011bd0 <__exponent+0x5e>
 8011bba:	f10d 0309 	add.w	r3, sp, #9
 8011bbe:	1a9b      	subs	r3, r3, r2
 8011bc0:	42ac      	cmp	r4, r5
 8011bc2:	bf88      	it	hi
 8011bc4:	2300      	movhi	r3, #0
 8011bc6:	3302      	adds	r3, #2
 8011bc8:	4403      	add	r3, r0
 8011bca:	1a18      	subs	r0, r3, r0
 8011bcc:	b003      	add	sp, #12
 8011bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bd0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011bd4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011bd8:	e7ed      	b.n	8011bb6 <__exponent+0x44>
 8011bda:	2330      	movs	r3, #48	@ 0x30
 8011bdc:	3130      	adds	r1, #48	@ 0x30
 8011bde:	7083      	strb	r3, [r0, #2]
 8011be0:	70c1      	strb	r1, [r0, #3]
 8011be2:	1d03      	adds	r3, r0, #4
 8011be4:	e7f1      	b.n	8011bca <__exponent+0x58>
	...

08011be8 <_printf_float>:
 8011be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bec:	b08d      	sub	sp, #52	@ 0x34
 8011bee:	460c      	mov	r4, r1
 8011bf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011bf4:	4616      	mov	r6, r2
 8011bf6:	461f      	mov	r7, r3
 8011bf8:	4605      	mov	r5, r0
 8011bfa:	f000 fd49 	bl	8012690 <_localeconv_r>
 8011bfe:	6803      	ldr	r3, [r0, #0]
 8011c00:	9304      	str	r3, [sp, #16]
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7ee fb6c 	bl	80002e0 <strlen>
 8011c08:	2300      	movs	r3, #0
 8011c0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8011c10:	9005      	str	r0, [sp, #20]
 8011c12:	3307      	adds	r3, #7
 8011c14:	f023 0307 	bic.w	r3, r3, #7
 8011c18:	f103 0208 	add.w	r2, r3, #8
 8011c1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011c20:	f8d4 b000 	ldr.w	fp, [r4]
 8011c24:	f8c8 2000 	str.w	r2, [r8]
 8011c28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011c30:	9307      	str	r3, [sp, #28]
 8011c32:	f8cd 8018 	str.w	r8, [sp, #24]
 8011c36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011c3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c3e:	4b9c      	ldr	r3, [pc, #624]	@ (8011eb0 <_printf_float+0x2c8>)
 8011c40:	f04f 32ff 	mov.w	r2, #4294967295
 8011c44:	f7ee ffaa 	bl	8000b9c <__aeabi_dcmpun>
 8011c48:	bb70      	cbnz	r0, 8011ca8 <_printf_float+0xc0>
 8011c4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c4e:	4b98      	ldr	r3, [pc, #608]	@ (8011eb0 <_printf_float+0x2c8>)
 8011c50:	f04f 32ff 	mov.w	r2, #4294967295
 8011c54:	f7ee ff84 	bl	8000b60 <__aeabi_dcmple>
 8011c58:	bb30      	cbnz	r0, 8011ca8 <_printf_float+0xc0>
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	4640      	mov	r0, r8
 8011c60:	4649      	mov	r1, r9
 8011c62:	f7ee ff73 	bl	8000b4c <__aeabi_dcmplt>
 8011c66:	b110      	cbz	r0, 8011c6e <_printf_float+0x86>
 8011c68:	232d      	movs	r3, #45	@ 0x2d
 8011c6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c6e:	4a91      	ldr	r2, [pc, #580]	@ (8011eb4 <_printf_float+0x2cc>)
 8011c70:	4b91      	ldr	r3, [pc, #580]	@ (8011eb8 <_printf_float+0x2d0>)
 8011c72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011c76:	bf8c      	ite	hi
 8011c78:	4690      	movhi	r8, r2
 8011c7a:	4698      	movls	r8, r3
 8011c7c:	2303      	movs	r3, #3
 8011c7e:	6123      	str	r3, [r4, #16]
 8011c80:	f02b 0304 	bic.w	r3, fp, #4
 8011c84:	6023      	str	r3, [r4, #0]
 8011c86:	f04f 0900 	mov.w	r9, #0
 8011c8a:	9700      	str	r7, [sp, #0]
 8011c8c:	4633      	mov	r3, r6
 8011c8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011c90:	4621      	mov	r1, r4
 8011c92:	4628      	mov	r0, r5
 8011c94:	f000 f9d2 	bl	801203c <_printf_common>
 8011c98:	3001      	adds	r0, #1
 8011c9a:	f040 808d 	bne.w	8011db8 <_printf_float+0x1d0>
 8011c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca2:	b00d      	add	sp, #52	@ 0x34
 8011ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ca8:	4642      	mov	r2, r8
 8011caa:	464b      	mov	r3, r9
 8011cac:	4640      	mov	r0, r8
 8011cae:	4649      	mov	r1, r9
 8011cb0:	f7ee ff74 	bl	8000b9c <__aeabi_dcmpun>
 8011cb4:	b140      	cbz	r0, 8011cc8 <_printf_float+0xe0>
 8011cb6:	464b      	mov	r3, r9
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	bfbc      	itt	lt
 8011cbc:	232d      	movlt	r3, #45	@ 0x2d
 8011cbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011cc2:	4a7e      	ldr	r2, [pc, #504]	@ (8011ebc <_printf_float+0x2d4>)
 8011cc4:	4b7e      	ldr	r3, [pc, #504]	@ (8011ec0 <_printf_float+0x2d8>)
 8011cc6:	e7d4      	b.n	8011c72 <_printf_float+0x8a>
 8011cc8:	6863      	ldr	r3, [r4, #4]
 8011cca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011cce:	9206      	str	r2, [sp, #24]
 8011cd0:	1c5a      	adds	r2, r3, #1
 8011cd2:	d13b      	bne.n	8011d4c <_printf_float+0x164>
 8011cd4:	2306      	movs	r3, #6
 8011cd6:	6063      	str	r3, [r4, #4]
 8011cd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011cdc:	2300      	movs	r3, #0
 8011cde:	6022      	str	r2, [r4, #0]
 8011ce0:	9303      	str	r3, [sp, #12]
 8011ce2:	ab0a      	add	r3, sp, #40	@ 0x28
 8011ce4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011ce8:	ab09      	add	r3, sp, #36	@ 0x24
 8011cea:	9300      	str	r3, [sp, #0]
 8011cec:	6861      	ldr	r1, [r4, #4]
 8011cee:	ec49 8b10 	vmov	d0, r8, r9
 8011cf2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011cf6:	4628      	mov	r0, r5
 8011cf8:	f7ff fed6 	bl	8011aa8 <__cvt>
 8011cfc:	9b06      	ldr	r3, [sp, #24]
 8011cfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011d00:	2b47      	cmp	r3, #71	@ 0x47
 8011d02:	4680      	mov	r8, r0
 8011d04:	d129      	bne.n	8011d5a <_printf_float+0x172>
 8011d06:	1cc8      	adds	r0, r1, #3
 8011d08:	db02      	blt.n	8011d10 <_printf_float+0x128>
 8011d0a:	6863      	ldr	r3, [r4, #4]
 8011d0c:	4299      	cmp	r1, r3
 8011d0e:	dd41      	ble.n	8011d94 <_printf_float+0x1ac>
 8011d10:	f1aa 0a02 	sub.w	sl, sl, #2
 8011d14:	fa5f fa8a 	uxtb.w	sl, sl
 8011d18:	3901      	subs	r1, #1
 8011d1a:	4652      	mov	r2, sl
 8011d1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011d20:	9109      	str	r1, [sp, #36]	@ 0x24
 8011d22:	f7ff ff26 	bl	8011b72 <__exponent>
 8011d26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011d28:	1813      	adds	r3, r2, r0
 8011d2a:	2a01      	cmp	r2, #1
 8011d2c:	4681      	mov	r9, r0
 8011d2e:	6123      	str	r3, [r4, #16]
 8011d30:	dc02      	bgt.n	8011d38 <_printf_float+0x150>
 8011d32:	6822      	ldr	r2, [r4, #0]
 8011d34:	07d2      	lsls	r2, r2, #31
 8011d36:	d501      	bpl.n	8011d3c <_printf_float+0x154>
 8011d38:	3301      	adds	r3, #1
 8011d3a:	6123      	str	r3, [r4, #16]
 8011d3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d0a2      	beq.n	8011c8a <_printf_float+0xa2>
 8011d44:	232d      	movs	r3, #45	@ 0x2d
 8011d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d4a:	e79e      	b.n	8011c8a <_printf_float+0xa2>
 8011d4c:	9a06      	ldr	r2, [sp, #24]
 8011d4e:	2a47      	cmp	r2, #71	@ 0x47
 8011d50:	d1c2      	bne.n	8011cd8 <_printf_float+0xf0>
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d1c0      	bne.n	8011cd8 <_printf_float+0xf0>
 8011d56:	2301      	movs	r3, #1
 8011d58:	e7bd      	b.n	8011cd6 <_printf_float+0xee>
 8011d5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011d5e:	d9db      	bls.n	8011d18 <_printf_float+0x130>
 8011d60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011d64:	d118      	bne.n	8011d98 <_printf_float+0x1b0>
 8011d66:	2900      	cmp	r1, #0
 8011d68:	6863      	ldr	r3, [r4, #4]
 8011d6a:	dd0b      	ble.n	8011d84 <_printf_float+0x19c>
 8011d6c:	6121      	str	r1, [r4, #16]
 8011d6e:	b913      	cbnz	r3, 8011d76 <_printf_float+0x18e>
 8011d70:	6822      	ldr	r2, [r4, #0]
 8011d72:	07d0      	lsls	r0, r2, #31
 8011d74:	d502      	bpl.n	8011d7c <_printf_float+0x194>
 8011d76:	3301      	adds	r3, #1
 8011d78:	440b      	add	r3, r1
 8011d7a:	6123      	str	r3, [r4, #16]
 8011d7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011d7e:	f04f 0900 	mov.w	r9, #0
 8011d82:	e7db      	b.n	8011d3c <_printf_float+0x154>
 8011d84:	b913      	cbnz	r3, 8011d8c <_printf_float+0x1a4>
 8011d86:	6822      	ldr	r2, [r4, #0]
 8011d88:	07d2      	lsls	r2, r2, #31
 8011d8a:	d501      	bpl.n	8011d90 <_printf_float+0x1a8>
 8011d8c:	3302      	adds	r3, #2
 8011d8e:	e7f4      	b.n	8011d7a <_printf_float+0x192>
 8011d90:	2301      	movs	r3, #1
 8011d92:	e7f2      	b.n	8011d7a <_printf_float+0x192>
 8011d94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d9a:	4299      	cmp	r1, r3
 8011d9c:	db05      	blt.n	8011daa <_printf_float+0x1c2>
 8011d9e:	6823      	ldr	r3, [r4, #0]
 8011da0:	6121      	str	r1, [r4, #16]
 8011da2:	07d8      	lsls	r0, r3, #31
 8011da4:	d5ea      	bpl.n	8011d7c <_printf_float+0x194>
 8011da6:	1c4b      	adds	r3, r1, #1
 8011da8:	e7e7      	b.n	8011d7a <_printf_float+0x192>
 8011daa:	2900      	cmp	r1, #0
 8011dac:	bfd4      	ite	le
 8011dae:	f1c1 0202 	rsble	r2, r1, #2
 8011db2:	2201      	movgt	r2, #1
 8011db4:	4413      	add	r3, r2
 8011db6:	e7e0      	b.n	8011d7a <_printf_float+0x192>
 8011db8:	6823      	ldr	r3, [r4, #0]
 8011dba:	055a      	lsls	r2, r3, #21
 8011dbc:	d407      	bmi.n	8011dce <_printf_float+0x1e6>
 8011dbe:	6923      	ldr	r3, [r4, #16]
 8011dc0:	4642      	mov	r2, r8
 8011dc2:	4631      	mov	r1, r6
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	47b8      	blx	r7
 8011dc8:	3001      	adds	r0, #1
 8011dca:	d12b      	bne.n	8011e24 <_printf_float+0x23c>
 8011dcc:	e767      	b.n	8011c9e <_printf_float+0xb6>
 8011dce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011dd2:	f240 80dd 	bls.w	8011f90 <_printf_float+0x3a8>
 8011dd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011dda:	2200      	movs	r2, #0
 8011ddc:	2300      	movs	r3, #0
 8011dde:	f7ee feab 	bl	8000b38 <__aeabi_dcmpeq>
 8011de2:	2800      	cmp	r0, #0
 8011de4:	d033      	beq.n	8011e4e <_printf_float+0x266>
 8011de6:	4a37      	ldr	r2, [pc, #220]	@ (8011ec4 <_printf_float+0x2dc>)
 8011de8:	2301      	movs	r3, #1
 8011dea:	4631      	mov	r1, r6
 8011dec:	4628      	mov	r0, r5
 8011dee:	47b8      	blx	r7
 8011df0:	3001      	adds	r0, #1
 8011df2:	f43f af54 	beq.w	8011c9e <_printf_float+0xb6>
 8011df6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011dfa:	4543      	cmp	r3, r8
 8011dfc:	db02      	blt.n	8011e04 <_printf_float+0x21c>
 8011dfe:	6823      	ldr	r3, [r4, #0]
 8011e00:	07d8      	lsls	r0, r3, #31
 8011e02:	d50f      	bpl.n	8011e24 <_printf_float+0x23c>
 8011e04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e08:	4631      	mov	r1, r6
 8011e0a:	4628      	mov	r0, r5
 8011e0c:	47b8      	blx	r7
 8011e0e:	3001      	adds	r0, #1
 8011e10:	f43f af45 	beq.w	8011c9e <_printf_float+0xb6>
 8011e14:	f04f 0900 	mov.w	r9, #0
 8011e18:	f108 38ff 	add.w	r8, r8, #4294967295
 8011e1c:	f104 0a1a 	add.w	sl, r4, #26
 8011e20:	45c8      	cmp	r8, r9
 8011e22:	dc09      	bgt.n	8011e38 <_printf_float+0x250>
 8011e24:	6823      	ldr	r3, [r4, #0]
 8011e26:	079b      	lsls	r3, r3, #30
 8011e28:	f100 8103 	bmi.w	8012032 <_printf_float+0x44a>
 8011e2c:	68e0      	ldr	r0, [r4, #12]
 8011e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e30:	4298      	cmp	r0, r3
 8011e32:	bfb8      	it	lt
 8011e34:	4618      	movlt	r0, r3
 8011e36:	e734      	b.n	8011ca2 <_printf_float+0xba>
 8011e38:	2301      	movs	r3, #1
 8011e3a:	4652      	mov	r2, sl
 8011e3c:	4631      	mov	r1, r6
 8011e3e:	4628      	mov	r0, r5
 8011e40:	47b8      	blx	r7
 8011e42:	3001      	adds	r0, #1
 8011e44:	f43f af2b 	beq.w	8011c9e <_printf_float+0xb6>
 8011e48:	f109 0901 	add.w	r9, r9, #1
 8011e4c:	e7e8      	b.n	8011e20 <_printf_float+0x238>
 8011e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	dc39      	bgt.n	8011ec8 <_printf_float+0x2e0>
 8011e54:	4a1b      	ldr	r2, [pc, #108]	@ (8011ec4 <_printf_float+0x2dc>)
 8011e56:	2301      	movs	r3, #1
 8011e58:	4631      	mov	r1, r6
 8011e5a:	4628      	mov	r0, r5
 8011e5c:	47b8      	blx	r7
 8011e5e:	3001      	adds	r0, #1
 8011e60:	f43f af1d 	beq.w	8011c9e <_printf_float+0xb6>
 8011e64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011e68:	ea59 0303 	orrs.w	r3, r9, r3
 8011e6c:	d102      	bne.n	8011e74 <_printf_float+0x28c>
 8011e6e:	6823      	ldr	r3, [r4, #0]
 8011e70:	07d9      	lsls	r1, r3, #31
 8011e72:	d5d7      	bpl.n	8011e24 <_printf_float+0x23c>
 8011e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e78:	4631      	mov	r1, r6
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	47b8      	blx	r7
 8011e7e:	3001      	adds	r0, #1
 8011e80:	f43f af0d 	beq.w	8011c9e <_printf_float+0xb6>
 8011e84:	f04f 0a00 	mov.w	sl, #0
 8011e88:	f104 0b1a 	add.w	fp, r4, #26
 8011e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e8e:	425b      	negs	r3, r3
 8011e90:	4553      	cmp	r3, sl
 8011e92:	dc01      	bgt.n	8011e98 <_printf_float+0x2b0>
 8011e94:	464b      	mov	r3, r9
 8011e96:	e793      	b.n	8011dc0 <_printf_float+0x1d8>
 8011e98:	2301      	movs	r3, #1
 8011e9a:	465a      	mov	r2, fp
 8011e9c:	4631      	mov	r1, r6
 8011e9e:	4628      	mov	r0, r5
 8011ea0:	47b8      	blx	r7
 8011ea2:	3001      	adds	r0, #1
 8011ea4:	f43f aefb 	beq.w	8011c9e <_printf_float+0xb6>
 8011ea8:	f10a 0a01 	add.w	sl, sl, #1
 8011eac:	e7ee      	b.n	8011e8c <_printf_float+0x2a4>
 8011eae:	bf00      	nop
 8011eb0:	7fefffff 	.word	0x7fefffff
 8011eb4:	08017576 	.word	0x08017576
 8011eb8:	08017572 	.word	0x08017572
 8011ebc:	0801757e 	.word	0x0801757e
 8011ec0:	0801757a 	.word	0x0801757a
 8011ec4:	08017582 	.word	0x08017582
 8011ec8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011eca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011ece:	4553      	cmp	r3, sl
 8011ed0:	bfa8      	it	ge
 8011ed2:	4653      	movge	r3, sl
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	4699      	mov	r9, r3
 8011ed8:	dc36      	bgt.n	8011f48 <_printf_float+0x360>
 8011eda:	f04f 0b00 	mov.w	fp, #0
 8011ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ee2:	f104 021a 	add.w	r2, r4, #26
 8011ee6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011ee8:	9306      	str	r3, [sp, #24]
 8011eea:	eba3 0309 	sub.w	r3, r3, r9
 8011eee:	455b      	cmp	r3, fp
 8011ef0:	dc31      	bgt.n	8011f56 <_printf_float+0x36e>
 8011ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ef4:	459a      	cmp	sl, r3
 8011ef6:	dc3a      	bgt.n	8011f6e <_printf_float+0x386>
 8011ef8:	6823      	ldr	r3, [r4, #0]
 8011efa:	07da      	lsls	r2, r3, #31
 8011efc:	d437      	bmi.n	8011f6e <_printf_float+0x386>
 8011efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f00:	ebaa 0903 	sub.w	r9, sl, r3
 8011f04:	9b06      	ldr	r3, [sp, #24]
 8011f06:	ebaa 0303 	sub.w	r3, sl, r3
 8011f0a:	4599      	cmp	r9, r3
 8011f0c:	bfa8      	it	ge
 8011f0e:	4699      	movge	r9, r3
 8011f10:	f1b9 0f00 	cmp.w	r9, #0
 8011f14:	dc33      	bgt.n	8011f7e <_printf_float+0x396>
 8011f16:	f04f 0800 	mov.w	r8, #0
 8011f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f1e:	f104 0b1a 	add.w	fp, r4, #26
 8011f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f24:	ebaa 0303 	sub.w	r3, sl, r3
 8011f28:	eba3 0309 	sub.w	r3, r3, r9
 8011f2c:	4543      	cmp	r3, r8
 8011f2e:	f77f af79 	ble.w	8011e24 <_printf_float+0x23c>
 8011f32:	2301      	movs	r3, #1
 8011f34:	465a      	mov	r2, fp
 8011f36:	4631      	mov	r1, r6
 8011f38:	4628      	mov	r0, r5
 8011f3a:	47b8      	blx	r7
 8011f3c:	3001      	adds	r0, #1
 8011f3e:	f43f aeae 	beq.w	8011c9e <_printf_float+0xb6>
 8011f42:	f108 0801 	add.w	r8, r8, #1
 8011f46:	e7ec      	b.n	8011f22 <_printf_float+0x33a>
 8011f48:	4642      	mov	r2, r8
 8011f4a:	4631      	mov	r1, r6
 8011f4c:	4628      	mov	r0, r5
 8011f4e:	47b8      	blx	r7
 8011f50:	3001      	adds	r0, #1
 8011f52:	d1c2      	bne.n	8011eda <_printf_float+0x2f2>
 8011f54:	e6a3      	b.n	8011c9e <_printf_float+0xb6>
 8011f56:	2301      	movs	r3, #1
 8011f58:	4631      	mov	r1, r6
 8011f5a:	4628      	mov	r0, r5
 8011f5c:	9206      	str	r2, [sp, #24]
 8011f5e:	47b8      	blx	r7
 8011f60:	3001      	adds	r0, #1
 8011f62:	f43f ae9c 	beq.w	8011c9e <_printf_float+0xb6>
 8011f66:	9a06      	ldr	r2, [sp, #24]
 8011f68:	f10b 0b01 	add.w	fp, fp, #1
 8011f6c:	e7bb      	b.n	8011ee6 <_printf_float+0x2fe>
 8011f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f72:	4631      	mov	r1, r6
 8011f74:	4628      	mov	r0, r5
 8011f76:	47b8      	blx	r7
 8011f78:	3001      	adds	r0, #1
 8011f7a:	d1c0      	bne.n	8011efe <_printf_float+0x316>
 8011f7c:	e68f      	b.n	8011c9e <_printf_float+0xb6>
 8011f7e:	9a06      	ldr	r2, [sp, #24]
 8011f80:	464b      	mov	r3, r9
 8011f82:	4442      	add	r2, r8
 8011f84:	4631      	mov	r1, r6
 8011f86:	4628      	mov	r0, r5
 8011f88:	47b8      	blx	r7
 8011f8a:	3001      	adds	r0, #1
 8011f8c:	d1c3      	bne.n	8011f16 <_printf_float+0x32e>
 8011f8e:	e686      	b.n	8011c9e <_printf_float+0xb6>
 8011f90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011f94:	f1ba 0f01 	cmp.w	sl, #1
 8011f98:	dc01      	bgt.n	8011f9e <_printf_float+0x3b6>
 8011f9a:	07db      	lsls	r3, r3, #31
 8011f9c:	d536      	bpl.n	801200c <_printf_float+0x424>
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	4642      	mov	r2, r8
 8011fa2:	4631      	mov	r1, r6
 8011fa4:	4628      	mov	r0, r5
 8011fa6:	47b8      	blx	r7
 8011fa8:	3001      	adds	r0, #1
 8011faa:	f43f ae78 	beq.w	8011c9e <_printf_float+0xb6>
 8011fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fb2:	4631      	mov	r1, r6
 8011fb4:	4628      	mov	r0, r5
 8011fb6:	47b8      	blx	r7
 8011fb8:	3001      	adds	r0, #1
 8011fba:	f43f ae70 	beq.w	8011c9e <_printf_float+0xb6>
 8011fbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011fca:	f7ee fdb5 	bl	8000b38 <__aeabi_dcmpeq>
 8011fce:	b9c0      	cbnz	r0, 8012002 <_printf_float+0x41a>
 8011fd0:	4653      	mov	r3, sl
 8011fd2:	f108 0201 	add.w	r2, r8, #1
 8011fd6:	4631      	mov	r1, r6
 8011fd8:	4628      	mov	r0, r5
 8011fda:	47b8      	blx	r7
 8011fdc:	3001      	adds	r0, #1
 8011fde:	d10c      	bne.n	8011ffa <_printf_float+0x412>
 8011fe0:	e65d      	b.n	8011c9e <_printf_float+0xb6>
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	465a      	mov	r2, fp
 8011fe6:	4631      	mov	r1, r6
 8011fe8:	4628      	mov	r0, r5
 8011fea:	47b8      	blx	r7
 8011fec:	3001      	adds	r0, #1
 8011fee:	f43f ae56 	beq.w	8011c9e <_printf_float+0xb6>
 8011ff2:	f108 0801 	add.w	r8, r8, #1
 8011ff6:	45d0      	cmp	r8, sl
 8011ff8:	dbf3      	blt.n	8011fe2 <_printf_float+0x3fa>
 8011ffa:	464b      	mov	r3, r9
 8011ffc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012000:	e6df      	b.n	8011dc2 <_printf_float+0x1da>
 8012002:	f04f 0800 	mov.w	r8, #0
 8012006:	f104 0b1a 	add.w	fp, r4, #26
 801200a:	e7f4      	b.n	8011ff6 <_printf_float+0x40e>
 801200c:	2301      	movs	r3, #1
 801200e:	4642      	mov	r2, r8
 8012010:	e7e1      	b.n	8011fd6 <_printf_float+0x3ee>
 8012012:	2301      	movs	r3, #1
 8012014:	464a      	mov	r2, r9
 8012016:	4631      	mov	r1, r6
 8012018:	4628      	mov	r0, r5
 801201a:	47b8      	blx	r7
 801201c:	3001      	adds	r0, #1
 801201e:	f43f ae3e 	beq.w	8011c9e <_printf_float+0xb6>
 8012022:	f108 0801 	add.w	r8, r8, #1
 8012026:	68e3      	ldr	r3, [r4, #12]
 8012028:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801202a:	1a5b      	subs	r3, r3, r1
 801202c:	4543      	cmp	r3, r8
 801202e:	dcf0      	bgt.n	8012012 <_printf_float+0x42a>
 8012030:	e6fc      	b.n	8011e2c <_printf_float+0x244>
 8012032:	f04f 0800 	mov.w	r8, #0
 8012036:	f104 0919 	add.w	r9, r4, #25
 801203a:	e7f4      	b.n	8012026 <_printf_float+0x43e>

0801203c <_printf_common>:
 801203c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012040:	4616      	mov	r6, r2
 8012042:	4698      	mov	r8, r3
 8012044:	688a      	ldr	r2, [r1, #8]
 8012046:	690b      	ldr	r3, [r1, #16]
 8012048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801204c:	4293      	cmp	r3, r2
 801204e:	bfb8      	it	lt
 8012050:	4613      	movlt	r3, r2
 8012052:	6033      	str	r3, [r6, #0]
 8012054:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012058:	4607      	mov	r7, r0
 801205a:	460c      	mov	r4, r1
 801205c:	b10a      	cbz	r2, 8012062 <_printf_common+0x26>
 801205e:	3301      	adds	r3, #1
 8012060:	6033      	str	r3, [r6, #0]
 8012062:	6823      	ldr	r3, [r4, #0]
 8012064:	0699      	lsls	r1, r3, #26
 8012066:	bf42      	ittt	mi
 8012068:	6833      	ldrmi	r3, [r6, #0]
 801206a:	3302      	addmi	r3, #2
 801206c:	6033      	strmi	r3, [r6, #0]
 801206e:	6825      	ldr	r5, [r4, #0]
 8012070:	f015 0506 	ands.w	r5, r5, #6
 8012074:	d106      	bne.n	8012084 <_printf_common+0x48>
 8012076:	f104 0a19 	add.w	sl, r4, #25
 801207a:	68e3      	ldr	r3, [r4, #12]
 801207c:	6832      	ldr	r2, [r6, #0]
 801207e:	1a9b      	subs	r3, r3, r2
 8012080:	42ab      	cmp	r3, r5
 8012082:	dc26      	bgt.n	80120d2 <_printf_common+0x96>
 8012084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012088:	6822      	ldr	r2, [r4, #0]
 801208a:	3b00      	subs	r3, #0
 801208c:	bf18      	it	ne
 801208e:	2301      	movne	r3, #1
 8012090:	0692      	lsls	r2, r2, #26
 8012092:	d42b      	bmi.n	80120ec <_printf_common+0xb0>
 8012094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012098:	4641      	mov	r1, r8
 801209a:	4638      	mov	r0, r7
 801209c:	47c8      	blx	r9
 801209e:	3001      	adds	r0, #1
 80120a0:	d01e      	beq.n	80120e0 <_printf_common+0xa4>
 80120a2:	6823      	ldr	r3, [r4, #0]
 80120a4:	6922      	ldr	r2, [r4, #16]
 80120a6:	f003 0306 	and.w	r3, r3, #6
 80120aa:	2b04      	cmp	r3, #4
 80120ac:	bf02      	ittt	eq
 80120ae:	68e5      	ldreq	r5, [r4, #12]
 80120b0:	6833      	ldreq	r3, [r6, #0]
 80120b2:	1aed      	subeq	r5, r5, r3
 80120b4:	68a3      	ldr	r3, [r4, #8]
 80120b6:	bf0c      	ite	eq
 80120b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80120bc:	2500      	movne	r5, #0
 80120be:	4293      	cmp	r3, r2
 80120c0:	bfc4      	itt	gt
 80120c2:	1a9b      	subgt	r3, r3, r2
 80120c4:	18ed      	addgt	r5, r5, r3
 80120c6:	2600      	movs	r6, #0
 80120c8:	341a      	adds	r4, #26
 80120ca:	42b5      	cmp	r5, r6
 80120cc:	d11a      	bne.n	8012104 <_printf_common+0xc8>
 80120ce:	2000      	movs	r0, #0
 80120d0:	e008      	b.n	80120e4 <_printf_common+0xa8>
 80120d2:	2301      	movs	r3, #1
 80120d4:	4652      	mov	r2, sl
 80120d6:	4641      	mov	r1, r8
 80120d8:	4638      	mov	r0, r7
 80120da:	47c8      	blx	r9
 80120dc:	3001      	adds	r0, #1
 80120de:	d103      	bne.n	80120e8 <_printf_common+0xac>
 80120e0:	f04f 30ff 	mov.w	r0, #4294967295
 80120e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120e8:	3501      	adds	r5, #1
 80120ea:	e7c6      	b.n	801207a <_printf_common+0x3e>
 80120ec:	18e1      	adds	r1, r4, r3
 80120ee:	1c5a      	adds	r2, r3, #1
 80120f0:	2030      	movs	r0, #48	@ 0x30
 80120f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80120f6:	4422      	add	r2, r4
 80120f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80120fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012100:	3302      	adds	r3, #2
 8012102:	e7c7      	b.n	8012094 <_printf_common+0x58>
 8012104:	2301      	movs	r3, #1
 8012106:	4622      	mov	r2, r4
 8012108:	4641      	mov	r1, r8
 801210a:	4638      	mov	r0, r7
 801210c:	47c8      	blx	r9
 801210e:	3001      	adds	r0, #1
 8012110:	d0e6      	beq.n	80120e0 <_printf_common+0xa4>
 8012112:	3601      	adds	r6, #1
 8012114:	e7d9      	b.n	80120ca <_printf_common+0x8e>
	...

08012118 <_printf_i>:
 8012118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801211c:	7e0f      	ldrb	r7, [r1, #24]
 801211e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012120:	2f78      	cmp	r7, #120	@ 0x78
 8012122:	4691      	mov	r9, r2
 8012124:	4680      	mov	r8, r0
 8012126:	460c      	mov	r4, r1
 8012128:	469a      	mov	sl, r3
 801212a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801212e:	d807      	bhi.n	8012140 <_printf_i+0x28>
 8012130:	2f62      	cmp	r7, #98	@ 0x62
 8012132:	d80a      	bhi.n	801214a <_printf_i+0x32>
 8012134:	2f00      	cmp	r7, #0
 8012136:	f000 80d1 	beq.w	80122dc <_printf_i+0x1c4>
 801213a:	2f58      	cmp	r7, #88	@ 0x58
 801213c:	f000 80b8 	beq.w	80122b0 <_printf_i+0x198>
 8012140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012148:	e03a      	b.n	80121c0 <_printf_i+0xa8>
 801214a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801214e:	2b15      	cmp	r3, #21
 8012150:	d8f6      	bhi.n	8012140 <_printf_i+0x28>
 8012152:	a101      	add	r1, pc, #4	@ (adr r1, 8012158 <_printf_i+0x40>)
 8012154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012158:	080121b1 	.word	0x080121b1
 801215c:	080121c5 	.word	0x080121c5
 8012160:	08012141 	.word	0x08012141
 8012164:	08012141 	.word	0x08012141
 8012168:	08012141 	.word	0x08012141
 801216c:	08012141 	.word	0x08012141
 8012170:	080121c5 	.word	0x080121c5
 8012174:	08012141 	.word	0x08012141
 8012178:	08012141 	.word	0x08012141
 801217c:	08012141 	.word	0x08012141
 8012180:	08012141 	.word	0x08012141
 8012184:	080122c3 	.word	0x080122c3
 8012188:	080121ef 	.word	0x080121ef
 801218c:	0801227d 	.word	0x0801227d
 8012190:	08012141 	.word	0x08012141
 8012194:	08012141 	.word	0x08012141
 8012198:	080122e5 	.word	0x080122e5
 801219c:	08012141 	.word	0x08012141
 80121a0:	080121ef 	.word	0x080121ef
 80121a4:	08012141 	.word	0x08012141
 80121a8:	08012141 	.word	0x08012141
 80121ac:	08012285 	.word	0x08012285
 80121b0:	6833      	ldr	r3, [r6, #0]
 80121b2:	1d1a      	adds	r2, r3, #4
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	6032      	str	r2, [r6, #0]
 80121b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80121bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80121c0:	2301      	movs	r3, #1
 80121c2:	e09c      	b.n	80122fe <_printf_i+0x1e6>
 80121c4:	6833      	ldr	r3, [r6, #0]
 80121c6:	6820      	ldr	r0, [r4, #0]
 80121c8:	1d19      	adds	r1, r3, #4
 80121ca:	6031      	str	r1, [r6, #0]
 80121cc:	0606      	lsls	r6, r0, #24
 80121ce:	d501      	bpl.n	80121d4 <_printf_i+0xbc>
 80121d0:	681d      	ldr	r5, [r3, #0]
 80121d2:	e003      	b.n	80121dc <_printf_i+0xc4>
 80121d4:	0645      	lsls	r5, r0, #25
 80121d6:	d5fb      	bpl.n	80121d0 <_printf_i+0xb8>
 80121d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80121dc:	2d00      	cmp	r5, #0
 80121de:	da03      	bge.n	80121e8 <_printf_i+0xd0>
 80121e0:	232d      	movs	r3, #45	@ 0x2d
 80121e2:	426d      	negs	r5, r5
 80121e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80121e8:	4858      	ldr	r0, [pc, #352]	@ (801234c <_printf_i+0x234>)
 80121ea:	230a      	movs	r3, #10
 80121ec:	e011      	b.n	8012212 <_printf_i+0xfa>
 80121ee:	6821      	ldr	r1, [r4, #0]
 80121f0:	6833      	ldr	r3, [r6, #0]
 80121f2:	0608      	lsls	r0, r1, #24
 80121f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80121f8:	d402      	bmi.n	8012200 <_printf_i+0xe8>
 80121fa:	0649      	lsls	r1, r1, #25
 80121fc:	bf48      	it	mi
 80121fe:	b2ad      	uxthmi	r5, r5
 8012200:	2f6f      	cmp	r7, #111	@ 0x6f
 8012202:	4852      	ldr	r0, [pc, #328]	@ (801234c <_printf_i+0x234>)
 8012204:	6033      	str	r3, [r6, #0]
 8012206:	bf14      	ite	ne
 8012208:	230a      	movne	r3, #10
 801220a:	2308      	moveq	r3, #8
 801220c:	2100      	movs	r1, #0
 801220e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012212:	6866      	ldr	r6, [r4, #4]
 8012214:	60a6      	str	r6, [r4, #8]
 8012216:	2e00      	cmp	r6, #0
 8012218:	db05      	blt.n	8012226 <_printf_i+0x10e>
 801221a:	6821      	ldr	r1, [r4, #0]
 801221c:	432e      	orrs	r6, r5
 801221e:	f021 0104 	bic.w	r1, r1, #4
 8012222:	6021      	str	r1, [r4, #0]
 8012224:	d04b      	beq.n	80122be <_printf_i+0x1a6>
 8012226:	4616      	mov	r6, r2
 8012228:	fbb5 f1f3 	udiv	r1, r5, r3
 801222c:	fb03 5711 	mls	r7, r3, r1, r5
 8012230:	5dc7      	ldrb	r7, [r0, r7]
 8012232:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012236:	462f      	mov	r7, r5
 8012238:	42bb      	cmp	r3, r7
 801223a:	460d      	mov	r5, r1
 801223c:	d9f4      	bls.n	8012228 <_printf_i+0x110>
 801223e:	2b08      	cmp	r3, #8
 8012240:	d10b      	bne.n	801225a <_printf_i+0x142>
 8012242:	6823      	ldr	r3, [r4, #0]
 8012244:	07df      	lsls	r7, r3, #31
 8012246:	d508      	bpl.n	801225a <_printf_i+0x142>
 8012248:	6923      	ldr	r3, [r4, #16]
 801224a:	6861      	ldr	r1, [r4, #4]
 801224c:	4299      	cmp	r1, r3
 801224e:	bfde      	ittt	le
 8012250:	2330      	movle	r3, #48	@ 0x30
 8012252:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012256:	f106 36ff 	addle.w	r6, r6, #4294967295
 801225a:	1b92      	subs	r2, r2, r6
 801225c:	6122      	str	r2, [r4, #16]
 801225e:	f8cd a000 	str.w	sl, [sp]
 8012262:	464b      	mov	r3, r9
 8012264:	aa03      	add	r2, sp, #12
 8012266:	4621      	mov	r1, r4
 8012268:	4640      	mov	r0, r8
 801226a:	f7ff fee7 	bl	801203c <_printf_common>
 801226e:	3001      	adds	r0, #1
 8012270:	d14a      	bne.n	8012308 <_printf_i+0x1f0>
 8012272:	f04f 30ff 	mov.w	r0, #4294967295
 8012276:	b004      	add	sp, #16
 8012278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801227c:	6823      	ldr	r3, [r4, #0]
 801227e:	f043 0320 	orr.w	r3, r3, #32
 8012282:	6023      	str	r3, [r4, #0]
 8012284:	4832      	ldr	r0, [pc, #200]	@ (8012350 <_printf_i+0x238>)
 8012286:	2778      	movs	r7, #120	@ 0x78
 8012288:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801228c:	6823      	ldr	r3, [r4, #0]
 801228e:	6831      	ldr	r1, [r6, #0]
 8012290:	061f      	lsls	r7, r3, #24
 8012292:	f851 5b04 	ldr.w	r5, [r1], #4
 8012296:	d402      	bmi.n	801229e <_printf_i+0x186>
 8012298:	065f      	lsls	r7, r3, #25
 801229a:	bf48      	it	mi
 801229c:	b2ad      	uxthmi	r5, r5
 801229e:	6031      	str	r1, [r6, #0]
 80122a0:	07d9      	lsls	r1, r3, #31
 80122a2:	bf44      	itt	mi
 80122a4:	f043 0320 	orrmi.w	r3, r3, #32
 80122a8:	6023      	strmi	r3, [r4, #0]
 80122aa:	b11d      	cbz	r5, 80122b4 <_printf_i+0x19c>
 80122ac:	2310      	movs	r3, #16
 80122ae:	e7ad      	b.n	801220c <_printf_i+0xf4>
 80122b0:	4826      	ldr	r0, [pc, #152]	@ (801234c <_printf_i+0x234>)
 80122b2:	e7e9      	b.n	8012288 <_printf_i+0x170>
 80122b4:	6823      	ldr	r3, [r4, #0]
 80122b6:	f023 0320 	bic.w	r3, r3, #32
 80122ba:	6023      	str	r3, [r4, #0]
 80122bc:	e7f6      	b.n	80122ac <_printf_i+0x194>
 80122be:	4616      	mov	r6, r2
 80122c0:	e7bd      	b.n	801223e <_printf_i+0x126>
 80122c2:	6833      	ldr	r3, [r6, #0]
 80122c4:	6825      	ldr	r5, [r4, #0]
 80122c6:	6961      	ldr	r1, [r4, #20]
 80122c8:	1d18      	adds	r0, r3, #4
 80122ca:	6030      	str	r0, [r6, #0]
 80122cc:	062e      	lsls	r6, r5, #24
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	d501      	bpl.n	80122d6 <_printf_i+0x1be>
 80122d2:	6019      	str	r1, [r3, #0]
 80122d4:	e002      	b.n	80122dc <_printf_i+0x1c4>
 80122d6:	0668      	lsls	r0, r5, #25
 80122d8:	d5fb      	bpl.n	80122d2 <_printf_i+0x1ba>
 80122da:	8019      	strh	r1, [r3, #0]
 80122dc:	2300      	movs	r3, #0
 80122de:	6123      	str	r3, [r4, #16]
 80122e0:	4616      	mov	r6, r2
 80122e2:	e7bc      	b.n	801225e <_printf_i+0x146>
 80122e4:	6833      	ldr	r3, [r6, #0]
 80122e6:	1d1a      	adds	r2, r3, #4
 80122e8:	6032      	str	r2, [r6, #0]
 80122ea:	681e      	ldr	r6, [r3, #0]
 80122ec:	6862      	ldr	r2, [r4, #4]
 80122ee:	2100      	movs	r1, #0
 80122f0:	4630      	mov	r0, r6
 80122f2:	f7ed ffa5 	bl	8000240 <memchr>
 80122f6:	b108      	cbz	r0, 80122fc <_printf_i+0x1e4>
 80122f8:	1b80      	subs	r0, r0, r6
 80122fa:	6060      	str	r0, [r4, #4]
 80122fc:	6863      	ldr	r3, [r4, #4]
 80122fe:	6123      	str	r3, [r4, #16]
 8012300:	2300      	movs	r3, #0
 8012302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012306:	e7aa      	b.n	801225e <_printf_i+0x146>
 8012308:	6923      	ldr	r3, [r4, #16]
 801230a:	4632      	mov	r2, r6
 801230c:	4649      	mov	r1, r9
 801230e:	4640      	mov	r0, r8
 8012310:	47d0      	blx	sl
 8012312:	3001      	adds	r0, #1
 8012314:	d0ad      	beq.n	8012272 <_printf_i+0x15a>
 8012316:	6823      	ldr	r3, [r4, #0]
 8012318:	079b      	lsls	r3, r3, #30
 801231a:	d413      	bmi.n	8012344 <_printf_i+0x22c>
 801231c:	68e0      	ldr	r0, [r4, #12]
 801231e:	9b03      	ldr	r3, [sp, #12]
 8012320:	4298      	cmp	r0, r3
 8012322:	bfb8      	it	lt
 8012324:	4618      	movlt	r0, r3
 8012326:	e7a6      	b.n	8012276 <_printf_i+0x15e>
 8012328:	2301      	movs	r3, #1
 801232a:	4632      	mov	r2, r6
 801232c:	4649      	mov	r1, r9
 801232e:	4640      	mov	r0, r8
 8012330:	47d0      	blx	sl
 8012332:	3001      	adds	r0, #1
 8012334:	d09d      	beq.n	8012272 <_printf_i+0x15a>
 8012336:	3501      	adds	r5, #1
 8012338:	68e3      	ldr	r3, [r4, #12]
 801233a:	9903      	ldr	r1, [sp, #12]
 801233c:	1a5b      	subs	r3, r3, r1
 801233e:	42ab      	cmp	r3, r5
 8012340:	dcf2      	bgt.n	8012328 <_printf_i+0x210>
 8012342:	e7eb      	b.n	801231c <_printf_i+0x204>
 8012344:	2500      	movs	r5, #0
 8012346:	f104 0619 	add.w	r6, r4, #25
 801234a:	e7f5      	b.n	8012338 <_printf_i+0x220>
 801234c:	08017584 	.word	0x08017584
 8012350:	08017595 	.word	0x08017595

08012354 <std>:
 8012354:	2300      	movs	r3, #0
 8012356:	b510      	push	{r4, lr}
 8012358:	4604      	mov	r4, r0
 801235a:	e9c0 3300 	strd	r3, r3, [r0]
 801235e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012362:	6083      	str	r3, [r0, #8]
 8012364:	8181      	strh	r1, [r0, #12]
 8012366:	6643      	str	r3, [r0, #100]	@ 0x64
 8012368:	81c2      	strh	r2, [r0, #14]
 801236a:	6183      	str	r3, [r0, #24]
 801236c:	4619      	mov	r1, r3
 801236e:	2208      	movs	r2, #8
 8012370:	305c      	adds	r0, #92	@ 0x5c
 8012372:	f000 f916 	bl	80125a2 <memset>
 8012376:	4b0d      	ldr	r3, [pc, #52]	@ (80123ac <std+0x58>)
 8012378:	6263      	str	r3, [r4, #36]	@ 0x24
 801237a:	4b0d      	ldr	r3, [pc, #52]	@ (80123b0 <std+0x5c>)
 801237c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801237e:	4b0d      	ldr	r3, [pc, #52]	@ (80123b4 <std+0x60>)
 8012380:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012382:	4b0d      	ldr	r3, [pc, #52]	@ (80123b8 <std+0x64>)
 8012384:	6323      	str	r3, [r4, #48]	@ 0x30
 8012386:	4b0d      	ldr	r3, [pc, #52]	@ (80123bc <std+0x68>)
 8012388:	6224      	str	r4, [r4, #32]
 801238a:	429c      	cmp	r4, r3
 801238c:	d006      	beq.n	801239c <std+0x48>
 801238e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012392:	4294      	cmp	r4, r2
 8012394:	d002      	beq.n	801239c <std+0x48>
 8012396:	33d0      	adds	r3, #208	@ 0xd0
 8012398:	429c      	cmp	r4, r3
 801239a:	d105      	bne.n	80123a8 <std+0x54>
 801239c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80123a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123a4:	f000 b9e8 	b.w	8012778 <__retarget_lock_init_recursive>
 80123a8:	bd10      	pop	{r4, pc}
 80123aa:	bf00      	nop
 80123ac:	0801251d 	.word	0x0801251d
 80123b0:	0801253f 	.word	0x0801253f
 80123b4:	08012577 	.word	0x08012577
 80123b8:	0801259b 	.word	0x0801259b
 80123bc:	20006bfc 	.word	0x20006bfc

080123c0 <stdio_exit_handler>:
 80123c0:	4a02      	ldr	r2, [pc, #8]	@ (80123cc <stdio_exit_handler+0xc>)
 80123c2:	4903      	ldr	r1, [pc, #12]	@ (80123d0 <stdio_exit_handler+0x10>)
 80123c4:	4803      	ldr	r0, [pc, #12]	@ (80123d4 <stdio_exit_handler+0x14>)
 80123c6:	f000 b869 	b.w	801249c <_fwalk_sglue>
 80123ca:	bf00      	nop
 80123cc:	20000028 	.word	0x20000028
 80123d0:	08014a5d 	.word	0x08014a5d
 80123d4:	200001a4 	.word	0x200001a4

080123d8 <cleanup_stdio>:
 80123d8:	6841      	ldr	r1, [r0, #4]
 80123da:	4b0c      	ldr	r3, [pc, #48]	@ (801240c <cleanup_stdio+0x34>)
 80123dc:	4299      	cmp	r1, r3
 80123de:	b510      	push	{r4, lr}
 80123e0:	4604      	mov	r4, r0
 80123e2:	d001      	beq.n	80123e8 <cleanup_stdio+0x10>
 80123e4:	f002 fb3a 	bl	8014a5c <_fflush_r>
 80123e8:	68a1      	ldr	r1, [r4, #8]
 80123ea:	4b09      	ldr	r3, [pc, #36]	@ (8012410 <cleanup_stdio+0x38>)
 80123ec:	4299      	cmp	r1, r3
 80123ee:	d002      	beq.n	80123f6 <cleanup_stdio+0x1e>
 80123f0:	4620      	mov	r0, r4
 80123f2:	f002 fb33 	bl	8014a5c <_fflush_r>
 80123f6:	68e1      	ldr	r1, [r4, #12]
 80123f8:	4b06      	ldr	r3, [pc, #24]	@ (8012414 <cleanup_stdio+0x3c>)
 80123fa:	4299      	cmp	r1, r3
 80123fc:	d004      	beq.n	8012408 <cleanup_stdio+0x30>
 80123fe:	4620      	mov	r0, r4
 8012400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012404:	f002 bb2a 	b.w	8014a5c <_fflush_r>
 8012408:	bd10      	pop	{r4, pc}
 801240a:	bf00      	nop
 801240c:	20006bfc 	.word	0x20006bfc
 8012410:	20006c64 	.word	0x20006c64
 8012414:	20006ccc 	.word	0x20006ccc

08012418 <global_stdio_init.part.0>:
 8012418:	b510      	push	{r4, lr}
 801241a:	4b0b      	ldr	r3, [pc, #44]	@ (8012448 <global_stdio_init.part.0+0x30>)
 801241c:	4c0b      	ldr	r4, [pc, #44]	@ (801244c <global_stdio_init.part.0+0x34>)
 801241e:	4a0c      	ldr	r2, [pc, #48]	@ (8012450 <global_stdio_init.part.0+0x38>)
 8012420:	601a      	str	r2, [r3, #0]
 8012422:	4620      	mov	r0, r4
 8012424:	2200      	movs	r2, #0
 8012426:	2104      	movs	r1, #4
 8012428:	f7ff ff94 	bl	8012354 <std>
 801242c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012430:	2201      	movs	r2, #1
 8012432:	2109      	movs	r1, #9
 8012434:	f7ff ff8e 	bl	8012354 <std>
 8012438:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801243c:	2202      	movs	r2, #2
 801243e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012442:	2112      	movs	r1, #18
 8012444:	f7ff bf86 	b.w	8012354 <std>
 8012448:	20006d34 	.word	0x20006d34
 801244c:	20006bfc 	.word	0x20006bfc
 8012450:	080123c1 	.word	0x080123c1

08012454 <__sfp_lock_acquire>:
 8012454:	4801      	ldr	r0, [pc, #4]	@ (801245c <__sfp_lock_acquire+0x8>)
 8012456:	f000 b990 	b.w	801277a <__retarget_lock_acquire_recursive>
 801245a:	bf00      	nop
 801245c:	20006d3d 	.word	0x20006d3d

08012460 <__sfp_lock_release>:
 8012460:	4801      	ldr	r0, [pc, #4]	@ (8012468 <__sfp_lock_release+0x8>)
 8012462:	f000 b98b 	b.w	801277c <__retarget_lock_release_recursive>
 8012466:	bf00      	nop
 8012468:	20006d3d 	.word	0x20006d3d

0801246c <__sinit>:
 801246c:	b510      	push	{r4, lr}
 801246e:	4604      	mov	r4, r0
 8012470:	f7ff fff0 	bl	8012454 <__sfp_lock_acquire>
 8012474:	6a23      	ldr	r3, [r4, #32]
 8012476:	b11b      	cbz	r3, 8012480 <__sinit+0x14>
 8012478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801247c:	f7ff bff0 	b.w	8012460 <__sfp_lock_release>
 8012480:	4b04      	ldr	r3, [pc, #16]	@ (8012494 <__sinit+0x28>)
 8012482:	6223      	str	r3, [r4, #32]
 8012484:	4b04      	ldr	r3, [pc, #16]	@ (8012498 <__sinit+0x2c>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d1f5      	bne.n	8012478 <__sinit+0xc>
 801248c:	f7ff ffc4 	bl	8012418 <global_stdio_init.part.0>
 8012490:	e7f2      	b.n	8012478 <__sinit+0xc>
 8012492:	bf00      	nop
 8012494:	080123d9 	.word	0x080123d9
 8012498:	20006d34 	.word	0x20006d34

0801249c <_fwalk_sglue>:
 801249c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124a0:	4607      	mov	r7, r0
 80124a2:	4688      	mov	r8, r1
 80124a4:	4614      	mov	r4, r2
 80124a6:	2600      	movs	r6, #0
 80124a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80124ac:	f1b9 0901 	subs.w	r9, r9, #1
 80124b0:	d505      	bpl.n	80124be <_fwalk_sglue+0x22>
 80124b2:	6824      	ldr	r4, [r4, #0]
 80124b4:	2c00      	cmp	r4, #0
 80124b6:	d1f7      	bne.n	80124a8 <_fwalk_sglue+0xc>
 80124b8:	4630      	mov	r0, r6
 80124ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124be:	89ab      	ldrh	r3, [r5, #12]
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	d907      	bls.n	80124d4 <_fwalk_sglue+0x38>
 80124c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124c8:	3301      	adds	r3, #1
 80124ca:	d003      	beq.n	80124d4 <_fwalk_sglue+0x38>
 80124cc:	4629      	mov	r1, r5
 80124ce:	4638      	mov	r0, r7
 80124d0:	47c0      	blx	r8
 80124d2:	4306      	orrs	r6, r0
 80124d4:	3568      	adds	r5, #104	@ 0x68
 80124d6:	e7e9      	b.n	80124ac <_fwalk_sglue+0x10>

080124d8 <siprintf>:
 80124d8:	b40e      	push	{r1, r2, r3}
 80124da:	b510      	push	{r4, lr}
 80124dc:	b09d      	sub	sp, #116	@ 0x74
 80124de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80124e0:	9002      	str	r0, [sp, #8]
 80124e2:	9006      	str	r0, [sp, #24]
 80124e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80124e8:	480a      	ldr	r0, [pc, #40]	@ (8012514 <siprintf+0x3c>)
 80124ea:	9107      	str	r1, [sp, #28]
 80124ec:	9104      	str	r1, [sp, #16]
 80124ee:	490a      	ldr	r1, [pc, #40]	@ (8012518 <siprintf+0x40>)
 80124f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80124f4:	9105      	str	r1, [sp, #20]
 80124f6:	2400      	movs	r4, #0
 80124f8:	a902      	add	r1, sp, #8
 80124fa:	6800      	ldr	r0, [r0, #0]
 80124fc:	9301      	str	r3, [sp, #4]
 80124fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012500:	f002 f92c 	bl	801475c <_svfiprintf_r>
 8012504:	9b02      	ldr	r3, [sp, #8]
 8012506:	701c      	strb	r4, [r3, #0]
 8012508:	b01d      	add	sp, #116	@ 0x74
 801250a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801250e:	b003      	add	sp, #12
 8012510:	4770      	bx	lr
 8012512:	bf00      	nop
 8012514:	200001a0 	.word	0x200001a0
 8012518:	ffff0208 	.word	0xffff0208

0801251c <__sread>:
 801251c:	b510      	push	{r4, lr}
 801251e:	460c      	mov	r4, r1
 8012520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012524:	f000 f8da 	bl	80126dc <_read_r>
 8012528:	2800      	cmp	r0, #0
 801252a:	bfab      	itete	ge
 801252c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801252e:	89a3      	ldrhlt	r3, [r4, #12]
 8012530:	181b      	addge	r3, r3, r0
 8012532:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012536:	bfac      	ite	ge
 8012538:	6563      	strge	r3, [r4, #84]	@ 0x54
 801253a:	81a3      	strhlt	r3, [r4, #12]
 801253c:	bd10      	pop	{r4, pc}

0801253e <__swrite>:
 801253e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012542:	461f      	mov	r7, r3
 8012544:	898b      	ldrh	r3, [r1, #12]
 8012546:	05db      	lsls	r3, r3, #23
 8012548:	4605      	mov	r5, r0
 801254a:	460c      	mov	r4, r1
 801254c:	4616      	mov	r6, r2
 801254e:	d505      	bpl.n	801255c <__swrite+0x1e>
 8012550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012554:	2302      	movs	r3, #2
 8012556:	2200      	movs	r2, #0
 8012558:	f000 f8ae 	bl	80126b8 <_lseek_r>
 801255c:	89a3      	ldrh	r3, [r4, #12]
 801255e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012566:	81a3      	strh	r3, [r4, #12]
 8012568:	4632      	mov	r2, r6
 801256a:	463b      	mov	r3, r7
 801256c:	4628      	mov	r0, r5
 801256e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012572:	f000 b8c5 	b.w	8012700 <_write_r>

08012576 <__sseek>:
 8012576:	b510      	push	{r4, lr}
 8012578:	460c      	mov	r4, r1
 801257a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801257e:	f000 f89b 	bl	80126b8 <_lseek_r>
 8012582:	1c43      	adds	r3, r0, #1
 8012584:	89a3      	ldrh	r3, [r4, #12]
 8012586:	bf15      	itete	ne
 8012588:	6560      	strne	r0, [r4, #84]	@ 0x54
 801258a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801258e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012592:	81a3      	strheq	r3, [r4, #12]
 8012594:	bf18      	it	ne
 8012596:	81a3      	strhne	r3, [r4, #12]
 8012598:	bd10      	pop	{r4, pc}

0801259a <__sclose>:
 801259a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801259e:	f000 b87b 	b.w	8012698 <_close_r>

080125a2 <memset>:
 80125a2:	4402      	add	r2, r0
 80125a4:	4603      	mov	r3, r0
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d100      	bne.n	80125ac <memset+0xa>
 80125aa:	4770      	bx	lr
 80125ac:	f803 1b01 	strb.w	r1, [r3], #1
 80125b0:	e7f9      	b.n	80125a6 <memset+0x4>

080125b2 <strncmp>:
 80125b2:	b510      	push	{r4, lr}
 80125b4:	b16a      	cbz	r2, 80125d2 <strncmp+0x20>
 80125b6:	3901      	subs	r1, #1
 80125b8:	1884      	adds	r4, r0, r2
 80125ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d103      	bne.n	80125ce <strncmp+0x1c>
 80125c6:	42a0      	cmp	r0, r4
 80125c8:	d001      	beq.n	80125ce <strncmp+0x1c>
 80125ca:	2a00      	cmp	r2, #0
 80125cc:	d1f5      	bne.n	80125ba <strncmp+0x8>
 80125ce:	1ad0      	subs	r0, r2, r3
 80125d0:	bd10      	pop	{r4, pc}
 80125d2:	4610      	mov	r0, r2
 80125d4:	e7fc      	b.n	80125d0 <strncmp+0x1e>
	...

080125d8 <strtok>:
 80125d8:	4b16      	ldr	r3, [pc, #88]	@ (8012634 <strtok+0x5c>)
 80125da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125de:	681f      	ldr	r7, [r3, #0]
 80125e0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80125e2:	4605      	mov	r5, r0
 80125e4:	460e      	mov	r6, r1
 80125e6:	b9ec      	cbnz	r4, 8012624 <strtok+0x4c>
 80125e8:	2050      	movs	r0, #80	@ 0x50
 80125ea:	f001 fadd 	bl	8013ba8 <malloc>
 80125ee:	4602      	mov	r2, r0
 80125f0:	6478      	str	r0, [r7, #68]	@ 0x44
 80125f2:	b920      	cbnz	r0, 80125fe <strtok+0x26>
 80125f4:	4b10      	ldr	r3, [pc, #64]	@ (8012638 <strtok+0x60>)
 80125f6:	4811      	ldr	r0, [pc, #68]	@ (801263c <strtok+0x64>)
 80125f8:	215b      	movs	r1, #91	@ 0x5b
 80125fa:	f000 f8d9 	bl	80127b0 <__assert_func>
 80125fe:	e9c0 4400 	strd	r4, r4, [r0]
 8012602:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012606:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801260a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801260e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8012612:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8012616:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801261a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801261e:	6184      	str	r4, [r0, #24]
 8012620:	7704      	strb	r4, [r0, #28]
 8012622:	6244      	str	r4, [r0, #36]	@ 0x24
 8012624:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012626:	4631      	mov	r1, r6
 8012628:	4628      	mov	r0, r5
 801262a:	2301      	movs	r3, #1
 801262c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012630:	f000 b806 	b.w	8012640 <__strtok_r>
 8012634:	200001a0 	.word	0x200001a0
 8012638:	080175a6 	.word	0x080175a6
 801263c:	080175bd 	.word	0x080175bd

08012640 <__strtok_r>:
 8012640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012642:	4604      	mov	r4, r0
 8012644:	b908      	cbnz	r0, 801264a <__strtok_r+0xa>
 8012646:	6814      	ldr	r4, [r2, #0]
 8012648:	b144      	cbz	r4, 801265c <__strtok_r+0x1c>
 801264a:	4620      	mov	r0, r4
 801264c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012650:	460f      	mov	r7, r1
 8012652:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012656:	b91e      	cbnz	r6, 8012660 <__strtok_r+0x20>
 8012658:	b965      	cbnz	r5, 8012674 <__strtok_r+0x34>
 801265a:	6015      	str	r5, [r2, #0]
 801265c:	2000      	movs	r0, #0
 801265e:	e005      	b.n	801266c <__strtok_r+0x2c>
 8012660:	42b5      	cmp	r5, r6
 8012662:	d1f6      	bne.n	8012652 <__strtok_r+0x12>
 8012664:	2b00      	cmp	r3, #0
 8012666:	d1f0      	bne.n	801264a <__strtok_r+0xa>
 8012668:	6014      	str	r4, [r2, #0]
 801266a:	7003      	strb	r3, [r0, #0]
 801266c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801266e:	461c      	mov	r4, r3
 8012670:	e00c      	b.n	801268c <__strtok_r+0x4c>
 8012672:	b91d      	cbnz	r5, 801267c <__strtok_r+0x3c>
 8012674:	4627      	mov	r7, r4
 8012676:	f814 3b01 	ldrb.w	r3, [r4], #1
 801267a:	460e      	mov	r6, r1
 801267c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012680:	42ab      	cmp	r3, r5
 8012682:	d1f6      	bne.n	8012672 <__strtok_r+0x32>
 8012684:	2b00      	cmp	r3, #0
 8012686:	d0f2      	beq.n	801266e <__strtok_r+0x2e>
 8012688:	2300      	movs	r3, #0
 801268a:	703b      	strb	r3, [r7, #0]
 801268c:	6014      	str	r4, [r2, #0]
 801268e:	e7ed      	b.n	801266c <__strtok_r+0x2c>

08012690 <_localeconv_r>:
 8012690:	4800      	ldr	r0, [pc, #0]	@ (8012694 <_localeconv_r+0x4>)
 8012692:	4770      	bx	lr
 8012694:	20000124 	.word	0x20000124

08012698 <_close_r>:
 8012698:	b538      	push	{r3, r4, r5, lr}
 801269a:	4d06      	ldr	r5, [pc, #24]	@ (80126b4 <_close_r+0x1c>)
 801269c:	2300      	movs	r3, #0
 801269e:	4604      	mov	r4, r0
 80126a0:	4608      	mov	r0, r1
 80126a2:	602b      	str	r3, [r5, #0]
 80126a4:	f7f2 fa98 	bl	8004bd8 <_close>
 80126a8:	1c43      	adds	r3, r0, #1
 80126aa:	d102      	bne.n	80126b2 <_close_r+0x1a>
 80126ac:	682b      	ldr	r3, [r5, #0]
 80126ae:	b103      	cbz	r3, 80126b2 <_close_r+0x1a>
 80126b0:	6023      	str	r3, [r4, #0]
 80126b2:	bd38      	pop	{r3, r4, r5, pc}
 80126b4:	20006d38 	.word	0x20006d38

080126b8 <_lseek_r>:
 80126b8:	b538      	push	{r3, r4, r5, lr}
 80126ba:	4d07      	ldr	r5, [pc, #28]	@ (80126d8 <_lseek_r+0x20>)
 80126bc:	4604      	mov	r4, r0
 80126be:	4608      	mov	r0, r1
 80126c0:	4611      	mov	r1, r2
 80126c2:	2200      	movs	r2, #0
 80126c4:	602a      	str	r2, [r5, #0]
 80126c6:	461a      	mov	r2, r3
 80126c8:	f7f2 faad 	bl	8004c26 <_lseek>
 80126cc:	1c43      	adds	r3, r0, #1
 80126ce:	d102      	bne.n	80126d6 <_lseek_r+0x1e>
 80126d0:	682b      	ldr	r3, [r5, #0]
 80126d2:	b103      	cbz	r3, 80126d6 <_lseek_r+0x1e>
 80126d4:	6023      	str	r3, [r4, #0]
 80126d6:	bd38      	pop	{r3, r4, r5, pc}
 80126d8:	20006d38 	.word	0x20006d38

080126dc <_read_r>:
 80126dc:	b538      	push	{r3, r4, r5, lr}
 80126de:	4d07      	ldr	r5, [pc, #28]	@ (80126fc <_read_r+0x20>)
 80126e0:	4604      	mov	r4, r0
 80126e2:	4608      	mov	r0, r1
 80126e4:	4611      	mov	r1, r2
 80126e6:	2200      	movs	r2, #0
 80126e8:	602a      	str	r2, [r5, #0]
 80126ea:	461a      	mov	r2, r3
 80126ec:	f7f2 fa3b 	bl	8004b66 <_read>
 80126f0:	1c43      	adds	r3, r0, #1
 80126f2:	d102      	bne.n	80126fa <_read_r+0x1e>
 80126f4:	682b      	ldr	r3, [r5, #0]
 80126f6:	b103      	cbz	r3, 80126fa <_read_r+0x1e>
 80126f8:	6023      	str	r3, [r4, #0]
 80126fa:	bd38      	pop	{r3, r4, r5, pc}
 80126fc:	20006d38 	.word	0x20006d38

08012700 <_write_r>:
 8012700:	b538      	push	{r3, r4, r5, lr}
 8012702:	4d07      	ldr	r5, [pc, #28]	@ (8012720 <_write_r+0x20>)
 8012704:	4604      	mov	r4, r0
 8012706:	4608      	mov	r0, r1
 8012708:	4611      	mov	r1, r2
 801270a:	2200      	movs	r2, #0
 801270c:	602a      	str	r2, [r5, #0]
 801270e:	461a      	mov	r2, r3
 8012710:	f7f2 fa46 	bl	8004ba0 <_write>
 8012714:	1c43      	adds	r3, r0, #1
 8012716:	d102      	bne.n	801271e <_write_r+0x1e>
 8012718:	682b      	ldr	r3, [r5, #0]
 801271a:	b103      	cbz	r3, 801271e <_write_r+0x1e>
 801271c:	6023      	str	r3, [r4, #0]
 801271e:	bd38      	pop	{r3, r4, r5, pc}
 8012720:	20006d38 	.word	0x20006d38

08012724 <__errno>:
 8012724:	4b01      	ldr	r3, [pc, #4]	@ (801272c <__errno+0x8>)
 8012726:	6818      	ldr	r0, [r3, #0]
 8012728:	4770      	bx	lr
 801272a:	bf00      	nop
 801272c:	200001a0 	.word	0x200001a0

08012730 <__libc_init_array>:
 8012730:	b570      	push	{r4, r5, r6, lr}
 8012732:	4d0d      	ldr	r5, [pc, #52]	@ (8012768 <__libc_init_array+0x38>)
 8012734:	4c0d      	ldr	r4, [pc, #52]	@ (801276c <__libc_init_array+0x3c>)
 8012736:	1b64      	subs	r4, r4, r5
 8012738:	10a4      	asrs	r4, r4, #2
 801273a:	2600      	movs	r6, #0
 801273c:	42a6      	cmp	r6, r4
 801273e:	d109      	bne.n	8012754 <__libc_init_array+0x24>
 8012740:	4d0b      	ldr	r5, [pc, #44]	@ (8012770 <__libc_init_array+0x40>)
 8012742:	4c0c      	ldr	r4, [pc, #48]	@ (8012774 <__libc_init_array+0x44>)
 8012744:	f004 fdd6 	bl	80172f4 <_init>
 8012748:	1b64      	subs	r4, r4, r5
 801274a:	10a4      	asrs	r4, r4, #2
 801274c:	2600      	movs	r6, #0
 801274e:	42a6      	cmp	r6, r4
 8012750:	d105      	bne.n	801275e <__libc_init_array+0x2e>
 8012752:	bd70      	pop	{r4, r5, r6, pc}
 8012754:	f855 3b04 	ldr.w	r3, [r5], #4
 8012758:	4798      	blx	r3
 801275a:	3601      	adds	r6, #1
 801275c:	e7ee      	b.n	801273c <__libc_init_array+0xc>
 801275e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012762:	4798      	blx	r3
 8012764:	3601      	adds	r6, #1
 8012766:	e7f2      	b.n	801274e <__libc_init_array+0x1e>
 8012768:	08017eb8 	.word	0x08017eb8
 801276c:	08017eb8 	.word	0x08017eb8
 8012770:	08017eb8 	.word	0x08017eb8
 8012774:	08017ebc 	.word	0x08017ebc

08012778 <__retarget_lock_init_recursive>:
 8012778:	4770      	bx	lr

0801277a <__retarget_lock_acquire_recursive>:
 801277a:	4770      	bx	lr

0801277c <__retarget_lock_release_recursive>:
 801277c:	4770      	bx	lr

0801277e <memcpy>:
 801277e:	440a      	add	r2, r1
 8012780:	4291      	cmp	r1, r2
 8012782:	f100 33ff 	add.w	r3, r0, #4294967295
 8012786:	d100      	bne.n	801278a <memcpy+0xc>
 8012788:	4770      	bx	lr
 801278a:	b510      	push	{r4, lr}
 801278c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012794:	4291      	cmp	r1, r2
 8012796:	d1f9      	bne.n	801278c <memcpy+0xe>
 8012798:	bd10      	pop	{r4, pc}
 801279a:	0000      	movs	r0, r0
 801279c:	0000      	movs	r0, r0
	...

080127a0 <nan>:
 80127a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80127a8 <nan+0x8>
 80127a4:	4770      	bx	lr
 80127a6:	bf00      	nop
 80127a8:	00000000 	.word	0x00000000
 80127ac:	7ff80000 	.word	0x7ff80000

080127b0 <__assert_func>:
 80127b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80127b2:	4614      	mov	r4, r2
 80127b4:	461a      	mov	r2, r3
 80127b6:	4b09      	ldr	r3, [pc, #36]	@ (80127dc <__assert_func+0x2c>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	4605      	mov	r5, r0
 80127bc:	68d8      	ldr	r0, [r3, #12]
 80127be:	b14c      	cbz	r4, 80127d4 <__assert_func+0x24>
 80127c0:	4b07      	ldr	r3, [pc, #28]	@ (80127e0 <__assert_func+0x30>)
 80127c2:	9100      	str	r1, [sp, #0]
 80127c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80127c8:	4906      	ldr	r1, [pc, #24]	@ (80127e4 <__assert_func+0x34>)
 80127ca:	462b      	mov	r3, r5
 80127cc:	f002 f96e 	bl	8014aac <fiprintf>
 80127d0:	f002 f9a8 	bl	8014b24 <abort>
 80127d4:	4b04      	ldr	r3, [pc, #16]	@ (80127e8 <__assert_func+0x38>)
 80127d6:	461c      	mov	r4, r3
 80127d8:	e7f3      	b.n	80127c2 <__assert_func+0x12>
 80127da:	bf00      	nop
 80127dc:	200001a0 	.word	0x200001a0
 80127e0:	0801761f 	.word	0x0801761f
 80127e4:	0801762c 	.word	0x0801762c
 80127e8:	0801765a 	.word	0x0801765a

080127ec <quorem>:
 80127ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f0:	6903      	ldr	r3, [r0, #16]
 80127f2:	690c      	ldr	r4, [r1, #16]
 80127f4:	42a3      	cmp	r3, r4
 80127f6:	4607      	mov	r7, r0
 80127f8:	db7e      	blt.n	80128f8 <quorem+0x10c>
 80127fa:	3c01      	subs	r4, #1
 80127fc:	f101 0814 	add.w	r8, r1, #20
 8012800:	00a3      	lsls	r3, r4, #2
 8012802:	f100 0514 	add.w	r5, r0, #20
 8012806:	9300      	str	r3, [sp, #0]
 8012808:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801280c:	9301      	str	r3, [sp, #4]
 801280e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012816:	3301      	adds	r3, #1
 8012818:	429a      	cmp	r2, r3
 801281a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801281e:	fbb2 f6f3 	udiv	r6, r2, r3
 8012822:	d32e      	bcc.n	8012882 <quorem+0x96>
 8012824:	f04f 0a00 	mov.w	sl, #0
 8012828:	46c4      	mov	ip, r8
 801282a:	46ae      	mov	lr, r5
 801282c:	46d3      	mov	fp, sl
 801282e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012832:	b298      	uxth	r0, r3
 8012834:	fb06 a000 	mla	r0, r6, r0, sl
 8012838:	0c02      	lsrs	r2, r0, #16
 801283a:	0c1b      	lsrs	r3, r3, #16
 801283c:	fb06 2303 	mla	r3, r6, r3, r2
 8012840:	f8de 2000 	ldr.w	r2, [lr]
 8012844:	b280      	uxth	r0, r0
 8012846:	b292      	uxth	r2, r2
 8012848:	1a12      	subs	r2, r2, r0
 801284a:	445a      	add	r2, fp
 801284c:	f8de 0000 	ldr.w	r0, [lr]
 8012850:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012854:	b29b      	uxth	r3, r3
 8012856:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801285a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801285e:	b292      	uxth	r2, r2
 8012860:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012864:	45e1      	cmp	r9, ip
 8012866:	f84e 2b04 	str.w	r2, [lr], #4
 801286a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801286e:	d2de      	bcs.n	801282e <quorem+0x42>
 8012870:	9b00      	ldr	r3, [sp, #0]
 8012872:	58eb      	ldr	r3, [r5, r3]
 8012874:	b92b      	cbnz	r3, 8012882 <quorem+0x96>
 8012876:	9b01      	ldr	r3, [sp, #4]
 8012878:	3b04      	subs	r3, #4
 801287a:	429d      	cmp	r5, r3
 801287c:	461a      	mov	r2, r3
 801287e:	d32f      	bcc.n	80128e0 <quorem+0xf4>
 8012880:	613c      	str	r4, [r7, #16]
 8012882:	4638      	mov	r0, r7
 8012884:	f001 fd14 	bl	80142b0 <__mcmp>
 8012888:	2800      	cmp	r0, #0
 801288a:	db25      	blt.n	80128d8 <quorem+0xec>
 801288c:	4629      	mov	r1, r5
 801288e:	2000      	movs	r0, #0
 8012890:	f858 2b04 	ldr.w	r2, [r8], #4
 8012894:	f8d1 c000 	ldr.w	ip, [r1]
 8012898:	fa1f fe82 	uxth.w	lr, r2
 801289c:	fa1f f38c 	uxth.w	r3, ip
 80128a0:	eba3 030e 	sub.w	r3, r3, lr
 80128a4:	4403      	add	r3, r0
 80128a6:	0c12      	lsrs	r2, r2, #16
 80128a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80128ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80128b0:	b29b      	uxth	r3, r3
 80128b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128b6:	45c1      	cmp	r9, r8
 80128b8:	f841 3b04 	str.w	r3, [r1], #4
 80128bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80128c0:	d2e6      	bcs.n	8012890 <quorem+0xa4>
 80128c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80128c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80128ca:	b922      	cbnz	r2, 80128d6 <quorem+0xea>
 80128cc:	3b04      	subs	r3, #4
 80128ce:	429d      	cmp	r5, r3
 80128d0:	461a      	mov	r2, r3
 80128d2:	d30b      	bcc.n	80128ec <quorem+0x100>
 80128d4:	613c      	str	r4, [r7, #16]
 80128d6:	3601      	adds	r6, #1
 80128d8:	4630      	mov	r0, r6
 80128da:	b003      	add	sp, #12
 80128dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e0:	6812      	ldr	r2, [r2, #0]
 80128e2:	3b04      	subs	r3, #4
 80128e4:	2a00      	cmp	r2, #0
 80128e6:	d1cb      	bne.n	8012880 <quorem+0x94>
 80128e8:	3c01      	subs	r4, #1
 80128ea:	e7c6      	b.n	801287a <quorem+0x8e>
 80128ec:	6812      	ldr	r2, [r2, #0]
 80128ee:	3b04      	subs	r3, #4
 80128f0:	2a00      	cmp	r2, #0
 80128f2:	d1ef      	bne.n	80128d4 <quorem+0xe8>
 80128f4:	3c01      	subs	r4, #1
 80128f6:	e7ea      	b.n	80128ce <quorem+0xe2>
 80128f8:	2000      	movs	r0, #0
 80128fa:	e7ee      	b.n	80128da <quorem+0xee>
 80128fc:	0000      	movs	r0, r0
	...

08012900 <_dtoa_r>:
 8012900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012904:	69c7      	ldr	r7, [r0, #28]
 8012906:	b097      	sub	sp, #92	@ 0x5c
 8012908:	ed8d 0b04 	vstr	d0, [sp, #16]
 801290c:	ec55 4b10 	vmov	r4, r5, d0
 8012910:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8012912:	9107      	str	r1, [sp, #28]
 8012914:	4681      	mov	r9, r0
 8012916:	920c      	str	r2, [sp, #48]	@ 0x30
 8012918:	9311      	str	r3, [sp, #68]	@ 0x44
 801291a:	b97f      	cbnz	r7, 801293c <_dtoa_r+0x3c>
 801291c:	2010      	movs	r0, #16
 801291e:	f001 f943 	bl	8013ba8 <malloc>
 8012922:	4602      	mov	r2, r0
 8012924:	f8c9 001c 	str.w	r0, [r9, #28]
 8012928:	b920      	cbnz	r0, 8012934 <_dtoa_r+0x34>
 801292a:	4ba9      	ldr	r3, [pc, #676]	@ (8012bd0 <_dtoa_r+0x2d0>)
 801292c:	21ef      	movs	r1, #239	@ 0xef
 801292e:	48a9      	ldr	r0, [pc, #676]	@ (8012bd4 <_dtoa_r+0x2d4>)
 8012930:	f7ff ff3e 	bl	80127b0 <__assert_func>
 8012934:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012938:	6007      	str	r7, [r0, #0]
 801293a:	60c7      	str	r7, [r0, #12]
 801293c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012940:	6819      	ldr	r1, [r3, #0]
 8012942:	b159      	cbz	r1, 801295c <_dtoa_r+0x5c>
 8012944:	685a      	ldr	r2, [r3, #4]
 8012946:	604a      	str	r2, [r1, #4]
 8012948:	2301      	movs	r3, #1
 801294a:	4093      	lsls	r3, r2
 801294c:	608b      	str	r3, [r1, #8]
 801294e:	4648      	mov	r0, r9
 8012950:	f001 fa32 	bl	8013db8 <_Bfree>
 8012954:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012958:	2200      	movs	r2, #0
 801295a:	601a      	str	r2, [r3, #0]
 801295c:	1e2b      	subs	r3, r5, #0
 801295e:	bfb9      	ittee	lt
 8012960:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012964:	9305      	strlt	r3, [sp, #20]
 8012966:	2300      	movge	r3, #0
 8012968:	6033      	strge	r3, [r6, #0]
 801296a:	9f05      	ldr	r7, [sp, #20]
 801296c:	4b9a      	ldr	r3, [pc, #616]	@ (8012bd8 <_dtoa_r+0x2d8>)
 801296e:	bfbc      	itt	lt
 8012970:	2201      	movlt	r2, #1
 8012972:	6032      	strlt	r2, [r6, #0]
 8012974:	43bb      	bics	r3, r7
 8012976:	d112      	bne.n	801299e <_dtoa_r+0x9e>
 8012978:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801297a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801297e:	6013      	str	r3, [r2, #0]
 8012980:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012984:	4323      	orrs	r3, r4
 8012986:	f000 855a 	beq.w	801343e <_dtoa_r+0xb3e>
 801298a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801298c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8012bec <_dtoa_r+0x2ec>
 8012990:	2b00      	cmp	r3, #0
 8012992:	f000 855c 	beq.w	801344e <_dtoa_r+0xb4e>
 8012996:	f10a 0303 	add.w	r3, sl, #3
 801299a:	f000 bd56 	b.w	801344a <_dtoa_r+0xb4a>
 801299e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80129a2:	2200      	movs	r2, #0
 80129a4:	ec51 0b17 	vmov	r0, r1, d7
 80129a8:	2300      	movs	r3, #0
 80129aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80129ae:	f7ee f8c3 	bl	8000b38 <__aeabi_dcmpeq>
 80129b2:	4680      	mov	r8, r0
 80129b4:	b158      	cbz	r0, 80129ce <_dtoa_r+0xce>
 80129b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80129b8:	2301      	movs	r3, #1
 80129ba:	6013      	str	r3, [r2, #0]
 80129bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80129be:	b113      	cbz	r3, 80129c6 <_dtoa_r+0xc6>
 80129c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80129c2:	4b86      	ldr	r3, [pc, #536]	@ (8012bdc <_dtoa_r+0x2dc>)
 80129c4:	6013      	str	r3, [r2, #0]
 80129c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8012bf0 <_dtoa_r+0x2f0>
 80129ca:	f000 bd40 	b.w	801344e <_dtoa_r+0xb4e>
 80129ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80129d2:	aa14      	add	r2, sp, #80	@ 0x50
 80129d4:	a915      	add	r1, sp, #84	@ 0x54
 80129d6:	4648      	mov	r0, r9
 80129d8:	f001 fd8a 	bl	80144f0 <__d2b>
 80129dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80129e0:	9002      	str	r0, [sp, #8]
 80129e2:	2e00      	cmp	r6, #0
 80129e4:	d078      	beq.n	8012ad8 <_dtoa_r+0x1d8>
 80129e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80129e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80129ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80129f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80129f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80129fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012a00:	4619      	mov	r1, r3
 8012a02:	2200      	movs	r2, #0
 8012a04:	4b76      	ldr	r3, [pc, #472]	@ (8012be0 <_dtoa_r+0x2e0>)
 8012a06:	f7ed fc77 	bl	80002f8 <__aeabi_dsub>
 8012a0a:	a36b      	add	r3, pc, #428	@ (adr r3, 8012bb8 <_dtoa_r+0x2b8>)
 8012a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a10:	f7ed fe2a 	bl	8000668 <__aeabi_dmul>
 8012a14:	a36a      	add	r3, pc, #424	@ (adr r3, 8012bc0 <_dtoa_r+0x2c0>)
 8012a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1a:	f7ed fc6f 	bl	80002fc <__adddf3>
 8012a1e:	4604      	mov	r4, r0
 8012a20:	4630      	mov	r0, r6
 8012a22:	460d      	mov	r5, r1
 8012a24:	f7ed fdb6 	bl	8000594 <__aeabi_i2d>
 8012a28:	a367      	add	r3, pc, #412	@ (adr r3, 8012bc8 <_dtoa_r+0x2c8>)
 8012a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a2e:	f7ed fe1b 	bl	8000668 <__aeabi_dmul>
 8012a32:	4602      	mov	r2, r0
 8012a34:	460b      	mov	r3, r1
 8012a36:	4620      	mov	r0, r4
 8012a38:	4629      	mov	r1, r5
 8012a3a:	f7ed fc5f 	bl	80002fc <__adddf3>
 8012a3e:	4604      	mov	r4, r0
 8012a40:	460d      	mov	r5, r1
 8012a42:	f7ee f8c1 	bl	8000bc8 <__aeabi_d2iz>
 8012a46:	2200      	movs	r2, #0
 8012a48:	4607      	mov	r7, r0
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	4629      	mov	r1, r5
 8012a50:	f7ee f87c 	bl	8000b4c <__aeabi_dcmplt>
 8012a54:	b140      	cbz	r0, 8012a68 <_dtoa_r+0x168>
 8012a56:	4638      	mov	r0, r7
 8012a58:	f7ed fd9c 	bl	8000594 <__aeabi_i2d>
 8012a5c:	4622      	mov	r2, r4
 8012a5e:	462b      	mov	r3, r5
 8012a60:	f7ee f86a 	bl	8000b38 <__aeabi_dcmpeq>
 8012a64:	b900      	cbnz	r0, 8012a68 <_dtoa_r+0x168>
 8012a66:	3f01      	subs	r7, #1
 8012a68:	2f16      	cmp	r7, #22
 8012a6a:	d852      	bhi.n	8012b12 <_dtoa_r+0x212>
 8012a6c:	4b5d      	ldr	r3, [pc, #372]	@ (8012be4 <_dtoa_r+0x2e4>)
 8012a6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012a7a:	f7ee f867 	bl	8000b4c <__aeabi_dcmplt>
 8012a7e:	2800      	cmp	r0, #0
 8012a80:	d049      	beq.n	8012b16 <_dtoa_r+0x216>
 8012a82:	3f01      	subs	r7, #1
 8012a84:	2300      	movs	r3, #0
 8012a86:	9310      	str	r3, [sp, #64]	@ 0x40
 8012a88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012a8a:	1b9b      	subs	r3, r3, r6
 8012a8c:	1e5a      	subs	r2, r3, #1
 8012a8e:	bf45      	ittet	mi
 8012a90:	f1c3 0301 	rsbmi	r3, r3, #1
 8012a94:	9300      	strmi	r3, [sp, #0]
 8012a96:	2300      	movpl	r3, #0
 8012a98:	2300      	movmi	r3, #0
 8012a9a:	9206      	str	r2, [sp, #24]
 8012a9c:	bf54      	ite	pl
 8012a9e:	9300      	strpl	r3, [sp, #0]
 8012aa0:	9306      	strmi	r3, [sp, #24]
 8012aa2:	2f00      	cmp	r7, #0
 8012aa4:	db39      	blt.n	8012b1a <_dtoa_r+0x21a>
 8012aa6:	9b06      	ldr	r3, [sp, #24]
 8012aa8:	970d      	str	r7, [sp, #52]	@ 0x34
 8012aaa:	443b      	add	r3, r7
 8012aac:	9306      	str	r3, [sp, #24]
 8012aae:	2300      	movs	r3, #0
 8012ab0:	9308      	str	r3, [sp, #32]
 8012ab2:	9b07      	ldr	r3, [sp, #28]
 8012ab4:	2b09      	cmp	r3, #9
 8012ab6:	d863      	bhi.n	8012b80 <_dtoa_r+0x280>
 8012ab8:	2b05      	cmp	r3, #5
 8012aba:	bfc4      	itt	gt
 8012abc:	3b04      	subgt	r3, #4
 8012abe:	9307      	strgt	r3, [sp, #28]
 8012ac0:	9b07      	ldr	r3, [sp, #28]
 8012ac2:	f1a3 0302 	sub.w	r3, r3, #2
 8012ac6:	bfcc      	ite	gt
 8012ac8:	2400      	movgt	r4, #0
 8012aca:	2401      	movle	r4, #1
 8012acc:	2b03      	cmp	r3, #3
 8012ace:	d863      	bhi.n	8012b98 <_dtoa_r+0x298>
 8012ad0:	e8df f003 	tbb	[pc, r3]
 8012ad4:	2b375452 	.word	0x2b375452
 8012ad8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8012adc:	441e      	add	r6, r3
 8012ade:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012ae2:	2b20      	cmp	r3, #32
 8012ae4:	bfc1      	itttt	gt
 8012ae6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012aea:	409f      	lslgt	r7, r3
 8012aec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012af0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012af4:	bfd6      	itet	le
 8012af6:	f1c3 0320 	rsble	r3, r3, #32
 8012afa:	ea47 0003 	orrgt.w	r0, r7, r3
 8012afe:	fa04 f003 	lslle.w	r0, r4, r3
 8012b02:	f7ed fd37 	bl	8000574 <__aeabi_ui2d>
 8012b06:	2201      	movs	r2, #1
 8012b08:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012b0c:	3e01      	subs	r6, #1
 8012b0e:	9212      	str	r2, [sp, #72]	@ 0x48
 8012b10:	e776      	b.n	8012a00 <_dtoa_r+0x100>
 8012b12:	2301      	movs	r3, #1
 8012b14:	e7b7      	b.n	8012a86 <_dtoa_r+0x186>
 8012b16:	9010      	str	r0, [sp, #64]	@ 0x40
 8012b18:	e7b6      	b.n	8012a88 <_dtoa_r+0x188>
 8012b1a:	9b00      	ldr	r3, [sp, #0]
 8012b1c:	1bdb      	subs	r3, r3, r7
 8012b1e:	9300      	str	r3, [sp, #0]
 8012b20:	427b      	negs	r3, r7
 8012b22:	9308      	str	r3, [sp, #32]
 8012b24:	2300      	movs	r3, #0
 8012b26:	930d      	str	r3, [sp, #52]	@ 0x34
 8012b28:	e7c3      	b.n	8012ab2 <_dtoa_r+0x1b2>
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b30:	eb07 0b03 	add.w	fp, r7, r3
 8012b34:	f10b 0301 	add.w	r3, fp, #1
 8012b38:	2b01      	cmp	r3, #1
 8012b3a:	9303      	str	r3, [sp, #12]
 8012b3c:	bfb8      	it	lt
 8012b3e:	2301      	movlt	r3, #1
 8012b40:	e006      	b.n	8012b50 <_dtoa_r+0x250>
 8012b42:	2301      	movs	r3, #1
 8012b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	dd28      	ble.n	8012b9e <_dtoa_r+0x29e>
 8012b4c:	469b      	mov	fp, r3
 8012b4e:	9303      	str	r3, [sp, #12]
 8012b50:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8012b54:	2100      	movs	r1, #0
 8012b56:	2204      	movs	r2, #4
 8012b58:	f102 0514 	add.w	r5, r2, #20
 8012b5c:	429d      	cmp	r5, r3
 8012b5e:	d926      	bls.n	8012bae <_dtoa_r+0x2ae>
 8012b60:	6041      	str	r1, [r0, #4]
 8012b62:	4648      	mov	r0, r9
 8012b64:	f001 f8e8 	bl	8013d38 <_Balloc>
 8012b68:	4682      	mov	sl, r0
 8012b6a:	2800      	cmp	r0, #0
 8012b6c:	d142      	bne.n	8012bf4 <_dtoa_r+0x2f4>
 8012b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8012be8 <_dtoa_r+0x2e8>)
 8012b70:	4602      	mov	r2, r0
 8012b72:	f240 11af 	movw	r1, #431	@ 0x1af
 8012b76:	e6da      	b.n	801292e <_dtoa_r+0x2e>
 8012b78:	2300      	movs	r3, #0
 8012b7a:	e7e3      	b.n	8012b44 <_dtoa_r+0x244>
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	e7d5      	b.n	8012b2c <_dtoa_r+0x22c>
 8012b80:	2401      	movs	r4, #1
 8012b82:	2300      	movs	r3, #0
 8012b84:	9307      	str	r3, [sp, #28]
 8012b86:	9409      	str	r4, [sp, #36]	@ 0x24
 8012b88:	f04f 3bff 	mov.w	fp, #4294967295
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	f8cd b00c 	str.w	fp, [sp, #12]
 8012b92:	2312      	movs	r3, #18
 8012b94:	920c      	str	r2, [sp, #48]	@ 0x30
 8012b96:	e7db      	b.n	8012b50 <_dtoa_r+0x250>
 8012b98:	2301      	movs	r3, #1
 8012b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b9c:	e7f4      	b.n	8012b88 <_dtoa_r+0x288>
 8012b9e:	f04f 0b01 	mov.w	fp, #1
 8012ba2:	f8cd b00c 	str.w	fp, [sp, #12]
 8012ba6:	465b      	mov	r3, fp
 8012ba8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8012bac:	e7d0      	b.n	8012b50 <_dtoa_r+0x250>
 8012bae:	3101      	adds	r1, #1
 8012bb0:	0052      	lsls	r2, r2, #1
 8012bb2:	e7d1      	b.n	8012b58 <_dtoa_r+0x258>
 8012bb4:	f3af 8000 	nop.w
 8012bb8:	636f4361 	.word	0x636f4361
 8012bbc:	3fd287a7 	.word	0x3fd287a7
 8012bc0:	8b60c8b3 	.word	0x8b60c8b3
 8012bc4:	3fc68a28 	.word	0x3fc68a28
 8012bc8:	509f79fb 	.word	0x509f79fb
 8012bcc:	3fd34413 	.word	0x3fd34413
 8012bd0:	080175a6 	.word	0x080175a6
 8012bd4:	08017668 	.word	0x08017668
 8012bd8:	7ff00000 	.word	0x7ff00000
 8012bdc:	08017583 	.word	0x08017583
 8012be0:	3ff80000 	.word	0x3ff80000
 8012be4:	08017828 	.word	0x08017828
 8012be8:	080176c0 	.word	0x080176c0
 8012bec:	08017664 	.word	0x08017664
 8012bf0:	08017582 	.word	0x08017582
 8012bf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012bf8:	6018      	str	r0, [r3, #0]
 8012bfa:	9b03      	ldr	r3, [sp, #12]
 8012bfc:	2b0e      	cmp	r3, #14
 8012bfe:	f200 80a1 	bhi.w	8012d44 <_dtoa_r+0x444>
 8012c02:	2c00      	cmp	r4, #0
 8012c04:	f000 809e 	beq.w	8012d44 <_dtoa_r+0x444>
 8012c08:	2f00      	cmp	r7, #0
 8012c0a:	dd33      	ble.n	8012c74 <_dtoa_r+0x374>
 8012c0c:	4b9c      	ldr	r3, [pc, #624]	@ (8012e80 <_dtoa_r+0x580>)
 8012c0e:	f007 020f 	and.w	r2, r7, #15
 8012c12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c16:	ed93 7b00 	vldr	d7, [r3]
 8012c1a:	05f8      	lsls	r0, r7, #23
 8012c1c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8012c20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012c24:	d516      	bpl.n	8012c54 <_dtoa_r+0x354>
 8012c26:	4b97      	ldr	r3, [pc, #604]	@ (8012e84 <_dtoa_r+0x584>)
 8012c28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012c2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012c30:	f7ed fe44 	bl	80008bc <__aeabi_ddiv>
 8012c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c38:	f004 040f 	and.w	r4, r4, #15
 8012c3c:	2603      	movs	r6, #3
 8012c3e:	4d91      	ldr	r5, [pc, #580]	@ (8012e84 <_dtoa_r+0x584>)
 8012c40:	b954      	cbnz	r4, 8012c58 <_dtoa_r+0x358>
 8012c42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012c46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c4a:	f7ed fe37 	bl	80008bc <__aeabi_ddiv>
 8012c4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c52:	e028      	b.n	8012ca6 <_dtoa_r+0x3a6>
 8012c54:	2602      	movs	r6, #2
 8012c56:	e7f2      	b.n	8012c3e <_dtoa_r+0x33e>
 8012c58:	07e1      	lsls	r1, r4, #31
 8012c5a:	d508      	bpl.n	8012c6e <_dtoa_r+0x36e>
 8012c5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012c60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c64:	f7ed fd00 	bl	8000668 <__aeabi_dmul>
 8012c68:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012c6c:	3601      	adds	r6, #1
 8012c6e:	1064      	asrs	r4, r4, #1
 8012c70:	3508      	adds	r5, #8
 8012c72:	e7e5      	b.n	8012c40 <_dtoa_r+0x340>
 8012c74:	f000 80af 	beq.w	8012dd6 <_dtoa_r+0x4d6>
 8012c78:	427c      	negs	r4, r7
 8012c7a:	4b81      	ldr	r3, [pc, #516]	@ (8012e80 <_dtoa_r+0x580>)
 8012c7c:	4d81      	ldr	r5, [pc, #516]	@ (8012e84 <_dtoa_r+0x584>)
 8012c7e:	f004 020f 	and.w	r2, r4, #15
 8012c82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012c8e:	f7ed fceb 	bl	8000668 <__aeabi_dmul>
 8012c92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c96:	1124      	asrs	r4, r4, #4
 8012c98:	2300      	movs	r3, #0
 8012c9a:	2602      	movs	r6, #2
 8012c9c:	2c00      	cmp	r4, #0
 8012c9e:	f040 808f 	bne.w	8012dc0 <_dtoa_r+0x4c0>
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d1d3      	bne.n	8012c4e <_dtoa_r+0x34e>
 8012ca6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012ca8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	f000 8094 	beq.w	8012dda <_dtoa_r+0x4da>
 8012cb2:	4b75      	ldr	r3, [pc, #468]	@ (8012e88 <_dtoa_r+0x588>)
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	4629      	mov	r1, r5
 8012cba:	f7ed ff47 	bl	8000b4c <__aeabi_dcmplt>
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	f000 808b 	beq.w	8012dda <_dtoa_r+0x4da>
 8012cc4:	9b03      	ldr	r3, [sp, #12]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	f000 8087 	beq.w	8012dda <_dtoa_r+0x4da>
 8012ccc:	f1bb 0f00 	cmp.w	fp, #0
 8012cd0:	dd34      	ble.n	8012d3c <_dtoa_r+0x43c>
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	4b6d      	ldr	r3, [pc, #436]	@ (8012e8c <_dtoa_r+0x58c>)
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	4629      	mov	r1, r5
 8012cda:	f7ed fcc5 	bl	8000668 <__aeabi_dmul>
 8012cde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ce2:	f107 38ff 	add.w	r8, r7, #4294967295
 8012ce6:	3601      	adds	r6, #1
 8012ce8:	465c      	mov	r4, fp
 8012cea:	4630      	mov	r0, r6
 8012cec:	f7ed fc52 	bl	8000594 <__aeabi_i2d>
 8012cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012cf4:	f7ed fcb8 	bl	8000668 <__aeabi_dmul>
 8012cf8:	4b65      	ldr	r3, [pc, #404]	@ (8012e90 <_dtoa_r+0x590>)
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	f7ed fafe 	bl	80002fc <__adddf3>
 8012d00:	4605      	mov	r5, r0
 8012d02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012d06:	2c00      	cmp	r4, #0
 8012d08:	d16a      	bne.n	8012de0 <_dtoa_r+0x4e0>
 8012d0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012d0e:	4b61      	ldr	r3, [pc, #388]	@ (8012e94 <_dtoa_r+0x594>)
 8012d10:	2200      	movs	r2, #0
 8012d12:	f7ed faf1 	bl	80002f8 <__aeabi_dsub>
 8012d16:	4602      	mov	r2, r0
 8012d18:	460b      	mov	r3, r1
 8012d1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012d1e:	462a      	mov	r2, r5
 8012d20:	4633      	mov	r3, r6
 8012d22:	f7ed ff31 	bl	8000b88 <__aeabi_dcmpgt>
 8012d26:	2800      	cmp	r0, #0
 8012d28:	f040 8298 	bne.w	801325c <_dtoa_r+0x95c>
 8012d2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012d30:	462a      	mov	r2, r5
 8012d32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012d36:	f7ed ff09 	bl	8000b4c <__aeabi_dcmplt>
 8012d3a:	bb38      	cbnz	r0, 8012d8c <_dtoa_r+0x48c>
 8012d3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8012d40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8012d44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	f2c0 8157 	blt.w	8012ffa <_dtoa_r+0x6fa>
 8012d4c:	2f0e      	cmp	r7, #14
 8012d4e:	f300 8154 	bgt.w	8012ffa <_dtoa_r+0x6fa>
 8012d52:	4b4b      	ldr	r3, [pc, #300]	@ (8012e80 <_dtoa_r+0x580>)
 8012d54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012d58:	ed93 7b00 	vldr	d7, [r3]
 8012d5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	ed8d 7b00 	vstr	d7, [sp]
 8012d64:	f280 80e5 	bge.w	8012f32 <_dtoa_r+0x632>
 8012d68:	9b03      	ldr	r3, [sp, #12]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	f300 80e1 	bgt.w	8012f32 <_dtoa_r+0x632>
 8012d70:	d10c      	bne.n	8012d8c <_dtoa_r+0x48c>
 8012d72:	4b48      	ldr	r3, [pc, #288]	@ (8012e94 <_dtoa_r+0x594>)
 8012d74:	2200      	movs	r2, #0
 8012d76:	ec51 0b17 	vmov	r0, r1, d7
 8012d7a:	f7ed fc75 	bl	8000668 <__aeabi_dmul>
 8012d7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d82:	f7ed fef7 	bl	8000b74 <__aeabi_dcmpge>
 8012d86:	2800      	cmp	r0, #0
 8012d88:	f000 8266 	beq.w	8013258 <_dtoa_r+0x958>
 8012d8c:	2400      	movs	r4, #0
 8012d8e:	4625      	mov	r5, r4
 8012d90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012d92:	4656      	mov	r6, sl
 8012d94:	ea6f 0803 	mvn.w	r8, r3
 8012d98:	2700      	movs	r7, #0
 8012d9a:	4621      	mov	r1, r4
 8012d9c:	4648      	mov	r0, r9
 8012d9e:	f001 f80b 	bl	8013db8 <_Bfree>
 8012da2:	2d00      	cmp	r5, #0
 8012da4:	f000 80bd 	beq.w	8012f22 <_dtoa_r+0x622>
 8012da8:	b12f      	cbz	r7, 8012db6 <_dtoa_r+0x4b6>
 8012daa:	42af      	cmp	r7, r5
 8012dac:	d003      	beq.n	8012db6 <_dtoa_r+0x4b6>
 8012dae:	4639      	mov	r1, r7
 8012db0:	4648      	mov	r0, r9
 8012db2:	f001 f801 	bl	8013db8 <_Bfree>
 8012db6:	4629      	mov	r1, r5
 8012db8:	4648      	mov	r0, r9
 8012dba:	f000 fffd 	bl	8013db8 <_Bfree>
 8012dbe:	e0b0      	b.n	8012f22 <_dtoa_r+0x622>
 8012dc0:	07e2      	lsls	r2, r4, #31
 8012dc2:	d505      	bpl.n	8012dd0 <_dtoa_r+0x4d0>
 8012dc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012dc8:	f7ed fc4e 	bl	8000668 <__aeabi_dmul>
 8012dcc:	3601      	adds	r6, #1
 8012dce:	2301      	movs	r3, #1
 8012dd0:	1064      	asrs	r4, r4, #1
 8012dd2:	3508      	adds	r5, #8
 8012dd4:	e762      	b.n	8012c9c <_dtoa_r+0x39c>
 8012dd6:	2602      	movs	r6, #2
 8012dd8:	e765      	b.n	8012ca6 <_dtoa_r+0x3a6>
 8012dda:	9c03      	ldr	r4, [sp, #12]
 8012ddc:	46b8      	mov	r8, r7
 8012dde:	e784      	b.n	8012cea <_dtoa_r+0x3ea>
 8012de0:	4b27      	ldr	r3, [pc, #156]	@ (8012e80 <_dtoa_r+0x580>)
 8012de2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012de4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012de8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012dec:	4454      	add	r4, sl
 8012dee:	2900      	cmp	r1, #0
 8012df0:	d054      	beq.n	8012e9c <_dtoa_r+0x59c>
 8012df2:	4929      	ldr	r1, [pc, #164]	@ (8012e98 <_dtoa_r+0x598>)
 8012df4:	2000      	movs	r0, #0
 8012df6:	f7ed fd61 	bl	80008bc <__aeabi_ddiv>
 8012dfa:	4633      	mov	r3, r6
 8012dfc:	462a      	mov	r2, r5
 8012dfe:	f7ed fa7b 	bl	80002f8 <__aeabi_dsub>
 8012e02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012e06:	4656      	mov	r6, sl
 8012e08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012e0c:	f7ed fedc 	bl	8000bc8 <__aeabi_d2iz>
 8012e10:	4605      	mov	r5, r0
 8012e12:	f7ed fbbf 	bl	8000594 <__aeabi_i2d>
 8012e16:	4602      	mov	r2, r0
 8012e18:	460b      	mov	r3, r1
 8012e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012e1e:	f7ed fa6b 	bl	80002f8 <__aeabi_dsub>
 8012e22:	3530      	adds	r5, #48	@ 0x30
 8012e24:	4602      	mov	r2, r0
 8012e26:	460b      	mov	r3, r1
 8012e28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012e2c:	f806 5b01 	strb.w	r5, [r6], #1
 8012e30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012e34:	f7ed fe8a 	bl	8000b4c <__aeabi_dcmplt>
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	d172      	bne.n	8012f22 <_dtoa_r+0x622>
 8012e3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e40:	4911      	ldr	r1, [pc, #68]	@ (8012e88 <_dtoa_r+0x588>)
 8012e42:	2000      	movs	r0, #0
 8012e44:	f7ed fa58 	bl	80002f8 <__aeabi_dsub>
 8012e48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012e4c:	f7ed fe7e 	bl	8000b4c <__aeabi_dcmplt>
 8012e50:	2800      	cmp	r0, #0
 8012e52:	f040 80b4 	bne.w	8012fbe <_dtoa_r+0x6be>
 8012e56:	42a6      	cmp	r6, r4
 8012e58:	f43f af70 	beq.w	8012d3c <_dtoa_r+0x43c>
 8012e5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012e60:	4b0a      	ldr	r3, [pc, #40]	@ (8012e8c <_dtoa_r+0x58c>)
 8012e62:	2200      	movs	r2, #0
 8012e64:	f7ed fc00 	bl	8000668 <__aeabi_dmul>
 8012e68:	4b08      	ldr	r3, [pc, #32]	@ (8012e8c <_dtoa_r+0x58c>)
 8012e6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012e6e:	2200      	movs	r2, #0
 8012e70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012e74:	f7ed fbf8 	bl	8000668 <__aeabi_dmul>
 8012e78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e7c:	e7c4      	b.n	8012e08 <_dtoa_r+0x508>
 8012e7e:	bf00      	nop
 8012e80:	08017828 	.word	0x08017828
 8012e84:	08017800 	.word	0x08017800
 8012e88:	3ff00000 	.word	0x3ff00000
 8012e8c:	40240000 	.word	0x40240000
 8012e90:	401c0000 	.word	0x401c0000
 8012e94:	40140000 	.word	0x40140000
 8012e98:	3fe00000 	.word	0x3fe00000
 8012e9c:	4631      	mov	r1, r6
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	f7ed fbe2 	bl	8000668 <__aeabi_dmul>
 8012ea4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012ea8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8012eaa:	4656      	mov	r6, sl
 8012eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012eb0:	f7ed fe8a 	bl	8000bc8 <__aeabi_d2iz>
 8012eb4:	4605      	mov	r5, r0
 8012eb6:	f7ed fb6d 	bl	8000594 <__aeabi_i2d>
 8012eba:	4602      	mov	r2, r0
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ec2:	f7ed fa19 	bl	80002f8 <__aeabi_dsub>
 8012ec6:	3530      	adds	r5, #48	@ 0x30
 8012ec8:	f806 5b01 	strb.w	r5, [r6], #1
 8012ecc:	4602      	mov	r2, r0
 8012ece:	460b      	mov	r3, r1
 8012ed0:	42a6      	cmp	r6, r4
 8012ed2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012ed6:	f04f 0200 	mov.w	r2, #0
 8012eda:	d124      	bne.n	8012f26 <_dtoa_r+0x626>
 8012edc:	4baf      	ldr	r3, [pc, #700]	@ (801319c <_dtoa_r+0x89c>)
 8012ede:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012ee2:	f7ed fa0b 	bl	80002fc <__adddf3>
 8012ee6:	4602      	mov	r2, r0
 8012ee8:	460b      	mov	r3, r1
 8012eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012eee:	f7ed fe4b 	bl	8000b88 <__aeabi_dcmpgt>
 8012ef2:	2800      	cmp	r0, #0
 8012ef4:	d163      	bne.n	8012fbe <_dtoa_r+0x6be>
 8012ef6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012efa:	49a8      	ldr	r1, [pc, #672]	@ (801319c <_dtoa_r+0x89c>)
 8012efc:	2000      	movs	r0, #0
 8012efe:	f7ed f9fb 	bl	80002f8 <__aeabi_dsub>
 8012f02:	4602      	mov	r2, r0
 8012f04:	460b      	mov	r3, r1
 8012f06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012f0a:	f7ed fe1f 	bl	8000b4c <__aeabi_dcmplt>
 8012f0e:	2800      	cmp	r0, #0
 8012f10:	f43f af14 	beq.w	8012d3c <_dtoa_r+0x43c>
 8012f14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8012f16:	1e73      	subs	r3, r6, #1
 8012f18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012f1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012f1e:	2b30      	cmp	r3, #48	@ 0x30
 8012f20:	d0f8      	beq.n	8012f14 <_dtoa_r+0x614>
 8012f22:	4647      	mov	r7, r8
 8012f24:	e03b      	b.n	8012f9e <_dtoa_r+0x69e>
 8012f26:	4b9e      	ldr	r3, [pc, #632]	@ (80131a0 <_dtoa_r+0x8a0>)
 8012f28:	f7ed fb9e 	bl	8000668 <__aeabi_dmul>
 8012f2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012f30:	e7bc      	b.n	8012eac <_dtoa_r+0x5ac>
 8012f32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012f36:	4656      	mov	r6, sl
 8012f38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	4629      	mov	r1, r5
 8012f40:	f7ed fcbc 	bl	80008bc <__aeabi_ddiv>
 8012f44:	f7ed fe40 	bl	8000bc8 <__aeabi_d2iz>
 8012f48:	4680      	mov	r8, r0
 8012f4a:	f7ed fb23 	bl	8000594 <__aeabi_i2d>
 8012f4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f52:	f7ed fb89 	bl	8000668 <__aeabi_dmul>
 8012f56:	4602      	mov	r2, r0
 8012f58:	460b      	mov	r3, r1
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	4629      	mov	r1, r5
 8012f5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012f62:	f7ed f9c9 	bl	80002f8 <__aeabi_dsub>
 8012f66:	f806 4b01 	strb.w	r4, [r6], #1
 8012f6a:	9d03      	ldr	r5, [sp, #12]
 8012f6c:	eba6 040a 	sub.w	r4, r6, sl
 8012f70:	42a5      	cmp	r5, r4
 8012f72:	4602      	mov	r2, r0
 8012f74:	460b      	mov	r3, r1
 8012f76:	d133      	bne.n	8012fe0 <_dtoa_r+0x6e0>
 8012f78:	f7ed f9c0 	bl	80002fc <__adddf3>
 8012f7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f80:	4604      	mov	r4, r0
 8012f82:	460d      	mov	r5, r1
 8012f84:	f7ed fe00 	bl	8000b88 <__aeabi_dcmpgt>
 8012f88:	b9c0      	cbnz	r0, 8012fbc <_dtoa_r+0x6bc>
 8012f8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f8e:	4620      	mov	r0, r4
 8012f90:	4629      	mov	r1, r5
 8012f92:	f7ed fdd1 	bl	8000b38 <__aeabi_dcmpeq>
 8012f96:	b110      	cbz	r0, 8012f9e <_dtoa_r+0x69e>
 8012f98:	f018 0f01 	tst.w	r8, #1
 8012f9c:	d10e      	bne.n	8012fbc <_dtoa_r+0x6bc>
 8012f9e:	9902      	ldr	r1, [sp, #8]
 8012fa0:	4648      	mov	r0, r9
 8012fa2:	f000 ff09 	bl	8013db8 <_Bfree>
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	7033      	strb	r3, [r6, #0]
 8012faa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012fac:	3701      	adds	r7, #1
 8012fae:	601f      	str	r7, [r3, #0]
 8012fb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	f000 824b 	beq.w	801344e <_dtoa_r+0xb4e>
 8012fb8:	601e      	str	r6, [r3, #0]
 8012fba:	e248      	b.n	801344e <_dtoa_r+0xb4e>
 8012fbc:	46b8      	mov	r8, r7
 8012fbe:	4633      	mov	r3, r6
 8012fc0:	461e      	mov	r6, r3
 8012fc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fc6:	2a39      	cmp	r2, #57	@ 0x39
 8012fc8:	d106      	bne.n	8012fd8 <_dtoa_r+0x6d8>
 8012fca:	459a      	cmp	sl, r3
 8012fcc:	d1f8      	bne.n	8012fc0 <_dtoa_r+0x6c0>
 8012fce:	2230      	movs	r2, #48	@ 0x30
 8012fd0:	f108 0801 	add.w	r8, r8, #1
 8012fd4:	f88a 2000 	strb.w	r2, [sl]
 8012fd8:	781a      	ldrb	r2, [r3, #0]
 8012fda:	3201      	adds	r2, #1
 8012fdc:	701a      	strb	r2, [r3, #0]
 8012fde:	e7a0      	b.n	8012f22 <_dtoa_r+0x622>
 8012fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80131a0 <_dtoa_r+0x8a0>)
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	f7ed fb40 	bl	8000668 <__aeabi_dmul>
 8012fe8:	2200      	movs	r2, #0
 8012fea:	2300      	movs	r3, #0
 8012fec:	4604      	mov	r4, r0
 8012fee:	460d      	mov	r5, r1
 8012ff0:	f7ed fda2 	bl	8000b38 <__aeabi_dcmpeq>
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	d09f      	beq.n	8012f38 <_dtoa_r+0x638>
 8012ff8:	e7d1      	b.n	8012f9e <_dtoa_r+0x69e>
 8012ffa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ffc:	2a00      	cmp	r2, #0
 8012ffe:	f000 80ea 	beq.w	80131d6 <_dtoa_r+0x8d6>
 8013002:	9a07      	ldr	r2, [sp, #28]
 8013004:	2a01      	cmp	r2, #1
 8013006:	f300 80cd 	bgt.w	80131a4 <_dtoa_r+0x8a4>
 801300a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801300c:	2a00      	cmp	r2, #0
 801300e:	f000 80c1 	beq.w	8013194 <_dtoa_r+0x894>
 8013012:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013016:	9c08      	ldr	r4, [sp, #32]
 8013018:	9e00      	ldr	r6, [sp, #0]
 801301a:	9a00      	ldr	r2, [sp, #0]
 801301c:	441a      	add	r2, r3
 801301e:	9200      	str	r2, [sp, #0]
 8013020:	9a06      	ldr	r2, [sp, #24]
 8013022:	2101      	movs	r1, #1
 8013024:	441a      	add	r2, r3
 8013026:	4648      	mov	r0, r9
 8013028:	9206      	str	r2, [sp, #24]
 801302a:	f000 ffc3 	bl	8013fb4 <__i2b>
 801302e:	4605      	mov	r5, r0
 8013030:	b166      	cbz	r6, 801304c <_dtoa_r+0x74c>
 8013032:	9b06      	ldr	r3, [sp, #24]
 8013034:	2b00      	cmp	r3, #0
 8013036:	dd09      	ble.n	801304c <_dtoa_r+0x74c>
 8013038:	42b3      	cmp	r3, r6
 801303a:	9a00      	ldr	r2, [sp, #0]
 801303c:	bfa8      	it	ge
 801303e:	4633      	movge	r3, r6
 8013040:	1ad2      	subs	r2, r2, r3
 8013042:	9200      	str	r2, [sp, #0]
 8013044:	9a06      	ldr	r2, [sp, #24]
 8013046:	1af6      	subs	r6, r6, r3
 8013048:	1ad3      	subs	r3, r2, r3
 801304a:	9306      	str	r3, [sp, #24]
 801304c:	9b08      	ldr	r3, [sp, #32]
 801304e:	b30b      	cbz	r3, 8013094 <_dtoa_r+0x794>
 8013050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013052:	2b00      	cmp	r3, #0
 8013054:	f000 80c6 	beq.w	80131e4 <_dtoa_r+0x8e4>
 8013058:	2c00      	cmp	r4, #0
 801305a:	f000 80c0 	beq.w	80131de <_dtoa_r+0x8de>
 801305e:	4629      	mov	r1, r5
 8013060:	4622      	mov	r2, r4
 8013062:	4648      	mov	r0, r9
 8013064:	f001 f85e 	bl	8014124 <__pow5mult>
 8013068:	9a02      	ldr	r2, [sp, #8]
 801306a:	4601      	mov	r1, r0
 801306c:	4605      	mov	r5, r0
 801306e:	4648      	mov	r0, r9
 8013070:	f000 ffb6 	bl	8013fe0 <__multiply>
 8013074:	9902      	ldr	r1, [sp, #8]
 8013076:	4680      	mov	r8, r0
 8013078:	4648      	mov	r0, r9
 801307a:	f000 fe9d 	bl	8013db8 <_Bfree>
 801307e:	9b08      	ldr	r3, [sp, #32]
 8013080:	1b1b      	subs	r3, r3, r4
 8013082:	9308      	str	r3, [sp, #32]
 8013084:	f000 80b1 	beq.w	80131ea <_dtoa_r+0x8ea>
 8013088:	9a08      	ldr	r2, [sp, #32]
 801308a:	4641      	mov	r1, r8
 801308c:	4648      	mov	r0, r9
 801308e:	f001 f849 	bl	8014124 <__pow5mult>
 8013092:	9002      	str	r0, [sp, #8]
 8013094:	2101      	movs	r1, #1
 8013096:	4648      	mov	r0, r9
 8013098:	f000 ff8c 	bl	8013fb4 <__i2b>
 801309c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801309e:	4604      	mov	r4, r0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	f000 81d8 	beq.w	8013456 <_dtoa_r+0xb56>
 80130a6:	461a      	mov	r2, r3
 80130a8:	4601      	mov	r1, r0
 80130aa:	4648      	mov	r0, r9
 80130ac:	f001 f83a 	bl	8014124 <__pow5mult>
 80130b0:	9b07      	ldr	r3, [sp, #28]
 80130b2:	2b01      	cmp	r3, #1
 80130b4:	4604      	mov	r4, r0
 80130b6:	f300 809f 	bgt.w	80131f8 <_dtoa_r+0x8f8>
 80130ba:	9b04      	ldr	r3, [sp, #16]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	f040 8097 	bne.w	80131f0 <_dtoa_r+0x8f0>
 80130c2:	9b05      	ldr	r3, [sp, #20]
 80130c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	f040 8093 	bne.w	80131f4 <_dtoa_r+0x8f4>
 80130ce:	9b05      	ldr	r3, [sp, #20]
 80130d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80130d4:	0d1b      	lsrs	r3, r3, #20
 80130d6:	051b      	lsls	r3, r3, #20
 80130d8:	b133      	cbz	r3, 80130e8 <_dtoa_r+0x7e8>
 80130da:	9b00      	ldr	r3, [sp, #0]
 80130dc:	3301      	adds	r3, #1
 80130de:	9300      	str	r3, [sp, #0]
 80130e0:	9b06      	ldr	r3, [sp, #24]
 80130e2:	3301      	adds	r3, #1
 80130e4:	9306      	str	r3, [sp, #24]
 80130e6:	2301      	movs	r3, #1
 80130e8:	9308      	str	r3, [sp, #32]
 80130ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	f000 81b8 	beq.w	8013462 <_dtoa_r+0xb62>
 80130f2:	6923      	ldr	r3, [r4, #16]
 80130f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80130f8:	6918      	ldr	r0, [r3, #16]
 80130fa:	f000 ff0f 	bl	8013f1c <__hi0bits>
 80130fe:	f1c0 0020 	rsb	r0, r0, #32
 8013102:	9b06      	ldr	r3, [sp, #24]
 8013104:	4418      	add	r0, r3
 8013106:	f010 001f 	ands.w	r0, r0, #31
 801310a:	f000 8082 	beq.w	8013212 <_dtoa_r+0x912>
 801310e:	f1c0 0320 	rsb	r3, r0, #32
 8013112:	2b04      	cmp	r3, #4
 8013114:	dd73      	ble.n	80131fe <_dtoa_r+0x8fe>
 8013116:	9b00      	ldr	r3, [sp, #0]
 8013118:	f1c0 001c 	rsb	r0, r0, #28
 801311c:	4403      	add	r3, r0
 801311e:	9300      	str	r3, [sp, #0]
 8013120:	9b06      	ldr	r3, [sp, #24]
 8013122:	4403      	add	r3, r0
 8013124:	4406      	add	r6, r0
 8013126:	9306      	str	r3, [sp, #24]
 8013128:	9b00      	ldr	r3, [sp, #0]
 801312a:	2b00      	cmp	r3, #0
 801312c:	dd05      	ble.n	801313a <_dtoa_r+0x83a>
 801312e:	9902      	ldr	r1, [sp, #8]
 8013130:	461a      	mov	r2, r3
 8013132:	4648      	mov	r0, r9
 8013134:	f001 f850 	bl	80141d8 <__lshift>
 8013138:	9002      	str	r0, [sp, #8]
 801313a:	9b06      	ldr	r3, [sp, #24]
 801313c:	2b00      	cmp	r3, #0
 801313e:	dd05      	ble.n	801314c <_dtoa_r+0x84c>
 8013140:	4621      	mov	r1, r4
 8013142:	461a      	mov	r2, r3
 8013144:	4648      	mov	r0, r9
 8013146:	f001 f847 	bl	80141d8 <__lshift>
 801314a:	4604      	mov	r4, r0
 801314c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801314e:	2b00      	cmp	r3, #0
 8013150:	d061      	beq.n	8013216 <_dtoa_r+0x916>
 8013152:	9802      	ldr	r0, [sp, #8]
 8013154:	4621      	mov	r1, r4
 8013156:	f001 f8ab 	bl	80142b0 <__mcmp>
 801315a:	2800      	cmp	r0, #0
 801315c:	da5b      	bge.n	8013216 <_dtoa_r+0x916>
 801315e:	2300      	movs	r3, #0
 8013160:	9902      	ldr	r1, [sp, #8]
 8013162:	220a      	movs	r2, #10
 8013164:	4648      	mov	r0, r9
 8013166:	f000 fe49 	bl	8013dfc <__multadd>
 801316a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801316c:	9002      	str	r0, [sp, #8]
 801316e:	f107 38ff 	add.w	r8, r7, #4294967295
 8013172:	2b00      	cmp	r3, #0
 8013174:	f000 8177 	beq.w	8013466 <_dtoa_r+0xb66>
 8013178:	4629      	mov	r1, r5
 801317a:	2300      	movs	r3, #0
 801317c:	220a      	movs	r2, #10
 801317e:	4648      	mov	r0, r9
 8013180:	f000 fe3c 	bl	8013dfc <__multadd>
 8013184:	f1bb 0f00 	cmp.w	fp, #0
 8013188:	4605      	mov	r5, r0
 801318a:	dc6f      	bgt.n	801326c <_dtoa_r+0x96c>
 801318c:	9b07      	ldr	r3, [sp, #28]
 801318e:	2b02      	cmp	r3, #2
 8013190:	dc49      	bgt.n	8013226 <_dtoa_r+0x926>
 8013192:	e06b      	b.n	801326c <_dtoa_r+0x96c>
 8013194:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013196:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801319a:	e73c      	b.n	8013016 <_dtoa_r+0x716>
 801319c:	3fe00000 	.word	0x3fe00000
 80131a0:	40240000 	.word	0x40240000
 80131a4:	9b03      	ldr	r3, [sp, #12]
 80131a6:	1e5c      	subs	r4, r3, #1
 80131a8:	9b08      	ldr	r3, [sp, #32]
 80131aa:	42a3      	cmp	r3, r4
 80131ac:	db09      	blt.n	80131c2 <_dtoa_r+0x8c2>
 80131ae:	1b1c      	subs	r4, r3, r4
 80131b0:	9b03      	ldr	r3, [sp, #12]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	f6bf af30 	bge.w	8013018 <_dtoa_r+0x718>
 80131b8:	9b00      	ldr	r3, [sp, #0]
 80131ba:	9a03      	ldr	r2, [sp, #12]
 80131bc:	1a9e      	subs	r6, r3, r2
 80131be:	2300      	movs	r3, #0
 80131c0:	e72b      	b.n	801301a <_dtoa_r+0x71a>
 80131c2:	9b08      	ldr	r3, [sp, #32]
 80131c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80131c6:	9408      	str	r4, [sp, #32]
 80131c8:	1ae3      	subs	r3, r4, r3
 80131ca:	441a      	add	r2, r3
 80131cc:	9e00      	ldr	r6, [sp, #0]
 80131ce:	9b03      	ldr	r3, [sp, #12]
 80131d0:	920d      	str	r2, [sp, #52]	@ 0x34
 80131d2:	2400      	movs	r4, #0
 80131d4:	e721      	b.n	801301a <_dtoa_r+0x71a>
 80131d6:	9c08      	ldr	r4, [sp, #32]
 80131d8:	9e00      	ldr	r6, [sp, #0]
 80131da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80131dc:	e728      	b.n	8013030 <_dtoa_r+0x730>
 80131de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80131e2:	e751      	b.n	8013088 <_dtoa_r+0x788>
 80131e4:	9a08      	ldr	r2, [sp, #32]
 80131e6:	9902      	ldr	r1, [sp, #8]
 80131e8:	e750      	b.n	801308c <_dtoa_r+0x78c>
 80131ea:	f8cd 8008 	str.w	r8, [sp, #8]
 80131ee:	e751      	b.n	8013094 <_dtoa_r+0x794>
 80131f0:	2300      	movs	r3, #0
 80131f2:	e779      	b.n	80130e8 <_dtoa_r+0x7e8>
 80131f4:	9b04      	ldr	r3, [sp, #16]
 80131f6:	e777      	b.n	80130e8 <_dtoa_r+0x7e8>
 80131f8:	2300      	movs	r3, #0
 80131fa:	9308      	str	r3, [sp, #32]
 80131fc:	e779      	b.n	80130f2 <_dtoa_r+0x7f2>
 80131fe:	d093      	beq.n	8013128 <_dtoa_r+0x828>
 8013200:	9a00      	ldr	r2, [sp, #0]
 8013202:	331c      	adds	r3, #28
 8013204:	441a      	add	r2, r3
 8013206:	9200      	str	r2, [sp, #0]
 8013208:	9a06      	ldr	r2, [sp, #24]
 801320a:	441a      	add	r2, r3
 801320c:	441e      	add	r6, r3
 801320e:	9206      	str	r2, [sp, #24]
 8013210:	e78a      	b.n	8013128 <_dtoa_r+0x828>
 8013212:	4603      	mov	r3, r0
 8013214:	e7f4      	b.n	8013200 <_dtoa_r+0x900>
 8013216:	9b03      	ldr	r3, [sp, #12]
 8013218:	2b00      	cmp	r3, #0
 801321a:	46b8      	mov	r8, r7
 801321c:	dc20      	bgt.n	8013260 <_dtoa_r+0x960>
 801321e:	469b      	mov	fp, r3
 8013220:	9b07      	ldr	r3, [sp, #28]
 8013222:	2b02      	cmp	r3, #2
 8013224:	dd1e      	ble.n	8013264 <_dtoa_r+0x964>
 8013226:	f1bb 0f00 	cmp.w	fp, #0
 801322a:	f47f adb1 	bne.w	8012d90 <_dtoa_r+0x490>
 801322e:	4621      	mov	r1, r4
 8013230:	465b      	mov	r3, fp
 8013232:	2205      	movs	r2, #5
 8013234:	4648      	mov	r0, r9
 8013236:	f000 fde1 	bl	8013dfc <__multadd>
 801323a:	4601      	mov	r1, r0
 801323c:	4604      	mov	r4, r0
 801323e:	9802      	ldr	r0, [sp, #8]
 8013240:	f001 f836 	bl	80142b0 <__mcmp>
 8013244:	2800      	cmp	r0, #0
 8013246:	f77f ada3 	ble.w	8012d90 <_dtoa_r+0x490>
 801324a:	4656      	mov	r6, sl
 801324c:	2331      	movs	r3, #49	@ 0x31
 801324e:	f806 3b01 	strb.w	r3, [r6], #1
 8013252:	f108 0801 	add.w	r8, r8, #1
 8013256:	e59f      	b.n	8012d98 <_dtoa_r+0x498>
 8013258:	9c03      	ldr	r4, [sp, #12]
 801325a:	46b8      	mov	r8, r7
 801325c:	4625      	mov	r5, r4
 801325e:	e7f4      	b.n	801324a <_dtoa_r+0x94a>
 8013260:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013266:	2b00      	cmp	r3, #0
 8013268:	f000 8101 	beq.w	801346e <_dtoa_r+0xb6e>
 801326c:	2e00      	cmp	r6, #0
 801326e:	dd05      	ble.n	801327c <_dtoa_r+0x97c>
 8013270:	4629      	mov	r1, r5
 8013272:	4632      	mov	r2, r6
 8013274:	4648      	mov	r0, r9
 8013276:	f000 ffaf 	bl	80141d8 <__lshift>
 801327a:	4605      	mov	r5, r0
 801327c:	9b08      	ldr	r3, [sp, #32]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d05c      	beq.n	801333c <_dtoa_r+0xa3c>
 8013282:	6869      	ldr	r1, [r5, #4]
 8013284:	4648      	mov	r0, r9
 8013286:	f000 fd57 	bl	8013d38 <_Balloc>
 801328a:	4606      	mov	r6, r0
 801328c:	b928      	cbnz	r0, 801329a <_dtoa_r+0x99a>
 801328e:	4b82      	ldr	r3, [pc, #520]	@ (8013498 <_dtoa_r+0xb98>)
 8013290:	4602      	mov	r2, r0
 8013292:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013296:	f7ff bb4a 	b.w	801292e <_dtoa_r+0x2e>
 801329a:	692a      	ldr	r2, [r5, #16]
 801329c:	3202      	adds	r2, #2
 801329e:	0092      	lsls	r2, r2, #2
 80132a0:	f105 010c 	add.w	r1, r5, #12
 80132a4:	300c      	adds	r0, #12
 80132a6:	f7ff fa6a 	bl	801277e <memcpy>
 80132aa:	2201      	movs	r2, #1
 80132ac:	4631      	mov	r1, r6
 80132ae:	4648      	mov	r0, r9
 80132b0:	f000 ff92 	bl	80141d8 <__lshift>
 80132b4:	f10a 0301 	add.w	r3, sl, #1
 80132b8:	9300      	str	r3, [sp, #0]
 80132ba:	eb0a 030b 	add.w	r3, sl, fp
 80132be:	9308      	str	r3, [sp, #32]
 80132c0:	9b04      	ldr	r3, [sp, #16]
 80132c2:	f003 0301 	and.w	r3, r3, #1
 80132c6:	462f      	mov	r7, r5
 80132c8:	9306      	str	r3, [sp, #24]
 80132ca:	4605      	mov	r5, r0
 80132cc:	9b00      	ldr	r3, [sp, #0]
 80132ce:	9802      	ldr	r0, [sp, #8]
 80132d0:	4621      	mov	r1, r4
 80132d2:	f103 3bff 	add.w	fp, r3, #4294967295
 80132d6:	f7ff fa89 	bl	80127ec <quorem>
 80132da:	4603      	mov	r3, r0
 80132dc:	3330      	adds	r3, #48	@ 0x30
 80132de:	9003      	str	r0, [sp, #12]
 80132e0:	4639      	mov	r1, r7
 80132e2:	9802      	ldr	r0, [sp, #8]
 80132e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80132e6:	f000 ffe3 	bl	80142b0 <__mcmp>
 80132ea:	462a      	mov	r2, r5
 80132ec:	9004      	str	r0, [sp, #16]
 80132ee:	4621      	mov	r1, r4
 80132f0:	4648      	mov	r0, r9
 80132f2:	f000 fff9 	bl	80142e8 <__mdiff>
 80132f6:	68c2      	ldr	r2, [r0, #12]
 80132f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132fa:	4606      	mov	r6, r0
 80132fc:	bb02      	cbnz	r2, 8013340 <_dtoa_r+0xa40>
 80132fe:	4601      	mov	r1, r0
 8013300:	9802      	ldr	r0, [sp, #8]
 8013302:	f000 ffd5 	bl	80142b0 <__mcmp>
 8013306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013308:	4602      	mov	r2, r0
 801330a:	4631      	mov	r1, r6
 801330c:	4648      	mov	r0, r9
 801330e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013310:	9309      	str	r3, [sp, #36]	@ 0x24
 8013312:	f000 fd51 	bl	8013db8 <_Bfree>
 8013316:	9b07      	ldr	r3, [sp, #28]
 8013318:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801331a:	9e00      	ldr	r6, [sp, #0]
 801331c:	ea42 0103 	orr.w	r1, r2, r3
 8013320:	9b06      	ldr	r3, [sp, #24]
 8013322:	4319      	orrs	r1, r3
 8013324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013326:	d10d      	bne.n	8013344 <_dtoa_r+0xa44>
 8013328:	2b39      	cmp	r3, #57	@ 0x39
 801332a:	d027      	beq.n	801337c <_dtoa_r+0xa7c>
 801332c:	9a04      	ldr	r2, [sp, #16]
 801332e:	2a00      	cmp	r2, #0
 8013330:	dd01      	ble.n	8013336 <_dtoa_r+0xa36>
 8013332:	9b03      	ldr	r3, [sp, #12]
 8013334:	3331      	adds	r3, #49	@ 0x31
 8013336:	f88b 3000 	strb.w	r3, [fp]
 801333a:	e52e      	b.n	8012d9a <_dtoa_r+0x49a>
 801333c:	4628      	mov	r0, r5
 801333e:	e7b9      	b.n	80132b4 <_dtoa_r+0x9b4>
 8013340:	2201      	movs	r2, #1
 8013342:	e7e2      	b.n	801330a <_dtoa_r+0xa0a>
 8013344:	9904      	ldr	r1, [sp, #16]
 8013346:	2900      	cmp	r1, #0
 8013348:	db04      	blt.n	8013354 <_dtoa_r+0xa54>
 801334a:	9807      	ldr	r0, [sp, #28]
 801334c:	4301      	orrs	r1, r0
 801334e:	9806      	ldr	r0, [sp, #24]
 8013350:	4301      	orrs	r1, r0
 8013352:	d120      	bne.n	8013396 <_dtoa_r+0xa96>
 8013354:	2a00      	cmp	r2, #0
 8013356:	ddee      	ble.n	8013336 <_dtoa_r+0xa36>
 8013358:	9902      	ldr	r1, [sp, #8]
 801335a:	9300      	str	r3, [sp, #0]
 801335c:	2201      	movs	r2, #1
 801335e:	4648      	mov	r0, r9
 8013360:	f000 ff3a 	bl	80141d8 <__lshift>
 8013364:	4621      	mov	r1, r4
 8013366:	9002      	str	r0, [sp, #8]
 8013368:	f000 ffa2 	bl	80142b0 <__mcmp>
 801336c:	2800      	cmp	r0, #0
 801336e:	9b00      	ldr	r3, [sp, #0]
 8013370:	dc02      	bgt.n	8013378 <_dtoa_r+0xa78>
 8013372:	d1e0      	bne.n	8013336 <_dtoa_r+0xa36>
 8013374:	07da      	lsls	r2, r3, #31
 8013376:	d5de      	bpl.n	8013336 <_dtoa_r+0xa36>
 8013378:	2b39      	cmp	r3, #57	@ 0x39
 801337a:	d1da      	bne.n	8013332 <_dtoa_r+0xa32>
 801337c:	2339      	movs	r3, #57	@ 0x39
 801337e:	f88b 3000 	strb.w	r3, [fp]
 8013382:	4633      	mov	r3, r6
 8013384:	461e      	mov	r6, r3
 8013386:	3b01      	subs	r3, #1
 8013388:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801338c:	2a39      	cmp	r2, #57	@ 0x39
 801338e:	d04e      	beq.n	801342e <_dtoa_r+0xb2e>
 8013390:	3201      	adds	r2, #1
 8013392:	701a      	strb	r2, [r3, #0]
 8013394:	e501      	b.n	8012d9a <_dtoa_r+0x49a>
 8013396:	2a00      	cmp	r2, #0
 8013398:	dd03      	ble.n	80133a2 <_dtoa_r+0xaa2>
 801339a:	2b39      	cmp	r3, #57	@ 0x39
 801339c:	d0ee      	beq.n	801337c <_dtoa_r+0xa7c>
 801339e:	3301      	adds	r3, #1
 80133a0:	e7c9      	b.n	8013336 <_dtoa_r+0xa36>
 80133a2:	9a00      	ldr	r2, [sp, #0]
 80133a4:	9908      	ldr	r1, [sp, #32]
 80133a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80133aa:	428a      	cmp	r2, r1
 80133ac:	d028      	beq.n	8013400 <_dtoa_r+0xb00>
 80133ae:	9902      	ldr	r1, [sp, #8]
 80133b0:	2300      	movs	r3, #0
 80133b2:	220a      	movs	r2, #10
 80133b4:	4648      	mov	r0, r9
 80133b6:	f000 fd21 	bl	8013dfc <__multadd>
 80133ba:	42af      	cmp	r7, r5
 80133bc:	9002      	str	r0, [sp, #8]
 80133be:	f04f 0300 	mov.w	r3, #0
 80133c2:	f04f 020a 	mov.w	r2, #10
 80133c6:	4639      	mov	r1, r7
 80133c8:	4648      	mov	r0, r9
 80133ca:	d107      	bne.n	80133dc <_dtoa_r+0xadc>
 80133cc:	f000 fd16 	bl	8013dfc <__multadd>
 80133d0:	4607      	mov	r7, r0
 80133d2:	4605      	mov	r5, r0
 80133d4:	9b00      	ldr	r3, [sp, #0]
 80133d6:	3301      	adds	r3, #1
 80133d8:	9300      	str	r3, [sp, #0]
 80133da:	e777      	b.n	80132cc <_dtoa_r+0x9cc>
 80133dc:	f000 fd0e 	bl	8013dfc <__multadd>
 80133e0:	4629      	mov	r1, r5
 80133e2:	4607      	mov	r7, r0
 80133e4:	2300      	movs	r3, #0
 80133e6:	220a      	movs	r2, #10
 80133e8:	4648      	mov	r0, r9
 80133ea:	f000 fd07 	bl	8013dfc <__multadd>
 80133ee:	4605      	mov	r5, r0
 80133f0:	e7f0      	b.n	80133d4 <_dtoa_r+0xad4>
 80133f2:	f1bb 0f00 	cmp.w	fp, #0
 80133f6:	bfcc      	ite	gt
 80133f8:	465e      	movgt	r6, fp
 80133fa:	2601      	movle	r6, #1
 80133fc:	4456      	add	r6, sl
 80133fe:	2700      	movs	r7, #0
 8013400:	9902      	ldr	r1, [sp, #8]
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	2201      	movs	r2, #1
 8013406:	4648      	mov	r0, r9
 8013408:	f000 fee6 	bl	80141d8 <__lshift>
 801340c:	4621      	mov	r1, r4
 801340e:	9002      	str	r0, [sp, #8]
 8013410:	f000 ff4e 	bl	80142b0 <__mcmp>
 8013414:	2800      	cmp	r0, #0
 8013416:	dcb4      	bgt.n	8013382 <_dtoa_r+0xa82>
 8013418:	d102      	bne.n	8013420 <_dtoa_r+0xb20>
 801341a:	9b00      	ldr	r3, [sp, #0]
 801341c:	07db      	lsls	r3, r3, #31
 801341e:	d4b0      	bmi.n	8013382 <_dtoa_r+0xa82>
 8013420:	4633      	mov	r3, r6
 8013422:	461e      	mov	r6, r3
 8013424:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013428:	2a30      	cmp	r2, #48	@ 0x30
 801342a:	d0fa      	beq.n	8013422 <_dtoa_r+0xb22>
 801342c:	e4b5      	b.n	8012d9a <_dtoa_r+0x49a>
 801342e:	459a      	cmp	sl, r3
 8013430:	d1a8      	bne.n	8013384 <_dtoa_r+0xa84>
 8013432:	2331      	movs	r3, #49	@ 0x31
 8013434:	f108 0801 	add.w	r8, r8, #1
 8013438:	f88a 3000 	strb.w	r3, [sl]
 801343c:	e4ad      	b.n	8012d9a <_dtoa_r+0x49a>
 801343e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013440:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801349c <_dtoa_r+0xb9c>
 8013444:	b11b      	cbz	r3, 801344e <_dtoa_r+0xb4e>
 8013446:	f10a 0308 	add.w	r3, sl, #8
 801344a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801344c:	6013      	str	r3, [r2, #0]
 801344e:	4650      	mov	r0, sl
 8013450:	b017      	add	sp, #92	@ 0x5c
 8013452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013456:	9b07      	ldr	r3, [sp, #28]
 8013458:	2b01      	cmp	r3, #1
 801345a:	f77f ae2e 	ble.w	80130ba <_dtoa_r+0x7ba>
 801345e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013460:	9308      	str	r3, [sp, #32]
 8013462:	2001      	movs	r0, #1
 8013464:	e64d      	b.n	8013102 <_dtoa_r+0x802>
 8013466:	f1bb 0f00 	cmp.w	fp, #0
 801346a:	f77f aed9 	ble.w	8013220 <_dtoa_r+0x920>
 801346e:	4656      	mov	r6, sl
 8013470:	9802      	ldr	r0, [sp, #8]
 8013472:	4621      	mov	r1, r4
 8013474:	f7ff f9ba 	bl	80127ec <quorem>
 8013478:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801347c:	f806 3b01 	strb.w	r3, [r6], #1
 8013480:	eba6 020a 	sub.w	r2, r6, sl
 8013484:	4593      	cmp	fp, r2
 8013486:	ddb4      	ble.n	80133f2 <_dtoa_r+0xaf2>
 8013488:	9902      	ldr	r1, [sp, #8]
 801348a:	2300      	movs	r3, #0
 801348c:	220a      	movs	r2, #10
 801348e:	4648      	mov	r0, r9
 8013490:	f000 fcb4 	bl	8013dfc <__multadd>
 8013494:	9002      	str	r0, [sp, #8]
 8013496:	e7eb      	b.n	8013470 <_dtoa_r+0xb70>
 8013498:	080176c0 	.word	0x080176c0
 801349c:	0801765b 	.word	0x0801765b

080134a0 <_free_r>:
 80134a0:	b538      	push	{r3, r4, r5, lr}
 80134a2:	4605      	mov	r5, r0
 80134a4:	2900      	cmp	r1, #0
 80134a6:	d041      	beq.n	801352c <_free_r+0x8c>
 80134a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134ac:	1f0c      	subs	r4, r1, #4
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	bfb8      	it	lt
 80134b2:	18e4      	addlt	r4, r4, r3
 80134b4:	f000 fc34 	bl	8013d20 <__malloc_lock>
 80134b8:	4a1d      	ldr	r2, [pc, #116]	@ (8013530 <_free_r+0x90>)
 80134ba:	6813      	ldr	r3, [r2, #0]
 80134bc:	b933      	cbnz	r3, 80134cc <_free_r+0x2c>
 80134be:	6063      	str	r3, [r4, #4]
 80134c0:	6014      	str	r4, [r2, #0]
 80134c2:	4628      	mov	r0, r5
 80134c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134c8:	f000 bc30 	b.w	8013d2c <__malloc_unlock>
 80134cc:	42a3      	cmp	r3, r4
 80134ce:	d908      	bls.n	80134e2 <_free_r+0x42>
 80134d0:	6820      	ldr	r0, [r4, #0]
 80134d2:	1821      	adds	r1, r4, r0
 80134d4:	428b      	cmp	r3, r1
 80134d6:	bf01      	itttt	eq
 80134d8:	6819      	ldreq	r1, [r3, #0]
 80134da:	685b      	ldreq	r3, [r3, #4]
 80134dc:	1809      	addeq	r1, r1, r0
 80134de:	6021      	streq	r1, [r4, #0]
 80134e0:	e7ed      	b.n	80134be <_free_r+0x1e>
 80134e2:	461a      	mov	r2, r3
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	b10b      	cbz	r3, 80134ec <_free_r+0x4c>
 80134e8:	42a3      	cmp	r3, r4
 80134ea:	d9fa      	bls.n	80134e2 <_free_r+0x42>
 80134ec:	6811      	ldr	r1, [r2, #0]
 80134ee:	1850      	adds	r0, r2, r1
 80134f0:	42a0      	cmp	r0, r4
 80134f2:	d10b      	bne.n	801350c <_free_r+0x6c>
 80134f4:	6820      	ldr	r0, [r4, #0]
 80134f6:	4401      	add	r1, r0
 80134f8:	1850      	adds	r0, r2, r1
 80134fa:	4283      	cmp	r3, r0
 80134fc:	6011      	str	r1, [r2, #0]
 80134fe:	d1e0      	bne.n	80134c2 <_free_r+0x22>
 8013500:	6818      	ldr	r0, [r3, #0]
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	6053      	str	r3, [r2, #4]
 8013506:	4408      	add	r0, r1
 8013508:	6010      	str	r0, [r2, #0]
 801350a:	e7da      	b.n	80134c2 <_free_r+0x22>
 801350c:	d902      	bls.n	8013514 <_free_r+0x74>
 801350e:	230c      	movs	r3, #12
 8013510:	602b      	str	r3, [r5, #0]
 8013512:	e7d6      	b.n	80134c2 <_free_r+0x22>
 8013514:	6820      	ldr	r0, [r4, #0]
 8013516:	1821      	adds	r1, r4, r0
 8013518:	428b      	cmp	r3, r1
 801351a:	bf04      	itt	eq
 801351c:	6819      	ldreq	r1, [r3, #0]
 801351e:	685b      	ldreq	r3, [r3, #4]
 8013520:	6063      	str	r3, [r4, #4]
 8013522:	bf04      	itt	eq
 8013524:	1809      	addeq	r1, r1, r0
 8013526:	6021      	streq	r1, [r4, #0]
 8013528:	6054      	str	r4, [r2, #4]
 801352a:	e7ca      	b.n	80134c2 <_free_r+0x22>
 801352c:	bd38      	pop	{r3, r4, r5, pc}
 801352e:	bf00      	nop
 8013530:	20006d44 	.word	0x20006d44

08013534 <rshift>:
 8013534:	6903      	ldr	r3, [r0, #16]
 8013536:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801353a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801353e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013542:	f100 0414 	add.w	r4, r0, #20
 8013546:	dd45      	ble.n	80135d4 <rshift+0xa0>
 8013548:	f011 011f 	ands.w	r1, r1, #31
 801354c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013550:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013554:	d10c      	bne.n	8013570 <rshift+0x3c>
 8013556:	f100 0710 	add.w	r7, r0, #16
 801355a:	4629      	mov	r1, r5
 801355c:	42b1      	cmp	r1, r6
 801355e:	d334      	bcc.n	80135ca <rshift+0x96>
 8013560:	1a9b      	subs	r3, r3, r2
 8013562:	009b      	lsls	r3, r3, #2
 8013564:	1eea      	subs	r2, r5, #3
 8013566:	4296      	cmp	r6, r2
 8013568:	bf38      	it	cc
 801356a:	2300      	movcc	r3, #0
 801356c:	4423      	add	r3, r4
 801356e:	e015      	b.n	801359c <rshift+0x68>
 8013570:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013574:	f1c1 0820 	rsb	r8, r1, #32
 8013578:	40cf      	lsrs	r7, r1
 801357a:	f105 0e04 	add.w	lr, r5, #4
 801357e:	46a1      	mov	r9, r4
 8013580:	4576      	cmp	r6, lr
 8013582:	46f4      	mov	ip, lr
 8013584:	d815      	bhi.n	80135b2 <rshift+0x7e>
 8013586:	1a9a      	subs	r2, r3, r2
 8013588:	0092      	lsls	r2, r2, #2
 801358a:	3a04      	subs	r2, #4
 801358c:	3501      	adds	r5, #1
 801358e:	42ae      	cmp	r6, r5
 8013590:	bf38      	it	cc
 8013592:	2200      	movcc	r2, #0
 8013594:	18a3      	adds	r3, r4, r2
 8013596:	50a7      	str	r7, [r4, r2]
 8013598:	b107      	cbz	r7, 801359c <rshift+0x68>
 801359a:	3304      	adds	r3, #4
 801359c:	1b1a      	subs	r2, r3, r4
 801359e:	42a3      	cmp	r3, r4
 80135a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80135a4:	bf08      	it	eq
 80135a6:	2300      	moveq	r3, #0
 80135a8:	6102      	str	r2, [r0, #16]
 80135aa:	bf08      	it	eq
 80135ac:	6143      	streq	r3, [r0, #20]
 80135ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135b2:	f8dc c000 	ldr.w	ip, [ip]
 80135b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80135ba:	ea4c 0707 	orr.w	r7, ip, r7
 80135be:	f849 7b04 	str.w	r7, [r9], #4
 80135c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80135c6:	40cf      	lsrs	r7, r1
 80135c8:	e7da      	b.n	8013580 <rshift+0x4c>
 80135ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80135ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80135d2:	e7c3      	b.n	801355c <rshift+0x28>
 80135d4:	4623      	mov	r3, r4
 80135d6:	e7e1      	b.n	801359c <rshift+0x68>

080135d8 <__hexdig_fun>:
 80135d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80135dc:	2b09      	cmp	r3, #9
 80135de:	d802      	bhi.n	80135e6 <__hexdig_fun+0xe>
 80135e0:	3820      	subs	r0, #32
 80135e2:	b2c0      	uxtb	r0, r0
 80135e4:	4770      	bx	lr
 80135e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80135ea:	2b05      	cmp	r3, #5
 80135ec:	d801      	bhi.n	80135f2 <__hexdig_fun+0x1a>
 80135ee:	3847      	subs	r0, #71	@ 0x47
 80135f0:	e7f7      	b.n	80135e2 <__hexdig_fun+0xa>
 80135f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80135f6:	2b05      	cmp	r3, #5
 80135f8:	d801      	bhi.n	80135fe <__hexdig_fun+0x26>
 80135fa:	3827      	subs	r0, #39	@ 0x27
 80135fc:	e7f1      	b.n	80135e2 <__hexdig_fun+0xa>
 80135fe:	2000      	movs	r0, #0
 8013600:	4770      	bx	lr
	...

08013604 <__gethex>:
 8013604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013608:	b085      	sub	sp, #20
 801360a:	468a      	mov	sl, r1
 801360c:	9302      	str	r3, [sp, #8]
 801360e:	680b      	ldr	r3, [r1, #0]
 8013610:	9001      	str	r0, [sp, #4]
 8013612:	4690      	mov	r8, r2
 8013614:	1c9c      	adds	r4, r3, #2
 8013616:	46a1      	mov	r9, r4
 8013618:	f814 0b01 	ldrb.w	r0, [r4], #1
 801361c:	2830      	cmp	r0, #48	@ 0x30
 801361e:	d0fa      	beq.n	8013616 <__gethex+0x12>
 8013620:	eba9 0303 	sub.w	r3, r9, r3
 8013624:	f1a3 0b02 	sub.w	fp, r3, #2
 8013628:	f7ff ffd6 	bl	80135d8 <__hexdig_fun>
 801362c:	4605      	mov	r5, r0
 801362e:	2800      	cmp	r0, #0
 8013630:	d168      	bne.n	8013704 <__gethex+0x100>
 8013632:	49a0      	ldr	r1, [pc, #640]	@ (80138b4 <__gethex+0x2b0>)
 8013634:	2201      	movs	r2, #1
 8013636:	4648      	mov	r0, r9
 8013638:	f7fe ffbb 	bl	80125b2 <strncmp>
 801363c:	4607      	mov	r7, r0
 801363e:	2800      	cmp	r0, #0
 8013640:	d167      	bne.n	8013712 <__gethex+0x10e>
 8013642:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013646:	4626      	mov	r6, r4
 8013648:	f7ff ffc6 	bl	80135d8 <__hexdig_fun>
 801364c:	2800      	cmp	r0, #0
 801364e:	d062      	beq.n	8013716 <__gethex+0x112>
 8013650:	4623      	mov	r3, r4
 8013652:	7818      	ldrb	r0, [r3, #0]
 8013654:	2830      	cmp	r0, #48	@ 0x30
 8013656:	4699      	mov	r9, r3
 8013658:	f103 0301 	add.w	r3, r3, #1
 801365c:	d0f9      	beq.n	8013652 <__gethex+0x4e>
 801365e:	f7ff ffbb 	bl	80135d8 <__hexdig_fun>
 8013662:	fab0 f580 	clz	r5, r0
 8013666:	096d      	lsrs	r5, r5, #5
 8013668:	f04f 0b01 	mov.w	fp, #1
 801366c:	464a      	mov	r2, r9
 801366e:	4616      	mov	r6, r2
 8013670:	3201      	adds	r2, #1
 8013672:	7830      	ldrb	r0, [r6, #0]
 8013674:	f7ff ffb0 	bl	80135d8 <__hexdig_fun>
 8013678:	2800      	cmp	r0, #0
 801367a:	d1f8      	bne.n	801366e <__gethex+0x6a>
 801367c:	498d      	ldr	r1, [pc, #564]	@ (80138b4 <__gethex+0x2b0>)
 801367e:	2201      	movs	r2, #1
 8013680:	4630      	mov	r0, r6
 8013682:	f7fe ff96 	bl	80125b2 <strncmp>
 8013686:	2800      	cmp	r0, #0
 8013688:	d13f      	bne.n	801370a <__gethex+0x106>
 801368a:	b944      	cbnz	r4, 801369e <__gethex+0x9a>
 801368c:	1c74      	adds	r4, r6, #1
 801368e:	4622      	mov	r2, r4
 8013690:	4616      	mov	r6, r2
 8013692:	3201      	adds	r2, #1
 8013694:	7830      	ldrb	r0, [r6, #0]
 8013696:	f7ff ff9f 	bl	80135d8 <__hexdig_fun>
 801369a:	2800      	cmp	r0, #0
 801369c:	d1f8      	bne.n	8013690 <__gethex+0x8c>
 801369e:	1ba4      	subs	r4, r4, r6
 80136a0:	00a7      	lsls	r7, r4, #2
 80136a2:	7833      	ldrb	r3, [r6, #0]
 80136a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80136a8:	2b50      	cmp	r3, #80	@ 0x50
 80136aa:	d13e      	bne.n	801372a <__gethex+0x126>
 80136ac:	7873      	ldrb	r3, [r6, #1]
 80136ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80136b0:	d033      	beq.n	801371a <__gethex+0x116>
 80136b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80136b4:	d034      	beq.n	8013720 <__gethex+0x11c>
 80136b6:	1c71      	adds	r1, r6, #1
 80136b8:	2400      	movs	r4, #0
 80136ba:	7808      	ldrb	r0, [r1, #0]
 80136bc:	f7ff ff8c 	bl	80135d8 <__hexdig_fun>
 80136c0:	1e43      	subs	r3, r0, #1
 80136c2:	b2db      	uxtb	r3, r3
 80136c4:	2b18      	cmp	r3, #24
 80136c6:	d830      	bhi.n	801372a <__gethex+0x126>
 80136c8:	f1a0 0210 	sub.w	r2, r0, #16
 80136cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80136d0:	f7ff ff82 	bl	80135d8 <__hexdig_fun>
 80136d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80136d8:	fa5f fc8c 	uxtb.w	ip, ip
 80136dc:	f1bc 0f18 	cmp.w	ip, #24
 80136e0:	f04f 030a 	mov.w	r3, #10
 80136e4:	d91e      	bls.n	8013724 <__gethex+0x120>
 80136e6:	b104      	cbz	r4, 80136ea <__gethex+0xe6>
 80136e8:	4252      	negs	r2, r2
 80136ea:	4417      	add	r7, r2
 80136ec:	f8ca 1000 	str.w	r1, [sl]
 80136f0:	b1ed      	cbz	r5, 801372e <__gethex+0x12a>
 80136f2:	f1bb 0f00 	cmp.w	fp, #0
 80136f6:	bf0c      	ite	eq
 80136f8:	2506      	moveq	r5, #6
 80136fa:	2500      	movne	r5, #0
 80136fc:	4628      	mov	r0, r5
 80136fe:	b005      	add	sp, #20
 8013700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013704:	2500      	movs	r5, #0
 8013706:	462c      	mov	r4, r5
 8013708:	e7b0      	b.n	801366c <__gethex+0x68>
 801370a:	2c00      	cmp	r4, #0
 801370c:	d1c7      	bne.n	801369e <__gethex+0x9a>
 801370e:	4627      	mov	r7, r4
 8013710:	e7c7      	b.n	80136a2 <__gethex+0x9e>
 8013712:	464e      	mov	r6, r9
 8013714:	462f      	mov	r7, r5
 8013716:	2501      	movs	r5, #1
 8013718:	e7c3      	b.n	80136a2 <__gethex+0x9e>
 801371a:	2400      	movs	r4, #0
 801371c:	1cb1      	adds	r1, r6, #2
 801371e:	e7cc      	b.n	80136ba <__gethex+0xb6>
 8013720:	2401      	movs	r4, #1
 8013722:	e7fb      	b.n	801371c <__gethex+0x118>
 8013724:	fb03 0002 	mla	r0, r3, r2, r0
 8013728:	e7ce      	b.n	80136c8 <__gethex+0xc4>
 801372a:	4631      	mov	r1, r6
 801372c:	e7de      	b.n	80136ec <__gethex+0xe8>
 801372e:	eba6 0309 	sub.w	r3, r6, r9
 8013732:	3b01      	subs	r3, #1
 8013734:	4629      	mov	r1, r5
 8013736:	2b07      	cmp	r3, #7
 8013738:	dc0a      	bgt.n	8013750 <__gethex+0x14c>
 801373a:	9801      	ldr	r0, [sp, #4]
 801373c:	f000 fafc 	bl	8013d38 <_Balloc>
 8013740:	4604      	mov	r4, r0
 8013742:	b940      	cbnz	r0, 8013756 <__gethex+0x152>
 8013744:	4b5c      	ldr	r3, [pc, #368]	@ (80138b8 <__gethex+0x2b4>)
 8013746:	4602      	mov	r2, r0
 8013748:	21e4      	movs	r1, #228	@ 0xe4
 801374a:	485c      	ldr	r0, [pc, #368]	@ (80138bc <__gethex+0x2b8>)
 801374c:	f7ff f830 	bl	80127b0 <__assert_func>
 8013750:	3101      	adds	r1, #1
 8013752:	105b      	asrs	r3, r3, #1
 8013754:	e7ef      	b.n	8013736 <__gethex+0x132>
 8013756:	f100 0a14 	add.w	sl, r0, #20
 801375a:	2300      	movs	r3, #0
 801375c:	4655      	mov	r5, sl
 801375e:	469b      	mov	fp, r3
 8013760:	45b1      	cmp	r9, r6
 8013762:	d337      	bcc.n	80137d4 <__gethex+0x1d0>
 8013764:	f845 bb04 	str.w	fp, [r5], #4
 8013768:	eba5 050a 	sub.w	r5, r5, sl
 801376c:	10ad      	asrs	r5, r5, #2
 801376e:	6125      	str	r5, [r4, #16]
 8013770:	4658      	mov	r0, fp
 8013772:	f000 fbd3 	bl	8013f1c <__hi0bits>
 8013776:	016d      	lsls	r5, r5, #5
 8013778:	f8d8 6000 	ldr.w	r6, [r8]
 801377c:	1a2d      	subs	r5, r5, r0
 801377e:	42b5      	cmp	r5, r6
 8013780:	dd54      	ble.n	801382c <__gethex+0x228>
 8013782:	1bad      	subs	r5, r5, r6
 8013784:	4629      	mov	r1, r5
 8013786:	4620      	mov	r0, r4
 8013788:	f000 ff5f 	bl	801464a <__any_on>
 801378c:	4681      	mov	r9, r0
 801378e:	b178      	cbz	r0, 80137b0 <__gethex+0x1ac>
 8013790:	1e6b      	subs	r3, r5, #1
 8013792:	1159      	asrs	r1, r3, #5
 8013794:	f003 021f 	and.w	r2, r3, #31
 8013798:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801379c:	f04f 0901 	mov.w	r9, #1
 80137a0:	fa09 f202 	lsl.w	r2, r9, r2
 80137a4:	420a      	tst	r2, r1
 80137a6:	d003      	beq.n	80137b0 <__gethex+0x1ac>
 80137a8:	454b      	cmp	r3, r9
 80137aa:	dc36      	bgt.n	801381a <__gethex+0x216>
 80137ac:	f04f 0902 	mov.w	r9, #2
 80137b0:	4629      	mov	r1, r5
 80137b2:	4620      	mov	r0, r4
 80137b4:	f7ff febe 	bl	8013534 <rshift>
 80137b8:	442f      	add	r7, r5
 80137ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80137be:	42bb      	cmp	r3, r7
 80137c0:	da42      	bge.n	8013848 <__gethex+0x244>
 80137c2:	9801      	ldr	r0, [sp, #4]
 80137c4:	4621      	mov	r1, r4
 80137c6:	f000 faf7 	bl	8013db8 <_Bfree>
 80137ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80137cc:	2300      	movs	r3, #0
 80137ce:	6013      	str	r3, [r2, #0]
 80137d0:	25a3      	movs	r5, #163	@ 0xa3
 80137d2:	e793      	b.n	80136fc <__gethex+0xf8>
 80137d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80137d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80137da:	d012      	beq.n	8013802 <__gethex+0x1fe>
 80137dc:	2b20      	cmp	r3, #32
 80137de:	d104      	bne.n	80137ea <__gethex+0x1e6>
 80137e0:	f845 bb04 	str.w	fp, [r5], #4
 80137e4:	f04f 0b00 	mov.w	fp, #0
 80137e8:	465b      	mov	r3, fp
 80137ea:	7830      	ldrb	r0, [r6, #0]
 80137ec:	9303      	str	r3, [sp, #12]
 80137ee:	f7ff fef3 	bl	80135d8 <__hexdig_fun>
 80137f2:	9b03      	ldr	r3, [sp, #12]
 80137f4:	f000 000f 	and.w	r0, r0, #15
 80137f8:	4098      	lsls	r0, r3
 80137fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80137fe:	3304      	adds	r3, #4
 8013800:	e7ae      	b.n	8013760 <__gethex+0x15c>
 8013802:	45b1      	cmp	r9, r6
 8013804:	d8ea      	bhi.n	80137dc <__gethex+0x1d8>
 8013806:	492b      	ldr	r1, [pc, #172]	@ (80138b4 <__gethex+0x2b0>)
 8013808:	9303      	str	r3, [sp, #12]
 801380a:	2201      	movs	r2, #1
 801380c:	4630      	mov	r0, r6
 801380e:	f7fe fed0 	bl	80125b2 <strncmp>
 8013812:	9b03      	ldr	r3, [sp, #12]
 8013814:	2800      	cmp	r0, #0
 8013816:	d1e1      	bne.n	80137dc <__gethex+0x1d8>
 8013818:	e7a2      	b.n	8013760 <__gethex+0x15c>
 801381a:	1ea9      	subs	r1, r5, #2
 801381c:	4620      	mov	r0, r4
 801381e:	f000 ff14 	bl	801464a <__any_on>
 8013822:	2800      	cmp	r0, #0
 8013824:	d0c2      	beq.n	80137ac <__gethex+0x1a8>
 8013826:	f04f 0903 	mov.w	r9, #3
 801382a:	e7c1      	b.n	80137b0 <__gethex+0x1ac>
 801382c:	da09      	bge.n	8013842 <__gethex+0x23e>
 801382e:	1b75      	subs	r5, r6, r5
 8013830:	4621      	mov	r1, r4
 8013832:	9801      	ldr	r0, [sp, #4]
 8013834:	462a      	mov	r2, r5
 8013836:	f000 fccf 	bl	80141d8 <__lshift>
 801383a:	1b7f      	subs	r7, r7, r5
 801383c:	4604      	mov	r4, r0
 801383e:	f100 0a14 	add.w	sl, r0, #20
 8013842:	f04f 0900 	mov.w	r9, #0
 8013846:	e7b8      	b.n	80137ba <__gethex+0x1b6>
 8013848:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801384c:	42bd      	cmp	r5, r7
 801384e:	dd6f      	ble.n	8013930 <__gethex+0x32c>
 8013850:	1bed      	subs	r5, r5, r7
 8013852:	42ae      	cmp	r6, r5
 8013854:	dc34      	bgt.n	80138c0 <__gethex+0x2bc>
 8013856:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801385a:	2b02      	cmp	r3, #2
 801385c:	d022      	beq.n	80138a4 <__gethex+0x2a0>
 801385e:	2b03      	cmp	r3, #3
 8013860:	d024      	beq.n	80138ac <__gethex+0x2a8>
 8013862:	2b01      	cmp	r3, #1
 8013864:	d115      	bne.n	8013892 <__gethex+0x28e>
 8013866:	42ae      	cmp	r6, r5
 8013868:	d113      	bne.n	8013892 <__gethex+0x28e>
 801386a:	2e01      	cmp	r6, #1
 801386c:	d10b      	bne.n	8013886 <__gethex+0x282>
 801386e:	9a02      	ldr	r2, [sp, #8]
 8013870:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013874:	6013      	str	r3, [r2, #0]
 8013876:	2301      	movs	r3, #1
 8013878:	6123      	str	r3, [r4, #16]
 801387a:	f8ca 3000 	str.w	r3, [sl]
 801387e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013880:	2562      	movs	r5, #98	@ 0x62
 8013882:	601c      	str	r4, [r3, #0]
 8013884:	e73a      	b.n	80136fc <__gethex+0xf8>
 8013886:	1e71      	subs	r1, r6, #1
 8013888:	4620      	mov	r0, r4
 801388a:	f000 fede 	bl	801464a <__any_on>
 801388e:	2800      	cmp	r0, #0
 8013890:	d1ed      	bne.n	801386e <__gethex+0x26a>
 8013892:	9801      	ldr	r0, [sp, #4]
 8013894:	4621      	mov	r1, r4
 8013896:	f000 fa8f 	bl	8013db8 <_Bfree>
 801389a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801389c:	2300      	movs	r3, #0
 801389e:	6013      	str	r3, [r2, #0]
 80138a0:	2550      	movs	r5, #80	@ 0x50
 80138a2:	e72b      	b.n	80136fc <__gethex+0xf8>
 80138a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d1f3      	bne.n	8013892 <__gethex+0x28e>
 80138aa:	e7e0      	b.n	801386e <__gethex+0x26a>
 80138ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d1dd      	bne.n	801386e <__gethex+0x26a>
 80138b2:	e7ee      	b.n	8013892 <__gethex+0x28e>
 80138b4:	08017570 	.word	0x08017570
 80138b8:	080176c0 	.word	0x080176c0
 80138bc:	080176d1 	.word	0x080176d1
 80138c0:	1e6f      	subs	r7, r5, #1
 80138c2:	f1b9 0f00 	cmp.w	r9, #0
 80138c6:	d130      	bne.n	801392a <__gethex+0x326>
 80138c8:	b127      	cbz	r7, 80138d4 <__gethex+0x2d0>
 80138ca:	4639      	mov	r1, r7
 80138cc:	4620      	mov	r0, r4
 80138ce:	f000 febc 	bl	801464a <__any_on>
 80138d2:	4681      	mov	r9, r0
 80138d4:	117a      	asrs	r2, r7, #5
 80138d6:	2301      	movs	r3, #1
 80138d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80138dc:	f007 071f 	and.w	r7, r7, #31
 80138e0:	40bb      	lsls	r3, r7
 80138e2:	4213      	tst	r3, r2
 80138e4:	4629      	mov	r1, r5
 80138e6:	4620      	mov	r0, r4
 80138e8:	bf18      	it	ne
 80138ea:	f049 0902 	orrne.w	r9, r9, #2
 80138ee:	f7ff fe21 	bl	8013534 <rshift>
 80138f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80138f6:	1b76      	subs	r6, r6, r5
 80138f8:	2502      	movs	r5, #2
 80138fa:	f1b9 0f00 	cmp.w	r9, #0
 80138fe:	d047      	beq.n	8013990 <__gethex+0x38c>
 8013900:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013904:	2b02      	cmp	r3, #2
 8013906:	d015      	beq.n	8013934 <__gethex+0x330>
 8013908:	2b03      	cmp	r3, #3
 801390a:	d017      	beq.n	801393c <__gethex+0x338>
 801390c:	2b01      	cmp	r3, #1
 801390e:	d109      	bne.n	8013924 <__gethex+0x320>
 8013910:	f019 0f02 	tst.w	r9, #2
 8013914:	d006      	beq.n	8013924 <__gethex+0x320>
 8013916:	f8da 3000 	ldr.w	r3, [sl]
 801391a:	ea49 0903 	orr.w	r9, r9, r3
 801391e:	f019 0f01 	tst.w	r9, #1
 8013922:	d10e      	bne.n	8013942 <__gethex+0x33e>
 8013924:	f045 0510 	orr.w	r5, r5, #16
 8013928:	e032      	b.n	8013990 <__gethex+0x38c>
 801392a:	f04f 0901 	mov.w	r9, #1
 801392e:	e7d1      	b.n	80138d4 <__gethex+0x2d0>
 8013930:	2501      	movs	r5, #1
 8013932:	e7e2      	b.n	80138fa <__gethex+0x2f6>
 8013934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013936:	f1c3 0301 	rsb	r3, r3, #1
 801393a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801393c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801393e:	2b00      	cmp	r3, #0
 8013940:	d0f0      	beq.n	8013924 <__gethex+0x320>
 8013942:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013946:	f104 0314 	add.w	r3, r4, #20
 801394a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801394e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013952:	f04f 0c00 	mov.w	ip, #0
 8013956:	4618      	mov	r0, r3
 8013958:	f853 2b04 	ldr.w	r2, [r3], #4
 801395c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013960:	d01b      	beq.n	801399a <__gethex+0x396>
 8013962:	3201      	adds	r2, #1
 8013964:	6002      	str	r2, [r0, #0]
 8013966:	2d02      	cmp	r5, #2
 8013968:	f104 0314 	add.w	r3, r4, #20
 801396c:	d13c      	bne.n	80139e8 <__gethex+0x3e4>
 801396e:	f8d8 2000 	ldr.w	r2, [r8]
 8013972:	3a01      	subs	r2, #1
 8013974:	42b2      	cmp	r2, r6
 8013976:	d109      	bne.n	801398c <__gethex+0x388>
 8013978:	1171      	asrs	r1, r6, #5
 801397a:	2201      	movs	r2, #1
 801397c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013980:	f006 061f 	and.w	r6, r6, #31
 8013984:	fa02 f606 	lsl.w	r6, r2, r6
 8013988:	421e      	tst	r6, r3
 801398a:	d13a      	bne.n	8013a02 <__gethex+0x3fe>
 801398c:	f045 0520 	orr.w	r5, r5, #32
 8013990:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013992:	601c      	str	r4, [r3, #0]
 8013994:	9b02      	ldr	r3, [sp, #8]
 8013996:	601f      	str	r7, [r3, #0]
 8013998:	e6b0      	b.n	80136fc <__gethex+0xf8>
 801399a:	4299      	cmp	r1, r3
 801399c:	f843 cc04 	str.w	ip, [r3, #-4]
 80139a0:	d8d9      	bhi.n	8013956 <__gethex+0x352>
 80139a2:	68a3      	ldr	r3, [r4, #8]
 80139a4:	459b      	cmp	fp, r3
 80139a6:	db17      	blt.n	80139d8 <__gethex+0x3d4>
 80139a8:	6861      	ldr	r1, [r4, #4]
 80139aa:	9801      	ldr	r0, [sp, #4]
 80139ac:	3101      	adds	r1, #1
 80139ae:	f000 f9c3 	bl	8013d38 <_Balloc>
 80139b2:	4681      	mov	r9, r0
 80139b4:	b918      	cbnz	r0, 80139be <__gethex+0x3ba>
 80139b6:	4b1a      	ldr	r3, [pc, #104]	@ (8013a20 <__gethex+0x41c>)
 80139b8:	4602      	mov	r2, r0
 80139ba:	2184      	movs	r1, #132	@ 0x84
 80139bc:	e6c5      	b.n	801374a <__gethex+0x146>
 80139be:	6922      	ldr	r2, [r4, #16]
 80139c0:	3202      	adds	r2, #2
 80139c2:	f104 010c 	add.w	r1, r4, #12
 80139c6:	0092      	lsls	r2, r2, #2
 80139c8:	300c      	adds	r0, #12
 80139ca:	f7fe fed8 	bl	801277e <memcpy>
 80139ce:	4621      	mov	r1, r4
 80139d0:	9801      	ldr	r0, [sp, #4]
 80139d2:	f000 f9f1 	bl	8013db8 <_Bfree>
 80139d6:	464c      	mov	r4, r9
 80139d8:	6923      	ldr	r3, [r4, #16]
 80139da:	1c5a      	adds	r2, r3, #1
 80139dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80139e0:	6122      	str	r2, [r4, #16]
 80139e2:	2201      	movs	r2, #1
 80139e4:	615a      	str	r2, [r3, #20]
 80139e6:	e7be      	b.n	8013966 <__gethex+0x362>
 80139e8:	6922      	ldr	r2, [r4, #16]
 80139ea:	455a      	cmp	r2, fp
 80139ec:	dd0b      	ble.n	8013a06 <__gethex+0x402>
 80139ee:	2101      	movs	r1, #1
 80139f0:	4620      	mov	r0, r4
 80139f2:	f7ff fd9f 	bl	8013534 <rshift>
 80139f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80139fa:	3701      	adds	r7, #1
 80139fc:	42bb      	cmp	r3, r7
 80139fe:	f6ff aee0 	blt.w	80137c2 <__gethex+0x1be>
 8013a02:	2501      	movs	r5, #1
 8013a04:	e7c2      	b.n	801398c <__gethex+0x388>
 8013a06:	f016 061f 	ands.w	r6, r6, #31
 8013a0a:	d0fa      	beq.n	8013a02 <__gethex+0x3fe>
 8013a0c:	4453      	add	r3, sl
 8013a0e:	f1c6 0620 	rsb	r6, r6, #32
 8013a12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013a16:	f000 fa81 	bl	8013f1c <__hi0bits>
 8013a1a:	42b0      	cmp	r0, r6
 8013a1c:	dbe7      	blt.n	80139ee <__gethex+0x3ea>
 8013a1e:	e7f0      	b.n	8013a02 <__gethex+0x3fe>
 8013a20:	080176c0 	.word	0x080176c0

08013a24 <L_shift>:
 8013a24:	f1c2 0208 	rsb	r2, r2, #8
 8013a28:	0092      	lsls	r2, r2, #2
 8013a2a:	b570      	push	{r4, r5, r6, lr}
 8013a2c:	f1c2 0620 	rsb	r6, r2, #32
 8013a30:	6843      	ldr	r3, [r0, #4]
 8013a32:	6804      	ldr	r4, [r0, #0]
 8013a34:	fa03 f506 	lsl.w	r5, r3, r6
 8013a38:	432c      	orrs	r4, r5
 8013a3a:	40d3      	lsrs	r3, r2
 8013a3c:	6004      	str	r4, [r0, #0]
 8013a3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013a42:	4288      	cmp	r0, r1
 8013a44:	d3f4      	bcc.n	8013a30 <L_shift+0xc>
 8013a46:	bd70      	pop	{r4, r5, r6, pc}

08013a48 <__match>:
 8013a48:	b530      	push	{r4, r5, lr}
 8013a4a:	6803      	ldr	r3, [r0, #0]
 8013a4c:	3301      	adds	r3, #1
 8013a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a52:	b914      	cbnz	r4, 8013a5a <__match+0x12>
 8013a54:	6003      	str	r3, [r0, #0]
 8013a56:	2001      	movs	r0, #1
 8013a58:	bd30      	pop	{r4, r5, pc}
 8013a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013a62:	2d19      	cmp	r5, #25
 8013a64:	bf98      	it	ls
 8013a66:	3220      	addls	r2, #32
 8013a68:	42a2      	cmp	r2, r4
 8013a6a:	d0f0      	beq.n	8013a4e <__match+0x6>
 8013a6c:	2000      	movs	r0, #0
 8013a6e:	e7f3      	b.n	8013a58 <__match+0x10>

08013a70 <__hexnan>:
 8013a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a74:	680b      	ldr	r3, [r1, #0]
 8013a76:	6801      	ldr	r1, [r0, #0]
 8013a78:	115e      	asrs	r6, r3, #5
 8013a7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013a7e:	f013 031f 	ands.w	r3, r3, #31
 8013a82:	b087      	sub	sp, #28
 8013a84:	bf18      	it	ne
 8013a86:	3604      	addne	r6, #4
 8013a88:	2500      	movs	r5, #0
 8013a8a:	1f37      	subs	r7, r6, #4
 8013a8c:	4682      	mov	sl, r0
 8013a8e:	4690      	mov	r8, r2
 8013a90:	9301      	str	r3, [sp, #4]
 8013a92:	f846 5c04 	str.w	r5, [r6, #-4]
 8013a96:	46b9      	mov	r9, r7
 8013a98:	463c      	mov	r4, r7
 8013a9a:	9502      	str	r5, [sp, #8]
 8013a9c:	46ab      	mov	fp, r5
 8013a9e:	784a      	ldrb	r2, [r1, #1]
 8013aa0:	1c4b      	adds	r3, r1, #1
 8013aa2:	9303      	str	r3, [sp, #12]
 8013aa4:	b342      	cbz	r2, 8013af8 <__hexnan+0x88>
 8013aa6:	4610      	mov	r0, r2
 8013aa8:	9105      	str	r1, [sp, #20]
 8013aaa:	9204      	str	r2, [sp, #16]
 8013aac:	f7ff fd94 	bl	80135d8 <__hexdig_fun>
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	d151      	bne.n	8013b58 <__hexnan+0xe8>
 8013ab4:	9a04      	ldr	r2, [sp, #16]
 8013ab6:	9905      	ldr	r1, [sp, #20]
 8013ab8:	2a20      	cmp	r2, #32
 8013aba:	d818      	bhi.n	8013aee <__hexnan+0x7e>
 8013abc:	9b02      	ldr	r3, [sp, #8]
 8013abe:	459b      	cmp	fp, r3
 8013ac0:	dd13      	ble.n	8013aea <__hexnan+0x7a>
 8013ac2:	454c      	cmp	r4, r9
 8013ac4:	d206      	bcs.n	8013ad4 <__hexnan+0x64>
 8013ac6:	2d07      	cmp	r5, #7
 8013ac8:	dc04      	bgt.n	8013ad4 <__hexnan+0x64>
 8013aca:	462a      	mov	r2, r5
 8013acc:	4649      	mov	r1, r9
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f7ff ffa8 	bl	8013a24 <L_shift>
 8013ad4:	4544      	cmp	r4, r8
 8013ad6:	d952      	bls.n	8013b7e <__hexnan+0x10e>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	f1a4 0904 	sub.w	r9, r4, #4
 8013ade:	f844 3c04 	str.w	r3, [r4, #-4]
 8013ae2:	f8cd b008 	str.w	fp, [sp, #8]
 8013ae6:	464c      	mov	r4, r9
 8013ae8:	461d      	mov	r5, r3
 8013aea:	9903      	ldr	r1, [sp, #12]
 8013aec:	e7d7      	b.n	8013a9e <__hexnan+0x2e>
 8013aee:	2a29      	cmp	r2, #41	@ 0x29
 8013af0:	d157      	bne.n	8013ba2 <__hexnan+0x132>
 8013af2:	3102      	adds	r1, #2
 8013af4:	f8ca 1000 	str.w	r1, [sl]
 8013af8:	f1bb 0f00 	cmp.w	fp, #0
 8013afc:	d051      	beq.n	8013ba2 <__hexnan+0x132>
 8013afe:	454c      	cmp	r4, r9
 8013b00:	d206      	bcs.n	8013b10 <__hexnan+0xa0>
 8013b02:	2d07      	cmp	r5, #7
 8013b04:	dc04      	bgt.n	8013b10 <__hexnan+0xa0>
 8013b06:	462a      	mov	r2, r5
 8013b08:	4649      	mov	r1, r9
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	f7ff ff8a 	bl	8013a24 <L_shift>
 8013b10:	4544      	cmp	r4, r8
 8013b12:	d936      	bls.n	8013b82 <__hexnan+0x112>
 8013b14:	f1a8 0204 	sub.w	r2, r8, #4
 8013b18:	4623      	mov	r3, r4
 8013b1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8013b1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013b22:	429f      	cmp	r7, r3
 8013b24:	d2f9      	bcs.n	8013b1a <__hexnan+0xaa>
 8013b26:	1b3b      	subs	r3, r7, r4
 8013b28:	f023 0303 	bic.w	r3, r3, #3
 8013b2c:	3304      	adds	r3, #4
 8013b2e:	3401      	adds	r4, #1
 8013b30:	3e03      	subs	r6, #3
 8013b32:	42b4      	cmp	r4, r6
 8013b34:	bf88      	it	hi
 8013b36:	2304      	movhi	r3, #4
 8013b38:	4443      	add	r3, r8
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	f843 2b04 	str.w	r2, [r3], #4
 8013b40:	429f      	cmp	r7, r3
 8013b42:	d2fb      	bcs.n	8013b3c <__hexnan+0xcc>
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	b91b      	cbnz	r3, 8013b50 <__hexnan+0xe0>
 8013b48:	4547      	cmp	r7, r8
 8013b4a:	d128      	bne.n	8013b9e <__hexnan+0x12e>
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	603b      	str	r3, [r7, #0]
 8013b50:	2005      	movs	r0, #5
 8013b52:	b007      	add	sp, #28
 8013b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b58:	3501      	adds	r5, #1
 8013b5a:	2d08      	cmp	r5, #8
 8013b5c:	f10b 0b01 	add.w	fp, fp, #1
 8013b60:	dd06      	ble.n	8013b70 <__hexnan+0x100>
 8013b62:	4544      	cmp	r4, r8
 8013b64:	d9c1      	bls.n	8013aea <__hexnan+0x7a>
 8013b66:	2300      	movs	r3, #0
 8013b68:	f844 3c04 	str.w	r3, [r4, #-4]
 8013b6c:	2501      	movs	r5, #1
 8013b6e:	3c04      	subs	r4, #4
 8013b70:	6822      	ldr	r2, [r4, #0]
 8013b72:	f000 000f 	and.w	r0, r0, #15
 8013b76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013b7a:	6020      	str	r0, [r4, #0]
 8013b7c:	e7b5      	b.n	8013aea <__hexnan+0x7a>
 8013b7e:	2508      	movs	r5, #8
 8013b80:	e7b3      	b.n	8013aea <__hexnan+0x7a>
 8013b82:	9b01      	ldr	r3, [sp, #4]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d0dd      	beq.n	8013b44 <__hexnan+0xd4>
 8013b88:	f1c3 0320 	rsb	r3, r3, #32
 8013b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8013b90:	40da      	lsrs	r2, r3
 8013b92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013b96:	4013      	ands	r3, r2
 8013b98:	f846 3c04 	str.w	r3, [r6, #-4]
 8013b9c:	e7d2      	b.n	8013b44 <__hexnan+0xd4>
 8013b9e:	3f04      	subs	r7, #4
 8013ba0:	e7d0      	b.n	8013b44 <__hexnan+0xd4>
 8013ba2:	2004      	movs	r0, #4
 8013ba4:	e7d5      	b.n	8013b52 <__hexnan+0xe2>
	...

08013ba8 <malloc>:
 8013ba8:	4b02      	ldr	r3, [pc, #8]	@ (8013bb4 <malloc+0xc>)
 8013baa:	4601      	mov	r1, r0
 8013bac:	6818      	ldr	r0, [r3, #0]
 8013bae:	f000 b825 	b.w	8013bfc <_malloc_r>
 8013bb2:	bf00      	nop
 8013bb4:	200001a0 	.word	0x200001a0

08013bb8 <sbrk_aligned>:
 8013bb8:	b570      	push	{r4, r5, r6, lr}
 8013bba:	4e0f      	ldr	r6, [pc, #60]	@ (8013bf8 <sbrk_aligned+0x40>)
 8013bbc:	460c      	mov	r4, r1
 8013bbe:	6831      	ldr	r1, [r6, #0]
 8013bc0:	4605      	mov	r5, r0
 8013bc2:	b911      	cbnz	r1, 8013bca <sbrk_aligned+0x12>
 8013bc4:	f000 ff9e 	bl	8014b04 <_sbrk_r>
 8013bc8:	6030      	str	r0, [r6, #0]
 8013bca:	4621      	mov	r1, r4
 8013bcc:	4628      	mov	r0, r5
 8013bce:	f000 ff99 	bl	8014b04 <_sbrk_r>
 8013bd2:	1c43      	adds	r3, r0, #1
 8013bd4:	d103      	bne.n	8013bde <sbrk_aligned+0x26>
 8013bd6:	f04f 34ff 	mov.w	r4, #4294967295
 8013bda:	4620      	mov	r0, r4
 8013bdc:	bd70      	pop	{r4, r5, r6, pc}
 8013bde:	1cc4      	adds	r4, r0, #3
 8013be0:	f024 0403 	bic.w	r4, r4, #3
 8013be4:	42a0      	cmp	r0, r4
 8013be6:	d0f8      	beq.n	8013bda <sbrk_aligned+0x22>
 8013be8:	1a21      	subs	r1, r4, r0
 8013bea:	4628      	mov	r0, r5
 8013bec:	f000 ff8a 	bl	8014b04 <_sbrk_r>
 8013bf0:	3001      	adds	r0, #1
 8013bf2:	d1f2      	bne.n	8013bda <sbrk_aligned+0x22>
 8013bf4:	e7ef      	b.n	8013bd6 <sbrk_aligned+0x1e>
 8013bf6:	bf00      	nop
 8013bf8:	20006d40 	.word	0x20006d40

08013bfc <_malloc_r>:
 8013bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c00:	1ccd      	adds	r5, r1, #3
 8013c02:	f025 0503 	bic.w	r5, r5, #3
 8013c06:	3508      	adds	r5, #8
 8013c08:	2d0c      	cmp	r5, #12
 8013c0a:	bf38      	it	cc
 8013c0c:	250c      	movcc	r5, #12
 8013c0e:	2d00      	cmp	r5, #0
 8013c10:	4606      	mov	r6, r0
 8013c12:	db01      	blt.n	8013c18 <_malloc_r+0x1c>
 8013c14:	42a9      	cmp	r1, r5
 8013c16:	d904      	bls.n	8013c22 <_malloc_r+0x26>
 8013c18:	230c      	movs	r3, #12
 8013c1a:	6033      	str	r3, [r6, #0]
 8013c1c:	2000      	movs	r0, #0
 8013c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013cf8 <_malloc_r+0xfc>
 8013c26:	f000 f87b 	bl	8013d20 <__malloc_lock>
 8013c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8013c2e:	461c      	mov	r4, r3
 8013c30:	bb44      	cbnz	r4, 8013c84 <_malloc_r+0x88>
 8013c32:	4629      	mov	r1, r5
 8013c34:	4630      	mov	r0, r6
 8013c36:	f7ff ffbf 	bl	8013bb8 <sbrk_aligned>
 8013c3a:	1c43      	adds	r3, r0, #1
 8013c3c:	4604      	mov	r4, r0
 8013c3e:	d158      	bne.n	8013cf2 <_malloc_r+0xf6>
 8013c40:	f8d8 4000 	ldr.w	r4, [r8]
 8013c44:	4627      	mov	r7, r4
 8013c46:	2f00      	cmp	r7, #0
 8013c48:	d143      	bne.n	8013cd2 <_malloc_r+0xd6>
 8013c4a:	2c00      	cmp	r4, #0
 8013c4c:	d04b      	beq.n	8013ce6 <_malloc_r+0xea>
 8013c4e:	6823      	ldr	r3, [r4, #0]
 8013c50:	4639      	mov	r1, r7
 8013c52:	4630      	mov	r0, r6
 8013c54:	eb04 0903 	add.w	r9, r4, r3
 8013c58:	f000 ff54 	bl	8014b04 <_sbrk_r>
 8013c5c:	4581      	cmp	r9, r0
 8013c5e:	d142      	bne.n	8013ce6 <_malloc_r+0xea>
 8013c60:	6821      	ldr	r1, [r4, #0]
 8013c62:	1a6d      	subs	r5, r5, r1
 8013c64:	4629      	mov	r1, r5
 8013c66:	4630      	mov	r0, r6
 8013c68:	f7ff ffa6 	bl	8013bb8 <sbrk_aligned>
 8013c6c:	3001      	adds	r0, #1
 8013c6e:	d03a      	beq.n	8013ce6 <_malloc_r+0xea>
 8013c70:	6823      	ldr	r3, [r4, #0]
 8013c72:	442b      	add	r3, r5
 8013c74:	6023      	str	r3, [r4, #0]
 8013c76:	f8d8 3000 	ldr.w	r3, [r8]
 8013c7a:	685a      	ldr	r2, [r3, #4]
 8013c7c:	bb62      	cbnz	r2, 8013cd8 <_malloc_r+0xdc>
 8013c7e:	f8c8 7000 	str.w	r7, [r8]
 8013c82:	e00f      	b.n	8013ca4 <_malloc_r+0xa8>
 8013c84:	6822      	ldr	r2, [r4, #0]
 8013c86:	1b52      	subs	r2, r2, r5
 8013c88:	d420      	bmi.n	8013ccc <_malloc_r+0xd0>
 8013c8a:	2a0b      	cmp	r2, #11
 8013c8c:	d917      	bls.n	8013cbe <_malloc_r+0xc2>
 8013c8e:	1961      	adds	r1, r4, r5
 8013c90:	42a3      	cmp	r3, r4
 8013c92:	6025      	str	r5, [r4, #0]
 8013c94:	bf18      	it	ne
 8013c96:	6059      	strne	r1, [r3, #4]
 8013c98:	6863      	ldr	r3, [r4, #4]
 8013c9a:	bf08      	it	eq
 8013c9c:	f8c8 1000 	streq.w	r1, [r8]
 8013ca0:	5162      	str	r2, [r4, r5]
 8013ca2:	604b      	str	r3, [r1, #4]
 8013ca4:	4630      	mov	r0, r6
 8013ca6:	f000 f841 	bl	8013d2c <__malloc_unlock>
 8013caa:	f104 000b 	add.w	r0, r4, #11
 8013cae:	1d23      	adds	r3, r4, #4
 8013cb0:	f020 0007 	bic.w	r0, r0, #7
 8013cb4:	1ac2      	subs	r2, r0, r3
 8013cb6:	bf1c      	itt	ne
 8013cb8:	1a1b      	subne	r3, r3, r0
 8013cba:	50a3      	strne	r3, [r4, r2]
 8013cbc:	e7af      	b.n	8013c1e <_malloc_r+0x22>
 8013cbe:	6862      	ldr	r2, [r4, #4]
 8013cc0:	42a3      	cmp	r3, r4
 8013cc2:	bf0c      	ite	eq
 8013cc4:	f8c8 2000 	streq.w	r2, [r8]
 8013cc8:	605a      	strne	r2, [r3, #4]
 8013cca:	e7eb      	b.n	8013ca4 <_malloc_r+0xa8>
 8013ccc:	4623      	mov	r3, r4
 8013cce:	6864      	ldr	r4, [r4, #4]
 8013cd0:	e7ae      	b.n	8013c30 <_malloc_r+0x34>
 8013cd2:	463c      	mov	r4, r7
 8013cd4:	687f      	ldr	r7, [r7, #4]
 8013cd6:	e7b6      	b.n	8013c46 <_malloc_r+0x4a>
 8013cd8:	461a      	mov	r2, r3
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	42a3      	cmp	r3, r4
 8013cde:	d1fb      	bne.n	8013cd8 <_malloc_r+0xdc>
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	6053      	str	r3, [r2, #4]
 8013ce4:	e7de      	b.n	8013ca4 <_malloc_r+0xa8>
 8013ce6:	230c      	movs	r3, #12
 8013ce8:	6033      	str	r3, [r6, #0]
 8013cea:	4630      	mov	r0, r6
 8013cec:	f000 f81e 	bl	8013d2c <__malloc_unlock>
 8013cf0:	e794      	b.n	8013c1c <_malloc_r+0x20>
 8013cf2:	6005      	str	r5, [r0, #0]
 8013cf4:	e7d6      	b.n	8013ca4 <_malloc_r+0xa8>
 8013cf6:	bf00      	nop
 8013cf8:	20006d44 	.word	0x20006d44

08013cfc <__ascii_mbtowc>:
 8013cfc:	b082      	sub	sp, #8
 8013cfe:	b901      	cbnz	r1, 8013d02 <__ascii_mbtowc+0x6>
 8013d00:	a901      	add	r1, sp, #4
 8013d02:	b142      	cbz	r2, 8013d16 <__ascii_mbtowc+0x1a>
 8013d04:	b14b      	cbz	r3, 8013d1a <__ascii_mbtowc+0x1e>
 8013d06:	7813      	ldrb	r3, [r2, #0]
 8013d08:	600b      	str	r3, [r1, #0]
 8013d0a:	7812      	ldrb	r2, [r2, #0]
 8013d0c:	1e10      	subs	r0, r2, #0
 8013d0e:	bf18      	it	ne
 8013d10:	2001      	movne	r0, #1
 8013d12:	b002      	add	sp, #8
 8013d14:	4770      	bx	lr
 8013d16:	4610      	mov	r0, r2
 8013d18:	e7fb      	b.n	8013d12 <__ascii_mbtowc+0x16>
 8013d1a:	f06f 0001 	mvn.w	r0, #1
 8013d1e:	e7f8      	b.n	8013d12 <__ascii_mbtowc+0x16>

08013d20 <__malloc_lock>:
 8013d20:	4801      	ldr	r0, [pc, #4]	@ (8013d28 <__malloc_lock+0x8>)
 8013d22:	f7fe bd2a 	b.w	801277a <__retarget_lock_acquire_recursive>
 8013d26:	bf00      	nop
 8013d28:	20006d3c 	.word	0x20006d3c

08013d2c <__malloc_unlock>:
 8013d2c:	4801      	ldr	r0, [pc, #4]	@ (8013d34 <__malloc_unlock+0x8>)
 8013d2e:	f7fe bd25 	b.w	801277c <__retarget_lock_release_recursive>
 8013d32:	bf00      	nop
 8013d34:	20006d3c 	.word	0x20006d3c

08013d38 <_Balloc>:
 8013d38:	b570      	push	{r4, r5, r6, lr}
 8013d3a:	69c6      	ldr	r6, [r0, #28]
 8013d3c:	4604      	mov	r4, r0
 8013d3e:	460d      	mov	r5, r1
 8013d40:	b976      	cbnz	r6, 8013d60 <_Balloc+0x28>
 8013d42:	2010      	movs	r0, #16
 8013d44:	f7ff ff30 	bl	8013ba8 <malloc>
 8013d48:	4602      	mov	r2, r0
 8013d4a:	61e0      	str	r0, [r4, #28]
 8013d4c:	b920      	cbnz	r0, 8013d58 <_Balloc+0x20>
 8013d4e:	4b18      	ldr	r3, [pc, #96]	@ (8013db0 <_Balloc+0x78>)
 8013d50:	4818      	ldr	r0, [pc, #96]	@ (8013db4 <_Balloc+0x7c>)
 8013d52:	216b      	movs	r1, #107	@ 0x6b
 8013d54:	f7fe fd2c 	bl	80127b0 <__assert_func>
 8013d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d5c:	6006      	str	r6, [r0, #0]
 8013d5e:	60c6      	str	r6, [r0, #12]
 8013d60:	69e6      	ldr	r6, [r4, #28]
 8013d62:	68f3      	ldr	r3, [r6, #12]
 8013d64:	b183      	cbz	r3, 8013d88 <_Balloc+0x50>
 8013d66:	69e3      	ldr	r3, [r4, #28]
 8013d68:	68db      	ldr	r3, [r3, #12]
 8013d6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013d6e:	b9b8      	cbnz	r0, 8013da0 <_Balloc+0x68>
 8013d70:	2101      	movs	r1, #1
 8013d72:	fa01 f605 	lsl.w	r6, r1, r5
 8013d76:	1d72      	adds	r2, r6, #5
 8013d78:	0092      	lsls	r2, r2, #2
 8013d7a:	4620      	mov	r0, r4
 8013d7c:	f000 fed9 	bl	8014b32 <_calloc_r>
 8013d80:	b160      	cbz	r0, 8013d9c <_Balloc+0x64>
 8013d82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013d86:	e00e      	b.n	8013da6 <_Balloc+0x6e>
 8013d88:	2221      	movs	r2, #33	@ 0x21
 8013d8a:	2104      	movs	r1, #4
 8013d8c:	4620      	mov	r0, r4
 8013d8e:	f000 fed0 	bl	8014b32 <_calloc_r>
 8013d92:	69e3      	ldr	r3, [r4, #28]
 8013d94:	60f0      	str	r0, [r6, #12]
 8013d96:	68db      	ldr	r3, [r3, #12]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d1e4      	bne.n	8013d66 <_Balloc+0x2e>
 8013d9c:	2000      	movs	r0, #0
 8013d9e:	bd70      	pop	{r4, r5, r6, pc}
 8013da0:	6802      	ldr	r2, [r0, #0]
 8013da2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013da6:	2300      	movs	r3, #0
 8013da8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013dac:	e7f7      	b.n	8013d9e <_Balloc+0x66>
 8013dae:	bf00      	nop
 8013db0:	080175a6 	.word	0x080175a6
 8013db4:	08017731 	.word	0x08017731

08013db8 <_Bfree>:
 8013db8:	b570      	push	{r4, r5, r6, lr}
 8013dba:	69c6      	ldr	r6, [r0, #28]
 8013dbc:	4605      	mov	r5, r0
 8013dbe:	460c      	mov	r4, r1
 8013dc0:	b976      	cbnz	r6, 8013de0 <_Bfree+0x28>
 8013dc2:	2010      	movs	r0, #16
 8013dc4:	f7ff fef0 	bl	8013ba8 <malloc>
 8013dc8:	4602      	mov	r2, r0
 8013dca:	61e8      	str	r0, [r5, #28]
 8013dcc:	b920      	cbnz	r0, 8013dd8 <_Bfree+0x20>
 8013dce:	4b09      	ldr	r3, [pc, #36]	@ (8013df4 <_Bfree+0x3c>)
 8013dd0:	4809      	ldr	r0, [pc, #36]	@ (8013df8 <_Bfree+0x40>)
 8013dd2:	218f      	movs	r1, #143	@ 0x8f
 8013dd4:	f7fe fcec 	bl	80127b0 <__assert_func>
 8013dd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ddc:	6006      	str	r6, [r0, #0]
 8013dde:	60c6      	str	r6, [r0, #12]
 8013de0:	b13c      	cbz	r4, 8013df2 <_Bfree+0x3a>
 8013de2:	69eb      	ldr	r3, [r5, #28]
 8013de4:	6862      	ldr	r2, [r4, #4]
 8013de6:	68db      	ldr	r3, [r3, #12]
 8013de8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013dec:	6021      	str	r1, [r4, #0]
 8013dee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013df2:	bd70      	pop	{r4, r5, r6, pc}
 8013df4:	080175a6 	.word	0x080175a6
 8013df8:	08017731 	.word	0x08017731

08013dfc <__multadd>:
 8013dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e00:	690d      	ldr	r5, [r1, #16]
 8013e02:	4607      	mov	r7, r0
 8013e04:	460c      	mov	r4, r1
 8013e06:	461e      	mov	r6, r3
 8013e08:	f101 0c14 	add.w	ip, r1, #20
 8013e0c:	2000      	movs	r0, #0
 8013e0e:	f8dc 3000 	ldr.w	r3, [ip]
 8013e12:	b299      	uxth	r1, r3
 8013e14:	fb02 6101 	mla	r1, r2, r1, r6
 8013e18:	0c1e      	lsrs	r6, r3, #16
 8013e1a:	0c0b      	lsrs	r3, r1, #16
 8013e1c:	fb02 3306 	mla	r3, r2, r6, r3
 8013e20:	b289      	uxth	r1, r1
 8013e22:	3001      	adds	r0, #1
 8013e24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013e28:	4285      	cmp	r5, r0
 8013e2a:	f84c 1b04 	str.w	r1, [ip], #4
 8013e2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013e32:	dcec      	bgt.n	8013e0e <__multadd+0x12>
 8013e34:	b30e      	cbz	r6, 8013e7a <__multadd+0x7e>
 8013e36:	68a3      	ldr	r3, [r4, #8]
 8013e38:	42ab      	cmp	r3, r5
 8013e3a:	dc19      	bgt.n	8013e70 <__multadd+0x74>
 8013e3c:	6861      	ldr	r1, [r4, #4]
 8013e3e:	4638      	mov	r0, r7
 8013e40:	3101      	adds	r1, #1
 8013e42:	f7ff ff79 	bl	8013d38 <_Balloc>
 8013e46:	4680      	mov	r8, r0
 8013e48:	b928      	cbnz	r0, 8013e56 <__multadd+0x5a>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8013e80 <__multadd+0x84>)
 8013e4e:	480d      	ldr	r0, [pc, #52]	@ (8013e84 <__multadd+0x88>)
 8013e50:	21ba      	movs	r1, #186	@ 0xba
 8013e52:	f7fe fcad 	bl	80127b0 <__assert_func>
 8013e56:	6922      	ldr	r2, [r4, #16]
 8013e58:	3202      	adds	r2, #2
 8013e5a:	f104 010c 	add.w	r1, r4, #12
 8013e5e:	0092      	lsls	r2, r2, #2
 8013e60:	300c      	adds	r0, #12
 8013e62:	f7fe fc8c 	bl	801277e <memcpy>
 8013e66:	4621      	mov	r1, r4
 8013e68:	4638      	mov	r0, r7
 8013e6a:	f7ff ffa5 	bl	8013db8 <_Bfree>
 8013e6e:	4644      	mov	r4, r8
 8013e70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e74:	3501      	adds	r5, #1
 8013e76:	615e      	str	r6, [r3, #20]
 8013e78:	6125      	str	r5, [r4, #16]
 8013e7a:	4620      	mov	r0, r4
 8013e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e80:	080176c0 	.word	0x080176c0
 8013e84:	08017731 	.word	0x08017731

08013e88 <__s2b>:
 8013e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e8c:	460c      	mov	r4, r1
 8013e8e:	4615      	mov	r5, r2
 8013e90:	461f      	mov	r7, r3
 8013e92:	2209      	movs	r2, #9
 8013e94:	3308      	adds	r3, #8
 8013e96:	4606      	mov	r6, r0
 8013e98:	fb93 f3f2 	sdiv	r3, r3, r2
 8013e9c:	2100      	movs	r1, #0
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	db09      	blt.n	8013eb8 <__s2b+0x30>
 8013ea4:	4630      	mov	r0, r6
 8013ea6:	f7ff ff47 	bl	8013d38 <_Balloc>
 8013eaa:	b940      	cbnz	r0, 8013ebe <__s2b+0x36>
 8013eac:	4602      	mov	r2, r0
 8013eae:	4b19      	ldr	r3, [pc, #100]	@ (8013f14 <__s2b+0x8c>)
 8013eb0:	4819      	ldr	r0, [pc, #100]	@ (8013f18 <__s2b+0x90>)
 8013eb2:	21d3      	movs	r1, #211	@ 0xd3
 8013eb4:	f7fe fc7c 	bl	80127b0 <__assert_func>
 8013eb8:	0052      	lsls	r2, r2, #1
 8013eba:	3101      	adds	r1, #1
 8013ebc:	e7f0      	b.n	8013ea0 <__s2b+0x18>
 8013ebe:	9b08      	ldr	r3, [sp, #32]
 8013ec0:	6143      	str	r3, [r0, #20]
 8013ec2:	2d09      	cmp	r5, #9
 8013ec4:	f04f 0301 	mov.w	r3, #1
 8013ec8:	6103      	str	r3, [r0, #16]
 8013eca:	dd16      	ble.n	8013efa <__s2b+0x72>
 8013ecc:	f104 0909 	add.w	r9, r4, #9
 8013ed0:	46c8      	mov	r8, r9
 8013ed2:	442c      	add	r4, r5
 8013ed4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013ed8:	4601      	mov	r1, r0
 8013eda:	3b30      	subs	r3, #48	@ 0x30
 8013edc:	220a      	movs	r2, #10
 8013ede:	4630      	mov	r0, r6
 8013ee0:	f7ff ff8c 	bl	8013dfc <__multadd>
 8013ee4:	45a0      	cmp	r8, r4
 8013ee6:	d1f5      	bne.n	8013ed4 <__s2b+0x4c>
 8013ee8:	f1a5 0408 	sub.w	r4, r5, #8
 8013eec:	444c      	add	r4, r9
 8013eee:	1b2d      	subs	r5, r5, r4
 8013ef0:	1963      	adds	r3, r4, r5
 8013ef2:	42bb      	cmp	r3, r7
 8013ef4:	db04      	blt.n	8013f00 <__s2b+0x78>
 8013ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013efa:	340a      	adds	r4, #10
 8013efc:	2509      	movs	r5, #9
 8013efe:	e7f6      	b.n	8013eee <__s2b+0x66>
 8013f00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013f04:	4601      	mov	r1, r0
 8013f06:	3b30      	subs	r3, #48	@ 0x30
 8013f08:	220a      	movs	r2, #10
 8013f0a:	4630      	mov	r0, r6
 8013f0c:	f7ff ff76 	bl	8013dfc <__multadd>
 8013f10:	e7ee      	b.n	8013ef0 <__s2b+0x68>
 8013f12:	bf00      	nop
 8013f14:	080176c0 	.word	0x080176c0
 8013f18:	08017731 	.word	0x08017731

08013f1c <__hi0bits>:
 8013f1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013f20:	4603      	mov	r3, r0
 8013f22:	bf36      	itet	cc
 8013f24:	0403      	lslcc	r3, r0, #16
 8013f26:	2000      	movcs	r0, #0
 8013f28:	2010      	movcc	r0, #16
 8013f2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013f2e:	bf3c      	itt	cc
 8013f30:	021b      	lslcc	r3, r3, #8
 8013f32:	3008      	addcc	r0, #8
 8013f34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013f38:	bf3c      	itt	cc
 8013f3a:	011b      	lslcc	r3, r3, #4
 8013f3c:	3004      	addcc	r0, #4
 8013f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013f42:	bf3c      	itt	cc
 8013f44:	009b      	lslcc	r3, r3, #2
 8013f46:	3002      	addcc	r0, #2
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	db05      	blt.n	8013f58 <__hi0bits+0x3c>
 8013f4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013f50:	f100 0001 	add.w	r0, r0, #1
 8013f54:	bf08      	it	eq
 8013f56:	2020      	moveq	r0, #32
 8013f58:	4770      	bx	lr

08013f5a <__lo0bits>:
 8013f5a:	6803      	ldr	r3, [r0, #0]
 8013f5c:	4602      	mov	r2, r0
 8013f5e:	f013 0007 	ands.w	r0, r3, #7
 8013f62:	d00b      	beq.n	8013f7c <__lo0bits+0x22>
 8013f64:	07d9      	lsls	r1, r3, #31
 8013f66:	d421      	bmi.n	8013fac <__lo0bits+0x52>
 8013f68:	0798      	lsls	r0, r3, #30
 8013f6a:	bf49      	itett	mi
 8013f6c:	085b      	lsrmi	r3, r3, #1
 8013f6e:	089b      	lsrpl	r3, r3, #2
 8013f70:	2001      	movmi	r0, #1
 8013f72:	6013      	strmi	r3, [r2, #0]
 8013f74:	bf5c      	itt	pl
 8013f76:	6013      	strpl	r3, [r2, #0]
 8013f78:	2002      	movpl	r0, #2
 8013f7a:	4770      	bx	lr
 8013f7c:	b299      	uxth	r1, r3
 8013f7e:	b909      	cbnz	r1, 8013f84 <__lo0bits+0x2a>
 8013f80:	0c1b      	lsrs	r3, r3, #16
 8013f82:	2010      	movs	r0, #16
 8013f84:	b2d9      	uxtb	r1, r3
 8013f86:	b909      	cbnz	r1, 8013f8c <__lo0bits+0x32>
 8013f88:	3008      	adds	r0, #8
 8013f8a:	0a1b      	lsrs	r3, r3, #8
 8013f8c:	0719      	lsls	r1, r3, #28
 8013f8e:	bf04      	itt	eq
 8013f90:	091b      	lsreq	r3, r3, #4
 8013f92:	3004      	addeq	r0, #4
 8013f94:	0799      	lsls	r1, r3, #30
 8013f96:	bf04      	itt	eq
 8013f98:	089b      	lsreq	r3, r3, #2
 8013f9a:	3002      	addeq	r0, #2
 8013f9c:	07d9      	lsls	r1, r3, #31
 8013f9e:	d403      	bmi.n	8013fa8 <__lo0bits+0x4e>
 8013fa0:	085b      	lsrs	r3, r3, #1
 8013fa2:	f100 0001 	add.w	r0, r0, #1
 8013fa6:	d003      	beq.n	8013fb0 <__lo0bits+0x56>
 8013fa8:	6013      	str	r3, [r2, #0]
 8013faa:	4770      	bx	lr
 8013fac:	2000      	movs	r0, #0
 8013fae:	4770      	bx	lr
 8013fb0:	2020      	movs	r0, #32
 8013fb2:	4770      	bx	lr

08013fb4 <__i2b>:
 8013fb4:	b510      	push	{r4, lr}
 8013fb6:	460c      	mov	r4, r1
 8013fb8:	2101      	movs	r1, #1
 8013fba:	f7ff febd 	bl	8013d38 <_Balloc>
 8013fbe:	4602      	mov	r2, r0
 8013fc0:	b928      	cbnz	r0, 8013fce <__i2b+0x1a>
 8013fc2:	4b05      	ldr	r3, [pc, #20]	@ (8013fd8 <__i2b+0x24>)
 8013fc4:	4805      	ldr	r0, [pc, #20]	@ (8013fdc <__i2b+0x28>)
 8013fc6:	f240 1145 	movw	r1, #325	@ 0x145
 8013fca:	f7fe fbf1 	bl	80127b0 <__assert_func>
 8013fce:	2301      	movs	r3, #1
 8013fd0:	6144      	str	r4, [r0, #20]
 8013fd2:	6103      	str	r3, [r0, #16]
 8013fd4:	bd10      	pop	{r4, pc}
 8013fd6:	bf00      	nop
 8013fd8:	080176c0 	.word	0x080176c0
 8013fdc:	08017731 	.word	0x08017731

08013fe0 <__multiply>:
 8013fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe4:	4617      	mov	r7, r2
 8013fe6:	690a      	ldr	r2, [r1, #16]
 8013fe8:	693b      	ldr	r3, [r7, #16]
 8013fea:	429a      	cmp	r2, r3
 8013fec:	bfa8      	it	ge
 8013fee:	463b      	movge	r3, r7
 8013ff0:	4689      	mov	r9, r1
 8013ff2:	bfa4      	itt	ge
 8013ff4:	460f      	movge	r7, r1
 8013ff6:	4699      	movge	r9, r3
 8013ff8:	693d      	ldr	r5, [r7, #16]
 8013ffa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	6879      	ldr	r1, [r7, #4]
 8014002:	eb05 060a 	add.w	r6, r5, sl
 8014006:	42b3      	cmp	r3, r6
 8014008:	b085      	sub	sp, #20
 801400a:	bfb8      	it	lt
 801400c:	3101      	addlt	r1, #1
 801400e:	f7ff fe93 	bl	8013d38 <_Balloc>
 8014012:	b930      	cbnz	r0, 8014022 <__multiply+0x42>
 8014014:	4602      	mov	r2, r0
 8014016:	4b41      	ldr	r3, [pc, #260]	@ (801411c <__multiply+0x13c>)
 8014018:	4841      	ldr	r0, [pc, #260]	@ (8014120 <__multiply+0x140>)
 801401a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801401e:	f7fe fbc7 	bl	80127b0 <__assert_func>
 8014022:	f100 0414 	add.w	r4, r0, #20
 8014026:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801402a:	4623      	mov	r3, r4
 801402c:	2200      	movs	r2, #0
 801402e:	4573      	cmp	r3, lr
 8014030:	d320      	bcc.n	8014074 <__multiply+0x94>
 8014032:	f107 0814 	add.w	r8, r7, #20
 8014036:	f109 0114 	add.w	r1, r9, #20
 801403a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801403e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8014042:	9302      	str	r3, [sp, #8]
 8014044:	1beb      	subs	r3, r5, r7
 8014046:	3b15      	subs	r3, #21
 8014048:	f023 0303 	bic.w	r3, r3, #3
 801404c:	3304      	adds	r3, #4
 801404e:	3715      	adds	r7, #21
 8014050:	42bd      	cmp	r5, r7
 8014052:	bf38      	it	cc
 8014054:	2304      	movcc	r3, #4
 8014056:	9301      	str	r3, [sp, #4]
 8014058:	9b02      	ldr	r3, [sp, #8]
 801405a:	9103      	str	r1, [sp, #12]
 801405c:	428b      	cmp	r3, r1
 801405e:	d80c      	bhi.n	801407a <__multiply+0x9a>
 8014060:	2e00      	cmp	r6, #0
 8014062:	dd03      	ble.n	801406c <__multiply+0x8c>
 8014064:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014068:	2b00      	cmp	r3, #0
 801406a:	d055      	beq.n	8014118 <__multiply+0x138>
 801406c:	6106      	str	r6, [r0, #16]
 801406e:	b005      	add	sp, #20
 8014070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014074:	f843 2b04 	str.w	r2, [r3], #4
 8014078:	e7d9      	b.n	801402e <__multiply+0x4e>
 801407a:	f8b1 a000 	ldrh.w	sl, [r1]
 801407e:	f1ba 0f00 	cmp.w	sl, #0
 8014082:	d01f      	beq.n	80140c4 <__multiply+0xe4>
 8014084:	46c4      	mov	ip, r8
 8014086:	46a1      	mov	r9, r4
 8014088:	2700      	movs	r7, #0
 801408a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801408e:	f8d9 3000 	ldr.w	r3, [r9]
 8014092:	fa1f fb82 	uxth.w	fp, r2
 8014096:	b29b      	uxth	r3, r3
 8014098:	fb0a 330b 	mla	r3, sl, fp, r3
 801409c:	443b      	add	r3, r7
 801409e:	f8d9 7000 	ldr.w	r7, [r9]
 80140a2:	0c12      	lsrs	r2, r2, #16
 80140a4:	0c3f      	lsrs	r7, r7, #16
 80140a6:	fb0a 7202 	mla	r2, sl, r2, r7
 80140aa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80140b4:	4565      	cmp	r5, ip
 80140b6:	f849 3b04 	str.w	r3, [r9], #4
 80140ba:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80140be:	d8e4      	bhi.n	801408a <__multiply+0xaa>
 80140c0:	9b01      	ldr	r3, [sp, #4]
 80140c2:	50e7      	str	r7, [r4, r3]
 80140c4:	9b03      	ldr	r3, [sp, #12]
 80140c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80140ca:	3104      	adds	r1, #4
 80140cc:	f1b9 0f00 	cmp.w	r9, #0
 80140d0:	d020      	beq.n	8014114 <__multiply+0x134>
 80140d2:	6823      	ldr	r3, [r4, #0]
 80140d4:	4647      	mov	r7, r8
 80140d6:	46a4      	mov	ip, r4
 80140d8:	f04f 0a00 	mov.w	sl, #0
 80140dc:	f8b7 b000 	ldrh.w	fp, [r7]
 80140e0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80140e4:	fb09 220b 	mla	r2, r9, fp, r2
 80140e8:	4452      	add	r2, sl
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80140f0:	f84c 3b04 	str.w	r3, [ip], #4
 80140f4:	f857 3b04 	ldr.w	r3, [r7], #4
 80140f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80140fc:	f8bc 3000 	ldrh.w	r3, [ip]
 8014100:	fb09 330a 	mla	r3, r9, sl, r3
 8014104:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014108:	42bd      	cmp	r5, r7
 801410a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801410e:	d8e5      	bhi.n	80140dc <__multiply+0xfc>
 8014110:	9a01      	ldr	r2, [sp, #4]
 8014112:	50a3      	str	r3, [r4, r2]
 8014114:	3404      	adds	r4, #4
 8014116:	e79f      	b.n	8014058 <__multiply+0x78>
 8014118:	3e01      	subs	r6, #1
 801411a:	e7a1      	b.n	8014060 <__multiply+0x80>
 801411c:	080176c0 	.word	0x080176c0
 8014120:	08017731 	.word	0x08017731

08014124 <__pow5mult>:
 8014124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014128:	4615      	mov	r5, r2
 801412a:	f012 0203 	ands.w	r2, r2, #3
 801412e:	4607      	mov	r7, r0
 8014130:	460e      	mov	r6, r1
 8014132:	d007      	beq.n	8014144 <__pow5mult+0x20>
 8014134:	4c25      	ldr	r4, [pc, #148]	@ (80141cc <__pow5mult+0xa8>)
 8014136:	3a01      	subs	r2, #1
 8014138:	2300      	movs	r3, #0
 801413a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801413e:	f7ff fe5d 	bl	8013dfc <__multadd>
 8014142:	4606      	mov	r6, r0
 8014144:	10ad      	asrs	r5, r5, #2
 8014146:	d03d      	beq.n	80141c4 <__pow5mult+0xa0>
 8014148:	69fc      	ldr	r4, [r7, #28]
 801414a:	b97c      	cbnz	r4, 801416c <__pow5mult+0x48>
 801414c:	2010      	movs	r0, #16
 801414e:	f7ff fd2b 	bl	8013ba8 <malloc>
 8014152:	4602      	mov	r2, r0
 8014154:	61f8      	str	r0, [r7, #28]
 8014156:	b928      	cbnz	r0, 8014164 <__pow5mult+0x40>
 8014158:	4b1d      	ldr	r3, [pc, #116]	@ (80141d0 <__pow5mult+0xac>)
 801415a:	481e      	ldr	r0, [pc, #120]	@ (80141d4 <__pow5mult+0xb0>)
 801415c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014160:	f7fe fb26 	bl	80127b0 <__assert_func>
 8014164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014168:	6004      	str	r4, [r0, #0]
 801416a:	60c4      	str	r4, [r0, #12]
 801416c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014170:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014174:	b94c      	cbnz	r4, 801418a <__pow5mult+0x66>
 8014176:	f240 2171 	movw	r1, #625	@ 0x271
 801417a:	4638      	mov	r0, r7
 801417c:	f7ff ff1a 	bl	8013fb4 <__i2b>
 8014180:	2300      	movs	r3, #0
 8014182:	f8c8 0008 	str.w	r0, [r8, #8]
 8014186:	4604      	mov	r4, r0
 8014188:	6003      	str	r3, [r0, #0]
 801418a:	f04f 0900 	mov.w	r9, #0
 801418e:	07eb      	lsls	r3, r5, #31
 8014190:	d50a      	bpl.n	80141a8 <__pow5mult+0x84>
 8014192:	4631      	mov	r1, r6
 8014194:	4622      	mov	r2, r4
 8014196:	4638      	mov	r0, r7
 8014198:	f7ff ff22 	bl	8013fe0 <__multiply>
 801419c:	4631      	mov	r1, r6
 801419e:	4680      	mov	r8, r0
 80141a0:	4638      	mov	r0, r7
 80141a2:	f7ff fe09 	bl	8013db8 <_Bfree>
 80141a6:	4646      	mov	r6, r8
 80141a8:	106d      	asrs	r5, r5, #1
 80141aa:	d00b      	beq.n	80141c4 <__pow5mult+0xa0>
 80141ac:	6820      	ldr	r0, [r4, #0]
 80141ae:	b938      	cbnz	r0, 80141c0 <__pow5mult+0x9c>
 80141b0:	4622      	mov	r2, r4
 80141b2:	4621      	mov	r1, r4
 80141b4:	4638      	mov	r0, r7
 80141b6:	f7ff ff13 	bl	8013fe0 <__multiply>
 80141ba:	6020      	str	r0, [r4, #0]
 80141bc:	f8c0 9000 	str.w	r9, [r0]
 80141c0:	4604      	mov	r4, r0
 80141c2:	e7e4      	b.n	801418e <__pow5mult+0x6a>
 80141c4:	4630      	mov	r0, r6
 80141c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141ca:	bf00      	nop
 80141cc:	080177f0 	.word	0x080177f0
 80141d0:	080175a6 	.word	0x080175a6
 80141d4:	08017731 	.word	0x08017731

080141d8 <__lshift>:
 80141d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141dc:	460c      	mov	r4, r1
 80141de:	6849      	ldr	r1, [r1, #4]
 80141e0:	6923      	ldr	r3, [r4, #16]
 80141e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80141e6:	68a3      	ldr	r3, [r4, #8]
 80141e8:	4607      	mov	r7, r0
 80141ea:	4691      	mov	r9, r2
 80141ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80141f0:	f108 0601 	add.w	r6, r8, #1
 80141f4:	42b3      	cmp	r3, r6
 80141f6:	db0b      	blt.n	8014210 <__lshift+0x38>
 80141f8:	4638      	mov	r0, r7
 80141fa:	f7ff fd9d 	bl	8013d38 <_Balloc>
 80141fe:	4605      	mov	r5, r0
 8014200:	b948      	cbnz	r0, 8014216 <__lshift+0x3e>
 8014202:	4602      	mov	r2, r0
 8014204:	4b28      	ldr	r3, [pc, #160]	@ (80142a8 <__lshift+0xd0>)
 8014206:	4829      	ldr	r0, [pc, #164]	@ (80142ac <__lshift+0xd4>)
 8014208:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801420c:	f7fe fad0 	bl	80127b0 <__assert_func>
 8014210:	3101      	adds	r1, #1
 8014212:	005b      	lsls	r3, r3, #1
 8014214:	e7ee      	b.n	80141f4 <__lshift+0x1c>
 8014216:	2300      	movs	r3, #0
 8014218:	f100 0114 	add.w	r1, r0, #20
 801421c:	f100 0210 	add.w	r2, r0, #16
 8014220:	4618      	mov	r0, r3
 8014222:	4553      	cmp	r3, sl
 8014224:	db33      	blt.n	801428e <__lshift+0xb6>
 8014226:	6920      	ldr	r0, [r4, #16]
 8014228:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801422c:	f104 0314 	add.w	r3, r4, #20
 8014230:	f019 091f 	ands.w	r9, r9, #31
 8014234:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014238:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801423c:	d02b      	beq.n	8014296 <__lshift+0xbe>
 801423e:	f1c9 0e20 	rsb	lr, r9, #32
 8014242:	468a      	mov	sl, r1
 8014244:	2200      	movs	r2, #0
 8014246:	6818      	ldr	r0, [r3, #0]
 8014248:	fa00 f009 	lsl.w	r0, r0, r9
 801424c:	4310      	orrs	r0, r2
 801424e:	f84a 0b04 	str.w	r0, [sl], #4
 8014252:	f853 2b04 	ldr.w	r2, [r3], #4
 8014256:	459c      	cmp	ip, r3
 8014258:	fa22 f20e 	lsr.w	r2, r2, lr
 801425c:	d8f3      	bhi.n	8014246 <__lshift+0x6e>
 801425e:	ebac 0304 	sub.w	r3, ip, r4
 8014262:	3b15      	subs	r3, #21
 8014264:	f023 0303 	bic.w	r3, r3, #3
 8014268:	3304      	adds	r3, #4
 801426a:	f104 0015 	add.w	r0, r4, #21
 801426e:	4560      	cmp	r0, ip
 8014270:	bf88      	it	hi
 8014272:	2304      	movhi	r3, #4
 8014274:	50ca      	str	r2, [r1, r3]
 8014276:	b10a      	cbz	r2, 801427c <__lshift+0xa4>
 8014278:	f108 0602 	add.w	r6, r8, #2
 801427c:	3e01      	subs	r6, #1
 801427e:	4638      	mov	r0, r7
 8014280:	612e      	str	r6, [r5, #16]
 8014282:	4621      	mov	r1, r4
 8014284:	f7ff fd98 	bl	8013db8 <_Bfree>
 8014288:	4628      	mov	r0, r5
 801428a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801428e:	f842 0f04 	str.w	r0, [r2, #4]!
 8014292:	3301      	adds	r3, #1
 8014294:	e7c5      	b.n	8014222 <__lshift+0x4a>
 8014296:	3904      	subs	r1, #4
 8014298:	f853 2b04 	ldr.w	r2, [r3], #4
 801429c:	f841 2f04 	str.w	r2, [r1, #4]!
 80142a0:	459c      	cmp	ip, r3
 80142a2:	d8f9      	bhi.n	8014298 <__lshift+0xc0>
 80142a4:	e7ea      	b.n	801427c <__lshift+0xa4>
 80142a6:	bf00      	nop
 80142a8:	080176c0 	.word	0x080176c0
 80142ac:	08017731 	.word	0x08017731

080142b0 <__mcmp>:
 80142b0:	690a      	ldr	r2, [r1, #16]
 80142b2:	4603      	mov	r3, r0
 80142b4:	6900      	ldr	r0, [r0, #16]
 80142b6:	1a80      	subs	r0, r0, r2
 80142b8:	b530      	push	{r4, r5, lr}
 80142ba:	d10e      	bne.n	80142da <__mcmp+0x2a>
 80142bc:	3314      	adds	r3, #20
 80142be:	3114      	adds	r1, #20
 80142c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80142c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80142c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80142cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80142d0:	4295      	cmp	r5, r2
 80142d2:	d003      	beq.n	80142dc <__mcmp+0x2c>
 80142d4:	d205      	bcs.n	80142e2 <__mcmp+0x32>
 80142d6:	f04f 30ff 	mov.w	r0, #4294967295
 80142da:	bd30      	pop	{r4, r5, pc}
 80142dc:	42a3      	cmp	r3, r4
 80142de:	d3f3      	bcc.n	80142c8 <__mcmp+0x18>
 80142e0:	e7fb      	b.n	80142da <__mcmp+0x2a>
 80142e2:	2001      	movs	r0, #1
 80142e4:	e7f9      	b.n	80142da <__mcmp+0x2a>
	...

080142e8 <__mdiff>:
 80142e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142ec:	4689      	mov	r9, r1
 80142ee:	4606      	mov	r6, r0
 80142f0:	4611      	mov	r1, r2
 80142f2:	4648      	mov	r0, r9
 80142f4:	4614      	mov	r4, r2
 80142f6:	f7ff ffdb 	bl	80142b0 <__mcmp>
 80142fa:	1e05      	subs	r5, r0, #0
 80142fc:	d112      	bne.n	8014324 <__mdiff+0x3c>
 80142fe:	4629      	mov	r1, r5
 8014300:	4630      	mov	r0, r6
 8014302:	f7ff fd19 	bl	8013d38 <_Balloc>
 8014306:	4602      	mov	r2, r0
 8014308:	b928      	cbnz	r0, 8014316 <__mdiff+0x2e>
 801430a:	4b3f      	ldr	r3, [pc, #252]	@ (8014408 <__mdiff+0x120>)
 801430c:	f240 2137 	movw	r1, #567	@ 0x237
 8014310:	483e      	ldr	r0, [pc, #248]	@ (801440c <__mdiff+0x124>)
 8014312:	f7fe fa4d 	bl	80127b0 <__assert_func>
 8014316:	2301      	movs	r3, #1
 8014318:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801431c:	4610      	mov	r0, r2
 801431e:	b003      	add	sp, #12
 8014320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014324:	bfbc      	itt	lt
 8014326:	464b      	movlt	r3, r9
 8014328:	46a1      	movlt	r9, r4
 801432a:	4630      	mov	r0, r6
 801432c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014330:	bfba      	itte	lt
 8014332:	461c      	movlt	r4, r3
 8014334:	2501      	movlt	r5, #1
 8014336:	2500      	movge	r5, #0
 8014338:	f7ff fcfe 	bl	8013d38 <_Balloc>
 801433c:	4602      	mov	r2, r0
 801433e:	b918      	cbnz	r0, 8014348 <__mdiff+0x60>
 8014340:	4b31      	ldr	r3, [pc, #196]	@ (8014408 <__mdiff+0x120>)
 8014342:	f240 2145 	movw	r1, #581	@ 0x245
 8014346:	e7e3      	b.n	8014310 <__mdiff+0x28>
 8014348:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801434c:	6926      	ldr	r6, [r4, #16]
 801434e:	60c5      	str	r5, [r0, #12]
 8014350:	f109 0310 	add.w	r3, r9, #16
 8014354:	f109 0514 	add.w	r5, r9, #20
 8014358:	f104 0e14 	add.w	lr, r4, #20
 801435c:	f100 0b14 	add.w	fp, r0, #20
 8014360:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014364:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014368:	9301      	str	r3, [sp, #4]
 801436a:	46d9      	mov	r9, fp
 801436c:	f04f 0c00 	mov.w	ip, #0
 8014370:	9b01      	ldr	r3, [sp, #4]
 8014372:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014376:	f853 af04 	ldr.w	sl, [r3, #4]!
 801437a:	9301      	str	r3, [sp, #4]
 801437c:	fa1f f38a 	uxth.w	r3, sl
 8014380:	4619      	mov	r1, r3
 8014382:	b283      	uxth	r3, r0
 8014384:	1acb      	subs	r3, r1, r3
 8014386:	0c00      	lsrs	r0, r0, #16
 8014388:	4463      	add	r3, ip
 801438a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801438e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014392:	b29b      	uxth	r3, r3
 8014394:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014398:	4576      	cmp	r6, lr
 801439a:	f849 3b04 	str.w	r3, [r9], #4
 801439e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80143a2:	d8e5      	bhi.n	8014370 <__mdiff+0x88>
 80143a4:	1b33      	subs	r3, r6, r4
 80143a6:	3b15      	subs	r3, #21
 80143a8:	f023 0303 	bic.w	r3, r3, #3
 80143ac:	3415      	adds	r4, #21
 80143ae:	3304      	adds	r3, #4
 80143b0:	42a6      	cmp	r6, r4
 80143b2:	bf38      	it	cc
 80143b4:	2304      	movcc	r3, #4
 80143b6:	441d      	add	r5, r3
 80143b8:	445b      	add	r3, fp
 80143ba:	461e      	mov	r6, r3
 80143bc:	462c      	mov	r4, r5
 80143be:	4544      	cmp	r4, r8
 80143c0:	d30e      	bcc.n	80143e0 <__mdiff+0xf8>
 80143c2:	f108 0103 	add.w	r1, r8, #3
 80143c6:	1b49      	subs	r1, r1, r5
 80143c8:	f021 0103 	bic.w	r1, r1, #3
 80143cc:	3d03      	subs	r5, #3
 80143ce:	45a8      	cmp	r8, r5
 80143d0:	bf38      	it	cc
 80143d2:	2100      	movcc	r1, #0
 80143d4:	440b      	add	r3, r1
 80143d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80143da:	b191      	cbz	r1, 8014402 <__mdiff+0x11a>
 80143dc:	6117      	str	r7, [r2, #16]
 80143de:	e79d      	b.n	801431c <__mdiff+0x34>
 80143e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80143e4:	46e6      	mov	lr, ip
 80143e6:	0c08      	lsrs	r0, r1, #16
 80143e8:	fa1c fc81 	uxtah	ip, ip, r1
 80143ec:	4471      	add	r1, lr
 80143ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80143f2:	b289      	uxth	r1, r1
 80143f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80143f8:	f846 1b04 	str.w	r1, [r6], #4
 80143fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014400:	e7dd      	b.n	80143be <__mdiff+0xd6>
 8014402:	3f01      	subs	r7, #1
 8014404:	e7e7      	b.n	80143d6 <__mdiff+0xee>
 8014406:	bf00      	nop
 8014408:	080176c0 	.word	0x080176c0
 801440c:	08017731 	.word	0x08017731

08014410 <__ulp>:
 8014410:	b082      	sub	sp, #8
 8014412:	ed8d 0b00 	vstr	d0, [sp]
 8014416:	9a01      	ldr	r2, [sp, #4]
 8014418:	4b0f      	ldr	r3, [pc, #60]	@ (8014458 <__ulp+0x48>)
 801441a:	4013      	ands	r3, r2
 801441c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014420:	2b00      	cmp	r3, #0
 8014422:	dc08      	bgt.n	8014436 <__ulp+0x26>
 8014424:	425b      	negs	r3, r3
 8014426:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801442a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801442e:	da04      	bge.n	801443a <__ulp+0x2a>
 8014430:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014434:	4113      	asrs	r3, r2
 8014436:	2200      	movs	r2, #0
 8014438:	e008      	b.n	801444c <__ulp+0x3c>
 801443a:	f1a2 0314 	sub.w	r3, r2, #20
 801443e:	2b1e      	cmp	r3, #30
 8014440:	bfda      	itte	le
 8014442:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8014446:	40da      	lsrle	r2, r3
 8014448:	2201      	movgt	r2, #1
 801444a:	2300      	movs	r3, #0
 801444c:	4619      	mov	r1, r3
 801444e:	4610      	mov	r0, r2
 8014450:	ec41 0b10 	vmov	d0, r0, r1
 8014454:	b002      	add	sp, #8
 8014456:	4770      	bx	lr
 8014458:	7ff00000 	.word	0x7ff00000

0801445c <__b2d>:
 801445c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014460:	6906      	ldr	r6, [r0, #16]
 8014462:	f100 0814 	add.w	r8, r0, #20
 8014466:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801446a:	1f37      	subs	r7, r6, #4
 801446c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014470:	4610      	mov	r0, r2
 8014472:	f7ff fd53 	bl	8013f1c <__hi0bits>
 8014476:	f1c0 0320 	rsb	r3, r0, #32
 801447a:	280a      	cmp	r0, #10
 801447c:	600b      	str	r3, [r1, #0]
 801447e:	491b      	ldr	r1, [pc, #108]	@ (80144ec <__b2d+0x90>)
 8014480:	dc15      	bgt.n	80144ae <__b2d+0x52>
 8014482:	f1c0 0c0b 	rsb	ip, r0, #11
 8014486:	fa22 f30c 	lsr.w	r3, r2, ip
 801448a:	45b8      	cmp	r8, r7
 801448c:	ea43 0501 	orr.w	r5, r3, r1
 8014490:	bf34      	ite	cc
 8014492:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014496:	2300      	movcs	r3, #0
 8014498:	3015      	adds	r0, #21
 801449a:	fa02 f000 	lsl.w	r0, r2, r0
 801449e:	fa23 f30c 	lsr.w	r3, r3, ip
 80144a2:	4303      	orrs	r3, r0
 80144a4:	461c      	mov	r4, r3
 80144a6:	ec45 4b10 	vmov	d0, r4, r5
 80144aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144ae:	45b8      	cmp	r8, r7
 80144b0:	bf3a      	itte	cc
 80144b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80144b6:	f1a6 0708 	subcc.w	r7, r6, #8
 80144ba:	2300      	movcs	r3, #0
 80144bc:	380b      	subs	r0, #11
 80144be:	d012      	beq.n	80144e6 <__b2d+0x8a>
 80144c0:	f1c0 0120 	rsb	r1, r0, #32
 80144c4:	fa23 f401 	lsr.w	r4, r3, r1
 80144c8:	4082      	lsls	r2, r0
 80144ca:	4322      	orrs	r2, r4
 80144cc:	4547      	cmp	r7, r8
 80144ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80144d2:	bf8c      	ite	hi
 80144d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80144d8:	2200      	movls	r2, #0
 80144da:	4083      	lsls	r3, r0
 80144dc:	40ca      	lsrs	r2, r1
 80144de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80144e2:	4313      	orrs	r3, r2
 80144e4:	e7de      	b.n	80144a4 <__b2d+0x48>
 80144e6:	ea42 0501 	orr.w	r5, r2, r1
 80144ea:	e7db      	b.n	80144a4 <__b2d+0x48>
 80144ec:	3ff00000 	.word	0x3ff00000

080144f0 <__d2b>:
 80144f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80144f4:	460f      	mov	r7, r1
 80144f6:	2101      	movs	r1, #1
 80144f8:	ec59 8b10 	vmov	r8, r9, d0
 80144fc:	4616      	mov	r6, r2
 80144fe:	f7ff fc1b 	bl	8013d38 <_Balloc>
 8014502:	4604      	mov	r4, r0
 8014504:	b930      	cbnz	r0, 8014514 <__d2b+0x24>
 8014506:	4602      	mov	r2, r0
 8014508:	4b23      	ldr	r3, [pc, #140]	@ (8014598 <__d2b+0xa8>)
 801450a:	4824      	ldr	r0, [pc, #144]	@ (801459c <__d2b+0xac>)
 801450c:	f240 310f 	movw	r1, #783	@ 0x30f
 8014510:	f7fe f94e 	bl	80127b0 <__assert_func>
 8014514:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801451c:	b10d      	cbz	r5, 8014522 <__d2b+0x32>
 801451e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014522:	9301      	str	r3, [sp, #4]
 8014524:	f1b8 0300 	subs.w	r3, r8, #0
 8014528:	d023      	beq.n	8014572 <__d2b+0x82>
 801452a:	4668      	mov	r0, sp
 801452c:	9300      	str	r3, [sp, #0]
 801452e:	f7ff fd14 	bl	8013f5a <__lo0bits>
 8014532:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014536:	b1d0      	cbz	r0, 801456e <__d2b+0x7e>
 8014538:	f1c0 0320 	rsb	r3, r0, #32
 801453c:	fa02 f303 	lsl.w	r3, r2, r3
 8014540:	430b      	orrs	r3, r1
 8014542:	40c2      	lsrs	r2, r0
 8014544:	6163      	str	r3, [r4, #20]
 8014546:	9201      	str	r2, [sp, #4]
 8014548:	9b01      	ldr	r3, [sp, #4]
 801454a:	61a3      	str	r3, [r4, #24]
 801454c:	2b00      	cmp	r3, #0
 801454e:	bf0c      	ite	eq
 8014550:	2201      	moveq	r2, #1
 8014552:	2202      	movne	r2, #2
 8014554:	6122      	str	r2, [r4, #16]
 8014556:	b1a5      	cbz	r5, 8014582 <__d2b+0x92>
 8014558:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801455c:	4405      	add	r5, r0
 801455e:	603d      	str	r5, [r7, #0]
 8014560:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014564:	6030      	str	r0, [r6, #0]
 8014566:	4620      	mov	r0, r4
 8014568:	b003      	add	sp, #12
 801456a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801456e:	6161      	str	r1, [r4, #20]
 8014570:	e7ea      	b.n	8014548 <__d2b+0x58>
 8014572:	a801      	add	r0, sp, #4
 8014574:	f7ff fcf1 	bl	8013f5a <__lo0bits>
 8014578:	9b01      	ldr	r3, [sp, #4]
 801457a:	6163      	str	r3, [r4, #20]
 801457c:	3020      	adds	r0, #32
 801457e:	2201      	movs	r2, #1
 8014580:	e7e8      	b.n	8014554 <__d2b+0x64>
 8014582:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014586:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801458a:	6038      	str	r0, [r7, #0]
 801458c:	6918      	ldr	r0, [r3, #16]
 801458e:	f7ff fcc5 	bl	8013f1c <__hi0bits>
 8014592:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014596:	e7e5      	b.n	8014564 <__d2b+0x74>
 8014598:	080176c0 	.word	0x080176c0
 801459c:	08017731 	.word	0x08017731

080145a0 <__ratio>:
 80145a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145a4:	b085      	sub	sp, #20
 80145a6:	e9cd 1000 	strd	r1, r0, [sp]
 80145aa:	a902      	add	r1, sp, #8
 80145ac:	f7ff ff56 	bl	801445c <__b2d>
 80145b0:	9800      	ldr	r0, [sp, #0]
 80145b2:	a903      	add	r1, sp, #12
 80145b4:	ec55 4b10 	vmov	r4, r5, d0
 80145b8:	f7ff ff50 	bl	801445c <__b2d>
 80145bc:	9b01      	ldr	r3, [sp, #4]
 80145be:	6919      	ldr	r1, [r3, #16]
 80145c0:	9b00      	ldr	r3, [sp, #0]
 80145c2:	691b      	ldr	r3, [r3, #16]
 80145c4:	1ac9      	subs	r1, r1, r3
 80145c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80145ca:	1a9b      	subs	r3, r3, r2
 80145cc:	ec5b ab10 	vmov	sl, fp, d0
 80145d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	bfce      	itee	gt
 80145d8:	462a      	movgt	r2, r5
 80145da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80145de:	465a      	movle	r2, fp
 80145e0:	462f      	mov	r7, r5
 80145e2:	46d9      	mov	r9, fp
 80145e4:	bfcc      	ite	gt
 80145e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80145ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80145ee:	464b      	mov	r3, r9
 80145f0:	4652      	mov	r2, sl
 80145f2:	4620      	mov	r0, r4
 80145f4:	4639      	mov	r1, r7
 80145f6:	f7ec f961 	bl	80008bc <__aeabi_ddiv>
 80145fa:	ec41 0b10 	vmov	d0, r0, r1
 80145fe:	b005      	add	sp, #20
 8014600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014604 <__copybits>:
 8014604:	3901      	subs	r1, #1
 8014606:	b570      	push	{r4, r5, r6, lr}
 8014608:	1149      	asrs	r1, r1, #5
 801460a:	6914      	ldr	r4, [r2, #16]
 801460c:	3101      	adds	r1, #1
 801460e:	f102 0314 	add.w	r3, r2, #20
 8014612:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014616:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801461a:	1f05      	subs	r5, r0, #4
 801461c:	42a3      	cmp	r3, r4
 801461e:	d30c      	bcc.n	801463a <__copybits+0x36>
 8014620:	1aa3      	subs	r3, r4, r2
 8014622:	3b11      	subs	r3, #17
 8014624:	f023 0303 	bic.w	r3, r3, #3
 8014628:	3211      	adds	r2, #17
 801462a:	42a2      	cmp	r2, r4
 801462c:	bf88      	it	hi
 801462e:	2300      	movhi	r3, #0
 8014630:	4418      	add	r0, r3
 8014632:	2300      	movs	r3, #0
 8014634:	4288      	cmp	r0, r1
 8014636:	d305      	bcc.n	8014644 <__copybits+0x40>
 8014638:	bd70      	pop	{r4, r5, r6, pc}
 801463a:	f853 6b04 	ldr.w	r6, [r3], #4
 801463e:	f845 6f04 	str.w	r6, [r5, #4]!
 8014642:	e7eb      	b.n	801461c <__copybits+0x18>
 8014644:	f840 3b04 	str.w	r3, [r0], #4
 8014648:	e7f4      	b.n	8014634 <__copybits+0x30>

0801464a <__any_on>:
 801464a:	f100 0214 	add.w	r2, r0, #20
 801464e:	6900      	ldr	r0, [r0, #16]
 8014650:	114b      	asrs	r3, r1, #5
 8014652:	4298      	cmp	r0, r3
 8014654:	b510      	push	{r4, lr}
 8014656:	db11      	blt.n	801467c <__any_on+0x32>
 8014658:	dd0a      	ble.n	8014670 <__any_on+0x26>
 801465a:	f011 011f 	ands.w	r1, r1, #31
 801465e:	d007      	beq.n	8014670 <__any_on+0x26>
 8014660:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014664:	fa24 f001 	lsr.w	r0, r4, r1
 8014668:	fa00 f101 	lsl.w	r1, r0, r1
 801466c:	428c      	cmp	r4, r1
 801466e:	d10b      	bne.n	8014688 <__any_on+0x3e>
 8014670:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014674:	4293      	cmp	r3, r2
 8014676:	d803      	bhi.n	8014680 <__any_on+0x36>
 8014678:	2000      	movs	r0, #0
 801467a:	bd10      	pop	{r4, pc}
 801467c:	4603      	mov	r3, r0
 801467e:	e7f7      	b.n	8014670 <__any_on+0x26>
 8014680:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014684:	2900      	cmp	r1, #0
 8014686:	d0f5      	beq.n	8014674 <__any_on+0x2a>
 8014688:	2001      	movs	r0, #1
 801468a:	e7f6      	b.n	801467a <__any_on+0x30>

0801468c <__ascii_wctomb>:
 801468c:	4603      	mov	r3, r0
 801468e:	4608      	mov	r0, r1
 8014690:	b141      	cbz	r1, 80146a4 <__ascii_wctomb+0x18>
 8014692:	2aff      	cmp	r2, #255	@ 0xff
 8014694:	d904      	bls.n	80146a0 <__ascii_wctomb+0x14>
 8014696:	228a      	movs	r2, #138	@ 0x8a
 8014698:	601a      	str	r2, [r3, #0]
 801469a:	f04f 30ff 	mov.w	r0, #4294967295
 801469e:	4770      	bx	lr
 80146a0:	700a      	strb	r2, [r1, #0]
 80146a2:	2001      	movs	r0, #1
 80146a4:	4770      	bx	lr

080146a6 <__ssputs_r>:
 80146a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146aa:	688e      	ldr	r6, [r1, #8]
 80146ac:	461f      	mov	r7, r3
 80146ae:	42be      	cmp	r6, r7
 80146b0:	680b      	ldr	r3, [r1, #0]
 80146b2:	4682      	mov	sl, r0
 80146b4:	460c      	mov	r4, r1
 80146b6:	4690      	mov	r8, r2
 80146b8:	d82d      	bhi.n	8014716 <__ssputs_r+0x70>
 80146ba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80146be:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80146c2:	d026      	beq.n	8014712 <__ssputs_r+0x6c>
 80146c4:	6965      	ldr	r5, [r4, #20]
 80146c6:	6909      	ldr	r1, [r1, #16]
 80146c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80146cc:	eba3 0901 	sub.w	r9, r3, r1
 80146d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80146d4:	1c7b      	adds	r3, r7, #1
 80146d6:	444b      	add	r3, r9
 80146d8:	106d      	asrs	r5, r5, #1
 80146da:	429d      	cmp	r5, r3
 80146dc:	bf38      	it	cc
 80146de:	461d      	movcc	r5, r3
 80146e0:	0553      	lsls	r3, r2, #21
 80146e2:	d527      	bpl.n	8014734 <__ssputs_r+0x8e>
 80146e4:	4629      	mov	r1, r5
 80146e6:	f7ff fa89 	bl	8013bfc <_malloc_r>
 80146ea:	4606      	mov	r6, r0
 80146ec:	b360      	cbz	r0, 8014748 <__ssputs_r+0xa2>
 80146ee:	6921      	ldr	r1, [r4, #16]
 80146f0:	464a      	mov	r2, r9
 80146f2:	f7fe f844 	bl	801277e <memcpy>
 80146f6:	89a3      	ldrh	r3, [r4, #12]
 80146f8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80146fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014700:	81a3      	strh	r3, [r4, #12]
 8014702:	6126      	str	r6, [r4, #16]
 8014704:	6165      	str	r5, [r4, #20]
 8014706:	444e      	add	r6, r9
 8014708:	eba5 0509 	sub.w	r5, r5, r9
 801470c:	6026      	str	r6, [r4, #0]
 801470e:	60a5      	str	r5, [r4, #8]
 8014710:	463e      	mov	r6, r7
 8014712:	42be      	cmp	r6, r7
 8014714:	d900      	bls.n	8014718 <__ssputs_r+0x72>
 8014716:	463e      	mov	r6, r7
 8014718:	6820      	ldr	r0, [r4, #0]
 801471a:	4632      	mov	r2, r6
 801471c:	4641      	mov	r1, r8
 801471e:	f000 f9d7 	bl	8014ad0 <memmove>
 8014722:	68a3      	ldr	r3, [r4, #8]
 8014724:	1b9b      	subs	r3, r3, r6
 8014726:	60a3      	str	r3, [r4, #8]
 8014728:	6823      	ldr	r3, [r4, #0]
 801472a:	4433      	add	r3, r6
 801472c:	6023      	str	r3, [r4, #0]
 801472e:	2000      	movs	r0, #0
 8014730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014734:	462a      	mov	r2, r5
 8014736:	f000 fa10 	bl	8014b5a <_realloc_r>
 801473a:	4606      	mov	r6, r0
 801473c:	2800      	cmp	r0, #0
 801473e:	d1e0      	bne.n	8014702 <__ssputs_r+0x5c>
 8014740:	6921      	ldr	r1, [r4, #16]
 8014742:	4650      	mov	r0, sl
 8014744:	f7fe feac 	bl	80134a0 <_free_r>
 8014748:	230c      	movs	r3, #12
 801474a:	f8ca 3000 	str.w	r3, [sl]
 801474e:	89a3      	ldrh	r3, [r4, #12]
 8014750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014754:	81a3      	strh	r3, [r4, #12]
 8014756:	f04f 30ff 	mov.w	r0, #4294967295
 801475a:	e7e9      	b.n	8014730 <__ssputs_r+0x8a>

0801475c <_svfiprintf_r>:
 801475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014760:	4698      	mov	r8, r3
 8014762:	898b      	ldrh	r3, [r1, #12]
 8014764:	061b      	lsls	r3, r3, #24
 8014766:	b09d      	sub	sp, #116	@ 0x74
 8014768:	4607      	mov	r7, r0
 801476a:	460d      	mov	r5, r1
 801476c:	4614      	mov	r4, r2
 801476e:	d510      	bpl.n	8014792 <_svfiprintf_r+0x36>
 8014770:	690b      	ldr	r3, [r1, #16]
 8014772:	b973      	cbnz	r3, 8014792 <_svfiprintf_r+0x36>
 8014774:	2140      	movs	r1, #64	@ 0x40
 8014776:	f7ff fa41 	bl	8013bfc <_malloc_r>
 801477a:	6028      	str	r0, [r5, #0]
 801477c:	6128      	str	r0, [r5, #16]
 801477e:	b930      	cbnz	r0, 801478e <_svfiprintf_r+0x32>
 8014780:	230c      	movs	r3, #12
 8014782:	603b      	str	r3, [r7, #0]
 8014784:	f04f 30ff 	mov.w	r0, #4294967295
 8014788:	b01d      	add	sp, #116	@ 0x74
 801478a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801478e:	2340      	movs	r3, #64	@ 0x40
 8014790:	616b      	str	r3, [r5, #20]
 8014792:	2300      	movs	r3, #0
 8014794:	9309      	str	r3, [sp, #36]	@ 0x24
 8014796:	2320      	movs	r3, #32
 8014798:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801479c:	f8cd 800c 	str.w	r8, [sp, #12]
 80147a0:	2330      	movs	r3, #48	@ 0x30
 80147a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014940 <_svfiprintf_r+0x1e4>
 80147a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80147aa:	f04f 0901 	mov.w	r9, #1
 80147ae:	4623      	mov	r3, r4
 80147b0:	469a      	mov	sl, r3
 80147b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147b6:	b10a      	cbz	r2, 80147bc <_svfiprintf_r+0x60>
 80147b8:	2a25      	cmp	r2, #37	@ 0x25
 80147ba:	d1f9      	bne.n	80147b0 <_svfiprintf_r+0x54>
 80147bc:	ebba 0b04 	subs.w	fp, sl, r4
 80147c0:	d00b      	beq.n	80147da <_svfiprintf_r+0x7e>
 80147c2:	465b      	mov	r3, fp
 80147c4:	4622      	mov	r2, r4
 80147c6:	4629      	mov	r1, r5
 80147c8:	4638      	mov	r0, r7
 80147ca:	f7ff ff6c 	bl	80146a6 <__ssputs_r>
 80147ce:	3001      	adds	r0, #1
 80147d0:	f000 80a7 	beq.w	8014922 <_svfiprintf_r+0x1c6>
 80147d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80147d6:	445a      	add	r2, fp
 80147d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80147da:	f89a 3000 	ldrb.w	r3, [sl]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	f000 809f 	beq.w	8014922 <_svfiprintf_r+0x1c6>
 80147e4:	2300      	movs	r3, #0
 80147e6:	f04f 32ff 	mov.w	r2, #4294967295
 80147ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80147ee:	f10a 0a01 	add.w	sl, sl, #1
 80147f2:	9304      	str	r3, [sp, #16]
 80147f4:	9307      	str	r3, [sp, #28]
 80147f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80147fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80147fc:	4654      	mov	r4, sl
 80147fe:	2205      	movs	r2, #5
 8014800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014804:	484e      	ldr	r0, [pc, #312]	@ (8014940 <_svfiprintf_r+0x1e4>)
 8014806:	f7eb fd1b 	bl	8000240 <memchr>
 801480a:	9a04      	ldr	r2, [sp, #16]
 801480c:	b9d8      	cbnz	r0, 8014846 <_svfiprintf_r+0xea>
 801480e:	06d0      	lsls	r0, r2, #27
 8014810:	bf44      	itt	mi
 8014812:	2320      	movmi	r3, #32
 8014814:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014818:	0711      	lsls	r1, r2, #28
 801481a:	bf44      	itt	mi
 801481c:	232b      	movmi	r3, #43	@ 0x2b
 801481e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014822:	f89a 3000 	ldrb.w	r3, [sl]
 8014826:	2b2a      	cmp	r3, #42	@ 0x2a
 8014828:	d015      	beq.n	8014856 <_svfiprintf_r+0xfa>
 801482a:	9a07      	ldr	r2, [sp, #28]
 801482c:	4654      	mov	r4, sl
 801482e:	2000      	movs	r0, #0
 8014830:	f04f 0c0a 	mov.w	ip, #10
 8014834:	4621      	mov	r1, r4
 8014836:	f811 3b01 	ldrb.w	r3, [r1], #1
 801483a:	3b30      	subs	r3, #48	@ 0x30
 801483c:	2b09      	cmp	r3, #9
 801483e:	d94b      	bls.n	80148d8 <_svfiprintf_r+0x17c>
 8014840:	b1b0      	cbz	r0, 8014870 <_svfiprintf_r+0x114>
 8014842:	9207      	str	r2, [sp, #28]
 8014844:	e014      	b.n	8014870 <_svfiprintf_r+0x114>
 8014846:	eba0 0308 	sub.w	r3, r0, r8
 801484a:	fa09 f303 	lsl.w	r3, r9, r3
 801484e:	4313      	orrs	r3, r2
 8014850:	9304      	str	r3, [sp, #16]
 8014852:	46a2      	mov	sl, r4
 8014854:	e7d2      	b.n	80147fc <_svfiprintf_r+0xa0>
 8014856:	9b03      	ldr	r3, [sp, #12]
 8014858:	1d19      	adds	r1, r3, #4
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	9103      	str	r1, [sp, #12]
 801485e:	2b00      	cmp	r3, #0
 8014860:	bfbb      	ittet	lt
 8014862:	425b      	neglt	r3, r3
 8014864:	f042 0202 	orrlt.w	r2, r2, #2
 8014868:	9307      	strge	r3, [sp, #28]
 801486a:	9307      	strlt	r3, [sp, #28]
 801486c:	bfb8      	it	lt
 801486e:	9204      	strlt	r2, [sp, #16]
 8014870:	7823      	ldrb	r3, [r4, #0]
 8014872:	2b2e      	cmp	r3, #46	@ 0x2e
 8014874:	d10a      	bne.n	801488c <_svfiprintf_r+0x130>
 8014876:	7863      	ldrb	r3, [r4, #1]
 8014878:	2b2a      	cmp	r3, #42	@ 0x2a
 801487a:	d132      	bne.n	80148e2 <_svfiprintf_r+0x186>
 801487c:	9b03      	ldr	r3, [sp, #12]
 801487e:	1d1a      	adds	r2, r3, #4
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	9203      	str	r2, [sp, #12]
 8014884:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014888:	3402      	adds	r4, #2
 801488a:	9305      	str	r3, [sp, #20]
 801488c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014950 <_svfiprintf_r+0x1f4>
 8014890:	7821      	ldrb	r1, [r4, #0]
 8014892:	2203      	movs	r2, #3
 8014894:	4650      	mov	r0, sl
 8014896:	f7eb fcd3 	bl	8000240 <memchr>
 801489a:	b138      	cbz	r0, 80148ac <_svfiprintf_r+0x150>
 801489c:	9b04      	ldr	r3, [sp, #16]
 801489e:	eba0 000a 	sub.w	r0, r0, sl
 80148a2:	2240      	movs	r2, #64	@ 0x40
 80148a4:	4082      	lsls	r2, r0
 80148a6:	4313      	orrs	r3, r2
 80148a8:	3401      	adds	r4, #1
 80148aa:	9304      	str	r3, [sp, #16]
 80148ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148b0:	4824      	ldr	r0, [pc, #144]	@ (8014944 <_svfiprintf_r+0x1e8>)
 80148b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80148b6:	2206      	movs	r2, #6
 80148b8:	f7eb fcc2 	bl	8000240 <memchr>
 80148bc:	2800      	cmp	r0, #0
 80148be:	d036      	beq.n	801492e <_svfiprintf_r+0x1d2>
 80148c0:	4b21      	ldr	r3, [pc, #132]	@ (8014948 <_svfiprintf_r+0x1ec>)
 80148c2:	bb1b      	cbnz	r3, 801490c <_svfiprintf_r+0x1b0>
 80148c4:	9b03      	ldr	r3, [sp, #12]
 80148c6:	3307      	adds	r3, #7
 80148c8:	f023 0307 	bic.w	r3, r3, #7
 80148cc:	3308      	adds	r3, #8
 80148ce:	9303      	str	r3, [sp, #12]
 80148d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148d2:	4433      	add	r3, r6
 80148d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80148d6:	e76a      	b.n	80147ae <_svfiprintf_r+0x52>
 80148d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80148dc:	460c      	mov	r4, r1
 80148de:	2001      	movs	r0, #1
 80148e0:	e7a8      	b.n	8014834 <_svfiprintf_r+0xd8>
 80148e2:	2300      	movs	r3, #0
 80148e4:	3401      	adds	r4, #1
 80148e6:	9305      	str	r3, [sp, #20]
 80148e8:	4619      	mov	r1, r3
 80148ea:	f04f 0c0a 	mov.w	ip, #10
 80148ee:	4620      	mov	r0, r4
 80148f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148f4:	3a30      	subs	r2, #48	@ 0x30
 80148f6:	2a09      	cmp	r2, #9
 80148f8:	d903      	bls.n	8014902 <_svfiprintf_r+0x1a6>
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d0c6      	beq.n	801488c <_svfiprintf_r+0x130>
 80148fe:	9105      	str	r1, [sp, #20]
 8014900:	e7c4      	b.n	801488c <_svfiprintf_r+0x130>
 8014902:	fb0c 2101 	mla	r1, ip, r1, r2
 8014906:	4604      	mov	r4, r0
 8014908:	2301      	movs	r3, #1
 801490a:	e7f0      	b.n	80148ee <_svfiprintf_r+0x192>
 801490c:	ab03      	add	r3, sp, #12
 801490e:	9300      	str	r3, [sp, #0]
 8014910:	462a      	mov	r2, r5
 8014912:	4b0e      	ldr	r3, [pc, #56]	@ (801494c <_svfiprintf_r+0x1f0>)
 8014914:	a904      	add	r1, sp, #16
 8014916:	4638      	mov	r0, r7
 8014918:	f7fd f966 	bl	8011be8 <_printf_float>
 801491c:	1c42      	adds	r2, r0, #1
 801491e:	4606      	mov	r6, r0
 8014920:	d1d6      	bne.n	80148d0 <_svfiprintf_r+0x174>
 8014922:	89ab      	ldrh	r3, [r5, #12]
 8014924:	065b      	lsls	r3, r3, #25
 8014926:	f53f af2d 	bmi.w	8014784 <_svfiprintf_r+0x28>
 801492a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801492c:	e72c      	b.n	8014788 <_svfiprintf_r+0x2c>
 801492e:	ab03      	add	r3, sp, #12
 8014930:	9300      	str	r3, [sp, #0]
 8014932:	462a      	mov	r2, r5
 8014934:	4b05      	ldr	r3, [pc, #20]	@ (801494c <_svfiprintf_r+0x1f0>)
 8014936:	a904      	add	r1, sp, #16
 8014938:	4638      	mov	r0, r7
 801493a:	f7fd fbed 	bl	8012118 <_printf_i>
 801493e:	e7ed      	b.n	801491c <_svfiprintf_r+0x1c0>
 8014940:	0801778a 	.word	0x0801778a
 8014944:	08017794 	.word	0x08017794
 8014948:	08011be9 	.word	0x08011be9
 801494c:	080146a7 	.word	0x080146a7
 8014950:	08017790 	.word	0x08017790

08014954 <__sflush_r>:
 8014954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801495c:	0716      	lsls	r6, r2, #28
 801495e:	4605      	mov	r5, r0
 8014960:	460c      	mov	r4, r1
 8014962:	d454      	bmi.n	8014a0e <__sflush_r+0xba>
 8014964:	684b      	ldr	r3, [r1, #4]
 8014966:	2b00      	cmp	r3, #0
 8014968:	dc02      	bgt.n	8014970 <__sflush_r+0x1c>
 801496a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801496c:	2b00      	cmp	r3, #0
 801496e:	dd48      	ble.n	8014a02 <__sflush_r+0xae>
 8014970:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014972:	2e00      	cmp	r6, #0
 8014974:	d045      	beq.n	8014a02 <__sflush_r+0xae>
 8014976:	2300      	movs	r3, #0
 8014978:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801497c:	682f      	ldr	r7, [r5, #0]
 801497e:	6a21      	ldr	r1, [r4, #32]
 8014980:	602b      	str	r3, [r5, #0]
 8014982:	d030      	beq.n	80149e6 <__sflush_r+0x92>
 8014984:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014986:	89a3      	ldrh	r3, [r4, #12]
 8014988:	0759      	lsls	r1, r3, #29
 801498a:	d505      	bpl.n	8014998 <__sflush_r+0x44>
 801498c:	6863      	ldr	r3, [r4, #4]
 801498e:	1ad2      	subs	r2, r2, r3
 8014990:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014992:	b10b      	cbz	r3, 8014998 <__sflush_r+0x44>
 8014994:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014996:	1ad2      	subs	r2, r2, r3
 8014998:	2300      	movs	r3, #0
 801499a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801499c:	6a21      	ldr	r1, [r4, #32]
 801499e:	4628      	mov	r0, r5
 80149a0:	47b0      	blx	r6
 80149a2:	1c43      	adds	r3, r0, #1
 80149a4:	89a3      	ldrh	r3, [r4, #12]
 80149a6:	d106      	bne.n	80149b6 <__sflush_r+0x62>
 80149a8:	6829      	ldr	r1, [r5, #0]
 80149aa:	291d      	cmp	r1, #29
 80149ac:	d82b      	bhi.n	8014a06 <__sflush_r+0xb2>
 80149ae:	4a2a      	ldr	r2, [pc, #168]	@ (8014a58 <__sflush_r+0x104>)
 80149b0:	40ca      	lsrs	r2, r1
 80149b2:	07d6      	lsls	r6, r2, #31
 80149b4:	d527      	bpl.n	8014a06 <__sflush_r+0xb2>
 80149b6:	2200      	movs	r2, #0
 80149b8:	6062      	str	r2, [r4, #4]
 80149ba:	04d9      	lsls	r1, r3, #19
 80149bc:	6922      	ldr	r2, [r4, #16]
 80149be:	6022      	str	r2, [r4, #0]
 80149c0:	d504      	bpl.n	80149cc <__sflush_r+0x78>
 80149c2:	1c42      	adds	r2, r0, #1
 80149c4:	d101      	bne.n	80149ca <__sflush_r+0x76>
 80149c6:	682b      	ldr	r3, [r5, #0]
 80149c8:	b903      	cbnz	r3, 80149cc <__sflush_r+0x78>
 80149ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80149cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80149ce:	602f      	str	r7, [r5, #0]
 80149d0:	b1b9      	cbz	r1, 8014a02 <__sflush_r+0xae>
 80149d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80149d6:	4299      	cmp	r1, r3
 80149d8:	d002      	beq.n	80149e0 <__sflush_r+0x8c>
 80149da:	4628      	mov	r0, r5
 80149dc:	f7fe fd60 	bl	80134a0 <_free_r>
 80149e0:	2300      	movs	r3, #0
 80149e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80149e4:	e00d      	b.n	8014a02 <__sflush_r+0xae>
 80149e6:	2301      	movs	r3, #1
 80149e8:	4628      	mov	r0, r5
 80149ea:	47b0      	blx	r6
 80149ec:	4602      	mov	r2, r0
 80149ee:	1c50      	adds	r0, r2, #1
 80149f0:	d1c9      	bne.n	8014986 <__sflush_r+0x32>
 80149f2:	682b      	ldr	r3, [r5, #0]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d0c6      	beq.n	8014986 <__sflush_r+0x32>
 80149f8:	2b1d      	cmp	r3, #29
 80149fa:	d001      	beq.n	8014a00 <__sflush_r+0xac>
 80149fc:	2b16      	cmp	r3, #22
 80149fe:	d11e      	bne.n	8014a3e <__sflush_r+0xea>
 8014a00:	602f      	str	r7, [r5, #0]
 8014a02:	2000      	movs	r0, #0
 8014a04:	e022      	b.n	8014a4c <__sflush_r+0xf8>
 8014a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a0a:	b21b      	sxth	r3, r3
 8014a0c:	e01b      	b.n	8014a46 <__sflush_r+0xf2>
 8014a0e:	690f      	ldr	r7, [r1, #16]
 8014a10:	2f00      	cmp	r7, #0
 8014a12:	d0f6      	beq.n	8014a02 <__sflush_r+0xae>
 8014a14:	0793      	lsls	r3, r2, #30
 8014a16:	680e      	ldr	r6, [r1, #0]
 8014a18:	bf08      	it	eq
 8014a1a:	694b      	ldreq	r3, [r1, #20]
 8014a1c:	600f      	str	r7, [r1, #0]
 8014a1e:	bf18      	it	ne
 8014a20:	2300      	movne	r3, #0
 8014a22:	eba6 0807 	sub.w	r8, r6, r7
 8014a26:	608b      	str	r3, [r1, #8]
 8014a28:	f1b8 0f00 	cmp.w	r8, #0
 8014a2c:	dde9      	ble.n	8014a02 <__sflush_r+0xae>
 8014a2e:	6a21      	ldr	r1, [r4, #32]
 8014a30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014a32:	4643      	mov	r3, r8
 8014a34:	463a      	mov	r2, r7
 8014a36:	4628      	mov	r0, r5
 8014a38:	47b0      	blx	r6
 8014a3a:	2800      	cmp	r0, #0
 8014a3c:	dc08      	bgt.n	8014a50 <__sflush_r+0xfc>
 8014a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a46:	81a3      	strh	r3, [r4, #12]
 8014a48:	f04f 30ff 	mov.w	r0, #4294967295
 8014a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a50:	4407      	add	r7, r0
 8014a52:	eba8 0800 	sub.w	r8, r8, r0
 8014a56:	e7e7      	b.n	8014a28 <__sflush_r+0xd4>
 8014a58:	20400001 	.word	0x20400001

08014a5c <_fflush_r>:
 8014a5c:	b538      	push	{r3, r4, r5, lr}
 8014a5e:	690b      	ldr	r3, [r1, #16]
 8014a60:	4605      	mov	r5, r0
 8014a62:	460c      	mov	r4, r1
 8014a64:	b913      	cbnz	r3, 8014a6c <_fflush_r+0x10>
 8014a66:	2500      	movs	r5, #0
 8014a68:	4628      	mov	r0, r5
 8014a6a:	bd38      	pop	{r3, r4, r5, pc}
 8014a6c:	b118      	cbz	r0, 8014a76 <_fflush_r+0x1a>
 8014a6e:	6a03      	ldr	r3, [r0, #32]
 8014a70:	b90b      	cbnz	r3, 8014a76 <_fflush_r+0x1a>
 8014a72:	f7fd fcfb 	bl	801246c <__sinit>
 8014a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d0f3      	beq.n	8014a66 <_fflush_r+0xa>
 8014a7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014a80:	07d0      	lsls	r0, r2, #31
 8014a82:	d404      	bmi.n	8014a8e <_fflush_r+0x32>
 8014a84:	0599      	lsls	r1, r3, #22
 8014a86:	d402      	bmi.n	8014a8e <_fflush_r+0x32>
 8014a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a8a:	f7fd fe76 	bl	801277a <__retarget_lock_acquire_recursive>
 8014a8e:	4628      	mov	r0, r5
 8014a90:	4621      	mov	r1, r4
 8014a92:	f7ff ff5f 	bl	8014954 <__sflush_r>
 8014a96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a98:	07da      	lsls	r2, r3, #31
 8014a9a:	4605      	mov	r5, r0
 8014a9c:	d4e4      	bmi.n	8014a68 <_fflush_r+0xc>
 8014a9e:	89a3      	ldrh	r3, [r4, #12]
 8014aa0:	059b      	lsls	r3, r3, #22
 8014aa2:	d4e1      	bmi.n	8014a68 <_fflush_r+0xc>
 8014aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014aa6:	f7fd fe69 	bl	801277c <__retarget_lock_release_recursive>
 8014aaa:	e7dd      	b.n	8014a68 <_fflush_r+0xc>

08014aac <fiprintf>:
 8014aac:	b40e      	push	{r1, r2, r3}
 8014aae:	b503      	push	{r0, r1, lr}
 8014ab0:	4601      	mov	r1, r0
 8014ab2:	ab03      	add	r3, sp, #12
 8014ab4:	4805      	ldr	r0, [pc, #20]	@ (8014acc <fiprintf+0x20>)
 8014ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014aba:	6800      	ldr	r0, [r0, #0]
 8014abc:	9301      	str	r3, [sp, #4]
 8014abe:	f000 f8a3 	bl	8014c08 <_vfiprintf_r>
 8014ac2:	b002      	add	sp, #8
 8014ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ac8:	b003      	add	sp, #12
 8014aca:	4770      	bx	lr
 8014acc:	200001a0 	.word	0x200001a0

08014ad0 <memmove>:
 8014ad0:	4288      	cmp	r0, r1
 8014ad2:	b510      	push	{r4, lr}
 8014ad4:	eb01 0402 	add.w	r4, r1, r2
 8014ad8:	d902      	bls.n	8014ae0 <memmove+0x10>
 8014ada:	4284      	cmp	r4, r0
 8014adc:	4623      	mov	r3, r4
 8014ade:	d807      	bhi.n	8014af0 <memmove+0x20>
 8014ae0:	1e43      	subs	r3, r0, #1
 8014ae2:	42a1      	cmp	r1, r4
 8014ae4:	d008      	beq.n	8014af8 <memmove+0x28>
 8014ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014aee:	e7f8      	b.n	8014ae2 <memmove+0x12>
 8014af0:	4402      	add	r2, r0
 8014af2:	4601      	mov	r1, r0
 8014af4:	428a      	cmp	r2, r1
 8014af6:	d100      	bne.n	8014afa <memmove+0x2a>
 8014af8:	bd10      	pop	{r4, pc}
 8014afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014b02:	e7f7      	b.n	8014af4 <memmove+0x24>

08014b04 <_sbrk_r>:
 8014b04:	b538      	push	{r3, r4, r5, lr}
 8014b06:	4d06      	ldr	r5, [pc, #24]	@ (8014b20 <_sbrk_r+0x1c>)
 8014b08:	2300      	movs	r3, #0
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	4608      	mov	r0, r1
 8014b0e:	602b      	str	r3, [r5, #0]
 8014b10:	f7f0 f896 	bl	8004c40 <_sbrk>
 8014b14:	1c43      	adds	r3, r0, #1
 8014b16:	d102      	bne.n	8014b1e <_sbrk_r+0x1a>
 8014b18:	682b      	ldr	r3, [r5, #0]
 8014b1a:	b103      	cbz	r3, 8014b1e <_sbrk_r+0x1a>
 8014b1c:	6023      	str	r3, [r4, #0]
 8014b1e:	bd38      	pop	{r3, r4, r5, pc}
 8014b20:	20006d38 	.word	0x20006d38

08014b24 <abort>:
 8014b24:	b508      	push	{r3, lr}
 8014b26:	2006      	movs	r0, #6
 8014b28:	f000 fa42 	bl	8014fb0 <raise>
 8014b2c:	2001      	movs	r0, #1
 8014b2e:	f7f0 f80f 	bl	8004b50 <_exit>

08014b32 <_calloc_r>:
 8014b32:	b570      	push	{r4, r5, r6, lr}
 8014b34:	fba1 5402 	umull	r5, r4, r1, r2
 8014b38:	b934      	cbnz	r4, 8014b48 <_calloc_r+0x16>
 8014b3a:	4629      	mov	r1, r5
 8014b3c:	f7ff f85e 	bl	8013bfc <_malloc_r>
 8014b40:	4606      	mov	r6, r0
 8014b42:	b928      	cbnz	r0, 8014b50 <_calloc_r+0x1e>
 8014b44:	4630      	mov	r0, r6
 8014b46:	bd70      	pop	{r4, r5, r6, pc}
 8014b48:	220c      	movs	r2, #12
 8014b4a:	6002      	str	r2, [r0, #0]
 8014b4c:	2600      	movs	r6, #0
 8014b4e:	e7f9      	b.n	8014b44 <_calloc_r+0x12>
 8014b50:	462a      	mov	r2, r5
 8014b52:	4621      	mov	r1, r4
 8014b54:	f7fd fd25 	bl	80125a2 <memset>
 8014b58:	e7f4      	b.n	8014b44 <_calloc_r+0x12>

08014b5a <_realloc_r>:
 8014b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b5e:	4607      	mov	r7, r0
 8014b60:	4614      	mov	r4, r2
 8014b62:	460d      	mov	r5, r1
 8014b64:	b921      	cbnz	r1, 8014b70 <_realloc_r+0x16>
 8014b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b6a:	4611      	mov	r1, r2
 8014b6c:	f7ff b846 	b.w	8013bfc <_malloc_r>
 8014b70:	b92a      	cbnz	r2, 8014b7e <_realloc_r+0x24>
 8014b72:	f7fe fc95 	bl	80134a0 <_free_r>
 8014b76:	4625      	mov	r5, r4
 8014b78:	4628      	mov	r0, r5
 8014b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b7e:	f000 fa33 	bl	8014fe8 <_malloc_usable_size_r>
 8014b82:	4284      	cmp	r4, r0
 8014b84:	4606      	mov	r6, r0
 8014b86:	d802      	bhi.n	8014b8e <_realloc_r+0x34>
 8014b88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014b8c:	d8f4      	bhi.n	8014b78 <_realloc_r+0x1e>
 8014b8e:	4621      	mov	r1, r4
 8014b90:	4638      	mov	r0, r7
 8014b92:	f7ff f833 	bl	8013bfc <_malloc_r>
 8014b96:	4680      	mov	r8, r0
 8014b98:	b908      	cbnz	r0, 8014b9e <_realloc_r+0x44>
 8014b9a:	4645      	mov	r5, r8
 8014b9c:	e7ec      	b.n	8014b78 <_realloc_r+0x1e>
 8014b9e:	42b4      	cmp	r4, r6
 8014ba0:	4622      	mov	r2, r4
 8014ba2:	4629      	mov	r1, r5
 8014ba4:	bf28      	it	cs
 8014ba6:	4632      	movcs	r2, r6
 8014ba8:	f7fd fde9 	bl	801277e <memcpy>
 8014bac:	4629      	mov	r1, r5
 8014bae:	4638      	mov	r0, r7
 8014bb0:	f7fe fc76 	bl	80134a0 <_free_r>
 8014bb4:	e7f1      	b.n	8014b9a <_realloc_r+0x40>

08014bb6 <__sfputc_r>:
 8014bb6:	6893      	ldr	r3, [r2, #8]
 8014bb8:	3b01      	subs	r3, #1
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	b410      	push	{r4}
 8014bbe:	6093      	str	r3, [r2, #8]
 8014bc0:	da08      	bge.n	8014bd4 <__sfputc_r+0x1e>
 8014bc2:	6994      	ldr	r4, [r2, #24]
 8014bc4:	42a3      	cmp	r3, r4
 8014bc6:	db01      	blt.n	8014bcc <__sfputc_r+0x16>
 8014bc8:	290a      	cmp	r1, #10
 8014bca:	d103      	bne.n	8014bd4 <__sfputc_r+0x1e>
 8014bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bd0:	f000 b932 	b.w	8014e38 <__swbuf_r>
 8014bd4:	6813      	ldr	r3, [r2, #0]
 8014bd6:	1c58      	adds	r0, r3, #1
 8014bd8:	6010      	str	r0, [r2, #0]
 8014bda:	7019      	strb	r1, [r3, #0]
 8014bdc:	4608      	mov	r0, r1
 8014bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014be2:	4770      	bx	lr

08014be4 <__sfputs_r>:
 8014be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014be6:	4606      	mov	r6, r0
 8014be8:	460f      	mov	r7, r1
 8014bea:	4614      	mov	r4, r2
 8014bec:	18d5      	adds	r5, r2, r3
 8014bee:	42ac      	cmp	r4, r5
 8014bf0:	d101      	bne.n	8014bf6 <__sfputs_r+0x12>
 8014bf2:	2000      	movs	r0, #0
 8014bf4:	e007      	b.n	8014c06 <__sfputs_r+0x22>
 8014bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bfa:	463a      	mov	r2, r7
 8014bfc:	4630      	mov	r0, r6
 8014bfe:	f7ff ffda 	bl	8014bb6 <__sfputc_r>
 8014c02:	1c43      	adds	r3, r0, #1
 8014c04:	d1f3      	bne.n	8014bee <__sfputs_r+0xa>
 8014c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014c08 <_vfiprintf_r>:
 8014c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c0c:	460d      	mov	r5, r1
 8014c0e:	b09d      	sub	sp, #116	@ 0x74
 8014c10:	4614      	mov	r4, r2
 8014c12:	4698      	mov	r8, r3
 8014c14:	4606      	mov	r6, r0
 8014c16:	b118      	cbz	r0, 8014c20 <_vfiprintf_r+0x18>
 8014c18:	6a03      	ldr	r3, [r0, #32]
 8014c1a:	b90b      	cbnz	r3, 8014c20 <_vfiprintf_r+0x18>
 8014c1c:	f7fd fc26 	bl	801246c <__sinit>
 8014c20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c22:	07d9      	lsls	r1, r3, #31
 8014c24:	d405      	bmi.n	8014c32 <_vfiprintf_r+0x2a>
 8014c26:	89ab      	ldrh	r3, [r5, #12]
 8014c28:	059a      	lsls	r2, r3, #22
 8014c2a:	d402      	bmi.n	8014c32 <_vfiprintf_r+0x2a>
 8014c2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c2e:	f7fd fda4 	bl	801277a <__retarget_lock_acquire_recursive>
 8014c32:	89ab      	ldrh	r3, [r5, #12]
 8014c34:	071b      	lsls	r3, r3, #28
 8014c36:	d501      	bpl.n	8014c3c <_vfiprintf_r+0x34>
 8014c38:	692b      	ldr	r3, [r5, #16]
 8014c3a:	b99b      	cbnz	r3, 8014c64 <_vfiprintf_r+0x5c>
 8014c3c:	4629      	mov	r1, r5
 8014c3e:	4630      	mov	r0, r6
 8014c40:	f000 f938 	bl	8014eb4 <__swsetup_r>
 8014c44:	b170      	cbz	r0, 8014c64 <_vfiprintf_r+0x5c>
 8014c46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c48:	07dc      	lsls	r4, r3, #31
 8014c4a:	d504      	bpl.n	8014c56 <_vfiprintf_r+0x4e>
 8014c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c50:	b01d      	add	sp, #116	@ 0x74
 8014c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c56:	89ab      	ldrh	r3, [r5, #12]
 8014c58:	0598      	lsls	r0, r3, #22
 8014c5a:	d4f7      	bmi.n	8014c4c <_vfiprintf_r+0x44>
 8014c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c5e:	f7fd fd8d 	bl	801277c <__retarget_lock_release_recursive>
 8014c62:	e7f3      	b.n	8014c4c <_vfiprintf_r+0x44>
 8014c64:	2300      	movs	r3, #0
 8014c66:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c68:	2320      	movs	r3, #32
 8014c6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014c6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c72:	2330      	movs	r3, #48	@ 0x30
 8014c74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014e24 <_vfiprintf_r+0x21c>
 8014c78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014c7c:	f04f 0901 	mov.w	r9, #1
 8014c80:	4623      	mov	r3, r4
 8014c82:	469a      	mov	sl, r3
 8014c84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c88:	b10a      	cbz	r2, 8014c8e <_vfiprintf_r+0x86>
 8014c8a:	2a25      	cmp	r2, #37	@ 0x25
 8014c8c:	d1f9      	bne.n	8014c82 <_vfiprintf_r+0x7a>
 8014c8e:	ebba 0b04 	subs.w	fp, sl, r4
 8014c92:	d00b      	beq.n	8014cac <_vfiprintf_r+0xa4>
 8014c94:	465b      	mov	r3, fp
 8014c96:	4622      	mov	r2, r4
 8014c98:	4629      	mov	r1, r5
 8014c9a:	4630      	mov	r0, r6
 8014c9c:	f7ff ffa2 	bl	8014be4 <__sfputs_r>
 8014ca0:	3001      	adds	r0, #1
 8014ca2:	f000 80a7 	beq.w	8014df4 <_vfiprintf_r+0x1ec>
 8014ca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014ca8:	445a      	add	r2, fp
 8014caa:	9209      	str	r2, [sp, #36]	@ 0x24
 8014cac:	f89a 3000 	ldrb.w	r3, [sl]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	f000 809f 	beq.w	8014df4 <_vfiprintf_r+0x1ec>
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8014cbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014cc0:	f10a 0a01 	add.w	sl, sl, #1
 8014cc4:	9304      	str	r3, [sp, #16]
 8014cc6:	9307      	str	r3, [sp, #28]
 8014cc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014ccc:	931a      	str	r3, [sp, #104]	@ 0x68
 8014cce:	4654      	mov	r4, sl
 8014cd0:	2205      	movs	r2, #5
 8014cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cd6:	4853      	ldr	r0, [pc, #332]	@ (8014e24 <_vfiprintf_r+0x21c>)
 8014cd8:	f7eb fab2 	bl	8000240 <memchr>
 8014cdc:	9a04      	ldr	r2, [sp, #16]
 8014cde:	b9d8      	cbnz	r0, 8014d18 <_vfiprintf_r+0x110>
 8014ce0:	06d1      	lsls	r1, r2, #27
 8014ce2:	bf44      	itt	mi
 8014ce4:	2320      	movmi	r3, #32
 8014ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014cea:	0713      	lsls	r3, r2, #28
 8014cec:	bf44      	itt	mi
 8014cee:	232b      	movmi	r3, #43	@ 0x2b
 8014cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8014cf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8014cfa:	d015      	beq.n	8014d28 <_vfiprintf_r+0x120>
 8014cfc:	9a07      	ldr	r2, [sp, #28]
 8014cfe:	4654      	mov	r4, sl
 8014d00:	2000      	movs	r0, #0
 8014d02:	f04f 0c0a 	mov.w	ip, #10
 8014d06:	4621      	mov	r1, r4
 8014d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d0c:	3b30      	subs	r3, #48	@ 0x30
 8014d0e:	2b09      	cmp	r3, #9
 8014d10:	d94b      	bls.n	8014daa <_vfiprintf_r+0x1a2>
 8014d12:	b1b0      	cbz	r0, 8014d42 <_vfiprintf_r+0x13a>
 8014d14:	9207      	str	r2, [sp, #28]
 8014d16:	e014      	b.n	8014d42 <_vfiprintf_r+0x13a>
 8014d18:	eba0 0308 	sub.w	r3, r0, r8
 8014d1c:	fa09 f303 	lsl.w	r3, r9, r3
 8014d20:	4313      	orrs	r3, r2
 8014d22:	9304      	str	r3, [sp, #16]
 8014d24:	46a2      	mov	sl, r4
 8014d26:	e7d2      	b.n	8014cce <_vfiprintf_r+0xc6>
 8014d28:	9b03      	ldr	r3, [sp, #12]
 8014d2a:	1d19      	adds	r1, r3, #4
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	9103      	str	r1, [sp, #12]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	bfbb      	ittet	lt
 8014d34:	425b      	neglt	r3, r3
 8014d36:	f042 0202 	orrlt.w	r2, r2, #2
 8014d3a:	9307      	strge	r3, [sp, #28]
 8014d3c:	9307      	strlt	r3, [sp, #28]
 8014d3e:	bfb8      	it	lt
 8014d40:	9204      	strlt	r2, [sp, #16]
 8014d42:	7823      	ldrb	r3, [r4, #0]
 8014d44:	2b2e      	cmp	r3, #46	@ 0x2e
 8014d46:	d10a      	bne.n	8014d5e <_vfiprintf_r+0x156>
 8014d48:	7863      	ldrb	r3, [r4, #1]
 8014d4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014d4c:	d132      	bne.n	8014db4 <_vfiprintf_r+0x1ac>
 8014d4e:	9b03      	ldr	r3, [sp, #12]
 8014d50:	1d1a      	adds	r2, r3, #4
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	9203      	str	r2, [sp, #12]
 8014d56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014d5a:	3402      	adds	r4, #2
 8014d5c:	9305      	str	r3, [sp, #20]
 8014d5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014e34 <_vfiprintf_r+0x22c>
 8014d62:	7821      	ldrb	r1, [r4, #0]
 8014d64:	2203      	movs	r2, #3
 8014d66:	4650      	mov	r0, sl
 8014d68:	f7eb fa6a 	bl	8000240 <memchr>
 8014d6c:	b138      	cbz	r0, 8014d7e <_vfiprintf_r+0x176>
 8014d6e:	9b04      	ldr	r3, [sp, #16]
 8014d70:	eba0 000a 	sub.w	r0, r0, sl
 8014d74:	2240      	movs	r2, #64	@ 0x40
 8014d76:	4082      	lsls	r2, r0
 8014d78:	4313      	orrs	r3, r2
 8014d7a:	3401      	adds	r4, #1
 8014d7c:	9304      	str	r3, [sp, #16]
 8014d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d82:	4829      	ldr	r0, [pc, #164]	@ (8014e28 <_vfiprintf_r+0x220>)
 8014d84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014d88:	2206      	movs	r2, #6
 8014d8a:	f7eb fa59 	bl	8000240 <memchr>
 8014d8e:	2800      	cmp	r0, #0
 8014d90:	d03f      	beq.n	8014e12 <_vfiprintf_r+0x20a>
 8014d92:	4b26      	ldr	r3, [pc, #152]	@ (8014e2c <_vfiprintf_r+0x224>)
 8014d94:	bb1b      	cbnz	r3, 8014dde <_vfiprintf_r+0x1d6>
 8014d96:	9b03      	ldr	r3, [sp, #12]
 8014d98:	3307      	adds	r3, #7
 8014d9a:	f023 0307 	bic.w	r3, r3, #7
 8014d9e:	3308      	adds	r3, #8
 8014da0:	9303      	str	r3, [sp, #12]
 8014da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014da4:	443b      	add	r3, r7
 8014da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014da8:	e76a      	b.n	8014c80 <_vfiprintf_r+0x78>
 8014daa:	fb0c 3202 	mla	r2, ip, r2, r3
 8014dae:	460c      	mov	r4, r1
 8014db0:	2001      	movs	r0, #1
 8014db2:	e7a8      	b.n	8014d06 <_vfiprintf_r+0xfe>
 8014db4:	2300      	movs	r3, #0
 8014db6:	3401      	adds	r4, #1
 8014db8:	9305      	str	r3, [sp, #20]
 8014dba:	4619      	mov	r1, r3
 8014dbc:	f04f 0c0a 	mov.w	ip, #10
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014dc6:	3a30      	subs	r2, #48	@ 0x30
 8014dc8:	2a09      	cmp	r2, #9
 8014dca:	d903      	bls.n	8014dd4 <_vfiprintf_r+0x1cc>
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d0c6      	beq.n	8014d5e <_vfiprintf_r+0x156>
 8014dd0:	9105      	str	r1, [sp, #20]
 8014dd2:	e7c4      	b.n	8014d5e <_vfiprintf_r+0x156>
 8014dd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014dd8:	4604      	mov	r4, r0
 8014dda:	2301      	movs	r3, #1
 8014ddc:	e7f0      	b.n	8014dc0 <_vfiprintf_r+0x1b8>
 8014dde:	ab03      	add	r3, sp, #12
 8014de0:	9300      	str	r3, [sp, #0]
 8014de2:	462a      	mov	r2, r5
 8014de4:	4b12      	ldr	r3, [pc, #72]	@ (8014e30 <_vfiprintf_r+0x228>)
 8014de6:	a904      	add	r1, sp, #16
 8014de8:	4630      	mov	r0, r6
 8014dea:	f7fc fefd 	bl	8011be8 <_printf_float>
 8014dee:	4607      	mov	r7, r0
 8014df0:	1c78      	adds	r0, r7, #1
 8014df2:	d1d6      	bne.n	8014da2 <_vfiprintf_r+0x19a>
 8014df4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014df6:	07d9      	lsls	r1, r3, #31
 8014df8:	d405      	bmi.n	8014e06 <_vfiprintf_r+0x1fe>
 8014dfa:	89ab      	ldrh	r3, [r5, #12]
 8014dfc:	059a      	lsls	r2, r3, #22
 8014dfe:	d402      	bmi.n	8014e06 <_vfiprintf_r+0x1fe>
 8014e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014e02:	f7fd fcbb 	bl	801277c <__retarget_lock_release_recursive>
 8014e06:	89ab      	ldrh	r3, [r5, #12]
 8014e08:	065b      	lsls	r3, r3, #25
 8014e0a:	f53f af1f 	bmi.w	8014c4c <_vfiprintf_r+0x44>
 8014e0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014e10:	e71e      	b.n	8014c50 <_vfiprintf_r+0x48>
 8014e12:	ab03      	add	r3, sp, #12
 8014e14:	9300      	str	r3, [sp, #0]
 8014e16:	462a      	mov	r2, r5
 8014e18:	4b05      	ldr	r3, [pc, #20]	@ (8014e30 <_vfiprintf_r+0x228>)
 8014e1a:	a904      	add	r1, sp, #16
 8014e1c:	4630      	mov	r0, r6
 8014e1e:	f7fd f97b 	bl	8012118 <_printf_i>
 8014e22:	e7e4      	b.n	8014dee <_vfiprintf_r+0x1e6>
 8014e24:	0801778a 	.word	0x0801778a
 8014e28:	08017794 	.word	0x08017794
 8014e2c:	08011be9 	.word	0x08011be9
 8014e30:	08014be5 	.word	0x08014be5
 8014e34:	08017790 	.word	0x08017790

08014e38 <__swbuf_r>:
 8014e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e3a:	460e      	mov	r6, r1
 8014e3c:	4614      	mov	r4, r2
 8014e3e:	4605      	mov	r5, r0
 8014e40:	b118      	cbz	r0, 8014e4a <__swbuf_r+0x12>
 8014e42:	6a03      	ldr	r3, [r0, #32]
 8014e44:	b90b      	cbnz	r3, 8014e4a <__swbuf_r+0x12>
 8014e46:	f7fd fb11 	bl	801246c <__sinit>
 8014e4a:	69a3      	ldr	r3, [r4, #24]
 8014e4c:	60a3      	str	r3, [r4, #8]
 8014e4e:	89a3      	ldrh	r3, [r4, #12]
 8014e50:	071a      	lsls	r2, r3, #28
 8014e52:	d501      	bpl.n	8014e58 <__swbuf_r+0x20>
 8014e54:	6923      	ldr	r3, [r4, #16]
 8014e56:	b943      	cbnz	r3, 8014e6a <__swbuf_r+0x32>
 8014e58:	4621      	mov	r1, r4
 8014e5a:	4628      	mov	r0, r5
 8014e5c:	f000 f82a 	bl	8014eb4 <__swsetup_r>
 8014e60:	b118      	cbz	r0, 8014e6a <__swbuf_r+0x32>
 8014e62:	f04f 37ff 	mov.w	r7, #4294967295
 8014e66:	4638      	mov	r0, r7
 8014e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e6a:	6823      	ldr	r3, [r4, #0]
 8014e6c:	6922      	ldr	r2, [r4, #16]
 8014e6e:	1a98      	subs	r0, r3, r2
 8014e70:	6963      	ldr	r3, [r4, #20]
 8014e72:	b2f6      	uxtb	r6, r6
 8014e74:	4283      	cmp	r3, r0
 8014e76:	4637      	mov	r7, r6
 8014e78:	dc05      	bgt.n	8014e86 <__swbuf_r+0x4e>
 8014e7a:	4621      	mov	r1, r4
 8014e7c:	4628      	mov	r0, r5
 8014e7e:	f7ff fded 	bl	8014a5c <_fflush_r>
 8014e82:	2800      	cmp	r0, #0
 8014e84:	d1ed      	bne.n	8014e62 <__swbuf_r+0x2a>
 8014e86:	68a3      	ldr	r3, [r4, #8]
 8014e88:	3b01      	subs	r3, #1
 8014e8a:	60a3      	str	r3, [r4, #8]
 8014e8c:	6823      	ldr	r3, [r4, #0]
 8014e8e:	1c5a      	adds	r2, r3, #1
 8014e90:	6022      	str	r2, [r4, #0]
 8014e92:	701e      	strb	r6, [r3, #0]
 8014e94:	6962      	ldr	r2, [r4, #20]
 8014e96:	1c43      	adds	r3, r0, #1
 8014e98:	429a      	cmp	r2, r3
 8014e9a:	d004      	beq.n	8014ea6 <__swbuf_r+0x6e>
 8014e9c:	89a3      	ldrh	r3, [r4, #12]
 8014e9e:	07db      	lsls	r3, r3, #31
 8014ea0:	d5e1      	bpl.n	8014e66 <__swbuf_r+0x2e>
 8014ea2:	2e0a      	cmp	r6, #10
 8014ea4:	d1df      	bne.n	8014e66 <__swbuf_r+0x2e>
 8014ea6:	4621      	mov	r1, r4
 8014ea8:	4628      	mov	r0, r5
 8014eaa:	f7ff fdd7 	bl	8014a5c <_fflush_r>
 8014eae:	2800      	cmp	r0, #0
 8014eb0:	d0d9      	beq.n	8014e66 <__swbuf_r+0x2e>
 8014eb2:	e7d6      	b.n	8014e62 <__swbuf_r+0x2a>

08014eb4 <__swsetup_r>:
 8014eb4:	b538      	push	{r3, r4, r5, lr}
 8014eb6:	4b29      	ldr	r3, [pc, #164]	@ (8014f5c <__swsetup_r+0xa8>)
 8014eb8:	4605      	mov	r5, r0
 8014eba:	6818      	ldr	r0, [r3, #0]
 8014ebc:	460c      	mov	r4, r1
 8014ebe:	b118      	cbz	r0, 8014ec8 <__swsetup_r+0x14>
 8014ec0:	6a03      	ldr	r3, [r0, #32]
 8014ec2:	b90b      	cbnz	r3, 8014ec8 <__swsetup_r+0x14>
 8014ec4:	f7fd fad2 	bl	801246c <__sinit>
 8014ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ecc:	0719      	lsls	r1, r3, #28
 8014ece:	d422      	bmi.n	8014f16 <__swsetup_r+0x62>
 8014ed0:	06da      	lsls	r2, r3, #27
 8014ed2:	d407      	bmi.n	8014ee4 <__swsetup_r+0x30>
 8014ed4:	2209      	movs	r2, #9
 8014ed6:	602a      	str	r2, [r5, #0]
 8014ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014edc:	81a3      	strh	r3, [r4, #12]
 8014ede:	f04f 30ff 	mov.w	r0, #4294967295
 8014ee2:	e033      	b.n	8014f4c <__swsetup_r+0x98>
 8014ee4:	0758      	lsls	r0, r3, #29
 8014ee6:	d512      	bpl.n	8014f0e <__swsetup_r+0x5a>
 8014ee8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014eea:	b141      	cbz	r1, 8014efe <__swsetup_r+0x4a>
 8014eec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014ef0:	4299      	cmp	r1, r3
 8014ef2:	d002      	beq.n	8014efa <__swsetup_r+0x46>
 8014ef4:	4628      	mov	r0, r5
 8014ef6:	f7fe fad3 	bl	80134a0 <_free_r>
 8014efa:	2300      	movs	r3, #0
 8014efc:	6363      	str	r3, [r4, #52]	@ 0x34
 8014efe:	89a3      	ldrh	r3, [r4, #12]
 8014f00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014f04:	81a3      	strh	r3, [r4, #12]
 8014f06:	2300      	movs	r3, #0
 8014f08:	6063      	str	r3, [r4, #4]
 8014f0a:	6923      	ldr	r3, [r4, #16]
 8014f0c:	6023      	str	r3, [r4, #0]
 8014f0e:	89a3      	ldrh	r3, [r4, #12]
 8014f10:	f043 0308 	orr.w	r3, r3, #8
 8014f14:	81a3      	strh	r3, [r4, #12]
 8014f16:	6923      	ldr	r3, [r4, #16]
 8014f18:	b94b      	cbnz	r3, 8014f2e <__swsetup_r+0x7a>
 8014f1a:	89a3      	ldrh	r3, [r4, #12]
 8014f1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014f24:	d003      	beq.n	8014f2e <__swsetup_r+0x7a>
 8014f26:	4621      	mov	r1, r4
 8014f28:	4628      	mov	r0, r5
 8014f2a:	f000 f88b 	bl	8015044 <__smakebuf_r>
 8014f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f32:	f013 0201 	ands.w	r2, r3, #1
 8014f36:	d00a      	beq.n	8014f4e <__swsetup_r+0x9a>
 8014f38:	2200      	movs	r2, #0
 8014f3a:	60a2      	str	r2, [r4, #8]
 8014f3c:	6962      	ldr	r2, [r4, #20]
 8014f3e:	4252      	negs	r2, r2
 8014f40:	61a2      	str	r2, [r4, #24]
 8014f42:	6922      	ldr	r2, [r4, #16]
 8014f44:	b942      	cbnz	r2, 8014f58 <__swsetup_r+0xa4>
 8014f46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014f4a:	d1c5      	bne.n	8014ed8 <__swsetup_r+0x24>
 8014f4c:	bd38      	pop	{r3, r4, r5, pc}
 8014f4e:	0799      	lsls	r1, r3, #30
 8014f50:	bf58      	it	pl
 8014f52:	6962      	ldrpl	r2, [r4, #20]
 8014f54:	60a2      	str	r2, [r4, #8]
 8014f56:	e7f4      	b.n	8014f42 <__swsetup_r+0x8e>
 8014f58:	2000      	movs	r0, #0
 8014f5a:	e7f7      	b.n	8014f4c <__swsetup_r+0x98>
 8014f5c:	200001a0 	.word	0x200001a0

08014f60 <_raise_r>:
 8014f60:	291f      	cmp	r1, #31
 8014f62:	b538      	push	{r3, r4, r5, lr}
 8014f64:	4605      	mov	r5, r0
 8014f66:	460c      	mov	r4, r1
 8014f68:	d904      	bls.n	8014f74 <_raise_r+0x14>
 8014f6a:	2316      	movs	r3, #22
 8014f6c:	6003      	str	r3, [r0, #0]
 8014f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8014f72:	bd38      	pop	{r3, r4, r5, pc}
 8014f74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014f76:	b112      	cbz	r2, 8014f7e <_raise_r+0x1e>
 8014f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014f7c:	b94b      	cbnz	r3, 8014f92 <_raise_r+0x32>
 8014f7e:	4628      	mov	r0, r5
 8014f80:	f000 f830 	bl	8014fe4 <_getpid_r>
 8014f84:	4622      	mov	r2, r4
 8014f86:	4601      	mov	r1, r0
 8014f88:	4628      	mov	r0, r5
 8014f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f8e:	f000 b817 	b.w	8014fc0 <_kill_r>
 8014f92:	2b01      	cmp	r3, #1
 8014f94:	d00a      	beq.n	8014fac <_raise_r+0x4c>
 8014f96:	1c59      	adds	r1, r3, #1
 8014f98:	d103      	bne.n	8014fa2 <_raise_r+0x42>
 8014f9a:	2316      	movs	r3, #22
 8014f9c:	6003      	str	r3, [r0, #0]
 8014f9e:	2001      	movs	r0, #1
 8014fa0:	e7e7      	b.n	8014f72 <_raise_r+0x12>
 8014fa2:	2100      	movs	r1, #0
 8014fa4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014fa8:	4620      	mov	r0, r4
 8014faa:	4798      	blx	r3
 8014fac:	2000      	movs	r0, #0
 8014fae:	e7e0      	b.n	8014f72 <_raise_r+0x12>

08014fb0 <raise>:
 8014fb0:	4b02      	ldr	r3, [pc, #8]	@ (8014fbc <raise+0xc>)
 8014fb2:	4601      	mov	r1, r0
 8014fb4:	6818      	ldr	r0, [r3, #0]
 8014fb6:	f7ff bfd3 	b.w	8014f60 <_raise_r>
 8014fba:	bf00      	nop
 8014fbc:	200001a0 	.word	0x200001a0

08014fc0 <_kill_r>:
 8014fc0:	b538      	push	{r3, r4, r5, lr}
 8014fc2:	4d07      	ldr	r5, [pc, #28]	@ (8014fe0 <_kill_r+0x20>)
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	4604      	mov	r4, r0
 8014fc8:	4608      	mov	r0, r1
 8014fca:	4611      	mov	r1, r2
 8014fcc:	602b      	str	r3, [r5, #0]
 8014fce:	f7ef fdaf 	bl	8004b30 <_kill>
 8014fd2:	1c43      	adds	r3, r0, #1
 8014fd4:	d102      	bne.n	8014fdc <_kill_r+0x1c>
 8014fd6:	682b      	ldr	r3, [r5, #0]
 8014fd8:	b103      	cbz	r3, 8014fdc <_kill_r+0x1c>
 8014fda:	6023      	str	r3, [r4, #0]
 8014fdc:	bd38      	pop	{r3, r4, r5, pc}
 8014fde:	bf00      	nop
 8014fe0:	20006d38 	.word	0x20006d38

08014fe4 <_getpid_r>:
 8014fe4:	f7ef bd9c 	b.w	8004b20 <_getpid>

08014fe8 <_malloc_usable_size_r>:
 8014fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014fec:	1f18      	subs	r0, r3, #4
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	bfbc      	itt	lt
 8014ff2:	580b      	ldrlt	r3, [r1, r0]
 8014ff4:	18c0      	addlt	r0, r0, r3
 8014ff6:	4770      	bx	lr

08014ff8 <__swhatbuf_r>:
 8014ff8:	b570      	push	{r4, r5, r6, lr}
 8014ffa:	460c      	mov	r4, r1
 8014ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015000:	2900      	cmp	r1, #0
 8015002:	b096      	sub	sp, #88	@ 0x58
 8015004:	4615      	mov	r5, r2
 8015006:	461e      	mov	r6, r3
 8015008:	da0d      	bge.n	8015026 <__swhatbuf_r+0x2e>
 801500a:	89a3      	ldrh	r3, [r4, #12]
 801500c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015010:	f04f 0100 	mov.w	r1, #0
 8015014:	bf14      	ite	ne
 8015016:	2340      	movne	r3, #64	@ 0x40
 8015018:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801501c:	2000      	movs	r0, #0
 801501e:	6031      	str	r1, [r6, #0]
 8015020:	602b      	str	r3, [r5, #0]
 8015022:	b016      	add	sp, #88	@ 0x58
 8015024:	bd70      	pop	{r4, r5, r6, pc}
 8015026:	466a      	mov	r2, sp
 8015028:	f000 f848 	bl	80150bc <_fstat_r>
 801502c:	2800      	cmp	r0, #0
 801502e:	dbec      	blt.n	801500a <__swhatbuf_r+0x12>
 8015030:	9901      	ldr	r1, [sp, #4]
 8015032:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015036:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801503a:	4259      	negs	r1, r3
 801503c:	4159      	adcs	r1, r3
 801503e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015042:	e7eb      	b.n	801501c <__swhatbuf_r+0x24>

08015044 <__smakebuf_r>:
 8015044:	898b      	ldrh	r3, [r1, #12]
 8015046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015048:	079d      	lsls	r5, r3, #30
 801504a:	4606      	mov	r6, r0
 801504c:	460c      	mov	r4, r1
 801504e:	d507      	bpl.n	8015060 <__smakebuf_r+0x1c>
 8015050:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015054:	6023      	str	r3, [r4, #0]
 8015056:	6123      	str	r3, [r4, #16]
 8015058:	2301      	movs	r3, #1
 801505a:	6163      	str	r3, [r4, #20]
 801505c:	b003      	add	sp, #12
 801505e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015060:	ab01      	add	r3, sp, #4
 8015062:	466a      	mov	r2, sp
 8015064:	f7ff ffc8 	bl	8014ff8 <__swhatbuf_r>
 8015068:	9f00      	ldr	r7, [sp, #0]
 801506a:	4605      	mov	r5, r0
 801506c:	4639      	mov	r1, r7
 801506e:	4630      	mov	r0, r6
 8015070:	f7fe fdc4 	bl	8013bfc <_malloc_r>
 8015074:	b948      	cbnz	r0, 801508a <__smakebuf_r+0x46>
 8015076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801507a:	059a      	lsls	r2, r3, #22
 801507c:	d4ee      	bmi.n	801505c <__smakebuf_r+0x18>
 801507e:	f023 0303 	bic.w	r3, r3, #3
 8015082:	f043 0302 	orr.w	r3, r3, #2
 8015086:	81a3      	strh	r3, [r4, #12]
 8015088:	e7e2      	b.n	8015050 <__smakebuf_r+0xc>
 801508a:	89a3      	ldrh	r3, [r4, #12]
 801508c:	6020      	str	r0, [r4, #0]
 801508e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015092:	81a3      	strh	r3, [r4, #12]
 8015094:	9b01      	ldr	r3, [sp, #4]
 8015096:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801509a:	b15b      	cbz	r3, 80150b4 <__smakebuf_r+0x70>
 801509c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150a0:	4630      	mov	r0, r6
 80150a2:	f000 f81d 	bl	80150e0 <_isatty_r>
 80150a6:	b128      	cbz	r0, 80150b4 <__smakebuf_r+0x70>
 80150a8:	89a3      	ldrh	r3, [r4, #12]
 80150aa:	f023 0303 	bic.w	r3, r3, #3
 80150ae:	f043 0301 	orr.w	r3, r3, #1
 80150b2:	81a3      	strh	r3, [r4, #12]
 80150b4:	89a3      	ldrh	r3, [r4, #12]
 80150b6:	431d      	orrs	r5, r3
 80150b8:	81a5      	strh	r5, [r4, #12]
 80150ba:	e7cf      	b.n	801505c <__smakebuf_r+0x18>

080150bc <_fstat_r>:
 80150bc:	b538      	push	{r3, r4, r5, lr}
 80150be:	4d07      	ldr	r5, [pc, #28]	@ (80150dc <_fstat_r+0x20>)
 80150c0:	2300      	movs	r3, #0
 80150c2:	4604      	mov	r4, r0
 80150c4:	4608      	mov	r0, r1
 80150c6:	4611      	mov	r1, r2
 80150c8:	602b      	str	r3, [r5, #0]
 80150ca:	f7ef fd91 	bl	8004bf0 <_fstat>
 80150ce:	1c43      	adds	r3, r0, #1
 80150d0:	d102      	bne.n	80150d8 <_fstat_r+0x1c>
 80150d2:	682b      	ldr	r3, [r5, #0]
 80150d4:	b103      	cbz	r3, 80150d8 <_fstat_r+0x1c>
 80150d6:	6023      	str	r3, [r4, #0]
 80150d8:	bd38      	pop	{r3, r4, r5, pc}
 80150da:	bf00      	nop
 80150dc:	20006d38 	.word	0x20006d38

080150e0 <_isatty_r>:
 80150e0:	b538      	push	{r3, r4, r5, lr}
 80150e2:	4d06      	ldr	r5, [pc, #24]	@ (80150fc <_isatty_r+0x1c>)
 80150e4:	2300      	movs	r3, #0
 80150e6:	4604      	mov	r4, r0
 80150e8:	4608      	mov	r0, r1
 80150ea:	602b      	str	r3, [r5, #0]
 80150ec:	f7ef fd90 	bl	8004c10 <_isatty>
 80150f0:	1c43      	adds	r3, r0, #1
 80150f2:	d102      	bne.n	80150fa <_isatty_r+0x1a>
 80150f4:	682b      	ldr	r3, [r5, #0]
 80150f6:	b103      	cbz	r3, 80150fa <_isatty_r+0x1a>
 80150f8:	6023      	str	r3, [r4, #0]
 80150fa:	bd38      	pop	{r3, r4, r5, pc}
 80150fc:	20006d38 	.word	0x20006d38

08015100 <atan2>:
 8015100:	f000 ba2e 	b.w	8015560 <__ieee754_atan2>

08015104 <pow>:
 8015104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015106:	ed2d 8b02 	vpush	{d8}
 801510a:	eeb0 8a40 	vmov.f32	s16, s0
 801510e:	eef0 8a60 	vmov.f32	s17, s1
 8015112:	ec55 4b11 	vmov	r4, r5, d1
 8015116:	f000 faeb 	bl	80156f0 <__ieee754_pow>
 801511a:	4622      	mov	r2, r4
 801511c:	462b      	mov	r3, r5
 801511e:	4620      	mov	r0, r4
 8015120:	4629      	mov	r1, r5
 8015122:	ec57 6b10 	vmov	r6, r7, d0
 8015126:	f7eb fd39 	bl	8000b9c <__aeabi_dcmpun>
 801512a:	2800      	cmp	r0, #0
 801512c:	d13b      	bne.n	80151a6 <pow+0xa2>
 801512e:	ec51 0b18 	vmov	r0, r1, d8
 8015132:	2200      	movs	r2, #0
 8015134:	2300      	movs	r3, #0
 8015136:	f7eb fcff 	bl	8000b38 <__aeabi_dcmpeq>
 801513a:	b1b8      	cbz	r0, 801516c <pow+0x68>
 801513c:	2200      	movs	r2, #0
 801513e:	2300      	movs	r3, #0
 8015140:	4620      	mov	r0, r4
 8015142:	4629      	mov	r1, r5
 8015144:	f7eb fcf8 	bl	8000b38 <__aeabi_dcmpeq>
 8015148:	2800      	cmp	r0, #0
 801514a:	d146      	bne.n	80151da <pow+0xd6>
 801514c:	ec45 4b10 	vmov	d0, r4, r5
 8015150:	f000 f91e 	bl	8015390 <finite>
 8015154:	b338      	cbz	r0, 80151a6 <pow+0xa2>
 8015156:	2200      	movs	r2, #0
 8015158:	2300      	movs	r3, #0
 801515a:	4620      	mov	r0, r4
 801515c:	4629      	mov	r1, r5
 801515e:	f7eb fcf5 	bl	8000b4c <__aeabi_dcmplt>
 8015162:	b300      	cbz	r0, 80151a6 <pow+0xa2>
 8015164:	f7fd fade 	bl	8012724 <__errno>
 8015168:	2322      	movs	r3, #34	@ 0x22
 801516a:	e01b      	b.n	80151a4 <pow+0xa0>
 801516c:	ec47 6b10 	vmov	d0, r6, r7
 8015170:	f000 f90e 	bl	8015390 <finite>
 8015174:	b9e0      	cbnz	r0, 80151b0 <pow+0xac>
 8015176:	eeb0 0a48 	vmov.f32	s0, s16
 801517a:	eef0 0a68 	vmov.f32	s1, s17
 801517e:	f000 f907 	bl	8015390 <finite>
 8015182:	b1a8      	cbz	r0, 80151b0 <pow+0xac>
 8015184:	ec45 4b10 	vmov	d0, r4, r5
 8015188:	f000 f902 	bl	8015390 <finite>
 801518c:	b180      	cbz	r0, 80151b0 <pow+0xac>
 801518e:	4632      	mov	r2, r6
 8015190:	463b      	mov	r3, r7
 8015192:	4630      	mov	r0, r6
 8015194:	4639      	mov	r1, r7
 8015196:	f7eb fd01 	bl	8000b9c <__aeabi_dcmpun>
 801519a:	2800      	cmp	r0, #0
 801519c:	d0e2      	beq.n	8015164 <pow+0x60>
 801519e:	f7fd fac1 	bl	8012724 <__errno>
 80151a2:	2321      	movs	r3, #33	@ 0x21
 80151a4:	6003      	str	r3, [r0, #0]
 80151a6:	ecbd 8b02 	vpop	{d8}
 80151aa:	ec47 6b10 	vmov	d0, r6, r7
 80151ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151b0:	2200      	movs	r2, #0
 80151b2:	2300      	movs	r3, #0
 80151b4:	4630      	mov	r0, r6
 80151b6:	4639      	mov	r1, r7
 80151b8:	f7eb fcbe 	bl	8000b38 <__aeabi_dcmpeq>
 80151bc:	2800      	cmp	r0, #0
 80151be:	d0f2      	beq.n	80151a6 <pow+0xa2>
 80151c0:	eeb0 0a48 	vmov.f32	s0, s16
 80151c4:	eef0 0a68 	vmov.f32	s1, s17
 80151c8:	f000 f8e2 	bl	8015390 <finite>
 80151cc:	2800      	cmp	r0, #0
 80151ce:	d0ea      	beq.n	80151a6 <pow+0xa2>
 80151d0:	ec45 4b10 	vmov	d0, r4, r5
 80151d4:	f000 f8dc 	bl	8015390 <finite>
 80151d8:	e7c3      	b.n	8015162 <pow+0x5e>
 80151da:	4f01      	ldr	r7, [pc, #4]	@ (80151e0 <pow+0xdc>)
 80151dc:	2600      	movs	r6, #0
 80151de:	e7e2      	b.n	80151a6 <pow+0xa2>
 80151e0:	3ff00000 	.word	0x3ff00000

080151e4 <sqrt>:
 80151e4:	b538      	push	{r3, r4, r5, lr}
 80151e6:	ed2d 8b02 	vpush	{d8}
 80151ea:	ec55 4b10 	vmov	r4, r5, d0
 80151ee:	f000 f8db 	bl	80153a8 <__ieee754_sqrt>
 80151f2:	4622      	mov	r2, r4
 80151f4:	462b      	mov	r3, r5
 80151f6:	4620      	mov	r0, r4
 80151f8:	4629      	mov	r1, r5
 80151fa:	eeb0 8a40 	vmov.f32	s16, s0
 80151fe:	eef0 8a60 	vmov.f32	s17, s1
 8015202:	f7eb fccb 	bl	8000b9c <__aeabi_dcmpun>
 8015206:	b990      	cbnz	r0, 801522e <sqrt+0x4a>
 8015208:	2200      	movs	r2, #0
 801520a:	2300      	movs	r3, #0
 801520c:	4620      	mov	r0, r4
 801520e:	4629      	mov	r1, r5
 8015210:	f7eb fc9c 	bl	8000b4c <__aeabi_dcmplt>
 8015214:	b158      	cbz	r0, 801522e <sqrt+0x4a>
 8015216:	f7fd fa85 	bl	8012724 <__errno>
 801521a:	2321      	movs	r3, #33	@ 0x21
 801521c:	6003      	str	r3, [r0, #0]
 801521e:	2200      	movs	r2, #0
 8015220:	2300      	movs	r3, #0
 8015222:	4610      	mov	r0, r2
 8015224:	4619      	mov	r1, r3
 8015226:	f7eb fb49 	bl	80008bc <__aeabi_ddiv>
 801522a:	ec41 0b18 	vmov	d8, r0, r1
 801522e:	eeb0 0a48 	vmov.f32	s0, s16
 8015232:	eef0 0a68 	vmov.f32	s1, s17
 8015236:	ecbd 8b02 	vpop	{d8}
 801523a:	bd38      	pop	{r3, r4, r5, pc}

0801523c <atan2f>:
 801523c:	f001 b9e4 	b.w	8016608 <__ieee754_atan2f>

08015240 <sqrtf>:
 8015240:	b508      	push	{r3, lr}
 8015242:	ed2d 8b02 	vpush	{d8}
 8015246:	eeb0 8a40 	vmov.f32	s16, s0
 801524a:	f000 f983 	bl	8015554 <__ieee754_sqrtf>
 801524e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015256:	d60c      	bvs.n	8015272 <sqrtf+0x32>
 8015258:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8015278 <sqrtf+0x38>
 801525c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015264:	d505      	bpl.n	8015272 <sqrtf+0x32>
 8015266:	f7fd fa5d 	bl	8012724 <__errno>
 801526a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801526e:	2321      	movs	r3, #33	@ 0x21
 8015270:	6003      	str	r3, [r0, #0]
 8015272:	ecbd 8b02 	vpop	{d8}
 8015276:	bd08      	pop	{r3, pc}
 8015278:	00000000 	.word	0x00000000

0801527c <cosf>:
 801527c:	ee10 3a10 	vmov	r3, s0
 8015280:	b507      	push	{r0, r1, r2, lr}
 8015282:	4a1e      	ldr	r2, [pc, #120]	@ (80152fc <cosf+0x80>)
 8015284:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015288:	4293      	cmp	r3, r2
 801528a:	d806      	bhi.n	801529a <cosf+0x1e>
 801528c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8015300 <cosf+0x84>
 8015290:	b003      	add	sp, #12
 8015292:	f85d eb04 	ldr.w	lr, [sp], #4
 8015296:	f001 b917 	b.w	80164c8 <__kernel_cosf>
 801529a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801529e:	d304      	bcc.n	80152aa <cosf+0x2e>
 80152a0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80152a4:	b003      	add	sp, #12
 80152a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80152aa:	4668      	mov	r0, sp
 80152ac:	f001 fa4c 	bl	8016748 <__ieee754_rem_pio2f>
 80152b0:	f000 0003 	and.w	r0, r0, #3
 80152b4:	2801      	cmp	r0, #1
 80152b6:	d009      	beq.n	80152cc <cosf+0x50>
 80152b8:	2802      	cmp	r0, #2
 80152ba:	d010      	beq.n	80152de <cosf+0x62>
 80152bc:	b9b0      	cbnz	r0, 80152ec <cosf+0x70>
 80152be:	eddd 0a01 	vldr	s1, [sp, #4]
 80152c2:	ed9d 0a00 	vldr	s0, [sp]
 80152c6:	f001 f8ff 	bl	80164c8 <__kernel_cosf>
 80152ca:	e7eb      	b.n	80152a4 <cosf+0x28>
 80152cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80152d0:	ed9d 0a00 	vldr	s0, [sp]
 80152d4:	f001 f950 	bl	8016578 <__kernel_sinf>
 80152d8:	eeb1 0a40 	vneg.f32	s0, s0
 80152dc:	e7e2      	b.n	80152a4 <cosf+0x28>
 80152de:	eddd 0a01 	vldr	s1, [sp, #4]
 80152e2:	ed9d 0a00 	vldr	s0, [sp]
 80152e6:	f001 f8ef 	bl	80164c8 <__kernel_cosf>
 80152ea:	e7f5      	b.n	80152d8 <cosf+0x5c>
 80152ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80152f0:	ed9d 0a00 	vldr	s0, [sp]
 80152f4:	2001      	movs	r0, #1
 80152f6:	f001 f93f 	bl	8016578 <__kernel_sinf>
 80152fa:	e7d3      	b.n	80152a4 <cosf+0x28>
 80152fc:	3f490fd8 	.word	0x3f490fd8
 8015300:	00000000 	.word	0x00000000

08015304 <sinf>:
 8015304:	ee10 3a10 	vmov	r3, s0
 8015308:	b507      	push	{r0, r1, r2, lr}
 801530a:	4a1f      	ldr	r2, [pc, #124]	@ (8015388 <sinf+0x84>)
 801530c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015310:	4293      	cmp	r3, r2
 8015312:	d807      	bhi.n	8015324 <sinf+0x20>
 8015314:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801538c <sinf+0x88>
 8015318:	2000      	movs	r0, #0
 801531a:	b003      	add	sp, #12
 801531c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015320:	f001 b92a 	b.w	8016578 <__kernel_sinf>
 8015324:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015328:	d304      	bcc.n	8015334 <sinf+0x30>
 801532a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801532e:	b003      	add	sp, #12
 8015330:	f85d fb04 	ldr.w	pc, [sp], #4
 8015334:	4668      	mov	r0, sp
 8015336:	f001 fa07 	bl	8016748 <__ieee754_rem_pio2f>
 801533a:	f000 0003 	and.w	r0, r0, #3
 801533e:	2801      	cmp	r0, #1
 8015340:	d00a      	beq.n	8015358 <sinf+0x54>
 8015342:	2802      	cmp	r0, #2
 8015344:	d00f      	beq.n	8015366 <sinf+0x62>
 8015346:	b9c0      	cbnz	r0, 801537a <sinf+0x76>
 8015348:	eddd 0a01 	vldr	s1, [sp, #4]
 801534c:	ed9d 0a00 	vldr	s0, [sp]
 8015350:	2001      	movs	r0, #1
 8015352:	f001 f911 	bl	8016578 <__kernel_sinf>
 8015356:	e7ea      	b.n	801532e <sinf+0x2a>
 8015358:	eddd 0a01 	vldr	s1, [sp, #4]
 801535c:	ed9d 0a00 	vldr	s0, [sp]
 8015360:	f001 f8b2 	bl	80164c8 <__kernel_cosf>
 8015364:	e7e3      	b.n	801532e <sinf+0x2a>
 8015366:	eddd 0a01 	vldr	s1, [sp, #4]
 801536a:	ed9d 0a00 	vldr	s0, [sp]
 801536e:	2001      	movs	r0, #1
 8015370:	f001 f902 	bl	8016578 <__kernel_sinf>
 8015374:	eeb1 0a40 	vneg.f32	s0, s0
 8015378:	e7d9      	b.n	801532e <sinf+0x2a>
 801537a:	eddd 0a01 	vldr	s1, [sp, #4]
 801537e:	ed9d 0a00 	vldr	s0, [sp]
 8015382:	f001 f8a1 	bl	80164c8 <__kernel_cosf>
 8015386:	e7f5      	b.n	8015374 <sinf+0x70>
 8015388:	3f490fd8 	.word	0x3f490fd8
 801538c:	00000000 	.word	0x00000000

08015390 <finite>:
 8015390:	b082      	sub	sp, #8
 8015392:	ed8d 0b00 	vstr	d0, [sp]
 8015396:	9801      	ldr	r0, [sp, #4]
 8015398:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801539c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80153a0:	0fc0      	lsrs	r0, r0, #31
 80153a2:	b002      	add	sp, #8
 80153a4:	4770      	bx	lr
	...

080153a8 <__ieee754_sqrt>:
 80153a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153ac:	4a66      	ldr	r2, [pc, #408]	@ (8015548 <__ieee754_sqrt+0x1a0>)
 80153ae:	ec55 4b10 	vmov	r4, r5, d0
 80153b2:	43aa      	bics	r2, r5
 80153b4:	462b      	mov	r3, r5
 80153b6:	4621      	mov	r1, r4
 80153b8:	d110      	bne.n	80153dc <__ieee754_sqrt+0x34>
 80153ba:	4622      	mov	r2, r4
 80153bc:	4620      	mov	r0, r4
 80153be:	4629      	mov	r1, r5
 80153c0:	f7eb f952 	bl	8000668 <__aeabi_dmul>
 80153c4:	4602      	mov	r2, r0
 80153c6:	460b      	mov	r3, r1
 80153c8:	4620      	mov	r0, r4
 80153ca:	4629      	mov	r1, r5
 80153cc:	f7ea ff96 	bl	80002fc <__adddf3>
 80153d0:	4604      	mov	r4, r0
 80153d2:	460d      	mov	r5, r1
 80153d4:	ec45 4b10 	vmov	d0, r4, r5
 80153d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153dc:	2d00      	cmp	r5, #0
 80153de:	dc0e      	bgt.n	80153fe <__ieee754_sqrt+0x56>
 80153e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80153e4:	4322      	orrs	r2, r4
 80153e6:	d0f5      	beq.n	80153d4 <__ieee754_sqrt+0x2c>
 80153e8:	b19d      	cbz	r5, 8015412 <__ieee754_sqrt+0x6a>
 80153ea:	4622      	mov	r2, r4
 80153ec:	4620      	mov	r0, r4
 80153ee:	4629      	mov	r1, r5
 80153f0:	f7ea ff82 	bl	80002f8 <__aeabi_dsub>
 80153f4:	4602      	mov	r2, r0
 80153f6:	460b      	mov	r3, r1
 80153f8:	f7eb fa60 	bl	80008bc <__aeabi_ddiv>
 80153fc:	e7e8      	b.n	80153d0 <__ieee754_sqrt+0x28>
 80153fe:	152a      	asrs	r2, r5, #20
 8015400:	d115      	bne.n	801542e <__ieee754_sqrt+0x86>
 8015402:	2000      	movs	r0, #0
 8015404:	e009      	b.n	801541a <__ieee754_sqrt+0x72>
 8015406:	0acb      	lsrs	r3, r1, #11
 8015408:	3a15      	subs	r2, #21
 801540a:	0549      	lsls	r1, r1, #21
 801540c:	2b00      	cmp	r3, #0
 801540e:	d0fa      	beq.n	8015406 <__ieee754_sqrt+0x5e>
 8015410:	e7f7      	b.n	8015402 <__ieee754_sqrt+0x5a>
 8015412:	462a      	mov	r2, r5
 8015414:	e7fa      	b.n	801540c <__ieee754_sqrt+0x64>
 8015416:	005b      	lsls	r3, r3, #1
 8015418:	3001      	adds	r0, #1
 801541a:	02dc      	lsls	r4, r3, #11
 801541c:	d5fb      	bpl.n	8015416 <__ieee754_sqrt+0x6e>
 801541e:	1e44      	subs	r4, r0, #1
 8015420:	1b12      	subs	r2, r2, r4
 8015422:	f1c0 0420 	rsb	r4, r0, #32
 8015426:	fa21 f404 	lsr.w	r4, r1, r4
 801542a:	4323      	orrs	r3, r4
 801542c:	4081      	lsls	r1, r0
 801542e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015432:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8015436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801543a:	07d2      	lsls	r2, r2, #31
 801543c:	bf5c      	itt	pl
 801543e:	005b      	lslpl	r3, r3, #1
 8015440:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8015444:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015448:	bf58      	it	pl
 801544a:	0049      	lslpl	r1, r1, #1
 801544c:	2600      	movs	r6, #0
 801544e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8015452:	107f      	asrs	r7, r7, #1
 8015454:	0049      	lsls	r1, r1, #1
 8015456:	2016      	movs	r0, #22
 8015458:	4632      	mov	r2, r6
 801545a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801545e:	1915      	adds	r5, r2, r4
 8015460:	429d      	cmp	r5, r3
 8015462:	bfde      	ittt	le
 8015464:	192a      	addle	r2, r5, r4
 8015466:	1b5b      	suble	r3, r3, r5
 8015468:	1936      	addle	r6, r6, r4
 801546a:	0fcd      	lsrs	r5, r1, #31
 801546c:	3801      	subs	r0, #1
 801546e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8015472:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015476:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801547a:	d1f0      	bne.n	801545e <__ieee754_sqrt+0xb6>
 801547c:	4605      	mov	r5, r0
 801547e:	2420      	movs	r4, #32
 8015480:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015484:	4293      	cmp	r3, r2
 8015486:	eb0c 0e00 	add.w	lr, ip, r0
 801548a:	dc02      	bgt.n	8015492 <__ieee754_sqrt+0xea>
 801548c:	d113      	bne.n	80154b6 <__ieee754_sqrt+0x10e>
 801548e:	458e      	cmp	lr, r1
 8015490:	d811      	bhi.n	80154b6 <__ieee754_sqrt+0x10e>
 8015492:	f1be 0f00 	cmp.w	lr, #0
 8015496:	eb0e 000c 	add.w	r0, lr, ip
 801549a:	da3f      	bge.n	801551c <__ieee754_sqrt+0x174>
 801549c:	2800      	cmp	r0, #0
 801549e:	db3d      	blt.n	801551c <__ieee754_sqrt+0x174>
 80154a0:	f102 0801 	add.w	r8, r2, #1
 80154a4:	1a9b      	subs	r3, r3, r2
 80154a6:	458e      	cmp	lr, r1
 80154a8:	bf88      	it	hi
 80154aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80154ae:	eba1 010e 	sub.w	r1, r1, lr
 80154b2:	4465      	add	r5, ip
 80154b4:	4642      	mov	r2, r8
 80154b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80154ba:	3c01      	subs	r4, #1
 80154bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80154c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80154c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80154c8:	d1dc      	bne.n	8015484 <__ieee754_sqrt+0xdc>
 80154ca:	4319      	orrs	r1, r3
 80154cc:	d01b      	beq.n	8015506 <__ieee754_sqrt+0x15e>
 80154ce:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801554c <__ieee754_sqrt+0x1a4>
 80154d2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8015550 <__ieee754_sqrt+0x1a8>
 80154d6:	e9da 0100 	ldrd	r0, r1, [sl]
 80154da:	e9db 2300 	ldrd	r2, r3, [fp]
 80154de:	f7ea ff0b 	bl	80002f8 <__aeabi_dsub>
 80154e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80154e6:	4602      	mov	r2, r0
 80154e8:	460b      	mov	r3, r1
 80154ea:	4640      	mov	r0, r8
 80154ec:	4649      	mov	r1, r9
 80154ee:	f7eb fb37 	bl	8000b60 <__aeabi_dcmple>
 80154f2:	b140      	cbz	r0, 8015506 <__ieee754_sqrt+0x15e>
 80154f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80154f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80154fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8015500:	d10e      	bne.n	8015520 <__ieee754_sqrt+0x178>
 8015502:	3601      	adds	r6, #1
 8015504:	4625      	mov	r5, r4
 8015506:	1073      	asrs	r3, r6, #1
 8015508:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801550c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8015510:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8015514:	086b      	lsrs	r3, r5, #1
 8015516:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801551a:	e759      	b.n	80153d0 <__ieee754_sqrt+0x28>
 801551c:	4690      	mov	r8, r2
 801551e:	e7c1      	b.n	80154a4 <__ieee754_sqrt+0xfc>
 8015520:	f7ea feec 	bl	80002fc <__adddf3>
 8015524:	e9da 8900 	ldrd	r8, r9, [sl]
 8015528:	4602      	mov	r2, r0
 801552a:	460b      	mov	r3, r1
 801552c:	4640      	mov	r0, r8
 801552e:	4649      	mov	r1, r9
 8015530:	f7eb fb0c 	bl	8000b4c <__aeabi_dcmplt>
 8015534:	b120      	cbz	r0, 8015540 <__ieee754_sqrt+0x198>
 8015536:	1cab      	adds	r3, r5, #2
 8015538:	bf08      	it	eq
 801553a:	3601      	addeq	r6, #1
 801553c:	3502      	adds	r5, #2
 801553e:	e7e2      	b.n	8015506 <__ieee754_sqrt+0x15e>
 8015540:	1c6b      	adds	r3, r5, #1
 8015542:	f023 0501 	bic.w	r5, r3, #1
 8015546:	e7de      	b.n	8015506 <__ieee754_sqrt+0x15e>
 8015548:	7ff00000 	.word	0x7ff00000
 801554c:	08017a00 	.word	0x08017a00
 8015550:	080179f8 	.word	0x080179f8

08015554 <__ieee754_sqrtf>:
 8015554:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015558:	4770      	bx	lr
 801555a:	0000      	movs	r0, r0
 801555c:	0000      	movs	r0, r0
	...

08015560 <__ieee754_atan2>:
 8015560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015564:	ec57 6b11 	vmov	r6, r7, d1
 8015568:	4273      	negs	r3, r6
 801556a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80156e8 <__ieee754_atan2+0x188>
 801556e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8015572:	4333      	orrs	r3, r6
 8015574:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015578:	4543      	cmp	r3, r8
 801557a:	ec51 0b10 	vmov	r0, r1, d0
 801557e:	4635      	mov	r5, r6
 8015580:	d809      	bhi.n	8015596 <__ieee754_atan2+0x36>
 8015582:	4244      	negs	r4, r0
 8015584:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015588:	4304      	orrs	r4, r0
 801558a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801558e:	4544      	cmp	r4, r8
 8015590:	468e      	mov	lr, r1
 8015592:	4681      	mov	r9, r0
 8015594:	d907      	bls.n	80155a6 <__ieee754_atan2+0x46>
 8015596:	4632      	mov	r2, r6
 8015598:	463b      	mov	r3, r7
 801559a:	f7ea feaf 	bl	80002fc <__adddf3>
 801559e:	ec41 0b10 	vmov	d0, r0, r1
 80155a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155a6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80155aa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80155ae:	4334      	orrs	r4, r6
 80155b0:	d103      	bne.n	80155ba <__ieee754_atan2+0x5a>
 80155b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155b6:	f000 bde7 	b.w	8016188 <atan>
 80155ba:	17bc      	asrs	r4, r7, #30
 80155bc:	f004 0402 	and.w	r4, r4, #2
 80155c0:	ea53 0909 	orrs.w	r9, r3, r9
 80155c4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80155c8:	d107      	bne.n	80155da <__ieee754_atan2+0x7a>
 80155ca:	2c02      	cmp	r4, #2
 80155cc:	d05f      	beq.n	801568e <__ieee754_atan2+0x12e>
 80155ce:	2c03      	cmp	r4, #3
 80155d0:	d1e5      	bne.n	801559e <__ieee754_atan2+0x3e>
 80155d2:	a143      	add	r1, pc, #268	@ (adr r1, 80156e0 <__ieee754_atan2+0x180>)
 80155d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155d8:	e7e1      	b.n	801559e <__ieee754_atan2+0x3e>
 80155da:	4315      	orrs	r5, r2
 80155dc:	d106      	bne.n	80155ec <__ieee754_atan2+0x8c>
 80155de:	f1be 0f00 	cmp.w	lr, #0
 80155e2:	db5f      	blt.n	80156a4 <__ieee754_atan2+0x144>
 80155e4:	a136      	add	r1, pc, #216	@ (adr r1, 80156c0 <__ieee754_atan2+0x160>)
 80155e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155ea:	e7d8      	b.n	801559e <__ieee754_atan2+0x3e>
 80155ec:	4542      	cmp	r2, r8
 80155ee:	d10f      	bne.n	8015610 <__ieee754_atan2+0xb0>
 80155f0:	4293      	cmp	r3, r2
 80155f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80155f6:	d107      	bne.n	8015608 <__ieee754_atan2+0xa8>
 80155f8:	2c02      	cmp	r4, #2
 80155fa:	d84c      	bhi.n	8015696 <__ieee754_atan2+0x136>
 80155fc:	4b36      	ldr	r3, [pc, #216]	@ (80156d8 <__ieee754_atan2+0x178>)
 80155fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015602:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015606:	e7ca      	b.n	801559e <__ieee754_atan2+0x3e>
 8015608:	2c02      	cmp	r4, #2
 801560a:	d848      	bhi.n	801569e <__ieee754_atan2+0x13e>
 801560c:	4b33      	ldr	r3, [pc, #204]	@ (80156dc <__ieee754_atan2+0x17c>)
 801560e:	e7f6      	b.n	80155fe <__ieee754_atan2+0x9e>
 8015610:	4543      	cmp	r3, r8
 8015612:	d0e4      	beq.n	80155de <__ieee754_atan2+0x7e>
 8015614:	1a9b      	subs	r3, r3, r2
 8015616:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801561a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801561e:	da1e      	bge.n	801565e <__ieee754_atan2+0xfe>
 8015620:	2f00      	cmp	r7, #0
 8015622:	da01      	bge.n	8015628 <__ieee754_atan2+0xc8>
 8015624:	323c      	adds	r2, #60	@ 0x3c
 8015626:	db1e      	blt.n	8015666 <__ieee754_atan2+0x106>
 8015628:	4632      	mov	r2, r6
 801562a:	463b      	mov	r3, r7
 801562c:	f7eb f946 	bl	80008bc <__aeabi_ddiv>
 8015630:	ec41 0b10 	vmov	d0, r0, r1
 8015634:	f000 ff40 	bl	80164b8 <fabs>
 8015638:	f000 fda6 	bl	8016188 <atan>
 801563c:	ec51 0b10 	vmov	r0, r1, d0
 8015640:	2c01      	cmp	r4, #1
 8015642:	d013      	beq.n	801566c <__ieee754_atan2+0x10c>
 8015644:	2c02      	cmp	r4, #2
 8015646:	d015      	beq.n	8015674 <__ieee754_atan2+0x114>
 8015648:	2c00      	cmp	r4, #0
 801564a:	d0a8      	beq.n	801559e <__ieee754_atan2+0x3e>
 801564c:	a318      	add	r3, pc, #96	@ (adr r3, 80156b0 <__ieee754_atan2+0x150>)
 801564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015652:	f7ea fe51 	bl	80002f8 <__aeabi_dsub>
 8015656:	a318      	add	r3, pc, #96	@ (adr r3, 80156b8 <__ieee754_atan2+0x158>)
 8015658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801565c:	e014      	b.n	8015688 <__ieee754_atan2+0x128>
 801565e:	a118      	add	r1, pc, #96	@ (adr r1, 80156c0 <__ieee754_atan2+0x160>)
 8015660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015664:	e7ec      	b.n	8015640 <__ieee754_atan2+0xe0>
 8015666:	2000      	movs	r0, #0
 8015668:	2100      	movs	r1, #0
 801566a:	e7e9      	b.n	8015640 <__ieee754_atan2+0xe0>
 801566c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015670:	4619      	mov	r1, r3
 8015672:	e794      	b.n	801559e <__ieee754_atan2+0x3e>
 8015674:	a30e      	add	r3, pc, #56	@ (adr r3, 80156b0 <__ieee754_atan2+0x150>)
 8015676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801567a:	f7ea fe3d 	bl	80002f8 <__aeabi_dsub>
 801567e:	4602      	mov	r2, r0
 8015680:	460b      	mov	r3, r1
 8015682:	a10d      	add	r1, pc, #52	@ (adr r1, 80156b8 <__ieee754_atan2+0x158>)
 8015684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015688:	f7ea fe36 	bl	80002f8 <__aeabi_dsub>
 801568c:	e787      	b.n	801559e <__ieee754_atan2+0x3e>
 801568e:	a10a      	add	r1, pc, #40	@ (adr r1, 80156b8 <__ieee754_atan2+0x158>)
 8015690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015694:	e783      	b.n	801559e <__ieee754_atan2+0x3e>
 8015696:	a10c      	add	r1, pc, #48	@ (adr r1, 80156c8 <__ieee754_atan2+0x168>)
 8015698:	e9d1 0100 	ldrd	r0, r1, [r1]
 801569c:	e77f      	b.n	801559e <__ieee754_atan2+0x3e>
 801569e:	2000      	movs	r0, #0
 80156a0:	2100      	movs	r1, #0
 80156a2:	e77c      	b.n	801559e <__ieee754_atan2+0x3e>
 80156a4:	a10a      	add	r1, pc, #40	@ (adr r1, 80156d0 <__ieee754_atan2+0x170>)
 80156a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156aa:	e778      	b.n	801559e <__ieee754_atan2+0x3e>
 80156ac:	f3af 8000 	nop.w
 80156b0:	33145c07 	.word	0x33145c07
 80156b4:	3ca1a626 	.word	0x3ca1a626
 80156b8:	54442d18 	.word	0x54442d18
 80156bc:	400921fb 	.word	0x400921fb
 80156c0:	54442d18 	.word	0x54442d18
 80156c4:	3ff921fb 	.word	0x3ff921fb
 80156c8:	54442d18 	.word	0x54442d18
 80156cc:	3fe921fb 	.word	0x3fe921fb
 80156d0:	54442d18 	.word	0x54442d18
 80156d4:	bff921fb 	.word	0xbff921fb
 80156d8:	08017a20 	.word	0x08017a20
 80156dc:	08017a08 	.word	0x08017a08
 80156e0:	54442d18 	.word	0x54442d18
 80156e4:	c00921fb 	.word	0xc00921fb
 80156e8:	7ff00000 	.word	0x7ff00000
 80156ec:	00000000 	.word	0x00000000

080156f0 <__ieee754_pow>:
 80156f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156f4:	b091      	sub	sp, #68	@ 0x44
 80156f6:	ed8d 1b00 	vstr	d1, [sp]
 80156fa:	e9dd 1900 	ldrd	r1, r9, [sp]
 80156fe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015702:	ea5a 0001 	orrs.w	r0, sl, r1
 8015706:	ec57 6b10 	vmov	r6, r7, d0
 801570a:	d113      	bne.n	8015734 <__ieee754_pow+0x44>
 801570c:	19b3      	adds	r3, r6, r6
 801570e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015712:	4152      	adcs	r2, r2
 8015714:	4298      	cmp	r0, r3
 8015716:	4b9a      	ldr	r3, [pc, #616]	@ (8015980 <__ieee754_pow+0x290>)
 8015718:	4193      	sbcs	r3, r2
 801571a:	f080 84ee 	bcs.w	80160fa <__ieee754_pow+0xa0a>
 801571e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015722:	4630      	mov	r0, r6
 8015724:	4639      	mov	r1, r7
 8015726:	f7ea fde9 	bl	80002fc <__adddf3>
 801572a:	ec41 0b10 	vmov	d0, r0, r1
 801572e:	b011      	add	sp, #68	@ 0x44
 8015730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015734:	4a93      	ldr	r2, [pc, #588]	@ (8015984 <__ieee754_pow+0x294>)
 8015736:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 801573a:	4295      	cmp	r5, r2
 801573c:	46b8      	mov	r8, r7
 801573e:	4633      	mov	r3, r6
 8015740:	d80a      	bhi.n	8015758 <__ieee754_pow+0x68>
 8015742:	d104      	bne.n	801574e <__ieee754_pow+0x5e>
 8015744:	2e00      	cmp	r6, #0
 8015746:	d1ea      	bne.n	801571e <__ieee754_pow+0x2e>
 8015748:	45aa      	cmp	sl, r5
 801574a:	d8e8      	bhi.n	801571e <__ieee754_pow+0x2e>
 801574c:	e001      	b.n	8015752 <__ieee754_pow+0x62>
 801574e:	4592      	cmp	sl, r2
 8015750:	d802      	bhi.n	8015758 <__ieee754_pow+0x68>
 8015752:	4592      	cmp	sl, r2
 8015754:	d10f      	bne.n	8015776 <__ieee754_pow+0x86>
 8015756:	b171      	cbz	r1, 8015776 <__ieee754_pow+0x86>
 8015758:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801575c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8015760:	ea58 0803 	orrs.w	r8, r8, r3
 8015764:	d1db      	bne.n	801571e <__ieee754_pow+0x2e>
 8015766:	e9dd 3200 	ldrd	r3, r2, [sp]
 801576a:	18db      	adds	r3, r3, r3
 801576c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015770:	4152      	adcs	r2, r2
 8015772:	4598      	cmp	r8, r3
 8015774:	e7cf      	b.n	8015716 <__ieee754_pow+0x26>
 8015776:	f1b8 0f00 	cmp.w	r8, #0
 801577a:	46ab      	mov	fp, r5
 801577c:	da43      	bge.n	8015806 <__ieee754_pow+0x116>
 801577e:	4a82      	ldr	r2, [pc, #520]	@ (8015988 <__ieee754_pow+0x298>)
 8015780:	4592      	cmp	sl, r2
 8015782:	d856      	bhi.n	8015832 <__ieee754_pow+0x142>
 8015784:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015788:	4592      	cmp	sl, r2
 801578a:	f240 84c5 	bls.w	8016118 <__ieee754_pow+0xa28>
 801578e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015792:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015796:	2a14      	cmp	r2, #20
 8015798:	dd18      	ble.n	80157cc <__ieee754_pow+0xdc>
 801579a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801579e:	fa21 f402 	lsr.w	r4, r1, r2
 80157a2:	fa04 f202 	lsl.w	r2, r4, r2
 80157a6:	428a      	cmp	r2, r1
 80157a8:	f040 84b6 	bne.w	8016118 <__ieee754_pow+0xa28>
 80157ac:	f004 0401 	and.w	r4, r4, #1
 80157b0:	f1c4 0402 	rsb	r4, r4, #2
 80157b4:	2900      	cmp	r1, #0
 80157b6:	d159      	bne.n	801586c <__ieee754_pow+0x17c>
 80157b8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80157bc:	d148      	bne.n	8015850 <__ieee754_pow+0x160>
 80157be:	4632      	mov	r2, r6
 80157c0:	463b      	mov	r3, r7
 80157c2:	4630      	mov	r0, r6
 80157c4:	4639      	mov	r1, r7
 80157c6:	f7ea ff4f 	bl	8000668 <__aeabi_dmul>
 80157ca:	e7ae      	b.n	801572a <__ieee754_pow+0x3a>
 80157cc:	2900      	cmp	r1, #0
 80157ce:	d14c      	bne.n	801586a <__ieee754_pow+0x17a>
 80157d0:	f1c2 0214 	rsb	r2, r2, #20
 80157d4:	fa4a f402 	asr.w	r4, sl, r2
 80157d8:	fa04 f202 	lsl.w	r2, r4, r2
 80157dc:	4552      	cmp	r2, sl
 80157de:	f040 8498 	bne.w	8016112 <__ieee754_pow+0xa22>
 80157e2:	f004 0401 	and.w	r4, r4, #1
 80157e6:	f1c4 0402 	rsb	r4, r4, #2
 80157ea:	4a68      	ldr	r2, [pc, #416]	@ (801598c <__ieee754_pow+0x29c>)
 80157ec:	4592      	cmp	sl, r2
 80157ee:	d1e3      	bne.n	80157b8 <__ieee754_pow+0xc8>
 80157f0:	f1b9 0f00 	cmp.w	r9, #0
 80157f4:	f280 8489 	bge.w	801610a <__ieee754_pow+0xa1a>
 80157f8:	4964      	ldr	r1, [pc, #400]	@ (801598c <__ieee754_pow+0x29c>)
 80157fa:	4632      	mov	r2, r6
 80157fc:	463b      	mov	r3, r7
 80157fe:	2000      	movs	r0, #0
 8015800:	f7eb f85c 	bl	80008bc <__aeabi_ddiv>
 8015804:	e791      	b.n	801572a <__ieee754_pow+0x3a>
 8015806:	2400      	movs	r4, #0
 8015808:	bb81      	cbnz	r1, 801586c <__ieee754_pow+0x17c>
 801580a:	4a5e      	ldr	r2, [pc, #376]	@ (8015984 <__ieee754_pow+0x294>)
 801580c:	4592      	cmp	sl, r2
 801580e:	d1ec      	bne.n	80157ea <__ieee754_pow+0xfa>
 8015810:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8015814:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015818:	431a      	orrs	r2, r3
 801581a:	f000 846e 	beq.w	80160fa <__ieee754_pow+0xa0a>
 801581e:	4b5c      	ldr	r3, [pc, #368]	@ (8015990 <__ieee754_pow+0x2a0>)
 8015820:	429d      	cmp	r5, r3
 8015822:	d908      	bls.n	8015836 <__ieee754_pow+0x146>
 8015824:	f1b9 0f00 	cmp.w	r9, #0
 8015828:	f280 846b 	bge.w	8016102 <__ieee754_pow+0xa12>
 801582c:	2000      	movs	r0, #0
 801582e:	2100      	movs	r1, #0
 8015830:	e77b      	b.n	801572a <__ieee754_pow+0x3a>
 8015832:	2402      	movs	r4, #2
 8015834:	e7e8      	b.n	8015808 <__ieee754_pow+0x118>
 8015836:	f1b9 0f00 	cmp.w	r9, #0
 801583a:	f04f 0000 	mov.w	r0, #0
 801583e:	f04f 0100 	mov.w	r1, #0
 8015842:	f6bf af72 	bge.w	801572a <__ieee754_pow+0x3a>
 8015846:	e9dd 0300 	ldrd	r0, r3, [sp]
 801584a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801584e:	e76c      	b.n	801572a <__ieee754_pow+0x3a>
 8015850:	4a50      	ldr	r2, [pc, #320]	@ (8015994 <__ieee754_pow+0x2a4>)
 8015852:	4591      	cmp	r9, r2
 8015854:	d10a      	bne.n	801586c <__ieee754_pow+0x17c>
 8015856:	f1b8 0f00 	cmp.w	r8, #0
 801585a:	db07      	blt.n	801586c <__ieee754_pow+0x17c>
 801585c:	ec47 6b10 	vmov	d0, r6, r7
 8015860:	b011      	add	sp, #68	@ 0x44
 8015862:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015866:	f7ff bd9f 	b.w	80153a8 <__ieee754_sqrt>
 801586a:	2400      	movs	r4, #0
 801586c:	ec47 6b10 	vmov	d0, r6, r7
 8015870:	9302      	str	r3, [sp, #8]
 8015872:	f000 fe21 	bl	80164b8 <fabs>
 8015876:	9b02      	ldr	r3, [sp, #8]
 8015878:	ec51 0b10 	vmov	r0, r1, d0
 801587c:	bb43      	cbnz	r3, 80158d0 <__ieee754_pow+0x1e0>
 801587e:	4b43      	ldr	r3, [pc, #268]	@ (801598c <__ieee754_pow+0x29c>)
 8015880:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8015884:	429a      	cmp	r2, r3
 8015886:	d000      	beq.n	801588a <__ieee754_pow+0x19a>
 8015888:	bb15      	cbnz	r5, 80158d0 <__ieee754_pow+0x1e0>
 801588a:	f1b9 0f00 	cmp.w	r9, #0
 801588e:	da05      	bge.n	801589c <__ieee754_pow+0x1ac>
 8015890:	4602      	mov	r2, r0
 8015892:	460b      	mov	r3, r1
 8015894:	2000      	movs	r0, #0
 8015896:	493d      	ldr	r1, [pc, #244]	@ (801598c <__ieee754_pow+0x29c>)
 8015898:	f7eb f810 	bl	80008bc <__aeabi_ddiv>
 801589c:	f1b8 0f00 	cmp.w	r8, #0
 80158a0:	f6bf af43 	bge.w	801572a <__ieee754_pow+0x3a>
 80158a4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80158a8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80158ac:	4325      	orrs	r5, r4
 80158ae:	d108      	bne.n	80158c2 <__ieee754_pow+0x1d2>
 80158b0:	4602      	mov	r2, r0
 80158b2:	460b      	mov	r3, r1
 80158b4:	4610      	mov	r0, r2
 80158b6:	4619      	mov	r1, r3
 80158b8:	f7ea fd1e 	bl	80002f8 <__aeabi_dsub>
 80158bc:	4602      	mov	r2, r0
 80158be:	460b      	mov	r3, r1
 80158c0:	e79e      	b.n	8015800 <__ieee754_pow+0x110>
 80158c2:	2c01      	cmp	r4, #1
 80158c4:	f47f af31 	bne.w	801572a <__ieee754_pow+0x3a>
 80158c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80158cc:	4619      	mov	r1, r3
 80158ce:	e72c      	b.n	801572a <__ieee754_pow+0x3a>
 80158d0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80158d4:	3b01      	subs	r3, #1
 80158d6:	ea53 0204 	orrs.w	r2, r3, r4
 80158da:	d102      	bne.n	80158e2 <__ieee754_pow+0x1f2>
 80158dc:	4632      	mov	r2, r6
 80158de:	463b      	mov	r3, r7
 80158e0:	e7e8      	b.n	80158b4 <__ieee754_pow+0x1c4>
 80158e2:	3c01      	subs	r4, #1
 80158e4:	431c      	orrs	r4, r3
 80158e6:	d016      	beq.n	8015916 <__ieee754_pow+0x226>
 80158e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015970 <__ieee754_pow+0x280>
 80158ec:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80158f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80158f4:	f240 8110 	bls.w	8015b18 <__ieee754_pow+0x428>
 80158f8:	4b27      	ldr	r3, [pc, #156]	@ (8015998 <__ieee754_pow+0x2a8>)
 80158fa:	459a      	cmp	sl, r3
 80158fc:	4b24      	ldr	r3, [pc, #144]	@ (8015990 <__ieee754_pow+0x2a0>)
 80158fe:	d916      	bls.n	801592e <__ieee754_pow+0x23e>
 8015900:	429d      	cmp	r5, r3
 8015902:	d80b      	bhi.n	801591c <__ieee754_pow+0x22c>
 8015904:	f1b9 0f00 	cmp.w	r9, #0
 8015908:	da0b      	bge.n	8015922 <__ieee754_pow+0x232>
 801590a:	2000      	movs	r0, #0
 801590c:	b011      	add	sp, #68	@ 0x44
 801590e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015912:	f001 b9d5 	b.w	8016cc0 <__math_oflow>
 8015916:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8015978 <__ieee754_pow+0x288>
 801591a:	e7e7      	b.n	80158ec <__ieee754_pow+0x1fc>
 801591c:	f1b9 0f00 	cmp.w	r9, #0
 8015920:	dcf3      	bgt.n	801590a <__ieee754_pow+0x21a>
 8015922:	2000      	movs	r0, #0
 8015924:	b011      	add	sp, #68	@ 0x44
 8015926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801592a:	f001 b9c1 	b.w	8016cb0 <__math_uflow>
 801592e:	429d      	cmp	r5, r3
 8015930:	d20c      	bcs.n	801594c <__ieee754_pow+0x25c>
 8015932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015936:	2200      	movs	r2, #0
 8015938:	2300      	movs	r3, #0
 801593a:	f7eb f907 	bl	8000b4c <__aeabi_dcmplt>
 801593e:	3800      	subs	r0, #0
 8015940:	bf18      	it	ne
 8015942:	2001      	movne	r0, #1
 8015944:	f1b9 0f00 	cmp.w	r9, #0
 8015948:	daec      	bge.n	8015924 <__ieee754_pow+0x234>
 801594a:	e7df      	b.n	801590c <__ieee754_pow+0x21c>
 801594c:	4b0f      	ldr	r3, [pc, #60]	@ (801598c <__ieee754_pow+0x29c>)
 801594e:	429d      	cmp	r5, r3
 8015950:	f04f 0200 	mov.w	r2, #0
 8015954:	d922      	bls.n	801599c <__ieee754_pow+0x2ac>
 8015956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801595a:	2300      	movs	r3, #0
 801595c:	f7eb f8f6 	bl	8000b4c <__aeabi_dcmplt>
 8015960:	3800      	subs	r0, #0
 8015962:	bf18      	it	ne
 8015964:	2001      	movne	r0, #1
 8015966:	f1b9 0f00 	cmp.w	r9, #0
 801596a:	dccf      	bgt.n	801590c <__ieee754_pow+0x21c>
 801596c:	e7da      	b.n	8015924 <__ieee754_pow+0x234>
 801596e:	bf00      	nop
 8015970:	00000000 	.word	0x00000000
 8015974:	3ff00000 	.word	0x3ff00000
 8015978:	00000000 	.word	0x00000000
 801597c:	bff00000 	.word	0xbff00000
 8015980:	fff00000 	.word	0xfff00000
 8015984:	7ff00000 	.word	0x7ff00000
 8015988:	433fffff 	.word	0x433fffff
 801598c:	3ff00000 	.word	0x3ff00000
 8015990:	3fefffff 	.word	0x3fefffff
 8015994:	3fe00000 	.word	0x3fe00000
 8015998:	43f00000 	.word	0x43f00000
 801599c:	4b5a      	ldr	r3, [pc, #360]	@ (8015b08 <__ieee754_pow+0x418>)
 801599e:	f7ea fcab 	bl	80002f8 <__aeabi_dsub>
 80159a2:	a351      	add	r3, pc, #324	@ (adr r3, 8015ae8 <__ieee754_pow+0x3f8>)
 80159a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a8:	4604      	mov	r4, r0
 80159aa:	460d      	mov	r5, r1
 80159ac:	f7ea fe5c 	bl	8000668 <__aeabi_dmul>
 80159b0:	a34f      	add	r3, pc, #316	@ (adr r3, 8015af0 <__ieee754_pow+0x400>)
 80159b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159b6:	4606      	mov	r6, r0
 80159b8:	460f      	mov	r7, r1
 80159ba:	4620      	mov	r0, r4
 80159bc:	4629      	mov	r1, r5
 80159be:	f7ea fe53 	bl	8000668 <__aeabi_dmul>
 80159c2:	4b52      	ldr	r3, [pc, #328]	@ (8015b0c <__ieee754_pow+0x41c>)
 80159c4:	4682      	mov	sl, r0
 80159c6:	468b      	mov	fp, r1
 80159c8:	2200      	movs	r2, #0
 80159ca:	4620      	mov	r0, r4
 80159cc:	4629      	mov	r1, r5
 80159ce:	f7ea fe4b 	bl	8000668 <__aeabi_dmul>
 80159d2:	4602      	mov	r2, r0
 80159d4:	460b      	mov	r3, r1
 80159d6:	a148      	add	r1, pc, #288	@ (adr r1, 8015af8 <__ieee754_pow+0x408>)
 80159d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159dc:	f7ea fc8c 	bl	80002f8 <__aeabi_dsub>
 80159e0:	4622      	mov	r2, r4
 80159e2:	462b      	mov	r3, r5
 80159e4:	f7ea fe40 	bl	8000668 <__aeabi_dmul>
 80159e8:	4602      	mov	r2, r0
 80159ea:	460b      	mov	r3, r1
 80159ec:	2000      	movs	r0, #0
 80159ee:	4948      	ldr	r1, [pc, #288]	@ (8015b10 <__ieee754_pow+0x420>)
 80159f0:	f7ea fc82 	bl	80002f8 <__aeabi_dsub>
 80159f4:	4622      	mov	r2, r4
 80159f6:	4680      	mov	r8, r0
 80159f8:	4689      	mov	r9, r1
 80159fa:	462b      	mov	r3, r5
 80159fc:	4620      	mov	r0, r4
 80159fe:	4629      	mov	r1, r5
 8015a00:	f7ea fe32 	bl	8000668 <__aeabi_dmul>
 8015a04:	4602      	mov	r2, r0
 8015a06:	460b      	mov	r3, r1
 8015a08:	4640      	mov	r0, r8
 8015a0a:	4649      	mov	r1, r9
 8015a0c:	f7ea fe2c 	bl	8000668 <__aeabi_dmul>
 8015a10:	a33b      	add	r3, pc, #236	@ (adr r3, 8015b00 <__ieee754_pow+0x410>)
 8015a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a16:	f7ea fe27 	bl	8000668 <__aeabi_dmul>
 8015a1a:	4602      	mov	r2, r0
 8015a1c:	460b      	mov	r3, r1
 8015a1e:	4650      	mov	r0, sl
 8015a20:	4659      	mov	r1, fp
 8015a22:	f7ea fc69 	bl	80002f8 <__aeabi_dsub>
 8015a26:	4602      	mov	r2, r0
 8015a28:	460b      	mov	r3, r1
 8015a2a:	4680      	mov	r8, r0
 8015a2c:	4689      	mov	r9, r1
 8015a2e:	4630      	mov	r0, r6
 8015a30:	4639      	mov	r1, r7
 8015a32:	f7ea fc63 	bl	80002fc <__adddf3>
 8015a36:	2400      	movs	r4, #0
 8015a38:	4632      	mov	r2, r6
 8015a3a:	463b      	mov	r3, r7
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	460d      	mov	r5, r1
 8015a40:	f7ea fc5a 	bl	80002f8 <__aeabi_dsub>
 8015a44:	4602      	mov	r2, r0
 8015a46:	460b      	mov	r3, r1
 8015a48:	4640      	mov	r0, r8
 8015a4a:	4649      	mov	r1, r9
 8015a4c:	f7ea fc54 	bl	80002f8 <__aeabi_dsub>
 8015a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015a58:	2300      	movs	r3, #0
 8015a5a:	9304      	str	r3, [sp, #16]
 8015a5c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015a60:	4606      	mov	r6, r0
 8015a62:	460f      	mov	r7, r1
 8015a64:	465b      	mov	r3, fp
 8015a66:	4652      	mov	r2, sl
 8015a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a6c:	f7ea fc44 	bl	80002f8 <__aeabi_dsub>
 8015a70:	4622      	mov	r2, r4
 8015a72:	462b      	mov	r3, r5
 8015a74:	f7ea fdf8 	bl	8000668 <__aeabi_dmul>
 8015a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a7c:	4680      	mov	r8, r0
 8015a7e:	4689      	mov	r9, r1
 8015a80:	4630      	mov	r0, r6
 8015a82:	4639      	mov	r1, r7
 8015a84:	f7ea fdf0 	bl	8000668 <__aeabi_dmul>
 8015a88:	4602      	mov	r2, r0
 8015a8a:	460b      	mov	r3, r1
 8015a8c:	4640      	mov	r0, r8
 8015a8e:	4649      	mov	r1, r9
 8015a90:	f7ea fc34 	bl	80002fc <__adddf3>
 8015a94:	465b      	mov	r3, fp
 8015a96:	4606      	mov	r6, r0
 8015a98:	460f      	mov	r7, r1
 8015a9a:	4652      	mov	r2, sl
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	4629      	mov	r1, r5
 8015aa0:	f7ea fde2 	bl	8000668 <__aeabi_dmul>
 8015aa4:	460b      	mov	r3, r1
 8015aa6:	4602      	mov	r2, r0
 8015aa8:	4680      	mov	r8, r0
 8015aaa:	4689      	mov	r9, r1
 8015aac:	4630      	mov	r0, r6
 8015aae:	4639      	mov	r1, r7
 8015ab0:	f7ea fc24 	bl	80002fc <__adddf3>
 8015ab4:	4b17      	ldr	r3, [pc, #92]	@ (8015b14 <__ieee754_pow+0x424>)
 8015ab6:	4299      	cmp	r1, r3
 8015ab8:	4604      	mov	r4, r0
 8015aba:	460d      	mov	r5, r1
 8015abc:	468b      	mov	fp, r1
 8015abe:	f340 820b 	ble.w	8015ed8 <__ieee754_pow+0x7e8>
 8015ac2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8015ac6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8015aca:	4303      	orrs	r3, r0
 8015acc:	f000 81ea 	beq.w	8015ea4 <__ieee754_pow+0x7b4>
 8015ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	f7eb f838 	bl	8000b4c <__aeabi_dcmplt>
 8015adc:	3800      	subs	r0, #0
 8015ade:	bf18      	it	ne
 8015ae0:	2001      	movne	r0, #1
 8015ae2:	e713      	b.n	801590c <__ieee754_pow+0x21c>
 8015ae4:	f3af 8000 	nop.w
 8015ae8:	60000000 	.word	0x60000000
 8015aec:	3ff71547 	.word	0x3ff71547
 8015af0:	f85ddf44 	.word	0xf85ddf44
 8015af4:	3e54ae0b 	.word	0x3e54ae0b
 8015af8:	55555555 	.word	0x55555555
 8015afc:	3fd55555 	.word	0x3fd55555
 8015b00:	652b82fe 	.word	0x652b82fe
 8015b04:	3ff71547 	.word	0x3ff71547
 8015b08:	3ff00000 	.word	0x3ff00000
 8015b0c:	3fd00000 	.word	0x3fd00000
 8015b10:	3fe00000 	.word	0x3fe00000
 8015b14:	408fffff 	.word	0x408fffff
 8015b18:	4bd5      	ldr	r3, [pc, #852]	@ (8015e70 <__ieee754_pow+0x780>)
 8015b1a:	ea08 0303 	and.w	r3, r8, r3
 8015b1e:	2200      	movs	r2, #0
 8015b20:	b92b      	cbnz	r3, 8015b2e <__ieee754_pow+0x43e>
 8015b22:	4bd4      	ldr	r3, [pc, #848]	@ (8015e74 <__ieee754_pow+0x784>)
 8015b24:	f7ea fda0 	bl	8000668 <__aeabi_dmul>
 8015b28:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8015b2c:	468b      	mov	fp, r1
 8015b2e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8015b32:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8015b36:	4413      	add	r3, r2
 8015b38:	930a      	str	r3, [sp, #40]	@ 0x28
 8015b3a:	4bcf      	ldr	r3, [pc, #828]	@ (8015e78 <__ieee754_pow+0x788>)
 8015b3c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8015b40:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8015b44:	459b      	cmp	fp, r3
 8015b46:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015b4a:	dd08      	ble.n	8015b5e <__ieee754_pow+0x46e>
 8015b4c:	4bcb      	ldr	r3, [pc, #812]	@ (8015e7c <__ieee754_pow+0x78c>)
 8015b4e:	459b      	cmp	fp, r3
 8015b50:	f340 81a5 	ble.w	8015e9e <__ieee754_pow+0x7ae>
 8015b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b56:	3301      	adds	r3, #1
 8015b58:	930a      	str	r3, [sp, #40]	@ 0x28
 8015b5a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8015b5e:	f04f 0a00 	mov.w	sl, #0
 8015b62:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015b66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015b68:	4bc5      	ldr	r3, [pc, #788]	@ (8015e80 <__ieee754_pow+0x790>)
 8015b6a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015b6e:	ed93 7b00 	vldr	d7, [r3]
 8015b72:	4629      	mov	r1, r5
 8015b74:	ec53 2b17 	vmov	r2, r3, d7
 8015b78:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015b7c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015b80:	f7ea fbba 	bl	80002f8 <__aeabi_dsub>
 8015b84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015b88:	4606      	mov	r6, r0
 8015b8a:	460f      	mov	r7, r1
 8015b8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b90:	f7ea fbb4 	bl	80002fc <__adddf3>
 8015b94:	4602      	mov	r2, r0
 8015b96:	460b      	mov	r3, r1
 8015b98:	2000      	movs	r0, #0
 8015b9a:	49ba      	ldr	r1, [pc, #744]	@ (8015e84 <__ieee754_pow+0x794>)
 8015b9c:	f7ea fe8e 	bl	80008bc <__aeabi_ddiv>
 8015ba0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8015ba4:	4602      	mov	r2, r0
 8015ba6:	460b      	mov	r3, r1
 8015ba8:	4630      	mov	r0, r6
 8015baa:	4639      	mov	r1, r7
 8015bac:	f7ea fd5c 	bl	8000668 <__aeabi_dmul>
 8015bb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015bb4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8015bb8:	106d      	asrs	r5, r5, #1
 8015bba:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8015bbe:	f04f 0b00 	mov.w	fp, #0
 8015bc2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8015bc6:	4661      	mov	r1, ip
 8015bc8:	2200      	movs	r2, #0
 8015bca:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8015bce:	4658      	mov	r0, fp
 8015bd0:	46e1      	mov	r9, ip
 8015bd2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8015bd6:	4614      	mov	r4, r2
 8015bd8:	461d      	mov	r5, r3
 8015bda:	f7ea fd45 	bl	8000668 <__aeabi_dmul>
 8015bde:	4602      	mov	r2, r0
 8015be0:	460b      	mov	r3, r1
 8015be2:	4630      	mov	r0, r6
 8015be4:	4639      	mov	r1, r7
 8015be6:	f7ea fb87 	bl	80002f8 <__aeabi_dsub>
 8015bea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015bee:	4606      	mov	r6, r0
 8015bf0:	460f      	mov	r7, r1
 8015bf2:	4620      	mov	r0, r4
 8015bf4:	4629      	mov	r1, r5
 8015bf6:	f7ea fb7f 	bl	80002f8 <__aeabi_dsub>
 8015bfa:	4602      	mov	r2, r0
 8015bfc:	460b      	mov	r3, r1
 8015bfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015c02:	f7ea fb79 	bl	80002f8 <__aeabi_dsub>
 8015c06:	465a      	mov	r2, fp
 8015c08:	464b      	mov	r3, r9
 8015c0a:	f7ea fd2d 	bl	8000668 <__aeabi_dmul>
 8015c0e:	4602      	mov	r2, r0
 8015c10:	460b      	mov	r3, r1
 8015c12:	4630      	mov	r0, r6
 8015c14:	4639      	mov	r1, r7
 8015c16:	f7ea fb6f 	bl	80002f8 <__aeabi_dsub>
 8015c1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015c1e:	f7ea fd23 	bl	8000668 <__aeabi_dmul>
 8015c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015c2a:	4610      	mov	r0, r2
 8015c2c:	4619      	mov	r1, r3
 8015c2e:	f7ea fd1b 	bl	8000668 <__aeabi_dmul>
 8015c32:	a37d      	add	r3, pc, #500	@ (adr r3, 8015e28 <__ieee754_pow+0x738>)
 8015c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c38:	4604      	mov	r4, r0
 8015c3a:	460d      	mov	r5, r1
 8015c3c:	f7ea fd14 	bl	8000668 <__aeabi_dmul>
 8015c40:	a37b      	add	r3, pc, #492	@ (adr r3, 8015e30 <__ieee754_pow+0x740>)
 8015c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c46:	f7ea fb59 	bl	80002fc <__adddf3>
 8015c4a:	4622      	mov	r2, r4
 8015c4c:	462b      	mov	r3, r5
 8015c4e:	f7ea fd0b 	bl	8000668 <__aeabi_dmul>
 8015c52:	a379      	add	r3, pc, #484	@ (adr r3, 8015e38 <__ieee754_pow+0x748>)
 8015c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c58:	f7ea fb50 	bl	80002fc <__adddf3>
 8015c5c:	4622      	mov	r2, r4
 8015c5e:	462b      	mov	r3, r5
 8015c60:	f7ea fd02 	bl	8000668 <__aeabi_dmul>
 8015c64:	a376      	add	r3, pc, #472	@ (adr r3, 8015e40 <__ieee754_pow+0x750>)
 8015c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c6a:	f7ea fb47 	bl	80002fc <__adddf3>
 8015c6e:	4622      	mov	r2, r4
 8015c70:	462b      	mov	r3, r5
 8015c72:	f7ea fcf9 	bl	8000668 <__aeabi_dmul>
 8015c76:	a374      	add	r3, pc, #464	@ (adr r3, 8015e48 <__ieee754_pow+0x758>)
 8015c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c7c:	f7ea fb3e 	bl	80002fc <__adddf3>
 8015c80:	4622      	mov	r2, r4
 8015c82:	462b      	mov	r3, r5
 8015c84:	f7ea fcf0 	bl	8000668 <__aeabi_dmul>
 8015c88:	a371      	add	r3, pc, #452	@ (adr r3, 8015e50 <__ieee754_pow+0x760>)
 8015c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8e:	f7ea fb35 	bl	80002fc <__adddf3>
 8015c92:	4622      	mov	r2, r4
 8015c94:	4606      	mov	r6, r0
 8015c96:	460f      	mov	r7, r1
 8015c98:	462b      	mov	r3, r5
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	4629      	mov	r1, r5
 8015c9e:	f7ea fce3 	bl	8000668 <__aeabi_dmul>
 8015ca2:	4602      	mov	r2, r0
 8015ca4:	460b      	mov	r3, r1
 8015ca6:	4630      	mov	r0, r6
 8015ca8:	4639      	mov	r1, r7
 8015caa:	f7ea fcdd 	bl	8000668 <__aeabi_dmul>
 8015cae:	465a      	mov	r2, fp
 8015cb0:	4604      	mov	r4, r0
 8015cb2:	460d      	mov	r5, r1
 8015cb4:	464b      	mov	r3, r9
 8015cb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015cba:	f7ea fb1f 	bl	80002fc <__adddf3>
 8015cbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015cc2:	f7ea fcd1 	bl	8000668 <__aeabi_dmul>
 8015cc6:	4622      	mov	r2, r4
 8015cc8:	462b      	mov	r3, r5
 8015cca:	f7ea fb17 	bl	80002fc <__adddf3>
 8015cce:	465a      	mov	r2, fp
 8015cd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015cd4:	464b      	mov	r3, r9
 8015cd6:	4658      	mov	r0, fp
 8015cd8:	4649      	mov	r1, r9
 8015cda:	f7ea fcc5 	bl	8000668 <__aeabi_dmul>
 8015cde:	4b6a      	ldr	r3, [pc, #424]	@ (8015e88 <__ieee754_pow+0x798>)
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	4606      	mov	r6, r0
 8015ce4:	460f      	mov	r7, r1
 8015ce6:	f7ea fb09 	bl	80002fc <__adddf3>
 8015cea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015cee:	f7ea fb05 	bl	80002fc <__adddf3>
 8015cf2:	46d8      	mov	r8, fp
 8015cf4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8015cf8:	460d      	mov	r5, r1
 8015cfa:	465a      	mov	r2, fp
 8015cfc:	460b      	mov	r3, r1
 8015cfe:	4640      	mov	r0, r8
 8015d00:	4649      	mov	r1, r9
 8015d02:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8015d06:	f7ea fcaf 	bl	8000668 <__aeabi_dmul>
 8015d0a:	465c      	mov	r4, fp
 8015d0c:	4680      	mov	r8, r0
 8015d0e:	4689      	mov	r9, r1
 8015d10:	4b5d      	ldr	r3, [pc, #372]	@ (8015e88 <__ieee754_pow+0x798>)
 8015d12:	2200      	movs	r2, #0
 8015d14:	4620      	mov	r0, r4
 8015d16:	4629      	mov	r1, r5
 8015d18:	f7ea faee 	bl	80002f8 <__aeabi_dsub>
 8015d1c:	4632      	mov	r2, r6
 8015d1e:	463b      	mov	r3, r7
 8015d20:	f7ea faea 	bl	80002f8 <__aeabi_dsub>
 8015d24:	4602      	mov	r2, r0
 8015d26:	460b      	mov	r3, r1
 8015d28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015d2c:	f7ea fae4 	bl	80002f8 <__aeabi_dsub>
 8015d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d34:	f7ea fc98 	bl	8000668 <__aeabi_dmul>
 8015d38:	4622      	mov	r2, r4
 8015d3a:	4606      	mov	r6, r0
 8015d3c:	460f      	mov	r7, r1
 8015d3e:	462b      	mov	r3, r5
 8015d40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015d44:	f7ea fc90 	bl	8000668 <__aeabi_dmul>
 8015d48:	4602      	mov	r2, r0
 8015d4a:	460b      	mov	r3, r1
 8015d4c:	4630      	mov	r0, r6
 8015d4e:	4639      	mov	r1, r7
 8015d50:	f7ea fad4 	bl	80002fc <__adddf3>
 8015d54:	4606      	mov	r6, r0
 8015d56:	460f      	mov	r7, r1
 8015d58:	4602      	mov	r2, r0
 8015d5a:	460b      	mov	r3, r1
 8015d5c:	4640      	mov	r0, r8
 8015d5e:	4649      	mov	r1, r9
 8015d60:	f7ea facc 	bl	80002fc <__adddf3>
 8015d64:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8015d68:	a33b      	add	r3, pc, #236	@ (adr r3, 8015e58 <__ieee754_pow+0x768>)
 8015d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d6e:	4658      	mov	r0, fp
 8015d70:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8015d74:	460d      	mov	r5, r1
 8015d76:	f7ea fc77 	bl	8000668 <__aeabi_dmul>
 8015d7a:	465c      	mov	r4, fp
 8015d7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d80:	4642      	mov	r2, r8
 8015d82:	464b      	mov	r3, r9
 8015d84:	4620      	mov	r0, r4
 8015d86:	4629      	mov	r1, r5
 8015d88:	f7ea fab6 	bl	80002f8 <__aeabi_dsub>
 8015d8c:	4602      	mov	r2, r0
 8015d8e:	460b      	mov	r3, r1
 8015d90:	4630      	mov	r0, r6
 8015d92:	4639      	mov	r1, r7
 8015d94:	f7ea fab0 	bl	80002f8 <__aeabi_dsub>
 8015d98:	a331      	add	r3, pc, #196	@ (adr r3, 8015e60 <__ieee754_pow+0x770>)
 8015d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d9e:	f7ea fc63 	bl	8000668 <__aeabi_dmul>
 8015da2:	a331      	add	r3, pc, #196	@ (adr r3, 8015e68 <__ieee754_pow+0x778>)
 8015da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015da8:	4606      	mov	r6, r0
 8015daa:	460f      	mov	r7, r1
 8015dac:	4620      	mov	r0, r4
 8015dae:	4629      	mov	r1, r5
 8015db0:	f7ea fc5a 	bl	8000668 <__aeabi_dmul>
 8015db4:	4602      	mov	r2, r0
 8015db6:	460b      	mov	r3, r1
 8015db8:	4630      	mov	r0, r6
 8015dba:	4639      	mov	r1, r7
 8015dbc:	f7ea fa9e 	bl	80002fc <__adddf3>
 8015dc0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015dc2:	4b32      	ldr	r3, [pc, #200]	@ (8015e8c <__ieee754_pow+0x79c>)
 8015dc4:	4413      	add	r3, r2
 8015dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dca:	f7ea fa97 	bl	80002fc <__adddf3>
 8015dce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015dd2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015dd4:	f7ea fbde 	bl	8000594 <__aeabi_i2d>
 8015dd8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015dda:	4b2d      	ldr	r3, [pc, #180]	@ (8015e90 <__ieee754_pow+0x7a0>)
 8015ddc:	4413      	add	r3, r2
 8015dde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015de2:	4606      	mov	r6, r0
 8015de4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015de8:	460f      	mov	r7, r1
 8015dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015dee:	f7ea fa85 	bl	80002fc <__adddf3>
 8015df2:	4642      	mov	r2, r8
 8015df4:	464b      	mov	r3, r9
 8015df6:	f7ea fa81 	bl	80002fc <__adddf3>
 8015dfa:	4632      	mov	r2, r6
 8015dfc:	463b      	mov	r3, r7
 8015dfe:	f7ea fa7d 	bl	80002fc <__adddf3>
 8015e02:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8015e06:	4632      	mov	r2, r6
 8015e08:	463b      	mov	r3, r7
 8015e0a:	4658      	mov	r0, fp
 8015e0c:	460d      	mov	r5, r1
 8015e0e:	f7ea fa73 	bl	80002f8 <__aeabi_dsub>
 8015e12:	4642      	mov	r2, r8
 8015e14:	464b      	mov	r3, r9
 8015e16:	f7ea fa6f 	bl	80002f8 <__aeabi_dsub>
 8015e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e1e:	f7ea fa6b 	bl	80002f8 <__aeabi_dsub>
 8015e22:	465c      	mov	r4, fp
 8015e24:	e036      	b.n	8015e94 <__ieee754_pow+0x7a4>
 8015e26:	bf00      	nop
 8015e28:	4a454eef 	.word	0x4a454eef
 8015e2c:	3fca7e28 	.word	0x3fca7e28
 8015e30:	93c9db65 	.word	0x93c9db65
 8015e34:	3fcd864a 	.word	0x3fcd864a
 8015e38:	a91d4101 	.word	0xa91d4101
 8015e3c:	3fd17460 	.word	0x3fd17460
 8015e40:	518f264d 	.word	0x518f264d
 8015e44:	3fd55555 	.word	0x3fd55555
 8015e48:	db6fabff 	.word	0xdb6fabff
 8015e4c:	3fdb6db6 	.word	0x3fdb6db6
 8015e50:	33333303 	.word	0x33333303
 8015e54:	3fe33333 	.word	0x3fe33333
 8015e58:	e0000000 	.word	0xe0000000
 8015e5c:	3feec709 	.word	0x3feec709
 8015e60:	dc3a03fd 	.word	0xdc3a03fd
 8015e64:	3feec709 	.word	0x3feec709
 8015e68:	145b01f5 	.word	0x145b01f5
 8015e6c:	be3e2fe0 	.word	0xbe3e2fe0
 8015e70:	7ff00000 	.word	0x7ff00000
 8015e74:	43400000 	.word	0x43400000
 8015e78:	0003988e 	.word	0x0003988e
 8015e7c:	000bb679 	.word	0x000bb679
 8015e80:	08017a58 	.word	0x08017a58
 8015e84:	3ff00000 	.word	0x3ff00000
 8015e88:	40080000 	.word	0x40080000
 8015e8c:	08017a38 	.word	0x08017a38
 8015e90:	08017a48 	.word	0x08017a48
 8015e94:	4602      	mov	r2, r0
 8015e96:	460b      	mov	r3, r1
 8015e98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015e9c:	e5d6      	b.n	8015a4c <__ieee754_pow+0x35c>
 8015e9e:	f04f 0a01 	mov.w	sl, #1
 8015ea2:	e65e      	b.n	8015b62 <__ieee754_pow+0x472>
 8015ea4:	a3b5      	add	r3, pc, #724	@ (adr r3, 801617c <__ieee754_pow+0xa8c>)
 8015ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eaa:	4630      	mov	r0, r6
 8015eac:	4639      	mov	r1, r7
 8015eae:	f7ea fa25 	bl	80002fc <__adddf3>
 8015eb2:	4642      	mov	r2, r8
 8015eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8015eb8:	464b      	mov	r3, r9
 8015eba:	4620      	mov	r0, r4
 8015ebc:	4629      	mov	r1, r5
 8015ebe:	f7ea fa1b 	bl	80002f8 <__aeabi_dsub>
 8015ec2:	4602      	mov	r2, r0
 8015ec4:	460b      	mov	r3, r1
 8015ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015eca:	f7ea fe5d 	bl	8000b88 <__aeabi_dcmpgt>
 8015ece:	2800      	cmp	r0, #0
 8015ed0:	f47f adfe 	bne.w	8015ad0 <__ieee754_pow+0x3e0>
 8015ed4:	4ba2      	ldr	r3, [pc, #648]	@ (8016160 <__ieee754_pow+0xa70>)
 8015ed6:	e022      	b.n	8015f1e <__ieee754_pow+0x82e>
 8015ed8:	4ca2      	ldr	r4, [pc, #648]	@ (8016164 <__ieee754_pow+0xa74>)
 8015eda:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015ede:	42a3      	cmp	r3, r4
 8015ee0:	d919      	bls.n	8015f16 <__ieee754_pow+0x826>
 8015ee2:	4ba1      	ldr	r3, [pc, #644]	@ (8016168 <__ieee754_pow+0xa78>)
 8015ee4:	440b      	add	r3, r1
 8015ee6:	4303      	orrs	r3, r0
 8015ee8:	d009      	beq.n	8015efe <__ieee754_pow+0x80e>
 8015eea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015eee:	2200      	movs	r2, #0
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	f7ea fe2b 	bl	8000b4c <__aeabi_dcmplt>
 8015ef6:	3800      	subs	r0, #0
 8015ef8:	bf18      	it	ne
 8015efa:	2001      	movne	r0, #1
 8015efc:	e512      	b.n	8015924 <__ieee754_pow+0x234>
 8015efe:	4642      	mov	r2, r8
 8015f00:	464b      	mov	r3, r9
 8015f02:	f7ea f9f9 	bl	80002f8 <__aeabi_dsub>
 8015f06:	4632      	mov	r2, r6
 8015f08:	463b      	mov	r3, r7
 8015f0a:	f7ea fe33 	bl	8000b74 <__aeabi_dcmpge>
 8015f0e:	2800      	cmp	r0, #0
 8015f10:	d1eb      	bne.n	8015eea <__ieee754_pow+0x7fa>
 8015f12:	4b96      	ldr	r3, [pc, #600]	@ (801616c <__ieee754_pow+0xa7c>)
 8015f14:	e003      	b.n	8015f1e <__ieee754_pow+0x82e>
 8015f16:	4a96      	ldr	r2, [pc, #600]	@ (8016170 <__ieee754_pow+0xa80>)
 8015f18:	4293      	cmp	r3, r2
 8015f1a:	f240 80e7 	bls.w	80160ec <__ieee754_pow+0x9fc>
 8015f1e:	151b      	asrs	r3, r3, #20
 8015f20:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8015f24:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8015f28:	fa4a fa03 	asr.w	sl, sl, r3
 8015f2c:	44da      	add	sl, fp
 8015f2e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8015f32:	4890      	ldr	r0, [pc, #576]	@ (8016174 <__ieee754_pow+0xa84>)
 8015f34:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8015f38:	4108      	asrs	r0, r1
 8015f3a:	ea00 030a 	and.w	r3, r0, sl
 8015f3e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8015f42:	f1c1 0114 	rsb	r1, r1, #20
 8015f46:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8015f4a:	fa4a fa01 	asr.w	sl, sl, r1
 8015f4e:	f1bb 0f00 	cmp.w	fp, #0
 8015f52:	4640      	mov	r0, r8
 8015f54:	4649      	mov	r1, r9
 8015f56:	f04f 0200 	mov.w	r2, #0
 8015f5a:	bfb8      	it	lt
 8015f5c:	f1ca 0a00 	rsblt	sl, sl, #0
 8015f60:	f7ea f9ca 	bl	80002f8 <__aeabi_dsub>
 8015f64:	4680      	mov	r8, r0
 8015f66:	4689      	mov	r9, r1
 8015f68:	4632      	mov	r2, r6
 8015f6a:	463b      	mov	r3, r7
 8015f6c:	4640      	mov	r0, r8
 8015f6e:	4649      	mov	r1, r9
 8015f70:	f7ea f9c4 	bl	80002fc <__adddf3>
 8015f74:	2400      	movs	r4, #0
 8015f76:	a36a      	add	r3, pc, #424	@ (adr r3, 8016120 <__ieee754_pow+0xa30>)
 8015f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	460d      	mov	r5, r1
 8015f80:	f7ea fb72 	bl	8000668 <__aeabi_dmul>
 8015f84:	4642      	mov	r2, r8
 8015f86:	e9cd 0100 	strd	r0, r1, [sp]
 8015f8a:	464b      	mov	r3, r9
 8015f8c:	4620      	mov	r0, r4
 8015f8e:	4629      	mov	r1, r5
 8015f90:	f7ea f9b2 	bl	80002f8 <__aeabi_dsub>
 8015f94:	4602      	mov	r2, r0
 8015f96:	460b      	mov	r3, r1
 8015f98:	4630      	mov	r0, r6
 8015f9a:	4639      	mov	r1, r7
 8015f9c:	f7ea f9ac 	bl	80002f8 <__aeabi_dsub>
 8015fa0:	a361      	add	r3, pc, #388	@ (adr r3, 8016128 <__ieee754_pow+0xa38>)
 8015fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fa6:	f7ea fb5f 	bl	8000668 <__aeabi_dmul>
 8015faa:	a361      	add	r3, pc, #388	@ (adr r3, 8016130 <__ieee754_pow+0xa40>)
 8015fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fb0:	4680      	mov	r8, r0
 8015fb2:	4689      	mov	r9, r1
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	4629      	mov	r1, r5
 8015fb8:	f7ea fb56 	bl	8000668 <__aeabi_dmul>
 8015fbc:	4602      	mov	r2, r0
 8015fbe:	460b      	mov	r3, r1
 8015fc0:	4640      	mov	r0, r8
 8015fc2:	4649      	mov	r1, r9
 8015fc4:	f7ea f99a 	bl	80002fc <__adddf3>
 8015fc8:	4604      	mov	r4, r0
 8015fca:	460d      	mov	r5, r1
 8015fcc:	4602      	mov	r2, r0
 8015fce:	460b      	mov	r3, r1
 8015fd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015fd4:	f7ea f992 	bl	80002fc <__adddf3>
 8015fd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015fdc:	4680      	mov	r8, r0
 8015fde:	4689      	mov	r9, r1
 8015fe0:	f7ea f98a 	bl	80002f8 <__aeabi_dsub>
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	460b      	mov	r3, r1
 8015fe8:	4620      	mov	r0, r4
 8015fea:	4629      	mov	r1, r5
 8015fec:	f7ea f984 	bl	80002f8 <__aeabi_dsub>
 8015ff0:	4642      	mov	r2, r8
 8015ff2:	4606      	mov	r6, r0
 8015ff4:	460f      	mov	r7, r1
 8015ff6:	464b      	mov	r3, r9
 8015ff8:	4640      	mov	r0, r8
 8015ffa:	4649      	mov	r1, r9
 8015ffc:	f7ea fb34 	bl	8000668 <__aeabi_dmul>
 8016000:	a34d      	add	r3, pc, #308	@ (adr r3, 8016138 <__ieee754_pow+0xa48>)
 8016002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016006:	4604      	mov	r4, r0
 8016008:	460d      	mov	r5, r1
 801600a:	f7ea fb2d 	bl	8000668 <__aeabi_dmul>
 801600e:	a34c      	add	r3, pc, #304	@ (adr r3, 8016140 <__ieee754_pow+0xa50>)
 8016010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016014:	f7ea f970 	bl	80002f8 <__aeabi_dsub>
 8016018:	4622      	mov	r2, r4
 801601a:	462b      	mov	r3, r5
 801601c:	f7ea fb24 	bl	8000668 <__aeabi_dmul>
 8016020:	a349      	add	r3, pc, #292	@ (adr r3, 8016148 <__ieee754_pow+0xa58>)
 8016022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016026:	f7ea f969 	bl	80002fc <__adddf3>
 801602a:	4622      	mov	r2, r4
 801602c:	462b      	mov	r3, r5
 801602e:	f7ea fb1b 	bl	8000668 <__aeabi_dmul>
 8016032:	a347      	add	r3, pc, #284	@ (adr r3, 8016150 <__ieee754_pow+0xa60>)
 8016034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016038:	f7ea f95e 	bl	80002f8 <__aeabi_dsub>
 801603c:	4622      	mov	r2, r4
 801603e:	462b      	mov	r3, r5
 8016040:	f7ea fb12 	bl	8000668 <__aeabi_dmul>
 8016044:	a344      	add	r3, pc, #272	@ (adr r3, 8016158 <__ieee754_pow+0xa68>)
 8016046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801604a:	f7ea f957 	bl	80002fc <__adddf3>
 801604e:	4622      	mov	r2, r4
 8016050:	462b      	mov	r3, r5
 8016052:	f7ea fb09 	bl	8000668 <__aeabi_dmul>
 8016056:	4602      	mov	r2, r0
 8016058:	460b      	mov	r3, r1
 801605a:	4640      	mov	r0, r8
 801605c:	4649      	mov	r1, r9
 801605e:	f7ea f94b 	bl	80002f8 <__aeabi_dsub>
 8016062:	4604      	mov	r4, r0
 8016064:	460d      	mov	r5, r1
 8016066:	4602      	mov	r2, r0
 8016068:	460b      	mov	r3, r1
 801606a:	4640      	mov	r0, r8
 801606c:	4649      	mov	r1, r9
 801606e:	f7ea fafb 	bl	8000668 <__aeabi_dmul>
 8016072:	2200      	movs	r2, #0
 8016074:	e9cd 0100 	strd	r0, r1, [sp]
 8016078:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801607c:	4620      	mov	r0, r4
 801607e:	4629      	mov	r1, r5
 8016080:	f7ea f93a 	bl	80002f8 <__aeabi_dsub>
 8016084:	4602      	mov	r2, r0
 8016086:	460b      	mov	r3, r1
 8016088:	e9dd 0100 	ldrd	r0, r1, [sp]
 801608c:	f7ea fc16 	bl	80008bc <__aeabi_ddiv>
 8016090:	4632      	mov	r2, r6
 8016092:	4604      	mov	r4, r0
 8016094:	460d      	mov	r5, r1
 8016096:	463b      	mov	r3, r7
 8016098:	4640      	mov	r0, r8
 801609a:	4649      	mov	r1, r9
 801609c:	f7ea fae4 	bl	8000668 <__aeabi_dmul>
 80160a0:	4632      	mov	r2, r6
 80160a2:	463b      	mov	r3, r7
 80160a4:	f7ea f92a 	bl	80002fc <__adddf3>
 80160a8:	4602      	mov	r2, r0
 80160aa:	460b      	mov	r3, r1
 80160ac:	4620      	mov	r0, r4
 80160ae:	4629      	mov	r1, r5
 80160b0:	f7ea f922 	bl	80002f8 <__aeabi_dsub>
 80160b4:	4642      	mov	r2, r8
 80160b6:	464b      	mov	r3, r9
 80160b8:	f7ea f91e 	bl	80002f8 <__aeabi_dsub>
 80160bc:	460b      	mov	r3, r1
 80160be:	4602      	mov	r2, r0
 80160c0:	492d      	ldr	r1, [pc, #180]	@ (8016178 <__ieee754_pow+0xa88>)
 80160c2:	2000      	movs	r0, #0
 80160c4:	f7ea f918 	bl	80002f8 <__aeabi_dsub>
 80160c8:	ec41 0b10 	vmov	d0, r0, r1
 80160cc:	ee10 3a90 	vmov	r3, s1
 80160d0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80160d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80160d8:	da0b      	bge.n	80160f2 <__ieee754_pow+0xa02>
 80160da:	4650      	mov	r0, sl
 80160dc:	f000 fd40 	bl	8016b60 <scalbn>
 80160e0:	ec51 0b10 	vmov	r0, r1, d0
 80160e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80160e8:	f7ff bb6d 	b.w	80157c6 <__ieee754_pow+0xd6>
 80160ec:	f8dd a010 	ldr.w	sl, [sp, #16]
 80160f0:	e73a      	b.n	8015f68 <__ieee754_pow+0x878>
 80160f2:	ec51 0b10 	vmov	r0, r1, d0
 80160f6:	4619      	mov	r1, r3
 80160f8:	e7f4      	b.n	80160e4 <__ieee754_pow+0x9f4>
 80160fa:	491f      	ldr	r1, [pc, #124]	@ (8016178 <__ieee754_pow+0xa88>)
 80160fc:	2000      	movs	r0, #0
 80160fe:	f7ff bb14 	b.w	801572a <__ieee754_pow+0x3a>
 8016102:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016106:	f7ff bb10 	b.w	801572a <__ieee754_pow+0x3a>
 801610a:	4630      	mov	r0, r6
 801610c:	4639      	mov	r1, r7
 801610e:	f7ff bb0c 	b.w	801572a <__ieee754_pow+0x3a>
 8016112:	460c      	mov	r4, r1
 8016114:	f7ff bb69 	b.w	80157ea <__ieee754_pow+0xfa>
 8016118:	2400      	movs	r4, #0
 801611a:	f7ff bb4b 	b.w	80157b4 <__ieee754_pow+0xc4>
 801611e:	bf00      	nop
 8016120:	00000000 	.word	0x00000000
 8016124:	3fe62e43 	.word	0x3fe62e43
 8016128:	fefa39ef 	.word	0xfefa39ef
 801612c:	3fe62e42 	.word	0x3fe62e42
 8016130:	0ca86c39 	.word	0x0ca86c39
 8016134:	be205c61 	.word	0xbe205c61
 8016138:	72bea4d0 	.word	0x72bea4d0
 801613c:	3e663769 	.word	0x3e663769
 8016140:	c5d26bf1 	.word	0xc5d26bf1
 8016144:	3ebbbd41 	.word	0x3ebbbd41
 8016148:	af25de2c 	.word	0xaf25de2c
 801614c:	3f11566a 	.word	0x3f11566a
 8016150:	16bebd93 	.word	0x16bebd93
 8016154:	3f66c16c 	.word	0x3f66c16c
 8016158:	5555553e 	.word	0x5555553e
 801615c:	3fc55555 	.word	0x3fc55555
 8016160:	40900000 	.word	0x40900000
 8016164:	4090cbff 	.word	0x4090cbff
 8016168:	3f6f3400 	.word	0x3f6f3400
 801616c:	4090cc00 	.word	0x4090cc00
 8016170:	3fe00000 	.word	0x3fe00000
 8016174:	fff00000 	.word	0xfff00000
 8016178:	3ff00000 	.word	0x3ff00000
 801617c:	652b82fe 	.word	0x652b82fe
 8016180:	3c971547 	.word	0x3c971547
 8016184:	00000000 	.word	0x00000000

08016188 <atan>:
 8016188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801618c:	ec55 4b10 	vmov	r4, r5, d0
 8016190:	4bbf      	ldr	r3, [pc, #764]	@ (8016490 <atan+0x308>)
 8016192:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8016196:	429e      	cmp	r6, r3
 8016198:	46ab      	mov	fp, r5
 801619a:	d918      	bls.n	80161ce <atan+0x46>
 801619c:	4bbd      	ldr	r3, [pc, #756]	@ (8016494 <atan+0x30c>)
 801619e:	429e      	cmp	r6, r3
 80161a0:	d801      	bhi.n	80161a6 <atan+0x1e>
 80161a2:	d109      	bne.n	80161b8 <atan+0x30>
 80161a4:	b144      	cbz	r4, 80161b8 <atan+0x30>
 80161a6:	4622      	mov	r2, r4
 80161a8:	462b      	mov	r3, r5
 80161aa:	4620      	mov	r0, r4
 80161ac:	4629      	mov	r1, r5
 80161ae:	f7ea f8a5 	bl	80002fc <__adddf3>
 80161b2:	4604      	mov	r4, r0
 80161b4:	460d      	mov	r5, r1
 80161b6:	e006      	b.n	80161c6 <atan+0x3e>
 80161b8:	f1bb 0f00 	cmp.w	fp, #0
 80161bc:	f340 812b 	ble.w	8016416 <atan+0x28e>
 80161c0:	a597      	add	r5, pc, #604	@ (adr r5, 8016420 <atan+0x298>)
 80161c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80161c6:	ec45 4b10 	vmov	d0, r4, r5
 80161ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ce:	4bb2      	ldr	r3, [pc, #712]	@ (8016498 <atan+0x310>)
 80161d0:	429e      	cmp	r6, r3
 80161d2:	d813      	bhi.n	80161fc <atan+0x74>
 80161d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80161d8:	429e      	cmp	r6, r3
 80161da:	d80c      	bhi.n	80161f6 <atan+0x6e>
 80161dc:	a392      	add	r3, pc, #584	@ (adr r3, 8016428 <atan+0x2a0>)
 80161de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e2:	4620      	mov	r0, r4
 80161e4:	4629      	mov	r1, r5
 80161e6:	f7ea f889 	bl	80002fc <__adddf3>
 80161ea:	4bac      	ldr	r3, [pc, #688]	@ (801649c <atan+0x314>)
 80161ec:	2200      	movs	r2, #0
 80161ee:	f7ea fccb 	bl	8000b88 <__aeabi_dcmpgt>
 80161f2:	2800      	cmp	r0, #0
 80161f4:	d1e7      	bne.n	80161c6 <atan+0x3e>
 80161f6:	f04f 3aff 	mov.w	sl, #4294967295
 80161fa:	e029      	b.n	8016250 <atan+0xc8>
 80161fc:	f000 f95c 	bl	80164b8 <fabs>
 8016200:	4ba7      	ldr	r3, [pc, #668]	@ (80164a0 <atan+0x318>)
 8016202:	429e      	cmp	r6, r3
 8016204:	ec55 4b10 	vmov	r4, r5, d0
 8016208:	f200 80bc 	bhi.w	8016384 <atan+0x1fc>
 801620c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8016210:	429e      	cmp	r6, r3
 8016212:	f200 809e 	bhi.w	8016352 <atan+0x1ca>
 8016216:	4622      	mov	r2, r4
 8016218:	462b      	mov	r3, r5
 801621a:	4620      	mov	r0, r4
 801621c:	4629      	mov	r1, r5
 801621e:	f7ea f86d 	bl	80002fc <__adddf3>
 8016222:	4b9e      	ldr	r3, [pc, #632]	@ (801649c <atan+0x314>)
 8016224:	2200      	movs	r2, #0
 8016226:	f7ea f867 	bl	80002f8 <__aeabi_dsub>
 801622a:	2200      	movs	r2, #0
 801622c:	4606      	mov	r6, r0
 801622e:	460f      	mov	r7, r1
 8016230:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016234:	4620      	mov	r0, r4
 8016236:	4629      	mov	r1, r5
 8016238:	f7ea f860 	bl	80002fc <__adddf3>
 801623c:	4602      	mov	r2, r0
 801623e:	460b      	mov	r3, r1
 8016240:	4630      	mov	r0, r6
 8016242:	4639      	mov	r1, r7
 8016244:	f7ea fb3a 	bl	80008bc <__aeabi_ddiv>
 8016248:	f04f 0a00 	mov.w	sl, #0
 801624c:	4604      	mov	r4, r0
 801624e:	460d      	mov	r5, r1
 8016250:	4622      	mov	r2, r4
 8016252:	462b      	mov	r3, r5
 8016254:	4620      	mov	r0, r4
 8016256:	4629      	mov	r1, r5
 8016258:	f7ea fa06 	bl	8000668 <__aeabi_dmul>
 801625c:	4602      	mov	r2, r0
 801625e:	460b      	mov	r3, r1
 8016260:	4680      	mov	r8, r0
 8016262:	4689      	mov	r9, r1
 8016264:	f7ea fa00 	bl	8000668 <__aeabi_dmul>
 8016268:	a371      	add	r3, pc, #452	@ (adr r3, 8016430 <atan+0x2a8>)
 801626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801626e:	4606      	mov	r6, r0
 8016270:	460f      	mov	r7, r1
 8016272:	f7ea f9f9 	bl	8000668 <__aeabi_dmul>
 8016276:	a370      	add	r3, pc, #448	@ (adr r3, 8016438 <atan+0x2b0>)
 8016278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801627c:	f7ea f83e 	bl	80002fc <__adddf3>
 8016280:	4632      	mov	r2, r6
 8016282:	463b      	mov	r3, r7
 8016284:	f7ea f9f0 	bl	8000668 <__aeabi_dmul>
 8016288:	a36d      	add	r3, pc, #436	@ (adr r3, 8016440 <atan+0x2b8>)
 801628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801628e:	f7ea f835 	bl	80002fc <__adddf3>
 8016292:	4632      	mov	r2, r6
 8016294:	463b      	mov	r3, r7
 8016296:	f7ea f9e7 	bl	8000668 <__aeabi_dmul>
 801629a:	a36b      	add	r3, pc, #428	@ (adr r3, 8016448 <atan+0x2c0>)
 801629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162a0:	f7ea f82c 	bl	80002fc <__adddf3>
 80162a4:	4632      	mov	r2, r6
 80162a6:	463b      	mov	r3, r7
 80162a8:	f7ea f9de 	bl	8000668 <__aeabi_dmul>
 80162ac:	a368      	add	r3, pc, #416	@ (adr r3, 8016450 <atan+0x2c8>)
 80162ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162b2:	f7ea f823 	bl	80002fc <__adddf3>
 80162b6:	4632      	mov	r2, r6
 80162b8:	463b      	mov	r3, r7
 80162ba:	f7ea f9d5 	bl	8000668 <__aeabi_dmul>
 80162be:	a366      	add	r3, pc, #408	@ (adr r3, 8016458 <atan+0x2d0>)
 80162c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162c4:	f7ea f81a 	bl	80002fc <__adddf3>
 80162c8:	4642      	mov	r2, r8
 80162ca:	464b      	mov	r3, r9
 80162cc:	f7ea f9cc 	bl	8000668 <__aeabi_dmul>
 80162d0:	a363      	add	r3, pc, #396	@ (adr r3, 8016460 <atan+0x2d8>)
 80162d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d6:	4680      	mov	r8, r0
 80162d8:	4689      	mov	r9, r1
 80162da:	4630      	mov	r0, r6
 80162dc:	4639      	mov	r1, r7
 80162de:	f7ea f9c3 	bl	8000668 <__aeabi_dmul>
 80162e2:	a361      	add	r3, pc, #388	@ (adr r3, 8016468 <atan+0x2e0>)
 80162e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162e8:	f7ea f806 	bl	80002f8 <__aeabi_dsub>
 80162ec:	4632      	mov	r2, r6
 80162ee:	463b      	mov	r3, r7
 80162f0:	f7ea f9ba 	bl	8000668 <__aeabi_dmul>
 80162f4:	a35e      	add	r3, pc, #376	@ (adr r3, 8016470 <atan+0x2e8>)
 80162f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162fa:	f7e9 fffd 	bl	80002f8 <__aeabi_dsub>
 80162fe:	4632      	mov	r2, r6
 8016300:	463b      	mov	r3, r7
 8016302:	f7ea f9b1 	bl	8000668 <__aeabi_dmul>
 8016306:	a35c      	add	r3, pc, #368	@ (adr r3, 8016478 <atan+0x2f0>)
 8016308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801630c:	f7e9 fff4 	bl	80002f8 <__aeabi_dsub>
 8016310:	4632      	mov	r2, r6
 8016312:	463b      	mov	r3, r7
 8016314:	f7ea f9a8 	bl	8000668 <__aeabi_dmul>
 8016318:	a359      	add	r3, pc, #356	@ (adr r3, 8016480 <atan+0x2f8>)
 801631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801631e:	f7e9 ffeb 	bl	80002f8 <__aeabi_dsub>
 8016322:	4632      	mov	r2, r6
 8016324:	463b      	mov	r3, r7
 8016326:	f7ea f99f 	bl	8000668 <__aeabi_dmul>
 801632a:	4602      	mov	r2, r0
 801632c:	460b      	mov	r3, r1
 801632e:	4640      	mov	r0, r8
 8016330:	4649      	mov	r1, r9
 8016332:	f7e9 ffe3 	bl	80002fc <__adddf3>
 8016336:	4622      	mov	r2, r4
 8016338:	462b      	mov	r3, r5
 801633a:	f7ea f995 	bl	8000668 <__aeabi_dmul>
 801633e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8016342:	4602      	mov	r2, r0
 8016344:	460b      	mov	r3, r1
 8016346:	d148      	bne.n	80163da <atan+0x252>
 8016348:	4620      	mov	r0, r4
 801634a:	4629      	mov	r1, r5
 801634c:	f7e9 ffd4 	bl	80002f8 <__aeabi_dsub>
 8016350:	e72f      	b.n	80161b2 <atan+0x2a>
 8016352:	4b52      	ldr	r3, [pc, #328]	@ (801649c <atan+0x314>)
 8016354:	2200      	movs	r2, #0
 8016356:	4620      	mov	r0, r4
 8016358:	4629      	mov	r1, r5
 801635a:	f7e9 ffcd 	bl	80002f8 <__aeabi_dsub>
 801635e:	4b4f      	ldr	r3, [pc, #316]	@ (801649c <atan+0x314>)
 8016360:	4606      	mov	r6, r0
 8016362:	460f      	mov	r7, r1
 8016364:	2200      	movs	r2, #0
 8016366:	4620      	mov	r0, r4
 8016368:	4629      	mov	r1, r5
 801636a:	f7e9 ffc7 	bl	80002fc <__adddf3>
 801636e:	4602      	mov	r2, r0
 8016370:	460b      	mov	r3, r1
 8016372:	4630      	mov	r0, r6
 8016374:	4639      	mov	r1, r7
 8016376:	f7ea faa1 	bl	80008bc <__aeabi_ddiv>
 801637a:	f04f 0a01 	mov.w	sl, #1
 801637e:	4604      	mov	r4, r0
 8016380:	460d      	mov	r5, r1
 8016382:	e765      	b.n	8016250 <atan+0xc8>
 8016384:	4b47      	ldr	r3, [pc, #284]	@ (80164a4 <atan+0x31c>)
 8016386:	429e      	cmp	r6, r3
 8016388:	d21c      	bcs.n	80163c4 <atan+0x23c>
 801638a:	4b47      	ldr	r3, [pc, #284]	@ (80164a8 <atan+0x320>)
 801638c:	2200      	movs	r2, #0
 801638e:	4620      	mov	r0, r4
 8016390:	4629      	mov	r1, r5
 8016392:	f7e9 ffb1 	bl	80002f8 <__aeabi_dsub>
 8016396:	4b44      	ldr	r3, [pc, #272]	@ (80164a8 <atan+0x320>)
 8016398:	4606      	mov	r6, r0
 801639a:	460f      	mov	r7, r1
 801639c:	2200      	movs	r2, #0
 801639e:	4620      	mov	r0, r4
 80163a0:	4629      	mov	r1, r5
 80163a2:	f7ea f961 	bl	8000668 <__aeabi_dmul>
 80163a6:	4b3d      	ldr	r3, [pc, #244]	@ (801649c <atan+0x314>)
 80163a8:	2200      	movs	r2, #0
 80163aa:	f7e9 ffa7 	bl	80002fc <__adddf3>
 80163ae:	4602      	mov	r2, r0
 80163b0:	460b      	mov	r3, r1
 80163b2:	4630      	mov	r0, r6
 80163b4:	4639      	mov	r1, r7
 80163b6:	f7ea fa81 	bl	80008bc <__aeabi_ddiv>
 80163ba:	f04f 0a02 	mov.w	sl, #2
 80163be:	4604      	mov	r4, r0
 80163c0:	460d      	mov	r5, r1
 80163c2:	e745      	b.n	8016250 <atan+0xc8>
 80163c4:	4622      	mov	r2, r4
 80163c6:	462b      	mov	r3, r5
 80163c8:	4938      	ldr	r1, [pc, #224]	@ (80164ac <atan+0x324>)
 80163ca:	2000      	movs	r0, #0
 80163cc:	f7ea fa76 	bl	80008bc <__aeabi_ddiv>
 80163d0:	f04f 0a03 	mov.w	sl, #3
 80163d4:	4604      	mov	r4, r0
 80163d6:	460d      	mov	r5, r1
 80163d8:	e73a      	b.n	8016250 <atan+0xc8>
 80163da:	4b35      	ldr	r3, [pc, #212]	@ (80164b0 <atan+0x328>)
 80163dc:	4e35      	ldr	r6, [pc, #212]	@ (80164b4 <atan+0x32c>)
 80163de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80163e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e6:	f7e9 ff87 	bl	80002f8 <__aeabi_dsub>
 80163ea:	4622      	mov	r2, r4
 80163ec:	462b      	mov	r3, r5
 80163ee:	f7e9 ff83 	bl	80002f8 <__aeabi_dsub>
 80163f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80163f6:	4602      	mov	r2, r0
 80163f8:	460b      	mov	r3, r1
 80163fa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80163fe:	f7e9 ff7b 	bl	80002f8 <__aeabi_dsub>
 8016402:	f1bb 0f00 	cmp.w	fp, #0
 8016406:	4604      	mov	r4, r0
 8016408:	460d      	mov	r5, r1
 801640a:	f6bf aedc 	bge.w	80161c6 <atan+0x3e>
 801640e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016412:	461d      	mov	r5, r3
 8016414:	e6d7      	b.n	80161c6 <atan+0x3e>
 8016416:	a51c      	add	r5, pc, #112	@ (adr r5, 8016488 <atan+0x300>)
 8016418:	e9d5 4500 	ldrd	r4, r5, [r5]
 801641c:	e6d3      	b.n	80161c6 <atan+0x3e>
 801641e:	bf00      	nop
 8016420:	54442d18 	.word	0x54442d18
 8016424:	3ff921fb 	.word	0x3ff921fb
 8016428:	8800759c 	.word	0x8800759c
 801642c:	7e37e43c 	.word	0x7e37e43c
 8016430:	e322da11 	.word	0xe322da11
 8016434:	3f90ad3a 	.word	0x3f90ad3a
 8016438:	24760deb 	.word	0x24760deb
 801643c:	3fa97b4b 	.word	0x3fa97b4b
 8016440:	a0d03d51 	.word	0xa0d03d51
 8016444:	3fb10d66 	.word	0x3fb10d66
 8016448:	c54c206e 	.word	0xc54c206e
 801644c:	3fb745cd 	.word	0x3fb745cd
 8016450:	920083ff 	.word	0x920083ff
 8016454:	3fc24924 	.word	0x3fc24924
 8016458:	5555550d 	.word	0x5555550d
 801645c:	3fd55555 	.word	0x3fd55555
 8016460:	2c6a6c2f 	.word	0x2c6a6c2f
 8016464:	bfa2b444 	.word	0xbfa2b444
 8016468:	52defd9a 	.word	0x52defd9a
 801646c:	3fadde2d 	.word	0x3fadde2d
 8016470:	af749a6d 	.word	0xaf749a6d
 8016474:	3fb3b0f2 	.word	0x3fb3b0f2
 8016478:	fe231671 	.word	0xfe231671
 801647c:	3fbc71c6 	.word	0x3fbc71c6
 8016480:	9998ebc4 	.word	0x9998ebc4
 8016484:	3fc99999 	.word	0x3fc99999
 8016488:	54442d18 	.word	0x54442d18
 801648c:	bff921fb 	.word	0xbff921fb
 8016490:	440fffff 	.word	0x440fffff
 8016494:	7ff00000 	.word	0x7ff00000
 8016498:	3fdbffff 	.word	0x3fdbffff
 801649c:	3ff00000 	.word	0x3ff00000
 80164a0:	3ff2ffff 	.word	0x3ff2ffff
 80164a4:	40038000 	.word	0x40038000
 80164a8:	3ff80000 	.word	0x3ff80000
 80164ac:	bff00000 	.word	0xbff00000
 80164b0:	08017a68 	.word	0x08017a68
 80164b4:	08017a88 	.word	0x08017a88

080164b8 <fabs>:
 80164b8:	ec51 0b10 	vmov	r0, r1, d0
 80164bc:	4602      	mov	r2, r0
 80164be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80164c2:	ec43 2b10 	vmov	d0, r2, r3
 80164c6:	4770      	bx	lr

080164c8 <__kernel_cosf>:
 80164c8:	ee10 3a10 	vmov	r3, s0
 80164cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80164d0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80164d4:	eef0 6a40 	vmov.f32	s13, s0
 80164d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80164dc:	d204      	bcs.n	80164e8 <__kernel_cosf+0x20>
 80164de:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80164e2:	ee17 2a90 	vmov	r2, s15
 80164e6:	b342      	cbz	r2, 801653a <__kernel_cosf+0x72>
 80164e8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80164ec:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8016558 <__kernel_cosf+0x90>
 80164f0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801655c <__kernel_cosf+0x94>
 80164f4:	4a1a      	ldr	r2, [pc, #104]	@ (8016560 <__kernel_cosf+0x98>)
 80164f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80164fa:	4293      	cmp	r3, r2
 80164fc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016564 <__kernel_cosf+0x9c>
 8016500:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016504:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8016568 <__kernel_cosf+0xa0>
 8016508:	eea7 6a87 	vfma.f32	s12, s15, s14
 801650c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801656c <__kernel_cosf+0xa4>
 8016510:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016514:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8016570 <__kernel_cosf+0xa8>
 8016518:	eea7 6a87 	vfma.f32	s12, s15, s14
 801651c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8016520:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016524:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016528:	eee7 0a06 	vfma.f32	s1, s14, s12
 801652c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016530:	d804      	bhi.n	801653c <__kernel_cosf+0x74>
 8016532:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016536:	ee30 0a67 	vsub.f32	s0, s0, s15
 801653a:	4770      	bx	lr
 801653c:	4a0d      	ldr	r2, [pc, #52]	@ (8016574 <__kernel_cosf+0xac>)
 801653e:	4293      	cmp	r3, r2
 8016540:	bf9a      	itte	ls
 8016542:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8016546:	ee07 3a10 	vmovls	s14, r3
 801654a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801654e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016552:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016556:	e7ec      	b.n	8016532 <__kernel_cosf+0x6a>
 8016558:	ad47d74e 	.word	0xad47d74e
 801655c:	310f74f6 	.word	0x310f74f6
 8016560:	3e999999 	.word	0x3e999999
 8016564:	b493f27c 	.word	0xb493f27c
 8016568:	37d00d01 	.word	0x37d00d01
 801656c:	bab60b61 	.word	0xbab60b61
 8016570:	3d2aaaab 	.word	0x3d2aaaab
 8016574:	3f480000 	.word	0x3f480000

08016578 <__kernel_sinf>:
 8016578:	ee10 3a10 	vmov	r3, s0
 801657c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016580:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8016584:	d204      	bcs.n	8016590 <__kernel_sinf+0x18>
 8016586:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801658a:	ee17 3a90 	vmov	r3, s15
 801658e:	b35b      	cbz	r3, 80165e8 <__kernel_sinf+0x70>
 8016590:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016594:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80165ec <__kernel_sinf+0x74>
 8016598:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80165f0 <__kernel_sinf+0x78>
 801659c:	eea7 6a27 	vfma.f32	s12, s14, s15
 80165a0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80165f4 <__kernel_sinf+0x7c>
 80165a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80165a8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80165f8 <__kernel_sinf+0x80>
 80165ac:	eea7 6a87 	vfma.f32	s12, s15, s14
 80165b0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80165fc <__kernel_sinf+0x84>
 80165b4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80165b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80165bc:	b930      	cbnz	r0, 80165cc <__kernel_sinf+0x54>
 80165be:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8016600 <__kernel_sinf+0x88>
 80165c2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80165c6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80165ca:	4770      	bx	lr
 80165cc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80165d0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80165d4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80165d8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80165dc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8016604 <__kernel_sinf+0x8c>
 80165e0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80165e4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80165e8:	4770      	bx	lr
 80165ea:	bf00      	nop
 80165ec:	2f2ec9d3 	.word	0x2f2ec9d3
 80165f0:	b2d72f34 	.word	0xb2d72f34
 80165f4:	3638ef1b 	.word	0x3638ef1b
 80165f8:	b9500d01 	.word	0xb9500d01
 80165fc:	3c088889 	.word	0x3c088889
 8016600:	be2aaaab 	.word	0xbe2aaaab
 8016604:	3e2aaaab 	.word	0x3e2aaaab

08016608 <__ieee754_atan2f>:
 8016608:	ee10 2a90 	vmov	r2, s1
 801660c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8016610:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8016614:	b510      	push	{r4, lr}
 8016616:	eef0 7a40 	vmov.f32	s15, s0
 801661a:	d806      	bhi.n	801662a <__ieee754_atan2f+0x22>
 801661c:	ee10 0a10 	vmov	r0, s0
 8016620:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8016624:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016628:	d904      	bls.n	8016634 <__ieee754_atan2f+0x2c>
 801662a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801662e:	eeb0 0a67 	vmov.f32	s0, s15
 8016632:	bd10      	pop	{r4, pc}
 8016634:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8016638:	d103      	bne.n	8016642 <__ieee754_atan2f+0x3a>
 801663a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801663e:	f000 b9b3 	b.w	80169a8 <atanf>
 8016642:	1794      	asrs	r4, r2, #30
 8016644:	f004 0402 	and.w	r4, r4, #2
 8016648:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801664c:	b943      	cbnz	r3, 8016660 <__ieee754_atan2f+0x58>
 801664e:	2c02      	cmp	r4, #2
 8016650:	d05e      	beq.n	8016710 <__ieee754_atan2f+0x108>
 8016652:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8016724 <__ieee754_atan2f+0x11c>
 8016656:	2c03      	cmp	r4, #3
 8016658:	bf08      	it	eq
 801665a:	eef0 7a47 	vmoveq.f32	s15, s14
 801665e:	e7e6      	b.n	801662e <__ieee754_atan2f+0x26>
 8016660:	b941      	cbnz	r1, 8016674 <__ieee754_atan2f+0x6c>
 8016662:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8016728 <__ieee754_atan2f+0x120>
 8016666:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801672c <__ieee754_atan2f+0x124>
 801666a:	2800      	cmp	r0, #0
 801666c:	bfa8      	it	ge
 801666e:	eef0 7a47 	vmovge.f32	s15, s14
 8016672:	e7dc      	b.n	801662e <__ieee754_atan2f+0x26>
 8016674:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8016678:	d110      	bne.n	801669c <__ieee754_atan2f+0x94>
 801667a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801667e:	f104 34ff 	add.w	r4, r4, #4294967295
 8016682:	d107      	bne.n	8016694 <__ieee754_atan2f+0x8c>
 8016684:	2c02      	cmp	r4, #2
 8016686:	d846      	bhi.n	8016716 <__ieee754_atan2f+0x10e>
 8016688:	4b29      	ldr	r3, [pc, #164]	@ (8016730 <__ieee754_atan2f+0x128>)
 801668a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801668e:	edd3 7a00 	vldr	s15, [r3]
 8016692:	e7cc      	b.n	801662e <__ieee754_atan2f+0x26>
 8016694:	2c02      	cmp	r4, #2
 8016696:	d841      	bhi.n	801671c <__ieee754_atan2f+0x114>
 8016698:	4b26      	ldr	r3, [pc, #152]	@ (8016734 <__ieee754_atan2f+0x12c>)
 801669a:	e7f6      	b.n	801668a <__ieee754_atan2f+0x82>
 801669c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80166a0:	d0df      	beq.n	8016662 <__ieee754_atan2f+0x5a>
 80166a2:	1a5b      	subs	r3, r3, r1
 80166a4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80166a8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80166ac:	da1a      	bge.n	80166e4 <__ieee754_atan2f+0xdc>
 80166ae:	2a00      	cmp	r2, #0
 80166b0:	da01      	bge.n	80166b6 <__ieee754_atan2f+0xae>
 80166b2:	313c      	adds	r1, #60	@ 0x3c
 80166b4:	db19      	blt.n	80166ea <__ieee754_atan2f+0xe2>
 80166b6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80166ba:	f000 fa49 	bl	8016b50 <fabsf>
 80166be:	f000 f973 	bl	80169a8 <atanf>
 80166c2:	eef0 7a40 	vmov.f32	s15, s0
 80166c6:	2c01      	cmp	r4, #1
 80166c8:	d012      	beq.n	80166f0 <__ieee754_atan2f+0xe8>
 80166ca:	2c02      	cmp	r4, #2
 80166cc:	d017      	beq.n	80166fe <__ieee754_atan2f+0xf6>
 80166ce:	2c00      	cmp	r4, #0
 80166d0:	d0ad      	beq.n	801662e <__ieee754_atan2f+0x26>
 80166d2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8016738 <__ieee754_atan2f+0x130>
 80166d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80166da:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801673c <__ieee754_atan2f+0x134>
 80166de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80166e2:	e7a4      	b.n	801662e <__ieee754_atan2f+0x26>
 80166e4:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801672c <__ieee754_atan2f+0x124>
 80166e8:	e7ed      	b.n	80166c6 <__ieee754_atan2f+0xbe>
 80166ea:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8016740 <__ieee754_atan2f+0x138>
 80166ee:	e7ea      	b.n	80166c6 <__ieee754_atan2f+0xbe>
 80166f0:	ee17 3a90 	vmov	r3, s15
 80166f4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80166f8:	ee07 3a90 	vmov	s15, r3
 80166fc:	e797      	b.n	801662e <__ieee754_atan2f+0x26>
 80166fe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8016738 <__ieee754_atan2f+0x130>
 8016702:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016706:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801673c <__ieee754_atan2f+0x134>
 801670a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801670e:	e78e      	b.n	801662e <__ieee754_atan2f+0x26>
 8016710:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801673c <__ieee754_atan2f+0x134>
 8016714:	e78b      	b.n	801662e <__ieee754_atan2f+0x26>
 8016716:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8016744 <__ieee754_atan2f+0x13c>
 801671a:	e788      	b.n	801662e <__ieee754_atan2f+0x26>
 801671c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8016740 <__ieee754_atan2f+0x138>
 8016720:	e785      	b.n	801662e <__ieee754_atan2f+0x26>
 8016722:	bf00      	nop
 8016724:	c0490fdb 	.word	0xc0490fdb
 8016728:	bfc90fdb 	.word	0xbfc90fdb
 801672c:	3fc90fdb 	.word	0x3fc90fdb
 8016730:	08017ab4 	.word	0x08017ab4
 8016734:	08017aa8 	.word	0x08017aa8
 8016738:	33bbbd2e 	.word	0x33bbbd2e
 801673c:	40490fdb 	.word	0x40490fdb
 8016740:	00000000 	.word	0x00000000
 8016744:	3f490fdb 	.word	0x3f490fdb

08016748 <__ieee754_rem_pio2f>:
 8016748:	b5f0      	push	{r4, r5, r6, r7, lr}
 801674a:	ee10 6a10 	vmov	r6, s0
 801674e:	4b88      	ldr	r3, [pc, #544]	@ (8016970 <__ieee754_rem_pio2f+0x228>)
 8016750:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8016754:	429d      	cmp	r5, r3
 8016756:	b087      	sub	sp, #28
 8016758:	4604      	mov	r4, r0
 801675a:	d805      	bhi.n	8016768 <__ieee754_rem_pio2f+0x20>
 801675c:	2300      	movs	r3, #0
 801675e:	ed80 0a00 	vstr	s0, [r0]
 8016762:	6043      	str	r3, [r0, #4]
 8016764:	2000      	movs	r0, #0
 8016766:	e022      	b.n	80167ae <__ieee754_rem_pio2f+0x66>
 8016768:	4b82      	ldr	r3, [pc, #520]	@ (8016974 <__ieee754_rem_pio2f+0x22c>)
 801676a:	429d      	cmp	r5, r3
 801676c:	d83a      	bhi.n	80167e4 <__ieee754_rem_pio2f+0x9c>
 801676e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8016772:	2e00      	cmp	r6, #0
 8016774:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8016978 <__ieee754_rem_pio2f+0x230>
 8016778:	4a80      	ldr	r2, [pc, #512]	@ (801697c <__ieee754_rem_pio2f+0x234>)
 801677a:	f023 030f 	bic.w	r3, r3, #15
 801677e:	dd18      	ble.n	80167b2 <__ieee754_rem_pio2f+0x6a>
 8016780:	4293      	cmp	r3, r2
 8016782:	ee70 7a47 	vsub.f32	s15, s0, s14
 8016786:	bf09      	itett	eq
 8016788:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8016980 <__ieee754_rem_pio2f+0x238>
 801678c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8016984 <__ieee754_rem_pio2f+0x23c>
 8016790:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8016988 <__ieee754_rem_pio2f+0x240>
 8016794:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8016798:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801679c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80167a0:	ed80 7a00 	vstr	s14, [r0]
 80167a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80167a8:	edc0 7a01 	vstr	s15, [r0, #4]
 80167ac:	2001      	movs	r0, #1
 80167ae:	b007      	add	sp, #28
 80167b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167b2:	4293      	cmp	r3, r2
 80167b4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80167b8:	bf09      	itett	eq
 80167ba:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8016980 <__ieee754_rem_pio2f+0x238>
 80167be:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8016984 <__ieee754_rem_pio2f+0x23c>
 80167c2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8016988 <__ieee754_rem_pio2f+0x240>
 80167c6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80167ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80167ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80167d2:	ed80 7a00 	vstr	s14, [r0]
 80167d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80167da:	edc0 7a01 	vstr	s15, [r0, #4]
 80167de:	f04f 30ff 	mov.w	r0, #4294967295
 80167e2:	e7e4      	b.n	80167ae <__ieee754_rem_pio2f+0x66>
 80167e4:	4b69      	ldr	r3, [pc, #420]	@ (801698c <__ieee754_rem_pio2f+0x244>)
 80167e6:	429d      	cmp	r5, r3
 80167e8:	d873      	bhi.n	80168d2 <__ieee754_rem_pio2f+0x18a>
 80167ea:	f000 f9b1 	bl	8016b50 <fabsf>
 80167ee:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8016990 <__ieee754_rem_pio2f+0x248>
 80167f2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80167f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80167fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80167fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016802:	ee17 0a90 	vmov	r0, s15
 8016806:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8016978 <__ieee754_rem_pio2f+0x230>
 801680a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801680e:	281f      	cmp	r0, #31
 8016810:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8016984 <__ieee754_rem_pio2f+0x23c>
 8016814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016818:	eeb1 6a47 	vneg.f32	s12, s14
 801681c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016820:	ee16 1a90 	vmov	r1, s13
 8016824:	dc09      	bgt.n	801683a <__ieee754_rem_pio2f+0xf2>
 8016826:	4a5b      	ldr	r2, [pc, #364]	@ (8016994 <__ieee754_rem_pio2f+0x24c>)
 8016828:	1e47      	subs	r7, r0, #1
 801682a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801682e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8016832:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016836:	4293      	cmp	r3, r2
 8016838:	d107      	bne.n	801684a <__ieee754_rem_pio2f+0x102>
 801683a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801683e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8016842:	2a08      	cmp	r2, #8
 8016844:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8016848:	dc14      	bgt.n	8016874 <__ieee754_rem_pio2f+0x12c>
 801684a:	6021      	str	r1, [r4, #0]
 801684c:	ed94 7a00 	vldr	s14, [r4]
 8016850:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016854:	2e00      	cmp	r6, #0
 8016856:	ee30 0a67 	vsub.f32	s0, s0, s15
 801685a:	ed84 0a01 	vstr	s0, [r4, #4]
 801685e:	daa6      	bge.n	80167ae <__ieee754_rem_pio2f+0x66>
 8016860:	eeb1 7a47 	vneg.f32	s14, s14
 8016864:	eeb1 0a40 	vneg.f32	s0, s0
 8016868:	ed84 7a00 	vstr	s14, [r4]
 801686c:	ed84 0a01 	vstr	s0, [r4, #4]
 8016870:	4240      	negs	r0, r0
 8016872:	e79c      	b.n	80167ae <__ieee754_rem_pio2f+0x66>
 8016874:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8016980 <__ieee754_rem_pio2f+0x238>
 8016878:	eef0 6a40 	vmov.f32	s13, s0
 801687c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8016880:	ee70 7a66 	vsub.f32	s15, s0, s13
 8016884:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016888:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8016988 <__ieee754_rem_pio2f+0x240>
 801688c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8016890:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8016894:	ee15 2a90 	vmov	r2, s11
 8016898:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801689c:	1a5b      	subs	r3, r3, r1
 801689e:	2b19      	cmp	r3, #25
 80168a0:	dc04      	bgt.n	80168ac <__ieee754_rem_pio2f+0x164>
 80168a2:	edc4 5a00 	vstr	s11, [r4]
 80168a6:	eeb0 0a66 	vmov.f32	s0, s13
 80168aa:	e7cf      	b.n	801684c <__ieee754_rem_pio2f+0x104>
 80168ac:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8016998 <__ieee754_rem_pio2f+0x250>
 80168b0:	eeb0 0a66 	vmov.f32	s0, s13
 80168b4:	eea6 0a25 	vfma.f32	s0, s12, s11
 80168b8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80168bc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801699c <__ieee754_rem_pio2f+0x254>
 80168c0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80168c4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80168c8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80168cc:	ed84 7a00 	vstr	s14, [r4]
 80168d0:	e7bc      	b.n	801684c <__ieee754_rem_pio2f+0x104>
 80168d2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80168d6:	d306      	bcc.n	80168e6 <__ieee754_rem_pio2f+0x19e>
 80168d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80168dc:	edc0 7a01 	vstr	s15, [r0, #4]
 80168e0:	edc0 7a00 	vstr	s15, [r0]
 80168e4:	e73e      	b.n	8016764 <__ieee754_rem_pio2f+0x1c>
 80168e6:	15ea      	asrs	r2, r5, #23
 80168e8:	3a86      	subs	r2, #134	@ 0x86
 80168ea:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80168ee:	ee07 3a90 	vmov	s15, r3
 80168f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80168f6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80169a0 <__ieee754_rem_pio2f+0x258>
 80168fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80168fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016902:	ed8d 7a03 	vstr	s14, [sp, #12]
 8016906:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801690a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801690e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016916:	ed8d 7a04 	vstr	s14, [sp, #16]
 801691a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801691e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016926:	edcd 7a05 	vstr	s15, [sp, #20]
 801692a:	d11e      	bne.n	801696a <__ieee754_rem_pio2f+0x222>
 801692c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016934:	bf0c      	ite	eq
 8016936:	2301      	moveq	r3, #1
 8016938:	2302      	movne	r3, #2
 801693a:	491a      	ldr	r1, [pc, #104]	@ (80169a4 <__ieee754_rem_pio2f+0x25c>)
 801693c:	9101      	str	r1, [sp, #4]
 801693e:	2102      	movs	r1, #2
 8016940:	9100      	str	r1, [sp, #0]
 8016942:	a803      	add	r0, sp, #12
 8016944:	4621      	mov	r1, r4
 8016946:	f000 f9c3 	bl	8016cd0 <__kernel_rem_pio2f>
 801694a:	2e00      	cmp	r6, #0
 801694c:	f6bf af2f 	bge.w	80167ae <__ieee754_rem_pio2f+0x66>
 8016950:	edd4 7a00 	vldr	s15, [r4]
 8016954:	eef1 7a67 	vneg.f32	s15, s15
 8016958:	edc4 7a00 	vstr	s15, [r4]
 801695c:	edd4 7a01 	vldr	s15, [r4, #4]
 8016960:	eef1 7a67 	vneg.f32	s15, s15
 8016964:	edc4 7a01 	vstr	s15, [r4, #4]
 8016968:	e782      	b.n	8016870 <__ieee754_rem_pio2f+0x128>
 801696a:	2303      	movs	r3, #3
 801696c:	e7e5      	b.n	801693a <__ieee754_rem_pio2f+0x1f2>
 801696e:	bf00      	nop
 8016970:	3f490fd8 	.word	0x3f490fd8
 8016974:	4016cbe3 	.word	0x4016cbe3
 8016978:	3fc90f80 	.word	0x3fc90f80
 801697c:	3fc90fd0 	.word	0x3fc90fd0
 8016980:	37354400 	.word	0x37354400
 8016984:	37354443 	.word	0x37354443
 8016988:	2e85a308 	.word	0x2e85a308
 801698c:	43490f80 	.word	0x43490f80
 8016990:	3f22f984 	.word	0x3f22f984
 8016994:	08017ac0 	.word	0x08017ac0
 8016998:	2e85a300 	.word	0x2e85a300
 801699c:	248d3132 	.word	0x248d3132
 80169a0:	43800000 	.word	0x43800000
 80169a4:	08017b40 	.word	0x08017b40

080169a8 <atanf>:
 80169a8:	b538      	push	{r3, r4, r5, lr}
 80169aa:	ee10 5a10 	vmov	r5, s0
 80169ae:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80169b2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80169b6:	eef0 7a40 	vmov.f32	s15, s0
 80169ba:	d310      	bcc.n	80169de <atanf+0x36>
 80169bc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80169c0:	d904      	bls.n	80169cc <atanf+0x24>
 80169c2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80169c6:	eeb0 0a67 	vmov.f32	s0, s15
 80169ca:	bd38      	pop	{r3, r4, r5, pc}
 80169cc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8016b04 <atanf+0x15c>
 80169d0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8016b08 <atanf+0x160>
 80169d4:	2d00      	cmp	r5, #0
 80169d6:	bfc8      	it	gt
 80169d8:	eef0 7a47 	vmovgt.f32	s15, s14
 80169dc:	e7f3      	b.n	80169c6 <atanf+0x1e>
 80169de:	4b4b      	ldr	r3, [pc, #300]	@ (8016b0c <atanf+0x164>)
 80169e0:	429c      	cmp	r4, r3
 80169e2:	d810      	bhi.n	8016a06 <atanf+0x5e>
 80169e4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80169e8:	d20a      	bcs.n	8016a00 <atanf+0x58>
 80169ea:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8016b10 <atanf+0x168>
 80169ee:	ee30 7a07 	vadd.f32	s14, s0, s14
 80169f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80169f6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80169fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169fe:	dce2      	bgt.n	80169c6 <atanf+0x1e>
 8016a00:	f04f 33ff 	mov.w	r3, #4294967295
 8016a04:	e013      	b.n	8016a2e <atanf+0x86>
 8016a06:	f000 f8a3 	bl	8016b50 <fabsf>
 8016a0a:	4b42      	ldr	r3, [pc, #264]	@ (8016b14 <atanf+0x16c>)
 8016a0c:	429c      	cmp	r4, r3
 8016a0e:	d84f      	bhi.n	8016ab0 <atanf+0x108>
 8016a10:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8016a14:	429c      	cmp	r4, r3
 8016a16:	d841      	bhi.n	8016a9c <atanf+0xf4>
 8016a18:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8016a1c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8016a20:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016a24:	2300      	movs	r3, #0
 8016a26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016a2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016a2e:	1c5a      	adds	r2, r3, #1
 8016a30:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8016a34:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8016b18 <atanf+0x170>
 8016a38:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8016b1c <atanf+0x174>
 8016a3c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8016b20 <atanf+0x178>
 8016a40:	ee66 6a06 	vmul.f32	s13, s12, s12
 8016a44:	eee6 5a87 	vfma.f32	s11, s13, s14
 8016a48:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8016b24 <atanf+0x17c>
 8016a4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016a50:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8016b28 <atanf+0x180>
 8016a54:	eee7 5a26 	vfma.f32	s11, s14, s13
 8016a58:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8016b2c <atanf+0x184>
 8016a5c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016a60:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8016b30 <atanf+0x188>
 8016a64:	eee7 5a26 	vfma.f32	s11, s14, s13
 8016a68:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8016b34 <atanf+0x18c>
 8016a6c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8016a70:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8016b38 <atanf+0x190>
 8016a74:	eea5 7a26 	vfma.f32	s14, s10, s13
 8016a78:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8016b3c <atanf+0x194>
 8016a7c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8016a80:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8016b40 <atanf+0x198>
 8016a84:	eea5 7a26 	vfma.f32	s14, s10, s13
 8016a88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016a8c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8016a90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8016a94:	d121      	bne.n	8016ada <atanf+0x132>
 8016a96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a9a:	e794      	b.n	80169c6 <atanf+0x1e>
 8016a9c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016aa0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016aa4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016aa8:	2301      	movs	r3, #1
 8016aaa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016aae:	e7be      	b.n	8016a2e <atanf+0x86>
 8016ab0:	4b24      	ldr	r3, [pc, #144]	@ (8016b44 <atanf+0x19c>)
 8016ab2:	429c      	cmp	r4, r3
 8016ab4:	d80b      	bhi.n	8016ace <atanf+0x126>
 8016ab6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8016aba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016abe:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016ac2:	2302      	movs	r3, #2
 8016ac4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016acc:	e7af      	b.n	8016a2e <atanf+0x86>
 8016ace:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8016ad2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016ad6:	2303      	movs	r3, #3
 8016ad8:	e7a9      	b.n	8016a2e <atanf+0x86>
 8016ada:	4a1b      	ldr	r2, [pc, #108]	@ (8016b48 <atanf+0x1a0>)
 8016adc:	491b      	ldr	r1, [pc, #108]	@ (8016b4c <atanf+0x1a4>)
 8016ade:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016ae2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016ae6:	edd3 6a00 	vldr	s13, [r3]
 8016aea:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016aee:	2d00      	cmp	r5, #0
 8016af0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016af4:	edd2 7a00 	vldr	s15, [r2]
 8016af8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016afc:	bfb8      	it	lt
 8016afe:	eef1 7a67 	vneglt.f32	s15, s15
 8016b02:	e760      	b.n	80169c6 <atanf+0x1e>
 8016b04:	bfc90fdb 	.word	0xbfc90fdb
 8016b08:	3fc90fdb 	.word	0x3fc90fdb
 8016b0c:	3edfffff 	.word	0x3edfffff
 8016b10:	7149f2ca 	.word	0x7149f2ca
 8016b14:	3f97ffff 	.word	0x3f97ffff
 8016b18:	3c8569d7 	.word	0x3c8569d7
 8016b1c:	3d4bda59 	.word	0x3d4bda59
 8016b20:	bd6ef16b 	.word	0xbd6ef16b
 8016b24:	3d886b35 	.word	0x3d886b35
 8016b28:	3dba2e6e 	.word	0x3dba2e6e
 8016b2c:	3e124925 	.word	0x3e124925
 8016b30:	3eaaaaab 	.word	0x3eaaaaab
 8016b34:	bd15a221 	.word	0xbd15a221
 8016b38:	bd9d8795 	.word	0xbd9d8795
 8016b3c:	bde38e38 	.word	0xbde38e38
 8016b40:	be4ccccd 	.word	0xbe4ccccd
 8016b44:	401bffff 	.word	0x401bffff
 8016b48:	08017e68 	.word	0x08017e68
 8016b4c:	08017e58 	.word	0x08017e58

08016b50 <fabsf>:
 8016b50:	ee10 3a10 	vmov	r3, s0
 8016b54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016b58:	ee00 3a10 	vmov	s0, r3
 8016b5c:	4770      	bx	lr
	...

08016b60 <scalbn>:
 8016b60:	b570      	push	{r4, r5, r6, lr}
 8016b62:	ec55 4b10 	vmov	r4, r5, d0
 8016b66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016b6a:	4606      	mov	r6, r0
 8016b6c:	462b      	mov	r3, r5
 8016b6e:	b991      	cbnz	r1, 8016b96 <scalbn+0x36>
 8016b70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016b74:	4323      	orrs	r3, r4
 8016b76:	d03b      	beq.n	8016bf0 <scalbn+0x90>
 8016b78:	4b33      	ldr	r3, [pc, #204]	@ (8016c48 <scalbn+0xe8>)
 8016b7a:	4620      	mov	r0, r4
 8016b7c:	4629      	mov	r1, r5
 8016b7e:	2200      	movs	r2, #0
 8016b80:	f7e9 fd72 	bl	8000668 <__aeabi_dmul>
 8016b84:	4b31      	ldr	r3, [pc, #196]	@ (8016c4c <scalbn+0xec>)
 8016b86:	429e      	cmp	r6, r3
 8016b88:	4604      	mov	r4, r0
 8016b8a:	460d      	mov	r5, r1
 8016b8c:	da0f      	bge.n	8016bae <scalbn+0x4e>
 8016b8e:	a326      	add	r3, pc, #152	@ (adr r3, 8016c28 <scalbn+0xc8>)
 8016b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b94:	e01e      	b.n	8016bd4 <scalbn+0x74>
 8016b96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016b9a:	4291      	cmp	r1, r2
 8016b9c:	d10b      	bne.n	8016bb6 <scalbn+0x56>
 8016b9e:	4622      	mov	r2, r4
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	4629      	mov	r1, r5
 8016ba4:	f7e9 fbaa 	bl	80002fc <__adddf3>
 8016ba8:	4604      	mov	r4, r0
 8016baa:	460d      	mov	r5, r1
 8016bac:	e020      	b.n	8016bf0 <scalbn+0x90>
 8016bae:	460b      	mov	r3, r1
 8016bb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016bb4:	3936      	subs	r1, #54	@ 0x36
 8016bb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016bba:	4296      	cmp	r6, r2
 8016bbc:	dd0d      	ble.n	8016bda <scalbn+0x7a>
 8016bbe:	2d00      	cmp	r5, #0
 8016bc0:	a11b      	add	r1, pc, #108	@ (adr r1, 8016c30 <scalbn+0xd0>)
 8016bc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bc6:	da02      	bge.n	8016bce <scalbn+0x6e>
 8016bc8:	a11b      	add	r1, pc, #108	@ (adr r1, 8016c38 <scalbn+0xd8>)
 8016bca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bce:	a318      	add	r3, pc, #96	@ (adr r3, 8016c30 <scalbn+0xd0>)
 8016bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bd4:	f7e9 fd48 	bl	8000668 <__aeabi_dmul>
 8016bd8:	e7e6      	b.n	8016ba8 <scalbn+0x48>
 8016bda:	1872      	adds	r2, r6, r1
 8016bdc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016be0:	428a      	cmp	r2, r1
 8016be2:	dcec      	bgt.n	8016bbe <scalbn+0x5e>
 8016be4:	2a00      	cmp	r2, #0
 8016be6:	dd06      	ble.n	8016bf6 <scalbn+0x96>
 8016be8:	f36f 531e 	bfc	r3, #20, #11
 8016bec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016bf0:	ec45 4b10 	vmov	d0, r4, r5
 8016bf4:	bd70      	pop	{r4, r5, r6, pc}
 8016bf6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8016bfa:	da08      	bge.n	8016c0e <scalbn+0xae>
 8016bfc:	2d00      	cmp	r5, #0
 8016bfe:	a10a      	add	r1, pc, #40	@ (adr r1, 8016c28 <scalbn+0xc8>)
 8016c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c04:	dac3      	bge.n	8016b8e <scalbn+0x2e>
 8016c06:	a10e      	add	r1, pc, #56	@ (adr r1, 8016c40 <scalbn+0xe0>)
 8016c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c0c:	e7bf      	b.n	8016b8e <scalbn+0x2e>
 8016c0e:	3236      	adds	r2, #54	@ 0x36
 8016c10:	f36f 531e 	bfc	r3, #20, #11
 8016c14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016c18:	4620      	mov	r0, r4
 8016c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8016c50 <scalbn+0xf0>)
 8016c1c:	4629      	mov	r1, r5
 8016c1e:	2200      	movs	r2, #0
 8016c20:	e7d8      	b.n	8016bd4 <scalbn+0x74>
 8016c22:	bf00      	nop
 8016c24:	f3af 8000 	nop.w
 8016c28:	c2f8f359 	.word	0xc2f8f359
 8016c2c:	01a56e1f 	.word	0x01a56e1f
 8016c30:	8800759c 	.word	0x8800759c
 8016c34:	7e37e43c 	.word	0x7e37e43c
 8016c38:	8800759c 	.word	0x8800759c
 8016c3c:	fe37e43c 	.word	0xfe37e43c
 8016c40:	c2f8f359 	.word	0xc2f8f359
 8016c44:	81a56e1f 	.word	0x81a56e1f
 8016c48:	43500000 	.word	0x43500000
 8016c4c:	ffff3cb0 	.word	0xffff3cb0
 8016c50:	3c900000 	.word	0x3c900000

08016c54 <with_errno>:
 8016c54:	b510      	push	{r4, lr}
 8016c56:	ed2d 8b02 	vpush	{d8}
 8016c5a:	eeb0 8a40 	vmov.f32	s16, s0
 8016c5e:	eef0 8a60 	vmov.f32	s17, s1
 8016c62:	4604      	mov	r4, r0
 8016c64:	f7fb fd5e 	bl	8012724 <__errno>
 8016c68:	eeb0 0a48 	vmov.f32	s0, s16
 8016c6c:	eef0 0a68 	vmov.f32	s1, s17
 8016c70:	ecbd 8b02 	vpop	{d8}
 8016c74:	6004      	str	r4, [r0, #0]
 8016c76:	bd10      	pop	{r4, pc}

08016c78 <xflow>:
 8016c78:	4603      	mov	r3, r0
 8016c7a:	b507      	push	{r0, r1, r2, lr}
 8016c7c:	ec51 0b10 	vmov	r0, r1, d0
 8016c80:	b183      	cbz	r3, 8016ca4 <xflow+0x2c>
 8016c82:	4602      	mov	r2, r0
 8016c84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016c88:	e9cd 2300 	strd	r2, r3, [sp]
 8016c8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c90:	f7e9 fcea 	bl	8000668 <__aeabi_dmul>
 8016c94:	ec41 0b10 	vmov	d0, r0, r1
 8016c98:	2022      	movs	r0, #34	@ 0x22
 8016c9a:	b003      	add	sp, #12
 8016c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ca0:	f7ff bfd8 	b.w	8016c54 <with_errno>
 8016ca4:	4602      	mov	r2, r0
 8016ca6:	460b      	mov	r3, r1
 8016ca8:	e7ee      	b.n	8016c88 <xflow+0x10>
 8016caa:	0000      	movs	r0, r0
 8016cac:	0000      	movs	r0, r0
	...

08016cb0 <__math_uflow>:
 8016cb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016cb8 <__math_uflow+0x8>
 8016cb4:	f7ff bfe0 	b.w	8016c78 <xflow>
 8016cb8:	00000000 	.word	0x00000000
 8016cbc:	10000000 	.word	0x10000000

08016cc0 <__math_oflow>:
 8016cc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016cc8 <__math_oflow+0x8>
 8016cc4:	f7ff bfd8 	b.w	8016c78 <xflow>
 8016cc8:	00000000 	.word	0x00000000
 8016ccc:	70000000 	.word	0x70000000

08016cd0 <__kernel_rem_pio2f>:
 8016cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cd4:	ed2d 8b04 	vpush	{d8-d9}
 8016cd8:	b0d9      	sub	sp, #356	@ 0x164
 8016cda:	4690      	mov	r8, r2
 8016cdc:	9001      	str	r0, [sp, #4]
 8016cde:	4ab6      	ldr	r2, [pc, #728]	@ (8016fb8 <__kernel_rem_pio2f+0x2e8>)
 8016ce0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8016ce2:	f118 0f04 	cmn.w	r8, #4
 8016ce6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8016cea:	460f      	mov	r7, r1
 8016cec:	f103 3bff 	add.w	fp, r3, #4294967295
 8016cf0:	db26      	blt.n	8016d40 <__kernel_rem_pio2f+0x70>
 8016cf2:	f1b8 0203 	subs.w	r2, r8, #3
 8016cf6:	bf48      	it	mi
 8016cf8:	f108 0204 	addmi.w	r2, r8, #4
 8016cfc:	10d2      	asrs	r2, r2, #3
 8016cfe:	1c55      	adds	r5, r2, #1
 8016d00:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8016d02:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8016fc8 <__kernel_rem_pio2f+0x2f8>
 8016d06:	00e8      	lsls	r0, r5, #3
 8016d08:	eba2 060b 	sub.w	r6, r2, fp
 8016d0c:	9002      	str	r0, [sp, #8]
 8016d0e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8016d12:	eb0a 0c0b 	add.w	ip, sl, fp
 8016d16:	ac1c      	add	r4, sp, #112	@ 0x70
 8016d18:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8016d1c:	2000      	movs	r0, #0
 8016d1e:	4560      	cmp	r0, ip
 8016d20:	dd10      	ble.n	8016d44 <__kernel_rem_pio2f+0x74>
 8016d22:	a91c      	add	r1, sp, #112	@ 0x70
 8016d24:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8016d28:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8016d2c:	2600      	movs	r6, #0
 8016d2e:	4556      	cmp	r6, sl
 8016d30:	dc24      	bgt.n	8016d7c <__kernel_rem_pio2f+0xac>
 8016d32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016d36:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8016fc8 <__kernel_rem_pio2f+0x2f8>
 8016d3a:	4684      	mov	ip, r0
 8016d3c:	2400      	movs	r4, #0
 8016d3e:	e016      	b.n	8016d6e <__kernel_rem_pio2f+0x9e>
 8016d40:	2200      	movs	r2, #0
 8016d42:	e7dc      	b.n	8016cfe <__kernel_rem_pio2f+0x2e>
 8016d44:	42c6      	cmn	r6, r0
 8016d46:	bf5d      	ittte	pl
 8016d48:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8016d4c:	ee07 1a90 	vmovpl	s15, r1
 8016d50:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8016d54:	eef0 7a47 	vmovmi.f32	s15, s14
 8016d58:	ece4 7a01 	vstmia	r4!, {s15}
 8016d5c:	3001      	adds	r0, #1
 8016d5e:	e7de      	b.n	8016d1e <__kernel_rem_pio2f+0x4e>
 8016d60:	ecfe 6a01 	vldmia	lr!, {s13}
 8016d64:	ed3c 7a01 	vldmdb	ip!, {s14}
 8016d68:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016d6c:	3401      	adds	r4, #1
 8016d6e:	455c      	cmp	r4, fp
 8016d70:	ddf6      	ble.n	8016d60 <__kernel_rem_pio2f+0x90>
 8016d72:	ece9 7a01 	vstmia	r9!, {s15}
 8016d76:	3601      	adds	r6, #1
 8016d78:	3004      	adds	r0, #4
 8016d7a:	e7d8      	b.n	8016d2e <__kernel_rem_pio2f+0x5e>
 8016d7c:	a908      	add	r1, sp, #32
 8016d7e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016d82:	9104      	str	r1, [sp, #16]
 8016d84:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8016d86:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8016fc4 <__kernel_rem_pio2f+0x2f4>
 8016d8a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8016fc0 <__kernel_rem_pio2f+0x2f0>
 8016d8e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016d92:	9203      	str	r2, [sp, #12]
 8016d94:	4654      	mov	r4, sl
 8016d96:	00a2      	lsls	r2, r4, #2
 8016d98:	9205      	str	r2, [sp, #20]
 8016d9a:	aa58      	add	r2, sp, #352	@ 0x160
 8016d9c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8016da0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8016da4:	a944      	add	r1, sp, #272	@ 0x110
 8016da6:	aa08      	add	r2, sp, #32
 8016da8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8016dac:	4694      	mov	ip, r2
 8016dae:	4626      	mov	r6, r4
 8016db0:	2e00      	cmp	r6, #0
 8016db2:	dc4c      	bgt.n	8016e4e <__kernel_rem_pio2f+0x17e>
 8016db4:	4628      	mov	r0, r5
 8016db6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016dba:	f000 f9f1 	bl	80171a0 <scalbnf>
 8016dbe:	eeb0 8a40 	vmov.f32	s16, s0
 8016dc2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8016dc6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016dca:	f000 fa4f 	bl	801726c <floorf>
 8016dce:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8016dd2:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016dd6:	2d00      	cmp	r5, #0
 8016dd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016ddc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016de0:	ee17 9a90 	vmov	r9, s15
 8016de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016de8:	ee38 8a67 	vsub.f32	s16, s16, s15
 8016dec:	dd41      	ble.n	8016e72 <__kernel_rem_pio2f+0x1a2>
 8016dee:	f104 3cff 	add.w	ip, r4, #4294967295
 8016df2:	a908      	add	r1, sp, #32
 8016df4:	f1c5 0e08 	rsb	lr, r5, #8
 8016df8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8016dfc:	fa46 f00e 	asr.w	r0, r6, lr
 8016e00:	4481      	add	r9, r0
 8016e02:	fa00 f00e 	lsl.w	r0, r0, lr
 8016e06:	1a36      	subs	r6, r6, r0
 8016e08:	f1c5 0007 	rsb	r0, r5, #7
 8016e0c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8016e10:	4106      	asrs	r6, r0
 8016e12:	2e00      	cmp	r6, #0
 8016e14:	dd3c      	ble.n	8016e90 <__kernel_rem_pio2f+0x1c0>
 8016e16:	f04f 0e00 	mov.w	lr, #0
 8016e1a:	f109 0901 	add.w	r9, r9, #1
 8016e1e:	4670      	mov	r0, lr
 8016e20:	4574      	cmp	r4, lr
 8016e22:	dc68      	bgt.n	8016ef6 <__kernel_rem_pio2f+0x226>
 8016e24:	2d00      	cmp	r5, #0
 8016e26:	dd03      	ble.n	8016e30 <__kernel_rem_pio2f+0x160>
 8016e28:	2d01      	cmp	r5, #1
 8016e2a:	d074      	beq.n	8016f16 <__kernel_rem_pio2f+0x246>
 8016e2c:	2d02      	cmp	r5, #2
 8016e2e:	d07d      	beq.n	8016f2c <__kernel_rem_pio2f+0x25c>
 8016e30:	2e02      	cmp	r6, #2
 8016e32:	d12d      	bne.n	8016e90 <__kernel_rem_pio2f+0x1c0>
 8016e34:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8016e38:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016e3c:	b340      	cbz	r0, 8016e90 <__kernel_rem_pio2f+0x1c0>
 8016e3e:	4628      	mov	r0, r5
 8016e40:	9306      	str	r3, [sp, #24]
 8016e42:	f000 f9ad 	bl	80171a0 <scalbnf>
 8016e46:	9b06      	ldr	r3, [sp, #24]
 8016e48:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016e4c:	e020      	b.n	8016e90 <__kernel_rem_pio2f+0x1c0>
 8016e4e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8016e52:	3e01      	subs	r6, #1
 8016e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e5c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8016e60:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016e64:	ecac 0a01 	vstmia	ip!, {s0}
 8016e68:	ed30 0a01 	vldmdb	r0!, {s0}
 8016e6c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016e70:	e79e      	b.n	8016db0 <__kernel_rem_pio2f+0xe0>
 8016e72:	d105      	bne.n	8016e80 <__kernel_rem_pio2f+0x1b0>
 8016e74:	1e60      	subs	r0, r4, #1
 8016e76:	a908      	add	r1, sp, #32
 8016e78:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8016e7c:	11f6      	asrs	r6, r6, #7
 8016e7e:	e7c8      	b.n	8016e12 <__kernel_rem_pio2f+0x142>
 8016e80:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016e84:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e8c:	da31      	bge.n	8016ef2 <__kernel_rem_pio2f+0x222>
 8016e8e:	2600      	movs	r6, #0
 8016e90:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e98:	f040 8098 	bne.w	8016fcc <__kernel_rem_pio2f+0x2fc>
 8016e9c:	1e60      	subs	r0, r4, #1
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	4550      	cmp	r0, sl
 8016ea2:	da4b      	bge.n	8016f3c <__kernel_rem_pio2f+0x26c>
 8016ea4:	2a00      	cmp	r2, #0
 8016ea6:	d065      	beq.n	8016f74 <__kernel_rem_pio2f+0x2a4>
 8016ea8:	3c01      	subs	r4, #1
 8016eaa:	ab08      	add	r3, sp, #32
 8016eac:	3d08      	subs	r5, #8
 8016eae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d0f8      	beq.n	8016ea8 <__kernel_rem_pio2f+0x1d8>
 8016eb6:	4628      	mov	r0, r5
 8016eb8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8016ebc:	f000 f970 	bl	80171a0 <scalbnf>
 8016ec0:	1c63      	adds	r3, r4, #1
 8016ec2:	aa44      	add	r2, sp, #272	@ 0x110
 8016ec4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8016fc4 <__kernel_rem_pio2f+0x2f4>
 8016ec8:	0099      	lsls	r1, r3, #2
 8016eca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016ece:	4623      	mov	r3, r4
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	f280 80a9 	bge.w	8017028 <__kernel_rem_pio2f+0x358>
 8016ed6:	4623      	mov	r3, r4
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	f2c0 80c7 	blt.w	801706c <__kernel_rem_pio2f+0x39c>
 8016ede:	aa44      	add	r2, sp, #272	@ 0x110
 8016ee0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8016ee4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8016fbc <__kernel_rem_pio2f+0x2ec>
 8016ee8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8016fc8 <__kernel_rem_pio2f+0x2f8>
 8016eec:	2000      	movs	r0, #0
 8016eee:	1ae2      	subs	r2, r4, r3
 8016ef0:	e0b1      	b.n	8017056 <__kernel_rem_pio2f+0x386>
 8016ef2:	2602      	movs	r6, #2
 8016ef4:	e78f      	b.n	8016e16 <__kernel_rem_pio2f+0x146>
 8016ef6:	f852 1b04 	ldr.w	r1, [r2], #4
 8016efa:	b948      	cbnz	r0, 8016f10 <__kernel_rem_pio2f+0x240>
 8016efc:	b121      	cbz	r1, 8016f08 <__kernel_rem_pio2f+0x238>
 8016efe:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8016f02:	f842 1c04 	str.w	r1, [r2, #-4]
 8016f06:	2101      	movs	r1, #1
 8016f08:	f10e 0e01 	add.w	lr, lr, #1
 8016f0c:	4608      	mov	r0, r1
 8016f0e:	e787      	b.n	8016e20 <__kernel_rem_pio2f+0x150>
 8016f10:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8016f14:	e7f5      	b.n	8016f02 <__kernel_rem_pio2f+0x232>
 8016f16:	f104 3cff 	add.w	ip, r4, #4294967295
 8016f1a:	aa08      	add	r2, sp, #32
 8016f1c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016f20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8016f24:	a908      	add	r1, sp, #32
 8016f26:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8016f2a:	e781      	b.n	8016e30 <__kernel_rem_pio2f+0x160>
 8016f2c:	f104 3cff 	add.w	ip, r4, #4294967295
 8016f30:	aa08      	add	r2, sp, #32
 8016f32:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016f36:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8016f3a:	e7f3      	b.n	8016f24 <__kernel_rem_pio2f+0x254>
 8016f3c:	a908      	add	r1, sp, #32
 8016f3e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8016f42:	3801      	subs	r0, #1
 8016f44:	430a      	orrs	r2, r1
 8016f46:	e7ab      	b.n	8016ea0 <__kernel_rem_pio2f+0x1d0>
 8016f48:	3201      	adds	r2, #1
 8016f4a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8016f4e:	2e00      	cmp	r6, #0
 8016f50:	d0fa      	beq.n	8016f48 <__kernel_rem_pio2f+0x278>
 8016f52:	9905      	ldr	r1, [sp, #20]
 8016f54:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8016f58:	eb0d 0001 	add.w	r0, sp, r1
 8016f5c:	18e6      	adds	r6, r4, r3
 8016f5e:	a91c      	add	r1, sp, #112	@ 0x70
 8016f60:	f104 0c01 	add.w	ip, r4, #1
 8016f64:	384c      	subs	r0, #76	@ 0x4c
 8016f66:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8016f6a:	4422      	add	r2, r4
 8016f6c:	4562      	cmp	r2, ip
 8016f6e:	da04      	bge.n	8016f7a <__kernel_rem_pio2f+0x2aa>
 8016f70:	4614      	mov	r4, r2
 8016f72:	e710      	b.n	8016d96 <__kernel_rem_pio2f+0xc6>
 8016f74:	9804      	ldr	r0, [sp, #16]
 8016f76:	2201      	movs	r2, #1
 8016f78:	e7e7      	b.n	8016f4a <__kernel_rem_pio2f+0x27a>
 8016f7a:	9903      	ldr	r1, [sp, #12]
 8016f7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016f80:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8016f84:	9105      	str	r1, [sp, #20]
 8016f86:	ee07 1a90 	vmov	s15, r1
 8016f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f8e:	2400      	movs	r4, #0
 8016f90:	ece6 7a01 	vstmia	r6!, {s15}
 8016f94:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8016fc8 <__kernel_rem_pio2f+0x2f8>
 8016f98:	46b1      	mov	r9, r6
 8016f9a:	455c      	cmp	r4, fp
 8016f9c:	dd04      	ble.n	8016fa8 <__kernel_rem_pio2f+0x2d8>
 8016f9e:	ece0 7a01 	vstmia	r0!, {s15}
 8016fa2:	f10c 0c01 	add.w	ip, ip, #1
 8016fa6:	e7e1      	b.n	8016f6c <__kernel_rem_pio2f+0x29c>
 8016fa8:	ecfe 6a01 	vldmia	lr!, {s13}
 8016fac:	ed39 7a01 	vldmdb	r9!, {s14}
 8016fb0:	3401      	adds	r4, #1
 8016fb2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016fb6:	e7f0      	b.n	8016f9a <__kernel_rem_pio2f+0x2ca>
 8016fb8:	08017ea4 	.word	0x08017ea4
 8016fbc:	08017e78 	.word	0x08017e78
 8016fc0:	43800000 	.word	0x43800000
 8016fc4:	3b800000 	.word	0x3b800000
 8016fc8:	00000000 	.word	0x00000000
 8016fcc:	9b02      	ldr	r3, [sp, #8]
 8016fce:	eeb0 0a48 	vmov.f32	s0, s16
 8016fd2:	eba3 0008 	sub.w	r0, r3, r8
 8016fd6:	f000 f8e3 	bl	80171a0 <scalbnf>
 8016fda:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8016fc0 <__kernel_rem_pio2f+0x2f0>
 8016fde:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fe6:	db19      	blt.n	801701c <__kernel_rem_pio2f+0x34c>
 8016fe8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8016fc4 <__kernel_rem_pio2f+0x2f4>
 8016fec:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016ff0:	aa08      	add	r2, sp, #32
 8016ff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016ff6:	3508      	adds	r5, #8
 8016ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ffc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017004:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017008:	ee10 3a10 	vmov	r3, s0
 801700c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8017010:	ee17 3a90 	vmov	r3, s15
 8017014:	3401      	adds	r4, #1
 8017016:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801701a:	e74c      	b.n	8016eb6 <__kernel_rem_pio2f+0x1e6>
 801701c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017020:	aa08      	add	r2, sp, #32
 8017022:	ee10 3a10 	vmov	r3, s0
 8017026:	e7f6      	b.n	8017016 <__kernel_rem_pio2f+0x346>
 8017028:	a808      	add	r0, sp, #32
 801702a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801702e:	9001      	str	r0, [sp, #4]
 8017030:	ee07 0a90 	vmov	s15, r0
 8017034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017038:	3b01      	subs	r3, #1
 801703a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801703e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017042:	ed62 7a01 	vstmdb	r2!, {s15}
 8017046:	e743      	b.n	8016ed0 <__kernel_rem_pio2f+0x200>
 8017048:	ecfc 6a01 	vldmia	ip!, {s13}
 801704c:	ecb5 7a01 	vldmia	r5!, {s14}
 8017050:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017054:	3001      	adds	r0, #1
 8017056:	4550      	cmp	r0, sl
 8017058:	dc01      	bgt.n	801705e <__kernel_rem_pio2f+0x38e>
 801705a:	4290      	cmp	r0, r2
 801705c:	ddf4      	ble.n	8017048 <__kernel_rem_pio2f+0x378>
 801705e:	a858      	add	r0, sp, #352	@ 0x160
 8017060:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8017064:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8017068:	3b01      	subs	r3, #1
 801706a:	e735      	b.n	8016ed8 <__kernel_rem_pio2f+0x208>
 801706c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801706e:	2b02      	cmp	r3, #2
 8017070:	dc09      	bgt.n	8017086 <__kernel_rem_pio2f+0x3b6>
 8017072:	2b00      	cmp	r3, #0
 8017074:	dc27      	bgt.n	80170c6 <__kernel_rem_pio2f+0x3f6>
 8017076:	d040      	beq.n	80170fa <__kernel_rem_pio2f+0x42a>
 8017078:	f009 0007 	and.w	r0, r9, #7
 801707c:	b059      	add	sp, #356	@ 0x164
 801707e:	ecbd 8b04 	vpop	{d8-d9}
 8017082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017086:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8017088:	2b03      	cmp	r3, #3
 801708a:	d1f5      	bne.n	8017078 <__kernel_rem_pio2f+0x3a8>
 801708c:	aa30      	add	r2, sp, #192	@ 0xc0
 801708e:	1f0b      	subs	r3, r1, #4
 8017090:	4413      	add	r3, r2
 8017092:	461a      	mov	r2, r3
 8017094:	4620      	mov	r0, r4
 8017096:	2800      	cmp	r0, #0
 8017098:	dc50      	bgt.n	801713c <__kernel_rem_pio2f+0x46c>
 801709a:	4622      	mov	r2, r4
 801709c:	2a01      	cmp	r2, #1
 801709e:	dc5d      	bgt.n	801715c <__kernel_rem_pio2f+0x48c>
 80170a0:	ab30      	add	r3, sp, #192	@ 0xc0
 80170a2:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8016fc8 <__kernel_rem_pio2f+0x2f8>
 80170a6:	440b      	add	r3, r1
 80170a8:	2c01      	cmp	r4, #1
 80170aa:	dc67      	bgt.n	801717c <__kernel_rem_pio2f+0x4ac>
 80170ac:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80170b0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80170b4:	2e00      	cmp	r6, #0
 80170b6:	d167      	bne.n	8017188 <__kernel_rem_pio2f+0x4b8>
 80170b8:	edc7 6a00 	vstr	s13, [r7]
 80170bc:	ed87 7a01 	vstr	s14, [r7, #4]
 80170c0:	edc7 7a02 	vstr	s15, [r7, #8]
 80170c4:	e7d8      	b.n	8017078 <__kernel_rem_pio2f+0x3a8>
 80170c6:	ab30      	add	r3, sp, #192	@ 0xc0
 80170c8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8016fc8 <__kernel_rem_pio2f+0x2f8>
 80170cc:	440b      	add	r3, r1
 80170ce:	4622      	mov	r2, r4
 80170d0:	2a00      	cmp	r2, #0
 80170d2:	da24      	bge.n	801711e <__kernel_rem_pio2f+0x44e>
 80170d4:	b34e      	cbz	r6, 801712a <__kernel_rem_pio2f+0x45a>
 80170d6:	eef1 7a47 	vneg.f32	s15, s14
 80170da:	edc7 7a00 	vstr	s15, [r7]
 80170de:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80170e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80170e6:	aa31      	add	r2, sp, #196	@ 0xc4
 80170e8:	2301      	movs	r3, #1
 80170ea:	429c      	cmp	r4, r3
 80170ec:	da20      	bge.n	8017130 <__kernel_rem_pio2f+0x460>
 80170ee:	b10e      	cbz	r6, 80170f4 <__kernel_rem_pio2f+0x424>
 80170f0:	eef1 7a67 	vneg.f32	s15, s15
 80170f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80170f8:	e7be      	b.n	8017078 <__kernel_rem_pio2f+0x3a8>
 80170fa:	ab30      	add	r3, sp, #192	@ 0xc0
 80170fc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8016fc8 <__kernel_rem_pio2f+0x2f8>
 8017100:	440b      	add	r3, r1
 8017102:	2c00      	cmp	r4, #0
 8017104:	da05      	bge.n	8017112 <__kernel_rem_pio2f+0x442>
 8017106:	b10e      	cbz	r6, 801710c <__kernel_rem_pio2f+0x43c>
 8017108:	eef1 7a67 	vneg.f32	s15, s15
 801710c:	edc7 7a00 	vstr	s15, [r7]
 8017110:	e7b2      	b.n	8017078 <__kernel_rem_pio2f+0x3a8>
 8017112:	ed33 7a01 	vldmdb	r3!, {s14}
 8017116:	3c01      	subs	r4, #1
 8017118:	ee77 7a87 	vadd.f32	s15, s15, s14
 801711c:	e7f1      	b.n	8017102 <__kernel_rem_pio2f+0x432>
 801711e:	ed73 7a01 	vldmdb	r3!, {s15}
 8017122:	3a01      	subs	r2, #1
 8017124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017128:	e7d2      	b.n	80170d0 <__kernel_rem_pio2f+0x400>
 801712a:	eef0 7a47 	vmov.f32	s15, s14
 801712e:	e7d4      	b.n	80170da <__kernel_rem_pio2f+0x40a>
 8017130:	ecb2 7a01 	vldmia	r2!, {s14}
 8017134:	3301      	adds	r3, #1
 8017136:	ee77 7a87 	vadd.f32	s15, s15, s14
 801713a:	e7d6      	b.n	80170ea <__kernel_rem_pio2f+0x41a>
 801713c:	ed72 7a01 	vldmdb	r2!, {s15}
 8017140:	edd2 6a01 	vldr	s13, [r2, #4]
 8017144:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017148:	3801      	subs	r0, #1
 801714a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801714e:	ed82 7a00 	vstr	s14, [r2]
 8017152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017156:	edc2 7a01 	vstr	s15, [r2, #4]
 801715a:	e79c      	b.n	8017096 <__kernel_rem_pio2f+0x3c6>
 801715c:	ed73 7a01 	vldmdb	r3!, {s15}
 8017160:	edd3 6a01 	vldr	s13, [r3, #4]
 8017164:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017168:	3a01      	subs	r2, #1
 801716a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801716e:	ed83 7a00 	vstr	s14, [r3]
 8017172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017176:	edc3 7a01 	vstr	s15, [r3, #4]
 801717a:	e78f      	b.n	801709c <__kernel_rem_pio2f+0x3cc>
 801717c:	ed33 7a01 	vldmdb	r3!, {s14}
 8017180:	3c01      	subs	r4, #1
 8017182:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017186:	e78f      	b.n	80170a8 <__kernel_rem_pio2f+0x3d8>
 8017188:	eef1 6a66 	vneg.f32	s13, s13
 801718c:	eeb1 7a47 	vneg.f32	s14, s14
 8017190:	edc7 6a00 	vstr	s13, [r7]
 8017194:	ed87 7a01 	vstr	s14, [r7, #4]
 8017198:	eef1 7a67 	vneg.f32	s15, s15
 801719c:	e790      	b.n	80170c0 <__kernel_rem_pio2f+0x3f0>
 801719e:	bf00      	nop

080171a0 <scalbnf>:
 80171a0:	ee10 3a10 	vmov	r3, s0
 80171a4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80171a8:	d02b      	beq.n	8017202 <scalbnf+0x62>
 80171aa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80171ae:	d302      	bcc.n	80171b6 <scalbnf+0x16>
 80171b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80171b4:	4770      	bx	lr
 80171b6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80171ba:	d123      	bne.n	8017204 <scalbnf+0x64>
 80171bc:	4b24      	ldr	r3, [pc, #144]	@ (8017250 <scalbnf+0xb0>)
 80171be:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8017254 <scalbnf+0xb4>
 80171c2:	4298      	cmp	r0, r3
 80171c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80171c8:	db17      	blt.n	80171fa <scalbnf+0x5a>
 80171ca:	ee10 3a10 	vmov	r3, s0
 80171ce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80171d2:	3a19      	subs	r2, #25
 80171d4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80171d8:	4288      	cmp	r0, r1
 80171da:	dd15      	ble.n	8017208 <scalbnf+0x68>
 80171dc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8017258 <scalbnf+0xb8>
 80171e0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801725c <scalbnf+0xbc>
 80171e4:	ee10 3a10 	vmov	r3, s0
 80171e8:	eeb0 7a67 	vmov.f32	s14, s15
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	bfb8      	it	lt
 80171f0:	eef0 7a66 	vmovlt.f32	s15, s13
 80171f4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80171f8:	4770      	bx	lr
 80171fa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8017260 <scalbnf+0xc0>
 80171fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017202:	4770      	bx	lr
 8017204:	0dd2      	lsrs	r2, r2, #23
 8017206:	e7e5      	b.n	80171d4 <scalbnf+0x34>
 8017208:	4410      	add	r0, r2
 801720a:	28fe      	cmp	r0, #254	@ 0xfe
 801720c:	dce6      	bgt.n	80171dc <scalbnf+0x3c>
 801720e:	2800      	cmp	r0, #0
 8017210:	dd06      	ble.n	8017220 <scalbnf+0x80>
 8017212:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017216:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801721a:	ee00 3a10 	vmov	s0, r3
 801721e:	4770      	bx	lr
 8017220:	f110 0f16 	cmn.w	r0, #22
 8017224:	da09      	bge.n	801723a <scalbnf+0x9a>
 8017226:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8017260 <scalbnf+0xc0>
 801722a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8017264 <scalbnf+0xc4>
 801722e:	ee10 3a10 	vmov	r3, s0
 8017232:	eeb0 7a67 	vmov.f32	s14, s15
 8017236:	2b00      	cmp	r3, #0
 8017238:	e7d9      	b.n	80171ee <scalbnf+0x4e>
 801723a:	3019      	adds	r0, #25
 801723c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017240:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8017244:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8017268 <scalbnf+0xc8>
 8017248:	ee07 3a90 	vmov	s15, r3
 801724c:	e7d7      	b.n	80171fe <scalbnf+0x5e>
 801724e:	bf00      	nop
 8017250:	ffff3cb0 	.word	0xffff3cb0
 8017254:	4c000000 	.word	0x4c000000
 8017258:	7149f2ca 	.word	0x7149f2ca
 801725c:	f149f2ca 	.word	0xf149f2ca
 8017260:	0da24260 	.word	0x0da24260
 8017264:	8da24260 	.word	0x8da24260
 8017268:	33000000 	.word	0x33000000

0801726c <floorf>:
 801726c:	ee10 3a10 	vmov	r3, s0
 8017270:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017274:	3a7f      	subs	r2, #127	@ 0x7f
 8017276:	2a16      	cmp	r2, #22
 8017278:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801727c:	dc2b      	bgt.n	80172d6 <floorf+0x6a>
 801727e:	2a00      	cmp	r2, #0
 8017280:	da12      	bge.n	80172a8 <floorf+0x3c>
 8017282:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80172e8 <floorf+0x7c>
 8017286:	ee30 0a27 	vadd.f32	s0, s0, s15
 801728a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017292:	dd06      	ble.n	80172a2 <floorf+0x36>
 8017294:	2b00      	cmp	r3, #0
 8017296:	da24      	bge.n	80172e2 <floorf+0x76>
 8017298:	2900      	cmp	r1, #0
 801729a:	4b14      	ldr	r3, [pc, #80]	@ (80172ec <floorf+0x80>)
 801729c:	bf08      	it	eq
 801729e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80172a2:	ee00 3a10 	vmov	s0, r3
 80172a6:	4770      	bx	lr
 80172a8:	4911      	ldr	r1, [pc, #68]	@ (80172f0 <floorf+0x84>)
 80172aa:	4111      	asrs	r1, r2
 80172ac:	420b      	tst	r3, r1
 80172ae:	d0fa      	beq.n	80172a6 <floorf+0x3a>
 80172b0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80172e8 <floorf+0x7c>
 80172b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80172b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80172bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172c0:	ddef      	ble.n	80172a2 <floorf+0x36>
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	bfbe      	ittt	lt
 80172c6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80172ca:	fa40 f202 	asrlt.w	r2, r0, r2
 80172ce:	189b      	addlt	r3, r3, r2
 80172d0:	ea23 0301 	bic.w	r3, r3, r1
 80172d4:	e7e5      	b.n	80172a2 <floorf+0x36>
 80172d6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80172da:	d3e4      	bcc.n	80172a6 <floorf+0x3a>
 80172dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80172e0:	4770      	bx	lr
 80172e2:	2300      	movs	r3, #0
 80172e4:	e7dd      	b.n	80172a2 <floorf+0x36>
 80172e6:	bf00      	nop
 80172e8:	7149f2ca 	.word	0x7149f2ca
 80172ec:	bf800000 	.word	0xbf800000
 80172f0:	007fffff 	.word	0x007fffff

080172f4 <_init>:
 80172f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172f6:	bf00      	nop
 80172f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172fa:	bc08      	pop	{r3}
 80172fc:	469e      	mov	lr, r3
 80172fe:	4770      	bx	lr

08017300 <_fini>:
 8017300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017302:	bf00      	nop
 8017304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017306:	bc08      	pop	{r3}
 8017308:	469e      	mov	lr, r3
 801730a:	4770      	bx	lr
