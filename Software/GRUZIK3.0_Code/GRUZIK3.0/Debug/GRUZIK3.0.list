
GRUZIK3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f160  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800f340  0800f340  00010340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8fc  0800f8fc  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8fc  0800f8fc  000108fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f904  0800f904  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f904  0800f904  00010904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f908  0800f908  00010908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800f90c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  200001d8  0800fae4  000111d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  0800fae4  00011964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021f68  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004658  00000000  00000000  00033170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  000377c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001670  00000000  00000000  000394c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ac1  00000000  00000000  0003ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002631c  00000000  00000000  000405f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ae9d  00000000  00000000  0006690d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001817aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f94  00000000  00000000  001817f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0018a784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f328 	.word	0x0800f328

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800f328 	.word	0x0800f328

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <LowPassFilter_Init>:
 */
#include "main.h"
#include"LowPassFilter.h"

void LowPassFilter_Init(LowPassFilter_t *LPF, float alpha)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	ed87 0a00 	vstr	s0, [r7]
	LPF->alpha = alpha;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LowPassFilter_Update>:
float LowPassFilter_Update(LowPassFilter_t *LPF, float input)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	ed87 0a00 	vstr	s0, [r7]
	/*Standard low pass filter*/
	LPF->output = LPF->alpha * input + (1.0f - LPF->alpha) * LPF->output;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	ed93 7a00 	vldr	s14, [r3]
 8001084:	edd7 7a00 	vldr	s15, [r7]
 8001088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001096:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	edd3 7a01 	vldr	s15, [r3, #4]
 80010a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edc3 7a01 	vstr	s15, [r3, #4]

	/*IIR filter*/
	//LPF->output = (1.0f - LPF->alpha) * input + LPF->alpha * LPF->output;

	return LPF->output;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	ee07 3a90 	vmov	s15, r3
}
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <RB_Write>:
 */
#include "main.h"
#include "RingBuffer.h"

RB_Status RB_Write(RingBuffer_t *Buf, uint8_t value)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	425a      	negs	r2, r3
 80010d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010dc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80010e0:	bf58      	it	pl
 80010e2:	4253      	negpl	r3, r2
 80010e4:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buf->Tail)
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	885b      	ldrh	r3, [r3, #2]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d101      	bne.n	80010f6 <RB_Write+0x32>
	{
		return RB_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00b      	b.n	800110e <RB_Write+0x4a>
	}

	Buf->Buffer[Buf->Head] = value;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	78fa      	ldrb	r2, [r7, #3]
 8001102:	711a      	strb	r2, [r3, #4]

	Buf->Head = HeadTmp;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	b29a      	uxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <RB_Read>:

RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *value)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
	if(Buf->Head == Buf->Tail)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	881a      	ldrh	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	885b      	ldrh	r3, [r3, #2]
 800112c:	429a      	cmp	r2, r3
 800112e:	d101      	bne.n	8001134 <RB_Read+0x1a>
	{
		return RB_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e015      	b.n	8001160 <RB_Read+0x46>
	}

	*value = Buf->Buffer[Buf->Tail];
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	885b      	ldrh	r3, [r3, #2]
 8001138:	461a      	mov	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	791a      	ldrb	r2, [r3, #4]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	701a      	strb	r2, [r3, #0]

	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	885b      	ldrh	r3, [r3, #2]
 8001148:	3301      	adds	r3, #1
 800114a:	425a      	negs	r2, r3
 800114c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001150:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001154:	bf58      	it	pl
 8001156:	4253      	negpl	r3, r2
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <Parser_TakeLine>:
#include "SimpleParser.h"
#include "Line_Follower.h"
char My_Name[32] = "GRUZIK3.0";

void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *ReceivedData)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	uint8_t Tmp;
	uint8_t i = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
	do
	{
		RB_Read(Buf, &Tmp);
 800117a:	f107 030e 	add.w	r3, r7, #14
 800117e:	4619      	mov	r1, r3
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ffca 	bl	800111a <RB_Read>

		if(Tmp == ENDLINE)
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	2b0a      	cmp	r3, #10
 800118a:	d105      	bne.n	8001198 <Parser_TakeLine+0x2c>
		{
			ReceivedData[i] = 0;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	4413      	add	r3, r2
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e004      	b.n	80011a2 <Parser_TakeLine+0x36>

		}

		else
		{
			ReceivedData[i] = Tmp;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	4413      	add	r3, r2
 800119e:	7bba      	ldrb	r2, [r7, #14]
 80011a0:	701a      	strb	r2, [r3, #0]
		}
		i++;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	3301      	adds	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]

	} while(Tmp != ENDLINE);
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	2b0a      	cmp	r3, #10
 80011ac:	d1e5      	bne.n	800117a <Parser_TakeLine+0xe>

}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <kp_change>:

static void kp_change(LineFollower_t *LF)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80011c0:	490f      	ldr	r1, [pc, #60]	@ (8001200 <kp_change+0x48>)
 80011c2:	2000      	movs	r0, #0
 80011c4:	f00b fb20 	bl	800c808 <strtok>
 80011c8:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d011      	beq.n	80011f6 <kp_change+0x3e>
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff f884 	bl	80002e0 <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b1f      	cmp	r3, #31
 80011dc:	d80b      	bhi.n	80011f6 <kp_change+0x3e>
	{
		LF->Kp = atof(ParsePointer);
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f009 ff66 	bl	800b0b0 <atof>
 80011e4:	ec53 2b10 	vmov	r2, r3, d0
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fd34 	bl	8000c58 <__aeabi_d2f>
 80011f0:	4602      	mov	r2, r0
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
	}

}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	0800f340 	.word	0x0800f340

08001204 <kd_change>:
static void kd_change(LineFollower_t *LF)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 800120c:	490f      	ldr	r1, [pc, #60]	@ (800124c <kd_change+0x48>)
 800120e:	2000      	movs	r0, #0
 8001210:	f00b fafa 	bl	800c808 <strtok>
 8001214:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d011      	beq.n	8001242 <kd_change+0x3e>
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff f85e 	bl	80002e0 <strlen>
 8001224:	4603      	mov	r3, r0
 8001226:	2b1f      	cmp	r3, #31
 8001228:	d80b      	bhi.n	8001242 <kd_change+0x3e>
	{
		LF->Kd = atof(ParsePointer);
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f009 ff40 	bl	800b0b0 <atof>
 8001230:	ec53 2b10 	vmov	r2, r3, d0
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fd0e 	bl	8000c58 <__aeabi_d2f>
 800123c:	4602      	mov	r2, r0
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	605a      	str	r2, [r3, #4]
	}
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	0800f340 	.word	0x0800f340

08001250 <Base_speed_change>:
static void Base_speed_change(LineFollower_t *LF)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001258:	4915      	ldr	r1, [pc, #84]	@ (80012b0 <Base_speed_change+0x60>)
 800125a:	2000      	movs	r0, #0
 800125c:	f00b fad4 	bl	800c808 <strtok>
 8001260:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d01d      	beq.n	80012a6 <Base_speed_change+0x56>
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff f838 	bl	80002e0 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	2b1f      	cmp	r3, #31
 8001274:	d817      	bhi.n	80012a6 <Base_speed_change+0x56>
	{
		LF->Base_speed_R = atof(ParsePointer);
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f009 ff1a 	bl	800b0b0 <atof>
 800127c:	ec53 2b10 	vmov	r2, r3, d0
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fca0 	bl	8000bc8 <__aeabi_d2iz>
 8001288:	4602      	mov	r2, r0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	609a      	str	r2, [r3, #8]
		LF->Base_speed_L = atof(ParsePointer);
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f009 ff0e 	bl	800b0b0 <atof>
 8001294:	ec53 2b10 	vmov	r2, r3, d0
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fc94 	bl	8000bc8 <__aeabi_d2iz>
 80012a0:	4602      	mov	r2, r0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60da      	str	r2, [r3, #12]
	}
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	0800f340 	.word	0x0800f340

080012b4 <Max_speed_change>:

static void Max_speed_change(LineFollower_t *LF)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80012bc:	4915      	ldr	r1, [pc, #84]	@ (8001314 <Max_speed_change+0x60>)
 80012be:	2000      	movs	r0, #0
 80012c0:	f00b faa2 	bl	800c808 <strtok>
 80012c4:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d01d      	beq.n	800130a <Max_speed_change+0x56>
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff f806 	bl	80002e0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b1f      	cmp	r3, #31
 80012d8:	d817      	bhi.n	800130a <Max_speed_change+0x56>
	{
		LF->Max_speed_R = atof(ParsePointer);
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f009 fee8 	bl	800b0b0 <atof>
 80012e0:	ec53 2b10 	vmov	r2, r3, d0
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc6e 	bl	8000bc8 <__aeabi_d2iz>
 80012ec:	4602      	mov	r2, r0
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	611a      	str	r2, [r3, #16]
		LF->Max_speed_L = atof(ParsePointer);
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f009 fedc 	bl	800b0b0 <atof>
 80012f8:	ec53 2b10 	vmov	r2, r3, d0
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc62 	bl	8000bc8 <__aeabi_d2iz>
 8001304:	4602      	mov	r2, r0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	615a      	str	r2, [r3, #20]
	}
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	0800f340 	.word	0x0800f340

08001318 <Sharp_bend_speed_right_change>:
static void Sharp_bend_speed_right_change(LineFollower_t *LF)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001320:	490f      	ldr	r1, [pc, #60]	@ (8001360 <Sharp_bend_speed_right_change+0x48>)
 8001322:	2000      	movs	r0, #0
 8001324:	f00b fa70 	bl	800c808 <strtok>
 8001328:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d011      	beq.n	8001356 <Sharp_bend_speed_right_change+0x3e>
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f7fe ffd4 	bl	80002e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	2b1f      	cmp	r3, #31
 800133c:	d80b      	bhi.n	8001356 <Sharp_bend_speed_right_change+0x3e>
	{
	LF->Sharp_bend_speed_right = atof(ParsePointer);
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f009 feb6 	bl	800b0b0 <atof>
 8001344:	ec53 2b10 	vmov	r2, r3, d0
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc3c 	bl	8000bc8 <__aeabi_d2iz>
 8001350:	4602      	mov	r2, r0
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
	}
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	0800f340 	.word	0x0800f340

08001364 <Sharp_bend_speed_left_change>:
static void Sharp_bend_speed_left_change(LineFollower_t *LF)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 800136c:	490f      	ldr	r1, [pc, #60]	@ (80013ac <Sharp_bend_speed_left_change+0x48>)
 800136e:	2000      	movs	r0, #0
 8001370:	f00b fa4a 	bl	800c808 <strtok>
 8001374:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d011      	beq.n	80013a2 <Sharp_bend_speed_left_change+0x3e>
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7fe ffae 	bl	80002e0 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	2b1f      	cmp	r3, #31
 8001388:	d80b      	bhi.n	80013a2 <Sharp_bend_speed_left_change+0x3e>
	{
	LF->Sharp_bend_speed_left = atof(ParsePointer);
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f009 fe90 	bl	800b0b0 <atof>
 8001390:	ec53 2b10 	vmov	r2, r3, d0
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fc16 	bl	8000bc8 <__aeabi_d2iz>
 800139c:	4602      	mov	r2, r0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	61da      	str	r2, [r3, #28]
	}
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	0800f340 	.word	0x0800f340

080013b0 <Bend_speed_right_change>:
static void Bend_speed_right_change(LineFollower_t *LF)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80013b8:	490f      	ldr	r1, [pc, #60]	@ (80013f8 <Bend_speed_right_change+0x48>)
 80013ba:	2000      	movs	r0, #0
 80013bc:	f00b fa24 	bl	800c808 <strtok>
 80013c0:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d011      	beq.n	80013ee <Bend_speed_right_change+0x3e>
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7fe ff88 	bl	80002e0 <strlen>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b1f      	cmp	r3, #31
 80013d4:	d80b      	bhi.n	80013ee <Bend_speed_right_change+0x3e>
	{
	LF->Bend_speed_right = atof(ParsePointer);
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f009 fe6a 	bl	800b0b0 <atof>
 80013dc:	ec53 2b10 	vmov	r2, r3, d0
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fbf0 	bl	8000bc8 <__aeabi_d2iz>
 80013e8:	4602      	mov	r2, r0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	621a      	str	r2, [r3, #32]
	}
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	0800f340 	.word	0x0800f340

080013fc <Bend_speed_left_change>:
static void Bend_speed_left_change(LineFollower_t *LF)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001404:	490f      	ldr	r1, [pc, #60]	@ (8001444 <Bend_speed_left_change+0x48>)
 8001406:	2000      	movs	r0, #0
 8001408:	f00b f9fe 	bl	800c808 <strtok>
 800140c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d011      	beq.n	800143a <Bend_speed_left_change+0x3e>
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7fe ff62 	bl	80002e0 <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	2b1f      	cmp	r3, #31
 8001420:	d80b      	bhi.n	800143a <Bend_speed_left_change+0x3e>
	{
	LF->Bend_speed_left = atof(ParsePointer);
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f009 fe44 	bl	800b0b0 <atof>
 8001428:	ec53 2b10 	vmov	r2, r3, d0
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fbca 	bl	8000bc8 <__aeabi_d2iz>
 8001434:	4602      	mov	r2, r0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	0800f340 	.word	0x0800f340

08001448 <App_Controll>:
static void App_Controll(char RxData, LineFollower_t *LineFollower)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b0a6      	sub	sp, #152	@ 0x98
 800144c:	af02      	add	r7, sp, #8
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
	/*Stop robot*/
	if(RxData == 'N')
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b4e      	cmp	r3, #78	@ 0x4e
 8001458:	d14a      	bne.n	80014f0 <App_Controll+0xa8>
	{
		uint8_t buffer[128];
		/*Stop GRUZIK2.0 and turn off the LED*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	2140      	movs	r1, #64	@ 0x40
 800145e:	485c      	ldr	r0, [pc, #368]	@ (80015d0 <App_Controll+0x188>)
 8001460:	f004 fe30 	bl	80060c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2120      	movs	r1, #32
 8001468:	4859      	ldr	r0, [pc, #356]	@ (80015d0 <App_Controll+0x188>)
 800146a:	f004 fe2b 	bl	80060c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2140      	movs	r1, #64	@ 0x40
 8001472:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001476:	f004 fe25 	bl	80060c4 <HAL_GPIO_WritePin>

		/*Send battery voltage*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f888 	bl	8000594 <__aeabi_i2d>
 8001484:	a34a      	add	r3, pc, #296	@ (adr r3, 80015b0 <App_Controll+0x168>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f8ed 	bl	8000668 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	a348      	add	r3, pc, #288	@ (adr r3, 80015b8 <App_Controll+0x170>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff fa0e 	bl	80008bc <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fbd6 	bl	8000c58 <__aeabi_d2f>
 80014ac:	4602      	mov	r2, r0
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014b6:	461c      	mov	r4, r3
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f87b 	bl	80005b8 <__aeabi_f2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	f107 000c 	add.w	r0, r7, #12
 80014ca:	e9cd 2300 	strd	r2, r3, [sp]
 80014ce:	4622      	mov	r2, r4
 80014d0:	4940      	ldr	r1, [pc, #256]	@ (80015d4 <App_Controll+0x18c>)
 80014d2:	f00b f91b 	bl	800c70c <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe ff00 	bl	80002e0 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	f107 010c 	add.w	r1, r7, #12
 80014e8:	2364      	movs	r3, #100	@ 0x64
 80014ea:	483b      	ldr	r0, [pc, #236]	@ (80015d8 <App_Controll+0x190>)
 80014ec:	f007 fd04 	bl	8008ef8 <HAL_UART_Transmit>
	}
	/*Start robot*/
	if (RxData == 'Y')
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b59      	cmp	r3, #89	@ 0x59
 80014f4:	f040 810a 	bne.w	800170c <App_Controll+0x2c4>
		/*Proportional to battery percentage boost for motors
		 * to keep roughly same speed as with full battery*/
		float battery_percentage;
		uint8_t buffer[128];
		//Calculate battery percentage based on battery voltage
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f849 	bl	8000594 <__aeabi_i2d>
 8001502:	a32b      	add	r3, pc, #172	@ (adr r3, 80015b0 <App_Controll+0x168>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f8ae 	bl	8000668 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	a328      	add	r3, pc, #160	@ (adr r3, 80015b8 <App_Controll+0x170>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f9cf 	bl	80008bc <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb97 	bl	8000c58 <__aeabi_d2f>
 800152a:	4602      	mov	r2, r0
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28

		//Full battery voltage in working line follower is about 8.24V
		battery_percentage = (LineFollower->battery_voltage / 8.24) * 100;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f83f 	bl	80005b8 <__aeabi_f2d>
 800153a:	a321      	add	r3, pc, #132	@ (adr r3, 80015c0 <App_Controll+0x178>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f9bc 	bl	80008bc <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <App_Controll+0x194>)
 8001552:	f7ff f889 	bl	8000668 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fb7b 	bl	8000c58 <__aeabi_d2f>
 8001562:	4603      	mov	r3, r0
 8001564:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

		/*To don't damage 2s LiPo battery Line follower can't start with battery below 7.2V*/
		if (LineFollower->battery_voltage < 7.2)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f823 	bl	80005b8 <__aeabi_f2d>
 8001572:	a315      	add	r3, pc, #84	@ (adr r3, 80015c8 <App_Controll+0x180>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff fae8 	bl	8000b4c <__aeabi_dcmplt>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d032      	beq.n	80015e8 <App_Controll+0x1a0>
		{
			sprintf((char*)buffer, "! Low Battery !\r\n");
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4916      	ldr	r1, [pc, #88]	@ (80015e0 <App_Controll+0x198>)
 8001588:	4618      	mov	r0, r3
 800158a:	f00b f8bf 	bl	800c70c <siprintf>
			HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fea4 	bl	80002e0 <strlen>
 8001598:	4603      	mov	r3, r0
 800159a:	b29a      	uxth	r2, r3
 800159c:	f107 010c 	add.w	r1, r7, #12
 80015a0:	2364      	movs	r3, #100	@ 0x64
 80015a2:	480d      	ldr	r0, [pc, #52]	@ (80015d8 <App_Controll+0x190>)
 80015a4:	f007 fca8 	bl	8008ef8 <HAL_UART_Transmit>
 80015a8:	e32f      	b.n	8001c0a <App_Controll+0x7c2>
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w
 80015b0:	9999999a 	.word	0x9999999a
 80015b4:	40209999 	.word	0x40209999
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40adee00 	.word	0x40adee00
 80015c0:	47ae147b 	.word	0x47ae147b
 80015c4:	40207ae1 	.word	0x40207ae1
 80015c8:	cccccccd 	.word	0xcccccccd
 80015cc:	401ccccc 	.word	0x401ccccc
 80015d0:	48000800 	.word	0x48000800
 80015d4:	0800f344 	.word	0x0800f344
 80015d8:	20000780 	.word	0x20000780
 80015dc:	40590000 	.word	0x40590000
 80015e0:	0800f374 	.word	0x0800f374
 80015e4:	42c80000 	.word	0x42c80000
			return;
		}
		/*Motor speed*/
		LineFollower->Speed_level = ((100 - battery_percentage + 100) / 100) - LineFollower->Speed_offset;
 80015e8:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 80015e4 <App_Controll+0x19c>
 80015ec:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80015f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f4:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 80015e4 <App_Controll+0x19c>
 80015f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015fc:	ed5f 6a07 	vldr	s13, [pc, #-28]	@ 80015e4 <App_Controll+0x19c>
 8001600:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800160a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		if(LineFollower->Speed_level < 1)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800161a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800161e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	d503      	bpl.n	8001630 <App_Controll+0x1e8>
		{
			LineFollower->Speed_level = 1;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800162e:	631a      	str	r2, [r3, #48]	@ 0x30
		}

		/*Send battery data*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ffad 	bl	8000594 <__aeabi_i2d>
 800163a:	a3b9      	add	r3, pc, #740	@ (adr r3, 8001920 <App_Controll+0x4d8>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7ff f812 	bl	8000668 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	a3b6      	add	r3, pc, #728	@ (adr r3, 8001928 <App_Controll+0x4e0>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7ff f933 	bl	80008bc <__aeabi_ddiv>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff fafb 	bl	8000c58 <__aeabi_d2f>
 8001662:	4602      	mov	r2, r0
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800166c:	461c      	mov	r4, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ffa0 	bl	80005b8 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	f107 000c 	add.w	r0, r7, #12
 8001680:	e9cd 2300 	strd	r2, r3, [sp]
 8001684:	4622      	mov	r2, r4
 8001686:	499c      	ldr	r1, [pc, #624]	@ (80018f8 <App_Controll+0x4b0>)
 8001688:	f00b f840 	bl	800c70c <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fe25 	bl	80002e0 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b29a      	uxth	r2, r3
 800169a:	f107 010c 	add.w	r1, r7, #12
 800169e:	2364      	movs	r3, #100	@ 0x64
 80016a0:	4896      	ldr	r0, [pc, #600]	@ (80018fc <App_Controll+0x4b4>)
 80016a2:	f007 fc29 	bl	8008ef8 <HAL_UART_Transmit>


		sprintf((char*)buffer, "Percentage = %0.2f \r\n Speed_level = %0.2f \r\n", battery_percentage, LineFollower->Speed_level);
 80016a6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80016aa:	f7fe ff85 	bl	80005b8 <__aeabi_f2d>
 80016ae:	4604      	mov	r4, r0
 80016b0:	460d      	mov	r5, r1
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff7e 	bl	80005b8 <__aeabi_f2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	f107 000c 	add.w	r0, r7, #12
 80016c4:	e9cd 2300 	strd	r2, r3, [sp]
 80016c8:	4622      	mov	r2, r4
 80016ca:	462b      	mov	r3, r5
 80016cc:	498c      	ldr	r1, [pc, #560]	@ (8001900 <App_Controll+0x4b8>)
 80016ce:	f00b f81d 	bl	800c70c <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fe02 	bl	80002e0 <strlen>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f107 010c 	add.w	r1, r7, #12
 80016e4:	2364      	movs	r3, #100	@ 0x64
 80016e6:	4885      	ldr	r0, [pc, #532]	@ (80018fc <App_Controll+0x4b4>)
 80016e8:	f007 fc06 	bl	8008ef8 <HAL_UART_Transmit>

		/*Stop LineFollower and turn on the LED*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2140      	movs	r1, #64	@ 0x40
 80016f0:	4884      	ldr	r0, [pc, #528]	@ (8001904 <App_Controll+0x4bc>)
 80016f2:	f004 fce7 	bl	80060c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80016f6:	2201      	movs	r2, #1
 80016f8:	2120      	movs	r1, #32
 80016fa:	4882      	ldr	r0, [pc, #520]	@ (8001904 <App_Controll+0x4bc>)
 80016fc:	f004 fce2 	bl	80060c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2140      	movs	r1, #64	@ 0x40
 8001704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001708:	f004 fcdc 	bl	80060c4 <HAL_GPIO_WritePin>
	}
	/*LOW mode*/
	if(RxData == 'a')
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b61      	cmp	r3, #97	@ 0x61
 8001710:	d11f      	bne.n	8001752 <App_Controll+0x30a>
	{
		LineFollower->Base_speed_R = 85;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	2255      	movs	r2, #85	@ 0x55
 8001716:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 85;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2255      	movs	r2, #85	@ 0x55
 800171c:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 100;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2264      	movs	r2, #100	@ 0x64
 8001722:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 100;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	2264      	movs	r2, #100	@ 0x64
 8001728:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001730:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2246      	movs	r2, #70	@ 0x46
 8001736:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 800173e:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 80;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2250      	movs	r2, #80	@ 0x50
 8001744:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	4a6f      	ldr	r2, [pc, #444]	@ (8001908 <App_Controll+0x4c0>)
 800174a:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.07;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	4a6f      	ldr	r2, [pc, #444]	@ (800190c <App_Controll+0x4c4>)
 8001750:	605a      	str	r2, [r3, #4]
	}
	/*LOW+ mode*/
	if(RxData == 'd')
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b64      	cmp	r3, #100	@ 0x64
 8001756:	d11f      	bne.n	8001798 <App_Controll+0x350>
	{
		LineFollower->Base_speed_R = 100;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	2264      	movs	r2, #100	@ 0x64
 800175c:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 100;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2264      	movs	r2, #100	@ 0x64
 8001762:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 150;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2296      	movs	r2, #150	@ 0x96
 8001768:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 150;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	2296      	movs	r2, #150	@ 0x96
 800176e:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -30;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f06f 021d 	mvn.w	r2, #29
 8001776:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 100;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2264      	movs	r2, #100	@ 0x64
 800177c:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -40;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 8001784:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 80;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2250      	movs	r2, #80	@ 0x50
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	4a5e      	ldr	r2, [pc, #376]	@ (8001908 <App_Controll+0x4c0>)
 8001790:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.08;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	4a5e      	ldr	r2, [pc, #376]	@ (8001910 <App_Controll+0x4c8>)
 8001796:	605a      	str	r2, [r3, #4]
	}
	/*Medium mode*/
	if(RxData == 'b')
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b62      	cmp	r3, #98	@ 0x62
 800179c:	d11f      	bne.n	80017de <App_Controll+0x396>
	{
		LineFollower->Base_speed_R = 105;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2269      	movs	r2, #105	@ 0x69
 80017a2:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 105;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2269      	movs	r2, #105	@ 0x69
 80017a8:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 185;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	22b9      	movs	r2, #185	@ 0xb9
 80017ae:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 185;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	22b9      	movs	r2, #185	@ 0xb9
 80017b4:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -30;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	f06f 021d 	mvn.w	r2, #29
 80017bc:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 90;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	225a      	movs	r2, #90	@ 0x5a
 80017c2:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -40;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 80017ca:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 80;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2250      	movs	r2, #80	@ 0x50
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001908 <App_Controll+0x4c0>)
 80017d6:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.09;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4a4e      	ldr	r2, [pc, #312]	@ (8001914 <App_Controll+0x4cc>)
 80017dc:	605a      	str	r2, [r3, #4]
	}
	/*Medium+ mode*/
	if(RxData == 'e')
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2b65      	cmp	r3, #101	@ 0x65
 80017e2:	d11f      	bne.n	8001824 <App_Controll+0x3dc>
	{
		LineFollower->Base_speed_R = 120;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2278      	movs	r2, #120	@ 0x78
 80017e8:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 120;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2278      	movs	r2, #120	@ 0x78
 80017ee:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 120;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2278      	movs	r2, #120	@ 0x78
 80017f4:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 120;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2278      	movs	r2, #120	@ 0x78
 80017fa:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001802:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	225c      	movs	r2, #92	@ 0x5c
 8001808:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001810:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;//110
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	221e      	movs	r2, #30
 8001816:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4a3b      	ldr	r2, [pc, #236]	@ (8001908 <App_Controll+0x4c0>)
 800181c:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.2;//0.25
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	4a3d      	ldr	r2, [pc, #244]	@ (8001918 <App_Controll+0x4d0>)
 8001822:	605a      	str	r2, [r3, #4]
	}
	/*HIGH mode*/
	if(RxData == 'c')
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b63      	cmp	r3, #99	@ 0x63
 8001828:	d11f      	bne.n	800186a <App_Controll+0x422>
	{
		LineFollower->Base_speed_R = 125;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	227d      	movs	r2, #125	@ 0x7d
 800182e:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 125;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	227d      	movs	r2, #125	@ 0x7d
 8001834:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 130;//125
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2282      	movs	r2, #130	@ 0x82
 800183a:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 130;//125
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2282      	movs	r2, #130	@ 0x82
 8001840:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001848:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92; //88
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	225c      	movs	r2, #92	@ 0x5c
 800184e:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001856:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	221e      	movs	r2, #30
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	4a29      	ldr	r2, [pc, #164]	@ (8001908 <App_Controll+0x4c0>)
 8001862:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.175;//0.2
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4a2d      	ldr	r2, [pc, #180]	@ (800191c <App_Controll+0x4d4>)
 8001868:	605a      	str	r2, [r3, #4]
	}
	/*HIGH+ mode*/ /*For now it's just HIGH*/
	if(RxData == 'f')
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b66      	cmp	r3, #102	@ 0x66
 800186e:	d11f      	bne.n	80018b0 <App_Controll+0x468>
	{
		LineFollower->Base_speed_R = 130;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2282      	movs	r2, #130	@ 0x82
 8001874:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 130;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2282      	movs	r2, #130	@ 0x82
 800187a:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 130;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2282      	movs	r2, #130	@ 0x82
 8001880:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 130;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2282      	movs	r2, #130	@ 0x82
 8001886:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 800188e:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92; //88
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	225c      	movs	r2, #92	@ 0x5c
 8001894:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 800189c:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	221e      	movs	r2, #30
 80018a2:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4a18      	ldr	r2, [pc, #96]	@ (8001908 <App_Controll+0x4c0>)
 80018a8:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.175;//0.2
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	4a1b      	ldr	r2, [pc, #108]	@ (800191c <App_Controll+0x4d4>)
 80018ae:	605a      	str	r2, [r3, #4]
	}
	/*TRUBO mode*/
	if(RxData == 'i')
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2b69      	cmp	r3, #105	@ 0x69
 80018b4:	d13c      	bne.n	8001930 <App_Controll+0x4e8>
	{
		LineFollower->Base_speed_R = 135;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2287      	movs	r2, #135	@ 0x87
 80018ba:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 135;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	2287      	movs	r2, #135	@ 0x87
 80018c0:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 135;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2287      	movs	r2, #135	@ 0x87
 80018c6:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 135;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	2287      	movs	r2, #135	@ 0x87
 80018cc:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60; //-65
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 80018d4:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2246      	movs	r2, #70	@ 0x46
 80018da:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 80018e2:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	226e      	movs	r2, #110	@ 0x6e
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	4a06      	ldr	r2, [pc, #24]	@ (8001908 <App_Controll+0x4c0>)
 80018ee:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.2;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	4a09      	ldr	r2, [pc, #36]	@ (8001918 <App_Controll+0x4d0>)
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	e01b      	b.n	8001930 <App_Controll+0x4e8>
 80018f8:	0800f344 	.word	0x0800f344
 80018fc:	20000780 	.word	0x20000780
 8001900:	0800f388 	.word	0x0800f388
 8001904:	48000800 	.word	0x48000800
 8001908:	3c75c28f 	.word	0x3c75c28f
 800190c:	3d8f5c29 	.word	0x3d8f5c29
 8001910:	3da3d70a 	.word	0x3da3d70a
 8001914:	3db851ec 	.word	0x3db851ec
 8001918:	3e4ccccd 	.word	0x3e4ccccd
 800191c:	3e333333 	.word	0x3e333333
 8001920:	9999999a 	.word	0x9999999a
 8001924:	40209999 	.word	0x40209999
 8001928:	00000000 	.word	0x00000000
 800192c:	40adee00 	.word	0x40adee00
	}
	/*TRUBO+ mode*/
	if(RxData == 'j')
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2b6a      	cmp	r3, #106	@ 0x6a
 8001934:	d11f      	bne.n	8001976 <App_Controll+0x52e>
	{
	   LineFollower->Base_speed_R = 140;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	228c      	movs	r2, #140	@ 0x8c
 800193a:	609a      	str	r2, [r3, #8]
	   LineFollower->Base_speed_L = 140;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	228c      	movs	r2, #140	@ 0x8c
 8001940:	60da      	str	r2, [r3, #12]
	   LineFollower->Max_speed_L = 140;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	228c      	movs	r2, #140	@ 0x8c
 8001946:	615a      	str	r2, [r3, #20]
	   LineFollower->Max_speed_R = 140;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	228c      	movs	r2, #140	@ 0x8c
 800194c:	611a      	str	r2, [r3, #16]
	   LineFollower->Sharp_bend_speed_right = -60;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 8001954:	619a      	str	r2, [r3, #24]
	   LineFollower->Sharp_bend_speed_left = 70;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2246      	movs	r2, #70	@ 0x46
 800195a:	61da      	str	r2, [r3, #28]
	   LineFollower->Bend_speed_right = -60;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 8001962:	621a      	str	r2, [r3, #32]
	   LineFollower->Bend_speed_left = 110;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	226e      	movs	r2, #110	@ 0x6e
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24
	   LineFollower->Kp = 0.015;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4a8e      	ldr	r2, [pc, #568]	@ (8001ba8 <App_Controll+0x760>)
 800196e:	601a      	str	r2, [r3, #0]
	   LineFollower->Kd = 0.2;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4a8e      	ldr	r2, [pc, #568]	@ (8001bac <App_Controll+0x764>)
 8001974:	605a      	str	r2, [r3, #4]
	}
	/*ULTRA mode*/
	if(RxData == 'k')
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b6b      	cmp	r3, #107	@ 0x6b
 800197a:	d11f      	bne.n	80019bc <App_Controll+0x574>
	{
		LineFollower->Base_speed_R = 145;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2291      	movs	r2, #145	@ 0x91
 8001980:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 145;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2291      	movs	r2, #145	@ 0x91
 8001986:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 145;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2291      	movs	r2, #145	@ 0x91
 800198c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 145;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2291      	movs	r2, #145	@ 0x91
 8001992:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60;//-70
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 800199a:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;//88
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2246      	movs	r2, #70	@ 0x46
 80019a0:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 80019a8:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	226e      	movs	r2, #110	@ 0x6e
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ba8 <App_Controll+0x760>)
 80019b4:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.22;     //Jeśli sie gubi wylaturje itd mozna zwiększyć jesli sobie radzi to mozna obniżyc i zwiększyc płynność
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	4a7d      	ldr	r2, [pc, #500]	@ (8001bb0 <App_Controll+0x768>)
 80019ba:	605a      	str	r2, [r3, #4]
	 }
	 /*ULTRA+ mode*/
	 if(RxData == 'l')
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b6c      	cmp	r3, #108	@ 0x6c
 80019c0:	d11f      	bne.n	8001a02 <App_Controll+0x5ba>
	 {
		LineFollower->Base_speed_R = 150;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2296      	movs	r2, #150	@ 0x96
 80019c6:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 150;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2296      	movs	r2, #150	@ 0x96
 80019cc:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 150;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2296      	movs	r2, #150	@ 0x96
 80019d2:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 150;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2296      	movs	r2, #150	@ 0x96
 80019d8:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -55;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f06f 0236 	mvn.w	r2, #54	@ 0x36
 80019e0:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 75;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	224b      	movs	r2, #75	@ 0x4b
 80019e6:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 80019ee:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 120;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2278      	movs	r2, #120	@ 0x78
 80019f4:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	4a6b      	ldr	r2, [pc, #428]	@ (8001ba8 <App_Controll+0x760>)
 80019fa:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.23;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4a6d      	ldr	r2, [pc, #436]	@ (8001bb4 <App_Controll+0x76c>)
 8001a00:	605a      	str	r2, [r3, #4]
	  }
	  /*EXTREME mode*/
	  if(RxData == 'm')
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b6d      	cmp	r3, #109	@ 0x6d
 8001a06:	d11f      	bne.n	8001a48 <App_Controll+0x600>
	  {
		 LineFollower->Base_speed_R = 155;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	229b      	movs	r2, #155	@ 0x9b
 8001a0c:	609a      	str	r2, [r3, #8]
		 LineFollower->Base_speed_L = 155;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	229b      	movs	r2, #155	@ 0x9b
 8001a12:	60da      	str	r2, [r3, #12]
		 LineFollower->Max_speed_L = 155;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	229b      	movs	r2, #155	@ 0x9b
 8001a18:	615a      	str	r2, [r3, #20]
		 LineFollower->Max_speed_R = 155;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	229b      	movs	r2, #155	@ 0x9b
 8001a1e:	611a      	str	r2, [r3, #16]
		 LineFollower->Sharp_bend_speed_right = -70;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001a26:	619a      	str	r2, [r3, #24]
		 LineFollower->Sharp_bend_speed_left = 85;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2255      	movs	r2, #85	@ 0x55
 8001a2c:	61da      	str	r2, [r3, #28]
		 LineFollower->Bend_speed_right = -50;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001a34:	621a      	str	r2, [r3, #32]
		 LineFollower->Bend_speed_left = 30;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	221e      	movs	r2, #30
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24
		 LineFollower->Kp = 0.015;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ba8 <App_Controll+0x760>)
 8001a40:	601a      	str	r2, [r3, #0]
		 LineFollower->Kd = 0.265;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	4a5c      	ldr	r2, [pc, #368]	@ (8001bb8 <App_Controll+0x770>)
 8001a46:	605a      	str	r2, [r3, #4]
	  }

 	  /*EXTREME+ mode*/
 	  if(RxData == 'n')
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b6e      	cmp	r3, #110	@ 0x6e
 8001a4c:	d11f      	bne.n	8001a8e <App_Controll+0x646>
 	  {
 	    LineFollower->Base_speed_R = 160;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	22a0      	movs	r2, #160	@ 0xa0
 8001a52:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 160;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	22a0      	movs	r2, #160	@ 0xa0
 8001a58:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 160;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	22a0      	movs	r2, #160	@ 0xa0
 8001a5e:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 160;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	22a0      	movs	r2, #160	@ 0xa0
 8001a64:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -70;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001a6c:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 85;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2255      	movs	r2, #85	@ 0x55
 8001a72:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001a7a:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 30;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	221e      	movs	r2, #30
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24
 		LineFollower->Kp = 0.015;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	4a48      	ldr	r2, [pc, #288]	@ (8001ba8 <App_Controll+0x760>)
 8001a86:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 0.265;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb8 <App_Controll+0x770>)
 8001a8c:	605a      	str	r2, [r3, #4]
 	  }
 	  /*SPECIAL mode*/
 	  if(RxData == 'h')
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b68      	cmp	r3, #104	@ 0x68
 8001a92:	d11f      	bne.n	8001ad4 <App_Controll+0x68c>
 	  {
 	    LineFollower->Base_speed_R = 135;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2287      	movs	r2, #135	@ 0x87
 8001a98:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 135;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2287      	movs	r2, #135	@ 0x87
 8001a9e:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 135;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2287      	movs	r2, #135	@ 0x87
 8001aa4:	615a      	str	r2, [r3, #20]
 	    LineFollower->Max_speed_R = 135;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2287      	movs	r2, #135	@ 0x87
 8001aaa:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -66;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	f06f 0241 	mvn.w	r2, #65	@ 0x41
 8001ab2:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 92;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	225c      	movs	r2, #92	@ 0x5c
 8001ab8:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001ac0:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 30;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	221e      	movs	r2, #30
 8001ac6:	625a      	str	r2, [r3, #36]	@ 0x24
 		LineFollower->Kp = 0.015;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4a37      	ldr	r2, [pc, #220]	@ (8001ba8 <App_Controll+0x760>)
 8001acc:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 0.2;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	4a36      	ldr	r2, [pc, #216]	@ (8001bac <App_Controll+0x764>)
 8001ad2:	605a      	str	r2, [r3, #4]
 	  }
 	  /*RA-1-final-slower*/
 	  if(RxData == 'o')
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2b6f      	cmp	r3, #111	@ 0x6f
 8001ad8:	d11f      	bne.n	8001b1a <App_Controll+0x6d2>
 	  {
 	    LineFollower->Base_speed_R = 143;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	228f      	movs	r2, #143	@ 0x8f
 8001ade:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 143;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	228f      	movs	r2, #143	@ 0x8f
 8001ae4:	60da      	str	r2, [r3, #12]
 	   	LineFollower->Max_speed_L = 182;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	22b6      	movs	r2, #182	@ 0xb6
 8001aea:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 182;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	22b6      	movs	r2, #182	@ 0xb6
 8001af0:	611a      	str	r2, [r3, #16]
 	  	LineFollower->Sharp_bend_speed_right = -76;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001af8:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 90;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	225a      	movs	r2, #90	@ 0x5a
 8001afe:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001b06:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2264      	movs	r2, #100	@ 0x64
 8001b0c:	625a      	str	r2, [r3, #36]	@ 0x24
 		LineFollower->Kp = 0.02;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4a2a      	ldr	r2, [pc, #168]	@ (8001bbc <App_Controll+0x774>)
 8001b12:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc0 <App_Controll+0x778>)
 8001b18:	605a      	str	r2, [r3, #4]
 	   }
 	   /*RA-2-eliminations-faster*/
 	   if(RxData == 'u')
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	2b75      	cmp	r3, #117	@ 0x75
 8001b1e:	d11f      	bne.n	8001b60 <App_Controll+0x718>
 	   {
 	     LineFollower->Base_speed_R = 153;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2299      	movs	r2, #153	@ 0x99
 8001b24:	609a      	str	r2, [r3, #8]
 	     LineFollower->Base_speed_L = 153;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2299      	movs	r2, #153	@ 0x99
 8001b2a:	60da      	str	r2, [r3, #12]
 	     LineFollower->Max_speed_L = 187;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	22bb      	movs	r2, #187	@ 0xbb
 8001b30:	615a      	str	r2, [r3, #20]
 	   	 LineFollower->Max_speed_R = 187;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	22bb      	movs	r2, #187	@ 0xbb
 8001b36:	611a      	str	r2, [r3, #16]
 	  	 LineFollower->Sharp_bend_speed_right = -76;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001b3e:	619a      	str	r2, [r3, #24]
 	 	 LineFollower->Sharp_bend_speed_left = 90;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	225a      	movs	r2, #90	@ 0x5a
 8001b44:	61da      	str	r2, [r3, #28]
 	 	 LineFollower->Bend_speed_right = -50;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001b4c:	621a      	str	r2, [r3, #32]
 	 	 LineFollower->Bend_speed_left = 100;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2264      	movs	r2, #100	@ 0x64
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24
 	 	 LineFollower->Kp = 0.02;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4a19      	ldr	r2, [pc, #100]	@ (8001bbc <App_Controll+0x774>)
 8001b58:	601a      	str	r2, [r3, #0]
 	 	 LineFollower->Kd = 350;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	4a18      	ldr	r2, [pc, #96]	@ (8001bc0 <App_Controll+0x778>)
 8001b5e:	605a      	str	r2, [r3, #4]
 	   }
 	  /*Gruzik2.1 Robo Comp 2024r 1*/
 	  if(RxData == 'p')
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b70      	cmp	r3, #112	@ 0x70
 8001b64:	d12e      	bne.n	8001bc4 <App_Controll+0x77c>
 	  {
 		 LineFollower->Base_speed_R = 143;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	228f      	movs	r2, #143	@ 0x8f
 8001b6a:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 143;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	228f      	movs	r2, #143	@ 0x8f
 8001b70:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 182;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	22b6      	movs	r2, #182	@ 0xb6
 8001b76:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 182;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	22b6      	movs	r2, #182	@ 0xb6
 8001b7c:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001b84:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	225a      	movs	r2, #90	@ 0x5a
 8001b8a:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 8001b92:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	226e      	movs	r2, #110	@ 0x6e
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24
 		 LineFollower->Kp = 0.02;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	4a07      	ldr	r2, [pc, #28]	@ (8001bbc <App_Controll+0x774>)
 8001b9e:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4a07      	ldr	r2, [pc, #28]	@ (8001bc0 <App_Controll+0x778>)
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	e00d      	b.n	8001bc4 <App_Controll+0x77c>
 8001ba8:	3c75c28f 	.word	0x3c75c28f
 8001bac:	3e4ccccd 	.word	0x3e4ccccd
 8001bb0:	3e6147ae 	.word	0x3e6147ae
 8001bb4:	3e6b851f 	.word	0x3e6b851f
 8001bb8:	3e87ae14 	.word	0x3e87ae14
 8001bbc:	3ca3d70a 	.word	0x3ca3d70a
 8001bc0:	43af0000 	.word	0x43af0000
 	  }
 	  /*Gruzik2.1 Robo Comp 2024 2*/
 	  if(RxData == 'r')
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	2b72      	cmp	r3, #114	@ 0x72
 8001bc8:	d11f      	bne.n	8001c0a <App_Controll+0x7c2>
 	  {
 		 LineFollower->Base_speed_R = 153;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2299      	movs	r2, #153	@ 0x99
 8001bce:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 153;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2299      	movs	r2, #153	@ 0x99
 8001bd4:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 187;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	22bb      	movs	r2, #187	@ 0xbb
 8001bda:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 187;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	22bb      	movs	r2, #187	@ 0xbb
 8001be0:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001be8:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	225a      	movs	r2, #90	@ 0x5a
 8001bee:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 8001bf6:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	226e      	movs	r2, #110	@ 0x6e
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24
 		 LineFollower->Kp = 0.02;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	4a03      	ldr	r2, [pc, #12]	@ (8001c10 <App_Controll+0x7c8>)
 8001c02:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4a03      	ldr	r2, [pc, #12]	@ (8001c14 <App_Controll+0x7cc>)
 8001c08:	605a      	str	r2, [r3, #4]
 	   }
}
 8001c0a:	3790      	adds	r7, #144	@ 0x90
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c10:	3ca3d70a 	.word	0x3ca3d70a
 8001c14:	43af0000 	.word	0x43af0000

08001c18 <Mode_change>:

static void Mode_change(LineFollower_t *LF)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001c20:	490c      	ldr	r1, [pc, #48]	@ (8001c54 <Mode_change+0x3c>)
 8001c22:	2000      	movs	r0, #0
 8001c24:	f00a fdf0 	bl	800c808 <strtok>
 8001c28:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 2)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <Mode_change+0x32>
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7fe fb54 	bl	80002e0 <strlen>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d805      	bhi.n	8001c4a <Mode_change+0x32>
	{
		App_Controll(ParsePointer[0], LF);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fbff 	bl	8001448 <App_Controll>
	}
}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	0800f340 	.word	0x0800f340

08001c58 <Parser_Parse>:
void Parser_Parse(uint8_t *ReceivedData, LineFollower_t *LineFollower)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	char *ParsePointer = strtok((char*)ReceivedData, "=");
 8001c62:	4935      	ldr	r1, [pc, #212]	@ (8001d38 <Parser_Parse+0xe0>)
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f00a fdcf 	bl	800c808 <strtok>
 8001c6a:	60f8      	str	r0, [r7, #12]

	if(!strcmp("Kp",ParsePointer))
 8001c6c:	68f9      	ldr	r1, [r7, #12]
 8001c6e:	4833      	ldr	r0, [pc, #204]	@ (8001d3c <Parser_Parse+0xe4>)
 8001c70:	f7fe fad6 	bl	8000220 <strcmp>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <Parser_Parse+0x2a>
	{
		kp_change(LineFollower);
 8001c7a:	6838      	ldr	r0, [r7, #0]
 8001c7c:	f7ff fa9c 	bl	80011b8 <kp_change>
	}
	else if(!strcmp("Mode",ParsePointer))
	{
		Mode_change(LineFollower);
	}
}
 8001c80:	e056      	b.n	8001d30 <Parser_Parse+0xd8>
	else if(!strcmp("Kd",ParsePointer))
 8001c82:	68f9      	ldr	r1, [r7, #12]
 8001c84:	482e      	ldr	r0, [pc, #184]	@ (8001d40 <Parser_Parse+0xe8>)
 8001c86:	f7fe facb 	bl	8000220 <strcmp>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d103      	bne.n	8001c98 <Parser_Parse+0x40>
		kd_change(LineFollower);
 8001c90:	6838      	ldr	r0, [r7, #0]
 8001c92:	f7ff fab7 	bl	8001204 <kd_change>
}
 8001c96:	e04b      	b.n	8001d30 <Parser_Parse+0xd8>
	else if(!strcmp("Base_speed",ParsePointer))
 8001c98:	68f9      	ldr	r1, [r7, #12]
 8001c9a:	482a      	ldr	r0, [pc, #168]	@ (8001d44 <Parser_Parse+0xec>)
 8001c9c:	f7fe fac0 	bl	8000220 <strcmp>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <Parser_Parse+0x56>
		Base_speed_change(LineFollower);
 8001ca6:	6838      	ldr	r0, [r7, #0]
 8001ca8:	f7ff fad2 	bl	8001250 <Base_speed_change>
}
 8001cac:	e040      	b.n	8001d30 <Parser_Parse+0xd8>
	else if(!strcmp("Max_speed",ParsePointer))
 8001cae:	68f9      	ldr	r1, [r7, #12]
 8001cb0:	4825      	ldr	r0, [pc, #148]	@ (8001d48 <Parser_Parse+0xf0>)
 8001cb2:	f7fe fab5 	bl	8000220 <strcmp>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d103      	bne.n	8001cc4 <Parser_Parse+0x6c>
		Max_speed_change(LineFollower);
 8001cbc:	6838      	ldr	r0, [r7, #0]
 8001cbe:	f7ff faf9 	bl	80012b4 <Max_speed_change>
}
 8001cc2:	e035      	b.n	8001d30 <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_right",ParsePointer))
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	4821      	ldr	r0, [pc, #132]	@ (8001d4c <Parser_Parse+0xf4>)
 8001cc8:	f7fe faaa 	bl	8000220 <strcmp>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <Parser_Parse+0x82>
		Sharp_bend_speed_right_change(LineFollower);
 8001cd2:	6838      	ldr	r0, [r7, #0]
 8001cd4:	f7ff fb20 	bl	8001318 <Sharp_bend_speed_right_change>
}
 8001cd8:	e02a      	b.n	8001d30 <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_left",ParsePointer))
 8001cda:	68f9      	ldr	r1, [r7, #12]
 8001cdc:	481c      	ldr	r0, [pc, #112]	@ (8001d50 <Parser_Parse+0xf8>)
 8001cde:	f7fe fa9f 	bl	8000220 <strcmp>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d103      	bne.n	8001cf0 <Parser_Parse+0x98>
		Sharp_bend_speed_left_change(LineFollower);
 8001ce8:	6838      	ldr	r0, [r7, #0]
 8001cea:	f7ff fb3b 	bl	8001364 <Sharp_bend_speed_left_change>
}
 8001cee:	e01f      	b.n	8001d30 <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_right",ParsePointer))
 8001cf0:	68f9      	ldr	r1, [r7, #12]
 8001cf2:	4818      	ldr	r0, [pc, #96]	@ (8001d54 <Parser_Parse+0xfc>)
 8001cf4:	f7fe fa94 	bl	8000220 <strcmp>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <Parser_Parse+0xae>
		Bend_speed_right_change(LineFollower);
 8001cfe:	6838      	ldr	r0, [r7, #0]
 8001d00:	f7ff fb56 	bl	80013b0 <Bend_speed_right_change>
}
 8001d04:	e014      	b.n	8001d30 <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_left",ParsePointer))
 8001d06:	68f9      	ldr	r1, [r7, #12]
 8001d08:	4813      	ldr	r0, [pc, #76]	@ (8001d58 <Parser_Parse+0x100>)
 8001d0a:	f7fe fa89 	bl	8000220 <strcmp>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d103      	bne.n	8001d1c <Parser_Parse+0xc4>
		Bend_speed_left_change(LineFollower);
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f7ff fb71 	bl	80013fc <Bend_speed_left_change>
}
 8001d1a:	e009      	b.n	8001d30 <Parser_Parse+0xd8>
	else if(!strcmp("Mode",ParsePointer))
 8001d1c:	68f9      	ldr	r1, [r7, #12]
 8001d1e:	480f      	ldr	r0, [pc, #60]	@ (8001d5c <Parser_Parse+0x104>)
 8001d20:	f7fe fa7e 	bl	8000220 <strcmp>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d102      	bne.n	8001d30 <Parser_Parse+0xd8>
		Mode_change(LineFollower);
 8001d2a:	6838      	ldr	r0, [r7, #0]
 8001d2c:	f7ff ff74 	bl	8001c18 <Mode_change>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	0800f3b8 	.word	0x0800f3b8
 8001d3c:	0800f3bc 	.word	0x0800f3bc
 8001d40:	0800f3c0 	.word	0x0800f3c0
 8001d44:	0800f3c4 	.word	0x0800f3c4
 8001d48:	0800f3d0 	.word	0x0800f3d0
 8001d4c:	0800f3dc 	.word	0x0800f3dc
 8001d50:	0800f3f4 	.word	0x0800f3f4
 8001d54:	0800f40c 	.word	0x0800f40c
 8001d58:	0800f420 	.word	0x0800f420
 8001d5c:	0800f430 	.word	0x0800f430

08001d60 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	@ 0x30
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2220      	movs	r2, #32
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f00a fd2a 	bl	800c7d2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d7e:	4b32      	ldr	r3, [pc, #200]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001d80:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d86:	4b30      	ldr	r3, [pc, #192]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001d88:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d94:	4b2c      	ldr	r3, [pc, #176]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001da0:	4b29      	ldr	r3, [pc, #164]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001da6:	4b28      	ldr	r3, [pc, #160]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001da8:	2204      	movs	r2, #4
 8001daa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001dac:	4b26      	ldr	r3, [pc, #152]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001db2:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001db8:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dbe:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001dda:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001de0:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001de8:	4817      	ldr	r0, [pc, #92]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001dea:	f002 fa49 	bl	8004280 <HAL_ADC_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001df4:	f001 f8dc 	bl	8002fb0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	4811      	ldr	r0, [pc, #68]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001e04:	f003 fa7a 	bl	80052fc <HAL_ADCEx_MultiModeConfigChannel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001e0e:	f001 f8cf 	bl	8002fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001e14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e16:	2306      	movs	r3, #6
 8001e18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e1e:	237f      	movs	r3, #127	@ 0x7f
 8001e20:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e22:	2304      	movs	r3, #4
 8001e24:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	@ (8001e48 <MX_ADC1_Init+0xe8>)
 8001e30:	f002 fcd4 	bl	80047dc <HAL_ADC_ConfigChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001e3a:	f001 f8b9 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	3730      	adds	r7, #48	@ 0x30
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200001f4 	.word	0x200001f4
 8001e4c:	08600004 	.word	0x08600004

08001e50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b09e      	sub	sp, #120	@ 0x78
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	2254      	movs	r2, #84	@ 0x54
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f00a fcae 	bl	800c7d2 <memset>
  if(adcHandle->Instance==ADC1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e7e:	d15f      	bne.n	8001f40 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e84:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e86:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e8a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	4618      	mov	r0, r3
 8001e92:	f005 f853 	bl	8006f3c <HAL_RCCEx_PeriphCLKConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e9c:	f001 f888 	bl	8002fb0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ea0:	4b29      	ldr	r3, [pc, #164]	@ (8001f48 <HAL_ADC_MspInit+0xf8>)
 8001ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea4:	4a28      	ldr	r2, [pc, #160]	@ (8001f48 <HAL_ADC_MspInit+0xf8>)
 8001ea6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eac:	4b26      	ldr	r3, [pc, #152]	@ (8001f48 <HAL_ADC_MspInit+0xf8>)
 8001eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb8:	4b23      	ldr	r3, [pc, #140]	@ (8001f48 <HAL_ADC_MspInit+0xf8>)
 8001eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebc:	4a22      	ldr	r2, [pc, #136]	@ (8001f48 <HAL_ADC_MspInit+0xf8>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec4:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <HAL_ADC_MspInit+0xf8>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee6:	f003 ff53 	bl	8005d90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <HAL_ADC_MspInit+0xfc>)
 8001eec:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <HAL_ADC_MspInit+0x100>)
 8001eee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ef0:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <HAL_ADC_MspInit+0xfc>)
 8001ef2:	2205      	movs	r2, #5
 8001ef4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <HAL_ADC_MspInit+0xfc>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001efc:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <HAL_ADC_MspInit+0xfc>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f02:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_ADC_MspInit+0xfc>)
 8001f04:	2280      	movs	r2, #128	@ 0x80
 8001f06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f08:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HAL_ADC_MspInit+0xfc>)
 8001f0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f10:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <HAL_ADC_MspInit+0xfc>)
 8001f12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f16:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <HAL_ADC_MspInit+0xfc>)
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_ADC_MspInit+0xfc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f24:	4809      	ldr	r0, [pc, #36]	@ (8001f4c <HAL_ADC_MspInit+0xfc>)
 8001f26:	f003 fc01 	bl	800572c <HAL_DMA_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001f30:	f001 f83e 	bl	8002fb0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a05      	ldr	r2, [pc, #20]	@ (8001f4c <HAL_ADC_MspInit+0xfc>)
 8001f38:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f3a:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <HAL_ADC_MspInit+0xfc>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001f40:	bf00      	nop
 8001f42:	3778      	adds	r7, #120	@ 0x78
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	20000260 	.word	0x20000260
 8001f50:	40020008 	.word	0x40020008

08001f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f5a:	4b16      	ldr	r3, [pc, #88]	@ (8001fb4 <MX_DMA_Init+0x60>)
 8001f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5e:	4a15      	ldr	r2, [pc, #84]	@ (8001fb4 <MX_DMA_Init+0x60>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f66:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <MX_DMA_Init+0x60>)
 8001f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <MX_DMA_Init+0x60>)
 8001f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f76:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb4 <MX_DMA_Init+0x60>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <MX_DMA_Init+0x60>)
 8001f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	200b      	movs	r0, #11
 8001f90:	f003 fb97 	bl	80056c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f94:	200b      	movs	r0, #11
 8001f96:	f003 fbae 	bl	80056f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	200c      	movs	r0, #12
 8001fa0:	f003 fb8f 	bl	80056c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001fa4:	200c      	movs	r0, #12
 8001fa6:	f003 fba6 	bl	80056f6 <HAL_NVIC_EnableIRQ>

}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fce:	4b5a      	ldr	r3, [pc, #360]	@ (8002138 <MX_GPIO_Init+0x180>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	4a59      	ldr	r2, [pc, #356]	@ (8002138 <MX_GPIO_Init+0x180>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fda:	4b57      	ldr	r3, [pc, #348]	@ (8002138 <MX_GPIO_Init+0x180>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fe6:	4b54      	ldr	r3, [pc, #336]	@ (8002138 <MX_GPIO_Init+0x180>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fea:	4a53      	ldr	r2, [pc, #332]	@ (8002138 <MX_GPIO_Init+0x180>)
 8001fec:	f043 0320 	orr.w	r3, r3, #32
 8001ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff2:	4b51      	ldr	r3, [pc, #324]	@ (8002138 <MX_GPIO_Init+0x180>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8002138 <MX_GPIO_Init+0x180>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002002:	4a4d      	ldr	r2, [pc, #308]	@ (8002138 <MX_GPIO_Init+0x180>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200a:	4b4b      	ldr	r3, [pc, #300]	@ (8002138 <MX_GPIO_Init+0x180>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	4b48      	ldr	r3, [pc, #288]	@ (8002138 <MX_GPIO_Init+0x180>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	4a47      	ldr	r2, [pc, #284]	@ (8002138 <MX_GPIO_Init+0x180>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002022:	4b45      	ldr	r3, [pc, #276]	@ (8002138 <MX_GPIO_Init+0x180>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800202e:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <MX_GPIO_Init+0x180>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	4a41      	ldr	r2, [pc, #260]	@ (8002138 <MX_GPIO_Init+0x180>)
 8002034:	f043 0308 	orr.w	r3, r3, #8
 8002038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800203a:	4b3f      	ldr	r3, [pc, #252]	@ (8002138 <MX_GPIO_Init+0x180>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDON_Pin|Motor_R_A_Pin|Motor_R_B_Pin|LED_2_Pin
 8002046:	2200      	movs	r2, #0
 8002048:	f242 017c 	movw	r1, #8316	@ 0x207c
 800204c:	483b      	ldr	r0, [pc, #236]	@ (800213c <MX_GPIO_Init+0x184>)
 800204e:	f004 f839 	bl	80060c4 <HAL_GPIO_WritePin>
                          |LED_1_Pin|Motor_STBY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_4_Pin|LED_3_Pin|Motor_L_A_Pin|Motor_L_B_Pin, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8002058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800205c:	f004 f832 	bl	80060c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002066:	4836      	ldr	r0, [pc, #216]	@ (8002140 <MX_GPIO_Init+0x188>)
 8002068:	f004 f82c 	bl	80060c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LEDON_Pin|Motor_R_A_Pin|Motor_R_B_Pin|LED_2_Pin
 800206c:	f242 037c 	movw	r3, #8316	@ 0x207c
 8002070:	617b      	str	r3, [r7, #20]
                          |LED_1_Pin|Motor_STBY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	482d      	ldr	r0, [pc, #180]	@ (800213c <MX_GPIO_Init+0x184>)
 8002086:	f003 fe83 	bl	8005d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR11_Pin|SENSOR12_Pin|SENSOR10_Pin;
 800208a:	f248 0330 	movw	r3, #32816	@ 0x8030
 800208e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a2:	f003 fe75 	bl	8005d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|Motor_L_A_Pin|Motor_L_B_Pin;
 80020a6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80020aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ac:	2301      	movs	r3, #1
 80020ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020c2:	f003 fe65 	bl	8005d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80020c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	4818      	ldr	r0, [pc, #96]	@ (8002140 <MX_GPIO_Init+0x188>)
 80020e0:	f003 fe56 	bl	8005d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SENSOR9_Pin|SENSOR8_Pin|SENSOR7_Pin;
 80020e4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80020e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	4810      	ldr	r0, [pc, #64]	@ (800213c <MX_GPIO_Init+0x184>)
 80020fa:	f003 fe49 	bl	8005d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR6_Pin;
 80020fe:	2304      	movs	r3, #4
 8002100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR6_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	480c      	ldr	r0, [pc, #48]	@ (8002144 <MX_GPIO_Init+0x18c>)
 8002112:	f003 fe3d 	bl	8005d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin
 8002116:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 800211a:	617b      	str	r3, [r7, #20]
                          |SENSOR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	4805      	ldr	r0, [pc, #20]	@ (8002140 <MX_GPIO_Init+0x188>)
 800212c:	f003 fe30 	bl	8005d90 <HAL_GPIO_Init>

}
 8002130:	bf00      	nop
 8002132:	3728      	adds	r7, #40	@ 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	48000800 	.word	0x48000800
 8002140:	48000400 	.word	0x48000400
 8002144:	48000c00 	.word	0x48000c00

08002148 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800214c:	4b1b      	ldr	r3, [pc, #108]	@ (80021bc <MX_I2C3_Init+0x74>)
 800214e:	4a1c      	ldr	r2, [pc, #112]	@ (80021c0 <MX_I2C3_Init+0x78>)
 8002150:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10802D9B;
 8002152:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <MX_I2C3_Init+0x74>)
 8002154:	4a1b      	ldr	r2, [pc, #108]	@ (80021c4 <MX_I2C3_Init+0x7c>)
 8002156:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002158:	4b18      	ldr	r3, [pc, #96]	@ (80021bc <MX_I2C3_Init+0x74>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800215e:	4b17      	ldr	r3, [pc, #92]	@ (80021bc <MX_I2C3_Init+0x74>)
 8002160:	2201      	movs	r2, #1
 8002162:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002164:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <MX_I2C3_Init+0x74>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800216a:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <MX_I2C3_Init+0x74>)
 800216c:	2200      	movs	r2, #0
 800216e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002170:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <MX_I2C3_Init+0x74>)
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002176:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <MX_I2C3_Init+0x74>)
 8002178:	2200      	movs	r2, #0
 800217a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800217c:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <MX_I2C3_Init+0x74>)
 800217e:	2200      	movs	r2, #0
 8002180:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002182:	480e      	ldr	r0, [pc, #56]	@ (80021bc <MX_I2C3_Init+0x74>)
 8002184:	f003 ffb6 	bl	80060f4 <HAL_I2C_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800218e:	f000 ff0f 	bl	8002fb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002192:	2100      	movs	r1, #0
 8002194:	4809      	ldr	r0, [pc, #36]	@ (80021bc <MX_I2C3_Init+0x74>)
 8002196:	f004 f848 	bl	800622a <HAL_I2CEx_ConfigAnalogFilter>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80021a0:	f000 ff06 	bl	8002fb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80021a4:	2100      	movs	r1, #0
 80021a6:	4805      	ldr	r0, [pc, #20]	@ (80021bc <MX_I2C3_Init+0x74>)
 80021a8:	f004 f88a 	bl	80062c0 <HAL_I2CEx_ConfigDigitalFilter>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80021b2:	f000 fefd 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200002c0 	.word	0x200002c0
 80021c0:	40007800 	.word	0x40007800
 80021c4:	10802d9b 	.word	0x10802d9b

080021c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b09e      	sub	sp, #120	@ 0x78
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	2254      	movs	r2, #84	@ 0x54
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f00a faf2 	bl	800c7d2 <memset>
  if(i2cHandle->Instance==I2C3)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002270 <HAL_I2C_MspInit+0xa8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d137      	bne.n	8002268 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80021f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80021fe:	2300      	movs	r3, #0
 8002200:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002202:	f107 0310 	add.w	r3, r7, #16
 8002206:	4618      	mov	r0, r3
 8002208:	f004 fe98 	bl	8006f3c <HAL_RCCEx_PeriphCLKConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002212:	f000 fecd 	bl	8002fb0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002216:	4b17      	ldr	r3, [pc, #92]	@ (8002274 <HAL_I2C_MspInit+0xac>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	4a16      	ldr	r2, [pc, #88]	@ (8002274 <HAL_I2C_MspInit+0xac>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002222:	4b14      	ldr	r3, [pc, #80]	@ (8002274 <HAL_I2C_MspInit+0xac>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800222e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002232:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002234:	2312      	movs	r3, #18
 8002236:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002240:	2308      	movs	r3, #8
 8002242:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002244:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002248:	4619      	mov	r1, r3
 800224a:	480b      	ldr	r0, [pc, #44]	@ (8002278 <HAL_I2C_MspInit+0xb0>)
 800224c:	f003 fda0 	bl	8005d90 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <HAL_I2C_MspInit+0xac>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	4a07      	ldr	r2, [pc, #28]	@ (8002274 <HAL_I2C_MspInit+0xac>)
 8002256:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800225a:	6593      	str	r3, [r2, #88]	@ 0x58
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <HAL_I2C_MspInit+0xac>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002268:	bf00      	nop
 800226a:	3778      	adds	r7, #120	@ 0x78
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40007800 	.word	0x40007800
 8002274:	40021000 	.word	0x40021000
 8002278:	48000800 	.word	0x48000800

0800227c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002280:	f001 fd6f 	bl	8003d62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002284:	f000 f8e2 	bl	800244c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002288:	f7ff fe96 	bl	8001fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 800228c:	f7ff fe62 	bl	8001f54 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002290:	f001 fc94 	bl	8003bbc <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8002294:	f7ff fd64 	bl	8001d60 <MX_ADC1_Init>
  MX_I2C3_Init();
 8002298:	f7ff ff56 	bl	8002148 <MX_I2C3_Init>
  MX_SPI2_Init();
 800229c:	f000 ffb4 	bl	8003208 <MX_SPI2_Init>
  MX_TIM1_Init();
 80022a0:	f001 f988 	bl	80035b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80022a4:	f001 f9e0 	bl	8003668 <MX_TIM2_Init>
  MX_TIM4_Init();
 80022a8:	f001 faae 	bl	8003808 <MX_TIM4_Init>
  MX_TIM3_Init();
 80022ac:	f001 fa5e 	bl	800376c <MX_TIM3_Init>
  MX_TIM5_Init();
 80022b0:	f001 fb00 	bl	80038b4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&GRUZIK.Adc_Value, 1);
 80022b4:	2201      	movs	r2, #1
 80022b6:	494a      	ldr	r1, [pc, #296]	@ (80023e0 <main+0x164>)
 80022b8:	484a      	ldr	r0, [pc, #296]	@ (80023e4 <main+0x168>)
 80022ba:	f002 f99d 	bl	80045f8 <HAL_ADC_Start_DMA>

  	/*Set initial values for PID*/
    GRUZIK.Kp = 0.02;
 80022be:	4b4a      	ldr	r3, [pc, #296]	@ (80023e8 <main+0x16c>)
 80022c0:	4a4a      	ldr	r2, [pc, #296]	@ (80023ec <main+0x170>)
 80022c2:	601a      	str	r2, [r3, #0]
  	GRUZIK.Kd = 0.1;
 80022c4:	4b48      	ldr	r3, [pc, #288]	@ (80023e8 <main+0x16c>)
 80022c6:	4a4a      	ldr	r2, [pc, #296]	@ (80023f0 <main+0x174>)
 80022c8:	605a      	str	r2, [r3, #4]
  	GRUZIK.Speed_offset = 0.014;
 80022ca:	4b47      	ldr	r3, [pc, #284]	@ (80023e8 <main+0x16c>)
 80022cc:	4a49      	ldr	r2, [pc, #292]	@ (80023f4 <main+0x178>)
 80022ce:	635a      	str	r2, [r3, #52]	@ 0x34

  	GRUZIK.Base_speed_R = 120;
 80022d0:	4b45      	ldr	r3, [pc, #276]	@ (80023e8 <main+0x16c>)
 80022d2:	2278      	movs	r2, #120	@ 0x78
 80022d4:	609a      	str	r2, [r3, #8]
  	GRUZIK.Base_speed_L = 120;
 80022d6:	4b44      	ldr	r3, [pc, #272]	@ (80023e8 <main+0x16c>)
 80022d8:	2278      	movs	r2, #120	@ 0x78
 80022da:	60da      	str	r2, [r3, #12]
  	GRUZIK.Max_speed_R = 120;
 80022dc:	4b42      	ldr	r3, [pc, #264]	@ (80023e8 <main+0x16c>)
 80022de:	2278      	movs	r2, #120	@ 0x78
 80022e0:	611a      	str	r2, [r3, #16]
  	GRUZIK.Max_speed_L = 120;
 80022e2:	4b41      	ldr	r3, [pc, #260]	@ (80023e8 <main+0x16c>)
 80022e4:	2278      	movs	r2, #120	@ 0x78
 80022e6:	615a      	str	r2, [r3, #20]

  	/*Sharp turn speed*/
  	GRUZIK.Sharp_bend_speed_right=-70;
 80022e8:	4b3f      	ldr	r3, [pc, #252]	@ (80023e8 <main+0x16c>)
 80022ea:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 80022ee:	619a      	str	r2, [r3, #24]
  	GRUZIK.Sharp_bend_speed_left=85;
 80022f0:	4b3d      	ldr	r3, [pc, #244]	@ (80023e8 <main+0x16c>)
 80022f2:	2255      	movs	r2, #85	@ 0x55
 80022f4:	61da      	str	r2, [r3, #28]
  	GRUZIK.Bend_speed_right=-50;
 80022f6:	4b3c      	ldr	r3, [pc, #240]	@ (80023e8 <main+0x16c>)
 80022f8:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 80022fc:	621a      	str	r2, [r3, #32]
  	GRUZIK.Bend_speed_left=110;
 80022fe:	4b3a      	ldr	r3, [pc, #232]	@ (80023e8 <main+0x16c>)
 8002300:	226e      	movs	r2, #110	@ 0x6e
 8002302:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Start receiving data from Blue tooth*/
    HAL_UART_Receive_IT(&hlpuart1, &RxData, 1);
 8002304:	2201      	movs	r2, #1
 8002306:	493c      	ldr	r1, [pc, #240]	@ (80023f8 <main+0x17c>)
 8002308:	483c      	ldr	r0, [pc, #240]	@ (80023fc <main+0x180>)
 800230a:	f006 fe83 	bl	8009014 <HAL_UART_Receive_IT>

    /*encoders*/
    HAL_TIM_Base_Start_IT(&htim5);// 100
 800230e:	483c      	ldr	r0, [pc, #240]	@ (8002400 <main+0x184>)
 8002310:	f005 f964 	bl	80075dc <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Left Encoder
 8002314:	213c      	movs	r1, #60	@ 0x3c
 8002316:	483b      	ldr	r0, [pc, #236]	@ (8002404 <main+0x188>)
 8002318:	f005 fbf2 	bl	8007b00 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // Right Encoder
 800231c:	213c      	movs	r1, #60	@ 0x3c
 800231e:	483a      	ldr	r0, [pc, #232]	@ (8002408 <main+0x18c>)
 8002320:	f005 fbee 	bl	8007b00 <HAL_TIM_Encoder_Start>

    //         Motor     KP    KI
    Motor_Init(&Motor_R, 0.1, 0.2);//0.1 0.2
 8002324:	eddf 0a39 	vldr	s1, [pc, #228]	@ 800240c <main+0x190>
 8002328:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8002410 <main+0x194>
 800232c:	4839      	ldr	r0, [pc, #228]	@ (8002414 <main+0x198>)
 800232e:	f000 fed9 	bl	80030e4 <Motor_Init>
    Motor_Init(&Motor_L, 0.1, 0.2);
 8002332:	eddf 0a36 	vldr	s1, [pc, #216]	@ 800240c <main+0x190>
 8002336:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8002410 <main+0x194>
 800233a:	4837      	ldr	r0, [pc, #220]	@ (8002418 <main+0x19c>)
 800233c:	f000 fed2 	bl	80030e4 <Motor_Init>
    LowPassFilter_Init(&Motor_R.EncoderRpmFilter, LOW_PASS_FILTER_ALPHA);
 8002340:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 800241c <main+0x1a0>
 8002344:	4836      	ldr	r0, [pc, #216]	@ (8002420 <main+0x1a4>)
 8002346:	f7fe fe85 	bl	8001054 <LowPassFilter_Init>
    LowPassFilter_Init(&Motor_L.EncoderRpmFilter, LOW_PASS_FILTER_ALPHA);
 800234a:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 800241c <main+0x1a0>
 800234e:	4835      	ldr	r0, [pc, #212]	@ (8002424 <main+0x1a8>)
 8002350:	f7fe fe80 	bl	8001054 <LowPassFilter_Init>
    LowPassFilter_Init(&Motor_L.MetersPerSecondLPF, LOW_PASS_FILTER_ALPHA);
 8002354:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 800241c <main+0x1a0>
 8002358:	4833      	ldr	r0, [pc, #204]	@ (8002428 <main+0x1ac>)
 800235a:	f7fe fe7b 	bl	8001054 <LowPassFilter_Init>
    LowPassFilter_Init(&Motor_R.MetersPerSecondLPF, LOW_PASS_FILTER_ALPHA);
 800235e:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800241c <main+0x1a0>
 8002362:	4832      	ldr	r0, [pc, #200]	@ (800242c <main+0x1b0>)
 8002364:	f7fe fe76 	bl	8001054 <LowPassFilter_Init>

	/*Start timers and PWM on channels*/
	HAL_TIM_Base_Start_IT(&htim3);
 8002368:	4831      	ldr	r0, [pc, #196]	@ (8002430 <main+0x1b4>)
 800236a:	f005 f937 	bl	80075dc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//right pwm
 800236e:	2100      	movs	r1, #0
 8002370:	4830      	ldr	r0, [pc, #192]	@ (8002434 <main+0x1b8>)
 8002372:	f005 fa0d 	bl	8007790 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);//left pwm
 8002376:	210c      	movs	r1, #12
 8002378:	482e      	ldr	r0, [pc, #184]	@ (8002434 <main+0x1b8>)
 800237a:	f005 fa09 	bl	8007790 <HAL_TIM_PWM_Start>
//	myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
//	myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
//	MPU6050_Config(&myMpuConfig);

    /*LED diodes initial set*/
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800237e:	2201      	movs	r2, #1
 8002380:	2140      	movs	r1, #64	@ 0x40
 8002382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002386:	f003 fe9d 	bl	80060c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800238a:	2201      	movs	r2, #1
 800238c:	2180      	movs	r1, #128	@ 0x80
 800238e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002392:	f003 fe97 	bl	80060c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8002396:	2201      	movs	r2, #1
 8002398:	2110      	movs	r1, #16
 800239a:	4827      	ldr	r0, [pc, #156]	@ (8002438 <main+0x1bc>)
 800239c:	f003 fe92 	bl	80060c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80023a0:	2201      	movs	r2, #1
 80023a2:	2120      	movs	r1, #32
 80023a4:	4824      	ldr	r0, [pc, #144]	@ (8002438 <main+0x1bc>)
 80023a6:	f003 fe8d 	bl	80060c4 <HAL_GPIO_WritePin>

    /*last sensor out of the tape timer*/
    LastEndTimer = HAL_GetTick();
 80023aa:	f001 fd3f 	bl	8003e2c <HAL_GetTick>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a22      	ldr	r2, [pc, #136]	@ (800243c <main+0x1c0>)
 80023b2:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 80023b4:	f000 fd4c 	bl	8002e50 <PID_control>

	  /*If there is a message form Bluetooth Parser it*/
	  if(ReceivedLines > 0)
 80023b8:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <main+0x1c4>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f9      	beq.n	80023b4 <main+0x138>
	  {
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 80023c0:	4920      	ldr	r1, [pc, #128]	@ (8002444 <main+0x1c8>)
 80023c2:	4821      	ldr	r0, [pc, #132]	@ (8002448 <main+0x1cc>)
 80023c4:	f7fe fed2 	bl	800116c <Parser_TakeLine>
		  Parser_Parse(ReceivedData,&GRUZIK);
 80023c8:	4907      	ldr	r1, [pc, #28]	@ (80023e8 <main+0x16c>)
 80023ca:	481e      	ldr	r0, [pc, #120]	@ (8002444 <main+0x1c8>)
 80023cc:	f7ff fc44 	bl	8001c58 <Parser_Parse>

		  ReceivedLines--;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <main+0x1c4>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <main+0x1c4>)
 80023da:	701a      	strb	r2, [r3, #0]
	  PID_control();
 80023dc:	e7ea      	b.n	80023b4 <main+0x138>
 80023de:	bf00      	nop
 80023e0:	20000340 	.word	0x20000340
 80023e4:	200001f4 	.word	0x200001f4
 80023e8:	20000314 	.word	0x20000314
 80023ec:	3ca3d70a 	.word	0x3ca3d70a
 80023f0:	3dcccccd 	.word	0x3dcccccd
 80023f4:	3c656042 	.word	0x3c656042
 80023f8:	200004d0 	.word	0x200004d0
 80023fc:	20000780 	.word	0x20000780
 8002400:	200006d4 	.word	0x200006d4
 8002404:	20000688 	.word	0x20000688
 8002408:	200005a4 	.word	0x200005a4
 800240c:	3e4ccccd 	.word	0x3e4ccccd
 8002410:	3dcccccd 	.word	0x3dcccccd
 8002414:	200003e0 	.word	0x200003e0
 8002418:	2000034c 	.word	0x2000034c
 800241c:	3f333333 	.word	0x3f333333
 8002420:	20000410 	.word	0x20000410
 8002424:	2000037c 	.word	0x2000037c
 8002428:	20000384 	.word	0x20000384
 800242c:	20000418 	.word	0x20000418
 8002430:	2000063c 	.word	0x2000063c
 8002434:	200005f0 	.word	0x200005f0
 8002438:	48000800 	.word	0x48000800
 800243c:	200004cc 	.word	0x200004cc
 8002440:	20000538 	.word	0x20000538
 8002444:	20000518 	.word	0x20000518
 8002448:	200004d4 	.word	0x200004d4

0800244c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b094      	sub	sp, #80	@ 0x50
 8002450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002452:	f107 0318 	add.w	r3, r7, #24
 8002456:	2238      	movs	r2, #56	@ 0x38
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f00a f9b9 	bl	800c7d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800246e:	2000      	movs	r0, #0
 8002470:	f003 ff82 	bl	8006378 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002474:	f003 ff70 	bl	8006358 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002478:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <SystemClock_Config+0xb0>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247e:	4a1f      	ldr	r2, [pc, #124]	@ (80024fc <SystemClock_Config+0xb0>)
 8002480:	f023 0318 	bic.w	r3, r3, #24
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002488:	2306      	movs	r3, #6
 800248a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800248c:	2301      	movs	r3, #1
 800248e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002490:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002496:	2340      	movs	r3, #64	@ 0x40
 8002498:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800249a:	2302      	movs	r3, #2
 800249c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800249e:	2302      	movs	r3, #2
 80024a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80024a2:	2304      	movs	r3, #4
 80024a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80024a6:	2355      	movs	r3, #85	@ 0x55
 80024a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024aa:	2302      	movs	r3, #2
 80024ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024ae:	2302      	movs	r3, #2
 80024b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024b2:	2302      	movs	r3, #2
 80024b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b6:	f107 0318 	add.w	r3, r7, #24
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 f810 	bl	80064e0 <HAL_RCC_OscConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80024c6:	f000 fd73 	bl	8002fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ca:	230f      	movs	r3, #15
 80024cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ce:	2303      	movs	r3, #3
 80024d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	2104      	movs	r1, #4
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 fb0e 	bl	8006b04 <HAL_RCC_ClockConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80024ee:	f000 fd5f 	bl	8002fb0 <Error_Handler>
  }
}
 80024f2:	bf00      	nop
 80024f4:	3750      	adds	r7, #80	@ 0x50
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000

08002500 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/*Interrupts*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0f      	ldr	r2, [pc, #60]	@ (800254c <HAL_UART_RxCpltCallback+0x4c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d117      	bne.n	8002542 <HAL_UART_RxCpltCallback+0x42>
	{
		if(RB_Write(&ReceiveBuffer, RxData) == RB_OK)
 8002512:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <HAL_UART_RxCpltCallback+0x50>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4619      	mov	r1, r3
 8002518:	480e      	ldr	r0, [pc, #56]	@ (8002554 <HAL_UART_RxCpltCallback+0x54>)
 800251a:	f7fe fdd3 	bl	80010c4 <RB_Write>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HAL_UART_RxCpltCallback+0x38>
		{
			if(RxData == ENDLINE)
 8002524:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_UART_RxCpltCallback+0x50>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b0a      	cmp	r3, #10
 800252a:	d105      	bne.n	8002538 <HAL_UART_RxCpltCallback+0x38>
			{
				ReceivedLines++;
 800252c:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <HAL_UART_RxCpltCallback+0x58>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_UART_RxCpltCallback+0x58>)
 8002536:	701a      	strb	r2, [r3, #0]
			}
		}
    	HAL_UART_Receive_IT(&hlpuart1,&RxData, 1);
 8002538:	2201      	movs	r2, #1
 800253a:	4905      	ldr	r1, [pc, #20]	@ (8002550 <HAL_UART_RxCpltCallback+0x50>)
 800253c:	4807      	ldr	r0, [pc, #28]	@ (800255c <HAL_UART_RxCpltCallback+0x5c>)
 800253e:	f006 fd69 	bl	8009014 <HAL_UART_Receive_IT>
	}
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40008000 	.word	0x40008000
 8002550:	200004d0 	.word	0x200004d0
 8002554:	200004d4 	.word	0x200004d4
 8002558:	20000538 	.word	0x20000538
 800255c:	20000780 	.word	0x20000780

08002560 <HAL_TIM_PeriodElapsedCallback>:
/*Encoders reading at 1KHz */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a10      	ldr	r2, [pc, #64]	@ (80025b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d119      	bne.n	80025a6 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		/*Save last values*/
		Motor_L.EncoderPreviousValue = Motor_L.EncoderValue;
 8002572:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002574:	881a      	ldrh	r2, [r3, #0]
 8002576:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002578:	805a      	strh	r2, [r3, #2]
		Motor_R.EncoderPreviousValue = Motor_R.EncoderValue;
 800257a:	4b0f      	ldr	r3, [pc, #60]	@ (80025b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002580:	805a      	strh	r2, [r3, #2]
		/*Get Encoder values*/
		Motor_L.EncoderValue = __HAL_TIM_GET_COUNTER(&htim4);
 8002582:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	b29a      	uxth	r2, r3
 800258a:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800258c:	801a      	strh	r2, [r3, #0]
		Motor_R.EncoderValue = __HAL_TIM_GET_COUNTER(&htim1);
 800258e:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	b29a      	uxth	r2, r3
 8002596:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002598:	801a      	strh	r2, [r3, #0]

	    Motor_CalculateSpeed(&Motor_R);
 800259a:	4807      	ldr	r0, [pc, #28]	@ (80025b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800259c:	f000 fd0e 	bl	8002fbc <Motor_CalculateSpeed>
	    Motor_CalculateSpeed(&Motor_L);
 80025a0:	4804      	ldr	r0, [pc, #16]	@ (80025b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80025a2:	f000 fd0b 	bl	8002fbc <Motor_CalculateSpeed>
//	    if(Yaw < -180)
//	    {
//	    	Yaw = 180;
//	    }
	}
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40000c00 	.word	0x40000c00
 80025b4:	2000034c 	.word	0x2000034c
 80025b8:	200003e0 	.word	0x200003e0
 80025bc:	20000688 	.word	0x20000688
 80025c0:	200005a4 	.word	0x200005a4

080025c4 <delay_us>:
/*Functions*/
void delay_us (uint16_t us) //Blocking function
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 80025ce:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <delay_us+0x30>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 80025d6:	bf00      	nop
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <delay_us+0x30>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3f9      	bcc.n	80025d8 <delay_us+0x14>
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	2000063c 	.word	0x2000063c

080025f8 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002618:	2301      	movs	r3, #1
 800261a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	4619      	mov	r1, r3
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f003 fbb2 	bl	8005d90 <HAL_GPIO_Init>
}
 800262c:	bf00      	nop
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002650:	887b      	ldrh	r3, [r7, #2]
 8002652:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002658:	2301      	movs	r3, #1
 800265a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800265c:	f107 030c 	add.w	r3, r7, #12
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f003 fb94 	bl	8005d90 <HAL_GPIO_Init>
}
 8002668:	bf00      	nop
 800266a:	3720      	adds	r7, #32
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <motor_control>:


void motor_control (double pos_right, double pos_left)

{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	ed87 0b02 	vstr	d0, [r7, #8]
 800267a:	ed87 1b00 	vstr	d1, [r7]
	#ifdef PI_MOTOR_SPEED_REGULATION
	{
		if (pos_left < 0 )
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	e9d7 0100 	ldrd	r0, r1, [r7]
 800268a:	f7fe fa5f 	bl	8000b4c <__aeabi_dcmplt>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d034      	beq.n	80026fe <motor_control+0x8e>
		{
			Motor_L.set_speed = pos_left * -1;
 8002694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002698:	f7fe fade 	bl	8000c58 <__aeabi_d2f>
 800269c:	4603      	mov	r3, r0
 800269e:	ee07 3a90 	vmov	s15, r3
 80026a2:	eef1 7a67 	vneg.f32	s15, s15
 80026a6:	4b63      	ldr	r3, [pc, #396]	@ (8002834 <motor_control+0x1c4>)
 80026a8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
			PI_Loop(&Motor_L);
 80026ac:	4861      	ldr	r0, [pc, #388]	@ (8002834 <motor_control+0x1c4>)
 80026ae:	f000 fd2f 	bl	8003110 <PI_Loop>

			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_4, (uint32_t)((ARR*Motor_L.speed) * GRUZIK.Speed_level));//PWM_L
 80026b2:	4b61      	ldr	r3, [pc, #388]	@ (8002838 <motor_control+0x1c8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026be:	4b5d      	ldr	r3, [pc, #372]	@ (8002834 <motor_control+0x1c4>)
 80026c0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80026c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c8:	4b5c      	ldr	r3, [pc, #368]	@ (800283c <motor_control+0x1cc>)
 80026ca:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002840 <motor_control+0x1d0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026da:	ee17 2a90 	vmov	r2, s15
 80026de:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(Motor_L_A_GPIO_Port, Motor_L_B_Pin, GPIO_PIN_SET);
 80026e0:	2201      	movs	r2, #1
 80026e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ea:	f003 fceb 	bl	80060c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_L_B_GPIO_Port, Motor_L_A_Pin, GPIO_PIN_RESET);
 80026ee:	2200      	movs	r2, #0
 80026f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026f8:	f003 fce4 	bl	80060c4 <HAL_GPIO_WritePin>
 80026fc:	e02e      	b.n	800275c <motor_control+0xec>

		}
		else
		{
			Motor_L.set_speed = pos_left;
 80026fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002702:	f7fe faa9 	bl	8000c58 <__aeabi_d2f>
 8002706:	4603      	mov	r3, r0
 8002708:	4a4a      	ldr	r2, [pc, #296]	@ (8002834 <motor_control+0x1c4>)
 800270a:	6493      	str	r3, [r2, #72]	@ 0x48
			PI_Loop(&Motor_L);
 800270c:	4849      	ldr	r0, [pc, #292]	@ (8002834 <motor_control+0x1c4>)
 800270e:	f000 fcff 	bl	8003110 <PI_Loop>

			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_4, (uint32_t)((ARR*Motor_L.speed) * GRUZIK.Speed_level));//PWM_L
 8002712:	4b49      	ldr	r3, [pc, #292]	@ (8002838 <motor_control+0x1c8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800271e:	4b45      	ldr	r3, [pc, #276]	@ (8002834 <motor_control+0x1c4>)
 8002720:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002728:	4b44      	ldr	r3, [pc, #272]	@ (800283c <motor_control+0x1cc>)
 800272a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800272e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002732:	4b43      	ldr	r3, [pc, #268]	@ (8002840 <motor_control+0x1d0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800273a:	ee17 2a90 	vmov	r2, s15
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(Motor_L_A_GPIO_Port, Motor_L_B_Pin, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800274a:	f003 fcbb 	bl	80060c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_L_B_GPIO_Port, Motor_L_A_Pin, GPIO_PIN_SET);
 800274e:	2201      	movs	r2, #1
 8002750:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002754:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002758:	f003 fcb4 	bl	80060c4 <HAL_GPIO_WritePin>
		}
		if (pos_right < 0 )
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002768:	f7fe f9f0 	bl	8000b4c <__aeabi_dcmplt>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d030      	beq.n	80027d4 <motor_control+0x164>
		{
			Motor_R.set_speed = pos_right * -1;
 8002772:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002776:	f7fe fa6f 	bl	8000c58 <__aeabi_d2f>
 800277a:	4603      	mov	r3, r0
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eef1 7a67 	vneg.f32	s15, s15
 8002784:	4b2f      	ldr	r3, [pc, #188]	@ (8002844 <motor_control+0x1d4>)
 8002786:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
			PI_Loop(&Motor_R);
 800278a:	482e      	ldr	r0, [pc, #184]	@ (8002844 <motor_control+0x1d4>)
 800278c:	f000 fcc0 	bl	8003110 <PI_Loop>

			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, (uint32_t)((ARR*Motor_R.speed) * GRUZIK.Speed_level));//PWM_R
 8002790:	4b29      	ldr	r3, [pc, #164]	@ (8002838 <motor_control+0x1c8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800279c:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <motor_control+0x1d4>)
 800279e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80027a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a6:	4b25      	ldr	r3, [pc, #148]	@ (800283c <motor_control+0x1cc>)
 80027a8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80027ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b0:	4b23      	ldr	r3, [pc, #140]	@ (8002840 <motor_control+0x1d0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b8:	ee17 2a90 	vmov	r2, s15
 80027bc:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(Motor_R_A_GPIO_Port, Motor_R_A_Pin, GPIO_PIN_SET);
 80027be:	2201      	movs	r2, #1
 80027c0:	2104      	movs	r1, #4
 80027c2:	4821      	ldr	r0, [pc, #132]	@ (8002848 <motor_control+0x1d8>)
 80027c4:	f003 fc7e 	bl	80060c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_R_B_GPIO_Port, Motor_R_B_Pin, GPIO_PIN_RESET);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2108      	movs	r1, #8
 80027cc:	481e      	ldr	r0, [pc, #120]	@ (8002848 <motor_control+0x1d8>)
 80027ce:	f003 fc79 	bl	80060c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_R_B_GPIO_Port, Motor_R_B_Pin, GPIO_PIN_SET);
		}
	}
	#endif

}
 80027d2:	e02a      	b.n	800282a <motor_control+0x1ba>
			Motor_R.set_speed = pos_right;
 80027d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027d8:	f7fe fa3e 	bl	8000c58 <__aeabi_d2f>
 80027dc:	4603      	mov	r3, r0
 80027de:	4a19      	ldr	r2, [pc, #100]	@ (8002844 <motor_control+0x1d4>)
 80027e0:	6493      	str	r3, [r2, #72]	@ 0x48
			PI_Loop(&Motor_R);
 80027e2:	4818      	ldr	r0, [pc, #96]	@ (8002844 <motor_control+0x1d4>)
 80027e4:	f000 fc94 	bl	8003110 <PI_Loop>
			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, (uint32_t)((ARR*Motor_R.speed) * GRUZIK.Speed_level));//PWM_R
 80027e8:	4b13      	ldr	r3, [pc, #76]	@ (8002838 <motor_control+0x1c8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f4:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <motor_control+0x1d4>)
 80027f6:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80027fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027fe:	4b0f      	ldr	r3, [pc, #60]	@ (800283c <motor_control+0x1cc>)
 8002800:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002808:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <motor_control+0x1d0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002810:	ee17 2a90 	vmov	r2, s15
 8002814:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(Motor_R_A_GPIO_Port, Motor_R_A_Pin, GPIO_PIN_RESET);
 8002816:	2200      	movs	r2, #0
 8002818:	2104      	movs	r1, #4
 800281a:	480b      	ldr	r0, [pc, #44]	@ (8002848 <motor_control+0x1d8>)
 800281c:	f003 fc52 	bl	80060c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_R_B_GPIO_Port, Motor_R_B_Pin, GPIO_PIN_SET);
 8002820:	2201      	movs	r2, #1
 8002822:	2108      	movs	r1, #8
 8002824:	4808      	ldr	r0, [pc, #32]	@ (8002848 <motor_control+0x1d8>)
 8002826:	f003 fc4d 	bl	80060c4 <HAL_GPIO_WritePin>
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000034c 	.word	0x2000034c
 8002838:	20000000 	.word	0x20000000
 800283c:	20000314 	.word	0x20000314
 8002840:	200005f0 	.word	0x200005f0
 8002844:	200003e0 	.word	0x200003e0
 8002848:	48000800 	.word	0x48000800

0800284c <sharp_turn>:


void sharp_turn ()
{
 800284c:	b5b0      	push	{r4, r5, r7, lr}
 800284e:	af00      	add	r7, sp, #0

	if (Last_idle < 25)
 8002850:	4b30      	ldr	r3, [pc, #192]	@ (8002914 <sharp_turn+0xc8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b18      	cmp	r3, #24
 8002856:	dc2d      	bgt.n	80028b4 <sharp_turn+0x68>
	{
		if (Last_end == 1)
 8002858:	4b2f      	ldr	r3, [pc, #188]	@ (8002918 <sharp_turn+0xcc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d114      	bne.n	800288a <sharp_turn+0x3e>
			motor_control(GRUZIK.Sharp_bend_speed_right, GRUZIK.Sharp_bend_speed_left);
 8002860:	4b2e      	ldr	r3, [pc, #184]	@ (800291c <sharp_turn+0xd0>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fe95 	bl	8000594 <__aeabi_i2d>
 800286a:	4604      	mov	r4, r0
 800286c:	460d      	mov	r5, r1
 800286e:	4b2b      	ldr	r3, [pc, #172]	@ (800291c <sharp_turn+0xd0>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fe8e 	bl	8000594 <__aeabi_i2d>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	ec43 2b11 	vmov	d1, r2, r3
 8002880:	ec45 4b10 	vmov	d0, r4, r5
 8002884:	f7ff fef4 	bl	8002670 <motor_control>
		if (Last_end == 1)
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
		else
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
	}
}
 8002888:	e041      	b.n	800290e <sharp_turn+0xc2>
			motor_control(GRUZIK.Sharp_bend_speed_left, GRUZIK.Sharp_bend_speed_right);
 800288a:	4b24      	ldr	r3, [pc, #144]	@ (800291c <sharp_turn+0xd0>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe80 	bl	8000594 <__aeabi_i2d>
 8002894:	4604      	mov	r4, r0
 8002896:	460d      	mov	r5, r1
 8002898:	4b20      	ldr	r3, [pc, #128]	@ (800291c <sharp_turn+0xd0>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fe79 	bl	8000594 <__aeabi_i2d>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	ec43 2b11 	vmov	d1, r2, r3
 80028aa:	ec45 4b10 	vmov	d0, r4, r5
 80028ae:	f7ff fedf 	bl	8002670 <motor_control>
}
 80028b2:	e02c      	b.n	800290e <sharp_turn+0xc2>
		if (Last_end == 1)
 80028b4:	4b18      	ldr	r3, [pc, #96]	@ (8002918 <sharp_turn+0xcc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d114      	bne.n	80028e6 <sharp_turn+0x9a>
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
 80028bc:	4b17      	ldr	r3, [pc, #92]	@ (800291c <sharp_turn+0xd0>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fe67 	bl	8000594 <__aeabi_i2d>
 80028c6:	4604      	mov	r4, r0
 80028c8:	460d      	mov	r5, r1
 80028ca:	4b14      	ldr	r3, [pc, #80]	@ (800291c <sharp_turn+0xd0>)
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fe60 	bl	8000594 <__aeabi_i2d>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	ec43 2b11 	vmov	d1, r2, r3
 80028dc:	ec45 4b10 	vmov	d0, r4, r5
 80028e0:	f7ff fec6 	bl	8002670 <motor_control>
}
 80028e4:	e013      	b.n	800290e <sharp_turn+0xc2>
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
 80028e6:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <sharp_turn+0xd0>)
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fe52 	bl	8000594 <__aeabi_i2d>
 80028f0:	4604      	mov	r4, r0
 80028f2:	460d      	mov	r5, r1
 80028f4:	4b09      	ldr	r3, [pc, #36]	@ (800291c <sharp_turn+0xd0>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fe4b 	bl	8000594 <__aeabi_i2d>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	ec43 2b11 	vmov	d1, r2, r3
 8002906:	ec45 4b10 	vmov	d0, r4, r5
 800290a:	f7ff feb1 	bl	8002670 <motor_control>
}
 800290e:	bf00      	nop
 8002910:	bdb0      	pop	{r4, r5, r7, pc}
 8002912:	bf00      	nop
 8002914:	200004c4 	.word	0x200004c4
 8002918:	200004c0 	.word	0x200004c0
 800291c:	20000314 	.word	0x20000314

08002920 <QTR8_read>:
int QTR8_read ()
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 8002926:	2201      	movs	r2, #1
 8002928:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800292c:	48bd      	ldr	r0, [pc, #756]	@ (8002c24 <QTR8_read+0x304>)
 800292e:	f003 fbc9 	bl	80060c4 <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8002932:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002936:	48bc      	ldr	r0, [pc, #752]	@ (8002c28 <QTR8_read+0x308>)
 8002938:	f7ff fe5e 	bl	80025f8 <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 800293c:	2180      	movs	r1, #128	@ 0x80
 800293e:	48ba      	ldr	r0, [pc, #744]	@ (8002c28 <QTR8_read+0x308>)
 8002940:	f7ff fe5a 	bl	80025f8 <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8002944:	2140      	movs	r1, #64	@ 0x40
 8002946:	48b8      	ldr	r0, [pc, #736]	@ (8002c28 <QTR8_read+0x308>)
 8002948:	f7ff fe56 	bl	80025f8 <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 800294c:	2120      	movs	r1, #32
 800294e:	48b6      	ldr	r0, [pc, #728]	@ (8002c28 <QTR8_read+0x308>)
 8002950:	f7ff fe52 	bl	80025f8 <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8002954:	2110      	movs	r1, #16
 8002956:	48b4      	ldr	r0, [pc, #720]	@ (8002c28 <QTR8_read+0x308>)
 8002958:	f7ff fe4e 	bl	80025f8 <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 800295c:	2104      	movs	r1, #4
 800295e:	48b3      	ldr	r0, [pc, #716]	@ (8002c2c <QTR8_read+0x30c>)
 8002960:	f7ff fe4a 	bl	80025f8 <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8002964:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002968:	48ae      	ldr	r0, [pc, #696]	@ (8002c24 <QTR8_read+0x304>)
 800296a:	f7ff fe45 	bl	80025f8 <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 800296e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002972:	48ac      	ldr	r0, [pc, #688]	@ (8002c24 <QTR8_read+0x304>)
 8002974:	f7ff fe40 	bl	80025f8 <Set_Pin_Output>
	Set_Pin_Output(SENSOR9_GPIO_Port, SENSOR9_Pin);
 8002978:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800297c:	48a9      	ldr	r0, [pc, #676]	@ (8002c24 <QTR8_read+0x304>)
 800297e:	f7ff fe3b 	bl	80025f8 <Set_Pin_Output>
	Set_Pin_Output(SENSOR10_GPIO_Port, SENSOR10_Pin);
 8002982:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800298a:	f7ff fe35 	bl	80025f8 <Set_Pin_Output>
	Set_Pin_Output(SENSOR11_GPIO_Port, SENSOR11_Pin);
 800298e:	2110      	movs	r1, #16
 8002990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002994:	f7ff fe30 	bl	80025f8 <Set_Pin_Output>
	Set_Pin_Output(SENSOR12_GPIO_Port, SENSOR12_Pin);
 8002998:	2120      	movs	r1, #32
 800299a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800299e:	f7ff fe2b 	bl	80025f8 <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 80029a2:	2201      	movs	r2, #1
 80029a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029a8:	489f      	ldr	r0, [pc, #636]	@ (8002c28 <QTR8_read+0x308>)
 80029aa:	f003 fb8b 	bl	80060c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 80029ae:	2201      	movs	r2, #1
 80029b0:	2180      	movs	r1, #128	@ 0x80
 80029b2:	489d      	ldr	r0, [pc, #628]	@ (8002c28 <QTR8_read+0x308>)
 80029b4:	f003 fb86 	bl	80060c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 80029b8:	2201      	movs	r2, #1
 80029ba:	2140      	movs	r1, #64	@ 0x40
 80029bc:	489a      	ldr	r0, [pc, #616]	@ (8002c28 <QTR8_read+0x308>)
 80029be:	f003 fb81 	bl	80060c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 80029c2:	2201      	movs	r2, #1
 80029c4:	2120      	movs	r1, #32
 80029c6:	4898      	ldr	r0, [pc, #608]	@ (8002c28 <QTR8_read+0x308>)
 80029c8:	f003 fb7c 	bl	80060c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 80029cc:	2201      	movs	r2, #1
 80029ce:	2110      	movs	r1, #16
 80029d0:	4895      	ldr	r0, [pc, #596]	@ (8002c28 <QTR8_read+0x308>)
 80029d2:	f003 fb77 	bl	80060c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 80029d6:	2201      	movs	r2, #1
 80029d8:	2104      	movs	r1, #4
 80029da:	4894      	ldr	r0, [pc, #592]	@ (8002c2c <QTR8_read+0x30c>)
 80029dc:	f003 fb72 	bl	80060c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 80029e0:	2201      	movs	r2, #1
 80029e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029e6:	488f      	ldr	r0, [pc, #572]	@ (8002c24 <QTR8_read+0x304>)
 80029e8:	f003 fb6c 	bl	80060c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 80029ec:	2201      	movs	r2, #1
 80029ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029f2:	488c      	ldr	r0, [pc, #560]	@ (8002c24 <QTR8_read+0x304>)
 80029f4:	f003 fb66 	bl	80060c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR9_GPIO_Port, SENSOR9_Pin, 1);
 80029f8:	2201      	movs	r2, #1
 80029fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029fe:	4889      	ldr	r0, [pc, #548]	@ (8002c24 <QTR8_read+0x304>)
 8002a00:	f003 fb60 	bl	80060c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR10_GPIO_Port, SENSOR10_Pin, 1);
 8002a04:	2201      	movs	r2, #1
 8002a06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a0e:	f003 fb59 	bl	80060c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR11_GPIO_Port, SENSOR11_Pin, 1);
 8002a12:	2201      	movs	r2, #1
 8002a14:	2110      	movs	r1, #16
 8002a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a1a:	f003 fb53 	bl	80060c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR12_GPIO_Port, SENSOR12_Pin, 1);
 8002a1e:	2201      	movs	r2, #1
 8002a20:	2120      	movs	r1, #32
 8002a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a26:	f003 fb4d 	bl	80060c4 <HAL_GPIO_WritePin>

	delay_us(10);
 8002a2a:	200a      	movs	r0, #10
 8002a2c:	f7ff fdca 	bl	80025c4 <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8002a30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a34:	487c      	ldr	r0, [pc, #496]	@ (8002c28 <QTR8_read+0x308>)
 8002a36:	f7ff fdfd 	bl	8002634 <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8002a3a:	2180      	movs	r1, #128	@ 0x80
 8002a3c:	487a      	ldr	r0, [pc, #488]	@ (8002c28 <QTR8_read+0x308>)
 8002a3e:	f7ff fdf9 	bl	8002634 <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8002a42:	2140      	movs	r1, #64	@ 0x40
 8002a44:	4878      	ldr	r0, [pc, #480]	@ (8002c28 <QTR8_read+0x308>)
 8002a46:	f7ff fdf5 	bl	8002634 <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8002a4a:	2120      	movs	r1, #32
 8002a4c:	4876      	ldr	r0, [pc, #472]	@ (8002c28 <QTR8_read+0x308>)
 8002a4e:	f7ff fdf1 	bl	8002634 <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8002a52:	2110      	movs	r1, #16
 8002a54:	4874      	ldr	r0, [pc, #464]	@ (8002c28 <QTR8_read+0x308>)
 8002a56:	f7ff fded 	bl	8002634 <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	4873      	ldr	r0, [pc, #460]	@ (8002c2c <QTR8_read+0x30c>)
 8002a5e:	f7ff fde9 	bl	8002634 <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8002a62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a66:	486f      	ldr	r0, [pc, #444]	@ (8002c24 <QTR8_read+0x304>)
 8002a68:	f7ff fde4 	bl	8002634 <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8002a6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a70:	486c      	ldr	r0, [pc, #432]	@ (8002c24 <QTR8_read+0x304>)
 8002a72:	f7ff fddf 	bl	8002634 <Set_Pin_Input>
	Set_Pin_Input(SENSOR9_GPIO_Port, SENSOR9_Pin);
 8002a76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a7a:	486a      	ldr	r0, [pc, #424]	@ (8002c24 <QTR8_read+0x304>)
 8002a7c:	f7ff fdda 	bl	8002634 <Set_Pin_Input>
	Set_Pin_Input(SENSOR10_GPIO_Port, SENSOR10_Pin);
 8002a80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a88:	f7ff fdd4 	bl	8002634 <Set_Pin_Input>
	Set_Pin_Input(SENSOR11_GPIO_Port, SENSOR11_Pin);
 8002a8c:	2110      	movs	r1, #16
 8002a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a92:	f7ff fdcf 	bl	8002634 <Set_Pin_Input>
	Set_Pin_Input(SENSOR12_GPIO_Port, SENSOR12_Pin);
 8002a96:	2120      	movs	r1, #32
 8002a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a9c:	f7ff fdca 	bl	8002634 <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 8002aa0:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002aa4:	f7ff fd8e 	bl	80025c4 <delay_us>
//	 uint8_t Message[124];
//	 sprintf((char*)Message,"S1: %d S2: %d S3: %d S4: %d S5: %d S6: %d S7: %d S8: %d S9: %d S10: %d S11: %d S12: %d \n\r", sensory[0],sensory[1],sensory[2],sensory[3],sensory[4],sensory[5],sensory[6],sensory[7],
//			 sensory[8],sensory[9],sensory[10],sensory[11]);
//	 HAL_UART_Transmit(&hlpuart1, Message, strlen((char*)Message), 100);

	Sensors_read = 0x00000000;
 8002aa8:	4b61      	ldr	r3, [pc, #388]	@ (8002c30 <QTR8_read+0x310>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
	int pos = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
  int active = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) { // LEFT SIDE
 8002ab6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002aba:	485b      	ldr	r0, [pc, #364]	@ (8002c28 <QTR8_read+0x308>)
 8002abc:	f003 faea 	bl	8006094 <HAL_GPIO_ReadPin>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d01c      	beq.n	8002b00 <QTR8_read+0x1e0>
		Sensors_read |= 0x000000000001;
 8002ac6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c30 <QTR8_read+0x310>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	4a58      	ldr	r2, [pc, #352]	@ (8002c30 <QTR8_read+0x310>)
 8002ad0:	6013      	str	r3, [r2, #0]
		pos += 1000 * SENSOR_SCALE;//1000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002ad8:	607b      	str	r3, [r7, #4]
		active++;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	3301      	adds	r3, #1
 8002ade:	603b      	str	r3, [r7, #0]
		if(HAL_GetTick() > (LastEndTimer + 50))
 8002ae0:	f001 f9a4 	bl	8003e2c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b53      	ldr	r3, [pc, #332]	@ (8002c34 <QTR8_read+0x314>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3332      	adds	r3, #50	@ 0x32
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d907      	bls.n	8002b00 <QTR8_read+0x1e0>
		{
			LastEndTimer = HAL_GetTick();
 8002af0:	f001 f99c 	bl	8003e2c <HAL_GetTick>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4a4f      	ldr	r2, [pc, #316]	@ (8002c34 <QTR8_read+0x314>)
 8002af8:	6013      	str	r3, [r2, #0]
			Last_end = 1;
 8002afa:	4b4f      	ldr	r3, [pc, #316]	@ (8002c38 <QTR8_read+0x318>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
		}
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8002b00:	2180      	movs	r1, #128	@ 0x80
 8002b02:	4849      	ldr	r0, [pc, #292]	@ (8002c28 <QTR8_read+0x308>)
 8002b04:	f003 fac6 	bl	8006094 <HAL_GPIO_ReadPin>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00c      	beq.n	8002b28 <QTR8_read+0x208>
		Sensors_read |= 0x000000000010;
 8002b0e:	4b48      	ldr	r3, [pc, #288]	@ (8002c30 <QTR8_read+0x310>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f043 0310 	orr.w	r3, r3, #16
 8002b16:	4a46      	ldr	r2, [pc, #280]	@ (8002c30 <QTR8_read+0x310>)
 8002b18:	6013      	str	r3, [r2, #0]
		pos += 2000 * SENSOR_SCALE;//2000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002b20:	607b      	str	r3, [r7, #4]
    active++;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	603b      	str	r3, [r7, #0]
    	//Last_end = 1;//1
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8002b28:	2140      	movs	r1, #64	@ 0x40
 8002b2a:	483f      	ldr	r0, [pc, #252]	@ (8002c28 <QTR8_read+0x308>)
 8002b2c:	f003 fab2 	bl	8006094 <HAL_GPIO_ReadPin>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00c      	beq.n	8002b50 <QTR8_read+0x230>
		Sensors_read |= 0x000000000100;
 8002b36:	4b3e      	ldr	r3, [pc, #248]	@ (8002c30 <QTR8_read+0x310>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b3e:	4a3c      	ldr	r2, [pc, #240]	@ (8002c30 <QTR8_read+0x310>)
 8002b40:	6013      	str	r3, [r2, #0]
		pos += 3000 * SENSOR_SCALE;//3000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8002b48:	607b      	str	r3, [r7, #4]
    active++;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	603b      	str	r3, [r7, #0]
    	//Last_end = 1;//1
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8002b50:	2120      	movs	r1, #32
 8002b52:	4835      	ldr	r0, [pc, #212]	@ (8002c28 <QTR8_read+0x308>)
 8002b54:	f003 fa9e 	bl	8006094 <HAL_GPIO_ReadPin>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <QTR8_read+0x258>
		Sensors_read |= 0x000000001000;
 8002b5e:	4b34      	ldr	r3, [pc, #208]	@ (8002c30 <QTR8_read+0x310>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b66:	4a32      	ldr	r2, [pc, #200]	@ (8002c30 <QTR8_read+0x310>)
 8002b68:	6013      	str	r3, [r2, #0]
		pos += 4000 * SENSOR_SCALE;//4000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f503 637a 	add.w	r3, r3, #4000	@ 0xfa0
 8002b70:	607b      	str	r3, [r7, #4]
    active++;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8002b78:	2110      	movs	r1, #16
 8002b7a:	482b      	ldr	r0, [pc, #172]	@ (8002c28 <QTR8_read+0x308>)
 8002b7c:	f003 fa8a 	bl	8006094 <HAL_GPIO_ReadPin>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <QTR8_read+0x282>
		Sensors_read |= 0x000000010000;
 8002b86:	4b2a      	ldr	r3, [pc, #168]	@ (8002c30 <QTR8_read+0x310>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8e:	4a28      	ldr	r2, [pc, #160]	@ (8002c30 <QTR8_read+0x310>)
 8002b90:	6013      	str	r3, [r2, #0]
		pos += 5000 * SENSOR_SCALE;//5000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8002b98:	3308      	adds	r3, #8
 8002b9a:	607b      	str	r3, [r7, #4]
    active++;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 8002ba2:	2104      	movs	r1, #4
 8002ba4:	4821      	ldr	r0, [pc, #132]	@ (8002c2c <QTR8_read+0x30c>)
 8002ba6:	f003 fa75 	bl	8006094 <HAL_GPIO_ReadPin>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00d      	beq.n	8002bcc <QTR8_read+0x2ac>
		Sensors_read |= 0x000000100000;
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <QTR8_read+0x310>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c30 <QTR8_read+0x310>)
 8002bba:	6013      	str	r3, [r2, #0]
		pos += 6000 * SENSOR_SCALE;//6000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8002bc2:	3310      	adds	r3, #16
 8002bc4:	607b      	str	r3, [r7, #4]
    active++;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 8002bcc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bd0:	4814      	ldr	r0, [pc, #80]	@ (8002c24 <QTR8_read+0x304>)
 8002bd2:	f003 fa5f 	bl	8006094 <HAL_GPIO_ReadPin>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00d      	beq.n	8002bf8 <QTR8_read+0x2d8>
		Sensors_read |= 0x000001000000;
 8002bdc:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <QTR8_read+0x310>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002be4:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <QTR8_read+0x310>)
 8002be6:	6013      	str	r3, [r2, #0]
		pos += 7000 * SENSOR_SCALE;//7000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f503 53da 	add.w	r3, r3, #6976	@ 0x1b40
 8002bee:	3318      	adds	r3, #24
 8002bf0:	607b      	str	r3, [r7, #4]
    active++;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 8002bf8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bfc:	4809      	ldr	r0, [pc, #36]	@ (8002c24 <QTR8_read+0x304>)
 8002bfe:	f003 fa49 	bl	8006094 <HAL_GPIO_ReadPin>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d019      	beq.n	8002c3c <QTR8_read+0x31c>
		Sensors_read |= 0x000010000000;
 8002c08:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <QTR8_read+0x310>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	4a07      	ldr	r2, [pc, #28]	@ (8002c30 <QTR8_read+0x310>)
 8002c12:	6013      	str	r3, [r2, #0]
		pos += 8000 * SENSOR_SCALE;//8000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 8002c1a:	607b      	str	r3, [r7, #4]
    active++;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	e00b      	b.n	8002c3c <QTR8_read+0x31c>
 8002c24:	48000800 	.word	0x48000800
 8002c28:	48000400 	.word	0x48000400
 8002c2c:	48000c00 	.word	0x48000c00
 8002c30:	20000474 	.word	0x20000474
 8002c34:	200004cc 	.word	0x200004cc
 8002c38:	200004c0 	.word	0x200004c0
  }
  if (HAL_GPIO_ReadPin(SENSOR9_GPIO_Port, SENSOR9_Pin)) {
 8002c3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c40:	4841      	ldr	r0, [pc, #260]	@ (8002d48 <QTR8_read+0x428>)
 8002c42:	f003 fa27 	bl	8006094 <HAL_GPIO_ReadPin>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00b      	beq.n	8002c64 <QTR8_read+0x344>
	   Sensors_read |= 0x000100000000;
 8002c4c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d4c <QTR8_read+0x42c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3e      	ldr	r2, [pc, #248]	@ (8002d4c <QTR8_read+0x42c>)
 8002c52:	6013      	str	r3, [r2, #0]
	   pos += 9000 * SENSOR_SCALE;//8000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8002c5a:	3328      	adds	r3, #40	@ 0x28
 8002c5c:	607b      	str	r3, [r7, #4]
	active++;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	603b      	str	r3, [r7, #0]

  }
  if (HAL_GPIO_ReadPin(SENSOR10_GPIO_Port, SENSOR10_Pin)) {
 8002c64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c6c:	f003 fa12 	bl	8006094 <HAL_GPIO_ReadPin>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <QTR8_read+0x36e>
	   Sensors_read |= 0x001000000000;
 8002c76:	4b35      	ldr	r3, [pc, #212]	@ (8002d4c <QTR8_read+0x42c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a34      	ldr	r2, [pc, #208]	@ (8002d4c <QTR8_read+0x42c>)
 8002c7c:	6013      	str	r3, [r2, #0]
	   pos += 10000 * SENSOR_SCALE;//8000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8002c84:	3310      	adds	r3, #16
 8002c86:	607b      	str	r3, [r7, #4]
    active++;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	603b      	str	r3, [r7, #0]
	  // Last_end = 0;//0
  }
  if (HAL_GPIO_ReadPin(SENSOR11_GPIO_Port, SENSOR11_Pin)) {
 8002c8e:	2110      	movs	r1, #16
 8002c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c94:	f003 f9fe 	bl	8006094 <HAL_GPIO_ReadPin>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <QTR8_read+0x396>
	   Sensors_read |= 0x010000000000;
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <QTR8_read+0x42c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8002d4c <QTR8_read+0x42c>)
 8002ca4:	6013      	str	r3, [r2, #0]
	   pos += 11000 * SENSOR_SCALE;//8000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8002cac:	3338      	adds	r3, #56	@ 0x38
 8002cae:	607b      	str	r3, [r7, #4]
    active++;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	603b      	str	r3, [r7, #0]
	  // Last_end = 0;//0
  }
  if (HAL_GPIO_ReadPin(SENSOR12_GPIO_Port, SENSOR12_Pin)) { // RIGH SIDE
 8002cb6:	2120      	movs	r1, #32
 8002cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cbc:	f003 f9ea 	bl	8006094 <HAL_GPIO_ReadPin>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01b      	beq.n	8002cfe <QTR8_read+0x3de>
	   Sensors_read |= 0x100000000000;
 8002cc6:	4b21      	ldr	r3, [pc, #132]	@ (8002d4c <QTR8_read+0x42c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a20      	ldr	r2, [pc, #128]	@ (8002d4c <QTR8_read+0x42c>)
 8002ccc:	6013      	str	r3, [r2, #0]
	   pos += 12000 * SENSOR_SCALE;//8000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8002cd4:	3320      	adds	r3, #32
 8002cd6:	607b      	str	r3, [r7, #4]
       active++;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	603b      	str	r3, [r7, #0]

        if(HAL_GetTick() > (LastEndTimer + 50))
 8002cde:	f001 f8a5 	bl	8003e2c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <QTR8_read+0x430>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3332      	adds	r3, #50	@ 0x32
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d907      	bls.n	8002cfe <QTR8_read+0x3de>
		{
			LastEndTimer = HAL_GetTick();
 8002cee:	f001 f89d 	bl	8003e2c <HAL_GetTick>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a16      	ldr	r2, [pc, #88]	@ (8002d50 <QTR8_read+0x430>)
 8002cf6:	6013      	str	r3, [r2, #0]
			Last_end = 0;
 8002cf8:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <QTR8_read+0x434>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
		}
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d04:	4810      	ldr	r0, [pc, #64]	@ (8002d48 <QTR8_read+0x428>)
 8002d06:	f003 f9dd 	bl	80060c4 <HAL_GPIO_WritePin>

  actives = active;
 8002d0a:	4a13      	ldr	r2, [pc, #76]	@ (8002d58 <QTR8_read+0x438>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6013      	str	r3, [r2, #0]
	Position = pos/active;
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d18:	4a10      	ldr	r2, [pc, #64]	@ (8002d5c <QTR8_read+0x43c>)
 8002d1a:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d58 <QTR8_read+0x438>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <QTR8_read+0x410>
		Last_idle++;
 8002d24:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <QTR8_read+0x440>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d60 <QTR8_read+0x440>)
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e002      	b.n	8002d36 <QTR8_read+0x416>
	else
		Last_idle = 0;
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <QTR8_read+0x440>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]

	return pos/active;
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	48000800 	.word	0x48000800
 8002d4c:	20000474 	.word	0x20000474
 8002d50:	200004cc 	.word	0x200004cc
 8002d54:	200004c0 	.word	0x200004c0
 8002d58:	200004c8 	.word	0x200004c8
 8002d5c:	20000478 	.word	0x20000478
 8002d60:	200004c4 	.word	0x200004c4

08002d64 <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 8002d64:	b5b0      	push	{r4, r5, r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <forward_brake+0x40>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <forward_brake+0x18>
		sharp_turn();
 8002d76:	f7ff fd69 	bl	800284c <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 8002d7a:	e00f      	b.n	8002d9c <forward_brake+0x38>
	  motor_control(pos_right, pos_left);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7fd fc09 	bl	8000594 <__aeabi_i2d>
 8002d82:	4604      	mov	r4, r0
 8002d84:	460d      	mov	r5, r1
 8002d86:	6838      	ldr	r0, [r7, #0]
 8002d88:	f7fd fc04 	bl	8000594 <__aeabi_i2d>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	ec43 2b11 	vmov	d1, r2, r3
 8002d94:	ec45 4b10 	vmov	d0, r4, r5
 8002d98:	f7ff fc6a 	bl	8002670 <motor_control>
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bdb0      	pop	{r4, r5, r7, pc}
 8002da4:	200004c8 	.word	0x200004c8

08002da8 <past_errors>:

void past_errors (int error)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 8002db0:	2309      	movs	r3, #9
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e00b      	b.n	8002dce <past_errors+0x26>
      Errors[i] = Errors[i-1];
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	4a0b      	ldr	r2, [pc, #44]	@ (8002de8 <past_errors+0x40>)
 8002dbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002dc0:	4909      	ldr	r1, [pc, #36]	@ (8002de8 <past_errors+0x40>)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	dcf0      	bgt.n	8002db6 <past_errors+0xe>
  Errors[0] = error;
 8002dd4:	4a04      	ldr	r2, [pc, #16]	@ (8002de8 <past_errors+0x40>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6013      	str	r3, [r2, #0]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000498 	.word	0x20000498

08002dec <errors_sum>:

int errors_sum (int index, int abs)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  int sum = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	e01a      	b.n	8002e36 <errors_sum+0x4a>
  {
    if (abs == 1 && Errors[i] < 0)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d10d      	bne.n	8002e22 <errors_sum+0x36>
 8002e06:	4a11      	ldr	r2, [pc, #68]	@ (8002e4c <errors_sum+0x60>)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	da07      	bge.n	8002e22 <errors_sum+0x36>
      sum += -Errors[i];
 8002e12:	4a0e      	ldr	r2, [pc, #56]	@ (8002e4c <errors_sum+0x60>)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	e006      	b.n	8002e30 <errors_sum+0x44>
    else
      sum += Errors[i];
 8002e22:	4a0a      	ldr	r2, [pc, #40]	@ (8002e4c <errors_sum+0x60>)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	3301      	adds	r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	dbe0      	blt.n	8002e00 <errors_sum+0x14>
  }
  return sum;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	20000498 	.word	0x20000498

08002e50 <PID_control>:

void PID_control()
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 8002e56:	f7ff fd63 	bl	8002920 <QTR8_read>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	81fb      	strh	r3, [r7, #14]
  int error = (6500 * SENSOR_SCALE) - position;
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	f5c3 53cb 	rsb	r3, r3, #6496	@ 0x1960
 8002e64:	3304      	adds	r3, #4
 8002e66:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8002e68:	68b8      	ldr	r0, [r7, #8]
 8002e6a:	f7ff ff9d 	bl	8002da8 <past_errors>

  P = error;
 8002e6e:	4a48      	ldr	r2, [pc, #288]	@ (8002f90 <PID_control+0x140>)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 8002e74:	2100      	movs	r1, #0
 8002e76:	2005      	movs	r0, #5
 8002e78:	f7ff ffb8 	bl	8002dec <errors_sum>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4a45      	ldr	r2, [pc, #276]	@ (8002f94 <PID_control+0x144>)
 8002e80:	6013      	str	r3, [r2, #0]
  D = error - Last_error;
 8002e82:	4b45      	ldr	r3, [pc, #276]	@ (8002f98 <PID_control+0x148>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	4a44      	ldr	r2, [pc, #272]	@ (8002f9c <PID_control+0x14c>)
 8002e8c:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 8002e8e:	2101      	movs	r1, #1
 8002e90:	2005      	movs	r0, #5
 8002e92:	f7ff ffab 	bl	8002dec <errors_sum>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4a41      	ldr	r2, [pc, #260]	@ (8002fa0 <PID_control+0x150>)
 8002e9a:	6013      	str	r3, [r2, #0]
  Last_error = error;
 8002e9c:	4a3e      	ldr	r2, [pc, #248]	@ (8002f98 <PID_control+0x148>)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	6013      	str	r3, [r2, #0]

  int motorspeed = P*GRUZIK.Kp + I*Ki + D*GRUZIK.Kd;
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8002f90 <PID_control+0x140>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eae:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa4 <PID_control+0x154>)
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb8:	4b36      	ldr	r3, [pc, #216]	@ (8002f94 <PID_control+0x144>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	ee07 3a90 	vmov	s15, r3
 8002ec0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ec4:	4b38      	ldr	r3, [pc, #224]	@ (8002fa8 <PID_control+0x158>)
 8002ec6:	edd3 7a00 	vldr	s15, [r3]
 8002eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ece:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed2:	4b32      	ldr	r3, [pc, #200]	@ (8002f9c <PID_control+0x14c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ede:	4b31      	ldr	r3, [pc, #196]	@ (8002fa4 <PID_control+0x154>)
 8002ee0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ef0:	ee17 3a90 	vmov	r3, s15
 8002ef4:	607b      	str	r3, [r7, #4]

  int motorspeedl = GRUZIK.Base_speed_L + motorspeed - R*Kr;
 8002ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa4 <PID_control+0x154>)
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f06:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <PID_control+0x150>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f12:	4b26      	ldr	r3, [pc, #152]	@ (8002fac <PID_control+0x15c>)
 8002f14:	edd3 7a00 	vldr	s15, [r3]
 8002f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f24:	ee17 3a90 	vmov	r3, s15
 8002f28:	617b      	str	r3, [r7, #20]
  int motorspeedr = GRUZIK.Base_speed_R - motorspeed - R*Kr;
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <PID_control+0x154>)
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f3a:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <PID_control+0x150>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f46:	4b19      	ldr	r3, [pc, #100]	@ (8002fac <PID_control+0x15c>)
 8002f48:	edd3 7a00 	vldr	s15, [r3]
 8002f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f58:	ee17 3a90 	vmov	r3, s15
 8002f5c:	613b      	str	r3, [r7, #16]

  if (motorspeedl > GRUZIK.Max_speed_L)
 8002f5e:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <PID_control+0x154>)
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	dd02      	ble.n	8002f6e <PID_control+0x11e>
    motorspeedl = GRUZIK.Max_speed_L;
 8002f68:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa4 <PID_control+0x154>)
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	617b      	str	r3, [r7, #20]
  if (motorspeedr > GRUZIK.Max_speed_R)
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa4 <PID_control+0x154>)
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	dd02      	ble.n	8002f7e <PID_control+0x12e>
    motorspeedr = GRUZIK.Max_speed_R;
 8002f78:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <PID_control+0x154>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	613b      	str	r3, [r7, #16]

	forward_brake(motorspeedr, motorspeedl);
 8002f7e:	6979      	ldr	r1, [r7, #20]
 8002f80:	6938      	ldr	r0, [r7, #16]
 8002f82:	f7ff feef 	bl	8002d64 <forward_brake>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000484 	.word	0x20000484
 8002f94:	20000488 	.word	0x20000488
 8002f98:	20000494 	.word	0x20000494
 8002f9c:	2000048c 	.word	0x2000048c
 8002fa0:	20000490 	.word	0x20000490
 8002fa4:	20000314 	.word	0x20000314
 8002fa8:	2000047c 	.word	0x2000047c
 8002fac:	20000480 	.word	0x20000480

08002fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb4:	b672      	cpsid	i
}
 8002fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <Error_Handler+0x8>

08002fbc <Motor_CalculateSpeed>:
	{
		motor->PreviousRPMs[i] = rpm_tmp[i];
	}
}
void Motor_CalculateSpeed(motor_t *motor)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	//How many impulses did we get ?
	int impulses;
	impulses = (int32_t)motor->EncoderValue - (int32_t)motor->EncoderPreviousValue;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	885b      	ldrh	r3, [r3, #2]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	60fb      	str	r3, [r7, #12]

	/*Distance traveled in 0.001s*/
	motor->DistanceInMeasurement = (impulses * WHEEL_CIRCUMFERENCE) / (IMPULSES_PER_ROTATION * GEAR_RATIO);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fdc:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80030c8 <Motor_CalculateSpeed+0x10c>
 8002fe0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fe4:	eddf 6a39 	vldr	s13, [pc, #228]	@ 80030cc <Motor_CalculateSpeed+0x110>
 8002fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	/*Whole distance wheel has traveled*/
	motor->DistanceTraveled += motor->DistanceInMeasurement * -1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
//
//	LowPassFilter_Update(&motor->MetersPerSecondLPF, motor->MetersPerSecond);


    //How many times motor has rotated ?
	motor->NumberOfRotations = (float)impulses / 20000.0f;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003012:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80030cc <Motor_CalculateSpeed+0x110>
 8003016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	edc3 7a08 	vstr	s15, [r3, #32]
	//Rotations per minute based on period and impulses
	motor->RPM = motor->NumberOfRotations * -60000.0f; //rotates per minute
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	edd3 7a08 	vldr	s15, [r3, #32]
 8003026:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80030d0 <Motor_CalculateSpeed+0x114>
 800302a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	edc3 7a01 	vstr	s15, [r3, #4]

	/*I know some of them are "magic values" other way it doesn't want to work*/

	if((motor->RPM >= 1000) || (motor->RPM <= -1000))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	edd3 7a01 	vldr	s15, [r3, #4]
 800303a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80030d4 <Motor_CalculateSpeed+0x118>
 800303e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003046:	da09      	bge.n	800305c <Motor_CalculateSpeed+0xa0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	edd3 7a01 	vldr	s15, [r3, #4]
 800304e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80030d8 <Motor_CalculateSpeed+0x11c>
 8003052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305a:	d803      	bhi.n	8003064 <Motor_CalculateSpeed+0xa8>
	{
		motor->RPM = motor->PreviousRPM;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	605a      	str	r2, [r3, #4]
	}
	//Motor_SavePreviousRPMs(motor, motor->RPM);
	LowPassFilter_Update(&motor->EncoderRpmFilter, motor->RPM);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003070:	eeb0 0a67 	vmov.f32	s0, s15
 8003074:	4610      	mov	r0, r2
 8003076:	f7fd fffc 	bl	8001072 <LowPassFilter_Update>
	motor->MetersPerHour = motor->EncoderRpmFilter.output / RPM_TO_MH;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003080:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80030dc <Motor_CalculateSpeed+0x120>
 8003084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	//motor->MetersPerHour = motor->RPM / RPM_TO_MH;
	motor->KilometersPerHour = motor->MetersPerHour / 1000;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003094:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80030d4 <Motor_CalculateSpeed+0x118>
 8003098:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	motor->MetersPerSecond = motor->MetersPerHour / 3600;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80030a8:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80030e0 <Motor_CalculateSpeed+0x124>
 80030ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	motor->PreviousRPM = motor->EncoderRpmFilter.output;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	609a      	str	r2, [r3, #8]
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	3da3d70a 	.word	0x3da3d70a
 80030cc:	469c4000 	.word	0x469c4000
 80030d0:	c76a6000 	.word	0xc76a6000
 80030d4:	447a0000 	.word	0x447a0000
 80030d8:	c47a0000 	.word	0xc47a0000
 80030dc:	3e555555 	.word	0x3e555555
 80030e0:	45610000 	.word	0x45610000

080030e4 <Motor_Init>:

void Motor_Init(motor_t *motor, float Kp, float Ki)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80030f0:	edc7 0a01 	vstr	s1, [r7, #4]
	motor->kp = Kp;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	motor->ki = Ki;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <PI_Loop>:

void PI_Loop(motor_t *motor)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	//
	//TODO: Work on this with https://classroom.ubicoders.com/yt_simple_pid
	//
	//
	motor->current_speed = motor->MetersPerSecond * 65; // From m/s to bananas per second
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800311e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80031f4 <PI_Loop+0xe4>
 8003122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	//Get absolute speed
	if(motor->current_speed < 0)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8003132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313a:	d507      	bpl.n	800314c <PI_Loop+0x3c>
	{
		motor->current_speed = motor->current_speed * -1;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8003142:	eef1 7a67 	vneg.f32	s15, s15
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	}

	//Get the difference between speed that we need and actual speed
	motor->error =  motor->set_speed - motor->current_speed;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8003158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

	//Add current error to previous errors
	motor->Error_sum = motor->Error_sum +motor->P;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	ed93 7a20 	vldr	s14, [r3, #128]	@ 0x80
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 800316e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
	if(motor->Error_sum > 100)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 800317e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80031f8 <PI_Loop+0xe8>
 8003182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318a:	dd04      	ble.n	8003196 <PI_Loop+0x86>
	{
		motor->Error_sum = 100;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a1b      	ldr	r2, [pc, #108]	@ (80031fc <PI_Loop+0xec>)
 8003190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003194:	e00d      	b.n	80031b2 <PI_Loop+0xa2>
	}
	else if(motor->Error_sum < -100)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 800319c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003200 <PI_Loop+0xf0>
 80031a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a8:	d503      	bpl.n	80031b2 <PI_Loop+0xa2>
	{
		motor->Error_sum = -100;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a15      	ldr	r2, [pc, #84]	@ (8003204 <PI_Loop+0xf4>)
 80031ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}

	//Calculate new speed with PI parameters
	motor->speed = motor->set_speed + (motor->error * motor->kp) + (motor->Error_sum *motor->ki);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 80031c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	edd3 6a20 	vldr	s13, [r3, #128]	@ 0x80
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 80031d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	42820000 	.word	0x42820000
 80031f8:	42c80000 	.word	0x42c80000
 80031fc:	42c80000 	.word	0x42c80000
 8003200:	c2c80000 	.word	0xc2c80000
 8003204:	c2c80000 	.word	0xc2c80000

08003208 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800320c:	4b1b      	ldr	r3, [pc, #108]	@ (800327c <MX_SPI2_Init+0x74>)
 800320e:	4a1c      	ldr	r2, [pc, #112]	@ (8003280 <MX_SPI2_Init+0x78>)
 8003210:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003212:	4b1a      	ldr	r3, [pc, #104]	@ (800327c <MX_SPI2_Init+0x74>)
 8003214:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003218:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800321a:	4b18      	ldr	r3, [pc, #96]	@ (800327c <MX_SPI2_Init+0x74>)
 800321c:	2200      	movs	r2, #0
 800321e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003220:	4b16      	ldr	r3, [pc, #88]	@ (800327c <MX_SPI2_Init+0x74>)
 8003222:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003226:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003228:	4b14      	ldr	r3, [pc, #80]	@ (800327c <MX_SPI2_Init+0x74>)
 800322a:	2200      	movs	r2, #0
 800322c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800322e:	4b13      	ldr	r3, [pc, #76]	@ (800327c <MX_SPI2_Init+0x74>)
 8003230:	2200      	movs	r2, #0
 8003232:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003234:	4b11      	ldr	r3, [pc, #68]	@ (800327c <MX_SPI2_Init+0x74>)
 8003236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800323a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800323c:	4b0f      	ldr	r3, [pc, #60]	@ (800327c <MX_SPI2_Init+0x74>)
 800323e:	2208      	movs	r2, #8
 8003240:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003242:	4b0e      	ldr	r3, [pc, #56]	@ (800327c <MX_SPI2_Init+0x74>)
 8003244:	2200      	movs	r2, #0
 8003246:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003248:	4b0c      	ldr	r3, [pc, #48]	@ (800327c <MX_SPI2_Init+0x74>)
 800324a:	2200      	movs	r2, #0
 800324c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800324e:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <MX_SPI2_Init+0x74>)
 8003250:	2200      	movs	r2, #0
 8003252:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003254:	4b09      	ldr	r3, [pc, #36]	@ (800327c <MX_SPI2_Init+0x74>)
 8003256:	2207      	movs	r2, #7
 8003258:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800325a:	4b08      	ldr	r3, [pc, #32]	@ (800327c <MX_SPI2_Init+0x74>)
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003260:	4b06      	ldr	r3, [pc, #24]	@ (800327c <MX_SPI2_Init+0x74>)
 8003262:	2208      	movs	r2, #8
 8003264:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003266:	4805      	ldr	r0, [pc, #20]	@ (800327c <MX_SPI2_Init+0x74>)
 8003268:	f004 f8b6 	bl	80073d8 <HAL_SPI_Init>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003272:	f7ff fe9d 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	2000053c 	.word	0x2000053c
 8003280:	40003800 	.word	0x40003800

08003284 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	@ 0x28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a17      	ldr	r2, [pc, #92]	@ (8003300 <HAL_SPI_MspInit+0x7c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d128      	bne.n	80032f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032a6:	4b17      	ldr	r3, [pc, #92]	@ (8003304 <HAL_SPI_MspInit+0x80>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032aa:	4a16      	ldr	r2, [pc, #88]	@ (8003304 <HAL_SPI_MspInit+0x80>)
 80032ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80032b2:	4b14      	ldr	r3, [pc, #80]	@ (8003304 <HAL_SPI_MspInit+0x80>)
 80032b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032be:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <HAL_SPI_MspInit+0x80>)
 80032c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c2:	4a10      	ldr	r2, [pc, #64]	@ (8003304 <HAL_SPI_MspInit+0x80>)
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <HAL_SPI_MspInit+0x80>)
 80032cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80032d6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80032da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032dc:	2302      	movs	r3, #2
 80032de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e4:	2300      	movs	r3, #0
 80032e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032e8:	2305      	movs	r3, #5
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	4619      	mov	r1, r3
 80032f2:	4805      	ldr	r0, [pc, #20]	@ (8003308 <HAL_SPI_MspInit+0x84>)
 80032f4:	f002 fd4c 	bl	8005d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80032f8:	bf00      	nop
 80032fa:	3728      	adds	r7, #40	@ 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40003800 	.word	0x40003800
 8003304:	40021000 	.word	0x40021000
 8003308:	48000400 	.word	0x48000400

0800330c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003312:	4b0f      	ldr	r3, [pc, #60]	@ (8003350 <HAL_MspInit+0x44>)
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	4a0e      	ldr	r2, [pc, #56]	@ (8003350 <HAL_MspInit+0x44>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6613      	str	r3, [r2, #96]	@ 0x60
 800331e:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <HAL_MspInit+0x44>)
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800332a:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <HAL_MspInit+0x44>)
 800332c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332e:	4a08      	ldr	r2, [pc, #32]	@ (8003350 <HAL_MspInit+0x44>)
 8003330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003334:	6593      	str	r3, [r2, #88]	@ 0x58
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <HAL_MspInit+0x44>)
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003342:	f003 f8bd 	bl	80064c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000

08003354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003358:	bf00      	nop
 800335a:	e7fd      	b.n	8003358 <NMI_Handler+0x4>

0800335c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003360:	bf00      	nop
 8003362:	e7fd      	b.n	8003360 <HardFault_Handler+0x4>

08003364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <MemManage_Handler+0x4>

0800336c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003370:	bf00      	nop
 8003372:	e7fd      	b.n	8003370 <BusFault_Handler+0x4>

08003374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003378:	bf00      	nop
 800337a:	e7fd      	b.n	8003378 <UsageFault_Handler+0x4>

0800337c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033aa:	f000 fd2d 	bl	8003e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033b8:	4802      	ldr	r0, [pc, #8]	@ (80033c4 <DMA1_Channel1_IRQHandler+0x10>)
 80033ba:	f002 fb9a 	bl	8005af2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000260 	.word	0x20000260

080033c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80033cc:	4802      	ldr	r0, [pc, #8]	@ (80033d8 <DMA1_Channel2_IRQHandler+0x10>)
 80033ce:	f002 fb90 	bl	8005af2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000720 	.word	0x20000720

080033dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80033e0:	4802      	ldr	r0, [pc, #8]	@ (80033ec <TIM5_IRQHandler+0x10>)
 80033e2:	f004 fc1b 	bl	8007c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200006d4 	.word	0x200006d4

080033f0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80033f4:	4802      	ldr	r0, [pc, #8]	@ (8003400 <LPUART1_IRQHandler+0x10>)
 80033f6:	f005 fe59 	bl	80090ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000780 	.word	0x20000780

08003404 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return 1;
 8003408:	2301      	movs	r3, #1
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <_kill>:

int _kill(int pid, int sig)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800341e:	f009 fa99 	bl	800c954 <__errno>
 8003422:	4603      	mov	r3, r0
 8003424:	2216      	movs	r2, #22
 8003426:	601a      	str	r2, [r3, #0]
  return -1;
 8003428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <_exit>:

void _exit (int status)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800343c:	f04f 31ff 	mov.w	r1, #4294967295
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ffe7 	bl	8003414 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003446:	bf00      	nop
 8003448:	e7fd      	b.n	8003446 <_exit+0x12>

0800344a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	e00a      	b.n	8003472 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800345c:	f3af 8000 	nop.w
 8003460:	4601      	mov	r1, r0
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	60ba      	str	r2, [r7, #8]
 8003468:	b2ca      	uxtb	r2, r1
 800346a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	3301      	adds	r3, #1
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	429a      	cmp	r2, r3
 8003478:	dbf0      	blt.n	800345c <_read+0x12>
  }

  return len;
 800347a:	687b      	ldr	r3, [r7, #4]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e009      	b.n	80034aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	60ba      	str	r2, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	3301      	adds	r3, #1
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	dbf1      	blt.n	8003496 <_write+0x12>
  }
  return len;
 80034b2:	687b      	ldr	r3, [r7, #4]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <_close>:

int _close(int file)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034e4:	605a      	str	r2, [r3, #4]
  return 0;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <_isatty>:

int _isatty(int file)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034fc:	2301      	movs	r3, #1
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800352c:	4a14      	ldr	r2, [pc, #80]	@ (8003580 <_sbrk+0x5c>)
 800352e:	4b15      	ldr	r3, [pc, #84]	@ (8003584 <_sbrk+0x60>)
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003538:	4b13      	ldr	r3, [pc, #76]	@ (8003588 <_sbrk+0x64>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003540:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <_sbrk+0x64>)
 8003542:	4a12      	ldr	r2, [pc, #72]	@ (800358c <_sbrk+0x68>)
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003546:	4b10      	ldr	r3, [pc, #64]	@ (8003588 <_sbrk+0x64>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	429a      	cmp	r2, r3
 8003552:	d207      	bcs.n	8003564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003554:	f009 f9fe 	bl	800c954 <__errno>
 8003558:	4603      	mov	r3, r0
 800355a:	220c      	movs	r2, #12
 800355c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800355e:	f04f 33ff 	mov.w	r3, #4294967295
 8003562:	e009      	b.n	8003578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003564:	4b08      	ldr	r3, [pc, #32]	@ (8003588 <_sbrk+0x64>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800356a:	4b07      	ldr	r3, [pc, #28]	@ (8003588 <_sbrk+0x64>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	4a05      	ldr	r2, [pc, #20]	@ (8003588 <_sbrk+0x64>)
 8003574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003576:	68fb      	ldr	r3, [r7, #12]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20020000 	.word	0x20020000
 8003584:	00000400 	.word	0x00000400
 8003588:	200005a0 	.word	0x200005a0
 800358c:	20000968 	.word	0x20000968

08003590 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003594:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <SystemInit+0x20>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359a:	4a05      	ldr	r2, [pc, #20]	@ (80035b0 <SystemInit+0x20>)
 800359c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim4_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08c      	sub	sp, #48	@ 0x30
 80035b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035ba:	f107 030c 	add.w	r3, r7, #12
 80035be:	2224      	movs	r2, #36	@ 0x24
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f009 f905 	bl	800c7d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035c8:	463b      	mov	r3, r7
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035d2:	4b23      	ldr	r3, [pc, #140]	@ (8003660 <MX_TIM1_Init+0xac>)
 80035d4:	4a23      	ldr	r2, [pc, #140]	@ (8003664 <MX_TIM1_Init+0xb0>)
 80035d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80035d8:	4b21      	ldr	r3, [pc, #132]	@ (8003660 <MX_TIM1_Init+0xac>)
 80035da:	2200      	movs	r2, #0
 80035dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035de:	4b20      	ldr	r3, [pc, #128]	@ (8003660 <MX_TIM1_Init+0xac>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80035e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003660 <MX_TIM1_Init+0xac>)
 80035e6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80035ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003660 <MX_TIM1_Init+0xac>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003660 <MX_TIM1_Init+0xac>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035f8:	4b19      	ldr	r3, [pc, #100]	@ (8003660 <MX_TIM1_Init+0xac>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80035fe:	2301      	movs	r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003606:	2301      	movs	r3, #1
 8003608:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800360e:	230f      	movs	r3, #15
 8003610:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003616:	2301      	movs	r3, #1
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800361a:	2300      	movs	r3, #0
 800361c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800361e:	230f      	movs	r3, #15
 8003620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003622:	f107 030c 	add.w	r3, r7, #12
 8003626:	4619      	mov	r1, r3
 8003628:	480d      	ldr	r0, [pc, #52]	@ (8003660 <MX_TIM1_Init+0xac>)
 800362a:	f004 f9c3 	bl	80079b4 <HAL_TIM_Encoder_Init>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003634:	f7ff fcbc 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003638:	2300      	movs	r3, #0
 800363a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800363c:	2300      	movs	r3, #0
 800363e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003640:	2300      	movs	r3, #0
 8003642:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003644:	463b      	mov	r3, r7
 8003646:	4619      	mov	r1, r3
 8003648:	4805      	ldr	r0, [pc, #20]	@ (8003660 <MX_TIM1_Init+0xac>)
 800364a:	f005 fb29 	bl	8008ca0 <HAL_TIMEx_MasterConfigSynchronization>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003654:	f7ff fcac 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003658:	bf00      	nop
 800365a:	3730      	adds	r7, #48	@ 0x30
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	200005a4 	.word	0x200005a4
 8003664:	40012c00 	.word	0x40012c00

08003668 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08e      	sub	sp, #56	@ 0x38
 800366c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800366e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800367c:	f107 031c 	add.w	r3, r7, #28
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003688:	463b      	mov	r3, r7
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	611a      	str	r2, [r3, #16]
 8003696:	615a      	str	r2, [r3, #20]
 8003698:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800369a:	4b33      	ldr	r3, [pc, #204]	@ (8003768 <MX_TIM2_Init+0x100>)
 800369c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80036a2:	4b31      	ldr	r3, [pc, #196]	@ (8003768 <MX_TIM2_Init+0x100>)
 80036a4:	22a9      	movs	r2, #169	@ 0xa9
 80036a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003768 <MX_TIM2_Init+0x100>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80036ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003768 <MX_TIM2_Init+0x100>)
 80036b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003768 <MX_TIM2_Init+0x100>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003768 <MX_TIM2_Init+0x100>)
 80036be:	2200      	movs	r2, #0
 80036c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036c2:	4829      	ldr	r0, [pc, #164]	@ (8003768 <MX_TIM2_Init+0x100>)
 80036c4:	f003 ff33 	bl	800752e <HAL_TIM_Base_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80036ce:	f7ff fc6f 	bl	8002fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036dc:	4619      	mov	r1, r3
 80036de:	4822      	ldr	r0, [pc, #136]	@ (8003768 <MX_TIM2_Init+0x100>)
 80036e0:	f004 fd00 	bl	80080e4 <HAL_TIM_ConfigClockSource>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80036ea:	f7ff fc61 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80036ee:	481e      	ldr	r0, [pc, #120]	@ (8003768 <MX_TIM2_Init+0x100>)
 80036f0:	f003 ffec 	bl	80076cc <HAL_TIM_PWM_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80036fa:	f7ff fc59 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003706:	f107 031c 	add.w	r3, r7, #28
 800370a:	4619      	mov	r1, r3
 800370c:	4816      	ldr	r0, [pc, #88]	@ (8003768 <MX_TIM2_Init+0x100>)
 800370e:	f005 fac7 	bl	8008ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003718:	f7ff fc4a 	bl	8002fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800371c:	2360      	movs	r3, #96	@ 0x60
 800371e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800372c:	463b      	mov	r3, r7
 800372e:	2200      	movs	r2, #0
 8003730:	4619      	mov	r1, r3
 8003732:	480d      	ldr	r0, [pc, #52]	@ (8003768 <MX_TIM2_Init+0x100>)
 8003734:	f004 fbc2 	bl	8007ebc <HAL_TIM_PWM_ConfigChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800373e:	f7ff fc37 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003742:	463b      	mov	r3, r7
 8003744:	220c      	movs	r2, #12
 8003746:	4619      	mov	r1, r3
 8003748:	4807      	ldr	r0, [pc, #28]	@ (8003768 <MX_TIM2_Init+0x100>)
 800374a:	f004 fbb7 	bl	8007ebc <HAL_TIM_PWM_ConfigChannel>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003754:	f7ff fc2c 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003758:	4803      	ldr	r0, [pc, #12]	@ (8003768 <MX_TIM2_Init+0x100>)
 800375a:	f000 f9e9 	bl	8003b30 <HAL_TIM_MspPostInit>

}
 800375e:	bf00      	nop
 8003760:	3738      	adds	r7, #56	@ 0x38
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	200005f0 	.word	0x200005f0

0800376c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003772:	f107 0310 	add.w	r3, r7, #16
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003780:	1d3b      	adds	r3, r7, #4
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800378a:	4b1d      	ldr	r3, [pc, #116]	@ (8003800 <MX_TIM3_Init+0x94>)
 800378c:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <MX_TIM3_Init+0x98>)
 800378e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8003790:	4b1b      	ldr	r3, [pc, #108]	@ (8003800 <MX_TIM3_Init+0x94>)
 8003792:	22a9      	movs	r2, #169	@ 0xa9
 8003794:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003796:	4b1a      	ldr	r3, [pc, #104]	@ (8003800 <MX_TIM3_Init+0x94>)
 8003798:	2200      	movs	r2, #0
 800379a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800379c:	4b18      	ldr	r3, [pc, #96]	@ (8003800 <MX_TIM3_Init+0x94>)
 800379e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a4:	4b16      	ldr	r3, [pc, #88]	@ (8003800 <MX_TIM3_Init+0x94>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037aa:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <MX_TIM3_Init+0x94>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037b0:	4813      	ldr	r0, [pc, #76]	@ (8003800 <MX_TIM3_Init+0x94>)
 80037b2:	f003 febc 	bl	800752e <HAL_TIM_Base_Init>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80037bc:	f7ff fbf8 	bl	8002fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037c6:	f107 0310 	add.w	r3, r7, #16
 80037ca:	4619      	mov	r1, r3
 80037cc:	480c      	ldr	r0, [pc, #48]	@ (8003800 <MX_TIM3_Init+0x94>)
 80037ce:	f004 fc89 	bl	80080e4 <HAL_TIM_ConfigClockSource>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80037d8:	f7ff fbea 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4805      	ldr	r0, [pc, #20]	@ (8003800 <MX_TIM3_Init+0x94>)
 80037ea:	f005 fa59 	bl	8008ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80037f4:	f7ff fbdc 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037f8:	bf00      	nop
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	2000063c 	.word	0x2000063c
 8003804:	40000400 	.word	0x40000400

08003808 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08c      	sub	sp, #48	@ 0x30
 800380c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800380e:	f107 030c 	add.w	r3, r7, #12
 8003812:	2224      	movs	r2, #36	@ 0x24
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f008 ffdb 	bl	800c7d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800381c:	463b      	mov	r3, r7
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003826:	4b21      	ldr	r3, [pc, #132]	@ (80038ac <MX_TIM4_Init+0xa4>)
 8003828:	4a21      	ldr	r2, [pc, #132]	@ (80038b0 <MX_TIM4_Init+0xa8>)
 800382a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800382c:	4b1f      	ldr	r3, [pc, #124]	@ (80038ac <MX_TIM4_Init+0xa4>)
 800382e:	2200      	movs	r2, #0
 8003830:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003832:	4b1e      	ldr	r3, [pc, #120]	@ (80038ac <MX_TIM4_Init+0xa4>)
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8003838:	4b1c      	ldr	r3, [pc, #112]	@ (80038ac <MX_TIM4_Init+0xa4>)
 800383a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800383e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003840:	4b1a      	ldr	r3, [pc, #104]	@ (80038ac <MX_TIM4_Init+0xa4>)
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003846:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <MX_TIM4_Init+0xa4>)
 8003848:	2200      	movs	r2, #0
 800384a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800384c:	2301      	movs	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003850:	2300      	movs	r3, #0
 8003852:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003854:	2301      	movs	r3, #1
 8003856:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003858:	2300      	movs	r3, #0
 800385a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800385c:	230f      	movs	r3, #15
 800385e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003860:	2300      	movs	r3, #0
 8003862:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003864:	2301      	movs	r3, #1
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003868:	2300      	movs	r3, #0
 800386a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 800386c:	2305      	movs	r3, #5
 800386e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003870:	f107 030c 	add.w	r3, r7, #12
 8003874:	4619      	mov	r1, r3
 8003876:	480d      	ldr	r0, [pc, #52]	@ (80038ac <MX_TIM4_Init+0xa4>)
 8003878:	f004 f89c 	bl	80079b4 <HAL_TIM_Encoder_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003882:	f7ff fb95 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800388e:	463b      	mov	r3, r7
 8003890:	4619      	mov	r1, r3
 8003892:	4806      	ldr	r0, [pc, #24]	@ (80038ac <MX_TIM4_Init+0xa4>)
 8003894:	f005 fa04 	bl	8008ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800389e:	f7ff fb87 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80038a2:	bf00      	nop
 80038a4:	3730      	adds	r7, #48	@ 0x30
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000688 	.word	0x20000688
 80038b0:	40000800 	.word	0x40000800

080038b4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ba:	f107 0310 	add.w	r3, r7, #16
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	609a      	str	r2, [r3, #8]
 80038c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80038d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <MX_TIM5_Init+0x94>)
 80038d4:	4a1d      	ldr	r2, [pc, #116]	@ (800394c <MX_TIM5_Init+0x98>)
 80038d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80038d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003948 <MX_TIM5_Init+0x94>)
 80038da:	22a9      	movs	r2, #169	@ 0xa9
 80038dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80038de:	4b1a      	ldr	r3, [pc, #104]	@ (8003948 <MX_TIM5_Init+0x94>)
 80038e0:	2210      	movs	r2, #16
 80038e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80038e4:	4b18      	ldr	r3, [pc, #96]	@ (8003948 <MX_TIM5_Init+0x94>)
 80038e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80038ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ec:	4b16      	ldr	r3, [pc, #88]	@ (8003948 <MX_TIM5_Init+0x94>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038f2:	4b15      	ldr	r3, [pc, #84]	@ (8003948 <MX_TIM5_Init+0x94>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80038f8:	4813      	ldr	r0, [pc, #76]	@ (8003948 <MX_TIM5_Init+0x94>)
 80038fa:	f003 fe18 	bl	800752e <HAL_TIM_Base_Init>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003904:	f7ff fb54 	bl	8002fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800390c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800390e:	f107 0310 	add.w	r3, r7, #16
 8003912:	4619      	mov	r1, r3
 8003914:	480c      	ldr	r0, [pc, #48]	@ (8003948 <MX_TIM5_Init+0x94>)
 8003916:	f004 fbe5 	bl	80080e4 <HAL_TIM_ConfigClockSource>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003920:	f7ff fb46 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003924:	2300      	movs	r3, #0
 8003926:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	4619      	mov	r1, r3
 8003930:	4805      	ldr	r0, [pc, #20]	@ (8003948 <MX_TIM5_Init+0x94>)
 8003932:	f005 f9b5 	bl	8008ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800393c:	f7ff fb38 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003940:	bf00      	nop
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200006d4 	.word	0x200006d4
 800394c:	40000c00 	.word	0x40000c00

08003950 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08c      	sub	sp, #48	@ 0x30
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 031c 	add.w	r3, r7, #28
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a44      	ldr	r2, [pc, #272]	@ (8003a80 <HAL_TIM_Encoder_MspInit+0x130>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d128      	bne.n	80039c4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003972:	4b44      	ldr	r3, [pc, #272]	@ (8003a84 <HAL_TIM_Encoder_MspInit+0x134>)
 8003974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003976:	4a43      	ldr	r2, [pc, #268]	@ (8003a84 <HAL_TIM_Encoder_MspInit+0x134>)
 8003978:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800397c:	6613      	str	r3, [r2, #96]	@ 0x60
 800397e:	4b41      	ldr	r3, [pc, #260]	@ (8003a84 <HAL_TIM_Encoder_MspInit+0x134>)
 8003980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003986:	61bb      	str	r3, [r7, #24]
 8003988:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800398a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a84 <HAL_TIM_Encoder_MspInit+0x134>)
 800398c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a84 <HAL_TIM_Encoder_MspInit+0x134>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003996:	4b3b      	ldr	r3, [pc, #236]	@ (8003a84 <HAL_TIM_Encoder_MspInit+0x134>)
 8003998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R_1_Pin|ENCODER_R_2_Pin;
 80039a2:	2303      	movs	r3, #3
 80039a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a6:	2302      	movs	r3, #2
 80039a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ae:	2300      	movs	r3, #0
 80039b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80039b2:	2302      	movs	r3, #2
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039b6:	f107 031c 	add.w	r3, r7, #28
 80039ba:	4619      	mov	r1, r3
 80039bc:	4832      	ldr	r0, [pc, #200]	@ (8003a88 <HAL_TIM_Encoder_MspInit+0x138>)
 80039be:	f002 f9e7 	bl	8005d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80039c2:	e059      	b.n	8003a78 <HAL_TIM_Encoder_MspInit+0x128>
  else if(tim_encoderHandle->Instance==TIM4)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a30      	ldr	r2, [pc, #192]	@ (8003a8c <HAL_TIM_Encoder_MspInit+0x13c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d154      	bne.n	8003a78 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003a84 <HAL_TIM_Encoder_MspInit+0x134>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a84 <HAL_TIM_Encoder_MspInit+0x134>)
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80039da:	4b2a      	ldr	r3, [pc, #168]	@ (8003a84 <HAL_TIM_Encoder_MspInit+0x134>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e6:	4b27      	ldr	r3, [pc, #156]	@ (8003a84 <HAL_TIM_Encoder_MspInit+0x134>)
 80039e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ea:	4a26      	ldr	r2, [pc, #152]	@ (8003a84 <HAL_TIM_Encoder_MspInit+0x134>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039f2:	4b24      	ldr	r3, [pc, #144]	@ (8003a84 <HAL_TIM_Encoder_MspInit+0x134>)
 80039f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_L_1_Pin|ENCODER_L_2_Pin;
 80039fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a04:	2302      	movs	r3, #2
 8003a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003a10:	230a      	movs	r3, #10
 8003a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a14:	f107 031c 	add.w	r3, r7, #28
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a1e:	f002 f9b7 	bl	8005d90 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Channel2;
 8003a22:	4b1b      	ldr	r3, [pc, #108]	@ (8003a90 <HAL_TIM_Encoder_MspInit+0x140>)
 8003a24:	4a1b      	ldr	r2, [pc, #108]	@ (8003a94 <HAL_TIM_Encoder_MspInit+0x144>)
 8003a26:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8003a28:	4b19      	ldr	r3, [pc, #100]	@ (8003a90 <HAL_TIM_Encoder_MspInit+0x140>)
 8003a2a:	2247      	movs	r2, #71	@ 0x47
 8003a2c:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a2e:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <HAL_TIM_Encoder_MspInit+0x140>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a34:	4b16      	ldr	r3, [pc, #88]	@ (8003a90 <HAL_TIM_Encoder_MspInit+0x140>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <HAL_TIM_Encoder_MspInit+0x140>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a40:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <HAL_TIM_Encoder_MspInit+0x140>)
 8003a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a46:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a48:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <HAL_TIM_Encoder_MspInit+0x140>)
 8003a4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a4e:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8003a50:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <HAL_TIM_Encoder_MspInit+0x140>)
 8003a52:	2220      	movs	r2, #32
 8003a54:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003a56:	4b0e      	ldr	r3, [pc, #56]	@ (8003a90 <HAL_TIM_Encoder_MspInit+0x140>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8003a5c:	480c      	ldr	r0, [pc, #48]	@ (8003a90 <HAL_TIM_Encoder_MspInit+0x140>)
 8003a5e:	f001 fe65 	bl	800572c <HAL_DMA_Init>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_TIM_Encoder_MspInit+0x11c>
      Error_Handler();
 8003a68:	f7ff faa2 	bl	8002fb0 <Error_Handler>
    __HAL_LINKDMA(tim_encoderHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a08      	ldr	r2, [pc, #32]	@ (8003a90 <HAL_TIM_Encoder_MspInit+0x140>)
 8003a70:	621a      	str	r2, [r3, #32]
 8003a72:	4a07      	ldr	r2, [pc, #28]	@ (8003a90 <HAL_TIM_Encoder_MspInit+0x140>)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003a78:	bf00      	nop
 8003a7a:	3730      	adds	r7, #48	@ 0x30
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40021000 	.word	0x40021000
 8003a88:	48000800 	.word	0x48000800
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	20000720 	.word	0x20000720
 8003a94:	4002001c 	.word	0x4002001c

08003a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <HAL_TIM_Base_MspInit+0x8c>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aae:	4a1d      	ldr	r2, [pc, #116]	@ (8003b24 <HAL_TIM_Base_MspInit+0x8c>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <HAL_TIM_Base_MspInit+0x8c>)
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003ac2:	e02a      	b.n	8003b1a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a17      	ldr	r2, [pc, #92]	@ (8003b28 <HAL_TIM_Base_MspInit+0x90>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10c      	bne.n	8003ae8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ace:	4b15      	ldr	r3, [pc, #84]	@ (8003b24 <HAL_TIM_Base_MspInit+0x8c>)
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad2:	4a14      	ldr	r2, [pc, #80]	@ (8003b24 <HAL_TIM_Base_MspInit+0x8c>)
 8003ad4:	f043 0302 	orr.w	r3, r3, #2
 8003ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ada:	4b12      	ldr	r3, [pc, #72]	@ (8003b24 <HAL_TIM_Base_MspInit+0x8c>)
 8003adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]
}
 8003ae6:	e018      	b.n	8003b1a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM5)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0f      	ldr	r2, [pc, #60]	@ (8003b2c <HAL_TIM_Base_MspInit+0x94>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d113      	bne.n	8003b1a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003af2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <HAL_TIM_Base_MspInit+0x8c>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af6:	4a0b      	ldr	r2, [pc, #44]	@ (8003b24 <HAL_TIM_Base_MspInit+0x8c>)
 8003af8:	f043 0308 	orr.w	r3, r3, #8
 8003afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003afe:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <HAL_TIM_Base_MspInit+0x8c>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	2032      	movs	r0, #50	@ 0x32
 8003b10:	f001 fdd7 	bl	80056c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003b14:	2032      	movs	r0, #50	@ 0x32
 8003b16:	f001 fdee 	bl	80056f6 <HAL_NVIC_EnableIRQ>
}
 8003b1a:	bf00      	nop
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000c00 	.word	0x40000c00

08003b30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 030c 	add.w	r3, r7, #12
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b50:	d12e      	bne.n	8003bb0 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b52:	4b19      	ldr	r3, [pc, #100]	@ (8003bb8 <HAL_TIM_MspPostInit+0x88>)
 8003b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b56:	4a18      	ldr	r2, [pc, #96]	@ (8003bb8 <HAL_TIM_MspPostInit+0x88>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b5e:	4b16      	ldr	r3, [pc, #88]	@ (8003bb8 <HAL_TIM_MspPostInit+0x88>)
 8003b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_R_Pin;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8003b7e:	f107 030c 	add.w	r3, r7, #12
 8003b82:	4619      	mov	r1, r3
 8003b84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b88:	f002 f902 	bl	8005d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_L_Pin;
 8003b8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b92:	2302      	movs	r3, #2
 8003b94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8003b9e:	230a      	movs	r3, #10
 8003ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8003ba2:	f107 030c 	add.w	r3, r7, #12
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bac:	f002 f8f0 	bl	8005d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003bb0:	bf00      	nop
 8003bb2:	3720      	adds	r7, #32
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000

08003bbc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003bc0:	4b21      	ldr	r3, [pc, #132]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003bc2:	4a22      	ldr	r2, [pc, #136]	@ (8003c4c <MX_LPUART1_UART_Init+0x90>)
 8003bc4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8003bc6:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003bc8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003bcc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bce:	4b1e      	ldr	r3, [pc, #120]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003bda:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003be0:	4b19      	ldr	r3, [pc, #100]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003be2:	220c      	movs	r2, #12
 8003be4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003be6:	4b18      	ldr	r3, [pc, #96]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bec:	4b16      	ldr	r3, [pc, #88]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003bf2:	4b15      	ldr	r3, [pc, #84]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bf8:	4b13      	ldr	r3, [pc, #76]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003bfe:	4812      	ldr	r0, [pc, #72]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003c00:	f005 f92a 	bl	8008e58 <HAL_UART_Init>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003c0a:	f7ff f9d1 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c0e:	2100      	movs	r1, #0
 8003c10:	480d      	ldr	r0, [pc, #52]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003c12:	f007 f982 	bl	800af1a <HAL_UARTEx_SetTxFifoThreshold>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003c1c:	f7ff f9c8 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c20:	2100      	movs	r1, #0
 8003c22:	4809      	ldr	r0, [pc, #36]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003c24:	f007 f9b7 	bl	800af96 <HAL_UARTEx_SetRxFifoThreshold>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003c2e:	f7ff f9bf 	bl	8002fb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003c32:	4805      	ldr	r0, [pc, #20]	@ (8003c48 <MX_LPUART1_UART_Init+0x8c>)
 8003c34:	f007 f938 	bl	800aea8 <HAL_UARTEx_DisableFifoMode>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003c3e:	f7ff f9b7 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000780 	.word	0x20000780
 8003c4c:	40008000 	.word	0x40008000

08003c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b09e      	sub	sp, #120	@ 0x78
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c68:	f107 0310 	add.w	r3, r7, #16
 8003c6c:	2254      	movs	r2, #84	@ 0x54
 8003c6e:	2100      	movs	r1, #0
 8003c70:	4618      	mov	r0, r3
 8003c72:	f008 fdae 	bl	800c7d2 <memset>
  if(uartHandle->Instance==LPUART1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a23      	ldr	r2, [pc, #140]	@ (8003d08 <HAL_UART_MspInit+0xb8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d13f      	bne.n	8003d00 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003c80:	2320      	movs	r3, #32
 8003c82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8003c84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003c88:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c8a:	f107 0310 	add.w	r3, r7, #16
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f003 f954 	bl	8006f3c <HAL_RCCEx_PeriphCLKConfig>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003c9a:	f7ff f989 	bl	8002fb0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003d0c <HAL_UART_MspInit+0xbc>)
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d0c <HAL_UART_MspInit+0xbc>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003caa:	4b18      	ldr	r3, [pc, #96]	@ (8003d0c <HAL_UART_MspInit+0xbc>)
 8003cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb6:	4b15      	ldr	r3, [pc, #84]	@ (8003d0c <HAL_UART_MspInit+0xbc>)
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cba:	4a14      	ldr	r2, [pc, #80]	@ (8003d0c <HAL_UART_MspInit+0xbc>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cc2:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <HAL_UART_MspInit+0xbc>)
 8003cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003cce:	230c      	movs	r3, #12
 8003cd0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003cde:	230c      	movs	r3, #12
 8003ce0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cec:	f002 f850 	bl	8005d90 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	205b      	movs	r0, #91	@ 0x5b
 8003cf6:	f001 fce4 	bl	80056c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003cfa:	205b      	movs	r0, #91	@ 0x5b
 8003cfc:	f001 fcfb 	bl	80056f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8003d00:	bf00      	nop
 8003d02:	3778      	adds	r7, #120	@ 0x78
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40008000 	.word	0x40008000
 8003d0c:	40021000 	.word	0x40021000

08003d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d10:	480d      	ldr	r0, [pc, #52]	@ (8003d48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d14:	f7ff fc3c 	bl	8003590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d18:	480c      	ldr	r0, [pc, #48]	@ (8003d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8003d1a:	490d      	ldr	r1, [pc, #52]	@ (8003d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d54 <LoopForever+0xe>)
  movs r3, #0
 8003d1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003d20:	e002      	b.n	8003d28 <LoopCopyDataInit>

08003d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d26:	3304      	adds	r3, #4

08003d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d2c:	d3f9      	bcc.n	8003d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d30:	4c0a      	ldr	r4, [pc, #40]	@ (8003d5c <LoopForever+0x16>)
  movs r3, #0
 8003d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d34:	e001      	b.n	8003d3a <LoopFillZerobss>

08003d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d38:	3204      	adds	r2, #4

08003d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d3c:	d3fb      	bcc.n	8003d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d3e:	f008 fe0f 	bl	800c960 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d42:	f7fe fa9b 	bl	800227c <main>

08003d46 <LoopForever>:

LoopForever:
    b LoopForever
 8003d46:	e7fe      	b.n	8003d46 <LoopForever>
  ldr   r0, =_estack
 8003d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d50:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003d54:	0800f90c 	.word	0x0800f90c
  ldr r2, =_sbss
 8003d58:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003d5c:	20000964 	.word	0x20000964

08003d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d60:	e7fe      	b.n	8003d60 <ADC1_2_IRQHandler>

08003d62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d6c:	2003      	movs	r0, #3
 8003d6e:	f001 fc9d 	bl	80056ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d72:	2000      	movs	r0, #0
 8003d74:	f000 f80e 	bl	8003d94 <HAL_InitTick>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	71fb      	strb	r3, [r7, #7]
 8003d82:	e001      	b.n	8003d88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d84:	f7ff fac2 	bl	800330c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d88:	79fb      	ldrb	r3, [r7, #7]

}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <HAL_InitTick+0x68>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d022      	beq.n	8003dee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003da8:	4b15      	ldr	r3, [pc, #84]	@ (8003e00 <HAL_InitTick+0x6c>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <HAL_InitTick+0x68>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 fca8 	bl	8005712 <HAL_SYSTICK_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10f      	bne.n	8003de8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b0f      	cmp	r3, #15
 8003dcc:	d809      	bhi.n	8003de2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd6:	f001 fc74 	bl	80056c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <HAL_InitTick+0x70>)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	e007      	b.n	8003df2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	e004      	b.n	8003df2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	e001      	b.n	8003df2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	2000000c 	.word	0x2000000c
 8003e00:	20000004 	.word	0x20000004
 8003e04:	20000008 	.word	0x20000008

08003e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e0c:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <HAL_IncTick+0x1c>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b05      	ldr	r3, [pc, #20]	@ (8003e28 <HAL_IncTick+0x20>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4413      	add	r3, r2
 8003e16:	4a03      	ldr	r2, [pc, #12]	@ (8003e24 <HAL_IncTick+0x1c>)
 8003e18:	6013      	str	r3, [r2, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	20000814 	.word	0x20000814
 8003e28:	2000000c 	.word	0x2000000c

08003e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e30:	4b03      	ldr	r3, [pc, #12]	@ (8003e40 <HAL_GetTick+0x14>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000814 	.word	0x20000814

08003e44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	609a      	str	r2, [r3, #8]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	609a      	str	r2, [r3, #8]
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3360      	adds	r3, #96	@ 0x60
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b08      	ldr	r3, [pc, #32]	@ (8003ef0 <LL_ADC_SetOffset+0x44>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	03fff000 	.word	0x03fff000

08003ef4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3360      	adds	r3, #96	@ 0x60
 8003f02:	461a      	mov	r2, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3360      	adds	r3, #96	@ 0x60
 8003f30:	461a      	mov	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	431a      	orrs	r2, r3
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b087      	sub	sp, #28
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3360      	adds	r3, #96	@ 0x60
 8003f66:	461a      	mov	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003f80:	bf00      	nop
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3360      	adds	r3, #96	@ 0x60
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	615a      	str	r2, [r3, #20]
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3330      	adds	r3, #48	@ 0x30
 800401e:	461a      	mov	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	4413      	add	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	211f      	movs	r1, #31
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	401a      	ands	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0e9b      	lsrs	r3, r3, #26
 8004046:	f003 011f 	and.w	r1, r3, #31
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	fa01 f303 	lsl.w	r3, r1, r3
 8004054:	431a      	orrs	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004066:	b480      	push	{r7}
 8004068:	b087      	sub	sp, #28
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3314      	adds	r3, #20
 8004076:	461a      	mov	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	0e5b      	lsrs	r3, r3, #25
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	4413      	add	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	0d1b      	lsrs	r3, r3, #20
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	2107      	movs	r1, #7
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	0d1b      	lsrs	r3, r3, #20
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	fa01 f303 	lsl.w	r3, r1, r3
 80040aa:	431a      	orrs	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d4:	43db      	mvns	r3, r3
 80040d6:	401a      	ands	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f003 0318 	and.w	r3, r3, #24
 80040de:	4908      	ldr	r1, [pc, #32]	@ (8004100 <LL_ADC_SetChannelSingleDiff+0x44>)
 80040e0:	40d9      	lsrs	r1, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	400b      	ands	r3, r1
 80040e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ea:	431a      	orrs	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	0007ffff 	.word	0x0007ffff

08004104 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 031f 	and.w	r3, r3, #31
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004130:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6093      	str	r3, [r2, #8]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004158:	d101      	bne.n	800415e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800417c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004180:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041a8:	d101      	bne.n	80041ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041d0:	f043 0201 	orr.w	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <LL_ADC_IsEnabled+0x18>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <LL_ADC_IsEnabled+0x1a>
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800421a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800421e:	f043 0204 	orr.w	r2, r3, #4
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b04      	cmp	r3, #4
 8004244:	d101      	bne.n	800424a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d101      	bne.n	8004270 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b089      	sub	sp, #36	@ 0x24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e1a9      	b.n	80045ee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d109      	bne.n	80042bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fd fdd1 	bl	8001e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff3f 	bl	8004144 <LL_ADC_IsDeepPowerDownEnabled>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d004      	beq.n	80042d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff ff25 	bl	8004120 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff5a 	bl	8004194 <LL_ADC_IsInternalRegulatorEnabled>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d115      	bne.n	8004312 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff3e 	bl	800416c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042f0:	4b9c      	ldr	r3, [pc, #624]	@ (8004564 <HAL_ADC_Init+0x2e4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	099b      	lsrs	r3, r3, #6
 80042f6:	4a9c      	ldr	r2, [pc, #624]	@ (8004568 <HAL_ADC_Init+0x2e8>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	099b      	lsrs	r3, r3, #6
 80042fe:	3301      	adds	r3, #1
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004304:	e002      	b.n	800430c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3b01      	subs	r3, #1
 800430a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f9      	bne.n	8004306 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff ff3c 	bl	8004194 <LL_ADC_IsInternalRegulatorEnabled>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10d      	bne.n	800433e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004326:	f043 0210 	orr.w	r2, r3, #16
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004332:	f043 0201 	orr.w	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff ff75 	bl	8004232 <LL_ADC_REG_IsConversionOngoing>
 8004348:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b00      	cmp	r3, #0
 8004354:	f040 8142 	bne.w	80045dc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 813e 	bne.w	80045dc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004364:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004368:	f043 0202 	orr.w	r2, r3, #2
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ff35 	bl	80041e4 <LL_ADC_IsEnabled>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d141      	bne.n	8004404 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004388:	d004      	beq.n	8004394 <HAL_ADC_Init+0x114>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a77      	ldr	r2, [pc, #476]	@ (800456c <HAL_ADC_Init+0x2ec>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10f      	bne.n	80043b4 <HAL_ADC_Init+0x134>
 8004394:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004398:	f7ff ff24 	bl	80041e4 <LL_ADC_IsEnabled>
 800439c:	4604      	mov	r4, r0
 800439e:	4873      	ldr	r0, [pc, #460]	@ (800456c <HAL_ADC_Init+0x2ec>)
 80043a0:	f7ff ff20 	bl	80041e4 <LL_ADC_IsEnabled>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4323      	orrs	r3, r4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e012      	b.n	80043da <HAL_ADC_Init+0x15a>
 80043b4:	486e      	ldr	r0, [pc, #440]	@ (8004570 <HAL_ADC_Init+0x2f0>)
 80043b6:	f7ff ff15 	bl	80041e4 <LL_ADC_IsEnabled>
 80043ba:	4604      	mov	r4, r0
 80043bc:	486d      	ldr	r0, [pc, #436]	@ (8004574 <HAL_ADC_Init+0x2f4>)
 80043be:	f7ff ff11 	bl	80041e4 <LL_ADC_IsEnabled>
 80043c2:	4603      	mov	r3, r0
 80043c4:	431c      	orrs	r4, r3
 80043c6:	486c      	ldr	r0, [pc, #432]	@ (8004578 <HAL_ADC_Init+0x2f8>)
 80043c8:	f7ff ff0c 	bl	80041e4 <LL_ADC_IsEnabled>
 80043cc:	4603      	mov	r3, r0
 80043ce:	4323      	orrs	r3, r4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d012      	beq.n	8004404 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043e6:	d004      	beq.n	80043f2 <HAL_ADC_Init+0x172>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a5f      	ldr	r2, [pc, #380]	@ (800456c <HAL_ADC_Init+0x2ec>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_Init+0x176>
 80043f2:	4a62      	ldr	r2, [pc, #392]	@ (800457c <HAL_ADC_Init+0x2fc>)
 80043f4:	e000      	b.n	80043f8 <HAL_ADC_Init+0x178>
 80043f6:	4a62      	ldr	r2, [pc, #392]	@ (8004580 <HAL_ADC_Init+0x300>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f7ff fd20 	bl	8003e44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7f5b      	ldrb	r3, [r3, #29]
 8004408:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800440e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004414:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800441a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004422:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800442e:	2b01      	cmp	r3, #1
 8004430:	d106      	bne.n	8004440 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004436:	3b01      	subs	r3, #1
 8004438:	045b      	lsls	r3, r3, #17
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4313      	orrs	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	4b48      	ldr	r3, [pc, #288]	@ (8004584 <HAL_ADC_Init+0x304>)
 8004464:	4013      	ands	r3, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	69b9      	ldr	r1, [r7, #24]
 800446c:	430b      	orrs	r3, r1
 800446e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fee4 	bl	8004258 <LL_ADC_INJ_IsConversionOngoing>
 8004490:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d17f      	bne.n	8004598 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d17c      	bne.n	8004598 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80044a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80044aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ba:	f023 0302 	bic.w	r3, r3, #2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	69b9      	ldr	r1, [r7, #24]
 80044c4:	430b      	orrs	r3, r1
 80044c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d017      	beq.n	8004500 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80044de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80044e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80044ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6911      	ldr	r1, [r2, #16]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	430b      	orrs	r3, r1
 80044fa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80044fe:	e013      	b.n	8004528 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800450e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004520:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004524:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800452e:	2b01      	cmp	r3, #1
 8004530:	d12a      	bne.n	8004588 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800453c:	f023 0304 	bic.w	r3, r3, #4
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004548:	4311      	orrs	r1, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800454e:	4311      	orrs	r1, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004554:	430a      	orrs	r2, r1
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0201 	orr.w	r2, r2, #1
 8004560:	611a      	str	r2, [r3, #16]
 8004562:	e019      	b.n	8004598 <HAL_ADC_Init+0x318>
 8004564:	20000004 	.word	0x20000004
 8004568:	053e2d63 	.word	0x053e2d63
 800456c:	50000100 	.word	0x50000100
 8004570:	50000400 	.word	0x50000400
 8004574:	50000500 	.word	0x50000500
 8004578:	50000600 	.word	0x50000600
 800457c:	50000300 	.word	0x50000300
 8004580:	50000700 	.word	0x50000700
 8004584:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d10c      	bne.n	80045ba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a6:	f023 010f 	bic.w	r1, r3, #15
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	1e5a      	subs	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80045b8:	e007      	b.n	80045ca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 020f 	bic.w	r2, r2, #15
 80045c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	f043 0201 	orr.w	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045da:	e007      	b.n	80045ec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e0:	f043 0210 	orr.w	r2, r3, #16
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80045ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3724      	adds	r7, #36	@ 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd90      	pop	{r4, r7, pc}
 80045f6:	bf00      	nop

080045f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800460c:	d004      	beq.n	8004618 <HAL_ADC_Start_DMA+0x20>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a5a      	ldr	r2, [pc, #360]	@ (800477c <HAL_ADC_Start_DMA+0x184>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d101      	bne.n	800461c <HAL_ADC_Start_DMA+0x24>
 8004618:	4b59      	ldr	r3, [pc, #356]	@ (8004780 <HAL_ADC_Start_DMA+0x188>)
 800461a:	e000      	b.n	800461e <HAL_ADC_Start_DMA+0x26>
 800461c:	4b59      	ldr	r3, [pc, #356]	@ (8004784 <HAL_ADC_Start_DMA+0x18c>)
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fd70 	bl	8004104 <LL_ADC_GetMultimode>
 8004624:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fe01 	bl	8004232 <LL_ADC_REG_IsConversionOngoing>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	f040 809b 	bne.w	800476e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_ADC_Start_DMA+0x4e>
 8004642:	2302      	movs	r3, #2
 8004644:	e096      	b.n	8004774 <HAL_ADC_Start_DMA+0x17c>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a4d      	ldr	r2, [pc, #308]	@ (8004788 <HAL_ADC_Start_DMA+0x190>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d008      	beq.n	800466a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b05      	cmp	r3, #5
 8004662:	d002      	beq.n	800466a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b09      	cmp	r3, #9
 8004668:	d17a      	bne.n	8004760 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fcf6 	bl	800505c <ADC_Enable>
 8004670:	4603      	mov	r3, r0
 8004672:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d16d      	bne.n	8004756 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a3a      	ldr	r2, [pc, #232]	@ (800477c <HAL_ADC_Start_DMA+0x184>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d009      	beq.n	80046ac <HAL_ADC_Start_DMA+0xb4>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a3b      	ldr	r2, [pc, #236]	@ (800478c <HAL_ADC_Start_DMA+0x194>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d002      	beq.n	80046a8 <HAL_ADC_Start_DMA+0xb0>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	e003      	b.n	80046b0 <HAL_ADC_Start_DMA+0xb8>
 80046a8:	4b39      	ldr	r3, [pc, #228]	@ (8004790 <HAL_ADC_Start_DMA+0x198>)
 80046aa:	e001      	b.n	80046b0 <HAL_ADC_Start_DMA+0xb8>
 80046ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d002      	beq.n	80046be <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d006      	beq.n	80046e4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046da:	f023 0206 	bic.w	r2, r3, #6
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80046e2:	e002      	b.n	80046ea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ee:	4a29      	ldr	r2, [pc, #164]	@ (8004794 <HAL_ADC_Start_DMA+0x19c>)
 80046f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f6:	4a28      	ldr	r2, [pc, #160]	@ (8004798 <HAL_ADC_Start_DMA+0x1a0>)
 80046f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fe:	4a27      	ldr	r2, [pc, #156]	@ (800479c <HAL_ADC_Start_DMA+0x1a4>)
 8004700:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	221c      	movs	r2, #28
 8004708:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0210 	orr.w	r2, r2, #16
 8004720:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3340      	adds	r3, #64	@ 0x40
 800473c:	4619      	mov	r1, r3
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f001 f89b 	bl	800587c <HAL_DMA_Start_IT>
 8004746:	4603      	mov	r3, r0
 8004748:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fd5b 	bl	800420a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004754:	e00d      	b.n	8004772 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800475e:	e008      	b.n	8004772 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800476c:	e001      	b.n	8004772 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800476e:	2302      	movs	r3, #2
 8004770:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	50000100 	.word	0x50000100
 8004780:	50000300 	.word	0x50000300
 8004784:	50000700 	.word	0x50000700
 8004788:	50000600 	.word	0x50000600
 800478c:	50000500 	.word	0x50000500
 8004790:	50000400 	.word	0x50000400
 8004794:	08005189 	.word	0x08005189
 8004798:	08005261 	.word	0x08005261
 800479c:	0800527d 	.word	0x0800527d

080047a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b0b6      	sub	sp, #216	@ 0xd8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d102      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x24>
 80047fa:	2302      	movs	r3, #2
 80047fc:	f000 bc13 	b.w	8005026 <HAL_ADC_ConfigChannel+0x84a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fd10 	bl	8004232 <LL_ADC_REG_IsConversionOngoing>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	f040 83f3 	bne.w	8005000 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6859      	ldr	r1, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	f7ff fbf1 	bl	800400e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fcfe 	bl	8004232 <LL_ADC_REG_IsConversionOngoing>
 8004836:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fd0a 	bl	8004258 <LL_ADC_INJ_IsConversionOngoing>
 8004844:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004848:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 81d9 	bne.w	8004c04 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004856:	2b00      	cmp	r3, #0
 8004858:	f040 81d4 	bne.w	8004c04 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004864:	d10f      	bne.n	8004886 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2200      	movs	r2, #0
 8004870:	4619      	mov	r1, r3
 8004872:	f7ff fbf8 	bl	8004066 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fb9f 	bl	8003fc2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004884:	e00e      	b.n	80048a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	461a      	mov	r2, r3
 8004894:	f7ff fbe7 	bl	8004066 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fb8f 	bl	8003fc2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	695a      	ldr	r2, [r3, #20]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	08db      	lsrs	r3, r3, #3
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d022      	beq.n	800490c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6919      	ldr	r1, [r3, #16]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80048d6:	f7ff fae9 	bl	8003eac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6919      	ldr	r1, [r3, #16]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f7ff fb35 	bl	8003f56 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d102      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x126>
 80048fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004900:	e000      	b.n	8004904 <HAL_ADC_ConfigChannel+0x128>
 8004902:	2300      	movs	r3, #0
 8004904:	461a      	mov	r2, r3
 8004906:	f7ff fb41 	bl	8003f8c <LL_ADC_SetOffsetSaturation>
 800490a:	e17b      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff faee 	bl	8003ef4 <LL_ADC_GetOffsetChannel>
 8004918:	4603      	mov	r3, r0
 800491a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x15c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2100      	movs	r1, #0
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fae3 	bl	8003ef4 <LL_ADC_GetOffsetChannel>
 800492e:	4603      	mov	r3, r0
 8004930:	0e9b      	lsrs	r3, r3, #26
 8004932:	f003 021f 	and.w	r2, r3, #31
 8004936:	e01e      	b.n	8004976 <HAL_ADC_ConfigChannel+0x19a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fad8 	bl	8003ef4 <LL_ADC_GetOffsetChannel>
 8004944:	4603      	mov	r3, r0
 8004946:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800495a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800495e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004966:	2320      	movs	r3, #32
 8004968:	e004      	b.n	8004974 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800496a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800497e:	2b00      	cmp	r3, #0
 8004980:	d105      	bne.n	800498e <HAL_ADC_ConfigChannel+0x1b2>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	0e9b      	lsrs	r3, r3, #26
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	e018      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x1e4>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004996:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80049a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80049aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80049b2:	2320      	movs	r3, #32
 80049b4:	e004      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80049b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049ba:	fab3 f383 	clz	r3, r3
 80049be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d106      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2100      	movs	r1, #0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff faa7 	bl	8003f20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2101      	movs	r1, #1
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fa8b 	bl	8003ef4 <LL_ADC_GetOffsetChannel>
 80049de:	4603      	mov	r3, r0
 80049e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x222>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2101      	movs	r1, #1
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fa80 	bl	8003ef4 <LL_ADC_GetOffsetChannel>
 80049f4:	4603      	mov	r3, r0
 80049f6:	0e9b      	lsrs	r3, r3, #26
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	e01e      	b.n	8004a3c <HAL_ADC_ConfigChannel+0x260>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2101      	movs	r1, #1
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff fa75 	bl	8003ef4 <LL_ADC_GetOffsetChannel>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a14:	fa93 f3a3 	rbit	r3, r3
 8004a18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004a1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004a24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004a2c:	2320      	movs	r3, #32
 8004a2e:	e004      	b.n	8004a3a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d105      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0x278>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	0e9b      	lsrs	r3, r3, #26
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	e018      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x2aa>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004a68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004a78:	2320      	movs	r3, #32
 8004a7a:	e004      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d106      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2101      	movs	r1, #1
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fa44 	bl	8003f20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fa28 	bl	8003ef4 <LL_ADC_GetOffsetChannel>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <HAL_ADC_ConfigChannel+0x2e8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fa1d 	bl	8003ef4 <LL_ADC_GetOffsetChannel>
 8004aba:	4603      	mov	r3, r0
 8004abc:	0e9b      	lsrs	r3, r3, #26
 8004abe:	f003 021f 	and.w	r2, r3, #31
 8004ac2:	e01e      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x326>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2102      	movs	r1, #2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fa12 	bl	8003ef4 <LL_ADC_GetOffsetChannel>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ada:	fa93 f3a3 	rbit	r3, r3
 8004ade:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004af2:	2320      	movs	r3, #32
 8004af4:	e004      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004afa:	fab3 f383 	clz	r3, r3
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d105      	bne.n	8004b1a <HAL_ADC_ConfigChannel+0x33e>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	0e9b      	lsrs	r3, r3, #26
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	e016      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x36c>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b26:	fa93 f3a3 	rbit	r3, r3
 8004b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004b2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004b32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	e004      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b42:	fab3 f383 	clz	r3, r3
 8004b46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d106      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2200      	movs	r2, #0
 8004b52:	2102      	movs	r1, #2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff f9e3 	bl	8003f20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2103      	movs	r1, #3
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff f9c7 	bl	8003ef4 <LL_ADC_GetOffsetChannel>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <HAL_ADC_ConfigChannel+0x3aa>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2103      	movs	r1, #3
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff f9bc 	bl	8003ef4 <LL_ADC_GetOffsetChannel>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	0e9b      	lsrs	r3, r3, #26
 8004b80:	f003 021f 	and.w	r2, r3, #31
 8004b84:	e017      	b.n	8004bb6 <HAL_ADC_ConfigChannel+0x3da>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2103      	movs	r1, #3
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff f9b1 	bl	8003ef4 <LL_ADC_GetOffsetChannel>
 8004b92:	4603      	mov	r3, r0
 8004b94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b98:	fa93 f3a3 	rbit	r3, r3
 8004b9c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004b9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004ba8:	2320      	movs	r3, #32
 8004baa:	e003      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004bac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bae:	fab3 f383 	clz	r3, r3
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d105      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x3f2>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	0e9b      	lsrs	r3, r3, #26
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	e011      	b.n	8004bf2 <HAL_ADC_ConfigChannel+0x416>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bd6:	fa93 f3a3 	rbit	r3, r3
 8004bda:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004be6:	2320      	movs	r3, #32
 8004be8:	e003      	b.n	8004bf2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bec:	fab3 f383 	clz	r3, r3
 8004bf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d106      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2103      	movs	r1, #3
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff f98e 	bl	8003f20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff faeb 	bl	80041e4 <LL_ADC_IsEnabled>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f040 813d 	bne.w	8004e90 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6819      	ldr	r1, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f7ff fa4a 	bl	80040bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	4aa2      	ldr	r2, [pc, #648]	@ (8004eb8 <HAL_ADC_ConfigChannel+0x6dc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	f040 812e 	bne.w	8004e90 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x480>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	0e9b      	lsrs	r3, r3, #26
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	2b09      	cmp	r3, #9
 8004c52:	bf94      	ite	ls
 8004c54:	2301      	movls	r3, #1
 8004c56:	2300      	movhi	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	e019      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x4b4>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c64:	fa93 f3a3 	rbit	r3, r3
 8004c68:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004c6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004c74:	2320      	movs	r3, #32
 8004c76:	e003      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004c78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c7a:	fab3 f383 	clz	r3, r3
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	3301      	adds	r3, #1
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	2b09      	cmp	r3, #9
 8004c88:	bf94      	ite	ls
 8004c8a:	2301      	movls	r3, #1
 8004c8c:	2300      	movhi	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d079      	beq.n	8004d88 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d107      	bne.n	8004cb0 <HAL_ADC_ConfigChannel+0x4d4>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	0e9b      	lsrs	r3, r3, #26
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	069b      	lsls	r3, r3, #26
 8004caa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cae:	e015      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x500>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cb8:	fa93 f3a3 	rbit	r3, r3
 8004cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cc0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004cc8:	2320      	movs	r3, #32
 8004cca:	e003      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cce:	fab3 f383 	clz	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	069b      	lsls	r3, r3, #26
 8004cd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d109      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x520>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	0e9b      	lsrs	r3, r3, #26
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfa:	e017      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x550>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d04:	fa93 f3a3 	rbit	r3, r3
 8004d08:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004d14:	2320      	movs	r3, #32
 8004d16:	e003      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d1a:	fab3 f383 	clz	r3, r3
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	3301      	adds	r3, #1
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2101      	movs	r1, #1
 8004d28:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2c:	ea42 0103 	orr.w	r1, r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <HAL_ADC_ConfigChannel+0x576>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	0e9b      	lsrs	r3, r3, #26
 8004d42:	3301      	adds	r3, #1
 8004d44:	f003 021f 	and.w	r2, r3, #31
 8004d48:	4613      	mov	r3, r2
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	4413      	add	r3, r2
 8004d4e:	051b      	lsls	r3, r3, #20
 8004d50:	e018      	b.n	8004d84 <HAL_ADC_ConfigChannel+0x5a8>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d5a:	fa93 f3a3 	rbit	r3, r3
 8004d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004d6a:	2320      	movs	r3, #32
 8004d6c:	e003      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d70:	fab3 f383 	clz	r3, r3
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	3301      	adds	r3, #1
 8004d78:	f003 021f 	and.w	r2, r3, #31
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4413      	add	r3, r2
 8004d82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d84:	430b      	orrs	r3, r1
 8004d86:	e07e      	b.n	8004e86 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d107      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x5c8>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	0e9b      	lsrs	r3, r3, #26
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	069b      	lsls	r3, r3, #26
 8004d9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004da2:	e015      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0x5f4>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dac:	fa93 f3a3 	rbit	r3, r3
 8004db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004dbc:	2320      	movs	r3, #32
 8004dbe:	e003      	b.n	8004dc8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc2:	fab3 f383 	clz	r3, r3
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	3301      	adds	r3, #1
 8004dca:	069b      	lsls	r3, r3, #26
 8004dcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d109      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x614>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	0e9b      	lsrs	r3, r3, #26
 8004de2:	3301      	adds	r3, #1
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	2101      	movs	r1, #1
 8004dea:	fa01 f303 	lsl.w	r3, r1, r3
 8004dee:	e017      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x644>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	fa93 f3a3 	rbit	r3, r3
 8004dfc:	61fb      	str	r3, [r7, #28]
  return result;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004e08:	2320      	movs	r3, #32
 8004e0a:	e003      	b.n	8004e14 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	fab3 f383 	clz	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	3301      	adds	r3, #1
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e20:	ea42 0103 	orr.w	r1, r2, r3
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10d      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x670>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	0e9b      	lsrs	r3, r3, #26
 8004e36:	3301      	adds	r3, #1
 8004e38:	f003 021f 	and.w	r2, r3, #31
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4413      	add	r3, r2
 8004e42:	3b1e      	subs	r3, #30
 8004e44:	051b      	lsls	r3, r3, #20
 8004e46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e4a:	e01b      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x6a8>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	fa93 f3a3 	rbit	r3, r3
 8004e58:	613b      	str	r3, [r7, #16]
  return result;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004e64:	2320      	movs	r3, #32
 8004e66:	e003      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	fab3 f383 	clz	r3, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	3301      	adds	r3, #1
 8004e72:	f003 021f 	and.w	r2, r3, #31
 8004e76:	4613      	mov	r3, r2
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3b1e      	subs	r3, #30
 8004e7e:	051b      	lsls	r3, r3, #20
 8004e80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e84:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	f7ff f8eb 	bl	8004066 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4b09      	ldr	r3, [pc, #36]	@ (8004ebc <HAL_ADC_ConfigChannel+0x6e0>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80be 	beq.w	800501a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ea6:	d004      	beq.n	8004eb2 <HAL_ADC_ConfigChannel+0x6d6>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a04      	ldr	r2, [pc, #16]	@ (8004ec0 <HAL_ADC_ConfigChannel+0x6e4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d10a      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x6ec>
 8004eb2:	4b04      	ldr	r3, [pc, #16]	@ (8004ec4 <HAL_ADC_ConfigChannel+0x6e8>)
 8004eb4:	e009      	b.n	8004eca <HAL_ADC_ConfigChannel+0x6ee>
 8004eb6:	bf00      	nop
 8004eb8:	407f0000 	.word	0x407f0000
 8004ebc:	80080000 	.word	0x80080000
 8004ec0:	50000100 	.word	0x50000100
 8004ec4:	50000300 	.word	0x50000300
 8004ec8:	4b59      	ldr	r3, [pc, #356]	@ (8005030 <HAL_ADC_ConfigChannel+0x854>)
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe ffe0 	bl	8003e90 <LL_ADC_GetCommonPathInternalCh>
 8004ed0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a56      	ldr	r2, [pc, #344]	@ (8005034 <HAL_ADC_ConfigChannel+0x858>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_ADC_ConfigChannel+0x70c>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a55      	ldr	r2, [pc, #340]	@ (8005038 <HAL_ADC_ConfigChannel+0x85c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d13a      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004eec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d134      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004efc:	d005      	beq.n	8004f0a <HAL_ADC_ConfigChannel+0x72e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a4e      	ldr	r2, [pc, #312]	@ (800503c <HAL_ADC_ConfigChannel+0x860>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	f040 8085 	bne.w	8005014 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f12:	d004      	beq.n	8004f1e <HAL_ADC_ConfigChannel+0x742>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a49      	ldr	r2, [pc, #292]	@ (8005040 <HAL_ADC_ConfigChannel+0x864>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d101      	bne.n	8004f22 <HAL_ADC_ConfigChannel+0x746>
 8004f1e:	4a49      	ldr	r2, [pc, #292]	@ (8005044 <HAL_ADC_ConfigChannel+0x868>)
 8004f20:	e000      	b.n	8004f24 <HAL_ADC_ConfigChannel+0x748>
 8004f22:	4a43      	ldr	r2, [pc, #268]	@ (8005030 <HAL_ADC_ConfigChannel+0x854>)
 8004f24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f7fe ff9b 	bl	8003e6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f34:	4b44      	ldr	r3, [pc, #272]	@ (8005048 <HAL_ADC_ConfigChannel+0x86c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	099b      	lsrs	r3, r3, #6
 8004f3a:	4a44      	ldr	r2, [pc, #272]	@ (800504c <HAL_ADC_ConfigChannel+0x870>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	099b      	lsrs	r3, r3, #6
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	4613      	mov	r3, r2
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f4e:	e002      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1f9      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f5c:	e05a      	b.n	8005014 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a3b      	ldr	r2, [pc, #236]	@ (8005050 <HAL_ADC_ConfigChannel+0x874>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d125      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d11f      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a31      	ldr	r2, [pc, #196]	@ (8005040 <HAL_ADC_ConfigChannel+0x864>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d104      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x7ac>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a34      	ldr	r2, [pc, #208]	@ (8005054 <HAL_ADC_ConfigChannel+0x878>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d047      	beq.n	8005018 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f90:	d004      	beq.n	8004f9c <HAL_ADC_ConfigChannel+0x7c0>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a2a      	ldr	r2, [pc, #168]	@ (8005040 <HAL_ADC_ConfigChannel+0x864>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d101      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x7c4>
 8004f9c:	4a29      	ldr	r2, [pc, #164]	@ (8005044 <HAL_ADC_ConfigChannel+0x868>)
 8004f9e:	e000      	b.n	8004fa2 <HAL_ADC_ConfigChannel+0x7c6>
 8004fa0:	4a23      	ldr	r2, [pc, #140]	@ (8005030 <HAL_ADC_ConfigChannel+0x854>)
 8004fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004faa:	4619      	mov	r1, r3
 8004fac:	4610      	mov	r0, r2
 8004fae:	f7fe ff5c 	bl	8003e6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fb2:	e031      	b.n	8005018 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a27      	ldr	r2, [pc, #156]	@ (8005058 <HAL_ADC_ConfigChannel+0x87c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d12d      	bne.n	800501a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d127      	bne.n	800501a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1c      	ldr	r2, [pc, #112]	@ (8005040 <HAL_ADC_ConfigChannel+0x864>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d022      	beq.n	800501a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fdc:	d004      	beq.n	8004fe8 <HAL_ADC_ConfigChannel+0x80c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a17      	ldr	r2, [pc, #92]	@ (8005040 <HAL_ADC_ConfigChannel+0x864>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d101      	bne.n	8004fec <HAL_ADC_ConfigChannel+0x810>
 8004fe8:	4a16      	ldr	r2, [pc, #88]	@ (8005044 <HAL_ADC_ConfigChannel+0x868>)
 8004fea:	e000      	b.n	8004fee <HAL_ADC_ConfigChannel+0x812>
 8004fec:	4a10      	ldr	r2, [pc, #64]	@ (8005030 <HAL_ADC_ConfigChannel+0x854>)
 8004fee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ff2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	f7fe ff36 	bl	8003e6a <LL_ADC_SetCommonPathInternalCh>
 8004ffe:	e00c      	b.n	800501a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005004:	f043 0220 	orr.w	r2, r3, #32
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005012:	e002      	b.n	800501a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005014:	bf00      	nop
 8005016:	e000      	b.n	800501a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005018:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005022:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005026:	4618      	mov	r0, r3
 8005028:	37d8      	adds	r7, #216	@ 0xd8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	50000700 	.word	0x50000700
 8005034:	c3210000 	.word	0xc3210000
 8005038:	90c00010 	.word	0x90c00010
 800503c:	50000600 	.word	0x50000600
 8005040:	50000100 	.word	0x50000100
 8005044:	50000300 	.word	0x50000300
 8005048:	20000004 	.word	0x20000004
 800504c:	053e2d63 	.word	0x053e2d63
 8005050:	c7520000 	.word	0xc7520000
 8005054:	50000500 	.word	0x50000500
 8005058:	cb840000 	.word	0xcb840000

0800505c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005064:	2300      	movs	r3, #0
 8005066:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff f8b9 	bl	80041e4 <LL_ADC_IsEnabled>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d176      	bne.n	8005166 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	4b3c      	ldr	r3, [pc, #240]	@ (8005170 <ADC_Enable+0x114>)
 8005080:	4013      	ands	r3, r2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00d      	beq.n	80050a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800508a:	f043 0210 	orr.w	r2, r3, #16
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005096:	f043 0201 	orr.w	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e062      	b.n	8005168 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff f888 	bl	80041bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050b4:	d004      	beq.n	80050c0 <ADC_Enable+0x64>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005174 <ADC_Enable+0x118>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d101      	bne.n	80050c4 <ADC_Enable+0x68>
 80050c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005178 <ADC_Enable+0x11c>)
 80050c2:	e000      	b.n	80050c6 <ADC_Enable+0x6a>
 80050c4:	4b2d      	ldr	r3, [pc, #180]	@ (800517c <ADC_Enable+0x120>)
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe fee2 	bl	8003e90 <LL_ADC_GetCommonPathInternalCh>
 80050cc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80050ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d013      	beq.n	80050fe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005180 <ADC_Enable+0x124>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	099b      	lsrs	r3, r3, #6
 80050dc:	4a29      	ldr	r2, [pc, #164]	@ (8005184 <ADC_Enable+0x128>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	099b      	lsrs	r3, r3, #6
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	4613      	mov	r3, r2
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80050f0:	e002      	b.n	80050f8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f9      	bne.n	80050f2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050fe:	f7fe fe95 	bl	8003e2c <HAL_GetTick>
 8005102:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005104:	e028      	b.n	8005158 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff f86a 	bl	80041e4 <LL_ADC_IsEnabled>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d104      	bne.n	8005120 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff f84e 	bl	80041bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005120:	f7fe fe84 	bl	8003e2c <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d914      	bls.n	8005158 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b01      	cmp	r3, #1
 800513a:	d00d      	beq.n	8005158 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005140:	f043 0210 	orr.w	r2, r3, #16
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800514c:	f043 0201 	orr.w	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e007      	b.n	8005168 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b01      	cmp	r3, #1
 8005164:	d1cf      	bne.n	8005106 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	8000003f 	.word	0x8000003f
 8005174:	50000100 	.word	0x50000100
 8005178:	50000300 	.word	0x50000300
 800517c:	50000700 	.word	0x50000700
 8005180:	20000004 	.word	0x20000004
 8005184:	053e2d63 	.word	0x053e2d63

08005188 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005194:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800519a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d14b      	bne.n	800523a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d021      	beq.n	8005200 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe ff11 	bl	8003fe8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d032      	beq.n	8005232 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d12b      	bne.n	8005232 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d11f      	bne.n	8005232 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f6:	f043 0201 	orr.w	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051fe:	e018      	b.n	8005232 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d111      	bne.n	8005232 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005212:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800521e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d105      	bne.n	8005232 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800522a:	f043 0201 	orr.w	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7ff fab4 	bl	80047a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005238:	e00e      	b.n	8005258 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff fabe 	bl	80047c8 <HAL_ADC_ErrorCallback>
}
 800524c:	e004      	b.n	8005258 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	4798      	blx	r3
}
 8005258:	bf00      	nop
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff faa0 	bl	80047b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005274:	bf00      	nop
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005288:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800528e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800529a:	f043 0204 	orr.w	r2, r3, #4
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff fa90 	bl	80047c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052a8:	bf00      	nop
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <LL_ADC_IsEnabled>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <LL_ADC_IsEnabled+0x18>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <LL_ADC_IsEnabled+0x1a>
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d101      	bne.n	80052ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80052fc:	b590      	push	{r4, r7, lr}
 80052fe:	b0a1      	sub	sp, #132	@ 0x84
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005316:	2302      	movs	r3, #2
 8005318:	e0e7      	b.n	80054ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005322:	2300      	movs	r3, #0
 8005324:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005326:	2300      	movs	r3, #0
 8005328:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005332:	d102      	bne.n	800533a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005334:	4b6f      	ldr	r3, [pc, #444]	@ (80054f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	e009      	b.n	800534e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a6e      	ldr	r2, [pc, #440]	@ (80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d102      	bne.n	800534a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005344:	4b6d      	ldr	r3, [pc, #436]	@ (80054fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	e001      	b.n	800534e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800534a:	2300      	movs	r3, #0
 800534c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005358:	f043 0220 	orr.w	r2, r3, #32
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0be      	b.n	80054ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff ffb1 	bl	80052d6 <LL_ADC_REG_IsConversionOngoing>
 8005374:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff ffab 	bl	80052d6 <LL_ADC_REG_IsConversionOngoing>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	f040 80a0 	bne.w	80054c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005388:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800538a:	2b00      	cmp	r3, #0
 800538c:	f040 809c 	bne.w	80054c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005398:	d004      	beq.n	80053a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a55      	ldr	r2, [pc, #340]	@ (80054f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d101      	bne.n	80053a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80053a4:	4b56      	ldr	r3, [pc, #344]	@ (8005500 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80053a6:	e000      	b.n	80053aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80053a8:	4b56      	ldr	r3, [pc, #344]	@ (8005504 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80053aa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d04b      	beq.n	800544c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80053b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	6859      	ldr	r1, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053c6:	035b      	lsls	r3, r3, #13
 80053c8:	430b      	orrs	r3, r1
 80053ca:	431a      	orrs	r2, r3
 80053cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053d8:	d004      	beq.n	80053e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a45      	ldr	r2, [pc, #276]	@ (80054f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d10f      	bne.n	8005404 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80053e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80053e8:	f7ff ff62 	bl	80052b0 <LL_ADC_IsEnabled>
 80053ec:	4604      	mov	r4, r0
 80053ee:	4841      	ldr	r0, [pc, #260]	@ (80054f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80053f0:	f7ff ff5e 	bl	80052b0 <LL_ADC_IsEnabled>
 80053f4:	4603      	mov	r3, r0
 80053f6:	4323      	orrs	r3, r4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	e012      	b.n	800542a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005404:	483c      	ldr	r0, [pc, #240]	@ (80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005406:	f7ff ff53 	bl	80052b0 <LL_ADC_IsEnabled>
 800540a:	4604      	mov	r4, r0
 800540c:	483b      	ldr	r0, [pc, #236]	@ (80054fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800540e:	f7ff ff4f 	bl	80052b0 <LL_ADC_IsEnabled>
 8005412:	4603      	mov	r3, r0
 8005414:	431c      	orrs	r4, r3
 8005416:	483c      	ldr	r0, [pc, #240]	@ (8005508 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005418:	f7ff ff4a 	bl	80052b0 <LL_ADC_IsEnabled>
 800541c:	4603      	mov	r3, r0
 800541e:	4323      	orrs	r3, r4
 8005420:	2b00      	cmp	r3, #0
 8005422:	bf0c      	ite	eq
 8005424:	2301      	moveq	r3, #1
 8005426:	2300      	movne	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d056      	beq.n	80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800542e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005436:	f023 030f 	bic.w	r3, r3, #15
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	6811      	ldr	r1, [r2, #0]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	6892      	ldr	r2, [r2, #8]
 8005442:	430a      	orrs	r2, r1
 8005444:	431a      	orrs	r2, r3
 8005446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005448:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800544a:	e047      	b.n	80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800544c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005454:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005456:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005460:	d004      	beq.n	800546c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a23      	ldr	r2, [pc, #140]	@ (80054f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d10f      	bne.n	800548c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800546c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005470:	f7ff ff1e 	bl	80052b0 <LL_ADC_IsEnabled>
 8005474:	4604      	mov	r4, r0
 8005476:	481f      	ldr	r0, [pc, #124]	@ (80054f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005478:	f7ff ff1a 	bl	80052b0 <LL_ADC_IsEnabled>
 800547c:	4603      	mov	r3, r0
 800547e:	4323      	orrs	r3, r4
 8005480:	2b00      	cmp	r3, #0
 8005482:	bf0c      	ite	eq
 8005484:	2301      	moveq	r3, #1
 8005486:	2300      	movne	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	e012      	b.n	80054b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800548c:	481a      	ldr	r0, [pc, #104]	@ (80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800548e:	f7ff ff0f 	bl	80052b0 <LL_ADC_IsEnabled>
 8005492:	4604      	mov	r4, r0
 8005494:	4819      	ldr	r0, [pc, #100]	@ (80054fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005496:	f7ff ff0b 	bl	80052b0 <LL_ADC_IsEnabled>
 800549a:	4603      	mov	r3, r0
 800549c:	431c      	orrs	r4, r3
 800549e:	481a      	ldr	r0, [pc, #104]	@ (8005508 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80054a0:	f7ff ff06 	bl	80052b0 <LL_ADC_IsEnabled>
 80054a4:	4603      	mov	r3, r0
 80054a6:	4323      	orrs	r3, r4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	bf0c      	ite	eq
 80054ac:	2301      	moveq	r3, #1
 80054ae:	2300      	movne	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d012      	beq.n	80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80054be:	f023 030f 	bic.w	r3, r3, #15
 80054c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80054c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80054c6:	e009      	b.n	80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054cc:	f043 0220 	orr.w	r2, r3, #32
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80054da:	e000      	b.n	80054de <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80054dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80054e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3784      	adds	r7, #132	@ 0x84
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd90      	pop	{r4, r7, pc}
 80054f2:	bf00      	nop
 80054f4:	50000100 	.word	0x50000100
 80054f8:	50000400 	.word	0x50000400
 80054fc:	50000500 	.word	0x50000500
 8005500:	50000300 	.word	0x50000300
 8005504:	50000700 	.word	0x50000700
 8005508:	50000600 	.word	0x50000600

0800550c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800551c:	4b0c      	ldr	r3, [pc, #48]	@ (8005550 <__NVIC_SetPriorityGrouping+0x44>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005528:	4013      	ands	r3, r2
 800552a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005534:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800553c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800553e:	4a04      	ldr	r2, [pc, #16]	@ (8005550 <__NVIC_SetPriorityGrouping+0x44>)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	60d3      	str	r3, [r2, #12]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	e000ed00 	.word	0xe000ed00

08005554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005558:	4b04      	ldr	r3, [pc, #16]	@ (800556c <__NVIC_GetPriorityGrouping+0x18>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	0a1b      	lsrs	r3, r3, #8
 800555e:	f003 0307 	and.w	r3, r3, #7
}
 8005562:	4618      	mov	r0, r3
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	e000ed00 	.word	0xe000ed00

08005570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800557a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557e:	2b00      	cmp	r3, #0
 8005580:	db0b      	blt.n	800559a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	f003 021f 	and.w	r2, r3, #31
 8005588:	4907      	ldr	r1, [pc, #28]	@ (80055a8 <__NVIC_EnableIRQ+0x38>)
 800558a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	2001      	movs	r0, #1
 8005592:	fa00 f202 	lsl.w	r2, r0, r2
 8005596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	e000e100 	.word	0xe000e100

080055ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	6039      	str	r1, [r7, #0]
 80055b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	db0a      	blt.n	80055d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	490c      	ldr	r1, [pc, #48]	@ (80055f8 <__NVIC_SetPriority+0x4c>)
 80055c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ca:	0112      	lsls	r2, r2, #4
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	440b      	add	r3, r1
 80055d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055d4:	e00a      	b.n	80055ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	4908      	ldr	r1, [pc, #32]	@ (80055fc <__NVIC_SetPriority+0x50>)
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	3b04      	subs	r3, #4
 80055e4:	0112      	lsls	r2, r2, #4
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	440b      	add	r3, r1
 80055ea:	761a      	strb	r2, [r3, #24]
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	e000e100 	.word	0xe000e100
 80055fc:	e000ed00 	.word	0xe000ed00

08005600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005600:	b480      	push	{r7}
 8005602:	b089      	sub	sp, #36	@ 0x24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f1c3 0307 	rsb	r3, r3, #7
 800561a:	2b04      	cmp	r3, #4
 800561c:	bf28      	it	cs
 800561e:	2304      	movcs	r3, #4
 8005620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	3304      	adds	r3, #4
 8005626:	2b06      	cmp	r3, #6
 8005628:	d902      	bls.n	8005630 <NVIC_EncodePriority+0x30>
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	3b03      	subs	r3, #3
 800562e:	e000      	b.n	8005632 <NVIC_EncodePriority+0x32>
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005634:	f04f 32ff 	mov.w	r2, #4294967295
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	43da      	mvns	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	401a      	ands	r2, r3
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005648:	f04f 31ff 	mov.w	r1, #4294967295
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	fa01 f303 	lsl.w	r3, r1, r3
 8005652:	43d9      	mvns	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005658:	4313      	orrs	r3, r2
         );
}
 800565a:	4618      	mov	r0, r3
 800565c:	3724      	adds	r7, #36	@ 0x24
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3b01      	subs	r3, #1
 8005674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005678:	d301      	bcc.n	800567e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800567a:	2301      	movs	r3, #1
 800567c:	e00f      	b.n	800569e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800567e:	4a0a      	ldr	r2, [pc, #40]	@ (80056a8 <SysTick_Config+0x40>)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3b01      	subs	r3, #1
 8005684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005686:	210f      	movs	r1, #15
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	f7ff ff8e 	bl	80055ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005690:	4b05      	ldr	r3, [pc, #20]	@ (80056a8 <SysTick_Config+0x40>)
 8005692:	2200      	movs	r2, #0
 8005694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005696:	4b04      	ldr	r3, [pc, #16]	@ (80056a8 <SysTick_Config+0x40>)
 8005698:	2207      	movs	r2, #7
 800569a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	e000e010 	.word	0xe000e010

080056ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff ff29 	bl	800550c <__NVIC_SetPriorityGrouping>
}
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b086      	sub	sp, #24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	4603      	mov	r3, r0
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056d0:	f7ff ff40 	bl	8005554 <__NVIC_GetPriorityGrouping>
 80056d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	6978      	ldr	r0, [r7, #20]
 80056dc:	f7ff ff90 	bl	8005600 <NVIC_EncodePriority>
 80056e0:	4602      	mov	r2, r0
 80056e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056e6:	4611      	mov	r1, r2
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff ff5f 	bl	80055ac <__NVIC_SetPriority>
}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	4603      	mov	r3, r0
 80056fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ff33 	bl	8005570 <__NVIC_EnableIRQ>
}
 800570a:	bf00      	nop
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff ffa4 	bl	8005668 <SysTick_Config>
 8005720:	4603      	mov	r3, r0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e08d      	b.n	800585a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	4b47      	ldr	r3, [pc, #284]	@ (8005864 <HAL_DMA_Init+0x138>)
 8005746:	429a      	cmp	r2, r3
 8005748:	d80f      	bhi.n	800576a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	4b45      	ldr	r3, [pc, #276]	@ (8005868 <HAL_DMA_Init+0x13c>)
 8005752:	4413      	add	r3, r2
 8005754:	4a45      	ldr	r2, [pc, #276]	@ (800586c <HAL_DMA_Init+0x140>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	091b      	lsrs	r3, r3, #4
 800575c:	009a      	lsls	r2, r3, #2
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a42      	ldr	r2, [pc, #264]	@ (8005870 <HAL_DMA_Init+0x144>)
 8005766:	641a      	str	r2, [r3, #64]	@ 0x40
 8005768:	e00e      	b.n	8005788 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	4b40      	ldr	r3, [pc, #256]	@ (8005874 <HAL_DMA_Init+0x148>)
 8005772:	4413      	add	r3, r2
 8005774:	4a3d      	ldr	r2, [pc, #244]	@ (800586c <HAL_DMA_Init+0x140>)
 8005776:	fba2 2303 	umull	r2, r3, r2, r3
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	009a      	lsls	r2, r3, #2
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a3c      	ldr	r2, [pc, #240]	@ (8005878 <HAL_DMA_Init+0x14c>)
 8005786:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800579e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80057ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa76 	bl	8005ccc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057e8:	d102      	bne.n	80057f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005804:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d010      	beq.n	8005830 <HAL_DMA_Init+0x104>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b04      	cmp	r3, #4
 8005814:	d80c      	bhi.n	8005830 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fa96 	bl	8005d48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	e008      	b.n	8005842 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40020407 	.word	0x40020407
 8005868:	bffdfff8 	.word	0xbffdfff8
 800586c:	cccccccd 	.word	0xcccccccd
 8005870:	40020000 	.word	0x40020000
 8005874:	bffdfbf8 	.word	0xbffdfbf8
 8005878:	40020400 	.word	0x40020400

0800587c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_DMA_Start_IT+0x20>
 8005898:	2302      	movs	r3, #2
 800589a:	e066      	b.n	800596a <HAL_DMA_Start_IT+0xee>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d155      	bne.n	800595c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f9bb 	bl	8005c50 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 020e 	orr.w	r2, r2, #14
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e00f      	b.n	8005914 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0204 	bic.w	r2, r2, #4
 8005902:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 020a 	orr.w	r2, r2, #10
 8005912:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800592c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005930:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005944:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005948:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e005      	b.n	8005968 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005964:	2302      	movs	r3, #2
 8005966:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005968:	7dfb      	ldrb	r3, [r7, #23]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d005      	beq.n	8005996 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2204      	movs	r2, #4
 800598e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
 8005994:	e037      	b.n	8005a06 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 020e 	bic.w	r2, r2, #14
 80059a4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059b4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0201 	bic.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ca:	f003 021f 	and.w	r2, r3, #31
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d2:	2101      	movs	r1, #1
 80059d4:	fa01 f202 	lsl.w	r2, r1, r2
 80059d8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80059e2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00c      	beq.n	8005a06 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059fa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a04:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d00d      	beq.n	8005a58 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2204      	movs	r2, #4
 8005a40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	73fb      	strb	r3, [r7, #15]
 8005a56:	e047      	b.n	8005ae8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 020e 	bic.w	r2, r2, #14
 8005a66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8c:	f003 021f 	and.w	r2, r3, #31
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a94:	2101      	movs	r1, #1
 8005a96:	fa01 f202 	lsl.w	r2, r1, r2
 8005a9a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005aa4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005abc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ac6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4798      	blx	r3
    }
  }
  return status;
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	2204      	movs	r2, #4
 8005b14:	409a      	lsls	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d026      	beq.n	8005b6c <HAL_DMA_IRQHandler+0x7a>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d021      	beq.n	8005b6c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d107      	bne.n	8005b46 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0204 	bic.w	r2, r2, #4
 8005b44:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4a:	f003 021f 	and.w	r2, r3, #31
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b52:	2104      	movs	r1, #4
 8005b54:	fa01 f202 	lsl.w	r2, r1, r2
 8005b58:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d071      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005b6a:	e06c      	b.n	8005c46 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b70:	f003 031f 	and.w	r3, r3, #31
 8005b74:	2202      	movs	r2, #2
 8005b76:	409a      	lsls	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d02e      	beq.n	8005bde <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d029      	beq.n	8005bde <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10b      	bne.n	8005bb0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 020a 	bic.w	r2, r2, #10
 8005ba6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb4:	f003 021f 	and.w	r2, r3, #31
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbc:	2102      	movs	r1, #2
 8005bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8005bc2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d038      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005bdc:	e033      	b.n	8005c46 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	2208      	movs	r2, #8
 8005be8:	409a      	lsls	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d02a      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d025      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 020e 	bic.w	r2, r2, #14
 8005c0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c10:	f003 021f 	and.w	r2, r3, #31
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c18:	2101      	movs	r1, #1
 8005c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c46:	bf00      	nop
 8005c48:	bf00      	nop
}
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c66:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c78:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7e:	f003 021f 	and.w	r2, r3, #31
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c86:	2101      	movs	r1, #1
 8005c88:	fa01 f202 	lsl.w	r2, r1, r2
 8005c8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b10      	cmp	r3, #16
 8005c9c:	d108      	bne.n	8005cb0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005cae:	e007      	b.n	8005cc0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	60da      	str	r2, [r3, #12]
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4b16      	ldr	r3, [pc, #88]	@ (8005d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d802      	bhi.n	8005ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ce0:	4b15      	ldr	r3, [pc, #84]	@ (8005d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e001      	b.n	8005cea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005ce6:	4b15      	ldr	r3, [pc, #84]	@ (8005d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005ce8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	3b08      	subs	r3, #8
 8005cf6:	4a12      	ldr	r2, [pc, #72]	@ (8005d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfc:	091b      	lsrs	r3, r3, #4
 8005cfe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d04:	089b      	lsrs	r3, r3, #2
 8005d06:	009a      	lsls	r2, r3, #2
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a0b      	ldr	r2, [pc, #44]	@ (8005d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005d16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f003 031f 	and.w	r3, r3, #31
 8005d1e:	2201      	movs	r2, #1
 8005d20:	409a      	lsls	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40020407 	.word	0x40020407
 8005d38:	40020800 	.word	0x40020800
 8005d3c:	40020820 	.word	0x40020820
 8005d40:	cccccccd 	.word	0xcccccccd
 8005d44:	40020880 	.word	0x40020880

08005d48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	461a      	mov	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a08      	ldr	r2, [pc, #32]	@ (8005d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005d6a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	2201      	movs	r2, #1
 8005d76:	409a      	lsls	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	1000823f 	.word	0x1000823f
 8005d8c:	40020940 	.word	0x40020940

08005d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d9e:	e15a      	b.n	8006056 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	2101      	movs	r1, #1
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dac:	4013      	ands	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 814c 	beq.w	8006050 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d005      	beq.n	8005dd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d130      	bne.n	8005e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	2203      	movs	r2, #3
 8005ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8005de0:	43db      	mvns	r3, r3
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4013      	ands	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e06:	2201      	movs	r2, #1
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4013      	ands	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	091b      	lsrs	r3, r3, #4
 8005e1c:	f003 0201 	and.w	r2, r3, #1
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d017      	beq.n	8005e6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	2203      	movs	r2, #3
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4013      	ands	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d123      	bne.n	8005ec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	08da      	lsrs	r2, r3, #3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3208      	adds	r2, #8
 8005e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	220f      	movs	r2, #15
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	43db      	mvns	r3, r3
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	691a      	ldr	r2, [r3, #16]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	08da      	lsrs	r2, r3, #3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3208      	adds	r2, #8
 8005ebc:	6939      	ldr	r1, [r7, #16]
 8005ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	2203      	movs	r2, #3
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 0203 	and.w	r2, r3, #3
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 80a6 	beq.w	8006050 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f04:	4b5b      	ldr	r3, [pc, #364]	@ (8006074 <HAL_GPIO_Init+0x2e4>)
 8005f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f08:	4a5a      	ldr	r2, [pc, #360]	@ (8006074 <HAL_GPIO_Init+0x2e4>)
 8005f0a:	f043 0301 	orr.w	r3, r3, #1
 8005f0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f10:	4b58      	ldr	r3, [pc, #352]	@ (8006074 <HAL_GPIO_Init+0x2e4>)
 8005f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f1c:	4a56      	ldr	r2, [pc, #344]	@ (8006078 <HAL_GPIO_Init+0x2e8>)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	089b      	lsrs	r3, r3, #2
 8005f22:	3302      	adds	r3, #2
 8005f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	220f      	movs	r2, #15
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005f46:	d01f      	beq.n	8005f88 <HAL_GPIO_Init+0x1f8>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800607c <HAL_GPIO_Init+0x2ec>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d019      	beq.n	8005f84 <HAL_GPIO_Init+0x1f4>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a4b      	ldr	r2, [pc, #300]	@ (8006080 <HAL_GPIO_Init+0x2f0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <HAL_GPIO_Init+0x1f0>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a4a      	ldr	r2, [pc, #296]	@ (8006084 <HAL_GPIO_Init+0x2f4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00d      	beq.n	8005f7c <HAL_GPIO_Init+0x1ec>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a49      	ldr	r2, [pc, #292]	@ (8006088 <HAL_GPIO_Init+0x2f8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d007      	beq.n	8005f78 <HAL_GPIO_Init+0x1e8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a48      	ldr	r2, [pc, #288]	@ (800608c <HAL_GPIO_Init+0x2fc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d101      	bne.n	8005f74 <HAL_GPIO_Init+0x1e4>
 8005f70:	2305      	movs	r3, #5
 8005f72:	e00a      	b.n	8005f8a <HAL_GPIO_Init+0x1fa>
 8005f74:	2306      	movs	r3, #6
 8005f76:	e008      	b.n	8005f8a <HAL_GPIO_Init+0x1fa>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	e006      	b.n	8005f8a <HAL_GPIO_Init+0x1fa>
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e004      	b.n	8005f8a <HAL_GPIO_Init+0x1fa>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e002      	b.n	8005f8a <HAL_GPIO_Init+0x1fa>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <HAL_GPIO_Init+0x1fa>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	f002 0203 	and.w	r2, r2, #3
 8005f90:	0092      	lsls	r2, r2, #2
 8005f92:	4093      	lsls	r3, r2
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f9a:	4937      	ldr	r1, [pc, #220]	@ (8006078 <HAL_GPIO_Init+0x2e8>)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	089b      	lsrs	r3, r3, #2
 8005fa0:	3302      	adds	r3, #2
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fa8:	4b39      	ldr	r3, [pc, #228]	@ (8006090 <HAL_GPIO_Init+0x300>)
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fcc:	4a30      	ldr	r2, [pc, #192]	@ (8006090 <HAL_GPIO_Init+0x300>)
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8006090 <HAL_GPIO_Init+0x300>)
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	43db      	mvns	r3, r3
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ff6:	4a26      	ldr	r2, [pc, #152]	@ (8006090 <HAL_GPIO_Init+0x300>)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005ffc:	4b24      	ldr	r3, [pc, #144]	@ (8006090 <HAL_GPIO_Init+0x300>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	43db      	mvns	r3, r3
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4013      	ands	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006020:	4a1b      	ldr	r2, [pc, #108]	@ (8006090 <HAL_GPIO_Init+0x300>)
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006026:	4b1a      	ldr	r3, [pc, #104]	@ (8006090 <HAL_GPIO_Init+0x300>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	43db      	mvns	r3, r3
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4013      	ands	r3, r2
 8006034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800604a:	4a11      	ldr	r2, [pc, #68]	@ (8006090 <HAL_GPIO_Init+0x300>)
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	3301      	adds	r3, #1
 8006054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	f47f ae9d 	bne.w	8005da0 <HAL_GPIO_Init+0x10>
  }
}
 8006066:	bf00      	nop
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	40021000 	.word	0x40021000
 8006078:	40010000 	.word	0x40010000
 800607c:	48000400 	.word	0x48000400
 8006080:	48000800 	.word	0x48000800
 8006084:	48000c00 	.word	0x48000c00
 8006088:	48001000 	.word	0x48001000
 800608c:	48001400 	.word	0x48001400
 8006090:	40010400 	.word	0x40010400

08006094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	887b      	ldrh	r3, [r7, #2]
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060ac:	2301      	movs	r3, #1
 80060ae:	73fb      	strb	r3, [r7, #15]
 80060b0:	e001      	b.n	80060b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	807b      	strh	r3, [r7, #2]
 80060d0:	4613      	mov	r3, r2
 80060d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060d4:	787b      	ldrb	r3, [r7, #1]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060da:	887a      	ldrh	r2, [r7, #2]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060e0:	e002      	b.n	80060e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060e2:	887a      	ldrh	r2, [r7, #2]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e08d      	b.n	8006222 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fc f854 	bl	80021c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2224      	movs	r2, #36	@ 0x24
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0201 	bic.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006144:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006154:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d107      	bne.n	800616e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800616a:	609a      	str	r2, [r3, #8]
 800616c:	e006      	b.n	800617c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800617a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d108      	bne.n	8006196 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006192:	605a      	str	r2, [r3, #4]
 8006194:	e007      	b.n	80061a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80061b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69d9      	ldr	r1, [r3, #28]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1a      	ldr	r2, [r3, #32]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b20      	cmp	r3, #32
 800623e:	d138      	bne.n	80062b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800624a:	2302      	movs	r3, #2
 800624c:	e032      	b.n	80062b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2224      	movs	r2, #36	@ 0x24
 800625a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0201 	bic.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800627c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6819      	ldr	r1, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 0201 	orr.w	r2, r2, #1
 800629c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e000      	b.n	80062b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062b2:	2302      	movs	r3, #2
  }
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d139      	bne.n	800634a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e033      	b.n	800634c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2224      	movs	r2, #36	@ 0x24
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006312:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0201 	orr.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2220      	movs	r2, #32
 800633a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	e000      	b.n	800634c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800634a:	2302      	movs	r3, #2
  }
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800635c:	4b05      	ldr	r3, [pc, #20]	@ (8006374 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a04      	ldr	r2, [pc, #16]	@ (8006374 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006366:	6013      	str	r3, [r2, #0]
}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	40007000 	.word	0x40007000

08006378 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d141      	bne.n	800640a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006386:	4b4b      	ldr	r3, [pc, #300]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800638e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006392:	d131      	bne.n	80063f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006394:	4b47      	ldr	r3, [pc, #284]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800639a:	4a46      	ldr	r2, [pc, #280]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800639c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063a4:	4b43      	ldr	r3, [pc, #268]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063ac:	4a41      	ldr	r2, [pc, #260]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063b4:	4b40      	ldr	r3, [pc, #256]	@ (80064b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2232      	movs	r2, #50	@ 0x32
 80063ba:	fb02 f303 	mul.w	r3, r2, r3
 80063be:	4a3f      	ldr	r2, [pc, #252]	@ (80064bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063c0:	fba2 2303 	umull	r2, r3, r2, r3
 80063c4:	0c9b      	lsrs	r3, r3, #18
 80063c6:	3301      	adds	r3, #1
 80063c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063ca:	e002      	b.n	80063d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063d2:	4b38      	ldr	r3, [pc, #224]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063de:	d102      	bne.n	80063e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1f2      	bne.n	80063cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063e6:	4b33      	ldr	r3, [pc, #204]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f2:	d158      	bne.n	80064a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e057      	b.n	80064a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063f8:	4b2e      	ldr	r3, [pc, #184]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063fe:	4a2d      	ldr	r2, [pc, #180]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006404:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006408:	e04d      	b.n	80064a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006410:	d141      	bne.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006412:	4b28      	ldr	r3, [pc, #160]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800641a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800641e:	d131      	bne.n	8006484 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006420:	4b24      	ldr	r3, [pc, #144]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006426:	4a23      	ldr	r2, [pc, #140]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800642c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006430:	4b20      	ldr	r3, [pc, #128]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006438:	4a1e      	ldr	r2, [pc, #120]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800643a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800643e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006440:	4b1d      	ldr	r3, [pc, #116]	@ (80064b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2232      	movs	r2, #50	@ 0x32
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	4a1c      	ldr	r2, [pc, #112]	@ (80064bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800644c:	fba2 2303 	umull	r2, r3, r2, r3
 8006450:	0c9b      	lsrs	r3, r3, #18
 8006452:	3301      	adds	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006456:	e002      	b.n	800645e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3b01      	subs	r3, #1
 800645c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800645e:	4b15      	ldr	r3, [pc, #84]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800646a:	d102      	bne.n	8006472 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f2      	bne.n	8006458 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006472:	4b10      	ldr	r3, [pc, #64]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800647a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800647e:	d112      	bne.n	80064a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e011      	b.n	80064a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006484:	4b0b      	ldr	r3, [pc, #44]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800648a:	4a0a      	ldr	r2, [pc, #40]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800648c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006490:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006494:	e007      	b.n	80064a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006496:	4b07      	ldr	r3, [pc, #28]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800649e:	4a05      	ldr	r2, [pc, #20]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80064a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	40007000 	.word	0x40007000
 80064b8:	20000004 	.word	0x20000004
 80064bc:	431bde83 	.word	0x431bde83

080064c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80064c4:	4b05      	ldr	r3, [pc, #20]	@ (80064dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	4a04      	ldr	r2, [pc, #16]	@ (80064dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064ce:	6093      	str	r3, [r2, #8]
}
 80064d0:	bf00      	nop
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	40007000 	.word	0x40007000

080064e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e2fe      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d075      	beq.n	80065ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064fe:	4b97      	ldr	r3, [pc, #604]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 030c 	and.w	r3, r3, #12
 8006506:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006508:	4b94      	ldr	r3, [pc, #592]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b0c      	cmp	r3, #12
 8006516:	d102      	bne.n	800651e <HAL_RCC_OscConfig+0x3e>
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2b03      	cmp	r3, #3
 800651c:	d002      	beq.n	8006524 <HAL_RCC_OscConfig+0x44>
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	2b08      	cmp	r3, #8
 8006522:	d10b      	bne.n	800653c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006524:	4b8d      	ldr	r3, [pc, #564]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d05b      	beq.n	80065e8 <HAL_RCC_OscConfig+0x108>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d157      	bne.n	80065e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e2d9      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006544:	d106      	bne.n	8006554 <HAL_RCC_OscConfig+0x74>
 8006546:	4b85      	ldr	r3, [pc, #532]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a84      	ldr	r2, [pc, #528]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 800654c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e01d      	b.n	8006590 <HAL_RCC_OscConfig+0xb0>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800655c:	d10c      	bne.n	8006578 <HAL_RCC_OscConfig+0x98>
 800655e:	4b7f      	ldr	r3, [pc, #508]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a7e      	ldr	r2, [pc, #504]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	4b7c      	ldr	r3, [pc, #496]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a7b      	ldr	r2, [pc, #492]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	e00b      	b.n	8006590 <HAL_RCC_OscConfig+0xb0>
 8006578:	4b78      	ldr	r3, [pc, #480]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a77      	ldr	r2, [pc, #476]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 800657e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	4b75      	ldr	r3, [pc, #468]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a74      	ldr	r2, [pc, #464]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 800658a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800658e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d013      	beq.n	80065c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fd fc48 	bl	8003e2c <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065a0:	f7fd fc44 	bl	8003e2c <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b64      	cmp	r3, #100	@ 0x64
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e29e      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065b2:	4b6a      	ldr	r3, [pc, #424]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0xc0>
 80065be:	e014      	b.n	80065ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fd fc34 	bl	8003e2c <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065c8:	f7fd fc30 	bl	8003e2c <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b64      	cmp	r3, #100	@ 0x64
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e28a      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065da:	4b60      	ldr	r3, [pc, #384]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f0      	bne.n	80065c8 <HAL_RCC_OscConfig+0xe8>
 80065e6:	e000      	b.n	80065ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d075      	beq.n	80066e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065f6:	4b59      	ldr	r3, [pc, #356]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 030c 	and.w	r3, r3, #12
 80065fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006600:	4b56      	ldr	r3, [pc, #344]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	2b0c      	cmp	r3, #12
 800660e:	d102      	bne.n	8006616 <HAL_RCC_OscConfig+0x136>
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d002      	beq.n	800661c <HAL_RCC_OscConfig+0x13c>
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	2b04      	cmp	r3, #4
 800661a:	d11f      	bne.n	800665c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800661c:	4b4f      	ldr	r3, [pc, #316]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_RCC_OscConfig+0x154>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e25d      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006634:	4b49      	ldr	r3, [pc, #292]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	061b      	lsls	r3, r3, #24
 8006642:	4946      	ldr	r1, [pc, #280]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006644:	4313      	orrs	r3, r2
 8006646:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006648:	4b45      	ldr	r3, [pc, #276]	@ (8006760 <HAL_RCC_OscConfig+0x280>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f7fd fba1 	bl	8003d94 <HAL_InitTick>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d043      	beq.n	80066e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e249      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d023      	beq.n	80066ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006664:	4b3d      	ldr	r3, [pc, #244]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a3c      	ldr	r2, [pc, #240]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 800666a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800666e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006670:	f7fd fbdc 	bl	8003e2c <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006678:	f7fd fbd8 	bl	8003e2c <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e232      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800668a:	4b34      	ldr	r3, [pc, #208]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0f0      	beq.n	8006678 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006696:	4b31      	ldr	r3, [pc, #196]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	061b      	lsls	r3, r3, #24
 80066a4:	492d      	ldr	r1, [pc, #180]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	604b      	str	r3, [r1, #4]
 80066aa:	e01a      	b.n	80066e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ac:	4b2b      	ldr	r3, [pc, #172]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a2a      	ldr	r2, [pc, #168]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 80066b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b8:	f7fd fbb8 	bl	8003e2c <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c0:	f7fd fbb4 	bl	8003e2c <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e20e      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066d2:	4b22      	ldr	r3, [pc, #136]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f0      	bne.n	80066c0 <HAL_RCC_OscConfig+0x1e0>
 80066de:	e000      	b.n	80066e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d041      	beq.n	8006772 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d01c      	beq.n	8006730 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f6:	4b19      	ldr	r3, [pc, #100]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 80066f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066fc:	4a17      	ldr	r2, [pc, #92]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006706:	f7fd fb91 	bl	8003e2c <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800670e:	f7fd fb8d 	bl	8003e2c <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e1e7      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006720:	4b0e      	ldr	r3, [pc, #56]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0ef      	beq.n	800670e <HAL_RCC_OscConfig+0x22e>
 800672e:	e020      	b.n	8006772 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006730:	4b0a      	ldr	r3, [pc, #40]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006736:	4a09      	ldr	r2, [pc, #36]	@ (800675c <HAL_RCC_OscConfig+0x27c>)
 8006738:	f023 0301 	bic.w	r3, r3, #1
 800673c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006740:	f7fd fb74 	bl	8003e2c <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006746:	e00d      	b.n	8006764 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006748:	f7fd fb70 	bl	8003e2c <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d906      	bls.n	8006764 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e1ca      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
 800675a:	bf00      	nop
 800675c:	40021000 	.word	0x40021000
 8006760:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006764:	4b8c      	ldr	r3, [pc, #560]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 8006766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1ea      	bne.n	8006748 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 80a6 	beq.w	80068cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006780:	2300      	movs	r3, #0
 8006782:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006784:	4b84      	ldr	r3, [pc, #528]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 8006786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <HAL_RCC_OscConfig+0x2b4>
 8006790:	2301      	movs	r3, #1
 8006792:	e000      	b.n	8006796 <HAL_RCC_OscConfig+0x2b6>
 8006794:	2300      	movs	r3, #0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00d      	beq.n	80067b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800679a:	4b7f      	ldr	r3, [pc, #508]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 800679c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679e:	4a7e      	ldr	r2, [pc, #504]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 80067a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80067a6:	4b7c      	ldr	r3, [pc, #496]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 80067a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80067b2:	2301      	movs	r3, #1
 80067b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067b6:	4b79      	ldr	r3, [pc, #484]	@ (800699c <HAL_RCC_OscConfig+0x4bc>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d118      	bne.n	80067f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067c2:	4b76      	ldr	r3, [pc, #472]	@ (800699c <HAL_RCC_OscConfig+0x4bc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a75      	ldr	r2, [pc, #468]	@ (800699c <HAL_RCC_OscConfig+0x4bc>)
 80067c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ce:	f7fd fb2d 	bl	8003e2c <HAL_GetTick>
 80067d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067d4:	e008      	b.n	80067e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067d6:	f7fd fb29 	bl	8003e2c <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d901      	bls.n	80067e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e183      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067e8:	4b6c      	ldr	r3, [pc, #432]	@ (800699c <HAL_RCC_OscConfig+0x4bc>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0f0      	beq.n	80067d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d108      	bne.n	800680e <HAL_RCC_OscConfig+0x32e>
 80067fc:	4b66      	ldr	r3, [pc, #408]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 80067fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006802:	4a65      	ldr	r2, [pc, #404]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 8006804:	f043 0301 	orr.w	r3, r3, #1
 8006808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800680c:	e024      	b.n	8006858 <HAL_RCC_OscConfig+0x378>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	2b05      	cmp	r3, #5
 8006814:	d110      	bne.n	8006838 <HAL_RCC_OscConfig+0x358>
 8006816:	4b60      	ldr	r3, [pc, #384]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681c:	4a5e      	ldr	r2, [pc, #376]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 800681e:	f043 0304 	orr.w	r3, r3, #4
 8006822:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006826:	4b5c      	ldr	r3, [pc, #368]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 8006828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682c:	4a5a      	ldr	r2, [pc, #360]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006836:	e00f      	b.n	8006858 <HAL_RCC_OscConfig+0x378>
 8006838:	4b57      	ldr	r3, [pc, #348]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 800683a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683e:	4a56      	ldr	r2, [pc, #344]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 8006840:	f023 0301 	bic.w	r3, r3, #1
 8006844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006848:	4b53      	ldr	r3, [pc, #332]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 800684a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800684e:	4a52      	ldr	r2, [pc, #328]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 8006850:	f023 0304 	bic.w	r3, r3, #4
 8006854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d016      	beq.n	800688e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006860:	f7fd fae4 	bl	8003e2c <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006866:	e00a      	b.n	800687e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006868:	f7fd fae0 	bl	8003e2c <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006876:	4293      	cmp	r3, r2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e138      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800687e:	4b46      	ldr	r3, [pc, #280]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 8006880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0ed      	beq.n	8006868 <HAL_RCC_OscConfig+0x388>
 800688c:	e015      	b.n	80068ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688e:	f7fd facd 	bl	8003e2c <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006894:	e00a      	b.n	80068ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006896:	f7fd fac9 	bl	8003e2c <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d901      	bls.n	80068ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e121      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068ac:	4b3a      	ldr	r3, [pc, #232]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 80068ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1ed      	bne.n	8006896 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068ba:	7ffb      	ldrb	r3, [r7, #31]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d105      	bne.n	80068cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068c0:	4b35      	ldr	r3, [pc, #212]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 80068c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c4:	4a34      	ldr	r2, [pc, #208]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 80068c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0320 	and.w	r3, r3, #32
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d03c      	beq.n	8006952 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01c      	beq.n	800691a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 80068e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f0:	f7fd fa9c 	bl	8003e2c <HAL_GetTick>
 80068f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068f6:	e008      	b.n	800690a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068f8:	f7fd fa98 	bl	8003e2c <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b02      	cmp	r3, #2
 8006904:	d901      	bls.n	800690a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e0f2      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800690a:	4b23      	ldr	r3, [pc, #140]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 800690c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0ef      	beq.n	80068f8 <HAL_RCC_OscConfig+0x418>
 8006918:	e01b      	b.n	8006952 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800691a:	4b1f      	ldr	r3, [pc, #124]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 800691c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006920:	4a1d      	ldr	r2, [pc, #116]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692a:	f7fd fa7f 	bl	8003e2c <HAL_GetTick>
 800692e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006932:	f7fd fa7b 	bl	8003e2c <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e0d5      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006944:	4b14      	ldr	r3, [pc, #80]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 8006946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1ef      	bne.n	8006932 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 80c9 	beq.w	8006aee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800695c:	4b0e      	ldr	r3, [pc, #56]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 030c 	and.w	r3, r3, #12
 8006964:	2b0c      	cmp	r3, #12
 8006966:	f000 8083 	beq.w	8006a70 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d15e      	bne.n	8006a30 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006972:	4b09      	ldr	r3, [pc, #36]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a08      	ldr	r2, [pc, #32]	@ (8006998 <HAL_RCC_OscConfig+0x4b8>)
 8006978:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800697c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697e:	f7fd fa55 	bl	8003e2c <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006984:	e00c      	b.n	80069a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006986:	f7fd fa51 	bl	8003e2c <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d905      	bls.n	80069a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e0ab      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
 8006998:	40021000 	.word	0x40021000
 800699c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069a0:	4b55      	ldr	r3, [pc, #340]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1ec      	bne.n	8006986 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ac:	4b52      	ldr	r3, [pc, #328]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	4b52      	ldr	r3, [pc, #328]	@ (8006afc <HAL_RCC_OscConfig+0x61c>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6a11      	ldr	r1, [r2, #32]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069bc:	3a01      	subs	r2, #1
 80069be:	0112      	lsls	r2, r2, #4
 80069c0:	4311      	orrs	r1, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80069c6:	0212      	lsls	r2, r2, #8
 80069c8:	4311      	orrs	r1, r2
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069ce:	0852      	lsrs	r2, r2, #1
 80069d0:	3a01      	subs	r2, #1
 80069d2:	0552      	lsls	r2, r2, #21
 80069d4:	4311      	orrs	r1, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069da:	0852      	lsrs	r2, r2, #1
 80069dc:	3a01      	subs	r2, #1
 80069de:	0652      	lsls	r2, r2, #25
 80069e0:	4311      	orrs	r1, r2
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069e6:	06d2      	lsls	r2, r2, #27
 80069e8:	430a      	orrs	r2, r1
 80069ea:	4943      	ldr	r1, [pc, #268]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069f0:	4b41      	ldr	r3, [pc, #260]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a40      	ldr	r2, [pc, #256]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 80069f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069fc:	4b3e      	ldr	r3, [pc, #248]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	4a3d      	ldr	r2, [pc, #244]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 8006a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a08:	f7fd fa10 	bl	8003e2c <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a0e:	e008      	b.n	8006a22 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a10:	f7fd fa0c 	bl	8003e2c <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e066      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a22:	4b35      	ldr	r3, [pc, #212]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0f0      	beq.n	8006a10 <HAL_RCC_OscConfig+0x530>
 8006a2e:	e05e      	b.n	8006aee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a30:	4b31      	ldr	r3, [pc, #196]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a30      	ldr	r2, [pc, #192]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 8006a36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3c:	f7fd f9f6 	bl	8003e2c <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a44:	f7fd f9f2 	bl	8003e2c <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e04c      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a56:	4b28      	ldr	r3, [pc, #160]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f0      	bne.n	8006a44 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a62:	4b25      	ldr	r3, [pc, #148]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	4924      	ldr	r1, [pc, #144]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 8006a68:	4b25      	ldr	r3, [pc, #148]	@ (8006b00 <HAL_RCC_OscConfig+0x620>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	60cb      	str	r3, [r1, #12]
 8006a6e:	e03e      	b.n	8006aee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e039      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8006af8 <HAL_RCC_OscConfig+0x618>)
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f003 0203 	and.w	r2, r3, #3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d12c      	bne.n	8006aea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d123      	bne.n	8006aea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d11b      	bne.n	8006aea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d113      	bne.n	8006aea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d109      	bne.n	8006aea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae0:	085b      	lsrs	r3, r3, #1
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d001      	beq.n	8006aee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3720      	adds	r7, #32
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40021000 	.word	0x40021000
 8006afc:	019f800c 	.word	0x019f800c
 8006b00:	feeefffc 	.word	0xfeeefffc

08006b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e11e      	b.n	8006d5a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b1c:	4b91      	ldr	r3, [pc, #580]	@ (8006d64 <HAL_RCC_ClockConfig+0x260>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d910      	bls.n	8006b4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2a:	4b8e      	ldr	r3, [pc, #568]	@ (8006d64 <HAL_RCC_ClockConfig+0x260>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f023 020f 	bic.w	r2, r3, #15
 8006b32:	498c      	ldr	r1, [pc, #560]	@ (8006d64 <HAL_RCC_ClockConfig+0x260>)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3a:	4b8a      	ldr	r3, [pc, #552]	@ (8006d64 <HAL_RCC_ClockConfig+0x260>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e106      	b.n	8006d5a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d073      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d129      	bne.n	8006bb4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b60:	4b81      	ldr	r3, [pc, #516]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0f4      	b.n	8006d5a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b70:	f000 f99e 	bl	8006eb0 <RCC_GetSysClockFreqFromPLLSource>
 8006b74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	4a7c      	ldr	r2, [pc, #496]	@ (8006d6c <HAL_RCC_ClockConfig+0x268>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d93f      	bls.n	8006bfe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b7e:	4b7a      	ldr	r3, [pc, #488]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d033      	beq.n	8006bfe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d12f      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b9e:	4b72      	ldr	r3, [pc, #456]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ba6:	4a70      	ldr	r2, [pc, #448]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006bae:	2380      	movs	r3, #128	@ 0x80
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	e024      	b.n	8006bfe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d107      	bne.n	8006bcc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d109      	bne.n	8006bdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0c6      	b.n	8006d5a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bcc:	4b66      	ldr	r3, [pc, #408]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0be      	b.n	8006d5a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006bdc:	f000 f8ce 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8006be0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	4a61      	ldr	r2, [pc, #388]	@ (8006d6c <HAL_RCC_ClockConfig+0x268>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d909      	bls.n	8006bfe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bea:	4b5f      	ldr	r3, [pc, #380]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bf2:	4a5d      	ldr	r2, [pc, #372]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006bfa:	2380      	movs	r3, #128	@ 0x80
 8006bfc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bfe:	4b5a      	ldr	r3, [pc, #360]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f023 0203 	bic.w	r2, r3, #3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	4957      	ldr	r1, [pc, #348]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c10:	f7fd f90c 	bl	8003e2c <HAL_GetTick>
 8006c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c16:	e00a      	b.n	8006c2e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c18:	f7fd f908 	bl	8003e2c <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e095      	b.n	8006d5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 020c 	and.w	r2, r3, #12
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d1eb      	bne.n	8006c18 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d023      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0304 	and.w	r3, r3, #4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c58:	4b43      	ldr	r3, [pc, #268]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	4a42      	ldr	r2, [pc, #264]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006c5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c62:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d007      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c70:	4b3d      	ldr	r3, [pc, #244]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c78:	4a3b      	ldr	r2, [pc, #236]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006c7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c80:	4b39      	ldr	r3, [pc, #228]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	4936      	ldr	r1, [pc, #216]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	608b      	str	r3, [r1, #8]
 8006c92:	e008      	b.n	8006ca6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2b80      	cmp	r3, #128	@ 0x80
 8006c98:	d105      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c9a:	4b33      	ldr	r3, [pc, #204]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	4a32      	ldr	r2, [pc, #200]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006ca0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ca4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8006d64 <HAL_RCC_ClockConfig+0x260>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 030f 	and.w	r3, r3, #15
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d21d      	bcs.n	8006cf0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006d64 <HAL_RCC_ClockConfig+0x260>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f023 020f 	bic.w	r2, r3, #15
 8006cbc:	4929      	ldr	r1, [pc, #164]	@ (8006d64 <HAL_RCC_ClockConfig+0x260>)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006cc4:	f7fd f8b2 	bl	8003e2c <HAL_GetTick>
 8006cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cca:	e00a      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ccc:	f7fd f8ae 	bl	8003e2c <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e03b      	b.n	8006d5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ce2:	4b20      	ldr	r3, [pc, #128]	@ (8006d64 <HAL_RCC_ClockConfig+0x260>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d1ed      	bne.n	8006ccc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d008      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4917      	ldr	r1, [pc, #92]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d1a:	4b13      	ldr	r3, [pc, #76]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	490f      	ldr	r1, [pc, #60]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d2e:	f000 f825 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8006d32:	4602      	mov	r2, r0
 8006d34:	4b0c      	ldr	r3, [pc, #48]	@ (8006d68 <HAL_RCC_ClockConfig+0x264>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	091b      	lsrs	r3, r3, #4
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	490c      	ldr	r1, [pc, #48]	@ (8006d70 <HAL_RCC_ClockConfig+0x26c>)
 8006d40:	5ccb      	ldrb	r3, [r1, r3]
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d74 <HAL_RCC_ClockConfig+0x270>)
 8006d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d78 <HAL_RCC_ClockConfig+0x274>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fd f81e 	bl	8003d94 <HAL_InitTick>
 8006d58:	4603      	mov	r3, r0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40022000 	.word	0x40022000
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	04c4b400 	.word	0x04c4b400
 8006d70:	0800f438 	.word	0x0800f438
 8006d74:	20000004 	.word	0x20000004
 8006d78:	20000008 	.word	0x20000008

08006d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d82:	4b2c      	ldr	r3, [pc, #176]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 030c 	and.w	r3, r3, #12
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d102      	bne.n	8006d94 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d90:	613b      	str	r3, [r7, #16]
 8006d92:	e047      	b.n	8006e24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d94:	4b27      	ldr	r3, [pc, #156]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f003 030c 	and.w	r3, r3, #12
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d102      	bne.n	8006da6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006da0:	4b26      	ldr	r3, [pc, #152]	@ (8006e3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	e03e      	b.n	8006e24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006da6:	4b23      	ldr	r3, [pc, #140]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 030c 	and.w	r3, r3, #12
 8006dae:	2b0c      	cmp	r3, #12
 8006db0:	d136      	bne.n	8006e20 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006db2:	4b20      	ldr	r3, [pc, #128]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	091b      	lsrs	r3, r3, #4
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d10c      	bne.n	8006dea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8006e3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd8:	4a16      	ldr	r2, [pc, #88]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dda:	68d2      	ldr	r2, [r2, #12]
 8006ddc:	0a12      	lsrs	r2, r2, #8
 8006dde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006de2:	fb02 f303 	mul.w	r3, r2, r3
 8006de6:	617b      	str	r3, [r7, #20]
      break;
 8006de8:	e00c      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dea:	4a13      	ldr	r2, [pc, #76]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df2:	4a10      	ldr	r2, [pc, #64]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006df4:	68d2      	ldr	r2, [r2, #12]
 8006df6:	0a12      	lsrs	r2, r2, #8
 8006df8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dfc:	fb02 f303 	mul.w	r3, r2, r3
 8006e00:	617b      	str	r3, [r7, #20]
      break;
 8006e02:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e04:	4b0b      	ldr	r3, [pc, #44]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	0e5b      	lsrs	r3, r3, #25
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	3301      	adds	r3, #1
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1c:	613b      	str	r3, [r7, #16]
 8006e1e:	e001      	b.n	8006e24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e24:	693b      	ldr	r3, [r7, #16]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40021000 	.word	0x40021000
 8006e38:	00f42400 	.word	0x00f42400
 8006e3c:	016e3600 	.word	0x016e3600

08006e40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e44:	4b03      	ldr	r3, [pc, #12]	@ (8006e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e46:	681b      	ldr	r3, [r3, #0]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20000004 	.word	0x20000004

08006e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e5c:	f7ff fff0 	bl	8006e40 <HAL_RCC_GetHCLKFreq>
 8006e60:	4602      	mov	r2, r0
 8006e62:	4b06      	ldr	r3, [pc, #24]	@ (8006e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	0a1b      	lsrs	r3, r3, #8
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	4904      	ldr	r1, [pc, #16]	@ (8006e80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e6e:	5ccb      	ldrb	r3, [r1, r3]
 8006e70:	f003 031f 	and.w	r3, r3, #31
 8006e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40021000 	.word	0x40021000
 8006e80:	0800f448 	.word	0x0800f448

08006e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e88:	f7ff ffda 	bl	8006e40 <HAL_RCC_GetHCLKFreq>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	4b06      	ldr	r3, [pc, #24]	@ (8006ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	0adb      	lsrs	r3, r3, #11
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	4904      	ldr	r1, [pc, #16]	@ (8006eac <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e9a:	5ccb      	ldrb	r3, [r1, r3]
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	0800f448 	.word	0x0800f448

08006eb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	091b      	lsrs	r3, r3, #4
 8006ec6:	f003 030f 	and.w	r3, r3, #15
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d10c      	bne.n	8006eee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ed4:	4a17      	ldr	r2, [pc, #92]	@ (8006f34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006edc:	4a14      	ldr	r2, [pc, #80]	@ (8006f30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ede:	68d2      	ldr	r2, [r2, #12]
 8006ee0:	0a12      	lsrs	r2, r2, #8
 8006ee2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ee6:	fb02 f303 	mul.w	r3, r2, r3
 8006eea:	617b      	str	r3, [r7, #20]
    break;
 8006eec:	e00c      	b.n	8006f08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006eee:	4a12      	ldr	r2, [pc, #72]	@ (8006f38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8006f30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ef8:	68d2      	ldr	r2, [r2, #12]
 8006efa:	0a12      	lsrs	r2, r2, #8
 8006efc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f00:	fb02 f303 	mul.w	r3, r2, r3
 8006f04:	617b      	str	r3, [r7, #20]
    break;
 8006f06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f08:	4b09      	ldr	r3, [pc, #36]	@ (8006f30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	0e5b      	lsrs	r3, r3, #25
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	3301      	adds	r3, #1
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006f22:	687b      	ldr	r3, [r7, #4]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	371c      	adds	r7, #28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	40021000 	.word	0x40021000
 8006f34:	016e3600 	.word	0x016e3600
 8006f38:	00f42400 	.word	0x00f42400

08006f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f44:	2300      	movs	r3, #0
 8006f46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f48:	2300      	movs	r3, #0
 8006f4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8098 	beq.w	800708a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f5e:	4b43      	ldr	r3, [pc, #268]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10d      	bne.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f6a:	4b40      	ldr	r3, [pc, #256]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6e:	4a3f      	ldr	r2, [pc, #252]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f76:	4b3d      	ldr	r3, [pc, #244]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f7e:	60bb      	str	r3, [r7, #8]
 8006f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f82:	2301      	movs	r3, #1
 8006f84:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f86:	4b3a      	ldr	r3, [pc, #232]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a39      	ldr	r2, [pc, #228]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f92:	f7fc ff4b 	bl	8003e2c <HAL_GetTick>
 8006f96:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f98:	e009      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f9a:	f7fc ff47 	bl	8003e2c <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d902      	bls.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	74fb      	strb	r3, [r7, #19]
        break;
 8006fac:	e005      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fae:	4b30      	ldr	r3, [pc, #192]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0ef      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006fba:	7cfb      	ldrb	r3, [r7, #19]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d159      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d01e      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d019      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fdc:	4b23      	ldr	r3, [pc, #140]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fe6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fe8:	4b20      	ldr	r3, [pc, #128]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fee:	4a1f      	ldr	r2, [pc, #124]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007008:	4a18      	ldr	r2, [pc, #96]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d016      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701a:	f7fc ff07 	bl	8003e2c <HAL_GetTick>
 800701e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007020:	e00b      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007022:	f7fc ff03 	bl	8003e2c <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007030:	4293      	cmp	r3, r2
 8007032:	d902      	bls.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	74fb      	strb	r3, [r7, #19]
            break;
 8007038:	e006      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800703a:	4b0c      	ldr	r3, [pc, #48]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800703c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0ec      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007048:	7cfb      	ldrb	r3, [r7, #19]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10b      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800704e:	4b07      	ldr	r3, [pc, #28]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007054:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800705c:	4903      	ldr	r1, [pc, #12]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800705e:	4313      	orrs	r3, r2
 8007060:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007064:	e008      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007066:	7cfb      	ldrb	r3, [r7, #19]
 8007068:	74bb      	strb	r3, [r7, #18]
 800706a:	e005      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800706c:	40021000 	.word	0x40021000
 8007070:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007074:	7cfb      	ldrb	r3, [r7, #19]
 8007076:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007078:	7c7b      	ldrb	r3, [r7, #17]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d105      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800707e:	4ba7      	ldr	r3, [pc, #668]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007082:	4aa6      	ldr	r2, [pc, #664]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007084:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007088:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007096:	4ba1      	ldr	r3, [pc, #644]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800709c:	f023 0203 	bic.w	r2, r3, #3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	499d      	ldr	r1, [pc, #628]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070b8:	4b98      	ldr	r3, [pc, #608]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070be:	f023 020c 	bic.w	r2, r3, #12
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	4995      	ldr	r1, [pc, #596]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070da:	4b90      	ldr	r3, [pc, #576]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	498c      	ldr	r1, [pc, #560]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070fc:	4b87      	ldr	r3, [pc, #540]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007102:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	4984      	ldr	r1, [pc, #528]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800711e:	4b7f      	ldr	r3, [pc, #508]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007124:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	497b      	ldr	r1, [pc, #492]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00a      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007140:	4b76      	ldr	r3, [pc, #472]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007146:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	4973      	ldr	r1, [pc, #460]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007162:	4b6e      	ldr	r3, [pc, #440]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007168:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	496a      	ldr	r1, [pc, #424]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007172:	4313      	orrs	r3, r2
 8007174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00a      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007184:	4b65      	ldr	r3, [pc, #404]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800718a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	4962      	ldr	r1, [pc, #392]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007194:	4313      	orrs	r3, r2
 8007196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071a6:	4b5d      	ldr	r3, [pc, #372]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b4:	4959      	ldr	r1, [pc, #356]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80071c8:	4b54      	ldr	r3, [pc, #336]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071ce:	f023 0203 	bic.w	r2, r3, #3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d6:	4951      	ldr	r1, [pc, #324]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071ea:	4b4c      	ldr	r3, [pc, #304]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f8:	4948      	ldr	r1, [pc, #288]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007208:	2b00      	cmp	r3, #0
 800720a:	d015      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800720c:	4b43      	ldr	r3, [pc, #268]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800720e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007212:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721a:	4940      	ldr	r1, [pc, #256]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800721c:	4313      	orrs	r3, r2
 800721e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800722a:	d105      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800722c:	4b3b      	ldr	r3, [pc, #236]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	4a3a      	ldr	r2, [pc, #232]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007236:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007240:	2b00      	cmp	r3, #0
 8007242:	d015      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007244:	4b35      	ldr	r3, [pc, #212]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800724a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007252:	4932      	ldr	r1, [pc, #200]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007254:	4313      	orrs	r3, r2
 8007256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800725e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007262:	d105      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007264:	4b2d      	ldr	r3, [pc, #180]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	4a2c      	ldr	r2, [pc, #176]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800726a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800726e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d015      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800727c:	4b27      	ldr	r3, [pc, #156]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800727e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007282:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728a:	4924      	ldr	r1, [pc, #144]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728c:	4313      	orrs	r3, r2
 800728e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007296:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800729a:	d105      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800729c:	4b1f      	ldr	r3, [pc, #124]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	4a1e      	ldr	r2, [pc, #120]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d015      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072b4:	4b19      	ldr	r3, [pc, #100]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c2:	4916      	ldr	r1, [pc, #88]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072d2:	d105      	bne.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072d4:	4b11      	ldr	r3, [pc, #68]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	4a10      	ldr	r2, [pc, #64]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d019      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072ec:	4b0b      	ldr	r3, [pc, #44]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fa:	4908      	ldr	r1, [pc, #32]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007306:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800730a:	d109      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800730c:	4b03      	ldr	r3, [pc, #12]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	4a02      	ldr	r2, [pc, #8]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007316:	60d3      	str	r3, [r2, #12]
 8007318:	e002      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800731a:	bf00      	nop
 800731c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d015      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800732c:	4b29      	ldr	r3, [pc, #164]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800732e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007332:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800733a:	4926      	ldr	r1, [pc, #152]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800733c:	4313      	orrs	r3, r2
 800733e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800734a:	d105      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800734c:	4b21      	ldr	r3, [pc, #132]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	4a20      	ldr	r2, [pc, #128]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007356:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d015      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007364:	4b1b      	ldr	r3, [pc, #108]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007372:	4918      	ldr	r1, [pc, #96]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007374:	4313      	orrs	r3, r2
 8007376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800737e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007382:	d105      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007384:	4b13      	ldr	r3, [pc, #76]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	4a12      	ldr	r2, [pc, #72]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800738a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800738e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d015      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800739c:	4b0d      	ldr	r3, [pc, #52]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800739e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073aa:	490a      	ldr	r1, [pc, #40]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073ba:	d105      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073bc:	4b05      	ldr	r3, [pc, #20]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	4a04      	ldr	r2, [pc, #16]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80073c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	40021000 	.word	0x40021000

080073d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e09d      	b.n	8007526 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d108      	bne.n	8007404 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073fa:	d009      	beq.n	8007410 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	61da      	str	r2, [r3, #28]
 8007402:	e005      	b.n	8007410 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7fb ff2a 	bl	8003284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007446:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007450:	d902      	bls.n	8007458 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	e002      	b.n	800745e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007458:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800745c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007466:	d007      	beq.n	8007478 <HAL_SPI_Init+0xa0>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007470:	d002      	beq.n	8007478 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	431a      	orrs	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074b0:	431a      	orrs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ba:	ea42 0103 	orr.w	r1, r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	0c1b      	lsrs	r3, r3, #16
 80074d4:	f003 0204 	and.w	r2, r3, #4
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074dc:	f003 0310 	and.w	r3, r3, #16
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e6:	f003 0308 	and.w	r3, r3, #8
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80074f4:	ea42 0103 	orr.w	r1, r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69da      	ldr	r2, [r3, #28]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007514:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e049      	b.n	80075d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	d106      	bne.n	800755a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7fc fa9f 	bl	8003a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2202      	movs	r2, #2
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3304      	adds	r3, #4
 800756a:	4619      	mov	r1, r3
 800756c:	4610      	mov	r0, r2
 800756e:	f000 fef7 	bl	8008360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d001      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e054      	b.n	800769e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0201 	orr.w	r2, r2, #1
 800760a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a26      	ldr	r2, [pc, #152]	@ (80076ac <HAL_TIM_Base_Start_IT+0xd0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d022      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x80>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800761e:	d01d      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x80>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a22      	ldr	r2, [pc, #136]	@ (80076b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d018      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x80>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a21      	ldr	r2, [pc, #132]	@ (80076b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d013      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x80>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1f      	ldr	r2, [pc, #124]	@ (80076b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00e      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x80>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1e      	ldr	r2, [pc, #120]	@ (80076bc <HAL_TIM_Base_Start_IT+0xe0>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d009      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x80>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1c      	ldr	r2, [pc, #112]	@ (80076c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x80>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1b      	ldr	r2, [pc, #108]	@ (80076c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d115      	bne.n	8007688 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	4b19      	ldr	r3, [pc, #100]	@ (80076c8 <HAL_TIM_Base_Start_IT+0xec>)
 8007664:	4013      	ands	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2b06      	cmp	r3, #6
 800766c:	d015      	beq.n	800769a <HAL_TIM_Base_Start_IT+0xbe>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007674:	d011      	beq.n	800769a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0201 	orr.w	r2, r2, #1
 8007684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007686:	e008      	b.n	800769a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0201 	orr.w	r2, r2, #1
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	e000      	b.n	800769c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40012c00 	.word	0x40012c00
 80076b0:	40000400 	.word	0x40000400
 80076b4:	40000800 	.word	0x40000800
 80076b8:	40000c00 	.word	0x40000c00
 80076bc:	40013400 	.word	0x40013400
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40015000 	.word	0x40015000
 80076c8:	00010007 	.word	0x00010007

080076cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e049      	b.n	8007772 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f841 	bl	800777a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f000 fe28 	bl	8008360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d109      	bne.n	80077b4 <HAL_TIM_PWM_Start+0x24>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	bf14      	ite	ne
 80077ac:	2301      	movne	r3, #1
 80077ae:	2300      	moveq	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	e03c      	b.n	800782e <HAL_TIM_PWM_Start+0x9e>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d109      	bne.n	80077ce <HAL_TIM_PWM_Start+0x3e>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	bf14      	ite	ne
 80077c6:	2301      	movne	r3, #1
 80077c8:	2300      	moveq	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	e02f      	b.n	800782e <HAL_TIM_PWM_Start+0x9e>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d109      	bne.n	80077e8 <HAL_TIM_PWM_Start+0x58>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b01      	cmp	r3, #1
 80077de:	bf14      	ite	ne
 80077e0:	2301      	movne	r3, #1
 80077e2:	2300      	moveq	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	e022      	b.n	800782e <HAL_TIM_PWM_Start+0x9e>
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b0c      	cmp	r3, #12
 80077ec:	d109      	bne.n	8007802 <HAL_TIM_PWM_Start+0x72>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	bf14      	ite	ne
 80077fa:	2301      	movne	r3, #1
 80077fc:	2300      	moveq	r3, #0
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	e015      	b.n	800782e <HAL_TIM_PWM_Start+0x9e>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b10      	cmp	r3, #16
 8007806:	d109      	bne.n	800781c <HAL_TIM_PWM_Start+0x8c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b01      	cmp	r3, #1
 8007812:	bf14      	ite	ne
 8007814:	2301      	movne	r3, #1
 8007816:	2300      	moveq	r3, #0
 8007818:	b2db      	uxtb	r3, r3
 800781a:	e008      	b.n	800782e <HAL_TIM_PWM_Start+0x9e>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b01      	cmp	r3, #1
 8007826:	bf14      	ite	ne
 8007828:	2301      	movne	r3, #1
 800782a:	2300      	moveq	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e0a6      	b.n	8007984 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d104      	bne.n	8007846 <HAL_TIM_PWM_Start+0xb6>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007844:	e023      	b.n	800788e <HAL_TIM_PWM_Start+0xfe>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b04      	cmp	r3, #4
 800784a:	d104      	bne.n	8007856 <HAL_TIM_PWM_Start+0xc6>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007854:	e01b      	b.n	800788e <HAL_TIM_PWM_Start+0xfe>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b08      	cmp	r3, #8
 800785a:	d104      	bne.n	8007866 <HAL_TIM_PWM_Start+0xd6>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007864:	e013      	b.n	800788e <HAL_TIM_PWM_Start+0xfe>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b0c      	cmp	r3, #12
 800786a:	d104      	bne.n	8007876 <HAL_TIM_PWM_Start+0xe6>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007874:	e00b      	b.n	800788e <HAL_TIM_PWM_Start+0xfe>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b10      	cmp	r3, #16
 800787a:	d104      	bne.n	8007886 <HAL_TIM_PWM_Start+0xf6>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007884:	e003      	b.n	800788e <HAL_TIM_PWM_Start+0xfe>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2202      	movs	r2, #2
 800788a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2201      	movs	r2, #1
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f001 f9dc 	bl	8008c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a3a      	ldr	r2, [pc, #232]	@ (800798c <HAL_TIM_PWM_Start+0x1fc>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d018      	beq.n	80078d8 <HAL_TIM_PWM_Start+0x148>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a39      	ldr	r2, [pc, #228]	@ (8007990 <HAL_TIM_PWM_Start+0x200>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d013      	beq.n	80078d8 <HAL_TIM_PWM_Start+0x148>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a37      	ldr	r2, [pc, #220]	@ (8007994 <HAL_TIM_PWM_Start+0x204>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00e      	beq.n	80078d8 <HAL_TIM_PWM_Start+0x148>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a36      	ldr	r2, [pc, #216]	@ (8007998 <HAL_TIM_PWM_Start+0x208>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d009      	beq.n	80078d8 <HAL_TIM_PWM_Start+0x148>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a34      	ldr	r2, [pc, #208]	@ (800799c <HAL_TIM_PWM_Start+0x20c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d004      	beq.n	80078d8 <HAL_TIM_PWM_Start+0x148>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a33      	ldr	r2, [pc, #204]	@ (80079a0 <HAL_TIM_PWM_Start+0x210>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d101      	bne.n	80078dc <HAL_TIM_PWM_Start+0x14c>
 80078d8:	2301      	movs	r3, #1
 80078da:	e000      	b.n	80078de <HAL_TIM_PWM_Start+0x14e>
 80078dc:	2300      	movs	r3, #0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a25      	ldr	r2, [pc, #148]	@ (800798c <HAL_TIM_PWM_Start+0x1fc>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d022      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007904:	d01d      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a26      	ldr	r2, [pc, #152]	@ (80079a4 <HAL_TIM_PWM_Start+0x214>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d018      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a24      	ldr	r2, [pc, #144]	@ (80079a8 <HAL_TIM_PWM_Start+0x218>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d013      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a23      	ldr	r2, [pc, #140]	@ (80079ac <HAL_TIM_PWM_Start+0x21c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00e      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a19      	ldr	r2, [pc, #100]	@ (8007990 <HAL_TIM_PWM_Start+0x200>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d009      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a18      	ldr	r2, [pc, #96]	@ (8007994 <HAL_TIM_PWM_Start+0x204>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d004      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a18      	ldr	r2, [pc, #96]	@ (80079a0 <HAL_TIM_PWM_Start+0x210>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d115      	bne.n	800796e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	4b19      	ldr	r3, [pc, #100]	@ (80079b0 <HAL_TIM_PWM_Start+0x220>)
 800794a:	4013      	ands	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b06      	cmp	r3, #6
 8007952:	d015      	beq.n	8007980 <HAL_TIM_PWM_Start+0x1f0>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800795a:	d011      	beq.n	8007980 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0201 	orr.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800796c:	e008      	b.n	8007980 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0201 	orr.w	r2, r2, #1
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	e000      	b.n	8007982 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007980:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40012c00 	.word	0x40012c00
 8007990:	40013400 	.word	0x40013400
 8007994:	40014000 	.word	0x40014000
 8007998:	40014400 	.word	0x40014400
 800799c:	40014800 	.word	0x40014800
 80079a0:	40015000 	.word	0x40015000
 80079a4:	40000400 	.word	0x40000400
 80079a8:	40000800 	.word	0x40000800
 80079ac:	40000c00 	.word	0x40000c00
 80079b0:	00010007 	.word	0x00010007

080079b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e097      	b.n	8007af8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d106      	bne.n	80079e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7fb ffb7 	bl	8003950 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2202      	movs	r2, #2
 80079e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	6812      	ldr	r2, [r2, #0]
 80079f4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80079f8:	f023 0307 	bic.w	r3, r3, #7
 80079fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4619      	mov	r1, r3
 8007a08:	4610      	mov	r0, r2
 8007a0a:	f000 fca9 	bl	8008360 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6a1b      	ldr	r3, [r3, #32]
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a36:	f023 0303 	bic.w	r3, r3, #3
 8007a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	4313      	orrs	r3, r2
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007a54:	f023 030c 	bic.w	r3, r3, #12
 8007a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	4313      	orrs	r3, r2
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	011a      	lsls	r2, r3, #4
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	031b      	lsls	r3, r3, #12
 8007a84:	4313      	orrs	r3, r2
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007a92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007a9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d110      	bne.n	8007b52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d102      	bne.n	8007b3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b36:	7b7b      	ldrb	r3, [r7, #13]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d001      	beq.n	8007b40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e069      	b.n	8007c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b50:	e031      	b.n	8007bb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d110      	bne.n	8007b7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d102      	bne.n	8007b64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b5e:	7b3b      	ldrb	r3, [r7, #12]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d001      	beq.n	8007b68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e055      	b.n	8007c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b78:	e01d      	b.n	8007bb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d108      	bne.n	8007b92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d105      	bne.n	8007b92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b86:	7b7b      	ldrb	r3, [r7, #13]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d102      	bne.n	8007b92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b8c:	7b3b      	ldrb	r3, [r7, #12]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d001      	beq.n	8007b96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e03e      	b.n	8007c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <HAL_TIM_Encoder_Start+0xc4>
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d008      	beq.n	8007bd4 <HAL_TIM_Encoder_Start+0xd4>
 8007bc2:	e00f      	b.n	8007be4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f001 f841 	bl	8008c54 <TIM_CCxChannelCmd>
      break;
 8007bd2:	e016      	b.n	8007c02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	2104      	movs	r1, #4
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f001 f839 	bl	8008c54 <TIM_CCxChannelCmd>
      break;
 8007be2:	e00e      	b.n	8007c02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2201      	movs	r2, #1
 8007bea:	2100      	movs	r1, #0
 8007bec:	4618      	mov	r0, r3
 8007bee:	f001 f831 	bl	8008c54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	2104      	movs	r1, #4
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f001 f82a 	bl	8008c54 <TIM_CCxChannelCmd>
      break;
 8007c00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0201 	orr.w	r2, r2, #1
 8007c10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d020      	beq.n	8007c80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01b      	beq.n	8007c80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0202 	mvn.w	r2, #2
 8007c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fb5c 	bl	8008324 <HAL_TIM_IC_CaptureCallback>
 8007c6c:	e005      	b.n	8007c7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fb4e 	bl	8008310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fb5f 	bl	8008338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f003 0304 	and.w	r3, r3, #4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d020      	beq.n	8007ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01b      	beq.n	8007ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f06f 0204 	mvn.w	r2, #4
 8007c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fb36 	bl	8008324 <HAL_TIM_IC_CaptureCallback>
 8007cb8:	e005      	b.n	8007cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fb28 	bl	8008310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fb39 	bl	8008338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f003 0308 	and.w	r3, r3, #8
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d020      	beq.n	8007d18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f003 0308 	and.w	r3, r3, #8
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01b      	beq.n	8007d18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f06f 0208 	mvn.w	r2, #8
 8007ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2204      	movs	r2, #4
 8007cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fb10 	bl	8008324 <HAL_TIM_IC_CaptureCallback>
 8007d04:	e005      	b.n	8007d12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fb02 	bl	8008310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fb13 	bl	8008338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f003 0310 	and.w	r3, r3, #16
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d020      	beq.n	8007d64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f003 0310 	and.w	r3, r3, #16
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01b      	beq.n	8007d64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f06f 0210 	mvn.w	r2, #16
 8007d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 faea 	bl	8008324 <HAL_TIM_IC_CaptureCallback>
 8007d50:	e005      	b.n	8007d5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fadc 	bl	8008310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 faed 	bl	8008338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00c      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f06f 0201 	mvn.w	r2, #1
 8007d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7fa fbec 	bl	8002560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00c      	beq.n	8007db6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d007      	beq.n	8007db6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 f815 	bl	8008de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00c      	beq.n	8007dda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d007      	beq.n	8007dda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 f80d 	bl	8008df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00c      	beq.n	8007dfe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d007      	beq.n	8007dfe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 faa7 	bl	800834c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f003 0320 	and.w	r3, r3, #32
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00c      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f06f 0220 	mvn.w	r2, #32
 8007e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 ffd5 	bl	8008dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00c      	beq.n	8007e46 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d007      	beq.n	8007e46 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 ffe1 	bl	8008e08 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00c      	beq.n	8007e6a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d007      	beq.n	8007e6a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 ffd9 	bl	8008e1c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00c      	beq.n	8007e8e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 ffd1 	bl	8008e30 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00c      	beq.n	8007eb2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 ffc9 	bl	8008e44 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eb2:	bf00      	nop
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d101      	bne.n	8007eda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e0ff      	b.n	80080da <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b14      	cmp	r3, #20
 8007ee6:	f200 80f0 	bhi.w	80080ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007eea:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f45 	.word	0x08007f45
 8007ef4:	080080cb 	.word	0x080080cb
 8007ef8:	080080cb 	.word	0x080080cb
 8007efc:	080080cb 	.word	0x080080cb
 8007f00:	08007f85 	.word	0x08007f85
 8007f04:	080080cb 	.word	0x080080cb
 8007f08:	080080cb 	.word	0x080080cb
 8007f0c:	080080cb 	.word	0x080080cb
 8007f10:	08007fc7 	.word	0x08007fc7
 8007f14:	080080cb 	.word	0x080080cb
 8007f18:	080080cb 	.word	0x080080cb
 8007f1c:	080080cb 	.word	0x080080cb
 8007f20:	08008007 	.word	0x08008007
 8007f24:	080080cb 	.word	0x080080cb
 8007f28:	080080cb 	.word	0x080080cb
 8007f2c:	080080cb 	.word	0x080080cb
 8007f30:	08008049 	.word	0x08008049
 8007f34:	080080cb 	.word	0x080080cb
 8007f38:	080080cb 	.word	0x080080cb
 8007f3c:	080080cb 	.word	0x080080cb
 8007f40:	08008089 	.word	0x08008089
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fabc 	bl	80084c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0208 	orr.w	r2, r2, #8
 8007f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 0204 	bic.w	r2, r2, #4
 8007f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6999      	ldr	r1, [r3, #24]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	691a      	ldr	r2, [r3, #16]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	619a      	str	r2, [r3, #24]
      break;
 8007f82:	e0a5      	b.n	80080d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fb36 	bl	80085fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699a      	ldr	r2, [r3, #24]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6999      	ldr	r1, [r3, #24]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	021a      	lsls	r2, r3, #8
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	619a      	str	r2, [r3, #24]
      break;
 8007fc4:	e084      	b.n	80080d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fba9 	bl	8008724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	69da      	ldr	r2, [r3, #28]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f042 0208 	orr.w	r2, r2, #8
 8007fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69da      	ldr	r2, [r3, #28]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0204 	bic.w	r2, r2, #4
 8007ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69d9      	ldr	r1, [r3, #28]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	61da      	str	r2, [r3, #28]
      break;
 8008004:	e064      	b.n	80080d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68b9      	ldr	r1, [r7, #8]
 800800c:	4618      	mov	r0, r3
 800800e:	f000 fc1b 	bl	8008848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69da      	ldr	r2, [r3, #28]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69da      	ldr	r2, [r3, #28]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69d9      	ldr	r1, [r3, #28]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	021a      	lsls	r2, r3, #8
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	61da      	str	r2, [r3, #28]
      break;
 8008046:	e043      	b.n	80080d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68b9      	ldr	r1, [r7, #8]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fc8e 	bl	8008970 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0208 	orr.w	r2, r2, #8
 8008062:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0204 	bic.w	r2, r2, #4
 8008072:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	691a      	ldr	r2, [r3, #16]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008086:	e023      	b.n	80080d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68b9      	ldr	r1, [r7, #8]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 fcd8 	bl	8008a44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	021a      	lsls	r2, r3, #8
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80080c8:	e002      	b.n	80080d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	75fb      	strb	r3, [r7, #23]
      break;
 80080ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop

080080e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_TIM_ConfigClockSource+0x1c>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e0f6      	b.n	80082ee <HAL_TIM_ConfigClockSource+0x20a>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800811e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800812a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a6f      	ldr	r2, [pc, #444]	@ (80082f8 <HAL_TIM_ConfigClockSource+0x214>)
 800813a:	4293      	cmp	r3, r2
 800813c:	f000 80c1 	beq.w	80082c2 <HAL_TIM_ConfigClockSource+0x1de>
 8008140:	4a6d      	ldr	r2, [pc, #436]	@ (80082f8 <HAL_TIM_ConfigClockSource+0x214>)
 8008142:	4293      	cmp	r3, r2
 8008144:	f200 80c6 	bhi.w	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008148:	4a6c      	ldr	r2, [pc, #432]	@ (80082fc <HAL_TIM_ConfigClockSource+0x218>)
 800814a:	4293      	cmp	r3, r2
 800814c:	f000 80b9 	beq.w	80082c2 <HAL_TIM_ConfigClockSource+0x1de>
 8008150:	4a6a      	ldr	r2, [pc, #424]	@ (80082fc <HAL_TIM_ConfigClockSource+0x218>)
 8008152:	4293      	cmp	r3, r2
 8008154:	f200 80be 	bhi.w	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008158:	4a69      	ldr	r2, [pc, #420]	@ (8008300 <HAL_TIM_ConfigClockSource+0x21c>)
 800815a:	4293      	cmp	r3, r2
 800815c:	f000 80b1 	beq.w	80082c2 <HAL_TIM_ConfigClockSource+0x1de>
 8008160:	4a67      	ldr	r2, [pc, #412]	@ (8008300 <HAL_TIM_ConfigClockSource+0x21c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	f200 80b6 	bhi.w	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008168:	4a66      	ldr	r2, [pc, #408]	@ (8008304 <HAL_TIM_ConfigClockSource+0x220>)
 800816a:	4293      	cmp	r3, r2
 800816c:	f000 80a9 	beq.w	80082c2 <HAL_TIM_ConfigClockSource+0x1de>
 8008170:	4a64      	ldr	r2, [pc, #400]	@ (8008304 <HAL_TIM_ConfigClockSource+0x220>)
 8008172:	4293      	cmp	r3, r2
 8008174:	f200 80ae 	bhi.w	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008178:	4a63      	ldr	r2, [pc, #396]	@ (8008308 <HAL_TIM_ConfigClockSource+0x224>)
 800817a:	4293      	cmp	r3, r2
 800817c:	f000 80a1 	beq.w	80082c2 <HAL_TIM_ConfigClockSource+0x1de>
 8008180:	4a61      	ldr	r2, [pc, #388]	@ (8008308 <HAL_TIM_ConfigClockSource+0x224>)
 8008182:	4293      	cmp	r3, r2
 8008184:	f200 80a6 	bhi.w	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008188:	4a60      	ldr	r2, [pc, #384]	@ (800830c <HAL_TIM_ConfigClockSource+0x228>)
 800818a:	4293      	cmp	r3, r2
 800818c:	f000 8099 	beq.w	80082c2 <HAL_TIM_ConfigClockSource+0x1de>
 8008190:	4a5e      	ldr	r2, [pc, #376]	@ (800830c <HAL_TIM_ConfigClockSource+0x228>)
 8008192:	4293      	cmp	r3, r2
 8008194:	f200 809e 	bhi.w	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008198:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800819c:	f000 8091 	beq.w	80082c2 <HAL_TIM_ConfigClockSource+0x1de>
 80081a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081a4:	f200 8096 	bhi.w	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80081a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ac:	f000 8089 	beq.w	80082c2 <HAL_TIM_ConfigClockSource+0x1de>
 80081b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081b4:	f200 808e 	bhi.w	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80081b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081bc:	d03e      	beq.n	800823c <HAL_TIM_ConfigClockSource+0x158>
 80081be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081c2:	f200 8087 	bhi.w	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80081c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ca:	f000 8086 	beq.w	80082da <HAL_TIM_ConfigClockSource+0x1f6>
 80081ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081d2:	d87f      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80081d4:	2b70      	cmp	r3, #112	@ 0x70
 80081d6:	d01a      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x12a>
 80081d8:	2b70      	cmp	r3, #112	@ 0x70
 80081da:	d87b      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80081dc:	2b60      	cmp	r3, #96	@ 0x60
 80081de:	d050      	beq.n	8008282 <HAL_TIM_ConfigClockSource+0x19e>
 80081e0:	2b60      	cmp	r3, #96	@ 0x60
 80081e2:	d877      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80081e4:	2b50      	cmp	r3, #80	@ 0x50
 80081e6:	d03c      	beq.n	8008262 <HAL_TIM_ConfigClockSource+0x17e>
 80081e8:	2b50      	cmp	r3, #80	@ 0x50
 80081ea:	d873      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80081ec:	2b40      	cmp	r3, #64	@ 0x40
 80081ee:	d058      	beq.n	80082a2 <HAL_TIM_ConfigClockSource+0x1be>
 80081f0:	2b40      	cmp	r3, #64	@ 0x40
 80081f2:	d86f      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80081f4:	2b30      	cmp	r3, #48	@ 0x30
 80081f6:	d064      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x1de>
 80081f8:	2b30      	cmp	r3, #48	@ 0x30
 80081fa:	d86b      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80081fc:	2b20      	cmp	r3, #32
 80081fe:	d060      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x1de>
 8008200:	2b20      	cmp	r3, #32
 8008202:	d867      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008204:	2b00      	cmp	r3, #0
 8008206:	d05c      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x1de>
 8008208:	2b10      	cmp	r3, #16
 800820a:	d05a      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x1de>
 800820c:	e062      	b.n	80082d4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800821e:	f000 fcf9 	bl	8008c14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	609a      	str	r2, [r3, #8]
      break;
 800823a:	e04f      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800824c:	f000 fce2 	bl	8008c14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800825e:	609a      	str	r2, [r3, #8]
      break;
 8008260:	e03c      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800826e:	461a      	mov	r2, r3
 8008270:	f000 fc54 	bl	8008b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2150      	movs	r1, #80	@ 0x50
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fcad 	bl	8008bda <TIM_ITRx_SetConfig>
      break;
 8008280:	e02c      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800828e:	461a      	mov	r2, r3
 8008290:	f000 fc73 	bl	8008b7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2160      	movs	r1, #96	@ 0x60
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fc9d 	bl	8008bda <TIM_ITRx_SetConfig>
      break;
 80082a0:	e01c      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ae:	461a      	mov	r2, r3
 80082b0:	f000 fc34 	bl	8008b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2140      	movs	r1, #64	@ 0x40
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 fc8d 	bl	8008bda <TIM_ITRx_SetConfig>
      break;
 80082c0:	e00c      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4619      	mov	r1, r3
 80082cc:	4610      	mov	r0, r2
 80082ce:	f000 fc84 	bl	8008bda <TIM_ITRx_SetConfig>
      break;
 80082d2:	e003      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	73fb      	strb	r3, [r7, #15]
      break;
 80082d8:	e000      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80082da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	00100070 	.word	0x00100070
 80082fc:	00100060 	.word	0x00100060
 8008300:	00100050 	.word	0x00100050
 8008304:	00100040 	.word	0x00100040
 8008308:	00100030 	.word	0x00100030
 800830c:	00100020 	.word	0x00100020

08008310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a4c      	ldr	r2, [pc, #304]	@ (80084a4 <TIM_Base_SetConfig+0x144>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d017      	beq.n	80083a8 <TIM_Base_SetConfig+0x48>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800837e:	d013      	beq.n	80083a8 <TIM_Base_SetConfig+0x48>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a49      	ldr	r2, [pc, #292]	@ (80084a8 <TIM_Base_SetConfig+0x148>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00f      	beq.n	80083a8 <TIM_Base_SetConfig+0x48>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a48      	ldr	r2, [pc, #288]	@ (80084ac <TIM_Base_SetConfig+0x14c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00b      	beq.n	80083a8 <TIM_Base_SetConfig+0x48>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a47      	ldr	r2, [pc, #284]	@ (80084b0 <TIM_Base_SetConfig+0x150>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d007      	beq.n	80083a8 <TIM_Base_SetConfig+0x48>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a46      	ldr	r2, [pc, #280]	@ (80084b4 <TIM_Base_SetConfig+0x154>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d003      	beq.n	80083a8 <TIM_Base_SetConfig+0x48>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a45      	ldr	r2, [pc, #276]	@ (80084b8 <TIM_Base_SetConfig+0x158>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d108      	bne.n	80083ba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a39      	ldr	r2, [pc, #228]	@ (80084a4 <TIM_Base_SetConfig+0x144>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d023      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083c8:	d01f      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a36      	ldr	r2, [pc, #216]	@ (80084a8 <TIM_Base_SetConfig+0x148>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01b      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a35      	ldr	r2, [pc, #212]	@ (80084ac <TIM_Base_SetConfig+0x14c>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d017      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a34      	ldr	r2, [pc, #208]	@ (80084b0 <TIM_Base_SetConfig+0x150>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a33      	ldr	r2, [pc, #204]	@ (80084b4 <TIM_Base_SetConfig+0x154>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00f      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a33      	ldr	r2, [pc, #204]	@ (80084bc <TIM_Base_SetConfig+0x15c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00b      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a32      	ldr	r2, [pc, #200]	@ (80084c0 <TIM_Base_SetConfig+0x160>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d007      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a31      	ldr	r2, [pc, #196]	@ (80084c4 <TIM_Base_SetConfig+0x164>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d003      	beq.n	800840a <TIM_Base_SetConfig+0xaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a2c      	ldr	r2, [pc, #176]	@ (80084b8 <TIM_Base_SetConfig+0x158>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d108      	bne.n	800841c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a18      	ldr	r2, [pc, #96]	@ (80084a4 <TIM_Base_SetConfig+0x144>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d013      	beq.n	8008470 <TIM_Base_SetConfig+0x110>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a1a      	ldr	r2, [pc, #104]	@ (80084b4 <TIM_Base_SetConfig+0x154>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00f      	beq.n	8008470 <TIM_Base_SetConfig+0x110>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a1a      	ldr	r2, [pc, #104]	@ (80084bc <TIM_Base_SetConfig+0x15c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00b      	beq.n	8008470 <TIM_Base_SetConfig+0x110>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a19      	ldr	r2, [pc, #100]	@ (80084c0 <TIM_Base_SetConfig+0x160>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d007      	beq.n	8008470 <TIM_Base_SetConfig+0x110>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a18      	ldr	r2, [pc, #96]	@ (80084c4 <TIM_Base_SetConfig+0x164>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d003      	beq.n	8008470 <TIM_Base_SetConfig+0x110>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a13      	ldr	r2, [pc, #76]	@ (80084b8 <TIM_Base_SetConfig+0x158>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d103      	bne.n	8008478 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	691a      	ldr	r2, [r3, #16]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b01      	cmp	r3, #1
 8008488:	d105      	bne.n	8008496 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f023 0201 	bic.w	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	611a      	str	r2, [r3, #16]
  }
}
 8008496:	bf00      	nop
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	40012c00 	.word	0x40012c00
 80084a8:	40000400 	.word	0x40000400
 80084ac:	40000800 	.word	0x40000800
 80084b0:	40000c00 	.word	0x40000c00
 80084b4:	40013400 	.word	0x40013400
 80084b8:	40015000 	.word	0x40015000
 80084bc:	40014000 	.word	0x40014000
 80084c0:	40014400 	.word	0x40014400
 80084c4:	40014800 	.word	0x40014800

080084c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	f023 0201 	bic.w	r2, r3, #1
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f023 0302 	bic.w	r3, r3, #2
 8008514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a30      	ldr	r2, [pc, #192]	@ (80085e4 <TIM_OC1_SetConfig+0x11c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d013      	beq.n	8008550 <TIM_OC1_SetConfig+0x88>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a2f      	ldr	r2, [pc, #188]	@ (80085e8 <TIM_OC1_SetConfig+0x120>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d00f      	beq.n	8008550 <TIM_OC1_SetConfig+0x88>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a2e      	ldr	r2, [pc, #184]	@ (80085ec <TIM_OC1_SetConfig+0x124>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d00b      	beq.n	8008550 <TIM_OC1_SetConfig+0x88>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a2d      	ldr	r2, [pc, #180]	@ (80085f0 <TIM_OC1_SetConfig+0x128>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d007      	beq.n	8008550 <TIM_OC1_SetConfig+0x88>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a2c      	ldr	r2, [pc, #176]	@ (80085f4 <TIM_OC1_SetConfig+0x12c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d003      	beq.n	8008550 <TIM_OC1_SetConfig+0x88>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a2b      	ldr	r2, [pc, #172]	@ (80085f8 <TIM_OC1_SetConfig+0x130>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d10c      	bne.n	800856a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f023 0308 	bic.w	r3, r3, #8
 8008556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	4313      	orrs	r3, r2
 8008560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f023 0304 	bic.w	r3, r3, #4
 8008568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a1d      	ldr	r2, [pc, #116]	@ (80085e4 <TIM_OC1_SetConfig+0x11c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d013      	beq.n	800859a <TIM_OC1_SetConfig+0xd2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a1c      	ldr	r2, [pc, #112]	@ (80085e8 <TIM_OC1_SetConfig+0x120>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00f      	beq.n	800859a <TIM_OC1_SetConfig+0xd2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a1b      	ldr	r2, [pc, #108]	@ (80085ec <TIM_OC1_SetConfig+0x124>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d00b      	beq.n	800859a <TIM_OC1_SetConfig+0xd2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a1a      	ldr	r2, [pc, #104]	@ (80085f0 <TIM_OC1_SetConfig+0x128>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d007      	beq.n	800859a <TIM_OC1_SetConfig+0xd2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a19      	ldr	r2, [pc, #100]	@ (80085f4 <TIM_OC1_SetConfig+0x12c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d003      	beq.n	800859a <TIM_OC1_SetConfig+0xd2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a18      	ldr	r2, [pc, #96]	@ (80085f8 <TIM_OC1_SetConfig+0x130>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d111      	bne.n	80085be <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	621a      	str	r2, [r3, #32]
}
 80085d8:	bf00      	nop
 80085da:	371c      	adds	r7, #28
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	40012c00 	.word	0x40012c00
 80085e8:	40013400 	.word	0x40013400
 80085ec:	40014000 	.word	0x40014000
 80085f0:	40014400 	.word	0x40014400
 80085f4:	40014800 	.word	0x40014800
 80085f8:	40015000 	.word	0x40015000

080085fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	f023 0210 	bic.w	r2, r3, #16
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800862a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800862e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	021b      	lsls	r3, r3, #8
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4313      	orrs	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f023 0320 	bic.w	r3, r3, #32
 800864a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	4313      	orrs	r3, r2
 8008656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a2c      	ldr	r2, [pc, #176]	@ (800870c <TIM_OC2_SetConfig+0x110>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d007      	beq.n	8008670 <TIM_OC2_SetConfig+0x74>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a2b      	ldr	r2, [pc, #172]	@ (8008710 <TIM_OC2_SetConfig+0x114>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d003      	beq.n	8008670 <TIM_OC2_SetConfig+0x74>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a2a      	ldr	r2, [pc, #168]	@ (8008714 <TIM_OC2_SetConfig+0x118>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d10d      	bne.n	800868c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800868a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a1f      	ldr	r2, [pc, #124]	@ (800870c <TIM_OC2_SetConfig+0x110>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d013      	beq.n	80086bc <TIM_OC2_SetConfig+0xc0>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a1e      	ldr	r2, [pc, #120]	@ (8008710 <TIM_OC2_SetConfig+0x114>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d00f      	beq.n	80086bc <TIM_OC2_SetConfig+0xc0>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a1e      	ldr	r2, [pc, #120]	@ (8008718 <TIM_OC2_SetConfig+0x11c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00b      	beq.n	80086bc <TIM_OC2_SetConfig+0xc0>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a1d      	ldr	r2, [pc, #116]	@ (800871c <TIM_OC2_SetConfig+0x120>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d007      	beq.n	80086bc <TIM_OC2_SetConfig+0xc0>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008720 <TIM_OC2_SetConfig+0x124>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d003      	beq.n	80086bc <TIM_OC2_SetConfig+0xc0>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a17      	ldr	r2, [pc, #92]	@ (8008714 <TIM_OC2_SetConfig+0x118>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d113      	bne.n	80086e4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	621a      	str	r2, [r3, #32]
}
 80086fe:	bf00      	nop
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	40012c00 	.word	0x40012c00
 8008710:	40013400 	.word	0x40013400
 8008714:	40015000 	.word	0x40015000
 8008718:	40014000 	.word	0x40014000
 800871c:	40014400 	.word	0x40014400
 8008720:	40014800 	.word	0x40014800

08008724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0303 	bic.w	r3, r3, #3
 800875e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	021b      	lsls	r3, r3, #8
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	4313      	orrs	r3, r2
 800877c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a2b      	ldr	r2, [pc, #172]	@ (8008830 <TIM_OC3_SetConfig+0x10c>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d007      	beq.n	8008796 <TIM_OC3_SetConfig+0x72>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a2a      	ldr	r2, [pc, #168]	@ (8008834 <TIM_OC3_SetConfig+0x110>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d003      	beq.n	8008796 <TIM_OC3_SetConfig+0x72>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a29      	ldr	r2, [pc, #164]	@ (8008838 <TIM_OC3_SetConfig+0x114>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d10d      	bne.n	80087b2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800879c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	021b      	lsls	r3, r3, #8
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80087b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a1e      	ldr	r2, [pc, #120]	@ (8008830 <TIM_OC3_SetConfig+0x10c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d013      	beq.n	80087e2 <TIM_OC3_SetConfig+0xbe>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008834 <TIM_OC3_SetConfig+0x110>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00f      	beq.n	80087e2 <TIM_OC3_SetConfig+0xbe>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a1d      	ldr	r2, [pc, #116]	@ (800883c <TIM_OC3_SetConfig+0x118>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00b      	beq.n	80087e2 <TIM_OC3_SetConfig+0xbe>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008840 <TIM_OC3_SetConfig+0x11c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d007      	beq.n	80087e2 <TIM_OC3_SetConfig+0xbe>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008844 <TIM_OC3_SetConfig+0x120>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d003      	beq.n	80087e2 <TIM_OC3_SetConfig+0xbe>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a16      	ldr	r2, [pc, #88]	@ (8008838 <TIM_OC3_SetConfig+0x114>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d113      	bne.n	800880a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	011b      	lsls	r3, r3, #4
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	011b      	lsls	r3, r3, #4
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	4313      	orrs	r3, r2
 8008808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	621a      	str	r2, [r3, #32]
}
 8008824:	bf00      	nop
 8008826:	371c      	adds	r7, #28
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	40012c00 	.word	0x40012c00
 8008834:	40013400 	.word	0x40013400
 8008838:	40015000 	.word	0x40015000
 800883c:	40014000 	.word	0x40014000
 8008840:	40014400 	.word	0x40014400
 8008844:	40014800 	.word	0x40014800

08008848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008848:	b480      	push	{r7}
 800884a:	b087      	sub	sp, #28
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a1b      	ldr	r3, [r3, #32]
 800885c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800887a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	021b      	lsls	r3, r3, #8
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	4313      	orrs	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008896:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	031b      	lsls	r3, r3, #12
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a2c      	ldr	r2, [pc, #176]	@ (8008958 <TIM_OC4_SetConfig+0x110>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d007      	beq.n	80088bc <TIM_OC4_SetConfig+0x74>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a2b      	ldr	r2, [pc, #172]	@ (800895c <TIM_OC4_SetConfig+0x114>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d003      	beq.n	80088bc <TIM_OC4_SetConfig+0x74>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008960 <TIM_OC4_SetConfig+0x118>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d10d      	bne.n	80088d8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80088c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	031b      	lsls	r3, r3, #12
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a1f      	ldr	r2, [pc, #124]	@ (8008958 <TIM_OC4_SetConfig+0x110>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d013      	beq.n	8008908 <TIM_OC4_SetConfig+0xc0>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a1e      	ldr	r2, [pc, #120]	@ (800895c <TIM_OC4_SetConfig+0x114>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00f      	beq.n	8008908 <TIM_OC4_SetConfig+0xc0>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008964 <TIM_OC4_SetConfig+0x11c>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00b      	beq.n	8008908 <TIM_OC4_SetConfig+0xc0>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008968 <TIM_OC4_SetConfig+0x120>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d007      	beq.n	8008908 <TIM_OC4_SetConfig+0xc0>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a1c      	ldr	r2, [pc, #112]	@ (800896c <TIM_OC4_SetConfig+0x124>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d003      	beq.n	8008908 <TIM_OC4_SetConfig+0xc0>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a17      	ldr	r2, [pc, #92]	@ (8008960 <TIM_OC4_SetConfig+0x118>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d113      	bne.n	8008930 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800890e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008916:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	019b      	lsls	r3, r3, #6
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	4313      	orrs	r3, r2
 8008922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	019b      	lsls	r3, r3, #6
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	4313      	orrs	r3, r2
 800892e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	621a      	str	r2, [r3, #32]
}
 800894a:	bf00      	nop
 800894c:	371c      	adds	r7, #28
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	40012c00 	.word	0x40012c00
 800895c:	40013400 	.word	0x40013400
 8008960:	40015000 	.word	0x40015000
 8008964:	40014000 	.word	0x40014000
 8008968:	40014400 	.word	0x40014400
 800896c:	40014800 	.word	0x40014800

08008970 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800899e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80089b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	041b      	lsls	r3, r3, #16
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	4313      	orrs	r3, r2
 80089c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a19      	ldr	r2, [pc, #100]	@ (8008a2c <TIM_OC5_SetConfig+0xbc>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d013      	beq.n	80089f2 <TIM_OC5_SetConfig+0x82>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a18      	ldr	r2, [pc, #96]	@ (8008a30 <TIM_OC5_SetConfig+0xc0>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d00f      	beq.n	80089f2 <TIM_OC5_SetConfig+0x82>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a17      	ldr	r2, [pc, #92]	@ (8008a34 <TIM_OC5_SetConfig+0xc4>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d00b      	beq.n	80089f2 <TIM_OC5_SetConfig+0x82>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a16      	ldr	r2, [pc, #88]	@ (8008a38 <TIM_OC5_SetConfig+0xc8>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d007      	beq.n	80089f2 <TIM_OC5_SetConfig+0x82>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a15      	ldr	r2, [pc, #84]	@ (8008a3c <TIM_OC5_SetConfig+0xcc>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d003      	beq.n	80089f2 <TIM_OC5_SetConfig+0x82>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a14      	ldr	r2, [pc, #80]	@ (8008a40 <TIM_OC5_SetConfig+0xd0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d109      	bne.n	8008a06 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	021b      	lsls	r3, r3, #8
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	621a      	str	r2, [r3, #32]
}
 8008a20:	bf00      	nop
 8008a22:	371c      	adds	r7, #28
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	40012c00 	.word	0x40012c00
 8008a30:	40013400 	.word	0x40013400
 8008a34:	40014000 	.word	0x40014000
 8008a38:	40014400 	.word	0x40014400
 8008a3c:	40014800 	.word	0x40014800
 8008a40:	40015000 	.word	0x40015000

08008a44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	021b      	lsls	r3, r3, #8
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	051b      	lsls	r3, r3, #20
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8008b04 <TIM_OC6_SetConfig+0xc0>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d013      	beq.n	8008ac8 <TIM_OC6_SetConfig+0x84>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a19      	ldr	r2, [pc, #100]	@ (8008b08 <TIM_OC6_SetConfig+0xc4>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d00f      	beq.n	8008ac8 <TIM_OC6_SetConfig+0x84>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a18      	ldr	r2, [pc, #96]	@ (8008b0c <TIM_OC6_SetConfig+0xc8>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d00b      	beq.n	8008ac8 <TIM_OC6_SetConfig+0x84>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a17      	ldr	r2, [pc, #92]	@ (8008b10 <TIM_OC6_SetConfig+0xcc>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d007      	beq.n	8008ac8 <TIM_OC6_SetConfig+0x84>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a16      	ldr	r2, [pc, #88]	@ (8008b14 <TIM_OC6_SetConfig+0xd0>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d003      	beq.n	8008ac8 <TIM_OC6_SetConfig+0x84>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a15      	ldr	r2, [pc, #84]	@ (8008b18 <TIM_OC6_SetConfig+0xd4>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d109      	bne.n	8008adc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ace:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	029b      	lsls	r3, r3, #10
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	621a      	str	r2, [r3, #32]
}
 8008af6:	bf00      	nop
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	40012c00 	.word	0x40012c00
 8008b08:	40013400 	.word	0x40013400
 8008b0c:	40014000 	.word	0x40014000
 8008b10:	40014400 	.word	0x40014400
 8008b14:	40014800 	.word	0x40014800
 8008b18:	40015000 	.word	0x40015000

08008b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	f023 0201 	bic.w	r2, r3, #1
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f023 030a 	bic.w	r3, r3, #10
 8008b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	621a      	str	r2, [r3, #32]
}
 8008b6e:	bf00      	nop
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b087      	sub	sp, #28
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	60f8      	str	r0, [r7, #12]
 8008b82:	60b9      	str	r1, [r7, #8]
 8008b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	f023 0210 	bic.w	r2, r3, #16
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	031b      	lsls	r3, r3, #12
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008bb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	011b      	lsls	r3, r3, #4
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	621a      	str	r2, [r3, #32]
}
 8008bce:	bf00      	nop
 8008bd0:	371c      	adds	r7, #28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b085      	sub	sp, #20
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	f043 0307 	orr.w	r3, r3, #7
 8008c00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	609a      	str	r2, [r3, #8]
}
 8008c08:	bf00      	nop
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b087      	sub	sp, #28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
 8008c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	021a      	lsls	r2, r3, #8
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	431a      	orrs	r2, r3
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	609a      	str	r2, [r3, #8]
}
 8008c48:	bf00      	nop
 8008c4a:	371c      	adds	r7, #28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f003 031f 	and.w	r3, r3, #31
 8008c66:	2201      	movs	r2, #1
 8008c68:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6a1a      	ldr	r2, [r3, #32]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	43db      	mvns	r3, r3
 8008c76:	401a      	ands	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a1a      	ldr	r2, [r3, #32]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f003 031f 	and.w	r3, r3, #31
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	fa01 f303 	lsl.w	r3, r1, r3
 8008c8c:	431a      	orrs	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	621a      	str	r2, [r3, #32]
}
 8008c92:	bf00      	nop
 8008c94:	371c      	adds	r7, #28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
	...

08008ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d101      	bne.n	8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	e074      	b.n	8008da2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a34      	ldr	r2, [pc, #208]	@ (8008db0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d009      	beq.n	8008cf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a33      	ldr	r2, [pc, #204]	@ (8008db4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d004      	beq.n	8008cf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a31      	ldr	r2, [pc, #196]	@ (8008db8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d108      	bne.n	8008d08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008cfc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a21      	ldr	r2, [pc, #132]	@ (8008db0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d022      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d38:	d01d      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8008dbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d018      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d013      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a1c      	ldr	r2, [pc, #112]	@ (8008dc4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d00e      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a15      	ldr	r2, [pc, #84]	@ (8008db4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d009      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a18      	ldr	r2, [pc, #96]	@ (8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d004      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a11      	ldr	r2, [pc, #68]	@ (8008db8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d10c      	bne.n	8008d90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	40012c00 	.word	0x40012c00
 8008db4:	40013400 	.word	0x40013400
 8008db8:	40015000 	.word	0x40015000
 8008dbc:	40000400 	.word	0x40000400
 8008dc0:	40000800 	.word	0x40000800
 8008dc4:	40000c00 	.word	0x40000c00
 8008dc8:	40014000 	.word	0x40014000

08008dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e042      	b.n	8008ef0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7fa fee7 	bl	8003c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2224      	movs	r2, #36	@ 0x24
 8008e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0201 	bic.w	r2, r2, #1
 8008e98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 ff42 	bl	8009d2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fc43 	bl	8009734 <UART_SetConfig>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d101      	bne.n	8008eb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e01b      	b.n	8008ef0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	689a      	ldr	r2, [r3, #8]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0201 	orr.w	r2, r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 ffc1 	bl	8009e70 <UART_CheckIdleState>
 8008eee:	4603      	mov	r3, r0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08a      	sub	sp, #40	@ 0x28
 8008efc:	af02      	add	r7, sp, #8
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	603b      	str	r3, [r7, #0]
 8008f04:	4613      	mov	r3, r2
 8008f06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	d17b      	bne.n	800900a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <HAL_UART_Transmit+0x26>
 8008f18:	88fb      	ldrh	r3, [r7, #6]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e074      	b.n	800900c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2221      	movs	r2, #33	@ 0x21
 8008f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f32:	f7fa ff7b 	bl	8003e2c <HAL_GetTick>
 8008f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	88fa      	ldrh	r2, [r7, #6]
 8008f3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	88fa      	ldrh	r2, [r7, #6]
 8008f44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f50:	d108      	bne.n	8008f64 <HAL_UART_Transmit+0x6c>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d104      	bne.n	8008f64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	61bb      	str	r3, [r7, #24]
 8008f62:	e003      	b.n	8008f6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f6c:	e030      	b.n	8008fd0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2200      	movs	r2, #0
 8008f76:	2180      	movs	r1, #128	@ 0x80
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f001 f823 	bl	8009fc4 <UART_WaitOnFlagUntilTimeout>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d005      	beq.n	8008f90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2220      	movs	r2, #32
 8008f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e03d      	b.n	800900c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10b      	bne.n	8008fae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fa4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	3302      	adds	r3, #2
 8008faa:	61bb      	str	r3, [r7, #24]
 8008fac:	e007      	b.n	8008fbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	781a      	ldrb	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1c8      	bne.n	8008f6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2140      	movs	r1, #64	@ 0x40
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f000 ffec 	bl	8009fc4 <UART_WaitOnFlagUntilTimeout>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e006      	b.n	800900c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2220      	movs	r2, #32
 8009002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	e000      	b.n	800900c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800900a:	2302      	movs	r3, #2
  }
}
 800900c:	4618      	mov	r0, r3
 800900e:	3720      	adds	r7, #32
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b08a      	sub	sp, #40	@ 0x28
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	4613      	mov	r3, r2
 8009020:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009028:	2b20      	cmp	r3, #32
 800902a:	d137      	bne.n	800909c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d002      	beq.n	8009038 <HAL_UART_Receive_IT+0x24>
 8009032:	88fb      	ldrh	r3, [r7, #6]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d101      	bne.n	800903c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e030      	b.n	800909e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a18      	ldr	r2, [pc, #96]	@ (80090a8 <HAL_UART_Receive_IT+0x94>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d01f      	beq.n	800908c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d018      	beq.n	800908c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	e853 3f00 	ldrex	r3, [r3]
 8009066:	613b      	str	r3, [r7, #16]
   return(result);
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800906e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	461a      	mov	r2, r3
 8009076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009078:	623b      	str	r3, [r7, #32]
 800907a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	69f9      	ldr	r1, [r7, #28]
 800907e:	6a3a      	ldr	r2, [r7, #32]
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	61bb      	str	r3, [r7, #24]
   return(result);
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e6      	bne.n	800905a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800908c:	88fb      	ldrh	r3, [r7, #6]
 800908e:	461a      	mov	r2, r3
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f001 f804 	bl	800a0a0 <UART_Start_Receive_IT>
 8009098:	4603      	mov	r3, r0
 800909a:	e000      	b.n	800909e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800909c:	2302      	movs	r3, #2
  }
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3728      	adds	r7, #40	@ 0x28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	40008000 	.word	0x40008000

080090ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b0ba      	sub	sp, #232	@ 0xe8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80090d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80090da:	4013      	ands	r3, r2
 80090dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80090e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d11b      	bne.n	8009120 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ec:	f003 0320 	and.w	r3, r3, #32
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d015      	beq.n	8009120 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d105      	bne.n	800910c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d009      	beq.n	8009120 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 82e3 	beq.w	80096dc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	4798      	blx	r3
      }
      return;
 800911e:	e2dd      	b.n	80096dc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 8123 	beq.w	8009370 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800912a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800912e:	4b8d      	ldr	r3, [pc, #564]	@ (8009364 <HAL_UART_IRQHandler+0x2b8>)
 8009130:	4013      	ands	r3, r2
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009136:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800913a:	4b8b      	ldr	r3, [pc, #556]	@ (8009368 <HAL_UART_IRQHandler+0x2bc>)
 800913c:	4013      	ands	r3, r2
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 8116 	beq.w	8009370 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	d011      	beq.n	8009174 <HAL_UART_IRQHandler+0xc8>
 8009150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00b      	beq.n	8009174 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2201      	movs	r2, #1
 8009162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800916a:	f043 0201 	orr.w	r2, r3, #1
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009178:	f003 0302 	and.w	r3, r3, #2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d011      	beq.n	80091a4 <HAL_UART_IRQHandler+0xf8>
 8009180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009184:	f003 0301 	and.w	r3, r3, #1
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00b      	beq.n	80091a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2202      	movs	r2, #2
 8009192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800919a:	f043 0204 	orr.w	r2, r3, #4
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d011      	beq.n	80091d4 <HAL_UART_IRQHandler+0x128>
 80091b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00b      	beq.n	80091d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2204      	movs	r2, #4
 80091c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ca:	f043 0202 	orr.w	r2, r3, #2
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091d8:	f003 0308 	and.w	r3, r3, #8
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d017      	beq.n	8009210 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d105      	bne.n	80091f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80091ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80091f0:	4b5c      	ldr	r3, [pc, #368]	@ (8009364 <HAL_UART_IRQHandler+0x2b8>)
 80091f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2208      	movs	r2, #8
 80091fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009206:	f043 0208 	orr.w	r2, r3, #8
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009218:	2b00      	cmp	r3, #0
 800921a:	d012      	beq.n	8009242 <HAL_UART_IRQHandler+0x196>
 800921c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009220:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00c      	beq.n	8009242 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009230:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009238:	f043 0220 	orr.w	r2, r3, #32
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 8249 	beq.w	80096e0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800924e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d013      	beq.n	8009282 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800925a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800925e:	f003 0320 	and.w	r3, r3, #32
 8009262:	2b00      	cmp	r3, #0
 8009264:	d105      	bne.n	8009272 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800926a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d007      	beq.n	8009282 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009288:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009296:	2b40      	cmp	r3, #64	@ 0x40
 8009298:	d005      	beq.n	80092a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800929a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800929e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d054      	beq.n	8009350 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f001 f81c 	bl	800a2e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092b6:	2b40      	cmp	r3, #64	@ 0x40
 80092b8:	d146      	bne.n	8009348 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3308      	adds	r3, #8
 80092c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092c8:	e853 3f00 	ldrex	r3, [r3]
 80092cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3308      	adds	r3, #8
 80092e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80092e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80092ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80092f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80092fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1d9      	bne.n	80092ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800930c:	2b00      	cmp	r3, #0
 800930e:	d017      	beq.n	8009340 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009316:	4a15      	ldr	r2, [pc, #84]	@ (800936c <HAL_UART_IRQHandler+0x2c0>)
 8009318:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009320:	4618      	mov	r0, r3
 8009322:	f7fc fb7f 	bl	8005a24 <HAL_DMA_Abort_IT>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d019      	beq.n	8009360 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800933a:	4610      	mov	r0, r2
 800933c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800933e:	e00f      	b.n	8009360 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f9e1 	bl	8009708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009346:	e00b      	b.n	8009360 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f9dd 	bl	8009708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800934e:	e007      	b.n	8009360 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f9d9 	bl	8009708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800935e:	e1bf      	b.n	80096e0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009360:	bf00      	nop
    return;
 8009362:	e1bd      	b.n	80096e0 <HAL_UART_IRQHandler+0x634>
 8009364:	10000001 	.word	0x10000001
 8009368:	04000120 	.word	0x04000120
 800936c:	0800a3b1 	.word	0x0800a3b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009374:	2b01      	cmp	r3, #1
 8009376:	f040 8153 	bne.w	8009620 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800937a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800937e:	f003 0310 	and.w	r3, r3, #16
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 814c 	beq.w	8009620 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800938c:	f003 0310 	and.w	r3, r3, #16
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 8145 	beq.w	8009620 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2210      	movs	r2, #16
 800939c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093a8:	2b40      	cmp	r3, #64	@ 0x40
 80093aa:	f040 80bb 	bne.w	8009524 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 818f 	beq.w	80096e4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093d0:	429a      	cmp	r2, r3
 80093d2:	f080 8187 	bcs.w	80096e4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0320 	and.w	r3, r3, #32
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f040 8087 	bne.w	8009502 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009408:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800940c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009410:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	461a      	mov	r2, r3
 800941a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800941e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009422:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009426:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800942a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1da      	bne.n	80093f4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3308      	adds	r3, #8
 8009444:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009448:	e853 3f00 	ldrex	r3, [r3]
 800944c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800944e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009450:	f023 0301 	bic.w	r3, r3, #1
 8009454:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3308      	adds	r3, #8
 800945e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009462:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009466:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009468:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800946a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009474:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e1      	bne.n	800943e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3308      	adds	r3, #8
 8009480:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009482:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009484:	e853 3f00 	ldrex	r3, [r3]
 8009488:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800948a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800948c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	3308      	adds	r3, #8
 800949a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800949e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e3      	bne.n	800947a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2220      	movs	r2, #32
 80094b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094d0:	f023 0310 	bic.w	r3, r3, #16
 80094d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094ea:	e841 2300 	strex	r3, r2, [r1]
 80094ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e4      	bne.n	80094c0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fc fa38 	bl	8005972 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2202      	movs	r2, #2
 8009506:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009514:	b29b      	uxth	r3, r3
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	b29b      	uxth	r3, r3
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f8fd 	bl	800971c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009522:	e0df      	b.n	80096e4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009530:	b29b      	uxth	r3, r3
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800953e:	b29b      	uxth	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 80d1 	beq.w	80096e8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 80cc 	beq.w	80096e8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800955e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009564:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009572:	647b      	str	r3, [r7, #68]	@ 0x44
 8009574:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e4      	bne.n	8009550 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3308      	adds	r3, #8
 800958c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	623b      	str	r3, [r7, #32]
   return(result);
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800959c:	f023 0301 	bic.w	r3, r3, #1
 80095a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80095ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80095b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e1      	bne.n	8009586 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2220      	movs	r2, #32
 80095c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	e853 3f00 	ldrex	r3, [r3]
 80095e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f023 0310 	bic.w	r3, r3, #16
 80095ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80095f8:	61fb      	str	r3, [r7, #28]
 80095fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	69b9      	ldr	r1, [r7, #24]
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	e841 2300 	strex	r3, r2, [r1]
 8009604:	617b      	str	r3, [r7, #20]
   return(result);
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1e4      	bne.n	80095d6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2202      	movs	r2, #2
 8009610:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009612:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f87f 	bl	800971c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800961e:	e063      	b.n	80096e8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00e      	beq.n	800964a <HAL_UART_IRQHandler+0x59e>
 800962c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d008      	beq.n	800964a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009640:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 fc12 	bl	800ae6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009648:	e051      	b.n	80096ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800964a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800964e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009652:	2b00      	cmp	r3, #0
 8009654:	d014      	beq.n	8009680 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800965a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800965e:	2b00      	cmp	r3, #0
 8009660:	d105      	bne.n	800966e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d008      	beq.n	8009680 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009672:	2b00      	cmp	r3, #0
 8009674:	d03a      	beq.n	80096ec <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	4798      	blx	r3
    }
    return;
 800967e:	e035      	b.n	80096ec <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009688:	2b00      	cmp	r3, #0
 800968a:	d009      	beq.n	80096a0 <HAL_UART_IRQHandler+0x5f4>
 800968c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fe9f 	bl	800a3dc <UART_EndTransmit_IT>
    return;
 800969e:	e026      	b.n	80096ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80096a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d009      	beq.n	80096c0 <HAL_UART_IRQHandler+0x614>
 80096ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f001 fbeb 	bl	800ae94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096be:	e016      	b.n	80096ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80096c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d010      	beq.n	80096ee <HAL_UART_IRQHandler+0x642>
 80096cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	da0c      	bge.n	80096ee <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f001 fbd3 	bl	800ae80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096da:	e008      	b.n	80096ee <HAL_UART_IRQHandler+0x642>
      return;
 80096dc:	bf00      	nop
 80096de:	e006      	b.n	80096ee <HAL_UART_IRQHandler+0x642>
    return;
 80096e0:	bf00      	nop
 80096e2:	e004      	b.n	80096ee <HAL_UART_IRQHandler+0x642>
      return;
 80096e4:	bf00      	nop
 80096e6:	e002      	b.n	80096ee <HAL_UART_IRQHandler+0x642>
      return;
 80096e8:	bf00      	nop
 80096ea:	e000      	b.n	80096ee <HAL_UART_IRQHandler+0x642>
    return;
 80096ec:	bf00      	nop
  }
}
 80096ee:	37e8      	adds	r7, #232	@ 0xe8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	460b      	mov	r3, r1
 8009726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009738:	b08c      	sub	sp, #48	@ 0x30
 800973a:	af00      	add	r7, sp, #0
 800973c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	689a      	ldr	r2, [r3, #8]
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	431a      	orrs	r2, r3
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	431a      	orrs	r2, r3
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	4313      	orrs	r3, r2
 800975a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	4baa      	ldr	r3, [pc, #680]	@ (8009a0c <UART_SetConfig+0x2d8>)
 8009764:	4013      	ands	r3, r2
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	6812      	ldr	r2, [r2, #0]
 800976a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800976c:	430b      	orrs	r3, r1
 800976e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	430a      	orrs	r2, r1
 8009784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a9f      	ldr	r2, [pc, #636]	@ (8009a10 <UART_SetConfig+0x2dc>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d004      	beq.n	80097a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800979c:	4313      	orrs	r3, r2
 800979e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80097aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	6812      	ldr	r2, [r2, #0]
 80097b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097b4:	430b      	orrs	r3, r1
 80097b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097be:	f023 010f 	bic.w	r1, r3, #15
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a90      	ldr	r2, [pc, #576]	@ (8009a14 <UART_SetConfig+0x2e0>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d125      	bne.n	8009824 <UART_SetConfig+0xf0>
 80097d8:	4b8f      	ldr	r3, [pc, #572]	@ (8009a18 <UART_SetConfig+0x2e4>)
 80097da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097de:	f003 0303 	and.w	r3, r3, #3
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d81a      	bhi.n	800981c <UART_SetConfig+0xe8>
 80097e6:	a201      	add	r2, pc, #4	@ (adr r2, 80097ec <UART_SetConfig+0xb8>)
 80097e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ec:	080097fd 	.word	0x080097fd
 80097f0:	0800980d 	.word	0x0800980d
 80097f4:	08009805 	.word	0x08009805
 80097f8:	08009815 	.word	0x08009815
 80097fc:	2301      	movs	r3, #1
 80097fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009802:	e116      	b.n	8009a32 <UART_SetConfig+0x2fe>
 8009804:	2302      	movs	r3, #2
 8009806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800980a:	e112      	b.n	8009a32 <UART_SetConfig+0x2fe>
 800980c:	2304      	movs	r3, #4
 800980e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009812:	e10e      	b.n	8009a32 <UART_SetConfig+0x2fe>
 8009814:	2308      	movs	r3, #8
 8009816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800981a:	e10a      	b.n	8009a32 <UART_SetConfig+0x2fe>
 800981c:	2310      	movs	r3, #16
 800981e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009822:	e106      	b.n	8009a32 <UART_SetConfig+0x2fe>
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a7c      	ldr	r2, [pc, #496]	@ (8009a1c <UART_SetConfig+0x2e8>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d138      	bne.n	80098a0 <UART_SetConfig+0x16c>
 800982e:	4b7a      	ldr	r3, [pc, #488]	@ (8009a18 <UART_SetConfig+0x2e4>)
 8009830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009834:	f003 030c 	and.w	r3, r3, #12
 8009838:	2b0c      	cmp	r3, #12
 800983a:	d82d      	bhi.n	8009898 <UART_SetConfig+0x164>
 800983c:	a201      	add	r2, pc, #4	@ (adr r2, 8009844 <UART_SetConfig+0x110>)
 800983e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009842:	bf00      	nop
 8009844:	08009879 	.word	0x08009879
 8009848:	08009899 	.word	0x08009899
 800984c:	08009899 	.word	0x08009899
 8009850:	08009899 	.word	0x08009899
 8009854:	08009889 	.word	0x08009889
 8009858:	08009899 	.word	0x08009899
 800985c:	08009899 	.word	0x08009899
 8009860:	08009899 	.word	0x08009899
 8009864:	08009881 	.word	0x08009881
 8009868:	08009899 	.word	0x08009899
 800986c:	08009899 	.word	0x08009899
 8009870:	08009899 	.word	0x08009899
 8009874:	08009891 	.word	0x08009891
 8009878:	2300      	movs	r3, #0
 800987a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800987e:	e0d8      	b.n	8009a32 <UART_SetConfig+0x2fe>
 8009880:	2302      	movs	r3, #2
 8009882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009886:	e0d4      	b.n	8009a32 <UART_SetConfig+0x2fe>
 8009888:	2304      	movs	r3, #4
 800988a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800988e:	e0d0      	b.n	8009a32 <UART_SetConfig+0x2fe>
 8009890:	2308      	movs	r3, #8
 8009892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009896:	e0cc      	b.n	8009a32 <UART_SetConfig+0x2fe>
 8009898:	2310      	movs	r3, #16
 800989a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800989e:	e0c8      	b.n	8009a32 <UART_SetConfig+0x2fe>
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a5e      	ldr	r2, [pc, #376]	@ (8009a20 <UART_SetConfig+0x2ec>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d125      	bne.n	80098f6 <UART_SetConfig+0x1c2>
 80098aa:	4b5b      	ldr	r3, [pc, #364]	@ (8009a18 <UART_SetConfig+0x2e4>)
 80098ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80098b4:	2b30      	cmp	r3, #48	@ 0x30
 80098b6:	d016      	beq.n	80098e6 <UART_SetConfig+0x1b2>
 80098b8:	2b30      	cmp	r3, #48	@ 0x30
 80098ba:	d818      	bhi.n	80098ee <UART_SetConfig+0x1ba>
 80098bc:	2b20      	cmp	r3, #32
 80098be:	d00a      	beq.n	80098d6 <UART_SetConfig+0x1a2>
 80098c0:	2b20      	cmp	r3, #32
 80098c2:	d814      	bhi.n	80098ee <UART_SetConfig+0x1ba>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <UART_SetConfig+0x19a>
 80098c8:	2b10      	cmp	r3, #16
 80098ca:	d008      	beq.n	80098de <UART_SetConfig+0x1aa>
 80098cc:	e00f      	b.n	80098ee <UART_SetConfig+0x1ba>
 80098ce:	2300      	movs	r3, #0
 80098d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098d4:	e0ad      	b.n	8009a32 <UART_SetConfig+0x2fe>
 80098d6:	2302      	movs	r3, #2
 80098d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098dc:	e0a9      	b.n	8009a32 <UART_SetConfig+0x2fe>
 80098de:	2304      	movs	r3, #4
 80098e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098e4:	e0a5      	b.n	8009a32 <UART_SetConfig+0x2fe>
 80098e6:	2308      	movs	r3, #8
 80098e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ec:	e0a1      	b.n	8009a32 <UART_SetConfig+0x2fe>
 80098ee:	2310      	movs	r3, #16
 80098f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098f4:	e09d      	b.n	8009a32 <UART_SetConfig+0x2fe>
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a4a      	ldr	r2, [pc, #296]	@ (8009a24 <UART_SetConfig+0x2f0>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d125      	bne.n	800994c <UART_SetConfig+0x218>
 8009900:	4b45      	ldr	r3, [pc, #276]	@ (8009a18 <UART_SetConfig+0x2e4>)
 8009902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009906:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800990a:	2bc0      	cmp	r3, #192	@ 0xc0
 800990c:	d016      	beq.n	800993c <UART_SetConfig+0x208>
 800990e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009910:	d818      	bhi.n	8009944 <UART_SetConfig+0x210>
 8009912:	2b80      	cmp	r3, #128	@ 0x80
 8009914:	d00a      	beq.n	800992c <UART_SetConfig+0x1f8>
 8009916:	2b80      	cmp	r3, #128	@ 0x80
 8009918:	d814      	bhi.n	8009944 <UART_SetConfig+0x210>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <UART_SetConfig+0x1f0>
 800991e:	2b40      	cmp	r3, #64	@ 0x40
 8009920:	d008      	beq.n	8009934 <UART_SetConfig+0x200>
 8009922:	e00f      	b.n	8009944 <UART_SetConfig+0x210>
 8009924:	2300      	movs	r3, #0
 8009926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800992a:	e082      	b.n	8009a32 <UART_SetConfig+0x2fe>
 800992c:	2302      	movs	r3, #2
 800992e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009932:	e07e      	b.n	8009a32 <UART_SetConfig+0x2fe>
 8009934:	2304      	movs	r3, #4
 8009936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800993a:	e07a      	b.n	8009a32 <UART_SetConfig+0x2fe>
 800993c:	2308      	movs	r3, #8
 800993e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009942:	e076      	b.n	8009a32 <UART_SetConfig+0x2fe>
 8009944:	2310      	movs	r3, #16
 8009946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800994a:	e072      	b.n	8009a32 <UART_SetConfig+0x2fe>
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a35      	ldr	r2, [pc, #212]	@ (8009a28 <UART_SetConfig+0x2f4>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d12a      	bne.n	80099ac <UART_SetConfig+0x278>
 8009956:	4b30      	ldr	r3, [pc, #192]	@ (8009a18 <UART_SetConfig+0x2e4>)
 8009958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800995c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009964:	d01a      	beq.n	800999c <UART_SetConfig+0x268>
 8009966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800996a:	d81b      	bhi.n	80099a4 <UART_SetConfig+0x270>
 800996c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009970:	d00c      	beq.n	800998c <UART_SetConfig+0x258>
 8009972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009976:	d815      	bhi.n	80099a4 <UART_SetConfig+0x270>
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <UART_SetConfig+0x250>
 800997c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009980:	d008      	beq.n	8009994 <UART_SetConfig+0x260>
 8009982:	e00f      	b.n	80099a4 <UART_SetConfig+0x270>
 8009984:	2300      	movs	r3, #0
 8009986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800998a:	e052      	b.n	8009a32 <UART_SetConfig+0x2fe>
 800998c:	2302      	movs	r3, #2
 800998e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009992:	e04e      	b.n	8009a32 <UART_SetConfig+0x2fe>
 8009994:	2304      	movs	r3, #4
 8009996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800999a:	e04a      	b.n	8009a32 <UART_SetConfig+0x2fe>
 800999c:	2308      	movs	r3, #8
 800999e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099a2:	e046      	b.n	8009a32 <UART_SetConfig+0x2fe>
 80099a4:	2310      	movs	r3, #16
 80099a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099aa:	e042      	b.n	8009a32 <UART_SetConfig+0x2fe>
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a17      	ldr	r2, [pc, #92]	@ (8009a10 <UART_SetConfig+0x2dc>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d13a      	bne.n	8009a2c <UART_SetConfig+0x2f8>
 80099b6:	4b18      	ldr	r3, [pc, #96]	@ (8009a18 <UART_SetConfig+0x2e4>)
 80099b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80099c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099c4:	d01a      	beq.n	80099fc <UART_SetConfig+0x2c8>
 80099c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099ca:	d81b      	bhi.n	8009a04 <UART_SetConfig+0x2d0>
 80099cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099d0:	d00c      	beq.n	80099ec <UART_SetConfig+0x2b8>
 80099d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099d6:	d815      	bhi.n	8009a04 <UART_SetConfig+0x2d0>
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d003      	beq.n	80099e4 <UART_SetConfig+0x2b0>
 80099dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099e0:	d008      	beq.n	80099f4 <UART_SetConfig+0x2c0>
 80099e2:	e00f      	b.n	8009a04 <UART_SetConfig+0x2d0>
 80099e4:	2300      	movs	r3, #0
 80099e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ea:	e022      	b.n	8009a32 <UART_SetConfig+0x2fe>
 80099ec:	2302      	movs	r3, #2
 80099ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099f2:	e01e      	b.n	8009a32 <UART_SetConfig+0x2fe>
 80099f4:	2304      	movs	r3, #4
 80099f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099fa:	e01a      	b.n	8009a32 <UART_SetConfig+0x2fe>
 80099fc:	2308      	movs	r3, #8
 80099fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a02:	e016      	b.n	8009a32 <UART_SetConfig+0x2fe>
 8009a04:	2310      	movs	r3, #16
 8009a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a0a:	e012      	b.n	8009a32 <UART_SetConfig+0x2fe>
 8009a0c:	cfff69f3 	.word	0xcfff69f3
 8009a10:	40008000 	.word	0x40008000
 8009a14:	40013800 	.word	0x40013800
 8009a18:	40021000 	.word	0x40021000
 8009a1c:	40004400 	.word	0x40004400
 8009a20:	40004800 	.word	0x40004800
 8009a24:	40004c00 	.word	0x40004c00
 8009a28:	40005000 	.word	0x40005000
 8009a2c:	2310      	movs	r3, #16
 8009a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4aae      	ldr	r2, [pc, #696]	@ (8009cf0 <UART_SetConfig+0x5bc>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	f040 8097 	bne.w	8009b6c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a42:	2b08      	cmp	r3, #8
 8009a44:	d823      	bhi.n	8009a8e <UART_SetConfig+0x35a>
 8009a46:	a201      	add	r2, pc, #4	@ (adr r2, 8009a4c <UART_SetConfig+0x318>)
 8009a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4c:	08009a71 	.word	0x08009a71
 8009a50:	08009a8f 	.word	0x08009a8f
 8009a54:	08009a79 	.word	0x08009a79
 8009a58:	08009a8f 	.word	0x08009a8f
 8009a5c:	08009a7f 	.word	0x08009a7f
 8009a60:	08009a8f 	.word	0x08009a8f
 8009a64:	08009a8f 	.word	0x08009a8f
 8009a68:	08009a8f 	.word	0x08009a8f
 8009a6c:	08009a87 	.word	0x08009a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a70:	f7fd f9f2 	bl	8006e58 <HAL_RCC_GetPCLK1Freq>
 8009a74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a76:	e010      	b.n	8009a9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a78:	4b9e      	ldr	r3, [pc, #632]	@ (8009cf4 <UART_SetConfig+0x5c0>)
 8009a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a7c:	e00d      	b.n	8009a9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a7e:	f7fd f97d 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8009a82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a84:	e009      	b.n	8009a9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a8c:	e005      	b.n	8009a9a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 8130 	beq.w	8009d02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa6:	4a94      	ldr	r2, [pc, #592]	@ (8009cf8 <UART_SetConfig+0x5c4>)
 8009aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aac:	461a      	mov	r2, r3
 8009aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ab4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	4613      	mov	r3, r2
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	4413      	add	r3, r2
 8009ac0:	69ba      	ldr	r2, [r7, #24]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d305      	bcc.n	8009ad2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009acc:	69ba      	ldr	r2, [r7, #24]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d903      	bls.n	8009ada <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ad8:	e113      	b.n	8009d02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009adc:	2200      	movs	r2, #0
 8009ade:	60bb      	str	r3, [r7, #8]
 8009ae0:	60fa      	str	r2, [r7, #12]
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae6:	4a84      	ldr	r2, [pc, #528]	@ (8009cf8 <UART_SetConfig+0x5c4>)
 8009ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	2200      	movs	r2, #0
 8009af0:	603b      	str	r3, [r7, #0]
 8009af2:	607a      	str	r2, [r7, #4]
 8009af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009afc:	f7f7 f8fc 	bl	8000cf8 <__aeabi_uldivmod>
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	4610      	mov	r0, r2
 8009b06:	4619      	mov	r1, r3
 8009b08:	f04f 0200 	mov.w	r2, #0
 8009b0c:	f04f 0300 	mov.w	r3, #0
 8009b10:	020b      	lsls	r3, r1, #8
 8009b12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b16:	0202      	lsls	r2, r0, #8
 8009b18:	6979      	ldr	r1, [r7, #20]
 8009b1a:	6849      	ldr	r1, [r1, #4]
 8009b1c:	0849      	lsrs	r1, r1, #1
 8009b1e:	2000      	movs	r0, #0
 8009b20:	460c      	mov	r4, r1
 8009b22:	4605      	mov	r5, r0
 8009b24:	eb12 0804 	adds.w	r8, r2, r4
 8009b28:	eb43 0905 	adc.w	r9, r3, r5
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	469a      	mov	sl, r3
 8009b34:	4693      	mov	fp, r2
 8009b36:	4652      	mov	r2, sl
 8009b38:	465b      	mov	r3, fp
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	f7f7 f8db 	bl	8000cf8 <__aeabi_uldivmod>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4613      	mov	r3, r2
 8009b48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b50:	d308      	bcc.n	8009b64 <UART_SetConfig+0x430>
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b58:	d204      	bcs.n	8009b64 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6a3a      	ldr	r2, [r7, #32]
 8009b60:	60da      	str	r2, [r3, #12]
 8009b62:	e0ce      	b.n	8009d02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b6a:	e0ca      	b.n	8009d02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b74:	d166      	bne.n	8009c44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009b76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b7a:	2b08      	cmp	r3, #8
 8009b7c:	d827      	bhi.n	8009bce <UART_SetConfig+0x49a>
 8009b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b84 <UART_SetConfig+0x450>)
 8009b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b84:	08009ba9 	.word	0x08009ba9
 8009b88:	08009bb1 	.word	0x08009bb1
 8009b8c:	08009bb9 	.word	0x08009bb9
 8009b90:	08009bcf 	.word	0x08009bcf
 8009b94:	08009bbf 	.word	0x08009bbf
 8009b98:	08009bcf 	.word	0x08009bcf
 8009b9c:	08009bcf 	.word	0x08009bcf
 8009ba0:	08009bcf 	.word	0x08009bcf
 8009ba4:	08009bc7 	.word	0x08009bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ba8:	f7fd f956 	bl	8006e58 <HAL_RCC_GetPCLK1Freq>
 8009bac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bae:	e014      	b.n	8009bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bb0:	f7fd f968 	bl	8006e84 <HAL_RCC_GetPCLK2Freq>
 8009bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bb6:	e010      	b.n	8009bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8009cf4 <UART_SetConfig+0x5c0>)
 8009bba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bbc:	e00d      	b.n	8009bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bbe:	f7fd f8dd 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8009bc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bc4:	e009      	b.n	8009bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bcc:	e005      	b.n	8009bda <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009bd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 8090 	beq.w	8009d02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be6:	4a44      	ldr	r2, [pc, #272]	@ (8009cf8 <UART_SetConfig+0x5c4>)
 8009be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bec:	461a      	mov	r2, r3
 8009bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bf4:	005a      	lsls	r2, r3, #1
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	085b      	lsrs	r3, r3, #1
 8009bfc:	441a      	add	r2, r3
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	2b0f      	cmp	r3, #15
 8009c0c:	d916      	bls.n	8009c3c <UART_SetConfig+0x508>
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c14:	d212      	bcs.n	8009c3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	f023 030f 	bic.w	r3, r3, #15
 8009c1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	085b      	lsrs	r3, r3, #1
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	8bfb      	ldrh	r3, [r7, #30]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	8bfa      	ldrh	r2, [r7, #30]
 8009c38:	60da      	str	r2, [r3, #12]
 8009c3a:	e062      	b.n	8009d02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c42:	e05e      	b.n	8009d02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d828      	bhi.n	8009c9e <UART_SetConfig+0x56a>
 8009c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c54 <UART_SetConfig+0x520>)
 8009c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c52:	bf00      	nop
 8009c54:	08009c79 	.word	0x08009c79
 8009c58:	08009c81 	.word	0x08009c81
 8009c5c:	08009c89 	.word	0x08009c89
 8009c60:	08009c9f 	.word	0x08009c9f
 8009c64:	08009c8f 	.word	0x08009c8f
 8009c68:	08009c9f 	.word	0x08009c9f
 8009c6c:	08009c9f 	.word	0x08009c9f
 8009c70:	08009c9f 	.word	0x08009c9f
 8009c74:	08009c97 	.word	0x08009c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c78:	f7fd f8ee 	bl	8006e58 <HAL_RCC_GetPCLK1Freq>
 8009c7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c7e:	e014      	b.n	8009caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c80:	f7fd f900 	bl	8006e84 <HAL_RCC_GetPCLK2Freq>
 8009c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c86:	e010      	b.n	8009caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c88:	4b1a      	ldr	r3, [pc, #104]	@ (8009cf4 <UART_SetConfig+0x5c0>)
 8009c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c8c:	e00d      	b.n	8009caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c8e:	f7fd f875 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8009c92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c94:	e009      	b.n	8009caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c9c:	e005      	b.n	8009caa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ca8:	bf00      	nop
    }

    if (pclk != 0U)
 8009caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d028      	beq.n	8009d02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb4:	4a10      	ldr	r2, [pc, #64]	@ (8009cf8 <UART_SetConfig+0x5c4>)
 8009cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	085b      	lsrs	r3, r3, #1
 8009cc8:	441a      	add	r2, r3
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	2b0f      	cmp	r3, #15
 8009cd8:	d910      	bls.n	8009cfc <UART_SetConfig+0x5c8>
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ce0:	d20c      	bcs.n	8009cfc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	60da      	str	r2, [r3, #12]
 8009cec:	e009      	b.n	8009d02 <UART_SetConfig+0x5ce>
 8009cee:	bf00      	nop
 8009cf0:	40008000 	.word	0x40008000
 8009cf4:	00f42400 	.word	0x00f42400
 8009cf8:	0800f450 	.word	0x0800f450
      }
      else
      {
        ret = HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2200      	movs	r2, #0
 8009d16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d1e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3730      	adds	r7, #48	@ 0x30
 8009d26:	46bd      	mov	sp, r7
 8009d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d38:	f003 0308 	and.w	r3, r3, #8
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00a      	beq.n	8009d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	430a      	orrs	r2, r1
 8009d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00a      	beq.n	8009d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d7c:	f003 0302 	and.w	r3, r3, #2
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00a      	beq.n	8009d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9e:	f003 0304 	and.w	r3, r3, #4
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00a      	beq.n	8009dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc0:	f003 0310 	and.w	r3, r3, #16
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00a      	beq.n	8009dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de2:	f003 0320 	and.w	r3, r3, #32
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00a      	beq.n	8009e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	430a      	orrs	r2, r1
 8009dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d01a      	beq.n	8009e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e2a:	d10a      	bne.n	8009e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	430a      	orrs	r2, r1
 8009e62:	605a      	str	r2, [r3, #4]
  }
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b098      	sub	sp, #96	@ 0x60
 8009e74:	af02      	add	r7, sp, #8
 8009e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e80:	f7f9 ffd4 	bl	8003e2c <HAL_GetTick>
 8009e84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0308 	and.w	r3, r3, #8
 8009e90:	2b08      	cmp	r3, #8
 8009e92:	d12f      	bne.n	8009ef4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f88e 	bl	8009fc4 <UART_WaitOnFlagUntilTimeout>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d022      	beq.n	8009ef4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb6:	e853 3f00 	ldrex	r3, [r3]
 8009eba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ecc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ece:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ed4:	e841 2300 	strex	r3, r2, [r1]
 8009ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e6      	bne.n	8009eae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e063      	b.n	8009fbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0304 	and.w	r3, r3, #4
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	d149      	bne.n	8009f96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f857 	bl	8009fc4 <UART_WaitOnFlagUntilTimeout>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d03c      	beq.n	8009f96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	623b      	str	r3, [r7, #32]
   return(result);
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1e6      	bne.n	8009f1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3308      	adds	r3, #8
 8009f54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	e853 3f00 	ldrex	r3, [r3]
 8009f5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f023 0301 	bic.w	r3, r3, #1
 8009f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f6e:	61fa      	str	r2, [r7, #28]
 8009f70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	69b9      	ldr	r1, [r7, #24]
 8009f74:	69fa      	ldr	r2, [r7, #28]
 8009f76:	e841 2300 	strex	r3, r2, [r1]
 8009f7a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1e5      	bne.n	8009f4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e012      	b.n	8009fbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3758      	adds	r7, #88	@ 0x58
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fd4:	e04f      	b.n	800a076 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fdc:	d04b      	beq.n	800a076 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fde:	f7f9 ff25 	bl	8003e2c <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d302      	bcc.n	8009ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d101      	bne.n	8009ff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e04e      	b.n	800a096 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 0304 	and.w	r3, r3, #4
 800a002:	2b00      	cmp	r3, #0
 800a004:	d037      	beq.n	800a076 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b80      	cmp	r3, #128	@ 0x80
 800a00a:	d034      	beq.n	800a076 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2b40      	cmp	r3, #64	@ 0x40
 800a010:	d031      	beq.n	800a076 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	f003 0308 	and.w	r3, r3, #8
 800a01c:	2b08      	cmp	r3, #8
 800a01e:	d110      	bne.n	800a042 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2208      	movs	r2, #8
 800a026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 f95b 	bl	800a2e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2208      	movs	r2, #8
 800a032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e029      	b.n	800a096 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a04c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a050:	d111      	bne.n	800a076 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a05a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 f941 	bl	800a2e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2220      	movs	r2, #32
 800a066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e00f      	b.n	800a096 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	69da      	ldr	r2, [r3, #28]
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	4013      	ands	r3, r2
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	429a      	cmp	r2, r3
 800a084:	bf0c      	ite	eq
 800a086:	2301      	moveq	r3, #1
 800a088:	2300      	movne	r3, #0
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	429a      	cmp	r2, r3
 800a092:	d0a0      	beq.n	8009fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b0a3      	sub	sp, #140	@ 0x8c
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	88fa      	ldrh	r2, [r7, #6]
 800a0b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	88fa      	ldrh	r2, [r7, #6]
 800a0c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0d2:	d10e      	bne.n	800a0f2 <UART_Start_Receive_IT+0x52>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d105      	bne.n	800a0e8 <UART_Start_Receive_IT+0x48>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a0e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a0e6:	e02d      	b.n	800a144 <UART_Start_Receive_IT+0xa4>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	22ff      	movs	r2, #255	@ 0xff
 800a0ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a0f0:	e028      	b.n	800a144 <UART_Start_Receive_IT+0xa4>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10d      	bne.n	800a116 <UART_Start_Receive_IT+0x76>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d104      	bne.n	800a10c <UART_Start_Receive_IT+0x6c>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	22ff      	movs	r2, #255	@ 0xff
 800a106:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a10a:	e01b      	b.n	800a144 <UART_Start_Receive_IT+0xa4>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	227f      	movs	r2, #127	@ 0x7f
 800a110:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a114:	e016      	b.n	800a144 <UART_Start_Receive_IT+0xa4>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a11e:	d10d      	bne.n	800a13c <UART_Start_Receive_IT+0x9c>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d104      	bne.n	800a132 <UART_Start_Receive_IT+0x92>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	227f      	movs	r2, #127	@ 0x7f
 800a12c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a130:	e008      	b.n	800a144 <UART_Start_Receive_IT+0xa4>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	223f      	movs	r2, #63	@ 0x3f
 800a136:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a13a:	e003      	b.n	800a144 <UART_Start_Receive_IT+0xa4>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2222      	movs	r2, #34	@ 0x22
 800a150:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3308      	adds	r3, #8
 800a15a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a15e:	e853 3f00 	ldrex	r3, [r3]
 800a162:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a164:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a166:	f043 0301 	orr.w	r3, r3, #1
 800a16a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3308      	adds	r3, #8
 800a174:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a178:	673a      	str	r2, [r7, #112]	@ 0x70
 800a17a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a17e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a186:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e3      	bne.n	800a154 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a194:	d14f      	bne.n	800a236 <UART_Start_Receive_IT+0x196>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a19c:	88fa      	ldrh	r2, [r7, #6]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d349      	bcc.n	800a236 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1aa:	d107      	bne.n	800a1bc <UART_Start_Receive_IT+0x11c>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d103      	bne.n	800a1bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4a47      	ldr	r2, [pc, #284]	@ (800a2d4 <UART_Start_Receive_IT+0x234>)
 800a1b8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a1ba:	e002      	b.n	800a1c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4a46      	ldr	r2, [pc, #280]	@ (800a2d8 <UART_Start_Receive_IT+0x238>)
 800a1c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d01a      	beq.n	800a200 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1d2:	e853 3f00 	ldrex	r3, [r3]
 800a1d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a1d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a1ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1ee:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a1f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a1f4:	e841 2300 	strex	r3, r2, [r1]
 800a1f8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a1fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1e4      	bne.n	800a1ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3308      	adds	r3, #8
 800a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a20a:	e853 3f00 	ldrex	r3, [r3]
 800a20e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a216:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3308      	adds	r3, #8
 800a21e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a220:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a222:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a224:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a228:	e841 2300 	strex	r3, r2, [r1]
 800a22c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a22e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1e5      	bne.n	800a200 <UART_Start_Receive_IT+0x160>
 800a234:	e046      	b.n	800a2c4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a23e:	d107      	bne.n	800a250 <UART_Start_Receive_IT+0x1b0>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d103      	bne.n	800a250 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4a24      	ldr	r2, [pc, #144]	@ (800a2dc <UART_Start_Receive_IT+0x23c>)
 800a24c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a24e:	e002      	b.n	800a256 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	4a23      	ldr	r2, [pc, #140]	@ (800a2e0 <UART_Start_Receive_IT+0x240>)
 800a254:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d019      	beq.n	800a292 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a266:	e853 3f00 	ldrex	r3, [r3]
 800a26a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a272:	677b      	str	r3, [r7, #116]	@ 0x74
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	461a      	mov	r2, r3
 800a27a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a27c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a27e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a280:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a282:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a284:	e841 2300 	strex	r3, r2, [r1]
 800a288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e6      	bne.n	800a25e <UART_Start_Receive_IT+0x1be>
 800a290:	e018      	b.n	800a2c4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	e853 3f00 	ldrex	r3, [r3]
 800a29e:	613b      	str	r3, [r7, #16]
   return(result);
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f043 0320 	orr.w	r3, r3, #32
 800a2a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2b0:	623b      	str	r3, [r7, #32]
 800a2b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b4:	69f9      	ldr	r1, [r7, #28]
 800a2b6:	6a3a      	ldr	r2, [r7, #32]
 800a2b8:	e841 2300 	strex	r3, r2, [r1]
 800a2bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e6      	bne.n	800a292 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	378c      	adds	r7, #140	@ 0x8c
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	0800ab05 	.word	0x0800ab05
 800a2d8:	0800a7a5 	.word	0x0800a7a5
 800a2dc:	0800a5ed 	.word	0x0800a5ed
 800a2e0:	0800a435 	.word	0x0800a435

0800a2e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b095      	sub	sp, #84	@ 0x54
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	461a      	mov	r2, r3
 800a308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a30a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a30c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a310:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a312:	e841 2300 	strex	r3, r2, [r1]
 800a316:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e6      	bne.n	800a2ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	3308      	adds	r3, #8
 800a324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	e853 3f00 	ldrex	r3, [r3]
 800a32c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a334:	f023 0301 	bic.w	r3, r3, #1
 800a338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3308      	adds	r3, #8
 800a340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a342:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a344:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a348:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a34a:	e841 2300 	strex	r3, r2, [r1]
 800a34e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1e3      	bne.n	800a31e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d118      	bne.n	800a390 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	e853 3f00 	ldrex	r3, [r3]
 800a36a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f023 0310 	bic.w	r3, r3, #16
 800a372:	647b      	str	r3, [r7, #68]	@ 0x44
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a37c:	61bb      	str	r3, [r7, #24]
 800a37e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	6979      	ldr	r1, [r7, #20]
 800a382:	69ba      	ldr	r2, [r7, #24]
 800a384:	e841 2300 	strex	r3, r2, [r1]
 800a388:	613b      	str	r3, [r7, #16]
   return(result);
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e6      	bne.n	800a35e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2220      	movs	r2, #32
 800a394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a3a4:	bf00      	nop
 800a3a6:	3754      	adds	r7, #84	@ 0x54
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f7ff f99a 	bl	8009708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3d4:	bf00      	nop
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b088      	sub	sp, #32
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	e853 3f00 	ldrex	r3, [r3]
 800a3f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3f8:	61fb      	str	r3, [r7, #28]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	461a      	mov	r2, r3
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	61bb      	str	r3, [r7, #24]
 800a404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a406:	6979      	ldr	r1, [r7, #20]
 800a408:	69ba      	ldr	r2, [r7, #24]
 800a40a:	e841 2300 	strex	r3, r2, [r1]
 800a40e:	613b      	str	r3, [r7, #16]
   return(result);
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1e6      	bne.n	800a3e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2220      	movs	r2, #32
 800a41a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff f965 	bl	80096f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a42a:	bf00      	nop
 800a42c:	3720      	adds	r7, #32
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
	...

0800a434 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b09c      	sub	sp, #112	@ 0x70
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a442:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a44c:	2b22      	cmp	r3, #34	@ 0x22
 800a44e:	f040 80be 	bne.w	800a5ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a458:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a45c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a460:	b2d9      	uxtb	r1, r3
 800a462:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a466:	b2da      	uxtb	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a46c:	400a      	ands	r2, r1
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a482:	b29b      	uxth	r3, r3
 800a484:	3b01      	subs	r3, #1
 800a486:	b29a      	uxth	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a494:	b29b      	uxth	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	f040 80a1 	bne.w	800a5de <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a4aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a4c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4c2:	e841 2300 	strex	r3, r2, [r1]
 800a4c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a4c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1e6      	bne.n	800a49c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d8:	e853 3f00 	ldrex	r3, [r3]
 800a4dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4e0:	f023 0301 	bic.w	r3, r3, #1
 800a4e4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a4ee:	647a      	str	r2, [r7, #68]	@ 0x44
 800a4f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4f6:	e841 2300 	strex	r3, r2, [r1]
 800a4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1e5      	bne.n	800a4ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2220      	movs	r2, #32
 800a506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a33      	ldr	r2, [pc, #204]	@ (800a5e8 <UART_RxISR_8BIT+0x1b4>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d01f      	beq.n	800a560 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d018      	beq.n	800a560 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	623b      	str	r3, [r7, #32]
   return(result);
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a542:	663b      	str	r3, [r7, #96]	@ 0x60
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	461a      	mov	r2, r3
 800a54a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a54c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a54e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a554:	e841 2300 	strex	r3, r2, [r1]
 800a558:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1e6      	bne.n	800a52e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a564:	2b01      	cmp	r3, #1
 800a566:	d12e      	bne.n	800a5c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	e853 3f00 	ldrex	r3, [r3]
 800a57a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f023 0310 	bic.w	r3, r3, #16
 800a582:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a58c:	61fb      	str	r3, [r7, #28]
 800a58e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a590:	69b9      	ldr	r1, [r7, #24]
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	e841 2300 	strex	r3, r2, [r1]
 800a598:	617b      	str	r3, [r7, #20]
   return(result);
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1e6      	bne.n	800a56e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	69db      	ldr	r3, [r3, #28]
 800a5a6:	f003 0310 	and.w	r3, r3, #16
 800a5aa:	2b10      	cmp	r3, #16
 800a5ac:	d103      	bne.n	800a5b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2210      	movs	r2, #16
 800a5b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a5bc:	4619      	mov	r1, r3
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7ff f8ac 	bl	800971c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5c4:	e00b      	b.n	800a5de <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7f7 ff9a 	bl	8002500 <HAL_UART_RxCpltCallback>
}
 800a5cc:	e007      	b.n	800a5de <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	699a      	ldr	r2, [r3, #24]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f042 0208 	orr.w	r2, r2, #8
 800a5dc:	619a      	str	r2, [r3, #24]
}
 800a5de:	bf00      	nop
 800a5e0:	3770      	adds	r7, #112	@ 0x70
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	40008000 	.word	0x40008000

0800a5ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b09c      	sub	sp, #112	@ 0x70
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a5fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a604:	2b22      	cmp	r3, #34	@ 0x22
 800a606:	f040 80be 	bne.w	800a786 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a610:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a618:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a61a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a61e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a622:	4013      	ands	r3, r2
 800a624:	b29a      	uxth	r2, r3
 800a626:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a628:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a62e:	1c9a      	adds	r2, r3, #2
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	3b01      	subs	r3, #1
 800a63e:	b29a      	uxth	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f040 80a1 	bne.w	800a796 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a65c:	e853 3f00 	ldrex	r3, [r3]
 800a660:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a668:	667b      	str	r3, [r7, #100]	@ 0x64
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a672:	657b      	str	r3, [r7, #84]	@ 0x54
 800a674:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a676:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a678:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a67a:	e841 2300 	strex	r3, r2, [r1]
 800a67e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1e6      	bne.n	800a654 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3308      	adds	r3, #8
 800a68c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a690:	e853 3f00 	ldrex	r3, [r3]
 800a694:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a698:	f023 0301 	bic.w	r3, r3, #1
 800a69c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a6a6:	643a      	str	r2, [r7, #64]	@ 0x40
 800a6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6ae:	e841 2300 	strex	r3, r2, [r1]
 800a6b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1e5      	bne.n	800a686 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2220      	movs	r2, #32
 800a6be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a33      	ldr	r2, [pc, #204]	@ (800a7a0 <UART_RxISR_16BIT+0x1b4>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d01f      	beq.n	800a718 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d018      	beq.n	800a718 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	e853 3f00 	ldrex	r3, [r3]
 800a6f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a6fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	461a      	mov	r2, r3
 800a702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a706:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a708:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a70a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a70c:	e841 2300 	strex	r3, r2, [r1]
 800a710:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1e6      	bne.n	800a6e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d12e      	bne.n	800a77e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	e853 3f00 	ldrex	r3, [r3]
 800a732:	60bb      	str	r3, [r7, #8]
   return(result);
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	f023 0310 	bic.w	r3, r3, #16
 800a73a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a744:	61bb      	str	r3, [r7, #24]
 800a746:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a748:	6979      	ldr	r1, [r7, #20]
 800a74a:	69ba      	ldr	r2, [r7, #24]
 800a74c:	e841 2300 	strex	r3, r2, [r1]
 800a750:	613b      	str	r3, [r7, #16]
   return(result);
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1e6      	bne.n	800a726 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	f003 0310 	and.w	r3, r3, #16
 800a762:	2b10      	cmp	r3, #16
 800a764:	d103      	bne.n	800a76e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2210      	movs	r2, #16
 800a76c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a774:	4619      	mov	r1, r3
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7fe ffd0 	bl	800971c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a77c:	e00b      	b.n	800a796 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7f7 febe 	bl	8002500 <HAL_UART_RxCpltCallback>
}
 800a784:	e007      	b.n	800a796 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	699a      	ldr	r2, [r3, #24]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f042 0208 	orr.w	r2, r2, #8
 800a794:	619a      	str	r2, [r3, #24]
}
 800a796:	bf00      	nop
 800a798:	3770      	adds	r7, #112	@ 0x70
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	40008000 	.word	0x40008000

0800a7a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b0ac      	sub	sp, #176	@ 0xb0
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	69db      	ldr	r3, [r3, #28]
 800a7bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7da:	2b22      	cmp	r3, #34	@ 0x22
 800a7dc:	f040 8182 	bne.w	800aae4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a7e6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7ea:	e125      	b.n	800aa38 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a7f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a7fa:	b2d9      	uxtb	r1, r3
 800a7fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a800:	b2da      	uxtb	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a806:	400a      	ands	r2, r1
 800a808:	b2d2      	uxtb	r2, r2
 800a80a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a810:	1c5a      	adds	r2, r3, #1
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	3b01      	subs	r3, #1
 800a820:	b29a      	uxth	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a836:	f003 0307 	and.w	r3, r3, #7
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d053      	beq.n	800a8e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a83e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a842:	f003 0301 	and.w	r3, r3, #1
 800a846:	2b00      	cmp	r3, #0
 800a848:	d011      	beq.n	800a86e <UART_RxISR_8BIT_FIFOEN+0xca>
 800a84a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a84e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00b      	beq.n	800a86e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2201      	movs	r2, #1
 800a85c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a864:	f043 0201 	orr.w	r2, r3, #1
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a86e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a872:	f003 0302 	and.w	r3, r3, #2
 800a876:	2b00      	cmp	r3, #0
 800a878:	d011      	beq.n	800a89e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a87a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00b      	beq.n	800a89e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2202      	movs	r2, #2
 800a88c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a894:	f043 0204 	orr.w	r2, r3, #4
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a89e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8a2:	f003 0304 	and.w	r3, r3, #4
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d011      	beq.n	800a8ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a8aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00b      	beq.n	800a8ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2204      	movs	r2, #4
 800a8bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8c4:	f043 0202 	orr.w	r2, r3, #2
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d006      	beq.n	800a8e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7fe ff15 	bl	8009708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f040 80a2 	bne.w	800aa38 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8fc:	e853 3f00 	ldrex	r3, [r3]
 800a900:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	461a      	mov	r2, r3
 800a912:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a916:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a918:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a91c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a91e:	e841 2300 	strex	r3, r2, [r1]
 800a922:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a924:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1e4      	bne.n	800a8f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3308      	adds	r3, #8
 800a930:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a934:	e853 3f00 	ldrex	r3, [r3]
 800a938:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a93a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a93c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a940:	f023 0301 	bic.w	r3, r3, #1
 800a944:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3308      	adds	r3, #8
 800a94e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a952:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a954:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a956:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a958:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a95a:	e841 2300 	strex	r3, r2, [r1]
 800a95e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a960:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1e1      	bne.n	800a92a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2220      	movs	r2, #32
 800a96a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a5f      	ldr	r2, [pc, #380]	@ (800aafc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d021      	beq.n	800a9c8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d01a      	beq.n	800a9c8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a99a:	e853 3f00 	ldrex	r3, [r3]
 800a99e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a9a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a9a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a9b4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9b6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a9ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a9bc:	e841 2300 	strex	r3, r2, [r1]
 800a9c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a9c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1e4      	bne.n	800a992 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d130      	bne.n	800aa32 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9de:	e853 3f00 	ldrex	r3, [r3]
 800a9e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e6:	f023 0310 	bic.w	r3, r3, #16
 800a9ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a9f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a9fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa00:	e841 2300 	strex	r3, r2, [r1]
 800aa04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1e4      	bne.n	800a9d6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	f003 0310 	and.w	r3, r3, #16
 800aa16:	2b10      	cmp	r3, #16
 800aa18:	d103      	bne.n	800aa22 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2210      	movs	r2, #16
 800aa20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa28:	4619      	mov	r1, r3
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7fe fe76 	bl	800971c <HAL_UARTEx_RxEventCallback>
 800aa30:	e002      	b.n	800aa38 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7f7 fd64 	bl	8002500 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa38:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d006      	beq.n	800aa4e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800aa40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa44:	f003 0320 	and.w	r3, r3, #32
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f47f aecf 	bne.w	800a7ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa54:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aa58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d049      	beq.n	800aaf4 <UART_RxISR_8BIT_FIFOEN+0x350>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aa66:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d242      	bcs.n	800aaf4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3308      	adds	r3, #8
 800aa74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa76:	6a3b      	ldr	r3, [r7, #32]
 800aa78:	e853 3f00 	ldrex	r3, [r3]
 800aa7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800aa92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa9a:	e841 2300 	strex	r3, r2, [r1]
 800aa9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e3      	bne.n	800aa6e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a15      	ldr	r2, [pc, #84]	@ (800ab00 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800aaaa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	e853 3f00 	ldrex	r3, [r3]
 800aab8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f043 0320 	orr.w	r3, r3, #32
 800aac0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	461a      	mov	r2, r3
 800aaca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aace:	61bb      	str	r3, [r7, #24]
 800aad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	6979      	ldr	r1, [r7, #20]
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	613b      	str	r3, [r7, #16]
   return(result);
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e4      	bne.n	800aaac <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aae2:	e007      	b.n	800aaf4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	699a      	ldr	r2, [r3, #24]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0208 	orr.w	r2, r2, #8
 800aaf2:	619a      	str	r2, [r3, #24]
}
 800aaf4:	bf00      	nop
 800aaf6:	37b0      	adds	r7, #176	@ 0xb0
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	40008000 	.word	0x40008000
 800ab00:	0800a435 	.word	0x0800a435

0800ab04 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b0ae      	sub	sp, #184	@ 0xb8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ab12:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab3a:	2b22      	cmp	r3, #34	@ 0x22
 800ab3c:	f040 8186 	bne.w	800ae4c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ab46:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab4a:	e129      	b.n	800ada0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab52:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ab5e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ab62:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ab66:	4013      	ands	r3, r2
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ab6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab74:	1c9a      	adds	r2, r3, #2
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	3b01      	subs	r3, #1
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	69db      	ldr	r3, [r3, #28]
 800ab92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ab9a:	f003 0307 	and.w	r3, r3, #7
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d053      	beq.n	800ac4a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d011      	beq.n	800abd2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800abae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00b      	beq.n	800abd2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2201      	movs	r2, #1
 800abc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abc8:	f043 0201 	orr.w	r2, r3, #1
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800abd6:	f003 0302 	and.w	r3, r3, #2
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d011      	beq.n	800ac02 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800abde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00b      	beq.n	800ac02 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2202      	movs	r2, #2
 800abf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abf8:	f043 0204 	orr.w	r2, r3, #4
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ac06:	f003 0304 	and.w	r3, r3, #4
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d011      	beq.n	800ac32 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ac0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00b      	beq.n	800ac32 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2204      	movs	r2, #4
 800ac20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac28:	f043 0202 	orr.w	r2, r3, #2
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d006      	beq.n	800ac4a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7fe fd63 	bl	8009708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f040 80a4 	bne.w	800ada0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac60:	e853 3f00 	ldrex	r3, [r3]
 800ac64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ac66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	461a      	mov	r2, r3
 800ac76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ac82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ac86:	e841 2300 	strex	r3, r2, [r1]
 800ac8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ac8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1e2      	bne.n	800ac58 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3308      	adds	r3, #8
 800ac98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac9c:	e853 3f00 	ldrex	r3, [r3]
 800aca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aca2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aca8:	f023 0301 	bic.w	r3, r3, #1
 800acac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	3308      	adds	r3, #8
 800acb6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800acba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800acbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800acc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800acc2:	e841 2300 	strex	r3, r2, [r1]
 800acc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800acc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1e1      	bne.n	800ac92 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2220      	movs	r2, #32
 800acd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a5f      	ldr	r2, [pc, #380]	@ (800ae64 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d021      	beq.n	800ad30 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d01a      	beq.n	800ad30 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad02:	e853 3f00 	ldrex	r3, [r3]
 800ad06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ad1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad1e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ad22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad24:	e841 2300 	strex	r3, r2, [r1]
 800ad28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1e4      	bne.n	800acfa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d130      	bne.n	800ad9a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad46:	e853 3f00 	ldrex	r3, [r3]
 800ad4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad4e:	f023 0310 	bic.w	r3, r3, #16
 800ad52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad60:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad68:	e841 2300 	strex	r3, r2, [r1]
 800ad6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1e4      	bne.n	800ad3e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	f003 0310 	and.w	r3, r3, #16
 800ad7e:	2b10      	cmp	r3, #16
 800ad80:	d103      	bne.n	800ad8a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2210      	movs	r2, #16
 800ad88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7fe fcc2 	bl	800971c <HAL_UARTEx_RxEventCallback>
 800ad98:	e002      	b.n	800ada0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7f7 fbb0 	bl	8002500 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ada0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d006      	beq.n	800adb6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800ada8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800adac:	f003 0320 	and.w	r3, r3, #32
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f47f aecb 	bne.w	800ab4c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800adbc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800adc0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d049      	beq.n	800ae5c <UART_RxISR_16BIT_FIFOEN+0x358>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800adce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800add2:	429a      	cmp	r2, r3
 800add4:	d242      	bcs.n	800ae5c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	3308      	adds	r3, #8
 800addc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	623b      	str	r3, [r7, #32]
   return(result);
 800ade6:	6a3b      	ldr	r3, [r7, #32]
 800ade8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800adec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	3308      	adds	r3, #8
 800adf6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800adfa:	633a      	str	r2, [r7, #48]	@ 0x30
 800adfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae02:	e841 2300 	strex	r3, r2, [r1]
 800ae06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1e3      	bne.n	800add6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a15      	ldr	r2, [pc, #84]	@ (800ae68 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ae12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	e853 3f00 	ldrex	r3, [r3]
 800ae20:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f043 0320 	orr.w	r3, r3, #32
 800ae28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	461a      	mov	r2, r3
 800ae32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae36:	61fb      	str	r3, [r7, #28]
 800ae38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	69b9      	ldr	r1, [r7, #24]
 800ae3c:	69fa      	ldr	r2, [r7, #28]
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	617b      	str	r3, [r7, #20]
   return(result);
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1e4      	bne.n	800ae14 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae4a:	e007      	b.n	800ae5c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	699a      	ldr	r2, [r3, #24]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f042 0208 	orr.w	r2, r2, #8
 800ae5a:	619a      	str	r2, [r3, #24]
}
 800ae5c:	bf00      	nop
 800ae5e:	37b8      	adds	r7, #184	@ 0xb8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	40008000 	.word	0x40008000
 800ae68:	0800a5ed 	.word	0x0800a5ed

0800ae6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae74:	bf00      	nop
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae9c:	bf00      	nop
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d101      	bne.n	800aebe <HAL_UARTEx_DisableFifoMode+0x16>
 800aeba:	2302      	movs	r3, #2
 800aebc:	e027      	b.n	800af0e <HAL_UARTEx_DisableFifoMode+0x66>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2224      	movs	r2, #36	@ 0x24
 800aeca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f022 0201 	bic.w	r2, r2, #1
 800aee4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aeec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2220      	movs	r2, #32
 800af00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr

0800af1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b084      	sub	sp, #16
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d101      	bne.n	800af32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af2e:	2302      	movs	r3, #2
 800af30:	e02d      	b.n	800af8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2224      	movs	r2, #36	@ 0x24
 800af3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f022 0201 	bic.w	r2, r2, #1
 800af58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	430a      	orrs	r2, r1
 800af6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f850 	bl	800b014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2220      	movs	r2, #32
 800af80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b084      	sub	sp, #16
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d101      	bne.n	800afae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afaa:	2302      	movs	r3, #2
 800afac:	e02d      	b.n	800b00a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2201      	movs	r2, #1
 800afb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2224      	movs	r2, #36	@ 0x24
 800afba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f022 0201 	bic.w	r2, r2, #1
 800afd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	430a      	orrs	r2, r1
 800afe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f812 	bl	800b014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2220      	movs	r2, #32
 800affc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
	...

0800b014 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b020:	2b00      	cmp	r3, #0
 800b022:	d108      	bne.n	800b036 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b034:	e031      	b.n	800b09a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b036:	2308      	movs	r3, #8
 800b038:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b03a:	2308      	movs	r3, #8
 800b03c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	0e5b      	lsrs	r3, r3, #25
 800b046:	b2db      	uxtb	r3, r3
 800b048:	f003 0307 	and.w	r3, r3, #7
 800b04c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	0f5b      	lsrs	r3, r3, #29
 800b056:	b2db      	uxtb	r3, r3
 800b058:	f003 0307 	and.w	r3, r3, #7
 800b05c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b05e:	7bbb      	ldrb	r3, [r7, #14]
 800b060:	7b3a      	ldrb	r2, [r7, #12]
 800b062:	4911      	ldr	r1, [pc, #68]	@ (800b0a8 <UARTEx_SetNbDataToProcess+0x94>)
 800b064:	5c8a      	ldrb	r2, [r1, r2]
 800b066:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b06a:	7b3a      	ldrb	r2, [r7, #12]
 800b06c:	490f      	ldr	r1, [pc, #60]	@ (800b0ac <UARTEx_SetNbDataToProcess+0x98>)
 800b06e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b070:	fb93 f3f2 	sdiv	r3, r3, r2
 800b074:	b29a      	uxth	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	7b7a      	ldrb	r2, [r7, #13]
 800b080:	4909      	ldr	r1, [pc, #36]	@ (800b0a8 <UARTEx_SetNbDataToProcess+0x94>)
 800b082:	5c8a      	ldrb	r2, [r1, r2]
 800b084:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b088:	7b7a      	ldrb	r2, [r7, #13]
 800b08a:	4908      	ldr	r1, [pc, #32]	@ (800b0ac <UARTEx_SetNbDataToProcess+0x98>)
 800b08c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b08e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b092:	b29a      	uxth	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b09a:	bf00      	nop
 800b09c:	3714      	adds	r7, #20
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	0800f468 	.word	0x0800f468
 800b0ac:	0800f470 	.word	0x0800f470

0800b0b0 <atof>:
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	f000 be05 	b.w	800bcc0 <strtod>

0800b0b6 <sulp>:
 800b0b6:	b570      	push	{r4, r5, r6, lr}
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	460d      	mov	r5, r1
 800b0bc:	ec45 4b10 	vmov	d0, r4, r5
 800b0c0:	4616      	mov	r6, r2
 800b0c2:	f003 fab9 	bl	800e638 <__ulp>
 800b0c6:	ec51 0b10 	vmov	r0, r1, d0
 800b0ca:	b17e      	cbz	r6, 800b0ec <sulp+0x36>
 800b0cc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b0d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	dd09      	ble.n	800b0ec <sulp+0x36>
 800b0d8:	051b      	lsls	r3, r3, #20
 800b0da:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b0de:	2400      	movs	r4, #0
 800b0e0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b0e4:	4622      	mov	r2, r4
 800b0e6:	462b      	mov	r3, r5
 800b0e8:	f7f5 fabe 	bl	8000668 <__aeabi_dmul>
 800b0ec:	ec41 0b10 	vmov	d0, r0, r1
 800b0f0:	bd70      	pop	{r4, r5, r6, pc}
 800b0f2:	0000      	movs	r0, r0
 800b0f4:	0000      	movs	r0, r0
	...

0800b0f8 <_strtod_l>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	b09f      	sub	sp, #124	@ 0x7c
 800b0fe:	460c      	mov	r4, r1
 800b100:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b102:	2200      	movs	r2, #0
 800b104:	921a      	str	r2, [sp, #104]	@ 0x68
 800b106:	9005      	str	r0, [sp, #20]
 800b108:	f04f 0a00 	mov.w	sl, #0
 800b10c:	f04f 0b00 	mov.w	fp, #0
 800b110:	460a      	mov	r2, r1
 800b112:	9219      	str	r2, [sp, #100]	@ 0x64
 800b114:	7811      	ldrb	r1, [r2, #0]
 800b116:	292b      	cmp	r1, #43	@ 0x2b
 800b118:	d04a      	beq.n	800b1b0 <_strtod_l+0xb8>
 800b11a:	d838      	bhi.n	800b18e <_strtod_l+0x96>
 800b11c:	290d      	cmp	r1, #13
 800b11e:	d832      	bhi.n	800b186 <_strtod_l+0x8e>
 800b120:	2908      	cmp	r1, #8
 800b122:	d832      	bhi.n	800b18a <_strtod_l+0x92>
 800b124:	2900      	cmp	r1, #0
 800b126:	d03b      	beq.n	800b1a0 <_strtod_l+0xa8>
 800b128:	2200      	movs	r2, #0
 800b12a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b12c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b12e:	782a      	ldrb	r2, [r5, #0]
 800b130:	2a30      	cmp	r2, #48	@ 0x30
 800b132:	f040 80b3 	bne.w	800b29c <_strtod_l+0x1a4>
 800b136:	786a      	ldrb	r2, [r5, #1]
 800b138:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b13c:	2a58      	cmp	r2, #88	@ 0x58
 800b13e:	d16e      	bne.n	800b21e <_strtod_l+0x126>
 800b140:	9302      	str	r3, [sp, #8]
 800b142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	ab1a      	add	r3, sp, #104	@ 0x68
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	4a8e      	ldr	r2, [pc, #568]	@ (800b384 <_strtod_l+0x28c>)
 800b14c:	9805      	ldr	r0, [sp, #20]
 800b14e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b150:	a919      	add	r1, sp, #100	@ 0x64
 800b152:	f002 fb63 	bl	800d81c <__gethex>
 800b156:	f010 060f 	ands.w	r6, r0, #15
 800b15a:	4604      	mov	r4, r0
 800b15c:	d005      	beq.n	800b16a <_strtod_l+0x72>
 800b15e:	2e06      	cmp	r6, #6
 800b160:	d128      	bne.n	800b1b4 <_strtod_l+0xbc>
 800b162:	3501      	adds	r5, #1
 800b164:	2300      	movs	r3, #0
 800b166:	9519      	str	r5, [sp, #100]	@ 0x64
 800b168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b16a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f040 858e 	bne.w	800bc8e <_strtod_l+0xb96>
 800b172:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b174:	b1cb      	cbz	r3, 800b1aa <_strtod_l+0xb2>
 800b176:	4652      	mov	r2, sl
 800b178:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b17c:	ec43 2b10 	vmov	d0, r2, r3
 800b180:	b01f      	add	sp, #124	@ 0x7c
 800b182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b186:	2920      	cmp	r1, #32
 800b188:	d1ce      	bne.n	800b128 <_strtod_l+0x30>
 800b18a:	3201      	adds	r2, #1
 800b18c:	e7c1      	b.n	800b112 <_strtod_l+0x1a>
 800b18e:	292d      	cmp	r1, #45	@ 0x2d
 800b190:	d1ca      	bne.n	800b128 <_strtod_l+0x30>
 800b192:	2101      	movs	r1, #1
 800b194:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b196:	1c51      	adds	r1, r2, #1
 800b198:	9119      	str	r1, [sp, #100]	@ 0x64
 800b19a:	7852      	ldrb	r2, [r2, #1]
 800b19c:	2a00      	cmp	r2, #0
 800b19e:	d1c5      	bne.n	800b12c <_strtod_l+0x34>
 800b1a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b1a2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f040 8570 	bne.w	800bc8a <_strtod_l+0xb92>
 800b1aa:	4652      	mov	r2, sl
 800b1ac:	465b      	mov	r3, fp
 800b1ae:	e7e5      	b.n	800b17c <_strtod_l+0x84>
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	e7ef      	b.n	800b194 <_strtod_l+0x9c>
 800b1b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b1b6:	b13a      	cbz	r2, 800b1c8 <_strtod_l+0xd0>
 800b1b8:	2135      	movs	r1, #53	@ 0x35
 800b1ba:	a81c      	add	r0, sp, #112	@ 0x70
 800b1bc:	f003 fb36 	bl	800e82c <__copybits>
 800b1c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1c2:	9805      	ldr	r0, [sp, #20]
 800b1c4:	f002 ff04 	bl	800dfd0 <_Bfree>
 800b1c8:	3e01      	subs	r6, #1
 800b1ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b1cc:	2e04      	cmp	r6, #4
 800b1ce:	d806      	bhi.n	800b1de <_strtod_l+0xe6>
 800b1d0:	e8df f006 	tbb	[pc, r6]
 800b1d4:	201d0314 	.word	0x201d0314
 800b1d8:	14          	.byte	0x14
 800b1d9:	00          	.byte	0x00
 800b1da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b1de:	05e1      	lsls	r1, r4, #23
 800b1e0:	bf48      	it	mi
 800b1e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b1e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1ea:	0d1b      	lsrs	r3, r3, #20
 800b1ec:	051b      	lsls	r3, r3, #20
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1bb      	bne.n	800b16a <_strtod_l+0x72>
 800b1f2:	f001 fbaf 	bl	800c954 <__errno>
 800b1f6:	2322      	movs	r3, #34	@ 0x22
 800b1f8:	6003      	str	r3, [r0, #0]
 800b1fa:	e7b6      	b.n	800b16a <_strtod_l+0x72>
 800b1fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b200:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b204:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b208:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b20c:	e7e7      	b.n	800b1de <_strtod_l+0xe6>
 800b20e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b38c <_strtod_l+0x294>
 800b212:	e7e4      	b.n	800b1de <_strtod_l+0xe6>
 800b214:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b218:	f04f 3aff 	mov.w	sl, #4294967295
 800b21c:	e7df      	b.n	800b1de <_strtod_l+0xe6>
 800b21e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b220:	1c5a      	adds	r2, r3, #1
 800b222:	9219      	str	r2, [sp, #100]	@ 0x64
 800b224:	785b      	ldrb	r3, [r3, #1]
 800b226:	2b30      	cmp	r3, #48	@ 0x30
 800b228:	d0f9      	beq.n	800b21e <_strtod_l+0x126>
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d09d      	beq.n	800b16a <_strtod_l+0x72>
 800b22e:	2301      	movs	r3, #1
 800b230:	9309      	str	r3, [sp, #36]	@ 0x24
 800b232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b234:	930c      	str	r3, [sp, #48]	@ 0x30
 800b236:	2300      	movs	r3, #0
 800b238:	9308      	str	r3, [sp, #32]
 800b23a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b23c:	461f      	mov	r7, r3
 800b23e:	220a      	movs	r2, #10
 800b240:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b242:	7805      	ldrb	r5, [r0, #0]
 800b244:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b248:	b2d9      	uxtb	r1, r3
 800b24a:	2909      	cmp	r1, #9
 800b24c:	d928      	bls.n	800b2a0 <_strtod_l+0x1a8>
 800b24e:	494e      	ldr	r1, [pc, #312]	@ (800b388 <_strtod_l+0x290>)
 800b250:	2201      	movs	r2, #1
 800b252:	f001 fac6 	bl	800c7e2 <strncmp>
 800b256:	2800      	cmp	r0, #0
 800b258:	d032      	beq.n	800b2c0 <_strtod_l+0x1c8>
 800b25a:	2000      	movs	r0, #0
 800b25c:	462a      	mov	r2, r5
 800b25e:	4681      	mov	r9, r0
 800b260:	463d      	mov	r5, r7
 800b262:	4603      	mov	r3, r0
 800b264:	2a65      	cmp	r2, #101	@ 0x65
 800b266:	d001      	beq.n	800b26c <_strtod_l+0x174>
 800b268:	2a45      	cmp	r2, #69	@ 0x45
 800b26a:	d114      	bne.n	800b296 <_strtod_l+0x19e>
 800b26c:	b91d      	cbnz	r5, 800b276 <_strtod_l+0x17e>
 800b26e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b270:	4302      	orrs	r2, r0
 800b272:	d095      	beq.n	800b1a0 <_strtod_l+0xa8>
 800b274:	2500      	movs	r5, #0
 800b276:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b278:	1c62      	adds	r2, r4, #1
 800b27a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b27c:	7862      	ldrb	r2, [r4, #1]
 800b27e:	2a2b      	cmp	r2, #43	@ 0x2b
 800b280:	d077      	beq.n	800b372 <_strtod_l+0x27a>
 800b282:	2a2d      	cmp	r2, #45	@ 0x2d
 800b284:	d07b      	beq.n	800b37e <_strtod_l+0x286>
 800b286:	f04f 0c00 	mov.w	ip, #0
 800b28a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b28e:	2909      	cmp	r1, #9
 800b290:	f240 8082 	bls.w	800b398 <_strtod_l+0x2a0>
 800b294:	9419      	str	r4, [sp, #100]	@ 0x64
 800b296:	f04f 0800 	mov.w	r8, #0
 800b29a:	e0a2      	b.n	800b3e2 <_strtod_l+0x2ea>
 800b29c:	2300      	movs	r3, #0
 800b29e:	e7c7      	b.n	800b230 <_strtod_l+0x138>
 800b2a0:	2f08      	cmp	r7, #8
 800b2a2:	bfd5      	itete	le
 800b2a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b2a6:	9908      	ldrgt	r1, [sp, #32]
 800b2a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b2ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b2b0:	f100 0001 	add.w	r0, r0, #1
 800b2b4:	bfd4      	ite	le
 800b2b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b2b8:	9308      	strgt	r3, [sp, #32]
 800b2ba:	3701      	adds	r7, #1
 800b2bc:	9019      	str	r0, [sp, #100]	@ 0x64
 800b2be:	e7bf      	b.n	800b240 <_strtod_l+0x148>
 800b2c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b2c2:	1c5a      	adds	r2, r3, #1
 800b2c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2c6:	785a      	ldrb	r2, [r3, #1]
 800b2c8:	b37f      	cbz	r7, 800b32a <_strtod_l+0x232>
 800b2ca:	4681      	mov	r9, r0
 800b2cc:	463d      	mov	r5, r7
 800b2ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b2d2:	2b09      	cmp	r3, #9
 800b2d4:	d912      	bls.n	800b2fc <_strtod_l+0x204>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e7c4      	b.n	800b264 <_strtod_l+0x16c>
 800b2da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b2dc:	1c5a      	adds	r2, r3, #1
 800b2de:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2e0:	785a      	ldrb	r2, [r3, #1]
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	2a30      	cmp	r2, #48	@ 0x30
 800b2e6:	d0f8      	beq.n	800b2da <_strtod_l+0x1e2>
 800b2e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b2ec:	2b08      	cmp	r3, #8
 800b2ee:	f200 84d3 	bhi.w	800bc98 <_strtod_l+0xba0>
 800b2f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b2f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b2f6:	4681      	mov	r9, r0
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	3a30      	subs	r2, #48	@ 0x30
 800b2fe:	f100 0301 	add.w	r3, r0, #1
 800b302:	d02a      	beq.n	800b35a <_strtod_l+0x262>
 800b304:	4499      	add	r9, r3
 800b306:	eb00 0c05 	add.w	ip, r0, r5
 800b30a:	462b      	mov	r3, r5
 800b30c:	210a      	movs	r1, #10
 800b30e:	4563      	cmp	r3, ip
 800b310:	d10d      	bne.n	800b32e <_strtod_l+0x236>
 800b312:	1c69      	adds	r1, r5, #1
 800b314:	4401      	add	r1, r0
 800b316:	4428      	add	r0, r5
 800b318:	2808      	cmp	r0, #8
 800b31a:	dc16      	bgt.n	800b34a <_strtod_l+0x252>
 800b31c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b31e:	230a      	movs	r3, #10
 800b320:	fb03 2300 	mla	r3, r3, r0, r2
 800b324:	930a      	str	r3, [sp, #40]	@ 0x28
 800b326:	2300      	movs	r3, #0
 800b328:	e018      	b.n	800b35c <_strtod_l+0x264>
 800b32a:	4638      	mov	r0, r7
 800b32c:	e7da      	b.n	800b2e4 <_strtod_l+0x1ec>
 800b32e:	2b08      	cmp	r3, #8
 800b330:	f103 0301 	add.w	r3, r3, #1
 800b334:	dc03      	bgt.n	800b33e <_strtod_l+0x246>
 800b336:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b338:	434e      	muls	r6, r1
 800b33a:	960a      	str	r6, [sp, #40]	@ 0x28
 800b33c:	e7e7      	b.n	800b30e <_strtod_l+0x216>
 800b33e:	2b10      	cmp	r3, #16
 800b340:	bfde      	ittt	le
 800b342:	9e08      	ldrle	r6, [sp, #32]
 800b344:	434e      	mulle	r6, r1
 800b346:	9608      	strle	r6, [sp, #32]
 800b348:	e7e1      	b.n	800b30e <_strtod_l+0x216>
 800b34a:	280f      	cmp	r0, #15
 800b34c:	dceb      	bgt.n	800b326 <_strtod_l+0x22e>
 800b34e:	9808      	ldr	r0, [sp, #32]
 800b350:	230a      	movs	r3, #10
 800b352:	fb03 2300 	mla	r3, r3, r0, r2
 800b356:	9308      	str	r3, [sp, #32]
 800b358:	e7e5      	b.n	800b326 <_strtod_l+0x22e>
 800b35a:	4629      	mov	r1, r5
 800b35c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b35e:	1c50      	adds	r0, r2, #1
 800b360:	9019      	str	r0, [sp, #100]	@ 0x64
 800b362:	7852      	ldrb	r2, [r2, #1]
 800b364:	4618      	mov	r0, r3
 800b366:	460d      	mov	r5, r1
 800b368:	e7b1      	b.n	800b2ce <_strtod_l+0x1d6>
 800b36a:	f04f 0900 	mov.w	r9, #0
 800b36e:	2301      	movs	r3, #1
 800b370:	e77d      	b.n	800b26e <_strtod_l+0x176>
 800b372:	f04f 0c00 	mov.w	ip, #0
 800b376:	1ca2      	adds	r2, r4, #2
 800b378:	9219      	str	r2, [sp, #100]	@ 0x64
 800b37a:	78a2      	ldrb	r2, [r4, #2]
 800b37c:	e785      	b.n	800b28a <_strtod_l+0x192>
 800b37e:	f04f 0c01 	mov.w	ip, #1
 800b382:	e7f8      	b.n	800b376 <_strtod_l+0x27e>
 800b384:	0800f490 	.word	0x0800f490
 800b388:	0800f478 	.word	0x0800f478
 800b38c:	7ff00000 	.word	0x7ff00000
 800b390:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b392:	1c51      	adds	r1, r2, #1
 800b394:	9119      	str	r1, [sp, #100]	@ 0x64
 800b396:	7852      	ldrb	r2, [r2, #1]
 800b398:	2a30      	cmp	r2, #48	@ 0x30
 800b39a:	d0f9      	beq.n	800b390 <_strtod_l+0x298>
 800b39c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b3a0:	2908      	cmp	r1, #8
 800b3a2:	f63f af78 	bhi.w	800b296 <_strtod_l+0x19e>
 800b3a6:	3a30      	subs	r2, #48	@ 0x30
 800b3a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b3ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b3ae:	f04f 080a 	mov.w	r8, #10
 800b3b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b3b4:	1c56      	adds	r6, r2, #1
 800b3b6:	9619      	str	r6, [sp, #100]	@ 0x64
 800b3b8:	7852      	ldrb	r2, [r2, #1]
 800b3ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b3be:	f1be 0f09 	cmp.w	lr, #9
 800b3c2:	d939      	bls.n	800b438 <_strtod_l+0x340>
 800b3c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b3c6:	1a76      	subs	r6, r6, r1
 800b3c8:	2e08      	cmp	r6, #8
 800b3ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b3ce:	dc03      	bgt.n	800b3d8 <_strtod_l+0x2e0>
 800b3d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b3d2:	4588      	cmp	r8, r1
 800b3d4:	bfa8      	it	ge
 800b3d6:	4688      	movge	r8, r1
 800b3d8:	f1bc 0f00 	cmp.w	ip, #0
 800b3dc:	d001      	beq.n	800b3e2 <_strtod_l+0x2ea>
 800b3de:	f1c8 0800 	rsb	r8, r8, #0
 800b3e2:	2d00      	cmp	r5, #0
 800b3e4:	d14e      	bne.n	800b484 <_strtod_l+0x38c>
 800b3e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3e8:	4308      	orrs	r0, r1
 800b3ea:	f47f aebe 	bne.w	800b16a <_strtod_l+0x72>
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f47f aed6 	bne.w	800b1a0 <_strtod_l+0xa8>
 800b3f4:	2a69      	cmp	r2, #105	@ 0x69
 800b3f6:	d028      	beq.n	800b44a <_strtod_l+0x352>
 800b3f8:	dc25      	bgt.n	800b446 <_strtod_l+0x34e>
 800b3fa:	2a49      	cmp	r2, #73	@ 0x49
 800b3fc:	d025      	beq.n	800b44a <_strtod_l+0x352>
 800b3fe:	2a4e      	cmp	r2, #78	@ 0x4e
 800b400:	f47f aece 	bne.w	800b1a0 <_strtod_l+0xa8>
 800b404:	499b      	ldr	r1, [pc, #620]	@ (800b674 <_strtod_l+0x57c>)
 800b406:	a819      	add	r0, sp, #100	@ 0x64
 800b408:	f002 fc2a 	bl	800dc60 <__match>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	f43f aec7 	beq.w	800b1a0 <_strtod_l+0xa8>
 800b412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	2b28      	cmp	r3, #40	@ 0x28
 800b418:	d12e      	bne.n	800b478 <_strtod_l+0x380>
 800b41a:	4997      	ldr	r1, [pc, #604]	@ (800b678 <_strtod_l+0x580>)
 800b41c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b41e:	a819      	add	r0, sp, #100	@ 0x64
 800b420:	f002 fc32 	bl	800dc88 <__hexnan>
 800b424:	2805      	cmp	r0, #5
 800b426:	d127      	bne.n	800b478 <_strtod_l+0x380>
 800b428:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b42a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b42e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b432:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b436:	e698      	b.n	800b16a <_strtod_l+0x72>
 800b438:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b43a:	fb08 2101 	mla	r1, r8, r1, r2
 800b43e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b442:	920e      	str	r2, [sp, #56]	@ 0x38
 800b444:	e7b5      	b.n	800b3b2 <_strtod_l+0x2ba>
 800b446:	2a6e      	cmp	r2, #110	@ 0x6e
 800b448:	e7da      	b.n	800b400 <_strtod_l+0x308>
 800b44a:	498c      	ldr	r1, [pc, #560]	@ (800b67c <_strtod_l+0x584>)
 800b44c:	a819      	add	r0, sp, #100	@ 0x64
 800b44e:	f002 fc07 	bl	800dc60 <__match>
 800b452:	2800      	cmp	r0, #0
 800b454:	f43f aea4 	beq.w	800b1a0 <_strtod_l+0xa8>
 800b458:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b45a:	4989      	ldr	r1, [pc, #548]	@ (800b680 <_strtod_l+0x588>)
 800b45c:	3b01      	subs	r3, #1
 800b45e:	a819      	add	r0, sp, #100	@ 0x64
 800b460:	9319      	str	r3, [sp, #100]	@ 0x64
 800b462:	f002 fbfd 	bl	800dc60 <__match>
 800b466:	b910      	cbnz	r0, 800b46e <_strtod_l+0x376>
 800b468:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b46a:	3301      	adds	r3, #1
 800b46c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b46e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b690 <_strtod_l+0x598>
 800b472:	f04f 0a00 	mov.w	sl, #0
 800b476:	e678      	b.n	800b16a <_strtod_l+0x72>
 800b478:	4882      	ldr	r0, [pc, #520]	@ (800b684 <_strtod_l+0x58c>)
 800b47a:	f001 faa9 	bl	800c9d0 <nan>
 800b47e:	ec5b ab10 	vmov	sl, fp, d0
 800b482:	e672      	b.n	800b16a <_strtod_l+0x72>
 800b484:	eba8 0309 	sub.w	r3, r8, r9
 800b488:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b48a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b48c:	2f00      	cmp	r7, #0
 800b48e:	bf08      	it	eq
 800b490:	462f      	moveq	r7, r5
 800b492:	2d10      	cmp	r5, #16
 800b494:	462c      	mov	r4, r5
 800b496:	bfa8      	it	ge
 800b498:	2410      	movge	r4, #16
 800b49a:	f7f5 f86b 	bl	8000574 <__aeabi_ui2d>
 800b49e:	2d09      	cmp	r5, #9
 800b4a0:	4682      	mov	sl, r0
 800b4a2:	468b      	mov	fp, r1
 800b4a4:	dc13      	bgt.n	800b4ce <_strtod_l+0x3d6>
 800b4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f43f ae5e 	beq.w	800b16a <_strtod_l+0x72>
 800b4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b0:	dd78      	ble.n	800b5a4 <_strtod_l+0x4ac>
 800b4b2:	2b16      	cmp	r3, #22
 800b4b4:	dc5f      	bgt.n	800b576 <_strtod_l+0x47e>
 800b4b6:	4974      	ldr	r1, [pc, #464]	@ (800b688 <_strtod_l+0x590>)
 800b4b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b4bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c0:	4652      	mov	r2, sl
 800b4c2:	465b      	mov	r3, fp
 800b4c4:	f7f5 f8d0 	bl	8000668 <__aeabi_dmul>
 800b4c8:	4682      	mov	sl, r0
 800b4ca:	468b      	mov	fp, r1
 800b4cc:	e64d      	b.n	800b16a <_strtod_l+0x72>
 800b4ce:	4b6e      	ldr	r3, [pc, #440]	@ (800b688 <_strtod_l+0x590>)
 800b4d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b4d8:	f7f5 f8c6 	bl	8000668 <__aeabi_dmul>
 800b4dc:	4682      	mov	sl, r0
 800b4de:	9808      	ldr	r0, [sp, #32]
 800b4e0:	468b      	mov	fp, r1
 800b4e2:	f7f5 f847 	bl	8000574 <__aeabi_ui2d>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	4650      	mov	r0, sl
 800b4ec:	4659      	mov	r1, fp
 800b4ee:	f7f4 ff05 	bl	80002fc <__adddf3>
 800b4f2:	2d0f      	cmp	r5, #15
 800b4f4:	4682      	mov	sl, r0
 800b4f6:	468b      	mov	fp, r1
 800b4f8:	ddd5      	ble.n	800b4a6 <_strtod_l+0x3ae>
 800b4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4fc:	1b2c      	subs	r4, r5, r4
 800b4fe:	441c      	add	r4, r3
 800b500:	2c00      	cmp	r4, #0
 800b502:	f340 8096 	ble.w	800b632 <_strtod_l+0x53a>
 800b506:	f014 030f 	ands.w	r3, r4, #15
 800b50a:	d00a      	beq.n	800b522 <_strtod_l+0x42a>
 800b50c:	495e      	ldr	r1, [pc, #376]	@ (800b688 <_strtod_l+0x590>)
 800b50e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b512:	4652      	mov	r2, sl
 800b514:	465b      	mov	r3, fp
 800b516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b51a:	f7f5 f8a5 	bl	8000668 <__aeabi_dmul>
 800b51e:	4682      	mov	sl, r0
 800b520:	468b      	mov	fp, r1
 800b522:	f034 040f 	bics.w	r4, r4, #15
 800b526:	d073      	beq.n	800b610 <_strtod_l+0x518>
 800b528:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b52c:	dd48      	ble.n	800b5c0 <_strtod_l+0x4c8>
 800b52e:	2400      	movs	r4, #0
 800b530:	46a0      	mov	r8, r4
 800b532:	940a      	str	r4, [sp, #40]	@ 0x28
 800b534:	46a1      	mov	r9, r4
 800b536:	9a05      	ldr	r2, [sp, #20]
 800b538:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b690 <_strtod_l+0x598>
 800b53c:	2322      	movs	r3, #34	@ 0x22
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	f04f 0a00 	mov.w	sl, #0
 800b544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b546:	2b00      	cmp	r3, #0
 800b548:	f43f ae0f 	beq.w	800b16a <_strtod_l+0x72>
 800b54c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b54e:	9805      	ldr	r0, [sp, #20]
 800b550:	f002 fd3e 	bl	800dfd0 <_Bfree>
 800b554:	9805      	ldr	r0, [sp, #20]
 800b556:	4649      	mov	r1, r9
 800b558:	f002 fd3a 	bl	800dfd0 <_Bfree>
 800b55c:	9805      	ldr	r0, [sp, #20]
 800b55e:	4641      	mov	r1, r8
 800b560:	f002 fd36 	bl	800dfd0 <_Bfree>
 800b564:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b566:	9805      	ldr	r0, [sp, #20]
 800b568:	f002 fd32 	bl	800dfd0 <_Bfree>
 800b56c:	9805      	ldr	r0, [sp, #20]
 800b56e:	4621      	mov	r1, r4
 800b570:	f002 fd2e 	bl	800dfd0 <_Bfree>
 800b574:	e5f9      	b.n	800b16a <_strtod_l+0x72>
 800b576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b578:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b57c:	4293      	cmp	r3, r2
 800b57e:	dbbc      	blt.n	800b4fa <_strtod_l+0x402>
 800b580:	4c41      	ldr	r4, [pc, #260]	@ (800b688 <_strtod_l+0x590>)
 800b582:	f1c5 050f 	rsb	r5, r5, #15
 800b586:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b58a:	4652      	mov	r2, sl
 800b58c:	465b      	mov	r3, fp
 800b58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b592:	f7f5 f869 	bl	8000668 <__aeabi_dmul>
 800b596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b598:	1b5d      	subs	r5, r3, r5
 800b59a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b59e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b5a2:	e78f      	b.n	800b4c4 <_strtod_l+0x3cc>
 800b5a4:	3316      	adds	r3, #22
 800b5a6:	dba8      	blt.n	800b4fa <_strtod_l+0x402>
 800b5a8:	4b37      	ldr	r3, [pc, #220]	@ (800b688 <_strtod_l+0x590>)
 800b5aa:	eba9 0808 	sub.w	r8, r9, r8
 800b5ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b5b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b5b6:	4650      	mov	r0, sl
 800b5b8:	4659      	mov	r1, fp
 800b5ba:	f7f5 f97f 	bl	80008bc <__aeabi_ddiv>
 800b5be:	e783      	b.n	800b4c8 <_strtod_l+0x3d0>
 800b5c0:	4b32      	ldr	r3, [pc, #200]	@ (800b68c <_strtod_l+0x594>)
 800b5c2:	9308      	str	r3, [sp, #32]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	1124      	asrs	r4, r4, #4
 800b5c8:	4650      	mov	r0, sl
 800b5ca:	4659      	mov	r1, fp
 800b5cc:	461e      	mov	r6, r3
 800b5ce:	2c01      	cmp	r4, #1
 800b5d0:	dc21      	bgt.n	800b616 <_strtod_l+0x51e>
 800b5d2:	b10b      	cbz	r3, 800b5d8 <_strtod_l+0x4e0>
 800b5d4:	4682      	mov	sl, r0
 800b5d6:	468b      	mov	fp, r1
 800b5d8:	492c      	ldr	r1, [pc, #176]	@ (800b68c <_strtod_l+0x594>)
 800b5da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b5de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b5e2:	4652      	mov	r2, sl
 800b5e4:	465b      	mov	r3, fp
 800b5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5ea:	f7f5 f83d 	bl	8000668 <__aeabi_dmul>
 800b5ee:	4b28      	ldr	r3, [pc, #160]	@ (800b690 <_strtod_l+0x598>)
 800b5f0:	460a      	mov	r2, r1
 800b5f2:	400b      	ands	r3, r1
 800b5f4:	4927      	ldr	r1, [pc, #156]	@ (800b694 <_strtod_l+0x59c>)
 800b5f6:	428b      	cmp	r3, r1
 800b5f8:	4682      	mov	sl, r0
 800b5fa:	d898      	bhi.n	800b52e <_strtod_l+0x436>
 800b5fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b600:	428b      	cmp	r3, r1
 800b602:	bf86      	itte	hi
 800b604:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b698 <_strtod_l+0x5a0>
 800b608:	f04f 3aff 	movhi.w	sl, #4294967295
 800b60c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b610:	2300      	movs	r3, #0
 800b612:	9308      	str	r3, [sp, #32]
 800b614:	e07a      	b.n	800b70c <_strtod_l+0x614>
 800b616:	07e2      	lsls	r2, r4, #31
 800b618:	d505      	bpl.n	800b626 <_strtod_l+0x52e>
 800b61a:	9b08      	ldr	r3, [sp, #32]
 800b61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b620:	f7f5 f822 	bl	8000668 <__aeabi_dmul>
 800b624:	2301      	movs	r3, #1
 800b626:	9a08      	ldr	r2, [sp, #32]
 800b628:	3208      	adds	r2, #8
 800b62a:	3601      	adds	r6, #1
 800b62c:	1064      	asrs	r4, r4, #1
 800b62e:	9208      	str	r2, [sp, #32]
 800b630:	e7cd      	b.n	800b5ce <_strtod_l+0x4d6>
 800b632:	d0ed      	beq.n	800b610 <_strtod_l+0x518>
 800b634:	4264      	negs	r4, r4
 800b636:	f014 020f 	ands.w	r2, r4, #15
 800b63a:	d00a      	beq.n	800b652 <_strtod_l+0x55a>
 800b63c:	4b12      	ldr	r3, [pc, #72]	@ (800b688 <_strtod_l+0x590>)
 800b63e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b642:	4650      	mov	r0, sl
 800b644:	4659      	mov	r1, fp
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	f7f5 f937 	bl	80008bc <__aeabi_ddiv>
 800b64e:	4682      	mov	sl, r0
 800b650:	468b      	mov	fp, r1
 800b652:	1124      	asrs	r4, r4, #4
 800b654:	d0dc      	beq.n	800b610 <_strtod_l+0x518>
 800b656:	2c1f      	cmp	r4, #31
 800b658:	dd20      	ble.n	800b69c <_strtod_l+0x5a4>
 800b65a:	2400      	movs	r4, #0
 800b65c:	46a0      	mov	r8, r4
 800b65e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b660:	46a1      	mov	r9, r4
 800b662:	9a05      	ldr	r2, [sp, #20]
 800b664:	2322      	movs	r3, #34	@ 0x22
 800b666:	f04f 0a00 	mov.w	sl, #0
 800b66a:	f04f 0b00 	mov.w	fp, #0
 800b66e:	6013      	str	r3, [r2, #0]
 800b670:	e768      	b.n	800b544 <_strtod_l+0x44c>
 800b672:	bf00      	nop
 800b674:	0800f4dd 	.word	0x0800f4dd
 800b678:	0800f47c 	.word	0x0800f47c
 800b67c:	0800f4d5 	.word	0x0800f4d5
 800b680:	0800f5bc 	.word	0x0800f5bc
 800b684:	0800f5b8 	.word	0x0800f5b8
 800b688:	0800f720 	.word	0x0800f720
 800b68c:	0800f6f8 	.word	0x0800f6f8
 800b690:	7ff00000 	.word	0x7ff00000
 800b694:	7ca00000 	.word	0x7ca00000
 800b698:	7fefffff 	.word	0x7fefffff
 800b69c:	f014 0310 	ands.w	r3, r4, #16
 800b6a0:	bf18      	it	ne
 800b6a2:	236a      	movne	r3, #106	@ 0x6a
 800b6a4:	4ea9      	ldr	r6, [pc, #676]	@ (800b94c <_strtod_l+0x854>)
 800b6a6:	9308      	str	r3, [sp, #32]
 800b6a8:	4650      	mov	r0, sl
 800b6aa:	4659      	mov	r1, fp
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	07e2      	lsls	r2, r4, #31
 800b6b0:	d504      	bpl.n	800b6bc <_strtod_l+0x5c4>
 800b6b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b6b6:	f7f4 ffd7 	bl	8000668 <__aeabi_dmul>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	1064      	asrs	r4, r4, #1
 800b6be:	f106 0608 	add.w	r6, r6, #8
 800b6c2:	d1f4      	bne.n	800b6ae <_strtod_l+0x5b6>
 800b6c4:	b10b      	cbz	r3, 800b6ca <_strtod_l+0x5d2>
 800b6c6:	4682      	mov	sl, r0
 800b6c8:	468b      	mov	fp, r1
 800b6ca:	9b08      	ldr	r3, [sp, #32]
 800b6cc:	b1b3      	cbz	r3, 800b6fc <_strtod_l+0x604>
 800b6ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b6d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	4659      	mov	r1, fp
 800b6da:	dd0f      	ble.n	800b6fc <_strtod_l+0x604>
 800b6dc:	2b1f      	cmp	r3, #31
 800b6de:	dd55      	ble.n	800b78c <_strtod_l+0x694>
 800b6e0:	2b34      	cmp	r3, #52	@ 0x34
 800b6e2:	bfde      	ittt	le
 800b6e4:	f04f 33ff 	movle.w	r3, #4294967295
 800b6e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b6ec:	4093      	lslle	r3, r2
 800b6ee:	f04f 0a00 	mov.w	sl, #0
 800b6f2:	bfcc      	ite	gt
 800b6f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b6f8:	ea03 0b01 	andle.w	fp, r3, r1
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2300      	movs	r3, #0
 800b700:	4650      	mov	r0, sl
 800b702:	4659      	mov	r1, fp
 800b704:	f7f5 fa18 	bl	8000b38 <__aeabi_dcmpeq>
 800b708:	2800      	cmp	r0, #0
 800b70a:	d1a6      	bne.n	800b65a <_strtod_l+0x562>
 800b70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b712:	9805      	ldr	r0, [sp, #20]
 800b714:	462b      	mov	r3, r5
 800b716:	463a      	mov	r2, r7
 800b718:	f002 fcc2 	bl	800e0a0 <__s2b>
 800b71c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b71e:	2800      	cmp	r0, #0
 800b720:	f43f af05 	beq.w	800b52e <_strtod_l+0x436>
 800b724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b726:	2a00      	cmp	r2, #0
 800b728:	eba9 0308 	sub.w	r3, r9, r8
 800b72c:	bfa8      	it	ge
 800b72e:	2300      	movge	r3, #0
 800b730:	9312      	str	r3, [sp, #72]	@ 0x48
 800b732:	2400      	movs	r4, #0
 800b734:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b738:	9316      	str	r3, [sp, #88]	@ 0x58
 800b73a:	46a0      	mov	r8, r4
 800b73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b73e:	9805      	ldr	r0, [sp, #20]
 800b740:	6859      	ldr	r1, [r3, #4]
 800b742:	f002 fc05 	bl	800df50 <_Balloc>
 800b746:	4681      	mov	r9, r0
 800b748:	2800      	cmp	r0, #0
 800b74a:	f43f aef4 	beq.w	800b536 <_strtod_l+0x43e>
 800b74e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b750:	691a      	ldr	r2, [r3, #16]
 800b752:	3202      	adds	r2, #2
 800b754:	f103 010c 	add.w	r1, r3, #12
 800b758:	0092      	lsls	r2, r2, #2
 800b75a:	300c      	adds	r0, #12
 800b75c:	f001 f927 	bl	800c9ae <memcpy>
 800b760:	ec4b ab10 	vmov	d0, sl, fp
 800b764:	9805      	ldr	r0, [sp, #20]
 800b766:	aa1c      	add	r2, sp, #112	@ 0x70
 800b768:	a91b      	add	r1, sp, #108	@ 0x6c
 800b76a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b76e:	f002 ffd3 	bl	800e718 <__d2b>
 800b772:	901a      	str	r0, [sp, #104]	@ 0x68
 800b774:	2800      	cmp	r0, #0
 800b776:	f43f aede 	beq.w	800b536 <_strtod_l+0x43e>
 800b77a:	9805      	ldr	r0, [sp, #20]
 800b77c:	2101      	movs	r1, #1
 800b77e:	f002 fd25 	bl	800e1cc <__i2b>
 800b782:	4680      	mov	r8, r0
 800b784:	b948      	cbnz	r0, 800b79a <_strtod_l+0x6a2>
 800b786:	f04f 0800 	mov.w	r8, #0
 800b78a:	e6d4      	b.n	800b536 <_strtod_l+0x43e>
 800b78c:	f04f 32ff 	mov.w	r2, #4294967295
 800b790:	fa02 f303 	lsl.w	r3, r2, r3
 800b794:	ea03 0a0a 	and.w	sl, r3, sl
 800b798:	e7b0      	b.n	800b6fc <_strtod_l+0x604>
 800b79a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b79c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b79e:	2d00      	cmp	r5, #0
 800b7a0:	bfab      	itete	ge
 800b7a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b7a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b7a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b7a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b7aa:	bfac      	ite	ge
 800b7ac:	18ef      	addge	r7, r5, r3
 800b7ae:	1b5e      	sublt	r6, r3, r5
 800b7b0:	9b08      	ldr	r3, [sp, #32]
 800b7b2:	1aed      	subs	r5, r5, r3
 800b7b4:	4415      	add	r5, r2
 800b7b6:	4b66      	ldr	r3, [pc, #408]	@ (800b950 <_strtod_l+0x858>)
 800b7b8:	3d01      	subs	r5, #1
 800b7ba:	429d      	cmp	r5, r3
 800b7bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b7c0:	da50      	bge.n	800b864 <_strtod_l+0x76c>
 800b7c2:	1b5b      	subs	r3, r3, r5
 800b7c4:	2b1f      	cmp	r3, #31
 800b7c6:	eba2 0203 	sub.w	r2, r2, r3
 800b7ca:	f04f 0101 	mov.w	r1, #1
 800b7ce:	dc3d      	bgt.n	800b84c <_strtod_l+0x754>
 800b7d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7da:	18bd      	adds	r5, r7, r2
 800b7dc:	9b08      	ldr	r3, [sp, #32]
 800b7de:	42af      	cmp	r7, r5
 800b7e0:	4416      	add	r6, r2
 800b7e2:	441e      	add	r6, r3
 800b7e4:	463b      	mov	r3, r7
 800b7e6:	bfa8      	it	ge
 800b7e8:	462b      	movge	r3, r5
 800b7ea:	42b3      	cmp	r3, r6
 800b7ec:	bfa8      	it	ge
 800b7ee:	4633      	movge	r3, r6
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	bfc2      	ittt	gt
 800b7f4:	1aed      	subgt	r5, r5, r3
 800b7f6:	1af6      	subgt	r6, r6, r3
 800b7f8:	1aff      	subgt	r7, r7, r3
 800b7fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	dd16      	ble.n	800b82e <_strtod_l+0x736>
 800b800:	4641      	mov	r1, r8
 800b802:	9805      	ldr	r0, [sp, #20]
 800b804:	461a      	mov	r2, r3
 800b806:	f002 fda1 	bl	800e34c <__pow5mult>
 800b80a:	4680      	mov	r8, r0
 800b80c:	2800      	cmp	r0, #0
 800b80e:	d0ba      	beq.n	800b786 <_strtod_l+0x68e>
 800b810:	4601      	mov	r1, r0
 800b812:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b814:	9805      	ldr	r0, [sp, #20]
 800b816:	f002 fcef 	bl	800e1f8 <__multiply>
 800b81a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b81c:	2800      	cmp	r0, #0
 800b81e:	f43f ae8a 	beq.w	800b536 <_strtod_l+0x43e>
 800b822:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b824:	9805      	ldr	r0, [sp, #20]
 800b826:	f002 fbd3 	bl	800dfd0 <_Bfree>
 800b82a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b82c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b82e:	2d00      	cmp	r5, #0
 800b830:	dc1d      	bgt.n	800b86e <_strtod_l+0x776>
 800b832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b834:	2b00      	cmp	r3, #0
 800b836:	dd23      	ble.n	800b880 <_strtod_l+0x788>
 800b838:	4649      	mov	r1, r9
 800b83a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b83c:	9805      	ldr	r0, [sp, #20]
 800b83e:	f002 fd85 	bl	800e34c <__pow5mult>
 800b842:	4681      	mov	r9, r0
 800b844:	b9e0      	cbnz	r0, 800b880 <_strtod_l+0x788>
 800b846:	f04f 0900 	mov.w	r9, #0
 800b84a:	e674      	b.n	800b536 <_strtod_l+0x43e>
 800b84c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b850:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b854:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b858:	35e2      	adds	r5, #226	@ 0xe2
 800b85a:	fa01 f305 	lsl.w	r3, r1, r5
 800b85e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b860:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b862:	e7ba      	b.n	800b7da <_strtod_l+0x6e2>
 800b864:	2300      	movs	r3, #0
 800b866:	9310      	str	r3, [sp, #64]	@ 0x40
 800b868:	2301      	movs	r3, #1
 800b86a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b86c:	e7b5      	b.n	800b7da <_strtod_l+0x6e2>
 800b86e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b870:	9805      	ldr	r0, [sp, #20]
 800b872:	462a      	mov	r2, r5
 800b874:	f002 fdc4 	bl	800e400 <__lshift>
 800b878:	901a      	str	r0, [sp, #104]	@ 0x68
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d1d9      	bne.n	800b832 <_strtod_l+0x73a>
 800b87e:	e65a      	b.n	800b536 <_strtod_l+0x43e>
 800b880:	2e00      	cmp	r6, #0
 800b882:	dd07      	ble.n	800b894 <_strtod_l+0x79c>
 800b884:	4649      	mov	r1, r9
 800b886:	9805      	ldr	r0, [sp, #20]
 800b888:	4632      	mov	r2, r6
 800b88a:	f002 fdb9 	bl	800e400 <__lshift>
 800b88e:	4681      	mov	r9, r0
 800b890:	2800      	cmp	r0, #0
 800b892:	d0d8      	beq.n	800b846 <_strtod_l+0x74e>
 800b894:	2f00      	cmp	r7, #0
 800b896:	dd08      	ble.n	800b8aa <_strtod_l+0x7b2>
 800b898:	4641      	mov	r1, r8
 800b89a:	9805      	ldr	r0, [sp, #20]
 800b89c:	463a      	mov	r2, r7
 800b89e:	f002 fdaf 	bl	800e400 <__lshift>
 800b8a2:	4680      	mov	r8, r0
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	f43f ae46 	beq.w	800b536 <_strtod_l+0x43e>
 800b8aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8ac:	9805      	ldr	r0, [sp, #20]
 800b8ae:	464a      	mov	r2, r9
 800b8b0:	f002 fe2e 	bl	800e510 <__mdiff>
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	f43f ae3d 	beq.w	800b536 <_strtod_l+0x43e>
 800b8bc:	68c3      	ldr	r3, [r0, #12]
 800b8be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	60c3      	str	r3, [r0, #12]
 800b8c4:	4641      	mov	r1, r8
 800b8c6:	f002 fe07 	bl	800e4d8 <__mcmp>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	da46      	bge.n	800b95c <_strtod_l+0x864>
 800b8ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8d0:	ea53 030a 	orrs.w	r3, r3, sl
 800b8d4:	d16c      	bne.n	800b9b0 <_strtod_l+0x8b8>
 800b8d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d168      	bne.n	800b9b0 <_strtod_l+0x8b8>
 800b8de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b8e2:	0d1b      	lsrs	r3, r3, #20
 800b8e4:	051b      	lsls	r3, r3, #20
 800b8e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b8ea:	d961      	bls.n	800b9b0 <_strtod_l+0x8b8>
 800b8ec:	6963      	ldr	r3, [r4, #20]
 800b8ee:	b913      	cbnz	r3, 800b8f6 <_strtod_l+0x7fe>
 800b8f0:	6923      	ldr	r3, [r4, #16]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	dd5c      	ble.n	800b9b0 <_strtod_l+0x8b8>
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	9805      	ldr	r0, [sp, #20]
 800b8fc:	f002 fd80 	bl	800e400 <__lshift>
 800b900:	4641      	mov	r1, r8
 800b902:	4604      	mov	r4, r0
 800b904:	f002 fde8 	bl	800e4d8 <__mcmp>
 800b908:	2800      	cmp	r0, #0
 800b90a:	dd51      	ble.n	800b9b0 <_strtod_l+0x8b8>
 800b90c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b910:	9a08      	ldr	r2, [sp, #32]
 800b912:	0d1b      	lsrs	r3, r3, #20
 800b914:	051b      	lsls	r3, r3, #20
 800b916:	2a00      	cmp	r2, #0
 800b918:	d06b      	beq.n	800b9f2 <_strtod_l+0x8fa>
 800b91a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b91e:	d868      	bhi.n	800b9f2 <_strtod_l+0x8fa>
 800b920:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b924:	f67f ae9d 	bls.w	800b662 <_strtod_l+0x56a>
 800b928:	4b0a      	ldr	r3, [pc, #40]	@ (800b954 <_strtod_l+0x85c>)
 800b92a:	4650      	mov	r0, sl
 800b92c:	4659      	mov	r1, fp
 800b92e:	2200      	movs	r2, #0
 800b930:	f7f4 fe9a 	bl	8000668 <__aeabi_dmul>
 800b934:	4b08      	ldr	r3, [pc, #32]	@ (800b958 <_strtod_l+0x860>)
 800b936:	400b      	ands	r3, r1
 800b938:	4682      	mov	sl, r0
 800b93a:	468b      	mov	fp, r1
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f47f ae05 	bne.w	800b54c <_strtod_l+0x454>
 800b942:	9a05      	ldr	r2, [sp, #20]
 800b944:	2322      	movs	r3, #34	@ 0x22
 800b946:	6013      	str	r3, [r2, #0]
 800b948:	e600      	b.n	800b54c <_strtod_l+0x454>
 800b94a:	bf00      	nop
 800b94c:	0800f4a8 	.word	0x0800f4a8
 800b950:	fffffc02 	.word	0xfffffc02
 800b954:	39500000 	.word	0x39500000
 800b958:	7ff00000 	.word	0x7ff00000
 800b95c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b960:	d165      	bne.n	800ba2e <_strtod_l+0x936>
 800b962:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b968:	b35a      	cbz	r2, 800b9c2 <_strtod_l+0x8ca>
 800b96a:	4a9f      	ldr	r2, [pc, #636]	@ (800bbe8 <_strtod_l+0xaf0>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d12b      	bne.n	800b9c8 <_strtod_l+0x8d0>
 800b970:	9b08      	ldr	r3, [sp, #32]
 800b972:	4651      	mov	r1, sl
 800b974:	b303      	cbz	r3, 800b9b8 <_strtod_l+0x8c0>
 800b976:	4b9d      	ldr	r3, [pc, #628]	@ (800bbec <_strtod_l+0xaf4>)
 800b978:	465a      	mov	r2, fp
 800b97a:	4013      	ands	r3, r2
 800b97c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b980:	f04f 32ff 	mov.w	r2, #4294967295
 800b984:	d81b      	bhi.n	800b9be <_strtod_l+0x8c6>
 800b986:	0d1b      	lsrs	r3, r3, #20
 800b988:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b98c:	fa02 f303 	lsl.w	r3, r2, r3
 800b990:	4299      	cmp	r1, r3
 800b992:	d119      	bne.n	800b9c8 <_strtod_l+0x8d0>
 800b994:	4b96      	ldr	r3, [pc, #600]	@ (800bbf0 <_strtod_l+0xaf8>)
 800b996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b998:	429a      	cmp	r2, r3
 800b99a:	d102      	bne.n	800b9a2 <_strtod_l+0x8aa>
 800b99c:	3101      	adds	r1, #1
 800b99e:	f43f adca 	beq.w	800b536 <_strtod_l+0x43e>
 800b9a2:	4b92      	ldr	r3, [pc, #584]	@ (800bbec <_strtod_l+0xaf4>)
 800b9a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9a6:	401a      	ands	r2, r3
 800b9a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b9ac:	f04f 0a00 	mov.w	sl, #0
 800b9b0:	9b08      	ldr	r3, [sp, #32]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1b8      	bne.n	800b928 <_strtod_l+0x830>
 800b9b6:	e5c9      	b.n	800b54c <_strtod_l+0x454>
 800b9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9bc:	e7e8      	b.n	800b990 <_strtod_l+0x898>
 800b9be:	4613      	mov	r3, r2
 800b9c0:	e7e6      	b.n	800b990 <_strtod_l+0x898>
 800b9c2:	ea53 030a 	orrs.w	r3, r3, sl
 800b9c6:	d0a1      	beq.n	800b90c <_strtod_l+0x814>
 800b9c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b9ca:	b1db      	cbz	r3, 800ba04 <_strtod_l+0x90c>
 800b9cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9ce:	4213      	tst	r3, r2
 800b9d0:	d0ee      	beq.n	800b9b0 <_strtod_l+0x8b8>
 800b9d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9d4:	9a08      	ldr	r2, [sp, #32]
 800b9d6:	4650      	mov	r0, sl
 800b9d8:	4659      	mov	r1, fp
 800b9da:	b1bb      	cbz	r3, 800ba0c <_strtod_l+0x914>
 800b9dc:	f7ff fb6b 	bl	800b0b6 <sulp>
 800b9e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9e4:	ec53 2b10 	vmov	r2, r3, d0
 800b9e8:	f7f4 fc88 	bl	80002fc <__adddf3>
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	468b      	mov	fp, r1
 800b9f0:	e7de      	b.n	800b9b0 <_strtod_l+0x8b8>
 800b9f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b9f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b9fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b9fe:	f04f 3aff 	mov.w	sl, #4294967295
 800ba02:	e7d5      	b.n	800b9b0 <_strtod_l+0x8b8>
 800ba04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ba06:	ea13 0f0a 	tst.w	r3, sl
 800ba0a:	e7e1      	b.n	800b9d0 <_strtod_l+0x8d8>
 800ba0c:	f7ff fb53 	bl	800b0b6 <sulp>
 800ba10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba14:	ec53 2b10 	vmov	r2, r3, d0
 800ba18:	f7f4 fc6e 	bl	80002f8 <__aeabi_dsub>
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2300      	movs	r3, #0
 800ba20:	4682      	mov	sl, r0
 800ba22:	468b      	mov	fp, r1
 800ba24:	f7f5 f888 	bl	8000b38 <__aeabi_dcmpeq>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d0c1      	beq.n	800b9b0 <_strtod_l+0x8b8>
 800ba2c:	e619      	b.n	800b662 <_strtod_l+0x56a>
 800ba2e:	4641      	mov	r1, r8
 800ba30:	4620      	mov	r0, r4
 800ba32:	f002 fec9 	bl	800e7c8 <__ratio>
 800ba36:	ec57 6b10 	vmov	r6, r7, d0
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ba40:	4630      	mov	r0, r6
 800ba42:	4639      	mov	r1, r7
 800ba44:	f7f5 f88c 	bl	8000b60 <__aeabi_dcmple>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d06f      	beq.n	800bb2c <_strtod_l+0xa34>
 800ba4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d17a      	bne.n	800bb48 <_strtod_l+0xa50>
 800ba52:	f1ba 0f00 	cmp.w	sl, #0
 800ba56:	d158      	bne.n	800bb0a <_strtod_l+0xa12>
 800ba58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d15a      	bne.n	800bb18 <_strtod_l+0xa20>
 800ba62:	4b64      	ldr	r3, [pc, #400]	@ (800bbf4 <_strtod_l+0xafc>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	4630      	mov	r0, r6
 800ba68:	4639      	mov	r1, r7
 800ba6a:	f7f5 f86f 	bl	8000b4c <__aeabi_dcmplt>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d159      	bne.n	800bb26 <_strtod_l+0xa2e>
 800ba72:	4630      	mov	r0, r6
 800ba74:	4639      	mov	r1, r7
 800ba76:	4b60      	ldr	r3, [pc, #384]	@ (800bbf8 <_strtod_l+0xb00>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f7f4 fdf5 	bl	8000668 <__aeabi_dmul>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ba86:	9606      	str	r6, [sp, #24]
 800ba88:	9307      	str	r3, [sp, #28]
 800ba8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba8e:	4d57      	ldr	r5, [pc, #348]	@ (800bbec <_strtod_l+0xaf4>)
 800ba90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ba94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba96:	401d      	ands	r5, r3
 800ba98:	4b58      	ldr	r3, [pc, #352]	@ (800bbfc <_strtod_l+0xb04>)
 800ba9a:	429d      	cmp	r5, r3
 800ba9c:	f040 80b2 	bne.w	800bc04 <_strtod_l+0xb0c>
 800baa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baa2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800baa6:	ec4b ab10 	vmov	d0, sl, fp
 800baaa:	f002 fdc5 	bl	800e638 <__ulp>
 800baae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bab2:	ec51 0b10 	vmov	r0, r1, d0
 800bab6:	f7f4 fdd7 	bl	8000668 <__aeabi_dmul>
 800baba:	4652      	mov	r2, sl
 800babc:	465b      	mov	r3, fp
 800babe:	f7f4 fc1d 	bl	80002fc <__adddf3>
 800bac2:	460b      	mov	r3, r1
 800bac4:	4949      	ldr	r1, [pc, #292]	@ (800bbec <_strtod_l+0xaf4>)
 800bac6:	4a4e      	ldr	r2, [pc, #312]	@ (800bc00 <_strtod_l+0xb08>)
 800bac8:	4019      	ands	r1, r3
 800baca:	4291      	cmp	r1, r2
 800bacc:	4682      	mov	sl, r0
 800bace:	d942      	bls.n	800bb56 <_strtod_l+0xa5e>
 800bad0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bad2:	4b47      	ldr	r3, [pc, #284]	@ (800bbf0 <_strtod_l+0xaf8>)
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d103      	bne.n	800bae0 <_strtod_l+0x9e8>
 800bad8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bada:	3301      	adds	r3, #1
 800badc:	f43f ad2b 	beq.w	800b536 <_strtod_l+0x43e>
 800bae0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bbf0 <_strtod_l+0xaf8>
 800bae4:	f04f 3aff 	mov.w	sl, #4294967295
 800bae8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800baea:	9805      	ldr	r0, [sp, #20]
 800baec:	f002 fa70 	bl	800dfd0 <_Bfree>
 800baf0:	9805      	ldr	r0, [sp, #20]
 800baf2:	4649      	mov	r1, r9
 800baf4:	f002 fa6c 	bl	800dfd0 <_Bfree>
 800baf8:	9805      	ldr	r0, [sp, #20]
 800bafa:	4641      	mov	r1, r8
 800bafc:	f002 fa68 	bl	800dfd0 <_Bfree>
 800bb00:	9805      	ldr	r0, [sp, #20]
 800bb02:	4621      	mov	r1, r4
 800bb04:	f002 fa64 	bl	800dfd0 <_Bfree>
 800bb08:	e618      	b.n	800b73c <_strtod_l+0x644>
 800bb0a:	f1ba 0f01 	cmp.w	sl, #1
 800bb0e:	d103      	bne.n	800bb18 <_strtod_l+0xa20>
 800bb10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f43f ada5 	beq.w	800b662 <_strtod_l+0x56a>
 800bb18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bbc8 <_strtod_l+0xad0>
 800bb1c:	4f35      	ldr	r7, [pc, #212]	@ (800bbf4 <_strtod_l+0xafc>)
 800bb1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb22:	2600      	movs	r6, #0
 800bb24:	e7b1      	b.n	800ba8a <_strtod_l+0x992>
 800bb26:	4f34      	ldr	r7, [pc, #208]	@ (800bbf8 <_strtod_l+0xb00>)
 800bb28:	2600      	movs	r6, #0
 800bb2a:	e7aa      	b.n	800ba82 <_strtod_l+0x98a>
 800bb2c:	4b32      	ldr	r3, [pc, #200]	@ (800bbf8 <_strtod_l+0xb00>)
 800bb2e:	4630      	mov	r0, r6
 800bb30:	4639      	mov	r1, r7
 800bb32:	2200      	movs	r2, #0
 800bb34:	f7f4 fd98 	bl	8000668 <__aeabi_dmul>
 800bb38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	460f      	mov	r7, r1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d09f      	beq.n	800ba82 <_strtod_l+0x98a>
 800bb42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bb46:	e7a0      	b.n	800ba8a <_strtod_l+0x992>
 800bb48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bbd0 <_strtod_l+0xad8>
 800bb4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb50:	ec57 6b17 	vmov	r6, r7, d7
 800bb54:	e799      	b.n	800ba8a <_strtod_l+0x992>
 800bb56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bb5a:	9b08      	ldr	r3, [sp, #32]
 800bb5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1c1      	bne.n	800bae8 <_strtod_l+0x9f0>
 800bb64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb68:	0d1b      	lsrs	r3, r3, #20
 800bb6a:	051b      	lsls	r3, r3, #20
 800bb6c:	429d      	cmp	r5, r3
 800bb6e:	d1bb      	bne.n	800bae8 <_strtod_l+0x9f0>
 800bb70:	4630      	mov	r0, r6
 800bb72:	4639      	mov	r1, r7
 800bb74:	f7f5 f8d8 	bl	8000d28 <__aeabi_d2lz>
 800bb78:	f7f4 fd48 	bl	800060c <__aeabi_l2d>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	4630      	mov	r0, r6
 800bb82:	4639      	mov	r1, r7
 800bb84:	f7f4 fbb8 	bl	80002f8 <__aeabi_dsub>
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bb90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bb94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb96:	ea46 060a 	orr.w	r6, r6, sl
 800bb9a:	431e      	orrs	r6, r3
 800bb9c:	d06f      	beq.n	800bc7e <_strtod_l+0xb86>
 800bb9e:	a30e      	add	r3, pc, #56	@ (adr r3, 800bbd8 <_strtod_l+0xae0>)
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	f7f4 ffd2 	bl	8000b4c <__aeabi_dcmplt>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	f47f accf 	bne.w	800b54c <_strtod_l+0x454>
 800bbae:	a30c      	add	r3, pc, #48	@ (adr r3, 800bbe0 <_strtod_l+0xae8>)
 800bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbb8:	f7f4 ffe6 	bl	8000b88 <__aeabi_dcmpgt>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d093      	beq.n	800bae8 <_strtod_l+0x9f0>
 800bbc0:	e4c4      	b.n	800b54c <_strtod_l+0x454>
 800bbc2:	bf00      	nop
 800bbc4:	f3af 8000 	nop.w
 800bbc8:	00000000 	.word	0x00000000
 800bbcc:	bff00000 	.word	0xbff00000
 800bbd0:	00000000 	.word	0x00000000
 800bbd4:	3ff00000 	.word	0x3ff00000
 800bbd8:	94a03595 	.word	0x94a03595
 800bbdc:	3fdfffff 	.word	0x3fdfffff
 800bbe0:	35afe535 	.word	0x35afe535
 800bbe4:	3fe00000 	.word	0x3fe00000
 800bbe8:	000fffff 	.word	0x000fffff
 800bbec:	7ff00000 	.word	0x7ff00000
 800bbf0:	7fefffff 	.word	0x7fefffff
 800bbf4:	3ff00000 	.word	0x3ff00000
 800bbf8:	3fe00000 	.word	0x3fe00000
 800bbfc:	7fe00000 	.word	0x7fe00000
 800bc00:	7c9fffff 	.word	0x7c9fffff
 800bc04:	9b08      	ldr	r3, [sp, #32]
 800bc06:	b323      	cbz	r3, 800bc52 <_strtod_l+0xb5a>
 800bc08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bc0c:	d821      	bhi.n	800bc52 <_strtod_l+0xb5a>
 800bc0e:	a328      	add	r3, pc, #160	@ (adr r3, 800bcb0 <_strtod_l+0xbb8>)
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	4630      	mov	r0, r6
 800bc16:	4639      	mov	r1, r7
 800bc18:	f7f4 ffa2 	bl	8000b60 <__aeabi_dcmple>
 800bc1c:	b1a0      	cbz	r0, 800bc48 <_strtod_l+0xb50>
 800bc1e:	4639      	mov	r1, r7
 800bc20:	4630      	mov	r0, r6
 800bc22:	f7f4 fff9 	bl	8000c18 <__aeabi_d2uiz>
 800bc26:	2801      	cmp	r0, #1
 800bc28:	bf38      	it	cc
 800bc2a:	2001      	movcc	r0, #1
 800bc2c:	f7f4 fca2 	bl	8000574 <__aeabi_ui2d>
 800bc30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc32:	4606      	mov	r6, r0
 800bc34:	460f      	mov	r7, r1
 800bc36:	b9fb      	cbnz	r3, 800bc78 <_strtod_l+0xb80>
 800bc38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc3c:	9014      	str	r0, [sp, #80]	@ 0x50
 800bc3e:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bc44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bc48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bc4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bc4e:	1b5b      	subs	r3, r3, r5
 800bc50:	9311      	str	r3, [sp, #68]	@ 0x44
 800bc52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bc56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bc5a:	f002 fced 	bl	800e638 <__ulp>
 800bc5e:	4650      	mov	r0, sl
 800bc60:	ec53 2b10 	vmov	r2, r3, d0
 800bc64:	4659      	mov	r1, fp
 800bc66:	f7f4 fcff 	bl	8000668 <__aeabi_dmul>
 800bc6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bc6e:	f7f4 fb45 	bl	80002fc <__adddf3>
 800bc72:	4682      	mov	sl, r0
 800bc74:	468b      	mov	fp, r1
 800bc76:	e770      	b.n	800bb5a <_strtod_l+0xa62>
 800bc78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bc7c:	e7e0      	b.n	800bc40 <_strtod_l+0xb48>
 800bc7e:	a30e      	add	r3, pc, #56	@ (adr r3, 800bcb8 <_strtod_l+0xbc0>)
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	f7f4 ff62 	bl	8000b4c <__aeabi_dcmplt>
 800bc88:	e798      	b.n	800bbbc <_strtod_l+0xac4>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bc90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc92:	6013      	str	r3, [r2, #0]
 800bc94:	f7ff ba6d 	b.w	800b172 <_strtod_l+0x7a>
 800bc98:	2a65      	cmp	r2, #101	@ 0x65
 800bc9a:	f43f ab66 	beq.w	800b36a <_strtod_l+0x272>
 800bc9e:	2a45      	cmp	r2, #69	@ 0x45
 800bca0:	f43f ab63 	beq.w	800b36a <_strtod_l+0x272>
 800bca4:	2301      	movs	r3, #1
 800bca6:	f7ff bb9e 	b.w	800b3e6 <_strtod_l+0x2ee>
 800bcaa:	bf00      	nop
 800bcac:	f3af 8000 	nop.w
 800bcb0:	ffc00000 	.word	0xffc00000
 800bcb4:	41dfffff 	.word	0x41dfffff
 800bcb8:	94a03595 	.word	0x94a03595
 800bcbc:	3fcfffff 	.word	0x3fcfffff

0800bcc0 <strtod>:
 800bcc0:	460a      	mov	r2, r1
 800bcc2:	4601      	mov	r1, r0
 800bcc4:	4802      	ldr	r0, [pc, #8]	@ (800bcd0 <strtod+0x10>)
 800bcc6:	4b03      	ldr	r3, [pc, #12]	@ (800bcd4 <strtod+0x14>)
 800bcc8:	6800      	ldr	r0, [r0, #0]
 800bcca:	f7ff ba15 	b.w	800b0f8 <_strtod_l>
 800bcce:	bf00      	nop
 800bcd0:	20000188 	.word	0x20000188
 800bcd4:	2000001c 	.word	0x2000001c

0800bcd8 <__cvt>:
 800bcd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcdc:	ec57 6b10 	vmov	r6, r7, d0
 800bce0:	2f00      	cmp	r7, #0
 800bce2:	460c      	mov	r4, r1
 800bce4:	4619      	mov	r1, r3
 800bce6:	463b      	mov	r3, r7
 800bce8:	bfbb      	ittet	lt
 800bcea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bcee:	461f      	movlt	r7, r3
 800bcf0:	2300      	movge	r3, #0
 800bcf2:	232d      	movlt	r3, #45	@ 0x2d
 800bcf4:	700b      	strb	r3, [r1, #0]
 800bcf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcf8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bcfc:	4691      	mov	r9, r2
 800bcfe:	f023 0820 	bic.w	r8, r3, #32
 800bd02:	bfbc      	itt	lt
 800bd04:	4632      	movlt	r2, r6
 800bd06:	4616      	movlt	r6, r2
 800bd08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bd0c:	d005      	beq.n	800bd1a <__cvt+0x42>
 800bd0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bd12:	d100      	bne.n	800bd16 <__cvt+0x3e>
 800bd14:	3401      	adds	r4, #1
 800bd16:	2102      	movs	r1, #2
 800bd18:	e000      	b.n	800bd1c <__cvt+0x44>
 800bd1a:	2103      	movs	r1, #3
 800bd1c:	ab03      	add	r3, sp, #12
 800bd1e:	9301      	str	r3, [sp, #4]
 800bd20:	ab02      	add	r3, sp, #8
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	ec47 6b10 	vmov	d0, r6, r7
 800bd28:	4653      	mov	r3, sl
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	f000 ff00 	bl	800cb30 <_dtoa_r>
 800bd30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bd34:	4605      	mov	r5, r0
 800bd36:	d119      	bne.n	800bd6c <__cvt+0x94>
 800bd38:	f019 0f01 	tst.w	r9, #1
 800bd3c:	d00e      	beq.n	800bd5c <__cvt+0x84>
 800bd3e:	eb00 0904 	add.w	r9, r0, r4
 800bd42:	2200      	movs	r2, #0
 800bd44:	2300      	movs	r3, #0
 800bd46:	4630      	mov	r0, r6
 800bd48:	4639      	mov	r1, r7
 800bd4a:	f7f4 fef5 	bl	8000b38 <__aeabi_dcmpeq>
 800bd4e:	b108      	cbz	r0, 800bd54 <__cvt+0x7c>
 800bd50:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd54:	2230      	movs	r2, #48	@ 0x30
 800bd56:	9b03      	ldr	r3, [sp, #12]
 800bd58:	454b      	cmp	r3, r9
 800bd5a:	d31e      	bcc.n	800bd9a <__cvt+0xc2>
 800bd5c:	9b03      	ldr	r3, [sp, #12]
 800bd5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd60:	1b5b      	subs	r3, r3, r5
 800bd62:	4628      	mov	r0, r5
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	b004      	add	sp, #16
 800bd68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bd70:	eb00 0904 	add.w	r9, r0, r4
 800bd74:	d1e5      	bne.n	800bd42 <__cvt+0x6a>
 800bd76:	7803      	ldrb	r3, [r0, #0]
 800bd78:	2b30      	cmp	r3, #48	@ 0x30
 800bd7a:	d10a      	bne.n	800bd92 <__cvt+0xba>
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	2300      	movs	r3, #0
 800bd80:	4630      	mov	r0, r6
 800bd82:	4639      	mov	r1, r7
 800bd84:	f7f4 fed8 	bl	8000b38 <__aeabi_dcmpeq>
 800bd88:	b918      	cbnz	r0, 800bd92 <__cvt+0xba>
 800bd8a:	f1c4 0401 	rsb	r4, r4, #1
 800bd8e:	f8ca 4000 	str.w	r4, [sl]
 800bd92:	f8da 3000 	ldr.w	r3, [sl]
 800bd96:	4499      	add	r9, r3
 800bd98:	e7d3      	b.n	800bd42 <__cvt+0x6a>
 800bd9a:	1c59      	adds	r1, r3, #1
 800bd9c:	9103      	str	r1, [sp, #12]
 800bd9e:	701a      	strb	r2, [r3, #0]
 800bda0:	e7d9      	b.n	800bd56 <__cvt+0x7e>

0800bda2 <__exponent>:
 800bda2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bda4:	2900      	cmp	r1, #0
 800bda6:	bfba      	itte	lt
 800bda8:	4249      	neglt	r1, r1
 800bdaa:	232d      	movlt	r3, #45	@ 0x2d
 800bdac:	232b      	movge	r3, #43	@ 0x2b
 800bdae:	2909      	cmp	r1, #9
 800bdb0:	7002      	strb	r2, [r0, #0]
 800bdb2:	7043      	strb	r3, [r0, #1]
 800bdb4:	dd29      	ble.n	800be0a <__exponent+0x68>
 800bdb6:	f10d 0307 	add.w	r3, sp, #7
 800bdba:	461d      	mov	r5, r3
 800bdbc:	270a      	movs	r7, #10
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	fbb1 f6f7 	udiv	r6, r1, r7
 800bdc4:	fb07 1416 	mls	r4, r7, r6, r1
 800bdc8:	3430      	adds	r4, #48	@ 0x30
 800bdca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bdce:	460c      	mov	r4, r1
 800bdd0:	2c63      	cmp	r4, #99	@ 0x63
 800bdd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bdd6:	4631      	mov	r1, r6
 800bdd8:	dcf1      	bgt.n	800bdbe <__exponent+0x1c>
 800bdda:	3130      	adds	r1, #48	@ 0x30
 800bddc:	1e94      	subs	r4, r2, #2
 800bdde:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bde2:	1c41      	adds	r1, r0, #1
 800bde4:	4623      	mov	r3, r4
 800bde6:	42ab      	cmp	r3, r5
 800bde8:	d30a      	bcc.n	800be00 <__exponent+0x5e>
 800bdea:	f10d 0309 	add.w	r3, sp, #9
 800bdee:	1a9b      	subs	r3, r3, r2
 800bdf0:	42ac      	cmp	r4, r5
 800bdf2:	bf88      	it	hi
 800bdf4:	2300      	movhi	r3, #0
 800bdf6:	3302      	adds	r3, #2
 800bdf8:	4403      	add	r3, r0
 800bdfa:	1a18      	subs	r0, r3, r0
 800bdfc:	b003      	add	sp, #12
 800bdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be00:	f813 6b01 	ldrb.w	r6, [r3], #1
 800be04:	f801 6f01 	strb.w	r6, [r1, #1]!
 800be08:	e7ed      	b.n	800bde6 <__exponent+0x44>
 800be0a:	2330      	movs	r3, #48	@ 0x30
 800be0c:	3130      	adds	r1, #48	@ 0x30
 800be0e:	7083      	strb	r3, [r0, #2]
 800be10:	70c1      	strb	r1, [r0, #3]
 800be12:	1d03      	adds	r3, r0, #4
 800be14:	e7f1      	b.n	800bdfa <__exponent+0x58>
	...

0800be18 <_printf_float>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	b08d      	sub	sp, #52	@ 0x34
 800be1e:	460c      	mov	r4, r1
 800be20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800be24:	4616      	mov	r6, r2
 800be26:	461f      	mov	r7, r3
 800be28:	4605      	mov	r5, r0
 800be2a:	f000 fd49 	bl	800c8c0 <_localeconv_r>
 800be2e:	6803      	ldr	r3, [r0, #0]
 800be30:	9304      	str	r3, [sp, #16]
 800be32:	4618      	mov	r0, r3
 800be34:	f7f4 fa54 	bl	80002e0 <strlen>
 800be38:	2300      	movs	r3, #0
 800be3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800be3c:	f8d8 3000 	ldr.w	r3, [r8]
 800be40:	9005      	str	r0, [sp, #20]
 800be42:	3307      	adds	r3, #7
 800be44:	f023 0307 	bic.w	r3, r3, #7
 800be48:	f103 0208 	add.w	r2, r3, #8
 800be4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800be50:	f8d4 b000 	ldr.w	fp, [r4]
 800be54:	f8c8 2000 	str.w	r2, [r8]
 800be58:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800be60:	9307      	str	r3, [sp, #28]
 800be62:	f8cd 8018 	str.w	r8, [sp, #24]
 800be66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800be6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be6e:	4b9c      	ldr	r3, [pc, #624]	@ (800c0e0 <_printf_float+0x2c8>)
 800be70:	f04f 32ff 	mov.w	r2, #4294967295
 800be74:	f7f4 fe92 	bl	8000b9c <__aeabi_dcmpun>
 800be78:	bb70      	cbnz	r0, 800bed8 <_printf_float+0xc0>
 800be7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be7e:	4b98      	ldr	r3, [pc, #608]	@ (800c0e0 <_printf_float+0x2c8>)
 800be80:	f04f 32ff 	mov.w	r2, #4294967295
 800be84:	f7f4 fe6c 	bl	8000b60 <__aeabi_dcmple>
 800be88:	bb30      	cbnz	r0, 800bed8 <_printf_float+0xc0>
 800be8a:	2200      	movs	r2, #0
 800be8c:	2300      	movs	r3, #0
 800be8e:	4640      	mov	r0, r8
 800be90:	4649      	mov	r1, r9
 800be92:	f7f4 fe5b 	bl	8000b4c <__aeabi_dcmplt>
 800be96:	b110      	cbz	r0, 800be9e <_printf_float+0x86>
 800be98:	232d      	movs	r3, #45	@ 0x2d
 800be9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be9e:	4a91      	ldr	r2, [pc, #580]	@ (800c0e4 <_printf_float+0x2cc>)
 800bea0:	4b91      	ldr	r3, [pc, #580]	@ (800c0e8 <_printf_float+0x2d0>)
 800bea2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bea6:	bf94      	ite	ls
 800bea8:	4690      	movls	r8, r2
 800beaa:	4698      	movhi	r8, r3
 800beac:	2303      	movs	r3, #3
 800beae:	6123      	str	r3, [r4, #16]
 800beb0:	f02b 0304 	bic.w	r3, fp, #4
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	f04f 0900 	mov.w	r9, #0
 800beba:	9700      	str	r7, [sp, #0]
 800bebc:	4633      	mov	r3, r6
 800bebe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bec0:	4621      	mov	r1, r4
 800bec2:	4628      	mov	r0, r5
 800bec4:	f000 f9d2 	bl	800c26c <_printf_common>
 800bec8:	3001      	adds	r0, #1
 800beca:	f040 808d 	bne.w	800bfe8 <_printf_float+0x1d0>
 800bece:	f04f 30ff 	mov.w	r0, #4294967295
 800bed2:	b00d      	add	sp, #52	@ 0x34
 800bed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed8:	4642      	mov	r2, r8
 800beda:	464b      	mov	r3, r9
 800bedc:	4640      	mov	r0, r8
 800bede:	4649      	mov	r1, r9
 800bee0:	f7f4 fe5c 	bl	8000b9c <__aeabi_dcmpun>
 800bee4:	b140      	cbz	r0, 800bef8 <_printf_float+0xe0>
 800bee6:	464b      	mov	r3, r9
 800bee8:	2b00      	cmp	r3, #0
 800beea:	bfbc      	itt	lt
 800beec:	232d      	movlt	r3, #45	@ 0x2d
 800beee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bef2:	4a7e      	ldr	r2, [pc, #504]	@ (800c0ec <_printf_float+0x2d4>)
 800bef4:	4b7e      	ldr	r3, [pc, #504]	@ (800c0f0 <_printf_float+0x2d8>)
 800bef6:	e7d4      	b.n	800bea2 <_printf_float+0x8a>
 800bef8:	6863      	ldr	r3, [r4, #4]
 800befa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800befe:	9206      	str	r2, [sp, #24]
 800bf00:	1c5a      	adds	r2, r3, #1
 800bf02:	d13b      	bne.n	800bf7c <_printf_float+0x164>
 800bf04:	2306      	movs	r3, #6
 800bf06:	6063      	str	r3, [r4, #4]
 800bf08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	6022      	str	r2, [r4, #0]
 800bf10:	9303      	str	r3, [sp, #12]
 800bf12:	ab0a      	add	r3, sp, #40	@ 0x28
 800bf14:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bf18:	ab09      	add	r3, sp, #36	@ 0x24
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	6861      	ldr	r1, [r4, #4]
 800bf1e:	ec49 8b10 	vmov	d0, r8, r9
 800bf22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bf26:	4628      	mov	r0, r5
 800bf28:	f7ff fed6 	bl	800bcd8 <__cvt>
 800bf2c:	9b06      	ldr	r3, [sp, #24]
 800bf2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf30:	2b47      	cmp	r3, #71	@ 0x47
 800bf32:	4680      	mov	r8, r0
 800bf34:	d129      	bne.n	800bf8a <_printf_float+0x172>
 800bf36:	1cc8      	adds	r0, r1, #3
 800bf38:	db02      	blt.n	800bf40 <_printf_float+0x128>
 800bf3a:	6863      	ldr	r3, [r4, #4]
 800bf3c:	4299      	cmp	r1, r3
 800bf3e:	dd41      	ble.n	800bfc4 <_printf_float+0x1ac>
 800bf40:	f1aa 0a02 	sub.w	sl, sl, #2
 800bf44:	fa5f fa8a 	uxtb.w	sl, sl
 800bf48:	3901      	subs	r1, #1
 800bf4a:	4652      	mov	r2, sl
 800bf4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bf50:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf52:	f7ff ff26 	bl	800bda2 <__exponent>
 800bf56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf58:	1813      	adds	r3, r2, r0
 800bf5a:	2a01      	cmp	r2, #1
 800bf5c:	4681      	mov	r9, r0
 800bf5e:	6123      	str	r3, [r4, #16]
 800bf60:	dc02      	bgt.n	800bf68 <_printf_float+0x150>
 800bf62:	6822      	ldr	r2, [r4, #0]
 800bf64:	07d2      	lsls	r2, r2, #31
 800bf66:	d501      	bpl.n	800bf6c <_printf_float+0x154>
 800bf68:	3301      	adds	r3, #1
 800bf6a:	6123      	str	r3, [r4, #16]
 800bf6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d0a2      	beq.n	800beba <_printf_float+0xa2>
 800bf74:	232d      	movs	r3, #45	@ 0x2d
 800bf76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf7a:	e79e      	b.n	800beba <_printf_float+0xa2>
 800bf7c:	9a06      	ldr	r2, [sp, #24]
 800bf7e:	2a47      	cmp	r2, #71	@ 0x47
 800bf80:	d1c2      	bne.n	800bf08 <_printf_float+0xf0>
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1c0      	bne.n	800bf08 <_printf_float+0xf0>
 800bf86:	2301      	movs	r3, #1
 800bf88:	e7bd      	b.n	800bf06 <_printf_float+0xee>
 800bf8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf8e:	d9db      	bls.n	800bf48 <_printf_float+0x130>
 800bf90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bf94:	d118      	bne.n	800bfc8 <_printf_float+0x1b0>
 800bf96:	2900      	cmp	r1, #0
 800bf98:	6863      	ldr	r3, [r4, #4]
 800bf9a:	dd0b      	ble.n	800bfb4 <_printf_float+0x19c>
 800bf9c:	6121      	str	r1, [r4, #16]
 800bf9e:	b913      	cbnz	r3, 800bfa6 <_printf_float+0x18e>
 800bfa0:	6822      	ldr	r2, [r4, #0]
 800bfa2:	07d0      	lsls	r0, r2, #31
 800bfa4:	d502      	bpl.n	800bfac <_printf_float+0x194>
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	440b      	add	r3, r1
 800bfaa:	6123      	str	r3, [r4, #16]
 800bfac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bfae:	f04f 0900 	mov.w	r9, #0
 800bfb2:	e7db      	b.n	800bf6c <_printf_float+0x154>
 800bfb4:	b913      	cbnz	r3, 800bfbc <_printf_float+0x1a4>
 800bfb6:	6822      	ldr	r2, [r4, #0]
 800bfb8:	07d2      	lsls	r2, r2, #31
 800bfba:	d501      	bpl.n	800bfc0 <_printf_float+0x1a8>
 800bfbc:	3302      	adds	r3, #2
 800bfbe:	e7f4      	b.n	800bfaa <_printf_float+0x192>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e7f2      	b.n	800bfaa <_printf_float+0x192>
 800bfc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bfc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfca:	4299      	cmp	r1, r3
 800bfcc:	db05      	blt.n	800bfda <_printf_float+0x1c2>
 800bfce:	6823      	ldr	r3, [r4, #0]
 800bfd0:	6121      	str	r1, [r4, #16]
 800bfd2:	07d8      	lsls	r0, r3, #31
 800bfd4:	d5ea      	bpl.n	800bfac <_printf_float+0x194>
 800bfd6:	1c4b      	adds	r3, r1, #1
 800bfd8:	e7e7      	b.n	800bfaa <_printf_float+0x192>
 800bfda:	2900      	cmp	r1, #0
 800bfdc:	bfd4      	ite	le
 800bfde:	f1c1 0202 	rsble	r2, r1, #2
 800bfe2:	2201      	movgt	r2, #1
 800bfe4:	4413      	add	r3, r2
 800bfe6:	e7e0      	b.n	800bfaa <_printf_float+0x192>
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	055a      	lsls	r2, r3, #21
 800bfec:	d407      	bmi.n	800bffe <_printf_float+0x1e6>
 800bfee:	6923      	ldr	r3, [r4, #16]
 800bff0:	4642      	mov	r2, r8
 800bff2:	4631      	mov	r1, r6
 800bff4:	4628      	mov	r0, r5
 800bff6:	47b8      	blx	r7
 800bff8:	3001      	adds	r0, #1
 800bffa:	d12b      	bne.n	800c054 <_printf_float+0x23c>
 800bffc:	e767      	b.n	800bece <_printf_float+0xb6>
 800bffe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c002:	f240 80dd 	bls.w	800c1c0 <_printf_float+0x3a8>
 800c006:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c00a:	2200      	movs	r2, #0
 800c00c:	2300      	movs	r3, #0
 800c00e:	f7f4 fd93 	bl	8000b38 <__aeabi_dcmpeq>
 800c012:	2800      	cmp	r0, #0
 800c014:	d033      	beq.n	800c07e <_printf_float+0x266>
 800c016:	4a37      	ldr	r2, [pc, #220]	@ (800c0f4 <_printf_float+0x2dc>)
 800c018:	2301      	movs	r3, #1
 800c01a:	4631      	mov	r1, r6
 800c01c:	4628      	mov	r0, r5
 800c01e:	47b8      	blx	r7
 800c020:	3001      	adds	r0, #1
 800c022:	f43f af54 	beq.w	800bece <_printf_float+0xb6>
 800c026:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c02a:	4543      	cmp	r3, r8
 800c02c:	db02      	blt.n	800c034 <_printf_float+0x21c>
 800c02e:	6823      	ldr	r3, [r4, #0]
 800c030:	07d8      	lsls	r0, r3, #31
 800c032:	d50f      	bpl.n	800c054 <_printf_float+0x23c>
 800c034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c038:	4631      	mov	r1, r6
 800c03a:	4628      	mov	r0, r5
 800c03c:	47b8      	blx	r7
 800c03e:	3001      	adds	r0, #1
 800c040:	f43f af45 	beq.w	800bece <_printf_float+0xb6>
 800c044:	f04f 0900 	mov.w	r9, #0
 800c048:	f108 38ff 	add.w	r8, r8, #4294967295
 800c04c:	f104 0a1a 	add.w	sl, r4, #26
 800c050:	45c8      	cmp	r8, r9
 800c052:	dc09      	bgt.n	800c068 <_printf_float+0x250>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	079b      	lsls	r3, r3, #30
 800c058:	f100 8103 	bmi.w	800c262 <_printf_float+0x44a>
 800c05c:	68e0      	ldr	r0, [r4, #12]
 800c05e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c060:	4298      	cmp	r0, r3
 800c062:	bfb8      	it	lt
 800c064:	4618      	movlt	r0, r3
 800c066:	e734      	b.n	800bed2 <_printf_float+0xba>
 800c068:	2301      	movs	r3, #1
 800c06a:	4652      	mov	r2, sl
 800c06c:	4631      	mov	r1, r6
 800c06e:	4628      	mov	r0, r5
 800c070:	47b8      	blx	r7
 800c072:	3001      	adds	r0, #1
 800c074:	f43f af2b 	beq.w	800bece <_printf_float+0xb6>
 800c078:	f109 0901 	add.w	r9, r9, #1
 800c07c:	e7e8      	b.n	800c050 <_printf_float+0x238>
 800c07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c080:	2b00      	cmp	r3, #0
 800c082:	dc39      	bgt.n	800c0f8 <_printf_float+0x2e0>
 800c084:	4a1b      	ldr	r2, [pc, #108]	@ (800c0f4 <_printf_float+0x2dc>)
 800c086:	2301      	movs	r3, #1
 800c088:	4631      	mov	r1, r6
 800c08a:	4628      	mov	r0, r5
 800c08c:	47b8      	blx	r7
 800c08e:	3001      	adds	r0, #1
 800c090:	f43f af1d 	beq.w	800bece <_printf_float+0xb6>
 800c094:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c098:	ea59 0303 	orrs.w	r3, r9, r3
 800c09c:	d102      	bne.n	800c0a4 <_printf_float+0x28c>
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	07d9      	lsls	r1, r3, #31
 800c0a2:	d5d7      	bpl.n	800c054 <_printf_float+0x23c>
 800c0a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	47b8      	blx	r7
 800c0ae:	3001      	adds	r0, #1
 800c0b0:	f43f af0d 	beq.w	800bece <_printf_float+0xb6>
 800c0b4:	f04f 0a00 	mov.w	sl, #0
 800c0b8:	f104 0b1a 	add.w	fp, r4, #26
 800c0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0be:	425b      	negs	r3, r3
 800c0c0:	4553      	cmp	r3, sl
 800c0c2:	dc01      	bgt.n	800c0c8 <_printf_float+0x2b0>
 800c0c4:	464b      	mov	r3, r9
 800c0c6:	e793      	b.n	800bff0 <_printf_float+0x1d8>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	465a      	mov	r2, fp
 800c0cc:	4631      	mov	r1, r6
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	47b8      	blx	r7
 800c0d2:	3001      	adds	r0, #1
 800c0d4:	f43f aefb 	beq.w	800bece <_printf_float+0xb6>
 800c0d8:	f10a 0a01 	add.w	sl, sl, #1
 800c0dc:	e7ee      	b.n	800c0bc <_printf_float+0x2a4>
 800c0de:	bf00      	nop
 800c0e0:	7fefffff 	.word	0x7fefffff
 800c0e4:	0800f4d0 	.word	0x0800f4d0
 800c0e8:	0800f4d4 	.word	0x0800f4d4
 800c0ec:	0800f4d8 	.word	0x0800f4d8
 800c0f0:	0800f4dc 	.word	0x0800f4dc
 800c0f4:	0800f4e0 	.word	0x0800f4e0
 800c0f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c0fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c0fe:	4553      	cmp	r3, sl
 800c100:	bfa8      	it	ge
 800c102:	4653      	movge	r3, sl
 800c104:	2b00      	cmp	r3, #0
 800c106:	4699      	mov	r9, r3
 800c108:	dc36      	bgt.n	800c178 <_printf_float+0x360>
 800c10a:	f04f 0b00 	mov.w	fp, #0
 800c10e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c112:	f104 021a 	add.w	r2, r4, #26
 800c116:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c118:	9306      	str	r3, [sp, #24]
 800c11a:	eba3 0309 	sub.w	r3, r3, r9
 800c11e:	455b      	cmp	r3, fp
 800c120:	dc31      	bgt.n	800c186 <_printf_float+0x36e>
 800c122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c124:	459a      	cmp	sl, r3
 800c126:	dc3a      	bgt.n	800c19e <_printf_float+0x386>
 800c128:	6823      	ldr	r3, [r4, #0]
 800c12a:	07da      	lsls	r2, r3, #31
 800c12c:	d437      	bmi.n	800c19e <_printf_float+0x386>
 800c12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c130:	ebaa 0903 	sub.w	r9, sl, r3
 800c134:	9b06      	ldr	r3, [sp, #24]
 800c136:	ebaa 0303 	sub.w	r3, sl, r3
 800c13a:	4599      	cmp	r9, r3
 800c13c:	bfa8      	it	ge
 800c13e:	4699      	movge	r9, r3
 800c140:	f1b9 0f00 	cmp.w	r9, #0
 800c144:	dc33      	bgt.n	800c1ae <_printf_float+0x396>
 800c146:	f04f 0800 	mov.w	r8, #0
 800c14a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c14e:	f104 0b1a 	add.w	fp, r4, #26
 800c152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c154:	ebaa 0303 	sub.w	r3, sl, r3
 800c158:	eba3 0309 	sub.w	r3, r3, r9
 800c15c:	4543      	cmp	r3, r8
 800c15e:	f77f af79 	ble.w	800c054 <_printf_float+0x23c>
 800c162:	2301      	movs	r3, #1
 800c164:	465a      	mov	r2, fp
 800c166:	4631      	mov	r1, r6
 800c168:	4628      	mov	r0, r5
 800c16a:	47b8      	blx	r7
 800c16c:	3001      	adds	r0, #1
 800c16e:	f43f aeae 	beq.w	800bece <_printf_float+0xb6>
 800c172:	f108 0801 	add.w	r8, r8, #1
 800c176:	e7ec      	b.n	800c152 <_printf_float+0x33a>
 800c178:	4642      	mov	r2, r8
 800c17a:	4631      	mov	r1, r6
 800c17c:	4628      	mov	r0, r5
 800c17e:	47b8      	blx	r7
 800c180:	3001      	adds	r0, #1
 800c182:	d1c2      	bne.n	800c10a <_printf_float+0x2f2>
 800c184:	e6a3      	b.n	800bece <_printf_float+0xb6>
 800c186:	2301      	movs	r3, #1
 800c188:	4631      	mov	r1, r6
 800c18a:	4628      	mov	r0, r5
 800c18c:	9206      	str	r2, [sp, #24]
 800c18e:	47b8      	blx	r7
 800c190:	3001      	adds	r0, #1
 800c192:	f43f ae9c 	beq.w	800bece <_printf_float+0xb6>
 800c196:	9a06      	ldr	r2, [sp, #24]
 800c198:	f10b 0b01 	add.w	fp, fp, #1
 800c19c:	e7bb      	b.n	800c116 <_printf_float+0x2fe>
 800c19e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	47b8      	blx	r7
 800c1a8:	3001      	adds	r0, #1
 800c1aa:	d1c0      	bne.n	800c12e <_printf_float+0x316>
 800c1ac:	e68f      	b.n	800bece <_printf_float+0xb6>
 800c1ae:	9a06      	ldr	r2, [sp, #24]
 800c1b0:	464b      	mov	r3, r9
 800c1b2:	4442      	add	r2, r8
 800c1b4:	4631      	mov	r1, r6
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	47b8      	blx	r7
 800c1ba:	3001      	adds	r0, #1
 800c1bc:	d1c3      	bne.n	800c146 <_printf_float+0x32e>
 800c1be:	e686      	b.n	800bece <_printf_float+0xb6>
 800c1c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c1c4:	f1ba 0f01 	cmp.w	sl, #1
 800c1c8:	dc01      	bgt.n	800c1ce <_printf_float+0x3b6>
 800c1ca:	07db      	lsls	r3, r3, #31
 800c1cc:	d536      	bpl.n	800c23c <_printf_float+0x424>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	4642      	mov	r2, r8
 800c1d2:	4631      	mov	r1, r6
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	47b8      	blx	r7
 800c1d8:	3001      	adds	r0, #1
 800c1da:	f43f ae78 	beq.w	800bece <_printf_float+0xb6>
 800c1de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	47b8      	blx	r7
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	f43f ae70 	beq.w	800bece <_printf_float+0xb6>
 800c1ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1fa:	f7f4 fc9d 	bl	8000b38 <__aeabi_dcmpeq>
 800c1fe:	b9c0      	cbnz	r0, 800c232 <_printf_float+0x41a>
 800c200:	4653      	mov	r3, sl
 800c202:	f108 0201 	add.w	r2, r8, #1
 800c206:	4631      	mov	r1, r6
 800c208:	4628      	mov	r0, r5
 800c20a:	47b8      	blx	r7
 800c20c:	3001      	adds	r0, #1
 800c20e:	d10c      	bne.n	800c22a <_printf_float+0x412>
 800c210:	e65d      	b.n	800bece <_printf_float+0xb6>
 800c212:	2301      	movs	r3, #1
 800c214:	465a      	mov	r2, fp
 800c216:	4631      	mov	r1, r6
 800c218:	4628      	mov	r0, r5
 800c21a:	47b8      	blx	r7
 800c21c:	3001      	adds	r0, #1
 800c21e:	f43f ae56 	beq.w	800bece <_printf_float+0xb6>
 800c222:	f108 0801 	add.w	r8, r8, #1
 800c226:	45d0      	cmp	r8, sl
 800c228:	dbf3      	blt.n	800c212 <_printf_float+0x3fa>
 800c22a:	464b      	mov	r3, r9
 800c22c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c230:	e6df      	b.n	800bff2 <_printf_float+0x1da>
 800c232:	f04f 0800 	mov.w	r8, #0
 800c236:	f104 0b1a 	add.w	fp, r4, #26
 800c23a:	e7f4      	b.n	800c226 <_printf_float+0x40e>
 800c23c:	2301      	movs	r3, #1
 800c23e:	4642      	mov	r2, r8
 800c240:	e7e1      	b.n	800c206 <_printf_float+0x3ee>
 800c242:	2301      	movs	r3, #1
 800c244:	464a      	mov	r2, r9
 800c246:	4631      	mov	r1, r6
 800c248:	4628      	mov	r0, r5
 800c24a:	47b8      	blx	r7
 800c24c:	3001      	adds	r0, #1
 800c24e:	f43f ae3e 	beq.w	800bece <_printf_float+0xb6>
 800c252:	f108 0801 	add.w	r8, r8, #1
 800c256:	68e3      	ldr	r3, [r4, #12]
 800c258:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c25a:	1a5b      	subs	r3, r3, r1
 800c25c:	4543      	cmp	r3, r8
 800c25e:	dcf0      	bgt.n	800c242 <_printf_float+0x42a>
 800c260:	e6fc      	b.n	800c05c <_printf_float+0x244>
 800c262:	f04f 0800 	mov.w	r8, #0
 800c266:	f104 0919 	add.w	r9, r4, #25
 800c26a:	e7f4      	b.n	800c256 <_printf_float+0x43e>

0800c26c <_printf_common>:
 800c26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c270:	4616      	mov	r6, r2
 800c272:	4698      	mov	r8, r3
 800c274:	688a      	ldr	r2, [r1, #8]
 800c276:	690b      	ldr	r3, [r1, #16]
 800c278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c27c:	4293      	cmp	r3, r2
 800c27e:	bfb8      	it	lt
 800c280:	4613      	movlt	r3, r2
 800c282:	6033      	str	r3, [r6, #0]
 800c284:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c288:	4607      	mov	r7, r0
 800c28a:	460c      	mov	r4, r1
 800c28c:	b10a      	cbz	r2, 800c292 <_printf_common+0x26>
 800c28e:	3301      	adds	r3, #1
 800c290:	6033      	str	r3, [r6, #0]
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	0699      	lsls	r1, r3, #26
 800c296:	bf42      	ittt	mi
 800c298:	6833      	ldrmi	r3, [r6, #0]
 800c29a:	3302      	addmi	r3, #2
 800c29c:	6033      	strmi	r3, [r6, #0]
 800c29e:	6825      	ldr	r5, [r4, #0]
 800c2a0:	f015 0506 	ands.w	r5, r5, #6
 800c2a4:	d106      	bne.n	800c2b4 <_printf_common+0x48>
 800c2a6:	f104 0a19 	add.w	sl, r4, #25
 800c2aa:	68e3      	ldr	r3, [r4, #12]
 800c2ac:	6832      	ldr	r2, [r6, #0]
 800c2ae:	1a9b      	subs	r3, r3, r2
 800c2b0:	42ab      	cmp	r3, r5
 800c2b2:	dc26      	bgt.n	800c302 <_printf_common+0x96>
 800c2b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c2b8:	6822      	ldr	r2, [r4, #0]
 800c2ba:	3b00      	subs	r3, #0
 800c2bc:	bf18      	it	ne
 800c2be:	2301      	movne	r3, #1
 800c2c0:	0692      	lsls	r2, r2, #26
 800c2c2:	d42b      	bmi.n	800c31c <_printf_common+0xb0>
 800c2c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c2c8:	4641      	mov	r1, r8
 800c2ca:	4638      	mov	r0, r7
 800c2cc:	47c8      	blx	r9
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	d01e      	beq.n	800c310 <_printf_common+0xa4>
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	6922      	ldr	r2, [r4, #16]
 800c2d6:	f003 0306 	and.w	r3, r3, #6
 800c2da:	2b04      	cmp	r3, #4
 800c2dc:	bf02      	ittt	eq
 800c2de:	68e5      	ldreq	r5, [r4, #12]
 800c2e0:	6833      	ldreq	r3, [r6, #0]
 800c2e2:	1aed      	subeq	r5, r5, r3
 800c2e4:	68a3      	ldr	r3, [r4, #8]
 800c2e6:	bf0c      	ite	eq
 800c2e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2ec:	2500      	movne	r5, #0
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	bfc4      	itt	gt
 800c2f2:	1a9b      	subgt	r3, r3, r2
 800c2f4:	18ed      	addgt	r5, r5, r3
 800c2f6:	2600      	movs	r6, #0
 800c2f8:	341a      	adds	r4, #26
 800c2fa:	42b5      	cmp	r5, r6
 800c2fc:	d11a      	bne.n	800c334 <_printf_common+0xc8>
 800c2fe:	2000      	movs	r0, #0
 800c300:	e008      	b.n	800c314 <_printf_common+0xa8>
 800c302:	2301      	movs	r3, #1
 800c304:	4652      	mov	r2, sl
 800c306:	4641      	mov	r1, r8
 800c308:	4638      	mov	r0, r7
 800c30a:	47c8      	blx	r9
 800c30c:	3001      	adds	r0, #1
 800c30e:	d103      	bne.n	800c318 <_printf_common+0xac>
 800c310:	f04f 30ff 	mov.w	r0, #4294967295
 800c314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c318:	3501      	adds	r5, #1
 800c31a:	e7c6      	b.n	800c2aa <_printf_common+0x3e>
 800c31c:	18e1      	adds	r1, r4, r3
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	2030      	movs	r0, #48	@ 0x30
 800c322:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c326:	4422      	add	r2, r4
 800c328:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c32c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c330:	3302      	adds	r3, #2
 800c332:	e7c7      	b.n	800c2c4 <_printf_common+0x58>
 800c334:	2301      	movs	r3, #1
 800c336:	4622      	mov	r2, r4
 800c338:	4641      	mov	r1, r8
 800c33a:	4638      	mov	r0, r7
 800c33c:	47c8      	blx	r9
 800c33e:	3001      	adds	r0, #1
 800c340:	d0e6      	beq.n	800c310 <_printf_common+0xa4>
 800c342:	3601      	adds	r6, #1
 800c344:	e7d9      	b.n	800c2fa <_printf_common+0x8e>
	...

0800c348 <_printf_i>:
 800c348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c34c:	7e0f      	ldrb	r7, [r1, #24]
 800c34e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c350:	2f78      	cmp	r7, #120	@ 0x78
 800c352:	4691      	mov	r9, r2
 800c354:	4680      	mov	r8, r0
 800c356:	460c      	mov	r4, r1
 800c358:	469a      	mov	sl, r3
 800c35a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c35e:	d807      	bhi.n	800c370 <_printf_i+0x28>
 800c360:	2f62      	cmp	r7, #98	@ 0x62
 800c362:	d80a      	bhi.n	800c37a <_printf_i+0x32>
 800c364:	2f00      	cmp	r7, #0
 800c366:	f000 80d2 	beq.w	800c50e <_printf_i+0x1c6>
 800c36a:	2f58      	cmp	r7, #88	@ 0x58
 800c36c:	f000 80b9 	beq.w	800c4e2 <_printf_i+0x19a>
 800c370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c378:	e03a      	b.n	800c3f0 <_printf_i+0xa8>
 800c37a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c37e:	2b15      	cmp	r3, #21
 800c380:	d8f6      	bhi.n	800c370 <_printf_i+0x28>
 800c382:	a101      	add	r1, pc, #4	@ (adr r1, 800c388 <_printf_i+0x40>)
 800c384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c388:	0800c3e1 	.word	0x0800c3e1
 800c38c:	0800c3f5 	.word	0x0800c3f5
 800c390:	0800c371 	.word	0x0800c371
 800c394:	0800c371 	.word	0x0800c371
 800c398:	0800c371 	.word	0x0800c371
 800c39c:	0800c371 	.word	0x0800c371
 800c3a0:	0800c3f5 	.word	0x0800c3f5
 800c3a4:	0800c371 	.word	0x0800c371
 800c3a8:	0800c371 	.word	0x0800c371
 800c3ac:	0800c371 	.word	0x0800c371
 800c3b0:	0800c371 	.word	0x0800c371
 800c3b4:	0800c4f5 	.word	0x0800c4f5
 800c3b8:	0800c41f 	.word	0x0800c41f
 800c3bc:	0800c4af 	.word	0x0800c4af
 800c3c0:	0800c371 	.word	0x0800c371
 800c3c4:	0800c371 	.word	0x0800c371
 800c3c8:	0800c517 	.word	0x0800c517
 800c3cc:	0800c371 	.word	0x0800c371
 800c3d0:	0800c41f 	.word	0x0800c41f
 800c3d4:	0800c371 	.word	0x0800c371
 800c3d8:	0800c371 	.word	0x0800c371
 800c3dc:	0800c4b7 	.word	0x0800c4b7
 800c3e0:	6833      	ldr	r3, [r6, #0]
 800c3e2:	1d1a      	adds	r2, r3, #4
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	6032      	str	r2, [r6, #0]
 800c3e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e09d      	b.n	800c530 <_printf_i+0x1e8>
 800c3f4:	6833      	ldr	r3, [r6, #0]
 800c3f6:	6820      	ldr	r0, [r4, #0]
 800c3f8:	1d19      	adds	r1, r3, #4
 800c3fa:	6031      	str	r1, [r6, #0]
 800c3fc:	0606      	lsls	r6, r0, #24
 800c3fe:	d501      	bpl.n	800c404 <_printf_i+0xbc>
 800c400:	681d      	ldr	r5, [r3, #0]
 800c402:	e003      	b.n	800c40c <_printf_i+0xc4>
 800c404:	0645      	lsls	r5, r0, #25
 800c406:	d5fb      	bpl.n	800c400 <_printf_i+0xb8>
 800c408:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c40c:	2d00      	cmp	r5, #0
 800c40e:	da03      	bge.n	800c418 <_printf_i+0xd0>
 800c410:	232d      	movs	r3, #45	@ 0x2d
 800c412:	426d      	negs	r5, r5
 800c414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c418:	4859      	ldr	r0, [pc, #356]	@ (800c580 <_printf_i+0x238>)
 800c41a:	230a      	movs	r3, #10
 800c41c:	e011      	b.n	800c442 <_printf_i+0xfa>
 800c41e:	6821      	ldr	r1, [r4, #0]
 800c420:	6833      	ldr	r3, [r6, #0]
 800c422:	0608      	lsls	r0, r1, #24
 800c424:	f853 5b04 	ldr.w	r5, [r3], #4
 800c428:	d402      	bmi.n	800c430 <_printf_i+0xe8>
 800c42a:	0649      	lsls	r1, r1, #25
 800c42c:	bf48      	it	mi
 800c42e:	b2ad      	uxthmi	r5, r5
 800c430:	2f6f      	cmp	r7, #111	@ 0x6f
 800c432:	4853      	ldr	r0, [pc, #332]	@ (800c580 <_printf_i+0x238>)
 800c434:	6033      	str	r3, [r6, #0]
 800c436:	bf14      	ite	ne
 800c438:	230a      	movne	r3, #10
 800c43a:	2308      	moveq	r3, #8
 800c43c:	2100      	movs	r1, #0
 800c43e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c442:	6866      	ldr	r6, [r4, #4]
 800c444:	60a6      	str	r6, [r4, #8]
 800c446:	2e00      	cmp	r6, #0
 800c448:	bfa2      	ittt	ge
 800c44a:	6821      	ldrge	r1, [r4, #0]
 800c44c:	f021 0104 	bicge.w	r1, r1, #4
 800c450:	6021      	strge	r1, [r4, #0]
 800c452:	b90d      	cbnz	r5, 800c458 <_printf_i+0x110>
 800c454:	2e00      	cmp	r6, #0
 800c456:	d04b      	beq.n	800c4f0 <_printf_i+0x1a8>
 800c458:	4616      	mov	r6, r2
 800c45a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c45e:	fb03 5711 	mls	r7, r3, r1, r5
 800c462:	5dc7      	ldrb	r7, [r0, r7]
 800c464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c468:	462f      	mov	r7, r5
 800c46a:	42bb      	cmp	r3, r7
 800c46c:	460d      	mov	r5, r1
 800c46e:	d9f4      	bls.n	800c45a <_printf_i+0x112>
 800c470:	2b08      	cmp	r3, #8
 800c472:	d10b      	bne.n	800c48c <_printf_i+0x144>
 800c474:	6823      	ldr	r3, [r4, #0]
 800c476:	07df      	lsls	r7, r3, #31
 800c478:	d508      	bpl.n	800c48c <_printf_i+0x144>
 800c47a:	6923      	ldr	r3, [r4, #16]
 800c47c:	6861      	ldr	r1, [r4, #4]
 800c47e:	4299      	cmp	r1, r3
 800c480:	bfde      	ittt	le
 800c482:	2330      	movle	r3, #48	@ 0x30
 800c484:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c488:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c48c:	1b92      	subs	r2, r2, r6
 800c48e:	6122      	str	r2, [r4, #16]
 800c490:	f8cd a000 	str.w	sl, [sp]
 800c494:	464b      	mov	r3, r9
 800c496:	aa03      	add	r2, sp, #12
 800c498:	4621      	mov	r1, r4
 800c49a:	4640      	mov	r0, r8
 800c49c:	f7ff fee6 	bl	800c26c <_printf_common>
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	d14a      	bne.n	800c53a <_printf_i+0x1f2>
 800c4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a8:	b004      	add	sp, #16
 800c4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ae:	6823      	ldr	r3, [r4, #0]
 800c4b0:	f043 0320 	orr.w	r3, r3, #32
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	4833      	ldr	r0, [pc, #204]	@ (800c584 <_printf_i+0x23c>)
 800c4b8:	2778      	movs	r7, #120	@ 0x78
 800c4ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	6831      	ldr	r1, [r6, #0]
 800c4c2:	061f      	lsls	r7, r3, #24
 800c4c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c4c8:	d402      	bmi.n	800c4d0 <_printf_i+0x188>
 800c4ca:	065f      	lsls	r7, r3, #25
 800c4cc:	bf48      	it	mi
 800c4ce:	b2ad      	uxthmi	r5, r5
 800c4d0:	6031      	str	r1, [r6, #0]
 800c4d2:	07d9      	lsls	r1, r3, #31
 800c4d4:	bf44      	itt	mi
 800c4d6:	f043 0320 	orrmi.w	r3, r3, #32
 800c4da:	6023      	strmi	r3, [r4, #0]
 800c4dc:	b11d      	cbz	r5, 800c4e6 <_printf_i+0x19e>
 800c4de:	2310      	movs	r3, #16
 800c4e0:	e7ac      	b.n	800c43c <_printf_i+0xf4>
 800c4e2:	4827      	ldr	r0, [pc, #156]	@ (800c580 <_printf_i+0x238>)
 800c4e4:	e7e9      	b.n	800c4ba <_printf_i+0x172>
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	f023 0320 	bic.w	r3, r3, #32
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	e7f6      	b.n	800c4de <_printf_i+0x196>
 800c4f0:	4616      	mov	r6, r2
 800c4f2:	e7bd      	b.n	800c470 <_printf_i+0x128>
 800c4f4:	6833      	ldr	r3, [r6, #0]
 800c4f6:	6825      	ldr	r5, [r4, #0]
 800c4f8:	6961      	ldr	r1, [r4, #20]
 800c4fa:	1d18      	adds	r0, r3, #4
 800c4fc:	6030      	str	r0, [r6, #0]
 800c4fe:	062e      	lsls	r6, r5, #24
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	d501      	bpl.n	800c508 <_printf_i+0x1c0>
 800c504:	6019      	str	r1, [r3, #0]
 800c506:	e002      	b.n	800c50e <_printf_i+0x1c6>
 800c508:	0668      	lsls	r0, r5, #25
 800c50a:	d5fb      	bpl.n	800c504 <_printf_i+0x1bc>
 800c50c:	8019      	strh	r1, [r3, #0]
 800c50e:	2300      	movs	r3, #0
 800c510:	6123      	str	r3, [r4, #16]
 800c512:	4616      	mov	r6, r2
 800c514:	e7bc      	b.n	800c490 <_printf_i+0x148>
 800c516:	6833      	ldr	r3, [r6, #0]
 800c518:	1d1a      	adds	r2, r3, #4
 800c51a:	6032      	str	r2, [r6, #0]
 800c51c:	681e      	ldr	r6, [r3, #0]
 800c51e:	6862      	ldr	r2, [r4, #4]
 800c520:	2100      	movs	r1, #0
 800c522:	4630      	mov	r0, r6
 800c524:	f7f3 fe8c 	bl	8000240 <memchr>
 800c528:	b108      	cbz	r0, 800c52e <_printf_i+0x1e6>
 800c52a:	1b80      	subs	r0, r0, r6
 800c52c:	6060      	str	r0, [r4, #4]
 800c52e:	6863      	ldr	r3, [r4, #4]
 800c530:	6123      	str	r3, [r4, #16]
 800c532:	2300      	movs	r3, #0
 800c534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c538:	e7aa      	b.n	800c490 <_printf_i+0x148>
 800c53a:	6923      	ldr	r3, [r4, #16]
 800c53c:	4632      	mov	r2, r6
 800c53e:	4649      	mov	r1, r9
 800c540:	4640      	mov	r0, r8
 800c542:	47d0      	blx	sl
 800c544:	3001      	adds	r0, #1
 800c546:	d0ad      	beq.n	800c4a4 <_printf_i+0x15c>
 800c548:	6823      	ldr	r3, [r4, #0]
 800c54a:	079b      	lsls	r3, r3, #30
 800c54c:	d413      	bmi.n	800c576 <_printf_i+0x22e>
 800c54e:	68e0      	ldr	r0, [r4, #12]
 800c550:	9b03      	ldr	r3, [sp, #12]
 800c552:	4298      	cmp	r0, r3
 800c554:	bfb8      	it	lt
 800c556:	4618      	movlt	r0, r3
 800c558:	e7a6      	b.n	800c4a8 <_printf_i+0x160>
 800c55a:	2301      	movs	r3, #1
 800c55c:	4632      	mov	r2, r6
 800c55e:	4649      	mov	r1, r9
 800c560:	4640      	mov	r0, r8
 800c562:	47d0      	blx	sl
 800c564:	3001      	adds	r0, #1
 800c566:	d09d      	beq.n	800c4a4 <_printf_i+0x15c>
 800c568:	3501      	adds	r5, #1
 800c56a:	68e3      	ldr	r3, [r4, #12]
 800c56c:	9903      	ldr	r1, [sp, #12]
 800c56e:	1a5b      	subs	r3, r3, r1
 800c570:	42ab      	cmp	r3, r5
 800c572:	dcf2      	bgt.n	800c55a <_printf_i+0x212>
 800c574:	e7eb      	b.n	800c54e <_printf_i+0x206>
 800c576:	2500      	movs	r5, #0
 800c578:	f104 0619 	add.w	r6, r4, #25
 800c57c:	e7f5      	b.n	800c56a <_printf_i+0x222>
 800c57e:	bf00      	nop
 800c580:	0800f4e2 	.word	0x0800f4e2
 800c584:	0800f4f3 	.word	0x0800f4f3

0800c588 <std>:
 800c588:	2300      	movs	r3, #0
 800c58a:	b510      	push	{r4, lr}
 800c58c:	4604      	mov	r4, r0
 800c58e:	e9c0 3300 	strd	r3, r3, [r0]
 800c592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c596:	6083      	str	r3, [r0, #8]
 800c598:	8181      	strh	r1, [r0, #12]
 800c59a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c59c:	81c2      	strh	r2, [r0, #14]
 800c59e:	6183      	str	r3, [r0, #24]
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	2208      	movs	r2, #8
 800c5a4:	305c      	adds	r0, #92	@ 0x5c
 800c5a6:	f000 f914 	bl	800c7d2 <memset>
 800c5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e0 <std+0x58>)
 800c5ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e4 <std+0x5c>)
 800c5b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e8 <std+0x60>)
 800c5b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5ec <std+0x64>)
 800c5b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f0 <std+0x68>)
 800c5bc:	6224      	str	r4, [r4, #32]
 800c5be:	429c      	cmp	r4, r3
 800c5c0:	d006      	beq.n	800c5d0 <std+0x48>
 800c5c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5c6:	4294      	cmp	r4, r2
 800c5c8:	d002      	beq.n	800c5d0 <std+0x48>
 800c5ca:	33d0      	adds	r3, #208	@ 0xd0
 800c5cc:	429c      	cmp	r4, r3
 800c5ce:	d105      	bne.n	800c5dc <std+0x54>
 800c5d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5d8:	f000 b9e6 	b.w	800c9a8 <__retarget_lock_init_recursive>
 800c5dc:	bd10      	pop	{r4, pc}
 800c5de:	bf00      	nop
 800c5e0:	0800c74d 	.word	0x0800c74d
 800c5e4:	0800c76f 	.word	0x0800c76f
 800c5e8:	0800c7a7 	.word	0x0800c7a7
 800c5ec:	0800c7cb 	.word	0x0800c7cb
 800c5f0:	20000818 	.word	0x20000818

0800c5f4 <stdio_exit_handler>:
 800c5f4:	4a02      	ldr	r2, [pc, #8]	@ (800c600 <stdio_exit_handler+0xc>)
 800c5f6:	4903      	ldr	r1, [pc, #12]	@ (800c604 <stdio_exit_handler+0x10>)
 800c5f8:	4803      	ldr	r0, [pc, #12]	@ (800c608 <stdio_exit_handler+0x14>)
 800c5fa:	f000 b869 	b.w	800c6d0 <_fwalk_sglue>
 800c5fe:	bf00      	nop
 800c600:	20000010 	.word	0x20000010
 800c604:	0800ec85 	.word	0x0800ec85
 800c608:	2000018c 	.word	0x2000018c

0800c60c <cleanup_stdio>:
 800c60c:	6841      	ldr	r1, [r0, #4]
 800c60e:	4b0c      	ldr	r3, [pc, #48]	@ (800c640 <cleanup_stdio+0x34>)
 800c610:	4299      	cmp	r1, r3
 800c612:	b510      	push	{r4, lr}
 800c614:	4604      	mov	r4, r0
 800c616:	d001      	beq.n	800c61c <cleanup_stdio+0x10>
 800c618:	f002 fb34 	bl	800ec84 <_fflush_r>
 800c61c:	68a1      	ldr	r1, [r4, #8]
 800c61e:	4b09      	ldr	r3, [pc, #36]	@ (800c644 <cleanup_stdio+0x38>)
 800c620:	4299      	cmp	r1, r3
 800c622:	d002      	beq.n	800c62a <cleanup_stdio+0x1e>
 800c624:	4620      	mov	r0, r4
 800c626:	f002 fb2d 	bl	800ec84 <_fflush_r>
 800c62a:	68e1      	ldr	r1, [r4, #12]
 800c62c:	4b06      	ldr	r3, [pc, #24]	@ (800c648 <cleanup_stdio+0x3c>)
 800c62e:	4299      	cmp	r1, r3
 800c630:	d004      	beq.n	800c63c <cleanup_stdio+0x30>
 800c632:	4620      	mov	r0, r4
 800c634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c638:	f002 bb24 	b.w	800ec84 <_fflush_r>
 800c63c:	bd10      	pop	{r4, pc}
 800c63e:	bf00      	nop
 800c640:	20000818 	.word	0x20000818
 800c644:	20000880 	.word	0x20000880
 800c648:	200008e8 	.word	0x200008e8

0800c64c <global_stdio_init.part.0>:
 800c64c:	b510      	push	{r4, lr}
 800c64e:	4b0b      	ldr	r3, [pc, #44]	@ (800c67c <global_stdio_init.part.0+0x30>)
 800c650:	4c0b      	ldr	r4, [pc, #44]	@ (800c680 <global_stdio_init.part.0+0x34>)
 800c652:	4a0c      	ldr	r2, [pc, #48]	@ (800c684 <global_stdio_init.part.0+0x38>)
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	4620      	mov	r0, r4
 800c658:	2200      	movs	r2, #0
 800c65a:	2104      	movs	r1, #4
 800c65c:	f7ff ff94 	bl	800c588 <std>
 800c660:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c664:	2201      	movs	r2, #1
 800c666:	2109      	movs	r1, #9
 800c668:	f7ff ff8e 	bl	800c588 <std>
 800c66c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c670:	2202      	movs	r2, #2
 800c672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c676:	2112      	movs	r1, #18
 800c678:	f7ff bf86 	b.w	800c588 <std>
 800c67c:	20000950 	.word	0x20000950
 800c680:	20000818 	.word	0x20000818
 800c684:	0800c5f5 	.word	0x0800c5f5

0800c688 <__sfp_lock_acquire>:
 800c688:	4801      	ldr	r0, [pc, #4]	@ (800c690 <__sfp_lock_acquire+0x8>)
 800c68a:	f000 b98e 	b.w	800c9aa <__retarget_lock_acquire_recursive>
 800c68e:	bf00      	nop
 800c690:	20000959 	.word	0x20000959

0800c694 <__sfp_lock_release>:
 800c694:	4801      	ldr	r0, [pc, #4]	@ (800c69c <__sfp_lock_release+0x8>)
 800c696:	f000 b989 	b.w	800c9ac <__retarget_lock_release_recursive>
 800c69a:	bf00      	nop
 800c69c:	20000959 	.word	0x20000959

0800c6a0 <__sinit>:
 800c6a0:	b510      	push	{r4, lr}
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	f7ff fff0 	bl	800c688 <__sfp_lock_acquire>
 800c6a8:	6a23      	ldr	r3, [r4, #32]
 800c6aa:	b11b      	cbz	r3, 800c6b4 <__sinit+0x14>
 800c6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6b0:	f7ff bff0 	b.w	800c694 <__sfp_lock_release>
 800c6b4:	4b04      	ldr	r3, [pc, #16]	@ (800c6c8 <__sinit+0x28>)
 800c6b6:	6223      	str	r3, [r4, #32]
 800c6b8:	4b04      	ldr	r3, [pc, #16]	@ (800c6cc <__sinit+0x2c>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1f5      	bne.n	800c6ac <__sinit+0xc>
 800c6c0:	f7ff ffc4 	bl	800c64c <global_stdio_init.part.0>
 800c6c4:	e7f2      	b.n	800c6ac <__sinit+0xc>
 800c6c6:	bf00      	nop
 800c6c8:	0800c60d 	.word	0x0800c60d
 800c6cc:	20000950 	.word	0x20000950

0800c6d0 <_fwalk_sglue>:
 800c6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6d4:	4607      	mov	r7, r0
 800c6d6:	4688      	mov	r8, r1
 800c6d8:	4614      	mov	r4, r2
 800c6da:	2600      	movs	r6, #0
 800c6dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6e0:	f1b9 0901 	subs.w	r9, r9, #1
 800c6e4:	d505      	bpl.n	800c6f2 <_fwalk_sglue+0x22>
 800c6e6:	6824      	ldr	r4, [r4, #0]
 800c6e8:	2c00      	cmp	r4, #0
 800c6ea:	d1f7      	bne.n	800c6dc <_fwalk_sglue+0xc>
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6f2:	89ab      	ldrh	r3, [r5, #12]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d907      	bls.n	800c708 <_fwalk_sglue+0x38>
 800c6f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	d003      	beq.n	800c708 <_fwalk_sglue+0x38>
 800c700:	4629      	mov	r1, r5
 800c702:	4638      	mov	r0, r7
 800c704:	47c0      	blx	r8
 800c706:	4306      	orrs	r6, r0
 800c708:	3568      	adds	r5, #104	@ 0x68
 800c70a:	e7e9      	b.n	800c6e0 <_fwalk_sglue+0x10>

0800c70c <siprintf>:
 800c70c:	b40e      	push	{r1, r2, r3}
 800c70e:	b500      	push	{lr}
 800c710:	b09c      	sub	sp, #112	@ 0x70
 800c712:	ab1d      	add	r3, sp, #116	@ 0x74
 800c714:	9002      	str	r0, [sp, #8]
 800c716:	9006      	str	r0, [sp, #24]
 800c718:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c71c:	4809      	ldr	r0, [pc, #36]	@ (800c744 <siprintf+0x38>)
 800c71e:	9107      	str	r1, [sp, #28]
 800c720:	9104      	str	r1, [sp, #16]
 800c722:	4909      	ldr	r1, [pc, #36]	@ (800c748 <siprintf+0x3c>)
 800c724:	f853 2b04 	ldr.w	r2, [r3], #4
 800c728:	9105      	str	r1, [sp, #20]
 800c72a:	6800      	ldr	r0, [r0, #0]
 800c72c:	9301      	str	r3, [sp, #4]
 800c72e:	a902      	add	r1, sp, #8
 800c730:	f002 f928 	bl	800e984 <_svfiprintf_r>
 800c734:	9b02      	ldr	r3, [sp, #8]
 800c736:	2200      	movs	r2, #0
 800c738:	701a      	strb	r2, [r3, #0]
 800c73a:	b01c      	add	sp, #112	@ 0x70
 800c73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c740:	b003      	add	sp, #12
 800c742:	4770      	bx	lr
 800c744:	20000188 	.word	0x20000188
 800c748:	ffff0208 	.word	0xffff0208

0800c74c <__sread>:
 800c74c:	b510      	push	{r4, lr}
 800c74e:	460c      	mov	r4, r1
 800c750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c754:	f000 f8da 	bl	800c90c <_read_r>
 800c758:	2800      	cmp	r0, #0
 800c75a:	bfab      	itete	ge
 800c75c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c75e:	89a3      	ldrhlt	r3, [r4, #12]
 800c760:	181b      	addge	r3, r3, r0
 800c762:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c766:	bfac      	ite	ge
 800c768:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c76a:	81a3      	strhlt	r3, [r4, #12]
 800c76c:	bd10      	pop	{r4, pc}

0800c76e <__swrite>:
 800c76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c772:	461f      	mov	r7, r3
 800c774:	898b      	ldrh	r3, [r1, #12]
 800c776:	05db      	lsls	r3, r3, #23
 800c778:	4605      	mov	r5, r0
 800c77a:	460c      	mov	r4, r1
 800c77c:	4616      	mov	r6, r2
 800c77e:	d505      	bpl.n	800c78c <__swrite+0x1e>
 800c780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c784:	2302      	movs	r3, #2
 800c786:	2200      	movs	r2, #0
 800c788:	f000 f8ae 	bl	800c8e8 <_lseek_r>
 800c78c:	89a3      	ldrh	r3, [r4, #12]
 800c78e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c792:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c796:	81a3      	strh	r3, [r4, #12]
 800c798:	4632      	mov	r2, r6
 800c79a:	463b      	mov	r3, r7
 800c79c:	4628      	mov	r0, r5
 800c79e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a2:	f000 b8c5 	b.w	800c930 <_write_r>

0800c7a6 <__sseek>:
 800c7a6:	b510      	push	{r4, lr}
 800c7a8:	460c      	mov	r4, r1
 800c7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ae:	f000 f89b 	bl	800c8e8 <_lseek_r>
 800c7b2:	1c43      	adds	r3, r0, #1
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	bf15      	itete	ne
 800c7b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c7ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c7be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c7c2:	81a3      	strheq	r3, [r4, #12]
 800c7c4:	bf18      	it	ne
 800c7c6:	81a3      	strhne	r3, [r4, #12]
 800c7c8:	bd10      	pop	{r4, pc}

0800c7ca <__sclose>:
 800c7ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ce:	f000 b87b 	b.w	800c8c8 <_close_r>

0800c7d2 <memset>:
 800c7d2:	4402      	add	r2, r0
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d100      	bne.n	800c7dc <memset+0xa>
 800c7da:	4770      	bx	lr
 800c7dc:	f803 1b01 	strb.w	r1, [r3], #1
 800c7e0:	e7f9      	b.n	800c7d6 <memset+0x4>

0800c7e2 <strncmp>:
 800c7e2:	b510      	push	{r4, lr}
 800c7e4:	b16a      	cbz	r2, 800c802 <strncmp+0x20>
 800c7e6:	3901      	subs	r1, #1
 800c7e8:	1884      	adds	r4, r0, r2
 800c7ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d103      	bne.n	800c7fe <strncmp+0x1c>
 800c7f6:	42a0      	cmp	r0, r4
 800c7f8:	d001      	beq.n	800c7fe <strncmp+0x1c>
 800c7fa:	2a00      	cmp	r2, #0
 800c7fc:	d1f5      	bne.n	800c7ea <strncmp+0x8>
 800c7fe:	1ad0      	subs	r0, r2, r3
 800c800:	bd10      	pop	{r4, pc}
 800c802:	4610      	mov	r0, r2
 800c804:	e7fc      	b.n	800c800 <strncmp+0x1e>
	...

0800c808 <strtok>:
 800c808:	4b16      	ldr	r3, [pc, #88]	@ (800c864 <strtok+0x5c>)
 800c80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c80e:	681f      	ldr	r7, [r3, #0]
 800c810:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c812:	4605      	mov	r5, r0
 800c814:	460e      	mov	r6, r1
 800c816:	b9ec      	cbnz	r4, 800c854 <strtok+0x4c>
 800c818:	2050      	movs	r0, #80	@ 0x50
 800c81a:	f001 fad1 	bl	800ddc0 <malloc>
 800c81e:	4602      	mov	r2, r0
 800c820:	6478      	str	r0, [r7, #68]	@ 0x44
 800c822:	b920      	cbnz	r0, 800c82e <strtok+0x26>
 800c824:	4b10      	ldr	r3, [pc, #64]	@ (800c868 <strtok+0x60>)
 800c826:	4811      	ldr	r0, [pc, #68]	@ (800c86c <strtok+0x64>)
 800c828:	215b      	movs	r1, #91	@ 0x5b
 800c82a:	f000 f8d9 	bl	800c9e0 <__assert_func>
 800c82e:	e9c0 4400 	strd	r4, r4, [r0]
 800c832:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c836:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c83a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c83e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c842:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c846:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c84a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c84e:	6184      	str	r4, [r0, #24]
 800c850:	7704      	strb	r4, [r0, #28]
 800c852:	6244      	str	r4, [r0, #36]	@ 0x24
 800c854:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c856:	4631      	mov	r1, r6
 800c858:	4628      	mov	r0, r5
 800c85a:	2301      	movs	r3, #1
 800c85c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c860:	f000 b806 	b.w	800c870 <__strtok_r>
 800c864:	20000188 	.word	0x20000188
 800c868:	0800f504 	.word	0x0800f504
 800c86c:	0800f51b 	.word	0x0800f51b

0800c870 <__strtok_r>:
 800c870:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c872:	4604      	mov	r4, r0
 800c874:	b908      	cbnz	r0, 800c87a <__strtok_r+0xa>
 800c876:	6814      	ldr	r4, [r2, #0]
 800c878:	b144      	cbz	r4, 800c88c <__strtok_r+0x1c>
 800c87a:	4620      	mov	r0, r4
 800c87c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c880:	460f      	mov	r7, r1
 800c882:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c886:	b91e      	cbnz	r6, 800c890 <__strtok_r+0x20>
 800c888:	b965      	cbnz	r5, 800c8a4 <__strtok_r+0x34>
 800c88a:	6015      	str	r5, [r2, #0]
 800c88c:	2000      	movs	r0, #0
 800c88e:	e005      	b.n	800c89c <__strtok_r+0x2c>
 800c890:	42b5      	cmp	r5, r6
 800c892:	d1f6      	bne.n	800c882 <__strtok_r+0x12>
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1f0      	bne.n	800c87a <__strtok_r+0xa>
 800c898:	6014      	str	r4, [r2, #0]
 800c89a:	7003      	strb	r3, [r0, #0]
 800c89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c89e:	461c      	mov	r4, r3
 800c8a0:	e00c      	b.n	800c8bc <__strtok_r+0x4c>
 800c8a2:	b915      	cbnz	r5, 800c8aa <__strtok_r+0x3a>
 800c8a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c8a8:	460e      	mov	r6, r1
 800c8aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c8ae:	42ab      	cmp	r3, r5
 800c8b0:	d1f7      	bne.n	800c8a2 <__strtok_r+0x32>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d0f3      	beq.n	800c89e <__strtok_r+0x2e>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c8bc:	6014      	str	r4, [r2, #0]
 800c8be:	e7ed      	b.n	800c89c <__strtok_r+0x2c>

0800c8c0 <_localeconv_r>:
 800c8c0:	4800      	ldr	r0, [pc, #0]	@ (800c8c4 <_localeconv_r+0x4>)
 800c8c2:	4770      	bx	lr
 800c8c4:	2000010c 	.word	0x2000010c

0800c8c8 <_close_r>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	4d06      	ldr	r5, [pc, #24]	@ (800c8e4 <_close_r+0x1c>)
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	4608      	mov	r0, r1
 800c8d2:	602b      	str	r3, [r5, #0]
 800c8d4:	f7f6 fdf2 	bl	80034bc <_close>
 800c8d8:	1c43      	adds	r3, r0, #1
 800c8da:	d102      	bne.n	800c8e2 <_close_r+0x1a>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	b103      	cbz	r3, 800c8e2 <_close_r+0x1a>
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	bd38      	pop	{r3, r4, r5, pc}
 800c8e4:	20000954 	.word	0x20000954

0800c8e8 <_lseek_r>:
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	4d07      	ldr	r5, [pc, #28]	@ (800c908 <_lseek_r+0x20>)
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	4608      	mov	r0, r1
 800c8f0:	4611      	mov	r1, r2
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	602a      	str	r2, [r5, #0]
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	f7f6 fe07 	bl	800350a <_lseek>
 800c8fc:	1c43      	adds	r3, r0, #1
 800c8fe:	d102      	bne.n	800c906 <_lseek_r+0x1e>
 800c900:	682b      	ldr	r3, [r5, #0]
 800c902:	b103      	cbz	r3, 800c906 <_lseek_r+0x1e>
 800c904:	6023      	str	r3, [r4, #0]
 800c906:	bd38      	pop	{r3, r4, r5, pc}
 800c908:	20000954 	.word	0x20000954

0800c90c <_read_r>:
 800c90c:	b538      	push	{r3, r4, r5, lr}
 800c90e:	4d07      	ldr	r5, [pc, #28]	@ (800c92c <_read_r+0x20>)
 800c910:	4604      	mov	r4, r0
 800c912:	4608      	mov	r0, r1
 800c914:	4611      	mov	r1, r2
 800c916:	2200      	movs	r2, #0
 800c918:	602a      	str	r2, [r5, #0]
 800c91a:	461a      	mov	r2, r3
 800c91c:	f7f6 fd95 	bl	800344a <_read>
 800c920:	1c43      	adds	r3, r0, #1
 800c922:	d102      	bne.n	800c92a <_read_r+0x1e>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	b103      	cbz	r3, 800c92a <_read_r+0x1e>
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	20000954 	.word	0x20000954

0800c930 <_write_r>:
 800c930:	b538      	push	{r3, r4, r5, lr}
 800c932:	4d07      	ldr	r5, [pc, #28]	@ (800c950 <_write_r+0x20>)
 800c934:	4604      	mov	r4, r0
 800c936:	4608      	mov	r0, r1
 800c938:	4611      	mov	r1, r2
 800c93a:	2200      	movs	r2, #0
 800c93c:	602a      	str	r2, [r5, #0]
 800c93e:	461a      	mov	r2, r3
 800c940:	f7f6 fda0 	bl	8003484 <_write>
 800c944:	1c43      	adds	r3, r0, #1
 800c946:	d102      	bne.n	800c94e <_write_r+0x1e>
 800c948:	682b      	ldr	r3, [r5, #0]
 800c94a:	b103      	cbz	r3, 800c94e <_write_r+0x1e>
 800c94c:	6023      	str	r3, [r4, #0]
 800c94e:	bd38      	pop	{r3, r4, r5, pc}
 800c950:	20000954 	.word	0x20000954

0800c954 <__errno>:
 800c954:	4b01      	ldr	r3, [pc, #4]	@ (800c95c <__errno+0x8>)
 800c956:	6818      	ldr	r0, [r3, #0]
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	20000188 	.word	0x20000188

0800c960 <__libc_init_array>:
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	4d0d      	ldr	r5, [pc, #52]	@ (800c998 <__libc_init_array+0x38>)
 800c964:	4c0d      	ldr	r4, [pc, #52]	@ (800c99c <__libc_init_array+0x3c>)
 800c966:	1b64      	subs	r4, r4, r5
 800c968:	10a4      	asrs	r4, r4, #2
 800c96a:	2600      	movs	r6, #0
 800c96c:	42a6      	cmp	r6, r4
 800c96e:	d109      	bne.n	800c984 <__libc_init_array+0x24>
 800c970:	4d0b      	ldr	r5, [pc, #44]	@ (800c9a0 <__libc_init_array+0x40>)
 800c972:	4c0c      	ldr	r4, [pc, #48]	@ (800c9a4 <__libc_init_array+0x44>)
 800c974:	f002 fcd8 	bl	800f328 <_init>
 800c978:	1b64      	subs	r4, r4, r5
 800c97a:	10a4      	asrs	r4, r4, #2
 800c97c:	2600      	movs	r6, #0
 800c97e:	42a6      	cmp	r6, r4
 800c980:	d105      	bne.n	800c98e <__libc_init_array+0x2e>
 800c982:	bd70      	pop	{r4, r5, r6, pc}
 800c984:	f855 3b04 	ldr.w	r3, [r5], #4
 800c988:	4798      	blx	r3
 800c98a:	3601      	adds	r6, #1
 800c98c:	e7ee      	b.n	800c96c <__libc_init_array+0xc>
 800c98e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c992:	4798      	blx	r3
 800c994:	3601      	adds	r6, #1
 800c996:	e7f2      	b.n	800c97e <__libc_init_array+0x1e>
 800c998:	0800f904 	.word	0x0800f904
 800c99c:	0800f904 	.word	0x0800f904
 800c9a0:	0800f904 	.word	0x0800f904
 800c9a4:	0800f908 	.word	0x0800f908

0800c9a8 <__retarget_lock_init_recursive>:
 800c9a8:	4770      	bx	lr

0800c9aa <__retarget_lock_acquire_recursive>:
 800c9aa:	4770      	bx	lr

0800c9ac <__retarget_lock_release_recursive>:
 800c9ac:	4770      	bx	lr

0800c9ae <memcpy>:
 800c9ae:	440a      	add	r2, r1
 800c9b0:	4291      	cmp	r1, r2
 800c9b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9b6:	d100      	bne.n	800c9ba <memcpy+0xc>
 800c9b8:	4770      	bx	lr
 800c9ba:	b510      	push	{r4, lr}
 800c9bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9c4:	4291      	cmp	r1, r2
 800c9c6:	d1f9      	bne.n	800c9bc <memcpy+0xe>
 800c9c8:	bd10      	pop	{r4, pc}
 800c9ca:	0000      	movs	r0, r0
 800c9cc:	0000      	movs	r0, r0
	...

0800c9d0 <nan>:
 800c9d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c9d8 <nan+0x8>
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	00000000 	.word	0x00000000
 800c9dc:	7ff80000 	.word	0x7ff80000

0800c9e0 <__assert_func>:
 800c9e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9e2:	4614      	mov	r4, r2
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	4b09      	ldr	r3, [pc, #36]	@ (800ca0c <__assert_func+0x2c>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	68d8      	ldr	r0, [r3, #12]
 800c9ee:	b954      	cbnz	r4, 800ca06 <__assert_func+0x26>
 800c9f0:	4b07      	ldr	r3, [pc, #28]	@ (800ca10 <__assert_func+0x30>)
 800c9f2:	461c      	mov	r4, r3
 800c9f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9f8:	9100      	str	r1, [sp, #0]
 800c9fa:	462b      	mov	r3, r5
 800c9fc:	4905      	ldr	r1, [pc, #20]	@ (800ca14 <__assert_func+0x34>)
 800c9fe:	f002 f969 	bl	800ecd4 <fiprintf>
 800ca02:	f002 f9a3 	bl	800ed4c <abort>
 800ca06:	4b04      	ldr	r3, [pc, #16]	@ (800ca18 <__assert_func+0x38>)
 800ca08:	e7f4      	b.n	800c9f4 <__assert_func+0x14>
 800ca0a:	bf00      	nop
 800ca0c:	20000188 	.word	0x20000188
 800ca10:	0800f5b8 	.word	0x0800f5b8
 800ca14:	0800f58a 	.word	0x0800f58a
 800ca18:	0800f57d 	.word	0x0800f57d

0800ca1c <quorem>:
 800ca1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca20:	6903      	ldr	r3, [r0, #16]
 800ca22:	690c      	ldr	r4, [r1, #16]
 800ca24:	42a3      	cmp	r3, r4
 800ca26:	4607      	mov	r7, r0
 800ca28:	db7e      	blt.n	800cb28 <quorem+0x10c>
 800ca2a:	3c01      	subs	r4, #1
 800ca2c:	f101 0814 	add.w	r8, r1, #20
 800ca30:	00a3      	lsls	r3, r4, #2
 800ca32:	f100 0514 	add.w	r5, r0, #20
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca3c:	9301      	str	r3, [sp, #4]
 800ca3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca46:	3301      	adds	r3, #1
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca4e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca52:	d32e      	bcc.n	800cab2 <quorem+0x96>
 800ca54:	f04f 0a00 	mov.w	sl, #0
 800ca58:	46c4      	mov	ip, r8
 800ca5a:	46ae      	mov	lr, r5
 800ca5c:	46d3      	mov	fp, sl
 800ca5e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca62:	b298      	uxth	r0, r3
 800ca64:	fb06 a000 	mla	r0, r6, r0, sl
 800ca68:	0c02      	lsrs	r2, r0, #16
 800ca6a:	0c1b      	lsrs	r3, r3, #16
 800ca6c:	fb06 2303 	mla	r3, r6, r3, r2
 800ca70:	f8de 2000 	ldr.w	r2, [lr]
 800ca74:	b280      	uxth	r0, r0
 800ca76:	b292      	uxth	r2, r2
 800ca78:	1a12      	subs	r2, r2, r0
 800ca7a:	445a      	add	r2, fp
 800ca7c:	f8de 0000 	ldr.w	r0, [lr]
 800ca80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ca8a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ca8e:	b292      	uxth	r2, r2
 800ca90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ca94:	45e1      	cmp	r9, ip
 800ca96:	f84e 2b04 	str.w	r2, [lr], #4
 800ca9a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ca9e:	d2de      	bcs.n	800ca5e <quorem+0x42>
 800caa0:	9b00      	ldr	r3, [sp, #0]
 800caa2:	58eb      	ldr	r3, [r5, r3]
 800caa4:	b92b      	cbnz	r3, 800cab2 <quorem+0x96>
 800caa6:	9b01      	ldr	r3, [sp, #4]
 800caa8:	3b04      	subs	r3, #4
 800caaa:	429d      	cmp	r5, r3
 800caac:	461a      	mov	r2, r3
 800caae:	d32f      	bcc.n	800cb10 <quorem+0xf4>
 800cab0:	613c      	str	r4, [r7, #16]
 800cab2:	4638      	mov	r0, r7
 800cab4:	f001 fd10 	bl	800e4d8 <__mcmp>
 800cab8:	2800      	cmp	r0, #0
 800caba:	db25      	blt.n	800cb08 <quorem+0xec>
 800cabc:	4629      	mov	r1, r5
 800cabe:	2000      	movs	r0, #0
 800cac0:	f858 2b04 	ldr.w	r2, [r8], #4
 800cac4:	f8d1 c000 	ldr.w	ip, [r1]
 800cac8:	fa1f fe82 	uxth.w	lr, r2
 800cacc:	fa1f f38c 	uxth.w	r3, ip
 800cad0:	eba3 030e 	sub.w	r3, r3, lr
 800cad4:	4403      	add	r3, r0
 800cad6:	0c12      	lsrs	r2, r2, #16
 800cad8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cadc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cae6:	45c1      	cmp	r9, r8
 800cae8:	f841 3b04 	str.w	r3, [r1], #4
 800caec:	ea4f 4022 	mov.w	r0, r2, asr #16
 800caf0:	d2e6      	bcs.n	800cac0 <quorem+0xa4>
 800caf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800caf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cafa:	b922      	cbnz	r2, 800cb06 <quorem+0xea>
 800cafc:	3b04      	subs	r3, #4
 800cafe:	429d      	cmp	r5, r3
 800cb00:	461a      	mov	r2, r3
 800cb02:	d30b      	bcc.n	800cb1c <quorem+0x100>
 800cb04:	613c      	str	r4, [r7, #16]
 800cb06:	3601      	adds	r6, #1
 800cb08:	4630      	mov	r0, r6
 800cb0a:	b003      	add	sp, #12
 800cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb10:	6812      	ldr	r2, [r2, #0]
 800cb12:	3b04      	subs	r3, #4
 800cb14:	2a00      	cmp	r2, #0
 800cb16:	d1cb      	bne.n	800cab0 <quorem+0x94>
 800cb18:	3c01      	subs	r4, #1
 800cb1a:	e7c6      	b.n	800caaa <quorem+0x8e>
 800cb1c:	6812      	ldr	r2, [r2, #0]
 800cb1e:	3b04      	subs	r3, #4
 800cb20:	2a00      	cmp	r2, #0
 800cb22:	d1ef      	bne.n	800cb04 <quorem+0xe8>
 800cb24:	3c01      	subs	r4, #1
 800cb26:	e7ea      	b.n	800cafe <quorem+0xe2>
 800cb28:	2000      	movs	r0, #0
 800cb2a:	e7ee      	b.n	800cb0a <quorem+0xee>
 800cb2c:	0000      	movs	r0, r0
	...

0800cb30 <_dtoa_r>:
 800cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	69c7      	ldr	r7, [r0, #28]
 800cb36:	b099      	sub	sp, #100	@ 0x64
 800cb38:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cb3c:	ec55 4b10 	vmov	r4, r5, d0
 800cb40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cb42:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb44:	4683      	mov	fp, r0
 800cb46:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb48:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb4a:	b97f      	cbnz	r7, 800cb6c <_dtoa_r+0x3c>
 800cb4c:	2010      	movs	r0, #16
 800cb4e:	f001 f937 	bl	800ddc0 <malloc>
 800cb52:	4602      	mov	r2, r0
 800cb54:	f8cb 001c 	str.w	r0, [fp, #28]
 800cb58:	b920      	cbnz	r0, 800cb64 <_dtoa_r+0x34>
 800cb5a:	4ba7      	ldr	r3, [pc, #668]	@ (800cdf8 <_dtoa_r+0x2c8>)
 800cb5c:	21ef      	movs	r1, #239	@ 0xef
 800cb5e:	48a7      	ldr	r0, [pc, #668]	@ (800cdfc <_dtoa_r+0x2cc>)
 800cb60:	f7ff ff3e 	bl	800c9e0 <__assert_func>
 800cb64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cb68:	6007      	str	r7, [r0, #0]
 800cb6a:	60c7      	str	r7, [r0, #12]
 800cb6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb70:	6819      	ldr	r1, [r3, #0]
 800cb72:	b159      	cbz	r1, 800cb8c <_dtoa_r+0x5c>
 800cb74:	685a      	ldr	r2, [r3, #4]
 800cb76:	604a      	str	r2, [r1, #4]
 800cb78:	2301      	movs	r3, #1
 800cb7a:	4093      	lsls	r3, r2
 800cb7c:	608b      	str	r3, [r1, #8]
 800cb7e:	4658      	mov	r0, fp
 800cb80:	f001 fa26 	bl	800dfd0 <_Bfree>
 800cb84:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	601a      	str	r2, [r3, #0]
 800cb8c:	1e2b      	subs	r3, r5, #0
 800cb8e:	bfb9      	ittee	lt
 800cb90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cb94:	9303      	strlt	r3, [sp, #12]
 800cb96:	2300      	movge	r3, #0
 800cb98:	6033      	strge	r3, [r6, #0]
 800cb9a:	9f03      	ldr	r7, [sp, #12]
 800cb9c:	4b98      	ldr	r3, [pc, #608]	@ (800ce00 <_dtoa_r+0x2d0>)
 800cb9e:	bfbc      	itt	lt
 800cba0:	2201      	movlt	r2, #1
 800cba2:	6032      	strlt	r2, [r6, #0]
 800cba4:	43bb      	bics	r3, r7
 800cba6:	d112      	bne.n	800cbce <_dtoa_r+0x9e>
 800cba8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cbaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cbae:	6013      	str	r3, [r2, #0]
 800cbb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cbb4:	4323      	orrs	r3, r4
 800cbb6:	f000 854d 	beq.w	800d654 <_dtoa_r+0xb24>
 800cbba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cbbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ce14 <_dtoa_r+0x2e4>
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f000 854f 	beq.w	800d664 <_dtoa_r+0xb34>
 800cbc6:	f10a 0303 	add.w	r3, sl, #3
 800cbca:	f000 bd49 	b.w	800d660 <_dtoa_r+0xb30>
 800cbce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	ec51 0b17 	vmov	r0, r1, d7
 800cbd8:	2300      	movs	r3, #0
 800cbda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cbde:	f7f3 ffab 	bl	8000b38 <__aeabi_dcmpeq>
 800cbe2:	4680      	mov	r8, r0
 800cbe4:	b158      	cbz	r0, 800cbfe <_dtoa_r+0xce>
 800cbe6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cbe8:	2301      	movs	r3, #1
 800cbea:	6013      	str	r3, [r2, #0]
 800cbec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cbee:	b113      	cbz	r3, 800cbf6 <_dtoa_r+0xc6>
 800cbf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cbf2:	4b84      	ldr	r3, [pc, #528]	@ (800ce04 <_dtoa_r+0x2d4>)
 800cbf4:	6013      	str	r3, [r2, #0]
 800cbf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ce18 <_dtoa_r+0x2e8>
 800cbfa:	f000 bd33 	b.w	800d664 <_dtoa_r+0xb34>
 800cbfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cc02:	aa16      	add	r2, sp, #88	@ 0x58
 800cc04:	a917      	add	r1, sp, #92	@ 0x5c
 800cc06:	4658      	mov	r0, fp
 800cc08:	f001 fd86 	bl	800e718 <__d2b>
 800cc0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cc10:	4681      	mov	r9, r0
 800cc12:	2e00      	cmp	r6, #0
 800cc14:	d077      	beq.n	800cd06 <_dtoa_r+0x1d6>
 800cc16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cc1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cc28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cc2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cc30:	4619      	mov	r1, r3
 800cc32:	2200      	movs	r2, #0
 800cc34:	4b74      	ldr	r3, [pc, #464]	@ (800ce08 <_dtoa_r+0x2d8>)
 800cc36:	f7f3 fb5f 	bl	80002f8 <__aeabi_dsub>
 800cc3a:	a369      	add	r3, pc, #420	@ (adr r3, 800cde0 <_dtoa_r+0x2b0>)
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	f7f3 fd12 	bl	8000668 <__aeabi_dmul>
 800cc44:	a368      	add	r3, pc, #416	@ (adr r3, 800cde8 <_dtoa_r+0x2b8>)
 800cc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4a:	f7f3 fb57 	bl	80002fc <__adddf3>
 800cc4e:	4604      	mov	r4, r0
 800cc50:	4630      	mov	r0, r6
 800cc52:	460d      	mov	r5, r1
 800cc54:	f7f3 fc9e 	bl	8000594 <__aeabi_i2d>
 800cc58:	a365      	add	r3, pc, #404	@ (adr r3, 800cdf0 <_dtoa_r+0x2c0>)
 800cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5e:	f7f3 fd03 	bl	8000668 <__aeabi_dmul>
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	4620      	mov	r0, r4
 800cc68:	4629      	mov	r1, r5
 800cc6a:	f7f3 fb47 	bl	80002fc <__adddf3>
 800cc6e:	4604      	mov	r4, r0
 800cc70:	460d      	mov	r5, r1
 800cc72:	f7f3 ffa9 	bl	8000bc8 <__aeabi_d2iz>
 800cc76:	2200      	movs	r2, #0
 800cc78:	4607      	mov	r7, r0
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	4629      	mov	r1, r5
 800cc80:	f7f3 ff64 	bl	8000b4c <__aeabi_dcmplt>
 800cc84:	b140      	cbz	r0, 800cc98 <_dtoa_r+0x168>
 800cc86:	4638      	mov	r0, r7
 800cc88:	f7f3 fc84 	bl	8000594 <__aeabi_i2d>
 800cc8c:	4622      	mov	r2, r4
 800cc8e:	462b      	mov	r3, r5
 800cc90:	f7f3 ff52 	bl	8000b38 <__aeabi_dcmpeq>
 800cc94:	b900      	cbnz	r0, 800cc98 <_dtoa_r+0x168>
 800cc96:	3f01      	subs	r7, #1
 800cc98:	2f16      	cmp	r7, #22
 800cc9a:	d851      	bhi.n	800cd40 <_dtoa_r+0x210>
 800cc9c:	4b5b      	ldr	r3, [pc, #364]	@ (800ce0c <_dtoa_r+0x2dc>)
 800cc9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccaa:	f7f3 ff4f 	bl	8000b4c <__aeabi_dcmplt>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d048      	beq.n	800cd44 <_dtoa_r+0x214>
 800ccb2:	3f01      	subs	r7, #1
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	9312      	str	r3, [sp, #72]	@ 0x48
 800ccb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ccba:	1b9b      	subs	r3, r3, r6
 800ccbc:	1e5a      	subs	r2, r3, #1
 800ccbe:	bf44      	itt	mi
 800ccc0:	f1c3 0801 	rsbmi	r8, r3, #1
 800ccc4:	2300      	movmi	r3, #0
 800ccc6:	9208      	str	r2, [sp, #32]
 800ccc8:	bf54      	ite	pl
 800ccca:	f04f 0800 	movpl.w	r8, #0
 800ccce:	9308      	strmi	r3, [sp, #32]
 800ccd0:	2f00      	cmp	r7, #0
 800ccd2:	db39      	blt.n	800cd48 <_dtoa_r+0x218>
 800ccd4:	9b08      	ldr	r3, [sp, #32]
 800ccd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ccd8:	443b      	add	r3, r7
 800ccda:	9308      	str	r3, [sp, #32]
 800ccdc:	2300      	movs	r3, #0
 800ccde:	930a      	str	r3, [sp, #40]	@ 0x28
 800cce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cce2:	2b09      	cmp	r3, #9
 800cce4:	d864      	bhi.n	800cdb0 <_dtoa_r+0x280>
 800cce6:	2b05      	cmp	r3, #5
 800cce8:	bfc4      	itt	gt
 800ccea:	3b04      	subgt	r3, #4
 800ccec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ccee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccf0:	f1a3 0302 	sub.w	r3, r3, #2
 800ccf4:	bfcc      	ite	gt
 800ccf6:	2400      	movgt	r4, #0
 800ccf8:	2401      	movle	r4, #1
 800ccfa:	2b03      	cmp	r3, #3
 800ccfc:	d863      	bhi.n	800cdc6 <_dtoa_r+0x296>
 800ccfe:	e8df f003 	tbb	[pc, r3]
 800cd02:	372a      	.short	0x372a
 800cd04:	5535      	.short	0x5535
 800cd06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cd0a:	441e      	add	r6, r3
 800cd0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cd10:	2b20      	cmp	r3, #32
 800cd12:	bfc1      	itttt	gt
 800cd14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cd18:	409f      	lslgt	r7, r3
 800cd1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cd1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cd22:	bfd6      	itet	le
 800cd24:	f1c3 0320 	rsble	r3, r3, #32
 800cd28:	ea47 0003 	orrgt.w	r0, r7, r3
 800cd2c:	fa04 f003 	lslle.w	r0, r4, r3
 800cd30:	f7f3 fc20 	bl	8000574 <__aeabi_ui2d>
 800cd34:	2201      	movs	r2, #1
 800cd36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cd3a:	3e01      	subs	r6, #1
 800cd3c:	9214      	str	r2, [sp, #80]	@ 0x50
 800cd3e:	e777      	b.n	800cc30 <_dtoa_r+0x100>
 800cd40:	2301      	movs	r3, #1
 800cd42:	e7b8      	b.n	800ccb6 <_dtoa_r+0x186>
 800cd44:	9012      	str	r0, [sp, #72]	@ 0x48
 800cd46:	e7b7      	b.n	800ccb8 <_dtoa_r+0x188>
 800cd48:	427b      	negs	r3, r7
 800cd4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	eba8 0807 	sub.w	r8, r8, r7
 800cd52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd54:	e7c4      	b.n	800cce0 <_dtoa_r+0x1b0>
 800cd56:	2300      	movs	r3, #0
 800cd58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	dc35      	bgt.n	800cdcc <_dtoa_r+0x29c>
 800cd60:	2301      	movs	r3, #1
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	9307      	str	r3, [sp, #28]
 800cd66:	461a      	mov	r2, r3
 800cd68:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd6a:	e00b      	b.n	800cd84 <_dtoa_r+0x254>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e7f3      	b.n	800cd58 <_dtoa_r+0x228>
 800cd70:	2300      	movs	r3, #0
 800cd72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd76:	18fb      	adds	r3, r7, r3
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	9307      	str	r3, [sp, #28]
 800cd80:	bfb8      	it	lt
 800cd82:	2301      	movlt	r3, #1
 800cd84:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cd88:	2100      	movs	r1, #0
 800cd8a:	2204      	movs	r2, #4
 800cd8c:	f102 0514 	add.w	r5, r2, #20
 800cd90:	429d      	cmp	r5, r3
 800cd92:	d91f      	bls.n	800cdd4 <_dtoa_r+0x2a4>
 800cd94:	6041      	str	r1, [r0, #4]
 800cd96:	4658      	mov	r0, fp
 800cd98:	f001 f8da 	bl	800df50 <_Balloc>
 800cd9c:	4682      	mov	sl, r0
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d13c      	bne.n	800ce1c <_dtoa_r+0x2ec>
 800cda2:	4b1b      	ldr	r3, [pc, #108]	@ (800ce10 <_dtoa_r+0x2e0>)
 800cda4:	4602      	mov	r2, r0
 800cda6:	f240 11af 	movw	r1, #431	@ 0x1af
 800cdaa:	e6d8      	b.n	800cb5e <_dtoa_r+0x2e>
 800cdac:	2301      	movs	r3, #1
 800cdae:	e7e0      	b.n	800cd72 <_dtoa_r+0x242>
 800cdb0:	2401      	movs	r4, #1
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cdb8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	9307      	str	r3, [sp, #28]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	2312      	movs	r3, #18
 800cdc4:	e7d0      	b.n	800cd68 <_dtoa_r+0x238>
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdca:	e7f5      	b.n	800cdb8 <_dtoa_r+0x288>
 800cdcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdce:	9300      	str	r3, [sp, #0]
 800cdd0:	9307      	str	r3, [sp, #28]
 800cdd2:	e7d7      	b.n	800cd84 <_dtoa_r+0x254>
 800cdd4:	3101      	adds	r1, #1
 800cdd6:	0052      	lsls	r2, r2, #1
 800cdd8:	e7d8      	b.n	800cd8c <_dtoa_r+0x25c>
 800cdda:	bf00      	nop
 800cddc:	f3af 8000 	nop.w
 800cde0:	636f4361 	.word	0x636f4361
 800cde4:	3fd287a7 	.word	0x3fd287a7
 800cde8:	8b60c8b3 	.word	0x8b60c8b3
 800cdec:	3fc68a28 	.word	0x3fc68a28
 800cdf0:	509f79fb 	.word	0x509f79fb
 800cdf4:	3fd34413 	.word	0x3fd34413
 800cdf8:	0800f504 	.word	0x0800f504
 800cdfc:	0800f5c6 	.word	0x0800f5c6
 800ce00:	7ff00000 	.word	0x7ff00000
 800ce04:	0800f4e1 	.word	0x0800f4e1
 800ce08:	3ff80000 	.word	0x3ff80000
 800ce0c:	0800f720 	.word	0x0800f720
 800ce10:	0800f61e 	.word	0x0800f61e
 800ce14:	0800f5c2 	.word	0x0800f5c2
 800ce18:	0800f4e0 	.word	0x0800f4e0
 800ce1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ce20:	6018      	str	r0, [r3, #0]
 800ce22:	9b07      	ldr	r3, [sp, #28]
 800ce24:	2b0e      	cmp	r3, #14
 800ce26:	f200 80a4 	bhi.w	800cf72 <_dtoa_r+0x442>
 800ce2a:	2c00      	cmp	r4, #0
 800ce2c:	f000 80a1 	beq.w	800cf72 <_dtoa_r+0x442>
 800ce30:	2f00      	cmp	r7, #0
 800ce32:	dd33      	ble.n	800ce9c <_dtoa_r+0x36c>
 800ce34:	4bad      	ldr	r3, [pc, #692]	@ (800d0ec <_dtoa_r+0x5bc>)
 800ce36:	f007 020f 	and.w	r2, r7, #15
 800ce3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce3e:	ed93 7b00 	vldr	d7, [r3]
 800ce42:	05f8      	lsls	r0, r7, #23
 800ce44:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ce48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ce4c:	d516      	bpl.n	800ce7c <_dtoa_r+0x34c>
 800ce4e:	4ba8      	ldr	r3, [pc, #672]	@ (800d0f0 <_dtoa_r+0x5c0>)
 800ce50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce58:	f7f3 fd30 	bl	80008bc <__aeabi_ddiv>
 800ce5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce60:	f004 040f 	and.w	r4, r4, #15
 800ce64:	2603      	movs	r6, #3
 800ce66:	4da2      	ldr	r5, [pc, #648]	@ (800d0f0 <_dtoa_r+0x5c0>)
 800ce68:	b954      	cbnz	r4, 800ce80 <_dtoa_r+0x350>
 800ce6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce72:	f7f3 fd23 	bl	80008bc <__aeabi_ddiv>
 800ce76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce7a:	e028      	b.n	800cece <_dtoa_r+0x39e>
 800ce7c:	2602      	movs	r6, #2
 800ce7e:	e7f2      	b.n	800ce66 <_dtoa_r+0x336>
 800ce80:	07e1      	lsls	r1, r4, #31
 800ce82:	d508      	bpl.n	800ce96 <_dtoa_r+0x366>
 800ce84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce8c:	f7f3 fbec 	bl	8000668 <__aeabi_dmul>
 800ce90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce94:	3601      	adds	r6, #1
 800ce96:	1064      	asrs	r4, r4, #1
 800ce98:	3508      	adds	r5, #8
 800ce9a:	e7e5      	b.n	800ce68 <_dtoa_r+0x338>
 800ce9c:	f000 80d2 	beq.w	800d044 <_dtoa_r+0x514>
 800cea0:	427c      	negs	r4, r7
 800cea2:	4b92      	ldr	r3, [pc, #584]	@ (800d0ec <_dtoa_r+0x5bc>)
 800cea4:	4d92      	ldr	r5, [pc, #584]	@ (800d0f0 <_dtoa_r+0x5c0>)
 800cea6:	f004 020f 	and.w	r2, r4, #15
 800ceaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ceb6:	f7f3 fbd7 	bl	8000668 <__aeabi_dmul>
 800ceba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cebe:	1124      	asrs	r4, r4, #4
 800cec0:	2300      	movs	r3, #0
 800cec2:	2602      	movs	r6, #2
 800cec4:	2c00      	cmp	r4, #0
 800cec6:	f040 80b2 	bne.w	800d02e <_dtoa_r+0x4fe>
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d1d3      	bne.n	800ce76 <_dtoa_r+0x346>
 800cece:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ced0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f000 80b7 	beq.w	800d048 <_dtoa_r+0x518>
 800ceda:	4b86      	ldr	r3, [pc, #536]	@ (800d0f4 <_dtoa_r+0x5c4>)
 800cedc:	2200      	movs	r2, #0
 800cede:	4620      	mov	r0, r4
 800cee0:	4629      	mov	r1, r5
 800cee2:	f7f3 fe33 	bl	8000b4c <__aeabi_dcmplt>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	f000 80ae 	beq.w	800d048 <_dtoa_r+0x518>
 800ceec:	9b07      	ldr	r3, [sp, #28]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f000 80aa 	beq.w	800d048 <_dtoa_r+0x518>
 800cef4:	9b00      	ldr	r3, [sp, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	dd37      	ble.n	800cf6a <_dtoa_r+0x43a>
 800cefa:	1e7b      	subs	r3, r7, #1
 800cefc:	9304      	str	r3, [sp, #16]
 800cefe:	4620      	mov	r0, r4
 800cf00:	4b7d      	ldr	r3, [pc, #500]	@ (800d0f8 <_dtoa_r+0x5c8>)
 800cf02:	2200      	movs	r2, #0
 800cf04:	4629      	mov	r1, r5
 800cf06:	f7f3 fbaf 	bl	8000668 <__aeabi_dmul>
 800cf0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf0e:	9c00      	ldr	r4, [sp, #0]
 800cf10:	3601      	adds	r6, #1
 800cf12:	4630      	mov	r0, r6
 800cf14:	f7f3 fb3e 	bl	8000594 <__aeabi_i2d>
 800cf18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf1c:	f7f3 fba4 	bl	8000668 <__aeabi_dmul>
 800cf20:	4b76      	ldr	r3, [pc, #472]	@ (800d0fc <_dtoa_r+0x5cc>)
 800cf22:	2200      	movs	r2, #0
 800cf24:	f7f3 f9ea 	bl	80002fc <__adddf3>
 800cf28:	4605      	mov	r5, r0
 800cf2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cf2e:	2c00      	cmp	r4, #0
 800cf30:	f040 808d 	bne.w	800d04e <_dtoa_r+0x51e>
 800cf34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf38:	4b71      	ldr	r3, [pc, #452]	@ (800d100 <_dtoa_r+0x5d0>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f7f3 f9dc 	bl	80002f8 <__aeabi_dsub>
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf48:	462a      	mov	r2, r5
 800cf4a:	4633      	mov	r3, r6
 800cf4c:	f7f3 fe1c 	bl	8000b88 <__aeabi_dcmpgt>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	f040 828b 	bne.w	800d46c <_dtoa_r+0x93c>
 800cf56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf5a:	462a      	mov	r2, r5
 800cf5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cf60:	f7f3 fdf4 	bl	8000b4c <__aeabi_dcmplt>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	f040 8128 	bne.w	800d1ba <_dtoa_r+0x68a>
 800cf6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cf6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cf72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f2c0 815a 	blt.w	800d22e <_dtoa_r+0x6fe>
 800cf7a:	2f0e      	cmp	r7, #14
 800cf7c:	f300 8157 	bgt.w	800d22e <_dtoa_r+0x6fe>
 800cf80:	4b5a      	ldr	r3, [pc, #360]	@ (800d0ec <_dtoa_r+0x5bc>)
 800cf82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf86:	ed93 7b00 	vldr	d7, [r3]
 800cf8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	ed8d 7b00 	vstr	d7, [sp]
 800cf92:	da03      	bge.n	800cf9c <_dtoa_r+0x46c>
 800cf94:	9b07      	ldr	r3, [sp, #28]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	f340 8101 	ble.w	800d19e <_dtoa_r+0x66e>
 800cf9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cfa0:	4656      	mov	r6, sl
 800cfa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	f7f3 fc87 	bl	80008bc <__aeabi_ddiv>
 800cfae:	f7f3 fe0b 	bl	8000bc8 <__aeabi_d2iz>
 800cfb2:	4680      	mov	r8, r0
 800cfb4:	f7f3 faee 	bl	8000594 <__aeabi_i2d>
 800cfb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfbc:	f7f3 fb54 	bl	8000668 <__aeabi_dmul>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	4629      	mov	r1, r5
 800cfc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cfcc:	f7f3 f994 	bl	80002f8 <__aeabi_dsub>
 800cfd0:	f806 4b01 	strb.w	r4, [r6], #1
 800cfd4:	9d07      	ldr	r5, [sp, #28]
 800cfd6:	eba6 040a 	sub.w	r4, r6, sl
 800cfda:	42a5      	cmp	r5, r4
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	f040 8117 	bne.w	800d212 <_dtoa_r+0x6e2>
 800cfe4:	f7f3 f98a 	bl	80002fc <__adddf3>
 800cfe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfec:	4604      	mov	r4, r0
 800cfee:	460d      	mov	r5, r1
 800cff0:	f7f3 fdca 	bl	8000b88 <__aeabi_dcmpgt>
 800cff4:	2800      	cmp	r0, #0
 800cff6:	f040 80f9 	bne.w	800d1ec <_dtoa_r+0x6bc>
 800cffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cffe:	4620      	mov	r0, r4
 800d000:	4629      	mov	r1, r5
 800d002:	f7f3 fd99 	bl	8000b38 <__aeabi_dcmpeq>
 800d006:	b118      	cbz	r0, 800d010 <_dtoa_r+0x4e0>
 800d008:	f018 0f01 	tst.w	r8, #1
 800d00c:	f040 80ee 	bne.w	800d1ec <_dtoa_r+0x6bc>
 800d010:	4649      	mov	r1, r9
 800d012:	4658      	mov	r0, fp
 800d014:	f000 ffdc 	bl	800dfd0 <_Bfree>
 800d018:	2300      	movs	r3, #0
 800d01a:	7033      	strb	r3, [r6, #0]
 800d01c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d01e:	3701      	adds	r7, #1
 800d020:	601f      	str	r7, [r3, #0]
 800d022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d024:	2b00      	cmp	r3, #0
 800d026:	f000 831d 	beq.w	800d664 <_dtoa_r+0xb34>
 800d02a:	601e      	str	r6, [r3, #0]
 800d02c:	e31a      	b.n	800d664 <_dtoa_r+0xb34>
 800d02e:	07e2      	lsls	r2, r4, #31
 800d030:	d505      	bpl.n	800d03e <_dtoa_r+0x50e>
 800d032:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d036:	f7f3 fb17 	bl	8000668 <__aeabi_dmul>
 800d03a:	3601      	adds	r6, #1
 800d03c:	2301      	movs	r3, #1
 800d03e:	1064      	asrs	r4, r4, #1
 800d040:	3508      	adds	r5, #8
 800d042:	e73f      	b.n	800cec4 <_dtoa_r+0x394>
 800d044:	2602      	movs	r6, #2
 800d046:	e742      	b.n	800cece <_dtoa_r+0x39e>
 800d048:	9c07      	ldr	r4, [sp, #28]
 800d04a:	9704      	str	r7, [sp, #16]
 800d04c:	e761      	b.n	800cf12 <_dtoa_r+0x3e2>
 800d04e:	4b27      	ldr	r3, [pc, #156]	@ (800d0ec <_dtoa_r+0x5bc>)
 800d050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d052:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d056:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d05a:	4454      	add	r4, sl
 800d05c:	2900      	cmp	r1, #0
 800d05e:	d053      	beq.n	800d108 <_dtoa_r+0x5d8>
 800d060:	4928      	ldr	r1, [pc, #160]	@ (800d104 <_dtoa_r+0x5d4>)
 800d062:	2000      	movs	r0, #0
 800d064:	f7f3 fc2a 	bl	80008bc <__aeabi_ddiv>
 800d068:	4633      	mov	r3, r6
 800d06a:	462a      	mov	r2, r5
 800d06c:	f7f3 f944 	bl	80002f8 <__aeabi_dsub>
 800d070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d074:	4656      	mov	r6, sl
 800d076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d07a:	f7f3 fda5 	bl	8000bc8 <__aeabi_d2iz>
 800d07e:	4605      	mov	r5, r0
 800d080:	f7f3 fa88 	bl	8000594 <__aeabi_i2d>
 800d084:	4602      	mov	r2, r0
 800d086:	460b      	mov	r3, r1
 800d088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d08c:	f7f3 f934 	bl	80002f8 <__aeabi_dsub>
 800d090:	3530      	adds	r5, #48	@ 0x30
 800d092:	4602      	mov	r2, r0
 800d094:	460b      	mov	r3, r1
 800d096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d09a:	f806 5b01 	strb.w	r5, [r6], #1
 800d09e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d0a2:	f7f3 fd53 	bl	8000b4c <__aeabi_dcmplt>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d171      	bne.n	800d18e <_dtoa_r+0x65e>
 800d0aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0ae:	4911      	ldr	r1, [pc, #68]	@ (800d0f4 <_dtoa_r+0x5c4>)
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	f7f3 f921 	bl	80002f8 <__aeabi_dsub>
 800d0b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d0ba:	f7f3 fd47 	bl	8000b4c <__aeabi_dcmplt>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	f040 8095 	bne.w	800d1ee <_dtoa_r+0x6be>
 800d0c4:	42a6      	cmp	r6, r4
 800d0c6:	f43f af50 	beq.w	800cf6a <_dtoa_r+0x43a>
 800d0ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d0ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d0f8 <_dtoa_r+0x5c8>)
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f7f3 fac9 	bl	8000668 <__aeabi_dmul>
 800d0d6:	4b08      	ldr	r3, [pc, #32]	@ (800d0f8 <_dtoa_r+0x5c8>)
 800d0d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d0dc:	2200      	movs	r2, #0
 800d0de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0e2:	f7f3 fac1 	bl	8000668 <__aeabi_dmul>
 800d0e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0ea:	e7c4      	b.n	800d076 <_dtoa_r+0x546>
 800d0ec:	0800f720 	.word	0x0800f720
 800d0f0:	0800f6f8 	.word	0x0800f6f8
 800d0f4:	3ff00000 	.word	0x3ff00000
 800d0f8:	40240000 	.word	0x40240000
 800d0fc:	401c0000 	.word	0x401c0000
 800d100:	40140000 	.word	0x40140000
 800d104:	3fe00000 	.word	0x3fe00000
 800d108:	4631      	mov	r1, r6
 800d10a:	4628      	mov	r0, r5
 800d10c:	f7f3 faac 	bl	8000668 <__aeabi_dmul>
 800d110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d114:	9415      	str	r4, [sp, #84]	@ 0x54
 800d116:	4656      	mov	r6, sl
 800d118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d11c:	f7f3 fd54 	bl	8000bc8 <__aeabi_d2iz>
 800d120:	4605      	mov	r5, r0
 800d122:	f7f3 fa37 	bl	8000594 <__aeabi_i2d>
 800d126:	4602      	mov	r2, r0
 800d128:	460b      	mov	r3, r1
 800d12a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d12e:	f7f3 f8e3 	bl	80002f8 <__aeabi_dsub>
 800d132:	3530      	adds	r5, #48	@ 0x30
 800d134:	f806 5b01 	strb.w	r5, [r6], #1
 800d138:	4602      	mov	r2, r0
 800d13a:	460b      	mov	r3, r1
 800d13c:	42a6      	cmp	r6, r4
 800d13e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d142:	f04f 0200 	mov.w	r2, #0
 800d146:	d124      	bne.n	800d192 <_dtoa_r+0x662>
 800d148:	4bac      	ldr	r3, [pc, #688]	@ (800d3fc <_dtoa_r+0x8cc>)
 800d14a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d14e:	f7f3 f8d5 	bl	80002fc <__adddf3>
 800d152:	4602      	mov	r2, r0
 800d154:	460b      	mov	r3, r1
 800d156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d15a:	f7f3 fd15 	bl	8000b88 <__aeabi_dcmpgt>
 800d15e:	2800      	cmp	r0, #0
 800d160:	d145      	bne.n	800d1ee <_dtoa_r+0x6be>
 800d162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d166:	49a5      	ldr	r1, [pc, #660]	@ (800d3fc <_dtoa_r+0x8cc>)
 800d168:	2000      	movs	r0, #0
 800d16a:	f7f3 f8c5 	bl	80002f8 <__aeabi_dsub>
 800d16e:	4602      	mov	r2, r0
 800d170:	460b      	mov	r3, r1
 800d172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d176:	f7f3 fce9 	bl	8000b4c <__aeabi_dcmplt>
 800d17a:	2800      	cmp	r0, #0
 800d17c:	f43f aef5 	beq.w	800cf6a <_dtoa_r+0x43a>
 800d180:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d182:	1e73      	subs	r3, r6, #1
 800d184:	9315      	str	r3, [sp, #84]	@ 0x54
 800d186:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d18a:	2b30      	cmp	r3, #48	@ 0x30
 800d18c:	d0f8      	beq.n	800d180 <_dtoa_r+0x650>
 800d18e:	9f04      	ldr	r7, [sp, #16]
 800d190:	e73e      	b.n	800d010 <_dtoa_r+0x4e0>
 800d192:	4b9b      	ldr	r3, [pc, #620]	@ (800d400 <_dtoa_r+0x8d0>)
 800d194:	f7f3 fa68 	bl	8000668 <__aeabi_dmul>
 800d198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d19c:	e7bc      	b.n	800d118 <_dtoa_r+0x5e8>
 800d19e:	d10c      	bne.n	800d1ba <_dtoa_r+0x68a>
 800d1a0:	4b98      	ldr	r3, [pc, #608]	@ (800d404 <_dtoa_r+0x8d4>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1a8:	f7f3 fa5e 	bl	8000668 <__aeabi_dmul>
 800d1ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1b0:	f7f3 fce0 	bl	8000b74 <__aeabi_dcmpge>
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	f000 8157 	beq.w	800d468 <_dtoa_r+0x938>
 800d1ba:	2400      	movs	r4, #0
 800d1bc:	4625      	mov	r5, r4
 800d1be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1c0:	43db      	mvns	r3, r3
 800d1c2:	9304      	str	r3, [sp, #16]
 800d1c4:	4656      	mov	r6, sl
 800d1c6:	2700      	movs	r7, #0
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	4658      	mov	r0, fp
 800d1cc:	f000 ff00 	bl	800dfd0 <_Bfree>
 800d1d0:	2d00      	cmp	r5, #0
 800d1d2:	d0dc      	beq.n	800d18e <_dtoa_r+0x65e>
 800d1d4:	b12f      	cbz	r7, 800d1e2 <_dtoa_r+0x6b2>
 800d1d6:	42af      	cmp	r7, r5
 800d1d8:	d003      	beq.n	800d1e2 <_dtoa_r+0x6b2>
 800d1da:	4639      	mov	r1, r7
 800d1dc:	4658      	mov	r0, fp
 800d1de:	f000 fef7 	bl	800dfd0 <_Bfree>
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	4658      	mov	r0, fp
 800d1e6:	f000 fef3 	bl	800dfd0 <_Bfree>
 800d1ea:	e7d0      	b.n	800d18e <_dtoa_r+0x65e>
 800d1ec:	9704      	str	r7, [sp, #16]
 800d1ee:	4633      	mov	r3, r6
 800d1f0:	461e      	mov	r6, r3
 800d1f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1f6:	2a39      	cmp	r2, #57	@ 0x39
 800d1f8:	d107      	bne.n	800d20a <_dtoa_r+0x6da>
 800d1fa:	459a      	cmp	sl, r3
 800d1fc:	d1f8      	bne.n	800d1f0 <_dtoa_r+0x6c0>
 800d1fe:	9a04      	ldr	r2, [sp, #16]
 800d200:	3201      	adds	r2, #1
 800d202:	9204      	str	r2, [sp, #16]
 800d204:	2230      	movs	r2, #48	@ 0x30
 800d206:	f88a 2000 	strb.w	r2, [sl]
 800d20a:	781a      	ldrb	r2, [r3, #0]
 800d20c:	3201      	adds	r2, #1
 800d20e:	701a      	strb	r2, [r3, #0]
 800d210:	e7bd      	b.n	800d18e <_dtoa_r+0x65e>
 800d212:	4b7b      	ldr	r3, [pc, #492]	@ (800d400 <_dtoa_r+0x8d0>)
 800d214:	2200      	movs	r2, #0
 800d216:	f7f3 fa27 	bl	8000668 <__aeabi_dmul>
 800d21a:	2200      	movs	r2, #0
 800d21c:	2300      	movs	r3, #0
 800d21e:	4604      	mov	r4, r0
 800d220:	460d      	mov	r5, r1
 800d222:	f7f3 fc89 	bl	8000b38 <__aeabi_dcmpeq>
 800d226:	2800      	cmp	r0, #0
 800d228:	f43f aebb 	beq.w	800cfa2 <_dtoa_r+0x472>
 800d22c:	e6f0      	b.n	800d010 <_dtoa_r+0x4e0>
 800d22e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d230:	2a00      	cmp	r2, #0
 800d232:	f000 80db 	beq.w	800d3ec <_dtoa_r+0x8bc>
 800d236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d238:	2a01      	cmp	r2, #1
 800d23a:	f300 80bf 	bgt.w	800d3bc <_dtoa_r+0x88c>
 800d23e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d240:	2a00      	cmp	r2, #0
 800d242:	f000 80b7 	beq.w	800d3b4 <_dtoa_r+0x884>
 800d246:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d24a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d24c:	4646      	mov	r6, r8
 800d24e:	9a08      	ldr	r2, [sp, #32]
 800d250:	2101      	movs	r1, #1
 800d252:	441a      	add	r2, r3
 800d254:	4658      	mov	r0, fp
 800d256:	4498      	add	r8, r3
 800d258:	9208      	str	r2, [sp, #32]
 800d25a:	f000 ffb7 	bl	800e1cc <__i2b>
 800d25e:	4605      	mov	r5, r0
 800d260:	b15e      	cbz	r6, 800d27a <_dtoa_r+0x74a>
 800d262:	9b08      	ldr	r3, [sp, #32]
 800d264:	2b00      	cmp	r3, #0
 800d266:	dd08      	ble.n	800d27a <_dtoa_r+0x74a>
 800d268:	42b3      	cmp	r3, r6
 800d26a:	9a08      	ldr	r2, [sp, #32]
 800d26c:	bfa8      	it	ge
 800d26e:	4633      	movge	r3, r6
 800d270:	eba8 0803 	sub.w	r8, r8, r3
 800d274:	1af6      	subs	r6, r6, r3
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	9308      	str	r3, [sp, #32]
 800d27a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d27c:	b1f3      	cbz	r3, 800d2bc <_dtoa_r+0x78c>
 800d27e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 80b7 	beq.w	800d3f4 <_dtoa_r+0x8c4>
 800d286:	b18c      	cbz	r4, 800d2ac <_dtoa_r+0x77c>
 800d288:	4629      	mov	r1, r5
 800d28a:	4622      	mov	r2, r4
 800d28c:	4658      	mov	r0, fp
 800d28e:	f001 f85d 	bl	800e34c <__pow5mult>
 800d292:	464a      	mov	r2, r9
 800d294:	4601      	mov	r1, r0
 800d296:	4605      	mov	r5, r0
 800d298:	4658      	mov	r0, fp
 800d29a:	f000 ffad 	bl	800e1f8 <__multiply>
 800d29e:	4649      	mov	r1, r9
 800d2a0:	9004      	str	r0, [sp, #16]
 800d2a2:	4658      	mov	r0, fp
 800d2a4:	f000 fe94 	bl	800dfd0 <_Bfree>
 800d2a8:	9b04      	ldr	r3, [sp, #16]
 800d2aa:	4699      	mov	r9, r3
 800d2ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2ae:	1b1a      	subs	r2, r3, r4
 800d2b0:	d004      	beq.n	800d2bc <_dtoa_r+0x78c>
 800d2b2:	4649      	mov	r1, r9
 800d2b4:	4658      	mov	r0, fp
 800d2b6:	f001 f849 	bl	800e34c <__pow5mult>
 800d2ba:	4681      	mov	r9, r0
 800d2bc:	2101      	movs	r1, #1
 800d2be:	4658      	mov	r0, fp
 800d2c0:	f000 ff84 	bl	800e1cc <__i2b>
 800d2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f000 81cf 	beq.w	800d66c <_dtoa_r+0xb3c>
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	4601      	mov	r1, r0
 800d2d2:	4658      	mov	r0, fp
 800d2d4:	f001 f83a 	bl	800e34c <__pow5mult>
 800d2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	4604      	mov	r4, r0
 800d2de:	f300 8095 	bgt.w	800d40c <_dtoa_r+0x8dc>
 800d2e2:	9b02      	ldr	r3, [sp, #8]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f040 8087 	bne.w	800d3f8 <_dtoa_r+0x8c8>
 800d2ea:	9b03      	ldr	r3, [sp, #12]
 800d2ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f040 8089 	bne.w	800d408 <_dtoa_r+0x8d8>
 800d2f6:	9b03      	ldr	r3, [sp, #12]
 800d2f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d2fc:	0d1b      	lsrs	r3, r3, #20
 800d2fe:	051b      	lsls	r3, r3, #20
 800d300:	b12b      	cbz	r3, 800d30e <_dtoa_r+0x7de>
 800d302:	9b08      	ldr	r3, [sp, #32]
 800d304:	3301      	adds	r3, #1
 800d306:	9308      	str	r3, [sp, #32]
 800d308:	f108 0801 	add.w	r8, r8, #1
 800d30c:	2301      	movs	r3, #1
 800d30e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d312:	2b00      	cmp	r3, #0
 800d314:	f000 81b0 	beq.w	800d678 <_dtoa_r+0xb48>
 800d318:	6923      	ldr	r3, [r4, #16]
 800d31a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d31e:	6918      	ldr	r0, [r3, #16]
 800d320:	f000 ff08 	bl	800e134 <__hi0bits>
 800d324:	f1c0 0020 	rsb	r0, r0, #32
 800d328:	9b08      	ldr	r3, [sp, #32]
 800d32a:	4418      	add	r0, r3
 800d32c:	f010 001f 	ands.w	r0, r0, #31
 800d330:	d077      	beq.n	800d422 <_dtoa_r+0x8f2>
 800d332:	f1c0 0320 	rsb	r3, r0, #32
 800d336:	2b04      	cmp	r3, #4
 800d338:	dd6b      	ble.n	800d412 <_dtoa_r+0x8e2>
 800d33a:	9b08      	ldr	r3, [sp, #32]
 800d33c:	f1c0 001c 	rsb	r0, r0, #28
 800d340:	4403      	add	r3, r0
 800d342:	4480      	add	r8, r0
 800d344:	4406      	add	r6, r0
 800d346:	9308      	str	r3, [sp, #32]
 800d348:	f1b8 0f00 	cmp.w	r8, #0
 800d34c:	dd05      	ble.n	800d35a <_dtoa_r+0x82a>
 800d34e:	4649      	mov	r1, r9
 800d350:	4642      	mov	r2, r8
 800d352:	4658      	mov	r0, fp
 800d354:	f001 f854 	bl	800e400 <__lshift>
 800d358:	4681      	mov	r9, r0
 800d35a:	9b08      	ldr	r3, [sp, #32]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	dd05      	ble.n	800d36c <_dtoa_r+0x83c>
 800d360:	4621      	mov	r1, r4
 800d362:	461a      	mov	r2, r3
 800d364:	4658      	mov	r0, fp
 800d366:	f001 f84b 	bl	800e400 <__lshift>
 800d36a:	4604      	mov	r4, r0
 800d36c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d059      	beq.n	800d426 <_dtoa_r+0x8f6>
 800d372:	4621      	mov	r1, r4
 800d374:	4648      	mov	r0, r9
 800d376:	f001 f8af 	bl	800e4d8 <__mcmp>
 800d37a:	2800      	cmp	r0, #0
 800d37c:	da53      	bge.n	800d426 <_dtoa_r+0x8f6>
 800d37e:	1e7b      	subs	r3, r7, #1
 800d380:	9304      	str	r3, [sp, #16]
 800d382:	4649      	mov	r1, r9
 800d384:	2300      	movs	r3, #0
 800d386:	220a      	movs	r2, #10
 800d388:	4658      	mov	r0, fp
 800d38a:	f000 fe43 	bl	800e014 <__multadd>
 800d38e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d390:	4681      	mov	r9, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 8172 	beq.w	800d67c <_dtoa_r+0xb4c>
 800d398:	2300      	movs	r3, #0
 800d39a:	4629      	mov	r1, r5
 800d39c:	220a      	movs	r2, #10
 800d39e:	4658      	mov	r0, fp
 800d3a0:	f000 fe38 	bl	800e014 <__multadd>
 800d3a4:	9b00      	ldr	r3, [sp, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	dc67      	bgt.n	800d47c <_dtoa_r+0x94c>
 800d3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	dc41      	bgt.n	800d436 <_dtoa_r+0x906>
 800d3b2:	e063      	b.n	800d47c <_dtoa_r+0x94c>
 800d3b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d3b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d3ba:	e746      	b.n	800d24a <_dtoa_r+0x71a>
 800d3bc:	9b07      	ldr	r3, [sp, #28]
 800d3be:	1e5c      	subs	r4, r3, #1
 800d3c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3c2:	42a3      	cmp	r3, r4
 800d3c4:	bfbf      	itttt	lt
 800d3c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d3c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d3ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d3cc:	1ae3      	sublt	r3, r4, r3
 800d3ce:	bfb4      	ite	lt
 800d3d0:	18d2      	addlt	r2, r2, r3
 800d3d2:	1b1c      	subge	r4, r3, r4
 800d3d4:	9b07      	ldr	r3, [sp, #28]
 800d3d6:	bfbc      	itt	lt
 800d3d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d3da:	2400      	movlt	r4, #0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	bfb5      	itete	lt
 800d3e0:	eba8 0603 	sublt.w	r6, r8, r3
 800d3e4:	9b07      	ldrge	r3, [sp, #28]
 800d3e6:	2300      	movlt	r3, #0
 800d3e8:	4646      	movge	r6, r8
 800d3ea:	e730      	b.n	800d24e <_dtoa_r+0x71e>
 800d3ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d3ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d3f0:	4646      	mov	r6, r8
 800d3f2:	e735      	b.n	800d260 <_dtoa_r+0x730>
 800d3f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3f6:	e75c      	b.n	800d2b2 <_dtoa_r+0x782>
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	e788      	b.n	800d30e <_dtoa_r+0x7de>
 800d3fc:	3fe00000 	.word	0x3fe00000
 800d400:	40240000 	.word	0x40240000
 800d404:	40140000 	.word	0x40140000
 800d408:	9b02      	ldr	r3, [sp, #8]
 800d40a:	e780      	b.n	800d30e <_dtoa_r+0x7de>
 800d40c:	2300      	movs	r3, #0
 800d40e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d410:	e782      	b.n	800d318 <_dtoa_r+0x7e8>
 800d412:	d099      	beq.n	800d348 <_dtoa_r+0x818>
 800d414:	9a08      	ldr	r2, [sp, #32]
 800d416:	331c      	adds	r3, #28
 800d418:	441a      	add	r2, r3
 800d41a:	4498      	add	r8, r3
 800d41c:	441e      	add	r6, r3
 800d41e:	9208      	str	r2, [sp, #32]
 800d420:	e792      	b.n	800d348 <_dtoa_r+0x818>
 800d422:	4603      	mov	r3, r0
 800d424:	e7f6      	b.n	800d414 <_dtoa_r+0x8e4>
 800d426:	9b07      	ldr	r3, [sp, #28]
 800d428:	9704      	str	r7, [sp, #16]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	dc20      	bgt.n	800d470 <_dtoa_r+0x940>
 800d42e:	9300      	str	r3, [sp, #0]
 800d430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d432:	2b02      	cmp	r3, #2
 800d434:	dd1e      	ble.n	800d474 <_dtoa_r+0x944>
 800d436:	9b00      	ldr	r3, [sp, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f47f aec0 	bne.w	800d1be <_dtoa_r+0x68e>
 800d43e:	4621      	mov	r1, r4
 800d440:	2205      	movs	r2, #5
 800d442:	4658      	mov	r0, fp
 800d444:	f000 fde6 	bl	800e014 <__multadd>
 800d448:	4601      	mov	r1, r0
 800d44a:	4604      	mov	r4, r0
 800d44c:	4648      	mov	r0, r9
 800d44e:	f001 f843 	bl	800e4d8 <__mcmp>
 800d452:	2800      	cmp	r0, #0
 800d454:	f77f aeb3 	ble.w	800d1be <_dtoa_r+0x68e>
 800d458:	4656      	mov	r6, sl
 800d45a:	2331      	movs	r3, #49	@ 0x31
 800d45c:	f806 3b01 	strb.w	r3, [r6], #1
 800d460:	9b04      	ldr	r3, [sp, #16]
 800d462:	3301      	adds	r3, #1
 800d464:	9304      	str	r3, [sp, #16]
 800d466:	e6ae      	b.n	800d1c6 <_dtoa_r+0x696>
 800d468:	9c07      	ldr	r4, [sp, #28]
 800d46a:	9704      	str	r7, [sp, #16]
 800d46c:	4625      	mov	r5, r4
 800d46e:	e7f3      	b.n	800d458 <_dtoa_r+0x928>
 800d470:	9b07      	ldr	r3, [sp, #28]
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d476:	2b00      	cmp	r3, #0
 800d478:	f000 8104 	beq.w	800d684 <_dtoa_r+0xb54>
 800d47c:	2e00      	cmp	r6, #0
 800d47e:	dd05      	ble.n	800d48c <_dtoa_r+0x95c>
 800d480:	4629      	mov	r1, r5
 800d482:	4632      	mov	r2, r6
 800d484:	4658      	mov	r0, fp
 800d486:	f000 ffbb 	bl	800e400 <__lshift>
 800d48a:	4605      	mov	r5, r0
 800d48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d05a      	beq.n	800d548 <_dtoa_r+0xa18>
 800d492:	6869      	ldr	r1, [r5, #4]
 800d494:	4658      	mov	r0, fp
 800d496:	f000 fd5b 	bl	800df50 <_Balloc>
 800d49a:	4606      	mov	r6, r0
 800d49c:	b928      	cbnz	r0, 800d4aa <_dtoa_r+0x97a>
 800d49e:	4b84      	ldr	r3, [pc, #528]	@ (800d6b0 <_dtoa_r+0xb80>)
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d4a6:	f7ff bb5a 	b.w	800cb5e <_dtoa_r+0x2e>
 800d4aa:	692a      	ldr	r2, [r5, #16]
 800d4ac:	3202      	adds	r2, #2
 800d4ae:	0092      	lsls	r2, r2, #2
 800d4b0:	f105 010c 	add.w	r1, r5, #12
 800d4b4:	300c      	adds	r0, #12
 800d4b6:	f7ff fa7a 	bl	800c9ae <memcpy>
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	4631      	mov	r1, r6
 800d4be:	4658      	mov	r0, fp
 800d4c0:	f000 ff9e 	bl	800e400 <__lshift>
 800d4c4:	f10a 0301 	add.w	r3, sl, #1
 800d4c8:	9307      	str	r3, [sp, #28]
 800d4ca:	9b00      	ldr	r3, [sp, #0]
 800d4cc:	4453      	add	r3, sl
 800d4ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4d0:	9b02      	ldr	r3, [sp, #8]
 800d4d2:	f003 0301 	and.w	r3, r3, #1
 800d4d6:	462f      	mov	r7, r5
 800d4d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4da:	4605      	mov	r5, r0
 800d4dc:	9b07      	ldr	r3, [sp, #28]
 800d4de:	4621      	mov	r1, r4
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	4648      	mov	r0, r9
 800d4e4:	9300      	str	r3, [sp, #0]
 800d4e6:	f7ff fa99 	bl	800ca1c <quorem>
 800d4ea:	4639      	mov	r1, r7
 800d4ec:	9002      	str	r0, [sp, #8]
 800d4ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d4f2:	4648      	mov	r0, r9
 800d4f4:	f000 fff0 	bl	800e4d8 <__mcmp>
 800d4f8:	462a      	mov	r2, r5
 800d4fa:	9008      	str	r0, [sp, #32]
 800d4fc:	4621      	mov	r1, r4
 800d4fe:	4658      	mov	r0, fp
 800d500:	f001 f806 	bl	800e510 <__mdiff>
 800d504:	68c2      	ldr	r2, [r0, #12]
 800d506:	4606      	mov	r6, r0
 800d508:	bb02      	cbnz	r2, 800d54c <_dtoa_r+0xa1c>
 800d50a:	4601      	mov	r1, r0
 800d50c:	4648      	mov	r0, r9
 800d50e:	f000 ffe3 	bl	800e4d8 <__mcmp>
 800d512:	4602      	mov	r2, r0
 800d514:	4631      	mov	r1, r6
 800d516:	4658      	mov	r0, fp
 800d518:	920e      	str	r2, [sp, #56]	@ 0x38
 800d51a:	f000 fd59 	bl	800dfd0 <_Bfree>
 800d51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d520:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d522:	9e07      	ldr	r6, [sp, #28]
 800d524:	ea43 0102 	orr.w	r1, r3, r2
 800d528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d52a:	4319      	orrs	r1, r3
 800d52c:	d110      	bne.n	800d550 <_dtoa_r+0xa20>
 800d52e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d532:	d029      	beq.n	800d588 <_dtoa_r+0xa58>
 800d534:	9b08      	ldr	r3, [sp, #32]
 800d536:	2b00      	cmp	r3, #0
 800d538:	dd02      	ble.n	800d540 <_dtoa_r+0xa10>
 800d53a:	9b02      	ldr	r3, [sp, #8]
 800d53c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d540:	9b00      	ldr	r3, [sp, #0]
 800d542:	f883 8000 	strb.w	r8, [r3]
 800d546:	e63f      	b.n	800d1c8 <_dtoa_r+0x698>
 800d548:	4628      	mov	r0, r5
 800d54a:	e7bb      	b.n	800d4c4 <_dtoa_r+0x994>
 800d54c:	2201      	movs	r2, #1
 800d54e:	e7e1      	b.n	800d514 <_dtoa_r+0x9e4>
 800d550:	9b08      	ldr	r3, [sp, #32]
 800d552:	2b00      	cmp	r3, #0
 800d554:	db04      	blt.n	800d560 <_dtoa_r+0xa30>
 800d556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d558:	430b      	orrs	r3, r1
 800d55a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d55c:	430b      	orrs	r3, r1
 800d55e:	d120      	bne.n	800d5a2 <_dtoa_r+0xa72>
 800d560:	2a00      	cmp	r2, #0
 800d562:	dded      	ble.n	800d540 <_dtoa_r+0xa10>
 800d564:	4649      	mov	r1, r9
 800d566:	2201      	movs	r2, #1
 800d568:	4658      	mov	r0, fp
 800d56a:	f000 ff49 	bl	800e400 <__lshift>
 800d56e:	4621      	mov	r1, r4
 800d570:	4681      	mov	r9, r0
 800d572:	f000 ffb1 	bl	800e4d8 <__mcmp>
 800d576:	2800      	cmp	r0, #0
 800d578:	dc03      	bgt.n	800d582 <_dtoa_r+0xa52>
 800d57a:	d1e1      	bne.n	800d540 <_dtoa_r+0xa10>
 800d57c:	f018 0f01 	tst.w	r8, #1
 800d580:	d0de      	beq.n	800d540 <_dtoa_r+0xa10>
 800d582:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d586:	d1d8      	bne.n	800d53a <_dtoa_r+0xa0a>
 800d588:	9a00      	ldr	r2, [sp, #0]
 800d58a:	2339      	movs	r3, #57	@ 0x39
 800d58c:	7013      	strb	r3, [r2, #0]
 800d58e:	4633      	mov	r3, r6
 800d590:	461e      	mov	r6, r3
 800d592:	3b01      	subs	r3, #1
 800d594:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d598:	2a39      	cmp	r2, #57	@ 0x39
 800d59a:	d052      	beq.n	800d642 <_dtoa_r+0xb12>
 800d59c:	3201      	adds	r2, #1
 800d59e:	701a      	strb	r2, [r3, #0]
 800d5a0:	e612      	b.n	800d1c8 <_dtoa_r+0x698>
 800d5a2:	2a00      	cmp	r2, #0
 800d5a4:	dd07      	ble.n	800d5b6 <_dtoa_r+0xa86>
 800d5a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d5aa:	d0ed      	beq.n	800d588 <_dtoa_r+0xa58>
 800d5ac:	9a00      	ldr	r2, [sp, #0]
 800d5ae:	f108 0301 	add.w	r3, r8, #1
 800d5b2:	7013      	strb	r3, [r2, #0]
 800d5b4:	e608      	b.n	800d1c8 <_dtoa_r+0x698>
 800d5b6:	9b07      	ldr	r3, [sp, #28]
 800d5b8:	9a07      	ldr	r2, [sp, #28]
 800d5ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d5be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d028      	beq.n	800d616 <_dtoa_r+0xae6>
 800d5c4:	4649      	mov	r1, r9
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	220a      	movs	r2, #10
 800d5ca:	4658      	mov	r0, fp
 800d5cc:	f000 fd22 	bl	800e014 <__multadd>
 800d5d0:	42af      	cmp	r7, r5
 800d5d2:	4681      	mov	r9, r0
 800d5d4:	f04f 0300 	mov.w	r3, #0
 800d5d8:	f04f 020a 	mov.w	r2, #10
 800d5dc:	4639      	mov	r1, r7
 800d5de:	4658      	mov	r0, fp
 800d5e0:	d107      	bne.n	800d5f2 <_dtoa_r+0xac2>
 800d5e2:	f000 fd17 	bl	800e014 <__multadd>
 800d5e6:	4607      	mov	r7, r0
 800d5e8:	4605      	mov	r5, r0
 800d5ea:	9b07      	ldr	r3, [sp, #28]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	9307      	str	r3, [sp, #28]
 800d5f0:	e774      	b.n	800d4dc <_dtoa_r+0x9ac>
 800d5f2:	f000 fd0f 	bl	800e014 <__multadd>
 800d5f6:	4629      	mov	r1, r5
 800d5f8:	4607      	mov	r7, r0
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	220a      	movs	r2, #10
 800d5fe:	4658      	mov	r0, fp
 800d600:	f000 fd08 	bl	800e014 <__multadd>
 800d604:	4605      	mov	r5, r0
 800d606:	e7f0      	b.n	800d5ea <_dtoa_r+0xaba>
 800d608:	9b00      	ldr	r3, [sp, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	bfcc      	ite	gt
 800d60e:	461e      	movgt	r6, r3
 800d610:	2601      	movle	r6, #1
 800d612:	4456      	add	r6, sl
 800d614:	2700      	movs	r7, #0
 800d616:	4649      	mov	r1, r9
 800d618:	2201      	movs	r2, #1
 800d61a:	4658      	mov	r0, fp
 800d61c:	f000 fef0 	bl	800e400 <__lshift>
 800d620:	4621      	mov	r1, r4
 800d622:	4681      	mov	r9, r0
 800d624:	f000 ff58 	bl	800e4d8 <__mcmp>
 800d628:	2800      	cmp	r0, #0
 800d62a:	dcb0      	bgt.n	800d58e <_dtoa_r+0xa5e>
 800d62c:	d102      	bne.n	800d634 <_dtoa_r+0xb04>
 800d62e:	f018 0f01 	tst.w	r8, #1
 800d632:	d1ac      	bne.n	800d58e <_dtoa_r+0xa5e>
 800d634:	4633      	mov	r3, r6
 800d636:	461e      	mov	r6, r3
 800d638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d63c:	2a30      	cmp	r2, #48	@ 0x30
 800d63e:	d0fa      	beq.n	800d636 <_dtoa_r+0xb06>
 800d640:	e5c2      	b.n	800d1c8 <_dtoa_r+0x698>
 800d642:	459a      	cmp	sl, r3
 800d644:	d1a4      	bne.n	800d590 <_dtoa_r+0xa60>
 800d646:	9b04      	ldr	r3, [sp, #16]
 800d648:	3301      	adds	r3, #1
 800d64a:	9304      	str	r3, [sp, #16]
 800d64c:	2331      	movs	r3, #49	@ 0x31
 800d64e:	f88a 3000 	strb.w	r3, [sl]
 800d652:	e5b9      	b.n	800d1c8 <_dtoa_r+0x698>
 800d654:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d656:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d6b4 <_dtoa_r+0xb84>
 800d65a:	b11b      	cbz	r3, 800d664 <_dtoa_r+0xb34>
 800d65c:	f10a 0308 	add.w	r3, sl, #8
 800d660:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d662:	6013      	str	r3, [r2, #0]
 800d664:	4650      	mov	r0, sl
 800d666:	b019      	add	sp, #100	@ 0x64
 800d668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d66c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d66e:	2b01      	cmp	r3, #1
 800d670:	f77f ae37 	ble.w	800d2e2 <_dtoa_r+0x7b2>
 800d674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d676:	930a      	str	r3, [sp, #40]	@ 0x28
 800d678:	2001      	movs	r0, #1
 800d67a:	e655      	b.n	800d328 <_dtoa_r+0x7f8>
 800d67c:	9b00      	ldr	r3, [sp, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f77f aed6 	ble.w	800d430 <_dtoa_r+0x900>
 800d684:	4656      	mov	r6, sl
 800d686:	4621      	mov	r1, r4
 800d688:	4648      	mov	r0, r9
 800d68a:	f7ff f9c7 	bl	800ca1c <quorem>
 800d68e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d692:	f806 8b01 	strb.w	r8, [r6], #1
 800d696:	9b00      	ldr	r3, [sp, #0]
 800d698:	eba6 020a 	sub.w	r2, r6, sl
 800d69c:	4293      	cmp	r3, r2
 800d69e:	ddb3      	ble.n	800d608 <_dtoa_r+0xad8>
 800d6a0:	4649      	mov	r1, r9
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	220a      	movs	r2, #10
 800d6a6:	4658      	mov	r0, fp
 800d6a8:	f000 fcb4 	bl	800e014 <__multadd>
 800d6ac:	4681      	mov	r9, r0
 800d6ae:	e7ea      	b.n	800d686 <_dtoa_r+0xb56>
 800d6b0:	0800f61e 	.word	0x0800f61e
 800d6b4:	0800f5b9 	.word	0x0800f5b9

0800d6b8 <_free_r>:
 800d6b8:	b538      	push	{r3, r4, r5, lr}
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	2900      	cmp	r1, #0
 800d6be:	d041      	beq.n	800d744 <_free_r+0x8c>
 800d6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6c4:	1f0c      	subs	r4, r1, #4
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	bfb8      	it	lt
 800d6ca:	18e4      	addlt	r4, r4, r3
 800d6cc:	f000 fc34 	bl	800df38 <__malloc_lock>
 800d6d0:	4a1d      	ldr	r2, [pc, #116]	@ (800d748 <_free_r+0x90>)
 800d6d2:	6813      	ldr	r3, [r2, #0]
 800d6d4:	b933      	cbnz	r3, 800d6e4 <_free_r+0x2c>
 800d6d6:	6063      	str	r3, [r4, #4]
 800d6d8:	6014      	str	r4, [r2, #0]
 800d6da:	4628      	mov	r0, r5
 800d6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6e0:	f000 bc30 	b.w	800df44 <__malloc_unlock>
 800d6e4:	42a3      	cmp	r3, r4
 800d6e6:	d908      	bls.n	800d6fa <_free_r+0x42>
 800d6e8:	6820      	ldr	r0, [r4, #0]
 800d6ea:	1821      	adds	r1, r4, r0
 800d6ec:	428b      	cmp	r3, r1
 800d6ee:	bf01      	itttt	eq
 800d6f0:	6819      	ldreq	r1, [r3, #0]
 800d6f2:	685b      	ldreq	r3, [r3, #4]
 800d6f4:	1809      	addeq	r1, r1, r0
 800d6f6:	6021      	streq	r1, [r4, #0]
 800d6f8:	e7ed      	b.n	800d6d6 <_free_r+0x1e>
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	b10b      	cbz	r3, 800d704 <_free_r+0x4c>
 800d700:	42a3      	cmp	r3, r4
 800d702:	d9fa      	bls.n	800d6fa <_free_r+0x42>
 800d704:	6811      	ldr	r1, [r2, #0]
 800d706:	1850      	adds	r0, r2, r1
 800d708:	42a0      	cmp	r0, r4
 800d70a:	d10b      	bne.n	800d724 <_free_r+0x6c>
 800d70c:	6820      	ldr	r0, [r4, #0]
 800d70e:	4401      	add	r1, r0
 800d710:	1850      	adds	r0, r2, r1
 800d712:	4283      	cmp	r3, r0
 800d714:	6011      	str	r1, [r2, #0]
 800d716:	d1e0      	bne.n	800d6da <_free_r+0x22>
 800d718:	6818      	ldr	r0, [r3, #0]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	6053      	str	r3, [r2, #4]
 800d71e:	4408      	add	r0, r1
 800d720:	6010      	str	r0, [r2, #0]
 800d722:	e7da      	b.n	800d6da <_free_r+0x22>
 800d724:	d902      	bls.n	800d72c <_free_r+0x74>
 800d726:	230c      	movs	r3, #12
 800d728:	602b      	str	r3, [r5, #0]
 800d72a:	e7d6      	b.n	800d6da <_free_r+0x22>
 800d72c:	6820      	ldr	r0, [r4, #0]
 800d72e:	1821      	adds	r1, r4, r0
 800d730:	428b      	cmp	r3, r1
 800d732:	bf04      	itt	eq
 800d734:	6819      	ldreq	r1, [r3, #0]
 800d736:	685b      	ldreq	r3, [r3, #4]
 800d738:	6063      	str	r3, [r4, #4]
 800d73a:	bf04      	itt	eq
 800d73c:	1809      	addeq	r1, r1, r0
 800d73e:	6021      	streq	r1, [r4, #0]
 800d740:	6054      	str	r4, [r2, #4]
 800d742:	e7ca      	b.n	800d6da <_free_r+0x22>
 800d744:	bd38      	pop	{r3, r4, r5, pc}
 800d746:	bf00      	nop
 800d748:	20000960 	.word	0x20000960

0800d74c <rshift>:
 800d74c:	6903      	ldr	r3, [r0, #16]
 800d74e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d752:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d756:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d75a:	f100 0414 	add.w	r4, r0, #20
 800d75e:	dd45      	ble.n	800d7ec <rshift+0xa0>
 800d760:	f011 011f 	ands.w	r1, r1, #31
 800d764:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d768:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d76c:	d10c      	bne.n	800d788 <rshift+0x3c>
 800d76e:	f100 0710 	add.w	r7, r0, #16
 800d772:	4629      	mov	r1, r5
 800d774:	42b1      	cmp	r1, r6
 800d776:	d334      	bcc.n	800d7e2 <rshift+0x96>
 800d778:	1a9b      	subs	r3, r3, r2
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	1eea      	subs	r2, r5, #3
 800d77e:	4296      	cmp	r6, r2
 800d780:	bf38      	it	cc
 800d782:	2300      	movcc	r3, #0
 800d784:	4423      	add	r3, r4
 800d786:	e015      	b.n	800d7b4 <rshift+0x68>
 800d788:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d78c:	f1c1 0820 	rsb	r8, r1, #32
 800d790:	40cf      	lsrs	r7, r1
 800d792:	f105 0e04 	add.w	lr, r5, #4
 800d796:	46a1      	mov	r9, r4
 800d798:	4576      	cmp	r6, lr
 800d79a:	46f4      	mov	ip, lr
 800d79c:	d815      	bhi.n	800d7ca <rshift+0x7e>
 800d79e:	1a9a      	subs	r2, r3, r2
 800d7a0:	0092      	lsls	r2, r2, #2
 800d7a2:	3a04      	subs	r2, #4
 800d7a4:	3501      	adds	r5, #1
 800d7a6:	42ae      	cmp	r6, r5
 800d7a8:	bf38      	it	cc
 800d7aa:	2200      	movcc	r2, #0
 800d7ac:	18a3      	adds	r3, r4, r2
 800d7ae:	50a7      	str	r7, [r4, r2]
 800d7b0:	b107      	cbz	r7, 800d7b4 <rshift+0x68>
 800d7b2:	3304      	adds	r3, #4
 800d7b4:	1b1a      	subs	r2, r3, r4
 800d7b6:	42a3      	cmp	r3, r4
 800d7b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d7bc:	bf08      	it	eq
 800d7be:	2300      	moveq	r3, #0
 800d7c0:	6102      	str	r2, [r0, #16]
 800d7c2:	bf08      	it	eq
 800d7c4:	6143      	streq	r3, [r0, #20]
 800d7c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7ca:	f8dc c000 	ldr.w	ip, [ip]
 800d7ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800d7d2:	ea4c 0707 	orr.w	r7, ip, r7
 800d7d6:	f849 7b04 	str.w	r7, [r9], #4
 800d7da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d7de:	40cf      	lsrs	r7, r1
 800d7e0:	e7da      	b.n	800d798 <rshift+0x4c>
 800d7e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d7e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d7ea:	e7c3      	b.n	800d774 <rshift+0x28>
 800d7ec:	4623      	mov	r3, r4
 800d7ee:	e7e1      	b.n	800d7b4 <rshift+0x68>

0800d7f0 <__hexdig_fun>:
 800d7f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d7f4:	2b09      	cmp	r3, #9
 800d7f6:	d802      	bhi.n	800d7fe <__hexdig_fun+0xe>
 800d7f8:	3820      	subs	r0, #32
 800d7fa:	b2c0      	uxtb	r0, r0
 800d7fc:	4770      	bx	lr
 800d7fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d802:	2b05      	cmp	r3, #5
 800d804:	d801      	bhi.n	800d80a <__hexdig_fun+0x1a>
 800d806:	3847      	subs	r0, #71	@ 0x47
 800d808:	e7f7      	b.n	800d7fa <__hexdig_fun+0xa>
 800d80a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d80e:	2b05      	cmp	r3, #5
 800d810:	d801      	bhi.n	800d816 <__hexdig_fun+0x26>
 800d812:	3827      	subs	r0, #39	@ 0x27
 800d814:	e7f1      	b.n	800d7fa <__hexdig_fun+0xa>
 800d816:	2000      	movs	r0, #0
 800d818:	4770      	bx	lr
	...

0800d81c <__gethex>:
 800d81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d820:	b085      	sub	sp, #20
 800d822:	468a      	mov	sl, r1
 800d824:	9302      	str	r3, [sp, #8]
 800d826:	680b      	ldr	r3, [r1, #0]
 800d828:	9001      	str	r0, [sp, #4]
 800d82a:	4690      	mov	r8, r2
 800d82c:	1c9c      	adds	r4, r3, #2
 800d82e:	46a1      	mov	r9, r4
 800d830:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d834:	2830      	cmp	r0, #48	@ 0x30
 800d836:	d0fa      	beq.n	800d82e <__gethex+0x12>
 800d838:	eba9 0303 	sub.w	r3, r9, r3
 800d83c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d840:	f7ff ffd6 	bl	800d7f0 <__hexdig_fun>
 800d844:	4605      	mov	r5, r0
 800d846:	2800      	cmp	r0, #0
 800d848:	d168      	bne.n	800d91c <__gethex+0x100>
 800d84a:	49a0      	ldr	r1, [pc, #640]	@ (800dacc <__gethex+0x2b0>)
 800d84c:	2201      	movs	r2, #1
 800d84e:	4648      	mov	r0, r9
 800d850:	f7fe ffc7 	bl	800c7e2 <strncmp>
 800d854:	4607      	mov	r7, r0
 800d856:	2800      	cmp	r0, #0
 800d858:	d167      	bne.n	800d92a <__gethex+0x10e>
 800d85a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d85e:	4626      	mov	r6, r4
 800d860:	f7ff ffc6 	bl	800d7f0 <__hexdig_fun>
 800d864:	2800      	cmp	r0, #0
 800d866:	d062      	beq.n	800d92e <__gethex+0x112>
 800d868:	4623      	mov	r3, r4
 800d86a:	7818      	ldrb	r0, [r3, #0]
 800d86c:	2830      	cmp	r0, #48	@ 0x30
 800d86e:	4699      	mov	r9, r3
 800d870:	f103 0301 	add.w	r3, r3, #1
 800d874:	d0f9      	beq.n	800d86a <__gethex+0x4e>
 800d876:	f7ff ffbb 	bl	800d7f0 <__hexdig_fun>
 800d87a:	fab0 f580 	clz	r5, r0
 800d87e:	096d      	lsrs	r5, r5, #5
 800d880:	f04f 0b01 	mov.w	fp, #1
 800d884:	464a      	mov	r2, r9
 800d886:	4616      	mov	r6, r2
 800d888:	3201      	adds	r2, #1
 800d88a:	7830      	ldrb	r0, [r6, #0]
 800d88c:	f7ff ffb0 	bl	800d7f0 <__hexdig_fun>
 800d890:	2800      	cmp	r0, #0
 800d892:	d1f8      	bne.n	800d886 <__gethex+0x6a>
 800d894:	498d      	ldr	r1, [pc, #564]	@ (800dacc <__gethex+0x2b0>)
 800d896:	2201      	movs	r2, #1
 800d898:	4630      	mov	r0, r6
 800d89a:	f7fe ffa2 	bl	800c7e2 <strncmp>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d13f      	bne.n	800d922 <__gethex+0x106>
 800d8a2:	b944      	cbnz	r4, 800d8b6 <__gethex+0x9a>
 800d8a4:	1c74      	adds	r4, r6, #1
 800d8a6:	4622      	mov	r2, r4
 800d8a8:	4616      	mov	r6, r2
 800d8aa:	3201      	adds	r2, #1
 800d8ac:	7830      	ldrb	r0, [r6, #0]
 800d8ae:	f7ff ff9f 	bl	800d7f0 <__hexdig_fun>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d1f8      	bne.n	800d8a8 <__gethex+0x8c>
 800d8b6:	1ba4      	subs	r4, r4, r6
 800d8b8:	00a7      	lsls	r7, r4, #2
 800d8ba:	7833      	ldrb	r3, [r6, #0]
 800d8bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d8c0:	2b50      	cmp	r3, #80	@ 0x50
 800d8c2:	d13e      	bne.n	800d942 <__gethex+0x126>
 800d8c4:	7873      	ldrb	r3, [r6, #1]
 800d8c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800d8c8:	d033      	beq.n	800d932 <__gethex+0x116>
 800d8ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800d8cc:	d034      	beq.n	800d938 <__gethex+0x11c>
 800d8ce:	1c71      	adds	r1, r6, #1
 800d8d0:	2400      	movs	r4, #0
 800d8d2:	7808      	ldrb	r0, [r1, #0]
 800d8d4:	f7ff ff8c 	bl	800d7f0 <__hexdig_fun>
 800d8d8:	1e43      	subs	r3, r0, #1
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	2b18      	cmp	r3, #24
 800d8de:	d830      	bhi.n	800d942 <__gethex+0x126>
 800d8e0:	f1a0 0210 	sub.w	r2, r0, #16
 800d8e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d8e8:	f7ff ff82 	bl	800d7f0 <__hexdig_fun>
 800d8ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800d8f0:	fa5f fc8c 	uxtb.w	ip, ip
 800d8f4:	f1bc 0f18 	cmp.w	ip, #24
 800d8f8:	f04f 030a 	mov.w	r3, #10
 800d8fc:	d91e      	bls.n	800d93c <__gethex+0x120>
 800d8fe:	b104      	cbz	r4, 800d902 <__gethex+0xe6>
 800d900:	4252      	negs	r2, r2
 800d902:	4417      	add	r7, r2
 800d904:	f8ca 1000 	str.w	r1, [sl]
 800d908:	b1ed      	cbz	r5, 800d946 <__gethex+0x12a>
 800d90a:	f1bb 0f00 	cmp.w	fp, #0
 800d90e:	bf0c      	ite	eq
 800d910:	2506      	moveq	r5, #6
 800d912:	2500      	movne	r5, #0
 800d914:	4628      	mov	r0, r5
 800d916:	b005      	add	sp, #20
 800d918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d91c:	2500      	movs	r5, #0
 800d91e:	462c      	mov	r4, r5
 800d920:	e7b0      	b.n	800d884 <__gethex+0x68>
 800d922:	2c00      	cmp	r4, #0
 800d924:	d1c7      	bne.n	800d8b6 <__gethex+0x9a>
 800d926:	4627      	mov	r7, r4
 800d928:	e7c7      	b.n	800d8ba <__gethex+0x9e>
 800d92a:	464e      	mov	r6, r9
 800d92c:	462f      	mov	r7, r5
 800d92e:	2501      	movs	r5, #1
 800d930:	e7c3      	b.n	800d8ba <__gethex+0x9e>
 800d932:	2400      	movs	r4, #0
 800d934:	1cb1      	adds	r1, r6, #2
 800d936:	e7cc      	b.n	800d8d2 <__gethex+0xb6>
 800d938:	2401      	movs	r4, #1
 800d93a:	e7fb      	b.n	800d934 <__gethex+0x118>
 800d93c:	fb03 0002 	mla	r0, r3, r2, r0
 800d940:	e7ce      	b.n	800d8e0 <__gethex+0xc4>
 800d942:	4631      	mov	r1, r6
 800d944:	e7de      	b.n	800d904 <__gethex+0xe8>
 800d946:	eba6 0309 	sub.w	r3, r6, r9
 800d94a:	3b01      	subs	r3, #1
 800d94c:	4629      	mov	r1, r5
 800d94e:	2b07      	cmp	r3, #7
 800d950:	dc0a      	bgt.n	800d968 <__gethex+0x14c>
 800d952:	9801      	ldr	r0, [sp, #4]
 800d954:	f000 fafc 	bl	800df50 <_Balloc>
 800d958:	4604      	mov	r4, r0
 800d95a:	b940      	cbnz	r0, 800d96e <__gethex+0x152>
 800d95c:	4b5c      	ldr	r3, [pc, #368]	@ (800dad0 <__gethex+0x2b4>)
 800d95e:	4602      	mov	r2, r0
 800d960:	21e4      	movs	r1, #228	@ 0xe4
 800d962:	485c      	ldr	r0, [pc, #368]	@ (800dad4 <__gethex+0x2b8>)
 800d964:	f7ff f83c 	bl	800c9e0 <__assert_func>
 800d968:	3101      	adds	r1, #1
 800d96a:	105b      	asrs	r3, r3, #1
 800d96c:	e7ef      	b.n	800d94e <__gethex+0x132>
 800d96e:	f100 0a14 	add.w	sl, r0, #20
 800d972:	2300      	movs	r3, #0
 800d974:	4655      	mov	r5, sl
 800d976:	469b      	mov	fp, r3
 800d978:	45b1      	cmp	r9, r6
 800d97a:	d337      	bcc.n	800d9ec <__gethex+0x1d0>
 800d97c:	f845 bb04 	str.w	fp, [r5], #4
 800d980:	eba5 050a 	sub.w	r5, r5, sl
 800d984:	10ad      	asrs	r5, r5, #2
 800d986:	6125      	str	r5, [r4, #16]
 800d988:	4658      	mov	r0, fp
 800d98a:	f000 fbd3 	bl	800e134 <__hi0bits>
 800d98e:	016d      	lsls	r5, r5, #5
 800d990:	f8d8 6000 	ldr.w	r6, [r8]
 800d994:	1a2d      	subs	r5, r5, r0
 800d996:	42b5      	cmp	r5, r6
 800d998:	dd54      	ble.n	800da44 <__gethex+0x228>
 800d99a:	1bad      	subs	r5, r5, r6
 800d99c:	4629      	mov	r1, r5
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 ff67 	bl	800e872 <__any_on>
 800d9a4:	4681      	mov	r9, r0
 800d9a6:	b178      	cbz	r0, 800d9c8 <__gethex+0x1ac>
 800d9a8:	1e6b      	subs	r3, r5, #1
 800d9aa:	1159      	asrs	r1, r3, #5
 800d9ac:	f003 021f 	and.w	r2, r3, #31
 800d9b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d9b4:	f04f 0901 	mov.w	r9, #1
 800d9b8:	fa09 f202 	lsl.w	r2, r9, r2
 800d9bc:	420a      	tst	r2, r1
 800d9be:	d003      	beq.n	800d9c8 <__gethex+0x1ac>
 800d9c0:	454b      	cmp	r3, r9
 800d9c2:	dc36      	bgt.n	800da32 <__gethex+0x216>
 800d9c4:	f04f 0902 	mov.w	r9, #2
 800d9c8:	4629      	mov	r1, r5
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	f7ff febe 	bl	800d74c <rshift>
 800d9d0:	442f      	add	r7, r5
 800d9d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d9d6:	42bb      	cmp	r3, r7
 800d9d8:	da42      	bge.n	800da60 <__gethex+0x244>
 800d9da:	9801      	ldr	r0, [sp, #4]
 800d9dc:	4621      	mov	r1, r4
 800d9de:	f000 faf7 	bl	800dfd0 <_Bfree>
 800d9e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	6013      	str	r3, [r2, #0]
 800d9e8:	25a3      	movs	r5, #163	@ 0xa3
 800d9ea:	e793      	b.n	800d914 <__gethex+0xf8>
 800d9ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d9f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d9f2:	d012      	beq.n	800da1a <__gethex+0x1fe>
 800d9f4:	2b20      	cmp	r3, #32
 800d9f6:	d104      	bne.n	800da02 <__gethex+0x1e6>
 800d9f8:	f845 bb04 	str.w	fp, [r5], #4
 800d9fc:	f04f 0b00 	mov.w	fp, #0
 800da00:	465b      	mov	r3, fp
 800da02:	7830      	ldrb	r0, [r6, #0]
 800da04:	9303      	str	r3, [sp, #12]
 800da06:	f7ff fef3 	bl	800d7f0 <__hexdig_fun>
 800da0a:	9b03      	ldr	r3, [sp, #12]
 800da0c:	f000 000f 	and.w	r0, r0, #15
 800da10:	4098      	lsls	r0, r3
 800da12:	ea4b 0b00 	orr.w	fp, fp, r0
 800da16:	3304      	adds	r3, #4
 800da18:	e7ae      	b.n	800d978 <__gethex+0x15c>
 800da1a:	45b1      	cmp	r9, r6
 800da1c:	d8ea      	bhi.n	800d9f4 <__gethex+0x1d8>
 800da1e:	492b      	ldr	r1, [pc, #172]	@ (800dacc <__gethex+0x2b0>)
 800da20:	9303      	str	r3, [sp, #12]
 800da22:	2201      	movs	r2, #1
 800da24:	4630      	mov	r0, r6
 800da26:	f7fe fedc 	bl	800c7e2 <strncmp>
 800da2a:	9b03      	ldr	r3, [sp, #12]
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d1e1      	bne.n	800d9f4 <__gethex+0x1d8>
 800da30:	e7a2      	b.n	800d978 <__gethex+0x15c>
 800da32:	1ea9      	subs	r1, r5, #2
 800da34:	4620      	mov	r0, r4
 800da36:	f000 ff1c 	bl	800e872 <__any_on>
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d0c2      	beq.n	800d9c4 <__gethex+0x1a8>
 800da3e:	f04f 0903 	mov.w	r9, #3
 800da42:	e7c1      	b.n	800d9c8 <__gethex+0x1ac>
 800da44:	da09      	bge.n	800da5a <__gethex+0x23e>
 800da46:	1b75      	subs	r5, r6, r5
 800da48:	4621      	mov	r1, r4
 800da4a:	9801      	ldr	r0, [sp, #4]
 800da4c:	462a      	mov	r2, r5
 800da4e:	f000 fcd7 	bl	800e400 <__lshift>
 800da52:	1b7f      	subs	r7, r7, r5
 800da54:	4604      	mov	r4, r0
 800da56:	f100 0a14 	add.w	sl, r0, #20
 800da5a:	f04f 0900 	mov.w	r9, #0
 800da5e:	e7b8      	b.n	800d9d2 <__gethex+0x1b6>
 800da60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800da64:	42bd      	cmp	r5, r7
 800da66:	dd6f      	ble.n	800db48 <__gethex+0x32c>
 800da68:	1bed      	subs	r5, r5, r7
 800da6a:	42ae      	cmp	r6, r5
 800da6c:	dc34      	bgt.n	800dad8 <__gethex+0x2bc>
 800da6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da72:	2b02      	cmp	r3, #2
 800da74:	d022      	beq.n	800dabc <__gethex+0x2a0>
 800da76:	2b03      	cmp	r3, #3
 800da78:	d024      	beq.n	800dac4 <__gethex+0x2a8>
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d115      	bne.n	800daaa <__gethex+0x28e>
 800da7e:	42ae      	cmp	r6, r5
 800da80:	d113      	bne.n	800daaa <__gethex+0x28e>
 800da82:	2e01      	cmp	r6, #1
 800da84:	d10b      	bne.n	800da9e <__gethex+0x282>
 800da86:	9a02      	ldr	r2, [sp, #8]
 800da88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800da8c:	6013      	str	r3, [r2, #0]
 800da8e:	2301      	movs	r3, #1
 800da90:	6123      	str	r3, [r4, #16]
 800da92:	f8ca 3000 	str.w	r3, [sl]
 800da96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da98:	2562      	movs	r5, #98	@ 0x62
 800da9a:	601c      	str	r4, [r3, #0]
 800da9c:	e73a      	b.n	800d914 <__gethex+0xf8>
 800da9e:	1e71      	subs	r1, r6, #1
 800daa0:	4620      	mov	r0, r4
 800daa2:	f000 fee6 	bl	800e872 <__any_on>
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d1ed      	bne.n	800da86 <__gethex+0x26a>
 800daaa:	9801      	ldr	r0, [sp, #4]
 800daac:	4621      	mov	r1, r4
 800daae:	f000 fa8f 	bl	800dfd0 <_Bfree>
 800dab2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dab4:	2300      	movs	r3, #0
 800dab6:	6013      	str	r3, [r2, #0]
 800dab8:	2550      	movs	r5, #80	@ 0x50
 800daba:	e72b      	b.n	800d914 <__gethex+0xf8>
 800dabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1f3      	bne.n	800daaa <__gethex+0x28e>
 800dac2:	e7e0      	b.n	800da86 <__gethex+0x26a>
 800dac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1dd      	bne.n	800da86 <__gethex+0x26a>
 800daca:	e7ee      	b.n	800daaa <__gethex+0x28e>
 800dacc:	0800f478 	.word	0x0800f478
 800dad0:	0800f61e 	.word	0x0800f61e
 800dad4:	0800f62f 	.word	0x0800f62f
 800dad8:	1e6f      	subs	r7, r5, #1
 800dada:	f1b9 0f00 	cmp.w	r9, #0
 800dade:	d130      	bne.n	800db42 <__gethex+0x326>
 800dae0:	b127      	cbz	r7, 800daec <__gethex+0x2d0>
 800dae2:	4639      	mov	r1, r7
 800dae4:	4620      	mov	r0, r4
 800dae6:	f000 fec4 	bl	800e872 <__any_on>
 800daea:	4681      	mov	r9, r0
 800daec:	117a      	asrs	r2, r7, #5
 800daee:	2301      	movs	r3, #1
 800daf0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800daf4:	f007 071f 	and.w	r7, r7, #31
 800daf8:	40bb      	lsls	r3, r7
 800dafa:	4213      	tst	r3, r2
 800dafc:	4629      	mov	r1, r5
 800dafe:	4620      	mov	r0, r4
 800db00:	bf18      	it	ne
 800db02:	f049 0902 	orrne.w	r9, r9, #2
 800db06:	f7ff fe21 	bl	800d74c <rshift>
 800db0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800db0e:	1b76      	subs	r6, r6, r5
 800db10:	2502      	movs	r5, #2
 800db12:	f1b9 0f00 	cmp.w	r9, #0
 800db16:	d047      	beq.n	800dba8 <__gethex+0x38c>
 800db18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db1c:	2b02      	cmp	r3, #2
 800db1e:	d015      	beq.n	800db4c <__gethex+0x330>
 800db20:	2b03      	cmp	r3, #3
 800db22:	d017      	beq.n	800db54 <__gethex+0x338>
 800db24:	2b01      	cmp	r3, #1
 800db26:	d109      	bne.n	800db3c <__gethex+0x320>
 800db28:	f019 0f02 	tst.w	r9, #2
 800db2c:	d006      	beq.n	800db3c <__gethex+0x320>
 800db2e:	f8da 3000 	ldr.w	r3, [sl]
 800db32:	ea49 0903 	orr.w	r9, r9, r3
 800db36:	f019 0f01 	tst.w	r9, #1
 800db3a:	d10e      	bne.n	800db5a <__gethex+0x33e>
 800db3c:	f045 0510 	orr.w	r5, r5, #16
 800db40:	e032      	b.n	800dba8 <__gethex+0x38c>
 800db42:	f04f 0901 	mov.w	r9, #1
 800db46:	e7d1      	b.n	800daec <__gethex+0x2d0>
 800db48:	2501      	movs	r5, #1
 800db4a:	e7e2      	b.n	800db12 <__gethex+0x2f6>
 800db4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db4e:	f1c3 0301 	rsb	r3, r3, #1
 800db52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db56:	2b00      	cmp	r3, #0
 800db58:	d0f0      	beq.n	800db3c <__gethex+0x320>
 800db5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800db5e:	f104 0314 	add.w	r3, r4, #20
 800db62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800db66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800db6a:	f04f 0c00 	mov.w	ip, #0
 800db6e:	4618      	mov	r0, r3
 800db70:	f853 2b04 	ldr.w	r2, [r3], #4
 800db74:	f1b2 3fff 	cmp.w	r2, #4294967295
 800db78:	d01b      	beq.n	800dbb2 <__gethex+0x396>
 800db7a:	3201      	adds	r2, #1
 800db7c:	6002      	str	r2, [r0, #0]
 800db7e:	2d02      	cmp	r5, #2
 800db80:	f104 0314 	add.w	r3, r4, #20
 800db84:	d13c      	bne.n	800dc00 <__gethex+0x3e4>
 800db86:	f8d8 2000 	ldr.w	r2, [r8]
 800db8a:	3a01      	subs	r2, #1
 800db8c:	42b2      	cmp	r2, r6
 800db8e:	d109      	bne.n	800dba4 <__gethex+0x388>
 800db90:	1171      	asrs	r1, r6, #5
 800db92:	2201      	movs	r2, #1
 800db94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db98:	f006 061f 	and.w	r6, r6, #31
 800db9c:	fa02 f606 	lsl.w	r6, r2, r6
 800dba0:	421e      	tst	r6, r3
 800dba2:	d13a      	bne.n	800dc1a <__gethex+0x3fe>
 800dba4:	f045 0520 	orr.w	r5, r5, #32
 800dba8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbaa:	601c      	str	r4, [r3, #0]
 800dbac:	9b02      	ldr	r3, [sp, #8]
 800dbae:	601f      	str	r7, [r3, #0]
 800dbb0:	e6b0      	b.n	800d914 <__gethex+0xf8>
 800dbb2:	4299      	cmp	r1, r3
 800dbb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800dbb8:	d8d9      	bhi.n	800db6e <__gethex+0x352>
 800dbba:	68a3      	ldr	r3, [r4, #8]
 800dbbc:	459b      	cmp	fp, r3
 800dbbe:	db17      	blt.n	800dbf0 <__gethex+0x3d4>
 800dbc0:	6861      	ldr	r1, [r4, #4]
 800dbc2:	9801      	ldr	r0, [sp, #4]
 800dbc4:	3101      	adds	r1, #1
 800dbc6:	f000 f9c3 	bl	800df50 <_Balloc>
 800dbca:	4681      	mov	r9, r0
 800dbcc:	b918      	cbnz	r0, 800dbd6 <__gethex+0x3ba>
 800dbce:	4b1a      	ldr	r3, [pc, #104]	@ (800dc38 <__gethex+0x41c>)
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	2184      	movs	r1, #132	@ 0x84
 800dbd4:	e6c5      	b.n	800d962 <__gethex+0x146>
 800dbd6:	6922      	ldr	r2, [r4, #16]
 800dbd8:	3202      	adds	r2, #2
 800dbda:	f104 010c 	add.w	r1, r4, #12
 800dbde:	0092      	lsls	r2, r2, #2
 800dbe0:	300c      	adds	r0, #12
 800dbe2:	f7fe fee4 	bl	800c9ae <memcpy>
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	9801      	ldr	r0, [sp, #4]
 800dbea:	f000 f9f1 	bl	800dfd0 <_Bfree>
 800dbee:	464c      	mov	r4, r9
 800dbf0:	6923      	ldr	r3, [r4, #16]
 800dbf2:	1c5a      	adds	r2, r3, #1
 800dbf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dbf8:	6122      	str	r2, [r4, #16]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	615a      	str	r2, [r3, #20]
 800dbfe:	e7be      	b.n	800db7e <__gethex+0x362>
 800dc00:	6922      	ldr	r2, [r4, #16]
 800dc02:	455a      	cmp	r2, fp
 800dc04:	dd0b      	ble.n	800dc1e <__gethex+0x402>
 800dc06:	2101      	movs	r1, #1
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f7ff fd9f 	bl	800d74c <rshift>
 800dc0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc12:	3701      	adds	r7, #1
 800dc14:	42bb      	cmp	r3, r7
 800dc16:	f6ff aee0 	blt.w	800d9da <__gethex+0x1be>
 800dc1a:	2501      	movs	r5, #1
 800dc1c:	e7c2      	b.n	800dba4 <__gethex+0x388>
 800dc1e:	f016 061f 	ands.w	r6, r6, #31
 800dc22:	d0fa      	beq.n	800dc1a <__gethex+0x3fe>
 800dc24:	4453      	add	r3, sl
 800dc26:	f1c6 0620 	rsb	r6, r6, #32
 800dc2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dc2e:	f000 fa81 	bl	800e134 <__hi0bits>
 800dc32:	42b0      	cmp	r0, r6
 800dc34:	dbe7      	blt.n	800dc06 <__gethex+0x3ea>
 800dc36:	e7f0      	b.n	800dc1a <__gethex+0x3fe>
 800dc38:	0800f61e 	.word	0x0800f61e

0800dc3c <L_shift>:
 800dc3c:	f1c2 0208 	rsb	r2, r2, #8
 800dc40:	0092      	lsls	r2, r2, #2
 800dc42:	b570      	push	{r4, r5, r6, lr}
 800dc44:	f1c2 0620 	rsb	r6, r2, #32
 800dc48:	6843      	ldr	r3, [r0, #4]
 800dc4a:	6804      	ldr	r4, [r0, #0]
 800dc4c:	fa03 f506 	lsl.w	r5, r3, r6
 800dc50:	432c      	orrs	r4, r5
 800dc52:	40d3      	lsrs	r3, r2
 800dc54:	6004      	str	r4, [r0, #0]
 800dc56:	f840 3f04 	str.w	r3, [r0, #4]!
 800dc5a:	4288      	cmp	r0, r1
 800dc5c:	d3f4      	bcc.n	800dc48 <L_shift+0xc>
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}

0800dc60 <__match>:
 800dc60:	b530      	push	{r4, r5, lr}
 800dc62:	6803      	ldr	r3, [r0, #0]
 800dc64:	3301      	adds	r3, #1
 800dc66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc6a:	b914      	cbnz	r4, 800dc72 <__match+0x12>
 800dc6c:	6003      	str	r3, [r0, #0]
 800dc6e:	2001      	movs	r0, #1
 800dc70:	bd30      	pop	{r4, r5, pc}
 800dc72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dc7a:	2d19      	cmp	r5, #25
 800dc7c:	bf98      	it	ls
 800dc7e:	3220      	addls	r2, #32
 800dc80:	42a2      	cmp	r2, r4
 800dc82:	d0f0      	beq.n	800dc66 <__match+0x6>
 800dc84:	2000      	movs	r0, #0
 800dc86:	e7f3      	b.n	800dc70 <__match+0x10>

0800dc88 <__hexnan>:
 800dc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc8c:	680b      	ldr	r3, [r1, #0]
 800dc8e:	6801      	ldr	r1, [r0, #0]
 800dc90:	115e      	asrs	r6, r3, #5
 800dc92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dc96:	f013 031f 	ands.w	r3, r3, #31
 800dc9a:	b087      	sub	sp, #28
 800dc9c:	bf18      	it	ne
 800dc9e:	3604      	addne	r6, #4
 800dca0:	2500      	movs	r5, #0
 800dca2:	1f37      	subs	r7, r6, #4
 800dca4:	4682      	mov	sl, r0
 800dca6:	4690      	mov	r8, r2
 800dca8:	9301      	str	r3, [sp, #4]
 800dcaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800dcae:	46b9      	mov	r9, r7
 800dcb0:	463c      	mov	r4, r7
 800dcb2:	9502      	str	r5, [sp, #8]
 800dcb4:	46ab      	mov	fp, r5
 800dcb6:	784a      	ldrb	r2, [r1, #1]
 800dcb8:	1c4b      	adds	r3, r1, #1
 800dcba:	9303      	str	r3, [sp, #12]
 800dcbc:	b342      	cbz	r2, 800dd10 <__hexnan+0x88>
 800dcbe:	4610      	mov	r0, r2
 800dcc0:	9105      	str	r1, [sp, #20]
 800dcc2:	9204      	str	r2, [sp, #16]
 800dcc4:	f7ff fd94 	bl	800d7f0 <__hexdig_fun>
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d151      	bne.n	800dd70 <__hexnan+0xe8>
 800dccc:	9a04      	ldr	r2, [sp, #16]
 800dcce:	9905      	ldr	r1, [sp, #20]
 800dcd0:	2a20      	cmp	r2, #32
 800dcd2:	d818      	bhi.n	800dd06 <__hexnan+0x7e>
 800dcd4:	9b02      	ldr	r3, [sp, #8]
 800dcd6:	459b      	cmp	fp, r3
 800dcd8:	dd13      	ble.n	800dd02 <__hexnan+0x7a>
 800dcda:	454c      	cmp	r4, r9
 800dcdc:	d206      	bcs.n	800dcec <__hexnan+0x64>
 800dcde:	2d07      	cmp	r5, #7
 800dce0:	dc04      	bgt.n	800dcec <__hexnan+0x64>
 800dce2:	462a      	mov	r2, r5
 800dce4:	4649      	mov	r1, r9
 800dce6:	4620      	mov	r0, r4
 800dce8:	f7ff ffa8 	bl	800dc3c <L_shift>
 800dcec:	4544      	cmp	r4, r8
 800dcee:	d952      	bls.n	800dd96 <__hexnan+0x10e>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	f1a4 0904 	sub.w	r9, r4, #4
 800dcf6:	f844 3c04 	str.w	r3, [r4, #-4]
 800dcfa:	f8cd b008 	str.w	fp, [sp, #8]
 800dcfe:	464c      	mov	r4, r9
 800dd00:	461d      	mov	r5, r3
 800dd02:	9903      	ldr	r1, [sp, #12]
 800dd04:	e7d7      	b.n	800dcb6 <__hexnan+0x2e>
 800dd06:	2a29      	cmp	r2, #41	@ 0x29
 800dd08:	d157      	bne.n	800ddba <__hexnan+0x132>
 800dd0a:	3102      	adds	r1, #2
 800dd0c:	f8ca 1000 	str.w	r1, [sl]
 800dd10:	f1bb 0f00 	cmp.w	fp, #0
 800dd14:	d051      	beq.n	800ddba <__hexnan+0x132>
 800dd16:	454c      	cmp	r4, r9
 800dd18:	d206      	bcs.n	800dd28 <__hexnan+0xa0>
 800dd1a:	2d07      	cmp	r5, #7
 800dd1c:	dc04      	bgt.n	800dd28 <__hexnan+0xa0>
 800dd1e:	462a      	mov	r2, r5
 800dd20:	4649      	mov	r1, r9
 800dd22:	4620      	mov	r0, r4
 800dd24:	f7ff ff8a 	bl	800dc3c <L_shift>
 800dd28:	4544      	cmp	r4, r8
 800dd2a:	d936      	bls.n	800dd9a <__hexnan+0x112>
 800dd2c:	f1a8 0204 	sub.w	r2, r8, #4
 800dd30:	4623      	mov	r3, r4
 800dd32:	f853 1b04 	ldr.w	r1, [r3], #4
 800dd36:	f842 1f04 	str.w	r1, [r2, #4]!
 800dd3a:	429f      	cmp	r7, r3
 800dd3c:	d2f9      	bcs.n	800dd32 <__hexnan+0xaa>
 800dd3e:	1b3b      	subs	r3, r7, r4
 800dd40:	f023 0303 	bic.w	r3, r3, #3
 800dd44:	3304      	adds	r3, #4
 800dd46:	3401      	adds	r4, #1
 800dd48:	3e03      	subs	r6, #3
 800dd4a:	42b4      	cmp	r4, r6
 800dd4c:	bf88      	it	hi
 800dd4e:	2304      	movhi	r3, #4
 800dd50:	4443      	add	r3, r8
 800dd52:	2200      	movs	r2, #0
 800dd54:	f843 2b04 	str.w	r2, [r3], #4
 800dd58:	429f      	cmp	r7, r3
 800dd5a:	d2fb      	bcs.n	800dd54 <__hexnan+0xcc>
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	b91b      	cbnz	r3, 800dd68 <__hexnan+0xe0>
 800dd60:	4547      	cmp	r7, r8
 800dd62:	d128      	bne.n	800ddb6 <__hexnan+0x12e>
 800dd64:	2301      	movs	r3, #1
 800dd66:	603b      	str	r3, [r7, #0]
 800dd68:	2005      	movs	r0, #5
 800dd6a:	b007      	add	sp, #28
 800dd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd70:	3501      	adds	r5, #1
 800dd72:	2d08      	cmp	r5, #8
 800dd74:	f10b 0b01 	add.w	fp, fp, #1
 800dd78:	dd06      	ble.n	800dd88 <__hexnan+0x100>
 800dd7a:	4544      	cmp	r4, r8
 800dd7c:	d9c1      	bls.n	800dd02 <__hexnan+0x7a>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd84:	2501      	movs	r5, #1
 800dd86:	3c04      	subs	r4, #4
 800dd88:	6822      	ldr	r2, [r4, #0]
 800dd8a:	f000 000f 	and.w	r0, r0, #15
 800dd8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dd92:	6020      	str	r0, [r4, #0]
 800dd94:	e7b5      	b.n	800dd02 <__hexnan+0x7a>
 800dd96:	2508      	movs	r5, #8
 800dd98:	e7b3      	b.n	800dd02 <__hexnan+0x7a>
 800dd9a:	9b01      	ldr	r3, [sp, #4]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d0dd      	beq.n	800dd5c <__hexnan+0xd4>
 800dda0:	f1c3 0320 	rsb	r3, r3, #32
 800dda4:	f04f 32ff 	mov.w	r2, #4294967295
 800dda8:	40da      	lsrs	r2, r3
 800ddaa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ddae:	4013      	ands	r3, r2
 800ddb0:	f846 3c04 	str.w	r3, [r6, #-4]
 800ddb4:	e7d2      	b.n	800dd5c <__hexnan+0xd4>
 800ddb6:	3f04      	subs	r7, #4
 800ddb8:	e7d0      	b.n	800dd5c <__hexnan+0xd4>
 800ddba:	2004      	movs	r0, #4
 800ddbc:	e7d5      	b.n	800dd6a <__hexnan+0xe2>
	...

0800ddc0 <malloc>:
 800ddc0:	4b02      	ldr	r3, [pc, #8]	@ (800ddcc <malloc+0xc>)
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	6818      	ldr	r0, [r3, #0]
 800ddc6:	f000 b825 	b.w	800de14 <_malloc_r>
 800ddca:	bf00      	nop
 800ddcc:	20000188 	.word	0x20000188

0800ddd0 <sbrk_aligned>:
 800ddd0:	b570      	push	{r4, r5, r6, lr}
 800ddd2:	4e0f      	ldr	r6, [pc, #60]	@ (800de10 <sbrk_aligned+0x40>)
 800ddd4:	460c      	mov	r4, r1
 800ddd6:	6831      	ldr	r1, [r6, #0]
 800ddd8:	4605      	mov	r5, r0
 800ddda:	b911      	cbnz	r1, 800dde2 <sbrk_aligned+0x12>
 800dddc:	f000 ffa6 	bl	800ed2c <_sbrk_r>
 800dde0:	6030      	str	r0, [r6, #0]
 800dde2:	4621      	mov	r1, r4
 800dde4:	4628      	mov	r0, r5
 800dde6:	f000 ffa1 	bl	800ed2c <_sbrk_r>
 800ddea:	1c43      	adds	r3, r0, #1
 800ddec:	d103      	bne.n	800ddf6 <sbrk_aligned+0x26>
 800ddee:	f04f 34ff 	mov.w	r4, #4294967295
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	bd70      	pop	{r4, r5, r6, pc}
 800ddf6:	1cc4      	adds	r4, r0, #3
 800ddf8:	f024 0403 	bic.w	r4, r4, #3
 800ddfc:	42a0      	cmp	r0, r4
 800ddfe:	d0f8      	beq.n	800ddf2 <sbrk_aligned+0x22>
 800de00:	1a21      	subs	r1, r4, r0
 800de02:	4628      	mov	r0, r5
 800de04:	f000 ff92 	bl	800ed2c <_sbrk_r>
 800de08:	3001      	adds	r0, #1
 800de0a:	d1f2      	bne.n	800ddf2 <sbrk_aligned+0x22>
 800de0c:	e7ef      	b.n	800ddee <sbrk_aligned+0x1e>
 800de0e:	bf00      	nop
 800de10:	2000095c 	.word	0x2000095c

0800de14 <_malloc_r>:
 800de14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de18:	1ccd      	adds	r5, r1, #3
 800de1a:	f025 0503 	bic.w	r5, r5, #3
 800de1e:	3508      	adds	r5, #8
 800de20:	2d0c      	cmp	r5, #12
 800de22:	bf38      	it	cc
 800de24:	250c      	movcc	r5, #12
 800de26:	2d00      	cmp	r5, #0
 800de28:	4606      	mov	r6, r0
 800de2a:	db01      	blt.n	800de30 <_malloc_r+0x1c>
 800de2c:	42a9      	cmp	r1, r5
 800de2e:	d904      	bls.n	800de3a <_malloc_r+0x26>
 800de30:	230c      	movs	r3, #12
 800de32:	6033      	str	r3, [r6, #0]
 800de34:	2000      	movs	r0, #0
 800de36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df10 <_malloc_r+0xfc>
 800de3e:	f000 f87b 	bl	800df38 <__malloc_lock>
 800de42:	f8d8 3000 	ldr.w	r3, [r8]
 800de46:	461c      	mov	r4, r3
 800de48:	bb44      	cbnz	r4, 800de9c <_malloc_r+0x88>
 800de4a:	4629      	mov	r1, r5
 800de4c:	4630      	mov	r0, r6
 800de4e:	f7ff ffbf 	bl	800ddd0 <sbrk_aligned>
 800de52:	1c43      	adds	r3, r0, #1
 800de54:	4604      	mov	r4, r0
 800de56:	d158      	bne.n	800df0a <_malloc_r+0xf6>
 800de58:	f8d8 4000 	ldr.w	r4, [r8]
 800de5c:	4627      	mov	r7, r4
 800de5e:	2f00      	cmp	r7, #0
 800de60:	d143      	bne.n	800deea <_malloc_r+0xd6>
 800de62:	2c00      	cmp	r4, #0
 800de64:	d04b      	beq.n	800defe <_malloc_r+0xea>
 800de66:	6823      	ldr	r3, [r4, #0]
 800de68:	4639      	mov	r1, r7
 800de6a:	4630      	mov	r0, r6
 800de6c:	eb04 0903 	add.w	r9, r4, r3
 800de70:	f000 ff5c 	bl	800ed2c <_sbrk_r>
 800de74:	4581      	cmp	r9, r0
 800de76:	d142      	bne.n	800defe <_malloc_r+0xea>
 800de78:	6821      	ldr	r1, [r4, #0]
 800de7a:	1a6d      	subs	r5, r5, r1
 800de7c:	4629      	mov	r1, r5
 800de7e:	4630      	mov	r0, r6
 800de80:	f7ff ffa6 	bl	800ddd0 <sbrk_aligned>
 800de84:	3001      	adds	r0, #1
 800de86:	d03a      	beq.n	800defe <_malloc_r+0xea>
 800de88:	6823      	ldr	r3, [r4, #0]
 800de8a:	442b      	add	r3, r5
 800de8c:	6023      	str	r3, [r4, #0]
 800de8e:	f8d8 3000 	ldr.w	r3, [r8]
 800de92:	685a      	ldr	r2, [r3, #4]
 800de94:	bb62      	cbnz	r2, 800def0 <_malloc_r+0xdc>
 800de96:	f8c8 7000 	str.w	r7, [r8]
 800de9a:	e00f      	b.n	800debc <_malloc_r+0xa8>
 800de9c:	6822      	ldr	r2, [r4, #0]
 800de9e:	1b52      	subs	r2, r2, r5
 800dea0:	d420      	bmi.n	800dee4 <_malloc_r+0xd0>
 800dea2:	2a0b      	cmp	r2, #11
 800dea4:	d917      	bls.n	800ded6 <_malloc_r+0xc2>
 800dea6:	1961      	adds	r1, r4, r5
 800dea8:	42a3      	cmp	r3, r4
 800deaa:	6025      	str	r5, [r4, #0]
 800deac:	bf18      	it	ne
 800deae:	6059      	strne	r1, [r3, #4]
 800deb0:	6863      	ldr	r3, [r4, #4]
 800deb2:	bf08      	it	eq
 800deb4:	f8c8 1000 	streq.w	r1, [r8]
 800deb8:	5162      	str	r2, [r4, r5]
 800deba:	604b      	str	r3, [r1, #4]
 800debc:	4630      	mov	r0, r6
 800debe:	f000 f841 	bl	800df44 <__malloc_unlock>
 800dec2:	f104 000b 	add.w	r0, r4, #11
 800dec6:	1d23      	adds	r3, r4, #4
 800dec8:	f020 0007 	bic.w	r0, r0, #7
 800decc:	1ac2      	subs	r2, r0, r3
 800dece:	bf1c      	itt	ne
 800ded0:	1a1b      	subne	r3, r3, r0
 800ded2:	50a3      	strne	r3, [r4, r2]
 800ded4:	e7af      	b.n	800de36 <_malloc_r+0x22>
 800ded6:	6862      	ldr	r2, [r4, #4]
 800ded8:	42a3      	cmp	r3, r4
 800deda:	bf0c      	ite	eq
 800dedc:	f8c8 2000 	streq.w	r2, [r8]
 800dee0:	605a      	strne	r2, [r3, #4]
 800dee2:	e7eb      	b.n	800debc <_malloc_r+0xa8>
 800dee4:	4623      	mov	r3, r4
 800dee6:	6864      	ldr	r4, [r4, #4]
 800dee8:	e7ae      	b.n	800de48 <_malloc_r+0x34>
 800deea:	463c      	mov	r4, r7
 800deec:	687f      	ldr	r7, [r7, #4]
 800deee:	e7b6      	b.n	800de5e <_malloc_r+0x4a>
 800def0:	461a      	mov	r2, r3
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	42a3      	cmp	r3, r4
 800def6:	d1fb      	bne.n	800def0 <_malloc_r+0xdc>
 800def8:	2300      	movs	r3, #0
 800defa:	6053      	str	r3, [r2, #4]
 800defc:	e7de      	b.n	800debc <_malloc_r+0xa8>
 800defe:	230c      	movs	r3, #12
 800df00:	6033      	str	r3, [r6, #0]
 800df02:	4630      	mov	r0, r6
 800df04:	f000 f81e 	bl	800df44 <__malloc_unlock>
 800df08:	e794      	b.n	800de34 <_malloc_r+0x20>
 800df0a:	6005      	str	r5, [r0, #0]
 800df0c:	e7d6      	b.n	800debc <_malloc_r+0xa8>
 800df0e:	bf00      	nop
 800df10:	20000960 	.word	0x20000960

0800df14 <__ascii_mbtowc>:
 800df14:	b082      	sub	sp, #8
 800df16:	b901      	cbnz	r1, 800df1a <__ascii_mbtowc+0x6>
 800df18:	a901      	add	r1, sp, #4
 800df1a:	b142      	cbz	r2, 800df2e <__ascii_mbtowc+0x1a>
 800df1c:	b14b      	cbz	r3, 800df32 <__ascii_mbtowc+0x1e>
 800df1e:	7813      	ldrb	r3, [r2, #0]
 800df20:	600b      	str	r3, [r1, #0]
 800df22:	7812      	ldrb	r2, [r2, #0]
 800df24:	1e10      	subs	r0, r2, #0
 800df26:	bf18      	it	ne
 800df28:	2001      	movne	r0, #1
 800df2a:	b002      	add	sp, #8
 800df2c:	4770      	bx	lr
 800df2e:	4610      	mov	r0, r2
 800df30:	e7fb      	b.n	800df2a <__ascii_mbtowc+0x16>
 800df32:	f06f 0001 	mvn.w	r0, #1
 800df36:	e7f8      	b.n	800df2a <__ascii_mbtowc+0x16>

0800df38 <__malloc_lock>:
 800df38:	4801      	ldr	r0, [pc, #4]	@ (800df40 <__malloc_lock+0x8>)
 800df3a:	f7fe bd36 	b.w	800c9aa <__retarget_lock_acquire_recursive>
 800df3e:	bf00      	nop
 800df40:	20000958 	.word	0x20000958

0800df44 <__malloc_unlock>:
 800df44:	4801      	ldr	r0, [pc, #4]	@ (800df4c <__malloc_unlock+0x8>)
 800df46:	f7fe bd31 	b.w	800c9ac <__retarget_lock_release_recursive>
 800df4a:	bf00      	nop
 800df4c:	20000958 	.word	0x20000958

0800df50 <_Balloc>:
 800df50:	b570      	push	{r4, r5, r6, lr}
 800df52:	69c6      	ldr	r6, [r0, #28]
 800df54:	4604      	mov	r4, r0
 800df56:	460d      	mov	r5, r1
 800df58:	b976      	cbnz	r6, 800df78 <_Balloc+0x28>
 800df5a:	2010      	movs	r0, #16
 800df5c:	f7ff ff30 	bl	800ddc0 <malloc>
 800df60:	4602      	mov	r2, r0
 800df62:	61e0      	str	r0, [r4, #28]
 800df64:	b920      	cbnz	r0, 800df70 <_Balloc+0x20>
 800df66:	4b18      	ldr	r3, [pc, #96]	@ (800dfc8 <_Balloc+0x78>)
 800df68:	4818      	ldr	r0, [pc, #96]	@ (800dfcc <_Balloc+0x7c>)
 800df6a:	216b      	movs	r1, #107	@ 0x6b
 800df6c:	f7fe fd38 	bl	800c9e0 <__assert_func>
 800df70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df74:	6006      	str	r6, [r0, #0]
 800df76:	60c6      	str	r6, [r0, #12]
 800df78:	69e6      	ldr	r6, [r4, #28]
 800df7a:	68f3      	ldr	r3, [r6, #12]
 800df7c:	b183      	cbz	r3, 800dfa0 <_Balloc+0x50>
 800df7e:	69e3      	ldr	r3, [r4, #28]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df86:	b9b8      	cbnz	r0, 800dfb8 <_Balloc+0x68>
 800df88:	2101      	movs	r1, #1
 800df8a:	fa01 f605 	lsl.w	r6, r1, r5
 800df8e:	1d72      	adds	r2, r6, #5
 800df90:	0092      	lsls	r2, r2, #2
 800df92:	4620      	mov	r0, r4
 800df94:	f000 fee1 	bl	800ed5a <_calloc_r>
 800df98:	b160      	cbz	r0, 800dfb4 <_Balloc+0x64>
 800df9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df9e:	e00e      	b.n	800dfbe <_Balloc+0x6e>
 800dfa0:	2221      	movs	r2, #33	@ 0x21
 800dfa2:	2104      	movs	r1, #4
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f000 fed8 	bl	800ed5a <_calloc_r>
 800dfaa:	69e3      	ldr	r3, [r4, #28]
 800dfac:	60f0      	str	r0, [r6, #12]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1e4      	bne.n	800df7e <_Balloc+0x2e>
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	bd70      	pop	{r4, r5, r6, pc}
 800dfb8:	6802      	ldr	r2, [r0, #0]
 800dfba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfc4:	e7f7      	b.n	800dfb6 <_Balloc+0x66>
 800dfc6:	bf00      	nop
 800dfc8:	0800f504 	.word	0x0800f504
 800dfcc:	0800f68f 	.word	0x0800f68f

0800dfd0 <_Bfree>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	69c6      	ldr	r6, [r0, #28]
 800dfd4:	4605      	mov	r5, r0
 800dfd6:	460c      	mov	r4, r1
 800dfd8:	b976      	cbnz	r6, 800dff8 <_Bfree+0x28>
 800dfda:	2010      	movs	r0, #16
 800dfdc:	f7ff fef0 	bl	800ddc0 <malloc>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	61e8      	str	r0, [r5, #28]
 800dfe4:	b920      	cbnz	r0, 800dff0 <_Bfree+0x20>
 800dfe6:	4b09      	ldr	r3, [pc, #36]	@ (800e00c <_Bfree+0x3c>)
 800dfe8:	4809      	ldr	r0, [pc, #36]	@ (800e010 <_Bfree+0x40>)
 800dfea:	218f      	movs	r1, #143	@ 0x8f
 800dfec:	f7fe fcf8 	bl	800c9e0 <__assert_func>
 800dff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dff4:	6006      	str	r6, [r0, #0]
 800dff6:	60c6      	str	r6, [r0, #12]
 800dff8:	b13c      	cbz	r4, 800e00a <_Bfree+0x3a>
 800dffa:	69eb      	ldr	r3, [r5, #28]
 800dffc:	6862      	ldr	r2, [r4, #4]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e004:	6021      	str	r1, [r4, #0]
 800e006:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e00a:	bd70      	pop	{r4, r5, r6, pc}
 800e00c:	0800f504 	.word	0x0800f504
 800e010:	0800f68f 	.word	0x0800f68f

0800e014 <__multadd>:
 800e014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e018:	690d      	ldr	r5, [r1, #16]
 800e01a:	4607      	mov	r7, r0
 800e01c:	460c      	mov	r4, r1
 800e01e:	461e      	mov	r6, r3
 800e020:	f101 0c14 	add.w	ip, r1, #20
 800e024:	2000      	movs	r0, #0
 800e026:	f8dc 3000 	ldr.w	r3, [ip]
 800e02a:	b299      	uxth	r1, r3
 800e02c:	fb02 6101 	mla	r1, r2, r1, r6
 800e030:	0c1e      	lsrs	r6, r3, #16
 800e032:	0c0b      	lsrs	r3, r1, #16
 800e034:	fb02 3306 	mla	r3, r2, r6, r3
 800e038:	b289      	uxth	r1, r1
 800e03a:	3001      	adds	r0, #1
 800e03c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e040:	4285      	cmp	r5, r0
 800e042:	f84c 1b04 	str.w	r1, [ip], #4
 800e046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e04a:	dcec      	bgt.n	800e026 <__multadd+0x12>
 800e04c:	b30e      	cbz	r6, 800e092 <__multadd+0x7e>
 800e04e:	68a3      	ldr	r3, [r4, #8]
 800e050:	42ab      	cmp	r3, r5
 800e052:	dc19      	bgt.n	800e088 <__multadd+0x74>
 800e054:	6861      	ldr	r1, [r4, #4]
 800e056:	4638      	mov	r0, r7
 800e058:	3101      	adds	r1, #1
 800e05a:	f7ff ff79 	bl	800df50 <_Balloc>
 800e05e:	4680      	mov	r8, r0
 800e060:	b928      	cbnz	r0, 800e06e <__multadd+0x5a>
 800e062:	4602      	mov	r2, r0
 800e064:	4b0c      	ldr	r3, [pc, #48]	@ (800e098 <__multadd+0x84>)
 800e066:	480d      	ldr	r0, [pc, #52]	@ (800e09c <__multadd+0x88>)
 800e068:	21ba      	movs	r1, #186	@ 0xba
 800e06a:	f7fe fcb9 	bl	800c9e0 <__assert_func>
 800e06e:	6922      	ldr	r2, [r4, #16]
 800e070:	3202      	adds	r2, #2
 800e072:	f104 010c 	add.w	r1, r4, #12
 800e076:	0092      	lsls	r2, r2, #2
 800e078:	300c      	adds	r0, #12
 800e07a:	f7fe fc98 	bl	800c9ae <memcpy>
 800e07e:	4621      	mov	r1, r4
 800e080:	4638      	mov	r0, r7
 800e082:	f7ff ffa5 	bl	800dfd0 <_Bfree>
 800e086:	4644      	mov	r4, r8
 800e088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e08c:	3501      	adds	r5, #1
 800e08e:	615e      	str	r6, [r3, #20]
 800e090:	6125      	str	r5, [r4, #16]
 800e092:	4620      	mov	r0, r4
 800e094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e098:	0800f61e 	.word	0x0800f61e
 800e09c:	0800f68f 	.word	0x0800f68f

0800e0a0 <__s2b>:
 800e0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0a4:	460c      	mov	r4, r1
 800e0a6:	4615      	mov	r5, r2
 800e0a8:	461f      	mov	r7, r3
 800e0aa:	2209      	movs	r2, #9
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	4606      	mov	r6, r0
 800e0b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	db09      	blt.n	800e0d0 <__s2b+0x30>
 800e0bc:	4630      	mov	r0, r6
 800e0be:	f7ff ff47 	bl	800df50 <_Balloc>
 800e0c2:	b940      	cbnz	r0, 800e0d6 <__s2b+0x36>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	4b19      	ldr	r3, [pc, #100]	@ (800e12c <__s2b+0x8c>)
 800e0c8:	4819      	ldr	r0, [pc, #100]	@ (800e130 <__s2b+0x90>)
 800e0ca:	21d3      	movs	r1, #211	@ 0xd3
 800e0cc:	f7fe fc88 	bl	800c9e0 <__assert_func>
 800e0d0:	0052      	lsls	r2, r2, #1
 800e0d2:	3101      	adds	r1, #1
 800e0d4:	e7f0      	b.n	800e0b8 <__s2b+0x18>
 800e0d6:	9b08      	ldr	r3, [sp, #32]
 800e0d8:	6143      	str	r3, [r0, #20]
 800e0da:	2d09      	cmp	r5, #9
 800e0dc:	f04f 0301 	mov.w	r3, #1
 800e0e0:	6103      	str	r3, [r0, #16]
 800e0e2:	dd16      	ble.n	800e112 <__s2b+0x72>
 800e0e4:	f104 0909 	add.w	r9, r4, #9
 800e0e8:	46c8      	mov	r8, r9
 800e0ea:	442c      	add	r4, r5
 800e0ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e0f0:	4601      	mov	r1, r0
 800e0f2:	3b30      	subs	r3, #48	@ 0x30
 800e0f4:	220a      	movs	r2, #10
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	f7ff ff8c 	bl	800e014 <__multadd>
 800e0fc:	45a0      	cmp	r8, r4
 800e0fe:	d1f5      	bne.n	800e0ec <__s2b+0x4c>
 800e100:	f1a5 0408 	sub.w	r4, r5, #8
 800e104:	444c      	add	r4, r9
 800e106:	1b2d      	subs	r5, r5, r4
 800e108:	1963      	adds	r3, r4, r5
 800e10a:	42bb      	cmp	r3, r7
 800e10c:	db04      	blt.n	800e118 <__s2b+0x78>
 800e10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e112:	340a      	adds	r4, #10
 800e114:	2509      	movs	r5, #9
 800e116:	e7f6      	b.n	800e106 <__s2b+0x66>
 800e118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e11c:	4601      	mov	r1, r0
 800e11e:	3b30      	subs	r3, #48	@ 0x30
 800e120:	220a      	movs	r2, #10
 800e122:	4630      	mov	r0, r6
 800e124:	f7ff ff76 	bl	800e014 <__multadd>
 800e128:	e7ee      	b.n	800e108 <__s2b+0x68>
 800e12a:	bf00      	nop
 800e12c:	0800f61e 	.word	0x0800f61e
 800e130:	0800f68f 	.word	0x0800f68f

0800e134 <__hi0bits>:
 800e134:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e138:	4603      	mov	r3, r0
 800e13a:	bf36      	itet	cc
 800e13c:	0403      	lslcc	r3, r0, #16
 800e13e:	2000      	movcs	r0, #0
 800e140:	2010      	movcc	r0, #16
 800e142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e146:	bf3c      	itt	cc
 800e148:	021b      	lslcc	r3, r3, #8
 800e14a:	3008      	addcc	r0, #8
 800e14c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e150:	bf3c      	itt	cc
 800e152:	011b      	lslcc	r3, r3, #4
 800e154:	3004      	addcc	r0, #4
 800e156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e15a:	bf3c      	itt	cc
 800e15c:	009b      	lslcc	r3, r3, #2
 800e15e:	3002      	addcc	r0, #2
 800e160:	2b00      	cmp	r3, #0
 800e162:	db05      	blt.n	800e170 <__hi0bits+0x3c>
 800e164:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e168:	f100 0001 	add.w	r0, r0, #1
 800e16c:	bf08      	it	eq
 800e16e:	2020      	moveq	r0, #32
 800e170:	4770      	bx	lr

0800e172 <__lo0bits>:
 800e172:	6803      	ldr	r3, [r0, #0]
 800e174:	4602      	mov	r2, r0
 800e176:	f013 0007 	ands.w	r0, r3, #7
 800e17a:	d00b      	beq.n	800e194 <__lo0bits+0x22>
 800e17c:	07d9      	lsls	r1, r3, #31
 800e17e:	d421      	bmi.n	800e1c4 <__lo0bits+0x52>
 800e180:	0798      	lsls	r0, r3, #30
 800e182:	bf49      	itett	mi
 800e184:	085b      	lsrmi	r3, r3, #1
 800e186:	089b      	lsrpl	r3, r3, #2
 800e188:	2001      	movmi	r0, #1
 800e18a:	6013      	strmi	r3, [r2, #0]
 800e18c:	bf5c      	itt	pl
 800e18e:	6013      	strpl	r3, [r2, #0]
 800e190:	2002      	movpl	r0, #2
 800e192:	4770      	bx	lr
 800e194:	b299      	uxth	r1, r3
 800e196:	b909      	cbnz	r1, 800e19c <__lo0bits+0x2a>
 800e198:	0c1b      	lsrs	r3, r3, #16
 800e19a:	2010      	movs	r0, #16
 800e19c:	b2d9      	uxtb	r1, r3
 800e19e:	b909      	cbnz	r1, 800e1a4 <__lo0bits+0x32>
 800e1a0:	3008      	adds	r0, #8
 800e1a2:	0a1b      	lsrs	r3, r3, #8
 800e1a4:	0719      	lsls	r1, r3, #28
 800e1a6:	bf04      	itt	eq
 800e1a8:	091b      	lsreq	r3, r3, #4
 800e1aa:	3004      	addeq	r0, #4
 800e1ac:	0799      	lsls	r1, r3, #30
 800e1ae:	bf04      	itt	eq
 800e1b0:	089b      	lsreq	r3, r3, #2
 800e1b2:	3002      	addeq	r0, #2
 800e1b4:	07d9      	lsls	r1, r3, #31
 800e1b6:	d403      	bmi.n	800e1c0 <__lo0bits+0x4e>
 800e1b8:	085b      	lsrs	r3, r3, #1
 800e1ba:	f100 0001 	add.w	r0, r0, #1
 800e1be:	d003      	beq.n	800e1c8 <__lo0bits+0x56>
 800e1c0:	6013      	str	r3, [r2, #0]
 800e1c2:	4770      	bx	lr
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	4770      	bx	lr
 800e1c8:	2020      	movs	r0, #32
 800e1ca:	4770      	bx	lr

0800e1cc <__i2b>:
 800e1cc:	b510      	push	{r4, lr}
 800e1ce:	460c      	mov	r4, r1
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	f7ff febd 	bl	800df50 <_Balloc>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	b928      	cbnz	r0, 800e1e6 <__i2b+0x1a>
 800e1da:	4b05      	ldr	r3, [pc, #20]	@ (800e1f0 <__i2b+0x24>)
 800e1dc:	4805      	ldr	r0, [pc, #20]	@ (800e1f4 <__i2b+0x28>)
 800e1de:	f240 1145 	movw	r1, #325	@ 0x145
 800e1e2:	f7fe fbfd 	bl	800c9e0 <__assert_func>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	6144      	str	r4, [r0, #20]
 800e1ea:	6103      	str	r3, [r0, #16]
 800e1ec:	bd10      	pop	{r4, pc}
 800e1ee:	bf00      	nop
 800e1f0:	0800f61e 	.word	0x0800f61e
 800e1f4:	0800f68f 	.word	0x0800f68f

0800e1f8 <__multiply>:
 800e1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fc:	4614      	mov	r4, r2
 800e1fe:	690a      	ldr	r2, [r1, #16]
 800e200:	6923      	ldr	r3, [r4, #16]
 800e202:	429a      	cmp	r2, r3
 800e204:	bfa8      	it	ge
 800e206:	4623      	movge	r3, r4
 800e208:	460f      	mov	r7, r1
 800e20a:	bfa4      	itt	ge
 800e20c:	460c      	movge	r4, r1
 800e20e:	461f      	movge	r7, r3
 800e210:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e214:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e218:	68a3      	ldr	r3, [r4, #8]
 800e21a:	6861      	ldr	r1, [r4, #4]
 800e21c:	eb0a 0609 	add.w	r6, sl, r9
 800e220:	42b3      	cmp	r3, r6
 800e222:	b085      	sub	sp, #20
 800e224:	bfb8      	it	lt
 800e226:	3101      	addlt	r1, #1
 800e228:	f7ff fe92 	bl	800df50 <_Balloc>
 800e22c:	b930      	cbnz	r0, 800e23c <__multiply+0x44>
 800e22e:	4602      	mov	r2, r0
 800e230:	4b44      	ldr	r3, [pc, #272]	@ (800e344 <__multiply+0x14c>)
 800e232:	4845      	ldr	r0, [pc, #276]	@ (800e348 <__multiply+0x150>)
 800e234:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e238:	f7fe fbd2 	bl	800c9e0 <__assert_func>
 800e23c:	f100 0514 	add.w	r5, r0, #20
 800e240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e244:	462b      	mov	r3, r5
 800e246:	2200      	movs	r2, #0
 800e248:	4543      	cmp	r3, r8
 800e24a:	d321      	bcc.n	800e290 <__multiply+0x98>
 800e24c:	f107 0114 	add.w	r1, r7, #20
 800e250:	f104 0214 	add.w	r2, r4, #20
 800e254:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e258:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e25c:	9302      	str	r3, [sp, #8]
 800e25e:	1b13      	subs	r3, r2, r4
 800e260:	3b15      	subs	r3, #21
 800e262:	f023 0303 	bic.w	r3, r3, #3
 800e266:	3304      	adds	r3, #4
 800e268:	f104 0715 	add.w	r7, r4, #21
 800e26c:	42ba      	cmp	r2, r7
 800e26e:	bf38      	it	cc
 800e270:	2304      	movcc	r3, #4
 800e272:	9301      	str	r3, [sp, #4]
 800e274:	9b02      	ldr	r3, [sp, #8]
 800e276:	9103      	str	r1, [sp, #12]
 800e278:	428b      	cmp	r3, r1
 800e27a:	d80c      	bhi.n	800e296 <__multiply+0x9e>
 800e27c:	2e00      	cmp	r6, #0
 800e27e:	dd03      	ble.n	800e288 <__multiply+0x90>
 800e280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e284:	2b00      	cmp	r3, #0
 800e286:	d05b      	beq.n	800e340 <__multiply+0x148>
 800e288:	6106      	str	r6, [r0, #16]
 800e28a:	b005      	add	sp, #20
 800e28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e290:	f843 2b04 	str.w	r2, [r3], #4
 800e294:	e7d8      	b.n	800e248 <__multiply+0x50>
 800e296:	f8b1 a000 	ldrh.w	sl, [r1]
 800e29a:	f1ba 0f00 	cmp.w	sl, #0
 800e29e:	d024      	beq.n	800e2ea <__multiply+0xf2>
 800e2a0:	f104 0e14 	add.w	lr, r4, #20
 800e2a4:	46a9      	mov	r9, r5
 800e2a6:	f04f 0c00 	mov.w	ip, #0
 800e2aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e2ae:	f8d9 3000 	ldr.w	r3, [r9]
 800e2b2:	fa1f fb87 	uxth.w	fp, r7
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e2bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e2c0:	f8d9 7000 	ldr.w	r7, [r9]
 800e2c4:	4463      	add	r3, ip
 800e2c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800e2ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e2d8:	4572      	cmp	r2, lr
 800e2da:	f849 3b04 	str.w	r3, [r9], #4
 800e2de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2e2:	d8e2      	bhi.n	800e2aa <__multiply+0xb2>
 800e2e4:	9b01      	ldr	r3, [sp, #4]
 800e2e6:	f845 c003 	str.w	ip, [r5, r3]
 800e2ea:	9b03      	ldr	r3, [sp, #12]
 800e2ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e2f0:	3104      	adds	r1, #4
 800e2f2:	f1b9 0f00 	cmp.w	r9, #0
 800e2f6:	d021      	beq.n	800e33c <__multiply+0x144>
 800e2f8:	682b      	ldr	r3, [r5, #0]
 800e2fa:	f104 0c14 	add.w	ip, r4, #20
 800e2fe:	46ae      	mov	lr, r5
 800e300:	f04f 0a00 	mov.w	sl, #0
 800e304:	f8bc b000 	ldrh.w	fp, [ip]
 800e308:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e30c:	fb09 770b 	mla	r7, r9, fp, r7
 800e310:	4457      	add	r7, sl
 800e312:	b29b      	uxth	r3, r3
 800e314:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e318:	f84e 3b04 	str.w	r3, [lr], #4
 800e31c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e324:	f8be 3000 	ldrh.w	r3, [lr]
 800e328:	fb09 330a 	mla	r3, r9, sl, r3
 800e32c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e330:	4562      	cmp	r2, ip
 800e332:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e336:	d8e5      	bhi.n	800e304 <__multiply+0x10c>
 800e338:	9f01      	ldr	r7, [sp, #4]
 800e33a:	51eb      	str	r3, [r5, r7]
 800e33c:	3504      	adds	r5, #4
 800e33e:	e799      	b.n	800e274 <__multiply+0x7c>
 800e340:	3e01      	subs	r6, #1
 800e342:	e79b      	b.n	800e27c <__multiply+0x84>
 800e344:	0800f61e 	.word	0x0800f61e
 800e348:	0800f68f 	.word	0x0800f68f

0800e34c <__pow5mult>:
 800e34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e350:	4615      	mov	r5, r2
 800e352:	f012 0203 	ands.w	r2, r2, #3
 800e356:	4607      	mov	r7, r0
 800e358:	460e      	mov	r6, r1
 800e35a:	d007      	beq.n	800e36c <__pow5mult+0x20>
 800e35c:	4c25      	ldr	r4, [pc, #148]	@ (800e3f4 <__pow5mult+0xa8>)
 800e35e:	3a01      	subs	r2, #1
 800e360:	2300      	movs	r3, #0
 800e362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e366:	f7ff fe55 	bl	800e014 <__multadd>
 800e36a:	4606      	mov	r6, r0
 800e36c:	10ad      	asrs	r5, r5, #2
 800e36e:	d03d      	beq.n	800e3ec <__pow5mult+0xa0>
 800e370:	69fc      	ldr	r4, [r7, #28]
 800e372:	b97c      	cbnz	r4, 800e394 <__pow5mult+0x48>
 800e374:	2010      	movs	r0, #16
 800e376:	f7ff fd23 	bl	800ddc0 <malloc>
 800e37a:	4602      	mov	r2, r0
 800e37c:	61f8      	str	r0, [r7, #28]
 800e37e:	b928      	cbnz	r0, 800e38c <__pow5mult+0x40>
 800e380:	4b1d      	ldr	r3, [pc, #116]	@ (800e3f8 <__pow5mult+0xac>)
 800e382:	481e      	ldr	r0, [pc, #120]	@ (800e3fc <__pow5mult+0xb0>)
 800e384:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e388:	f7fe fb2a 	bl	800c9e0 <__assert_func>
 800e38c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e390:	6004      	str	r4, [r0, #0]
 800e392:	60c4      	str	r4, [r0, #12]
 800e394:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e39c:	b94c      	cbnz	r4, 800e3b2 <__pow5mult+0x66>
 800e39e:	f240 2171 	movw	r1, #625	@ 0x271
 800e3a2:	4638      	mov	r0, r7
 800e3a4:	f7ff ff12 	bl	800e1cc <__i2b>
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	6003      	str	r3, [r0, #0]
 800e3b2:	f04f 0900 	mov.w	r9, #0
 800e3b6:	07eb      	lsls	r3, r5, #31
 800e3b8:	d50a      	bpl.n	800e3d0 <__pow5mult+0x84>
 800e3ba:	4631      	mov	r1, r6
 800e3bc:	4622      	mov	r2, r4
 800e3be:	4638      	mov	r0, r7
 800e3c0:	f7ff ff1a 	bl	800e1f8 <__multiply>
 800e3c4:	4631      	mov	r1, r6
 800e3c6:	4680      	mov	r8, r0
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	f7ff fe01 	bl	800dfd0 <_Bfree>
 800e3ce:	4646      	mov	r6, r8
 800e3d0:	106d      	asrs	r5, r5, #1
 800e3d2:	d00b      	beq.n	800e3ec <__pow5mult+0xa0>
 800e3d4:	6820      	ldr	r0, [r4, #0]
 800e3d6:	b938      	cbnz	r0, 800e3e8 <__pow5mult+0x9c>
 800e3d8:	4622      	mov	r2, r4
 800e3da:	4621      	mov	r1, r4
 800e3dc:	4638      	mov	r0, r7
 800e3de:	f7ff ff0b 	bl	800e1f8 <__multiply>
 800e3e2:	6020      	str	r0, [r4, #0]
 800e3e4:	f8c0 9000 	str.w	r9, [r0]
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	e7e4      	b.n	800e3b6 <__pow5mult+0x6a>
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3f2:	bf00      	nop
 800e3f4:	0800f6e8 	.word	0x0800f6e8
 800e3f8:	0800f504 	.word	0x0800f504
 800e3fc:	0800f68f 	.word	0x0800f68f

0800e400 <__lshift>:
 800e400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e404:	460c      	mov	r4, r1
 800e406:	6849      	ldr	r1, [r1, #4]
 800e408:	6923      	ldr	r3, [r4, #16]
 800e40a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e40e:	68a3      	ldr	r3, [r4, #8]
 800e410:	4607      	mov	r7, r0
 800e412:	4691      	mov	r9, r2
 800e414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e418:	f108 0601 	add.w	r6, r8, #1
 800e41c:	42b3      	cmp	r3, r6
 800e41e:	db0b      	blt.n	800e438 <__lshift+0x38>
 800e420:	4638      	mov	r0, r7
 800e422:	f7ff fd95 	bl	800df50 <_Balloc>
 800e426:	4605      	mov	r5, r0
 800e428:	b948      	cbnz	r0, 800e43e <__lshift+0x3e>
 800e42a:	4602      	mov	r2, r0
 800e42c:	4b28      	ldr	r3, [pc, #160]	@ (800e4d0 <__lshift+0xd0>)
 800e42e:	4829      	ldr	r0, [pc, #164]	@ (800e4d4 <__lshift+0xd4>)
 800e430:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e434:	f7fe fad4 	bl	800c9e0 <__assert_func>
 800e438:	3101      	adds	r1, #1
 800e43a:	005b      	lsls	r3, r3, #1
 800e43c:	e7ee      	b.n	800e41c <__lshift+0x1c>
 800e43e:	2300      	movs	r3, #0
 800e440:	f100 0114 	add.w	r1, r0, #20
 800e444:	f100 0210 	add.w	r2, r0, #16
 800e448:	4618      	mov	r0, r3
 800e44a:	4553      	cmp	r3, sl
 800e44c:	db33      	blt.n	800e4b6 <__lshift+0xb6>
 800e44e:	6920      	ldr	r0, [r4, #16]
 800e450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e454:	f104 0314 	add.w	r3, r4, #20
 800e458:	f019 091f 	ands.w	r9, r9, #31
 800e45c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e464:	d02b      	beq.n	800e4be <__lshift+0xbe>
 800e466:	f1c9 0e20 	rsb	lr, r9, #32
 800e46a:	468a      	mov	sl, r1
 800e46c:	2200      	movs	r2, #0
 800e46e:	6818      	ldr	r0, [r3, #0]
 800e470:	fa00 f009 	lsl.w	r0, r0, r9
 800e474:	4310      	orrs	r0, r2
 800e476:	f84a 0b04 	str.w	r0, [sl], #4
 800e47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e47e:	459c      	cmp	ip, r3
 800e480:	fa22 f20e 	lsr.w	r2, r2, lr
 800e484:	d8f3      	bhi.n	800e46e <__lshift+0x6e>
 800e486:	ebac 0304 	sub.w	r3, ip, r4
 800e48a:	3b15      	subs	r3, #21
 800e48c:	f023 0303 	bic.w	r3, r3, #3
 800e490:	3304      	adds	r3, #4
 800e492:	f104 0015 	add.w	r0, r4, #21
 800e496:	4584      	cmp	ip, r0
 800e498:	bf38      	it	cc
 800e49a:	2304      	movcc	r3, #4
 800e49c:	50ca      	str	r2, [r1, r3]
 800e49e:	b10a      	cbz	r2, 800e4a4 <__lshift+0xa4>
 800e4a0:	f108 0602 	add.w	r6, r8, #2
 800e4a4:	3e01      	subs	r6, #1
 800e4a6:	4638      	mov	r0, r7
 800e4a8:	612e      	str	r6, [r5, #16]
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	f7ff fd90 	bl	800dfd0 <_Bfree>
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	e7c5      	b.n	800e44a <__lshift+0x4a>
 800e4be:	3904      	subs	r1, #4
 800e4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4c8:	459c      	cmp	ip, r3
 800e4ca:	d8f9      	bhi.n	800e4c0 <__lshift+0xc0>
 800e4cc:	e7ea      	b.n	800e4a4 <__lshift+0xa4>
 800e4ce:	bf00      	nop
 800e4d0:	0800f61e 	.word	0x0800f61e
 800e4d4:	0800f68f 	.word	0x0800f68f

0800e4d8 <__mcmp>:
 800e4d8:	690a      	ldr	r2, [r1, #16]
 800e4da:	4603      	mov	r3, r0
 800e4dc:	6900      	ldr	r0, [r0, #16]
 800e4de:	1a80      	subs	r0, r0, r2
 800e4e0:	b530      	push	{r4, r5, lr}
 800e4e2:	d10e      	bne.n	800e502 <__mcmp+0x2a>
 800e4e4:	3314      	adds	r3, #20
 800e4e6:	3114      	adds	r1, #20
 800e4e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e4ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e4f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e4f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e4f8:	4295      	cmp	r5, r2
 800e4fa:	d003      	beq.n	800e504 <__mcmp+0x2c>
 800e4fc:	d205      	bcs.n	800e50a <__mcmp+0x32>
 800e4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e502:	bd30      	pop	{r4, r5, pc}
 800e504:	42a3      	cmp	r3, r4
 800e506:	d3f3      	bcc.n	800e4f0 <__mcmp+0x18>
 800e508:	e7fb      	b.n	800e502 <__mcmp+0x2a>
 800e50a:	2001      	movs	r0, #1
 800e50c:	e7f9      	b.n	800e502 <__mcmp+0x2a>
	...

0800e510 <__mdiff>:
 800e510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	4689      	mov	r9, r1
 800e516:	4606      	mov	r6, r0
 800e518:	4611      	mov	r1, r2
 800e51a:	4648      	mov	r0, r9
 800e51c:	4614      	mov	r4, r2
 800e51e:	f7ff ffdb 	bl	800e4d8 <__mcmp>
 800e522:	1e05      	subs	r5, r0, #0
 800e524:	d112      	bne.n	800e54c <__mdiff+0x3c>
 800e526:	4629      	mov	r1, r5
 800e528:	4630      	mov	r0, r6
 800e52a:	f7ff fd11 	bl	800df50 <_Balloc>
 800e52e:	4602      	mov	r2, r0
 800e530:	b928      	cbnz	r0, 800e53e <__mdiff+0x2e>
 800e532:	4b3f      	ldr	r3, [pc, #252]	@ (800e630 <__mdiff+0x120>)
 800e534:	f240 2137 	movw	r1, #567	@ 0x237
 800e538:	483e      	ldr	r0, [pc, #248]	@ (800e634 <__mdiff+0x124>)
 800e53a:	f7fe fa51 	bl	800c9e0 <__assert_func>
 800e53e:	2301      	movs	r3, #1
 800e540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e544:	4610      	mov	r0, r2
 800e546:	b003      	add	sp, #12
 800e548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54c:	bfbc      	itt	lt
 800e54e:	464b      	movlt	r3, r9
 800e550:	46a1      	movlt	r9, r4
 800e552:	4630      	mov	r0, r6
 800e554:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e558:	bfba      	itte	lt
 800e55a:	461c      	movlt	r4, r3
 800e55c:	2501      	movlt	r5, #1
 800e55e:	2500      	movge	r5, #0
 800e560:	f7ff fcf6 	bl	800df50 <_Balloc>
 800e564:	4602      	mov	r2, r0
 800e566:	b918      	cbnz	r0, 800e570 <__mdiff+0x60>
 800e568:	4b31      	ldr	r3, [pc, #196]	@ (800e630 <__mdiff+0x120>)
 800e56a:	f240 2145 	movw	r1, #581	@ 0x245
 800e56e:	e7e3      	b.n	800e538 <__mdiff+0x28>
 800e570:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e574:	6926      	ldr	r6, [r4, #16]
 800e576:	60c5      	str	r5, [r0, #12]
 800e578:	f109 0310 	add.w	r3, r9, #16
 800e57c:	f109 0514 	add.w	r5, r9, #20
 800e580:	f104 0e14 	add.w	lr, r4, #20
 800e584:	f100 0b14 	add.w	fp, r0, #20
 800e588:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e58c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e590:	9301      	str	r3, [sp, #4]
 800e592:	46d9      	mov	r9, fp
 800e594:	f04f 0c00 	mov.w	ip, #0
 800e598:	9b01      	ldr	r3, [sp, #4]
 800e59a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e59e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e5a2:	9301      	str	r3, [sp, #4]
 800e5a4:	fa1f f38a 	uxth.w	r3, sl
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	b283      	uxth	r3, r0
 800e5ac:	1acb      	subs	r3, r1, r3
 800e5ae:	0c00      	lsrs	r0, r0, #16
 800e5b0:	4463      	add	r3, ip
 800e5b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e5b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e5c0:	4576      	cmp	r6, lr
 800e5c2:	f849 3b04 	str.w	r3, [r9], #4
 800e5c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5ca:	d8e5      	bhi.n	800e598 <__mdiff+0x88>
 800e5cc:	1b33      	subs	r3, r6, r4
 800e5ce:	3b15      	subs	r3, #21
 800e5d0:	f023 0303 	bic.w	r3, r3, #3
 800e5d4:	3415      	adds	r4, #21
 800e5d6:	3304      	adds	r3, #4
 800e5d8:	42a6      	cmp	r6, r4
 800e5da:	bf38      	it	cc
 800e5dc:	2304      	movcc	r3, #4
 800e5de:	441d      	add	r5, r3
 800e5e0:	445b      	add	r3, fp
 800e5e2:	461e      	mov	r6, r3
 800e5e4:	462c      	mov	r4, r5
 800e5e6:	4544      	cmp	r4, r8
 800e5e8:	d30e      	bcc.n	800e608 <__mdiff+0xf8>
 800e5ea:	f108 0103 	add.w	r1, r8, #3
 800e5ee:	1b49      	subs	r1, r1, r5
 800e5f0:	f021 0103 	bic.w	r1, r1, #3
 800e5f4:	3d03      	subs	r5, #3
 800e5f6:	45a8      	cmp	r8, r5
 800e5f8:	bf38      	it	cc
 800e5fa:	2100      	movcc	r1, #0
 800e5fc:	440b      	add	r3, r1
 800e5fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e602:	b191      	cbz	r1, 800e62a <__mdiff+0x11a>
 800e604:	6117      	str	r7, [r2, #16]
 800e606:	e79d      	b.n	800e544 <__mdiff+0x34>
 800e608:	f854 1b04 	ldr.w	r1, [r4], #4
 800e60c:	46e6      	mov	lr, ip
 800e60e:	0c08      	lsrs	r0, r1, #16
 800e610:	fa1c fc81 	uxtah	ip, ip, r1
 800e614:	4471      	add	r1, lr
 800e616:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e61a:	b289      	uxth	r1, r1
 800e61c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e620:	f846 1b04 	str.w	r1, [r6], #4
 800e624:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e628:	e7dd      	b.n	800e5e6 <__mdiff+0xd6>
 800e62a:	3f01      	subs	r7, #1
 800e62c:	e7e7      	b.n	800e5fe <__mdiff+0xee>
 800e62e:	bf00      	nop
 800e630:	0800f61e 	.word	0x0800f61e
 800e634:	0800f68f 	.word	0x0800f68f

0800e638 <__ulp>:
 800e638:	b082      	sub	sp, #8
 800e63a:	ed8d 0b00 	vstr	d0, [sp]
 800e63e:	9a01      	ldr	r2, [sp, #4]
 800e640:	4b0f      	ldr	r3, [pc, #60]	@ (800e680 <__ulp+0x48>)
 800e642:	4013      	ands	r3, r2
 800e644:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e648:	2b00      	cmp	r3, #0
 800e64a:	dc08      	bgt.n	800e65e <__ulp+0x26>
 800e64c:	425b      	negs	r3, r3
 800e64e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e652:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e656:	da04      	bge.n	800e662 <__ulp+0x2a>
 800e658:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e65c:	4113      	asrs	r3, r2
 800e65e:	2200      	movs	r2, #0
 800e660:	e008      	b.n	800e674 <__ulp+0x3c>
 800e662:	f1a2 0314 	sub.w	r3, r2, #20
 800e666:	2b1e      	cmp	r3, #30
 800e668:	bfda      	itte	le
 800e66a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e66e:	40da      	lsrle	r2, r3
 800e670:	2201      	movgt	r2, #1
 800e672:	2300      	movs	r3, #0
 800e674:	4619      	mov	r1, r3
 800e676:	4610      	mov	r0, r2
 800e678:	ec41 0b10 	vmov	d0, r0, r1
 800e67c:	b002      	add	sp, #8
 800e67e:	4770      	bx	lr
 800e680:	7ff00000 	.word	0x7ff00000

0800e684 <__b2d>:
 800e684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e688:	6906      	ldr	r6, [r0, #16]
 800e68a:	f100 0814 	add.w	r8, r0, #20
 800e68e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e692:	1f37      	subs	r7, r6, #4
 800e694:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e698:	4610      	mov	r0, r2
 800e69a:	f7ff fd4b 	bl	800e134 <__hi0bits>
 800e69e:	f1c0 0320 	rsb	r3, r0, #32
 800e6a2:	280a      	cmp	r0, #10
 800e6a4:	600b      	str	r3, [r1, #0]
 800e6a6:	491b      	ldr	r1, [pc, #108]	@ (800e714 <__b2d+0x90>)
 800e6a8:	dc15      	bgt.n	800e6d6 <__b2d+0x52>
 800e6aa:	f1c0 0c0b 	rsb	ip, r0, #11
 800e6ae:	fa22 f30c 	lsr.w	r3, r2, ip
 800e6b2:	45b8      	cmp	r8, r7
 800e6b4:	ea43 0501 	orr.w	r5, r3, r1
 800e6b8:	bf34      	ite	cc
 800e6ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e6be:	2300      	movcs	r3, #0
 800e6c0:	3015      	adds	r0, #21
 800e6c2:	fa02 f000 	lsl.w	r0, r2, r0
 800e6c6:	fa23 f30c 	lsr.w	r3, r3, ip
 800e6ca:	4303      	orrs	r3, r0
 800e6cc:	461c      	mov	r4, r3
 800e6ce:	ec45 4b10 	vmov	d0, r4, r5
 800e6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d6:	45b8      	cmp	r8, r7
 800e6d8:	bf3a      	itte	cc
 800e6da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e6de:	f1a6 0708 	subcc.w	r7, r6, #8
 800e6e2:	2300      	movcs	r3, #0
 800e6e4:	380b      	subs	r0, #11
 800e6e6:	d012      	beq.n	800e70e <__b2d+0x8a>
 800e6e8:	f1c0 0120 	rsb	r1, r0, #32
 800e6ec:	fa23 f401 	lsr.w	r4, r3, r1
 800e6f0:	4082      	lsls	r2, r0
 800e6f2:	4322      	orrs	r2, r4
 800e6f4:	4547      	cmp	r7, r8
 800e6f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e6fa:	bf8c      	ite	hi
 800e6fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e700:	2200      	movls	r2, #0
 800e702:	4083      	lsls	r3, r0
 800e704:	40ca      	lsrs	r2, r1
 800e706:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e70a:	4313      	orrs	r3, r2
 800e70c:	e7de      	b.n	800e6cc <__b2d+0x48>
 800e70e:	ea42 0501 	orr.w	r5, r2, r1
 800e712:	e7db      	b.n	800e6cc <__b2d+0x48>
 800e714:	3ff00000 	.word	0x3ff00000

0800e718 <__d2b>:
 800e718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e71c:	460f      	mov	r7, r1
 800e71e:	2101      	movs	r1, #1
 800e720:	ec59 8b10 	vmov	r8, r9, d0
 800e724:	4616      	mov	r6, r2
 800e726:	f7ff fc13 	bl	800df50 <_Balloc>
 800e72a:	4604      	mov	r4, r0
 800e72c:	b930      	cbnz	r0, 800e73c <__d2b+0x24>
 800e72e:	4602      	mov	r2, r0
 800e730:	4b23      	ldr	r3, [pc, #140]	@ (800e7c0 <__d2b+0xa8>)
 800e732:	4824      	ldr	r0, [pc, #144]	@ (800e7c4 <__d2b+0xac>)
 800e734:	f240 310f 	movw	r1, #783	@ 0x30f
 800e738:	f7fe f952 	bl	800c9e0 <__assert_func>
 800e73c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e744:	b10d      	cbz	r5, 800e74a <__d2b+0x32>
 800e746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e74a:	9301      	str	r3, [sp, #4]
 800e74c:	f1b8 0300 	subs.w	r3, r8, #0
 800e750:	d023      	beq.n	800e79a <__d2b+0x82>
 800e752:	4668      	mov	r0, sp
 800e754:	9300      	str	r3, [sp, #0]
 800e756:	f7ff fd0c 	bl	800e172 <__lo0bits>
 800e75a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e75e:	b1d0      	cbz	r0, 800e796 <__d2b+0x7e>
 800e760:	f1c0 0320 	rsb	r3, r0, #32
 800e764:	fa02 f303 	lsl.w	r3, r2, r3
 800e768:	430b      	orrs	r3, r1
 800e76a:	40c2      	lsrs	r2, r0
 800e76c:	6163      	str	r3, [r4, #20]
 800e76e:	9201      	str	r2, [sp, #4]
 800e770:	9b01      	ldr	r3, [sp, #4]
 800e772:	61a3      	str	r3, [r4, #24]
 800e774:	2b00      	cmp	r3, #0
 800e776:	bf0c      	ite	eq
 800e778:	2201      	moveq	r2, #1
 800e77a:	2202      	movne	r2, #2
 800e77c:	6122      	str	r2, [r4, #16]
 800e77e:	b1a5      	cbz	r5, 800e7aa <__d2b+0x92>
 800e780:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e784:	4405      	add	r5, r0
 800e786:	603d      	str	r5, [r7, #0]
 800e788:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e78c:	6030      	str	r0, [r6, #0]
 800e78e:	4620      	mov	r0, r4
 800e790:	b003      	add	sp, #12
 800e792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e796:	6161      	str	r1, [r4, #20]
 800e798:	e7ea      	b.n	800e770 <__d2b+0x58>
 800e79a:	a801      	add	r0, sp, #4
 800e79c:	f7ff fce9 	bl	800e172 <__lo0bits>
 800e7a0:	9b01      	ldr	r3, [sp, #4]
 800e7a2:	6163      	str	r3, [r4, #20]
 800e7a4:	3020      	adds	r0, #32
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	e7e8      	b.n	800e77c <__d2b+0x64>
 800e7aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e7b2:	6038      	str	r0, [r7, #0]
 800e7b4:	6918      	ldr	r0, [r3, #16]
 800e7b6:	f7ff fcbd 	bl	800e134 <__hi0bits>
 800e7ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7be:	e7e5      	b.n	800e78c <__d2b+0x74>
 800e7c0:	0800f61e 	.word	0x0800f61e
 800e7c4:	0800f68f 	.word	0x0800f68f

0800e7c8 <__ratio>:
 800e7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7cc:	b085      	sub	sp, #20
 800e7ce:	e9cd 1000 	strd	r1, r0, [sp]
 800e7d2:	a902      	add	r1, sp, #8
 800e7d4:	f7ff ff56 	bl	800e684 <__b2d>
 800e7d8:	9800      	ldr	r0, [sp, #0]
 800e7da:	a903      	add	r1, sp, #12
 800e7dc:	ec55 4b10 	vmov	r4, r5, d0
 800e7e0:	f7ff ff50 	bl	800e684 <__b2d>
 800e7e4:	9b01      	ldr	r3, [sp, #4]
 800e7e6:	6919      	ldr	r1, [r3, #16]
 800e7e8:	9b00      	ldr	r3, [sp, #0]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	1ac9      	subs	r1, r1, r3
 800e7ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e7f2:	1a9b      	subs	r3, r3, r2
 800e7f4:	ec5b ab10 	vmov	sl, fp, d0
 800e7f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	bfce      	itee	gt
 800e800:	462a      	movgt	r2, r5
 800e802:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e806:	465a      	movle	r2, fp
 800e808:	462f      	mov	r7, r5
 800e80a:	46d9      	mov	r9, fp
 800e80c:	bfcc      	ite	gt
 800e80e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e812:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e816:	464b      	mov	r3, r9
 800e818:	4652      	mov	r2, sl
 800e81a:	4620      	mov	r0, r4
 800e81c:	4639      	mov	r1, r7
 800e81e:	f7f2 f84d 	bl	80008bc <__aeabi_ddiv>
 800e822:	ec41 0b10 	vmov	d0, r0, r1
 800e826:	b005      	add	sp, #20
 800e828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e82c <__copybits>:
 800e82c:	3901      	subs	r1, #1
 800e82e:	b570      	push	{r4, r5, r6, lr}
 800e830:	1149      	asrs	r1, r1, #5
 800e832:	6914      	ldr	r4, [r2, #16]
 800e834:	3101      	adds	r1, #1
 800e836:	f102 0314 	add.w	r3, r2, #20
 800e83a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e83e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e842:	1f05      	subs	r5, r0, #4
 800e844:	42a3      	cmp	r3, r4
 800e846:	d30c      	bcc.n	800e862 <__copybits+0x36>
 800e848:	1aa3      	subs	r3, r4, r2
 800e84a:	3b11      	subs	r3, #17
 800e84c:	f023 0303 	bic.w	r3, r3, #3
 800e850:	3211      	adds	r2, #17
 800e852:	42a2      	cmp	r2, r4
 800e854:	bf88      	it	hi
 800e856:	2300      	movhi	r3, #0
 800e858:	4418      	add	r0, r3
 800e85a:	2300      	movs	r3, #0
 800e85c:	4288      	cmp	r0, r1
 800e85e:	d305      	bcc.n	800e86c <__copybits+0x40>
 800e860:	bd70      	pop	{r4, r5, r6, pc}
 800e862:	f853 6b04 	ldr.w	r6, [r3], #4
 800e866:	f845 6f04 	str.w	r6, [r5, #4]!
 800e86a:	e7eb      	b.n	800e844 <__copybits+0x18>
 800e86c:	f840 3b04 	str.w	r3, [r0], #4
 800e870:	e7f4      	b.n	800e85c <__copybits+0x30>

0800e872 <__any_on>:
 800e872:	f100 0214 	add.w	r2, r0, #20
 800e876:	6900      	ldr	r0, [r0, #16]
 800e878:	114b      	asrs	r3, r1, #5
 800e87a:	4298      	cmp	r0, r3
 800e87c:	b510      	push	{r4, lr}
 800e87e:	db11      	blt.n	800e8a4 <__any_on+0x32>
 800e880:	dd0a      	ble.n	800e898 <__any_on+0x26>
 800e882:	f011 011f 	ands.w	r1, r1, #31
 800e886:	d007      	beq.n	800e898 <__any_on+0x26>
 800e888:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e88c:	fa24 f001 	lsr.w	r0, r4, r1
 800e890:	fa00 f101 	lsl.w	r1, r0, r1
 800e894:	428c      	cmp	r4, r1
 800e896:	d10b      	bne.n	800e8b0 <__any_on+0x3e>
 800e898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d803      	bhi.n	800e8a8 <__any_on+0x36>
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	bd10      	pop	{r4, pc}
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	e7f7      	b.n	800e898 <__any_on+0x26>
 800e8a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8ac:	2900      	cmp	r1, #0
 800e8ae:	d0f5      	beq.n	800e89c <__any_on+0x2a>
 800e8b0:	2001      	movs	r0, #1
 800e8b2:	e7f6      	b.n	800e8a2 <__any_on+0x30>

0800e8b4 <__ascii_wctomb>:
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	4608      	mov	r0, r1
 800e8b8:	b141      	cbz	r1, 800e8cc <__ascii_wctomb+0x18>
 800e8ba:	2aff      	cmp	r2, #255	@ 0xff
 800e8bc:	d904      	bls.n	800e8c8 <__ascii_wctomb+0x14>
 800e8be:	228a      	movs	r2, #138	@ 0x8a
 800e8c0:	601a      	str	r2, [r3, #0]
 800e8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c6:	4770      	bx	lr
 800e8c8:	700a      	strb	r2, [r1, #0]
 800e8ca:	2001      	movs	r0, #1
 800e8cc:	4770      	bx	lr

0800e8ce <__ssputs_r>:
 800e8ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8d2:	688e      	ldr	r6, [r1, #8]
 800e8d4:	461f      	mov	r7, r3
 800e8d6:	42be      	cmp	r6, r7
 800e8d8:	680b      	ldr	r3, [r1, #0]
 800e8da:	4682      	mov	sl, r0
 800e8dc:	460c      	mov	r4, r1
 800e8de:	4690      	mov	r8, r2
 800e8e0:	d82d      	bhi.n	800e93e <__ssputs_r+0x70>
 800e8e2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8e6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e8ea:	d026      	beq.n	800e93a <__ssputs_r+0x6c>
 800e8ec:	6965      	ldr	r5, [r4, #20]
 800e8ee:	6909      	ldr	r1, [r1, #16]
 800e8f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8f4:	eba3 0901 	sub.w	r9, r3, r1
 800e8f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8fc:	1c7b      	adds	r3, r7, #1
 800e8fe:	444b      	add	r3, r9
 800e900:	106d      	asrs	r5, r5, #1
 800e902:	429d      	cmp	r5, r3
 800e904:	bf38      	it	cc
 800e906:	461d      	movcc	r5, r3
 800e908:	0553      	lsls	r3, r2, #21
 800e90a:	d527      	bpl.n	800e95c <__ssputs_r+0x8e>
 800e90c:	4629      	mov	r1, r5
 800e90e:	f7ff fa81 	bl	800de14 <_malloc_r>
 800e912:	4606      	mov	r6, r0
 800e914:	b360      	cbz	r0, 800e970 <__ssputs_r+0xa2>
 800e916:	6921      	ldr	r1, [r4, #16]
 800e918:	464a      	mov	r2, r9
 800e91a:	f7fe f848 	bl	800c9ae <memcpy>
 800e91e:	89a3      	ldrh	r3, [r4, #12]
 800e920:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e928:	81a3      	strh	r3, [r4, #12]
 800e92a:	6126      	str	r6, [r4, #16]
 800e92c:	6165      	str	r5, [r4, #20]
 800e92e:	444e      	add	r6, r9
 800e930:	eba5 0509 	sub.w	r5, r5, r9
 800e934:	6026      	str	r6, [r4, #0]
 800e936:	60a5      	str	r5, [r4, #8]
 800e938:	463e      	mov	r6, r7
 800e93a:	42be      	cmp	r6, r7
 800e93c:	d900      	bls.n	800e940 <__ssputs_r+0x72>
 800e93e:	463e      	mov	r6, r7
 800e940:	6820      	ldr	r0, [r4, #0]
 800e942:	4632      	mov	r2, r6
 800e944:	4641      	mov	r1, r8
 800e946:	f000 f9d7 	bl	800ecf8 <memmove>
 800e94a:	68a3      	ldr	r3, [r4, #8]
 800e94c:	1b9b      	subs	r3, r3, r6
 800e94e:	60a3      	str	r3, [r4, #8]
 800e950:	6823      	ldr	r3, [r4, #0]
 800e952:	4433      	add	r3, r6
 800e954:	6023      	str	r3, [r4, #0]
 800e956:	2000      	movs	r0, #0
 800e958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e95c:	462a      	mov	r2, r5
 800e95e:	f000 fa10 	bl	800ed82 <_realloc_r>
 800e962:	4606      	mov	r6, r0
 800e964:	2800      	cmp	r0, #0
 800e966:	d1e0      	bne.n	800e92a <__ssputs_r+0x5c>
 800e968:	6921      	ldr	r1, [r4, #16]
 800e96a:	4650      	mov	r0, sl
 800e96c:	f7fe fea4 	bl	800d6b8 <_free_r>
 800e970:	230c      	movs	r3, #12
 800e972:	f8ca 3000 	str.w	r3, [sl]
 800e976:	89a3      	ldrh	r3, [r4, #12]
 800e978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e97c:	81a3      	strh	r3, [r4, #12]
 800e97e:	f04f 30ff 	mov.w	r0, #4294967295
 800e982:	e7e9      	b.n	800e958 <__ssputs_r+0x8a>

0800e984 <_svfiprintf_r>:
 800e984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e988:	4698      	mov	r8, r3
 800e98a:	898b      	ldrh	r3, [r1, #12]
 800e98c:	061b      	lsls	r3, r3, #24
 800e98e:	b09d      	sub	sp, #116	@ 0x74
 800e990:	4607      	mov	r7, r0
 800e992:	460d      	mov	r5, r1
 800e994:	4614      	mov	r4, r2
 800e996:	d510      	bpl.n	800e9ba <_svfiprintf_r+0x36>
 800e998:	690b      	ldr	r3, [r1, #16]
 800e99a:	b973      	cbnz	r3, 800e9ba <_svfiprintf_r+0x36>
 800e99c:	2140      	movs	r1, #64	@ 0x40
 800e99e:	f7ff fa39 	bl	800de14 <_malloc_r>
 800e9a2:	6028      	str	r0, [r5, #0]
 800e9a4:	6128      	str	r0, [r5, #16]
 800e9a6:	b930      	cbnz	r0, 800e9b6 <_svfiprintf_r+0x32>
 800e9a8:	230c      	movs	r3, #12
 800e9aa:	603b      	str	r3, [r7, #0]
 800e9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b0:	b01d      	add	sp, #116	@ 0x74
 800e9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b6:	2340      	movs	r3, #64	@ 0x40
 800e9b8:	616b      	str	r3, [r5, #20]
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9be:	2320      	movs	r3, #32
 800e9c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e9c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9c8:	2330      	movs	r3, #48	@ 0x30
 800e9ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eb68 <_svfiprintf_r+0x1e4>
 800e9ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e9d2:	f04f 0901 	mov.w	r9, #1
 800e9d6:	4623      	mov	r3, r4
 800e9d8:	469a      	mov	sl, r3
 800e9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9de:	b10a      	cbz	r2, 800e9e4 <_svfiprintf_r+0x60>
 800e9e0:	2a25      	cmp	r2, #37	@ 0x25
 800e9e2:	d1f9      	bne.n	800e9d8 <_svfiprintf_r+0x54>
 800e9e4:	ebba 0b04 	subs.w	fp, sl, r4
 800e9e8:	d00b      	beq.n	800ea02 <_svfiprintf_r+0x7e>
 800e9ea:	465b      	mov	r3, fp
 800e9ec:	4622      	mov	r2, r4
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	4638      	mov	r0, r7
 800e9f2:	f7ff ff6c 	bl	800e8ce <__ssputs_r>
 800e9f6:	3001      	adds	r0, #1
 800e9f8:	f000 80a7 	beq.w	800eb4a <_svfiprintf_r+0x1c6>
 800e9fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9fe:	445a      	add	r2, fp
 800ea00:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea02:	f89a 3000 	ldrb.w	r3, [sl]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	f000 809f 	beq.w	800eb4a <_svfiprintf_r+0x1c6>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea16:	f10a 0a01 	add.w	sl, sl, #1
 800ea1a:	9304      	str	r3, [sp, #16]
 800ea1c:	9307      	str	r3, [sp, #28]
 800ea1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea22:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea24:	4654      	mov	r4, sl
 800ea26:	2205      	movs	r2, #5
 800ea28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea2c:	484e      	ldr	r0, [pc, #312]	@ (800eb68 <_svfiprintf_r+0x1e4>)
 800ea2e:	f7f1 fc07 	bl	8000240 <memchr>
 800ea32:	9a04      	ldr	r2, [sp, #16]
 800ea34:	b9d8      	cbnz	r0, 800ea6e <_svfiprintf_r+0xea>
 800ea36:	06d0      	lsls	r0, r2, #27
 800ea38:	bf44      	itt	mi
 800ea3a:	2320      	movmi	r3, #32
 800ea3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea40:	0711      	lsls	r1, r2, #28
 800ea42:	bf44      	itt	mi
 800ea44:	232b      	movmi	r3, #43	@ 0x2b
 800ea46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea50:	d015      	beq.n	800ea7e <_svfiprintf_r+0xfa>
 800ea52:	9a07      	ldr	r2, [sp, #28]
 800ea54:	4654      	mov	r4, sl
 800ea56:	2000      	movs	r0, #0
 800ea58:	f04f 0c0a 	mov.w	ip, #10
 800ea5c:	4621      	mov	r1, r4
 800ea5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea62:	3b30      	subs	r3, #48	@ 0x30
 800ea64:	2b09      	cmp	r3, #9
 800ea66:	d94b      	bls.n	800eb00 <_svfiprintf_r+0x17c>
 800ea68:	b1b0      	cbz	r0, 800ea98 <_svfiprintf_r+0x114>
 800ea6a:	9207      	str	r2, [sp, #28]
 800ea6c:	e014      	b.n	800ea98 <_svfiprintf_r+0x114>
 800ea6e:	eba0 0308 	sub.w	r3, r0, r8
 800ea72:	fa09 f303 	lsl.w	r3, r9, r3
 800ea76:	4313      	orrs	r3, r2
 800ea78:	9304      	str	r3, [sp, #16]
 800ea7a:	46a2      	mov	sl, r4
 800ea7c:	e7d2      	b.n	800ea24 <_svfiprintf_r+0xa0>
 800ea7e:	9b03      	ldr	r3, [sp, #12]
 800ea80:	1d19      	adds	r1, r3, #4
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	9103      	str	r1, [sp, #12]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	bfbb      	ittet	lt
 800ea8a:	425b      	neglt	r3, r3
 800ea8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ea90:	9307      	strge	r3, [sp, #28]
 800ea92:	9307      	strlt	r3, [sp, #28]
 800ea94:	bfb8      	it	lt
 800ea96:	9204      	strlt	r2, [sp, #16]
 800ea98:	7823      	ldrb	r3, [r4, #0]
 800ea9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea9c:	d10a      	bne.n	800eab4 <_svfiprintf_r+0x130>
 800ea9e:	7863      	ldrb	r3, [r4, #1]
 800eaa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800eaa2:	d132      	bne.n	800eb0a <_svfiprintf_r+0x186>
 800eaa4:	9b03      	ldr	r3, [sp, #12]
 800eaa6:	1d1a      	adds	r2, r3, #4
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	9203      	str	r2, [sp, #12]
 800eaac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eab0:	3402      	adds	r4, #2
 800eab2:	9305      	str	r3, [sp, #20]
 800eab4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eb78 <_svfiprintf_r+0x1f4>
 800eab8:	7821      	ldrb	r1, [r4, #0]
 800eaba:	2203      	movs	r2, #3
 800eabc:	4650      	mov	r0, sl
 800eabe:	f7f1 fbbf 	bl	8000240 <memchr>
 800eac2:	b138      	cbz	r0, 800ead4 <_svfiprintf_r+0x150>
 800eac4:	9b04      	ldr	r3, [sp, #16]
 800eac6:	eba0 000a 	sub.w	r0, r0, sl
 800eaca:	2240      	movs	r2, #64	@ 0x40
 800eacc:	4082      	lsls	r2, r0
 800eace:	4313      	orrs	r3, r2
 800ead0:	3401      	adds	r4, #1
 800ead2:	9304      	str	r3, [sp, #16]
 800ead4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ead8:	4824      	ldr	r0, [pc, #144]	@ (800eb6c <_svfiprintf_r+0x1e8>)
 800eada:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eade:	2206      	movs	r2, #6
 800eae0:	f7f1 fbae 	bl	8000240 <memchr>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	d036      	beq.n	800eb56 <_svfiprintf_r+0x1d2>
 800eae8:	4b21      	ldr	r3, [pc, #132]	@ (800eb70 <_svfiprintf_r+0x1ec>)
 800eaea:	bb1b      	cbnz	r3, 800eb34 <_svfiprintf_r+0x1b0>
 800eaec:	9b03      	ldr	r3, [sp, #12]
 800eaee:	3307      	adds	r3, #7
 800eaf0:	f023 0307 	bic.w	r3, r3, #7
 800eaf4:	3308      	adds	r3, #8
 800eaf6:	9303      	str	r3, [sp, #12]
 800eaf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eafa:	4433      	add	r3, r6
 800eafc:	9309      	str	r3, [sp, #36]	@ 0x24
 800eafe:	e76a      	b.n	800e9d6 <_svfiprintf_r+0x52>
 800eb00:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb04:	460c      	mov	r4, r1
 800eb06:	2001      	movs	r0, #1
 800eb08:	e7a8      	b.n	800ea5c <_svfiprintf_r+0xd8>
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	3401      	adds	r4, #1
 800eb0e:	9305      	str	r3, [sp, #20]
 800eb10:	4619      	mov	r1, r3
 800eb12:	f04f 0c0a 	mov.w	ip, #10
 800eb16:	4620      	mov	r0, r4
 800eb18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb1c:	3a30      	subs	r2, #48	@ 0x30
 800eb1e:	2a09      	cmp	r2, #9
 800eb20:	d903      	bls.n	800eb2a <_svfiprintf_r+0x1a6>
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d0c6      	beq.n	800eab4 <_svfiprintf_r+0x130>
 800eb26:	9105      	str	r1, [sp, #20]
 800eb28:	e7c4      	b.n	800eab4 <_svfiprintf_r+0x130>
 800eb2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb2e:	4604      	mov	r4, r0
 800eb30:	2301      	movs	r3, #1
 800eb32:	e7f0      	b.n	800eb16 <_svfiprintf_r+0x192>
 800eb34:	ab03      	add	r3, sp, #12
 800eb36:	9300      	str	r3, [sp, #0]
 800eb38:	462a      	mov	r2, r5
 800eb3a:	4b0e      	ldr	r3, [pc, #56]	@ (800eb74 <_svfiprintf_r+0x1f0>)
 800eb3c:	a904      	add	r1, sp, #16
 800eb3e:	4638      	mov	r0, r7
 800eb40:	f7fd f96a 	bl	800be18 <_printf_float>
 800eb44:	1c42      	adds	r2, r0, #1
 800eb46:	4606      	mov	r6, r0
 800eb48:	d1d6      	bne.n	800eaf8 <_svfiprintf_r+0x174>
 800eb4a:	89ab      	ldrh	r3, [r5, #12]
 800eb4c:	065b      	lsls	r3, r3, #25
 800eb4e:	f53f af2d 	bmi.w	800e9ac <_svfiprintf_r+0x28>
 800eb52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb54:	e72c      	b.n	800e9b0 <_svfiprintf_r+0x2c>
 800eb56:	ab03      	add	r3, sp, #12
 800eb58:	9300      	str	r3, [sp, #0]
 800eb5a:	462a      	mov	r2, r5
 800eb5c:	4b05      	ldr	r3, [pc, #20]	@ (800eb74 <_svfiprintf_r+0x1f0>)
 800eb5e:	a904      	add	r1, sp, #16
 800eb60:	4638      	mov	r0, r7
 800eb62:	f7fd fbf1 	bl	800c348 <_printf_i>
 800eb66:	e7ed      	b.n	800eb44 <_svfiprintf_r+0x1c0>
 800eb68:	0800f8e9 	.word	0x0800f8e9
 800eb6c:	0800f8f3 	.word	0x0800f8f3
 800eb70:	0800be19 	.word	0x0800be19
 800eb74:	0800e8cf 	.word	0x0800e8cf
 800eb78:	0800f8ef 	.word	0x0800f8ef

0800eb7c <__sflush_r>:
 800eb7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb84:	0716      	lsls	r6, r2, #28
 800eb86:	4605      	mov	r5, r0
 800eb88:	460c      	mov	r4, r1
 800eb8a:	d454      	bmi.n	800ec36 <__sflush_r+0xba>
 800eb8c:	684b      	ldr	r3, [r1, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	dc02      	bgt.n	800eb98 <__sflush_r+0x1c>
 800eb92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	dd48      	ble.n	800ec2a <__sflush_r+0xae>
 800eb98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb9a:	2e00      	cmp	r6, #0
 800eb9c:	d045      	beq.n	800ec2a <__sflush_r+0xae>
 800eb9e:	2300      	movs	r3, #0
 800eba0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eba4:	682f      	ldr	r7, [r5, #0]
 800eba6:	6a21      	ldr	r1, [r4, #32]
 800eba8:	602b      	str	r3, [r5, #0]
 800ebaa:	d030      	beq.n	800ec0e <__sflush_r+0x92>
 800ebac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ebae:	89a3      	ldrh	r3, [r4, #12]
 800ebb0:	0759      	lsls	r1, r3, #29
 800ebb2:	d505      	bpl.n	800ebc0 <__sflush_r+0x44>
 800ebb4:	6863      	ldr	r3, [r4, #4]
 800ebb6:	1ad2      	subs	r2, r2, r3
 800ebb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ebba:	b10b      	cbz	r3, 800ebc0 <__sflush_r+0x44>
 800ebbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ebbe:	1ad2      	subs	r2, r2, r3
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ebc4:	6a21      	ldr	r1, [r4, #32]
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	47b0      	blx	r6
 800ebca:	1c43      	adds	r3, r0, #1
 800ebcc:	89a3      	ldrh	r3, [r4, #12]
 800ebce:	d106      	bne.n	800ebde <__sflush_r+0x62>
 800ebd0:	6829      	ldr	r1, [r5, #0]
 800ebd2:	291d      	cmp	r1, #29
 800ebd4:	d82b      	bhi.n	800ec2e <__sflush_r+0xb2>
 800ebd6:	4a2a      	ldr	r2, [pc, #168]	@ (800ec80 <__sflush_r+0x104>)
 800ebd8:	410a      	asrs	r2, r1
 800ebda:	07d6      	lsls	r6, r2, #31
 800ebdc:	d427      	bmi.n	800ec2e <__sflush_r+0xb2>
 800ebde:	2200      	movs	r2, #0
 800ebe0:	6062      	str	r2, [r4, #4]
 800ebe2:	04d9      	lsls	r1, r3, #19
 800ebe4:	6922      	ldr	r2, [r4, #16]
 800ebe6:	6022      	str	r2, [r4, #0]
 800ebe8:	d504      	bpl.n	800ebf4 <__sflush_r+0x78>
 800ebea:	1c42      	adds	r2, r0, #1
 800ebec:	d101      	bne.n	800ebf2 <__sflush_r+0x76>
 800ebee:	682b      	ldr	r3, [r5, #0]
 800ebf0:	b903      	cbnz	r3, 800ebf4 <__sflush_r+0x78>
 800ebf2:	6560      	str	r0, [r4, #84]	@ 0x54
 800ebf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ebf6:	602f      	str	r7, [r5, #0]
 800ebf8:	b1b9      	cbz	r1, 800ec2a <__sflush_r+0xae>
 800ebfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ebfe:	4299      	cmp	r1, r3
 800ec00:	d002      	beq.n	800ec08 <__sflush_r+0x8c>
 800ec02:	4628      	mov	r0, r5
 800ec04:	f7fe fd58 	bl	800d6b8 <_free_r>
 800ec08:	2300      	movs	r3, #0
 800ec0a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec0c:	e00d      	b.n	800ec2a <__sflush_r+0xae>
 800ec0e:	2301      	movs	r3, #1
 800ec10:	4628      	mov	r0, r5
 800ec12:	47b0      	blx	r6
 800ec14:	4602      	mov	r2, r0
 800ec16:	1c50      	adds	r0, r2, #1
 800ec18:	d1c9      	bne.n	800ebae <__sflush_r+0x32>
 800ec1a:	682b      	ldr	r3, [r5, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d0c6      	beq.n	800ebae <__sflush_r+0x32>
 800ec20:	2b1d      	cmp	r3, #29
 800ec22:	d001      	beq.n	800ec28 <__sflush_r+0xac>
 800ec24:	2b16      	cmp	r3, #22
 800ec26:	d11e      	bne.n	800ec66 <__sflush_r+0xea>
 800ec28:	602f      	str	r7, [r5, #0]
 800ec2a:	2000      	movs	r0, #0
 800ec2c:	e022      	b.n	800ec74 <__sflush_r+0xf8>
 800ec2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec32:	b21b      	sxth	r3, r3
 800ec34:	e01b      	b.n	800ec6e <__sflush_r+0xf2>
 800ec36:	690f      	ldr	r7, [r1, #16]
 800ec38:	2f00      	cmp	r7, #0
 800ec3a:	d0f6      	beq.n	800ec2a <__sflush_r+0xae>
 800ec3c:	0793      	lsls	r3, r2, #30
 800ec3e:	680e      	ldr	r6, [r1, #0]
 800ec40:	bf08      	it	eq
 800ec42:	694b      	ldreq	r3, [r1, #20]
 800ec44:	600f      	str	r7, [r1, #0]
 800ec46:	bf18      	it	ne
 800ec48:	2300      	movne	r3, #0
 800ec4a:	eba6 0807 	sub.w	r8, r6, r7
 800ec4e:	608b      	str	r3, [r1, #8]
 800ec50:	f1b8 0f00 	cmp.w	r8, #0
 800ec54:	dde9      	ble.n	800ec2a <__sflush_r+0xae>
 800ec56:	6a21      	ldr	r1, [r4, #32]
 800ec58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ec5a:	4643      	mov	r3, r8
 800ec5c:	463a      	mov	r2, r7
 800ec5e:	4628      	mov	r0, r5
 800ec60:	47b0      	blx	r6
 800ec62:	2800      	cmp	r0, #0
 800ec64:	dc08      	bgt.n	800ec78 <__sflush_r+0xfc>
 800ec66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec6e:	81a3      	strh	r3, [r4, #12]
 800ec70:	f04f 30ff 	mov.w	r0, #4294967295
 800ec74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec78:	4407      	add	r7, r0
 800ec7a:	eba8 0800 	sub.w	r8, r8, r0
 800ec7e:	e7e7      	b.n	800ec50 <__sflush_r+0xd4>
 800ec80:	dfbffffe 	.word	0xdfbffffe

0800ec84 <_fflush_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	690b      	ldr	r3, [r1, #16]
 800ec88:	4605      	mov	r5, r0
 800ec8a:	460c      	mov	r4, r1
 800ec8c:	b913      	cbnz	r3, 800ec94 <_fflush_r+0x10>
 800ec8e:	2500      	movs	r5, #0
 800ec90:	4628      	mov	r0, r5
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	b118      	cbz	r0, 800ec9e <_fflush_r+0x1a>
 800ec96:	6a03      	ldr	r3, [r0, #32]
 800ec98:	b90b      	cbnz	r3, 800ec9e <_fflush_r+0x1a>
 800ec9a:	f7fd fd01 	bl	800c6a0 <__sinit>
 800ec9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d0f3      	beq.n	800ec8e <_fflush_r+0xa>
 800eca6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eca8:	07d0      	lsls	r0, r2, #31
 800ecaa:	d404      	bmi.n	800ecb6 <_fflush_r+0x32>
 800ecac:	0599      	lsls	r1, r3, #22
 800ecae:	d402      	bmi.n	800ecb6 <_fflush_r+0x32>
 800ecb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecb2:	f7fd fe7a 	bl	800c9aa <__retarget_lock_acquire_recursive>
 800ecb6:	4628      	mov	r0, r5
 800ecb8:	4621      	mov	r1, r4
 800ecba:	f7ff ff5f 	bl	800eb7c <__sflush_r>
 800ecbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ecc0:	07da      	lsls	r2, r3, #31
 800ecc2:	4605      	mov	r5, r0
 800ecc4:	d4e4      	bmi.n	800ec90 <_fflush_r+0xc>
 800ecc6:	89a3      	ldrh	r3, [r4, #12]
 800ecc8:	059b      	lsls	r3, r3, #22
 800ecca:	d4e1      	bmi.n	800ec90 <_fflush_r+0xc>
 800eccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecce:	f7fd fe6d 	bl	800c9ac <__retarget_lock_release_recursive>
 800ecd2:	e7dd      	b.n	800ec90 <_fflush_r+0xc>

0800ecd4 <fiprintf>:
 800ecd4:	b40e      	push	{r1, r2, r3}
 800ecd6:	b503      	push	{r0, r1, lr}
 800ecd8:	4601      	mov	r1, r0
 800ecda:	ab03      	add	r3, sp, #12
 800ecdc:	4805      	ldr	r0, [pc, #20]	@ (800ecf4 <fiprintf+0x20>)
 800ecde:	f853 2b04 	ldr.w	r2, [r3], #4
 800ece2:	6800      	ldr	r0, [r0, #0]
 800ece4:	9301      	str	r3, [sp, #4]
 800ece6:	f000 f8a3 	bl	800ee30 <_vfiprintf_r>
 800ecea:	b002      	add	sp, #8
 800ecec:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecf0:	b003      	add	sp, #12
 800ecf2:	4770      	bx	lr
 800ecf4:	20000188 	.word	0x20000188

0800ecf8 <memmove>:
 800ecf8:	4288      	cmp	r0, r1
 800ecfa:	b510      	push	{r4, lr}
 800ecfc:	eb01 0402 	add.w	r4, r1, r2
 800ed00:	d902      	bls.n	800ed08 <memmove+0x10>
 800ed02:	4284      	cmp	r4, r0
 800ed04:	4623      	mov	r3, r4
 800ed06:	d807      	bhi.n	800ed18 <memmove+0x20>
 800ed08:	1e43      	subs	r3, r0, #1
 800ed0a:	42a1      	cmp	r1, r4
 800ed0c:	d008      	beq.n	800ed20 <memmove+0x28>
 800ed0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed16:	e7f8      	b.n	800ed0a <memmove+0x12>
 800ed18:	4402      	add	r2, r0
 800ed1a:	4601      	mov	r1, r0
 800ed1c:	428a      	cmp	r2, r1
 800ed1e:	d100      	bne.n	800ed22 <memmove+0x2a>
 800ed20:	bd10      	pop	{r4, pc}
 800ed22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed2a:	e7f7      	b.n	800ed1c <memmove+0x24>

0800ed2c <_sbrk_r>:
 800ed2c:	b538      	push	{r3, r4, r5, lr}
 800ed2e:	4d06      	ldr	r5, [pc, #24]	@ (800ed48 <_sbrk_r+0x1c>)
 800ed30:	2300      	movs	r3, #0
 800ed32:	4604      	mov	r4, r0
 800ed34:	4608      	mov	r0, r1
 800ed36:	602b      	str	r3, [r5, #0]
 800ed38:	f7f4 fbf4 	bl	8003524 <_sbrk>
 800ed3c:	1c43      	adds	r3, r0, #1
 800ed3e:	d102      	bne.n	800ed46 <_sbrk_r+0x1a>
 800ed40:	682b      	ldr	r3, [r5, #0]
 800ed42:	b103      	cbz	r3, 800ed46 <_sbrk_r+0x1a>
 800ed44:	6023      	str	r3, [r4, #0]
 800ed46:	bd38      	pop	{r3, r4, r5, pc}
 800ed48:	20000954 	.word	0x20000954

0800ed4c <abort>:
 800ed4c:	b508      	push	{r3, lr}
 800ed4e:	2006      	movs	r0, #6
 800ed50:	f000 fa42 	bl	800f1d8 <raise>
 800ed54:	2001      	movs	r0, #1
 800ed56:	f7f4 fb6d 	bl	8003434 <_exit>

0800ed5a <_calloc_r>:
 800ed5a:	b570      	push	{r4, r5, r6, lr}
 800ed5c:	fba1 5402 	umull	r5, r4, r1, r2
 800ed60:	b93c      	cbnz	r4, 800ed72 <_calloc_r+0x18>
 800ed62:	4629      	mov	r1, r5
 800ed64:	f7ff f856 	bl	800de14 <_malloc_r>
 800ed68:	4606      	mov	r6, r0
 800ed6a:	b928      	cbnz	r0, 800ed78 <_calloc_r+0x1e>
 800ed6c:	2600      	movs	r6, #0
 800ed6e:	4630      	mov	r0, r6
 800ed70:	bd70      	pop	{r4, r5, r6, pc}
 800ed72:	220c      	movs	r2, #12
 800ed74:	6002      	str	r2, [r0, #0]
 800ed76:	e7f9      	b.n	800ed6c <_calloc_r+0x12>
 800ed78:	462a      	mov	r2, r5
 800ed7a:	4621      	mov	r1, r4
 800ed7c:	f7fd fd29 	bl	800c7d2 <memset>
 800ed80:	e7f5      	b.n	800ed6e <_calloc_r+0x14>

0800ed82 <_realloc_r>:
 800ed82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed86:	4680      	mov	r8, r0
 800ed88:	4615      	mov	r5, r2
 800ed8a:	460c      	mov	r4, r1
 800ed8c:	b921      	cbnz	r1, 800ed98 <_realloc_r+0x16>
 800ed8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed92:	4611      	mov	r1, r2
 800ed94:	f7ff b83e 	b.w	800de14 <_malloc_r>
 800ed98:	b92a      	cbnz	r2, 800eda6 <_realloc_r+0x24>
 800ed9a:	f7fe fc8d 	bl	800d6b8 <_free_r>
 800ed9e:	2400      	movs	r4, #0
 800eda0:	4620      	mov	r0, r4
 800eda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eda6:	f000 fa33 	bl	800f210 <_malloc_usable_size_r>
 800edaa:	4285      	cmp	r5, r0
 800edac:	4606      	mov	r6, r0
 800edae:	d802      	bhi.n	800edb6 <_realloc_r+0x34>
 800edb0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800edb4:	d8f4      	bhi.n	800eda0 <_realloc_r+0x1e>
 800edb6:	4629      	mov	r1, r5
 800edb8:	4640      	mov	r0, r8
 800edba:	f7ff f82b 	bl	800de14 <_malloc_r>
 800edbe:	4607      	mov	r7, r0
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d0ec      	beq.n	800ed9e <_realloc_r+0x1c>
 800edc4:	42b5      	cmp	r5, r6
 800edc6:	462a      	mov	r2, r5
 800edc8:	4621      	mov	r1, r4
 800edca:	bf28      	it	cs
 800edcc:	4632      	movcs	r2, r6
 800edce:	f7fd fdee 	bl	800c9ae <memcpy>
 800edd2:	4621      	mov	r1, r4
 800edd4:	4640      	mov	r0, r8
 800edd6:	f7fe fc6f 	bl	800d6b8 <_free_r>
 800edda:	463c      	mov	r4, r7
 800eddc:	e7e0      	b.n	800eda0 <_realloc_r+0x1e>

0800edde <__sfputc_r>:
 800edde:	6893      	ldr	r3, [r2, #8]
 800ede0:	3b01      	subs	r3, #1
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	b410      	push	{r4}
 800ede6:	6093      	str	r3, [r2, #8]
 800ede8:	da08      	bge.n	800edfc <__sfputc_r+0x1e>
 800edea:	6994      	ldr	r4, [r2, #24]
 800edec:	42a3      	cmp	r3, r4
 800edee:	db01      	blt.n	800edf4 <__sfputc_r+0x16>
 800edf0:	290a      	cmp	r1, #10
 800edf2:	d103      	bne.n	800edfc <__sfputc_r+0x1e>
 800edf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edf8:	f000 b932 	b.w	800f060 <__swbuf_r>
 800edfc:	6813      	ldr	r3, [r2, #0]
 800edfe:	1c58      	adds	r0, r3, #1
 800ee00:	6010      	str	r0, [r2, #0]
 800ee02:	7019      	strb	r1, [r3, #0]
 800ee04:	4608      	mov	r0, r1
 800ee06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <__sfputs_r>:
 800ee0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee0e:	4606      	mov	r6, r0
 800ee10:	460f      	mov	r7, r1
 800ee12:	4614      	mov	r4, r2
 800ee14:	18d5      	adds	r5, r2, r3
 800ee16:	42ac      	cmp	r4, r5
 800ee18:	d101      	bne.n	800ee1e <__sfputs_r+0x12>
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	e007      	b.n	800ee2e <__sfputs_r+0x22>
 800ee1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee22:	463a      	mov	r2, r7
 800ee24:	4630      	mov	r0, r6
 800ee26:	f7ff ffda 	bl	800edde <__sfputc_r>
 800ee2a:	1c43      	adds	r3, r0, #1
 800ee2c:	d1f3      	bne.n	800ee16 <__sfputs_r+0xa>
 800ee2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ee30 <_vfiprintf_r>:
 800ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	460d      	mov	r5, r1
 800ee36:	b09d      	sub	sp, #116	@ 0x74
 800ee38:	4614      	mov	r4, r2
 800ee3a:	4698      	mov	r8, r3
 800ee3c:	4606      	mov	r6, r0
 800ee3e:	b118      	cbz	r0, 800ee48 <_vfiprintf_r+0x18>
 800ee40:	6a03      	ldr	r3, [r0, #32]
 800ee42:	b90b      	cbnz	r3, 800ee48 <_vfiprintf_r+0x18>
 800ee44:	f7fd fc2c 	bl	800c6a0 <__sinit>
 800ee48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee4a:	07d9      	lsls	r1, r3, #31
 800ee4c:	d405      	bmi.n	800ee5a <_vfiprintf_r+0x2a>
 800ee4e:	89ab      	ldrh	r3, [r5, #12]
 800ee50:	059a      	lsls	r2, r3, #22
 800ee52:	d402      	bmi.n	800ee5a <_vfiprintf_r+0x2a>
 800ee54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee56:	f7fd fda8 	bl	800c9aa <__retarget_lock_acquire_recursive>
 800ee5a:	89ab      	ldrh	r3, [r5, #12]
 800ee5c:	071b      	lsls	r3, r3, #28
 800ee5e:	d501      	bpl.n	800ee64 <_vfiprintf_r+0x34>
 800ee60:	692b      	ldr	r3, [r5, #16]
 800ee62:	b99b      	cbnz	r3, 800ee8c <_vfiprintf_r+0x5c>
 800ee64:	4629      	mov	r1, r5
 800ee66:	4630      	mov	r0, r6
 800ee68:	f000 f938 	bl	800f0dc <__swsetup_r>
 800ee6c:	b170      	cbz	r0, 800ee8c <_vfiprintf_r+0x5c>
 800ee6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee70:	07dc      	lsls	r4, r3, #31
 800ee72:	d504      	bpl.n	800ee7e <_vfiprintf_r+0x4e>
 800ee74:	f04f 30ff 	mov.w	r0, #4294967295
 800ee78:	b01d      	add	sp, #116	@ 0x74
 800ee7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee7e:	89ab      	ldrh	r3, [r5, #12]
 800ee80:	0598      	lsls	r0, r3, #22
 800ee82:	d4f7      	bmi.n	800ee74 <_vfiprintf_r+0x44>
 800ee84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee86:	f7fd fd91 	bl	800c9ac <__retarget_lock_release_recursive>
 800ee8a:	e7f3      	b.n	800ee74 <_vfiprintf_r+0x44>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee90:	2320      	movs	r3, #32
 800ee92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee9a:	2330      	movs	r3, #48	@ 0x30
 800ee9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f04c <_vfiprintf_r+0x21c>
 800eea0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eea4:	f04f 0901 	mov.w	r9, #1
 800eea8:	4623      	mov	r3, r4
 800eeaa:	469a      	mov	sl, r3
 800eeac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eeb0:	b10a      	cbz	r2, 800eeb6 <_vfiprintf_r+0x86>
 800eeb2:	2a25      	cmp	r2, #37	@ 0x25
 800eeb4:	d1f9      	bne.n	800eeaa <_vfiprintf_r+0x7a>
 800eeb6:	ebba 0b04 	subs.w	fp, sl, r4
 800eeba:	d00b      	beq.n	800eed4 <_vfiprintf_r+0xa4>
 800eebc:	465b      	mov	r3, fp
 800eebe:	4622      	mov	r2, r4
 800eec0:	4629      	mov	r1, r5
 800eec2:	4630      	mov	r0, r6
 800eec4:	f7ff ffa2 	bl	800ee0c <__sfputs_r>
 800eec8:	3001      	adds	r0, #1
 800eeca:	f000 80a7 	beq.w	800f01c <_vfiprintf_r+0x1ec>
 800eece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eed0:	445a      	add	r2, fp
 800eed2:	9209      	str	r2, [sp, #36]	@ 0x24
 800eed4:	f89a 3000 	ldrb.w	r3, [sl]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	f000 809f 	beq.w	800f01c <_vfiprintf_r+0x1ec>
 800eede:	2300      	movs	r3, #0
 800eee0:	f04f 32ff 	mov.w	r2, #4294967295
 800eee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eee8:	f10a 0a01 	add.w	sl, sl, #1
 800eeec:	9304      	str	r3, [sp, #16]
 800eeee:	9307      	str	r3, [sp, #28]
 800eef0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eef4:	931a      	str	r3, [sp, #104]	@ 0x68
 800eef6:	4654      	mov	r4, sl
 800eef8:	2205      	movs	r2, #5
 800eefa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eefe:	4853      	ldr	r0, [pc, #332]	@ (800f04c <_vfiprintf_r+0x21c>)
 800ef00:	f7f1 f99e 	bl	8000240 <memchr>
 800ef04:	9a04      	ldr	r2, [sp, #16]
 800ef06:	b9d8      	cbnz	r0, 800ef40 <_vfiprintf_r+0x110>
 800ef08:	06d1      	lsls	r1, r2, #27
 800ef0a:	bf44      	itt	mi
 800ef0c:	2320      	movmi	r3, #32
 800ef0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef12:	0713      	lsls	r3, r2, #28
 800ef14:	bf44      	itt	mi
 800ef16:	232b      	movmi	r3, #43	@ 0x2b
 800ef18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ef20:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef22:	d015      	beq.n	800ef50 <_vfiprintf_r+0x120>
 800ef24:	9a07      	ldr	r2, [sp, #28]
 800ef26:	4654      	mov	r4, sl
 800ef28:	2000      	movs	r0, #0
 800ef2a:	f04f 0c0a 	mov.w	ip, #10
 800ef2e:	4621      	mov	r1, r4
 800ef30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef34:	3b30      	subs	r3, #48	@ 0x30
 800ef36:	2b09      	cmp	r3, #9
 800ef38:	d94b      	bls.n	800efd2 <_vfiprintf_r+0x1a2>
 800ef3a:	b1b0      	cbz	r0, 800ef6a <_vfiprintf_r+0x13a>
 800ef3c:	9207      	str	r2, [sp, #28]
 800ef3e:	e014      	b.n	800ef6a <_vfiprintf_r+0x13a>
 800ef40:	eba0 0308 	sub.w	r3, r0, r8
 800ef44:	fa09 f303 	lsl.w	r3, r9, r3
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	9304      	str	r3, [sp, #16]
 800ef4c:	46a2      	mov	sl, r4
 800ef4e:	e7d2      	b.n	800eef6 <_vfiprintf_r+0xc6>
 800ef50:	9b03      	ldr	r3, [sp, #12]
 800ef52:	1d19      	adds	r1, r3, #4
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	9103      	str	r1, [sp, #12]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	bfbb      	ittet	lt
 800ef5c:	425b      	neglt	r3, r3
 800ef5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ef62:	9307      	strge	r3, [sp, #28]
 800ef64:	9307      	strlt	r3, [sp, #28]
 800ef66:	bfb8      	it	lt
 800ef68:	9204      	strlt	r2, [sp, #16]
 800ef6a:	7823      	ldrb	r3, [r4, #0]
 800ef6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef6e:	d10a      	bne.n	800ef86 <_vfiprintf_r+0x156>
 800ef70:	7863      	ldrb	r3, [r4, #1]
 800ef72:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef74:	d132      	bne.n	800efdc <_vfiprintf_r+0x1ac>
 800ef76:	9b03      	ldr	r3, [sp, #12]
 800ef78:	1d1a      	adds	r2, r3, #4
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	9203      	str	r2, [sp, #12]
 800ef7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef82:	3402      	adds	r4, #2
 800ef84:	9305      	str	r3, [sp, #20]
 800ef86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f05c <_vfiprintf_r+0x22c>
 800ef8a:	7821      	ldrb	r1, [r4, #0]
 800ef8c:	2203      	movs	r2, #3
 800ef8e:	4650      	mov	r0, sl
 800ef90:	f7f1 f956 	bl	8000240 <memchr>
 800ef94:	b138      	cbz	r0, 800efa6 <_vfiprintf_r+0x176>
 800ef96:	9b04      	ldr	r3, [sp, #16]
 800ef98:	eba0 000a 	sub.w	r0, r0, sl
 800ef9c:	2240      	movs	r2, #64	@ 0x40
 800ef9e:	4082      	lsls	r2, r0
 800efa0:	4313      	orrs	r3, r2
 800efa2:	3401      	adds	r4, #1
 800efa4:	9304      	str	r3, [sp, #16]
 800efa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efaa:	4829      	ldr	r0, [pc, #164]	@ (800f050 <_vfiprintf_r+0x220>)
 800efac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800efb0:	2206      	movs	r2, #6
 800efb2:	f7f1 f945 	bl	8000240 <memchr>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d03f      	beq.n	800f03a <_vfiprintf_r+0x20a>
 800efba:	4b26      	ldr	r3, [pc, #152]	@ (800f054 <_vfiprintf_r+0x224>)
 800efbc:	bb1b      	cbnz	r3, 800f006 <_vfiprintf_r+0x1d6>
 800efbe:	9b03      	ldr	r3, [sp, #12]
 800efc0:	3307      	adds	r3, #7
 800efc2:	f023 0307 	bic.w	r3, r3, #7
 800efc6:	3308      	adds	r3, #8
 800efc8:	9303      	str	r3, [sp, #12]
 800efca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efcc:	443b      	add	r3, r7
 800efce:	9309      	str	r3, [sp, #36]	@ 0x24
 800efd0:	e76a      	b.n	800eea8 <_vfiprintf_r+0x78>
 800efd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800efd6:	460c      	mov	r4, r1
 800efd8:	2001      	movs	r0, #1
 800efda:	e7a8      	b.n	800ef2e <_vfiprintf_r+0xfe>
 800efdc:	2300      	movs	r3, #0
 800efde:	3401      	adds	r4, #1
 800efe0:	9305      	str	r3, [sp, #20]
 800efe2:	4619      	mov	r1, r3
 800efe4:	f04f 0c0a 	mov.w	ip, #10
 800efe8:	4620      	mov	r0, r4
 800efea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efee:	3a30      	subs	r2, #48	@ 0x30
 800eff0:	2a09      	cmp	r2, #9
 800eff2:	d903      	bls.n	800effc <_vfiprintf_r+0x1cc>
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d0c6      	beq.n	800ef86 <_vfiprintf_r+0x156>
 800eff8:	9105      	str	r1, [sp, #20]
 800effa:	e7c4      	b.n	800ef86 <_vfiprintf_r+0x156>
 800effc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f000:	4604      	mov	r4, r0
 800f002:	2301      	movs	r3, #1
 800f004:	e7f0      	b.n	800efe8 <_vfiprintf_r+0x1b8>
 800f006:	ab03      	add	r3, sp, #12
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	462a      	mov	r2, r5
 800f00c:	4b12      	ldr	r3, [pc, #72]	@ (800f058 <_vfiprintf_r+0x228>)
 800f00e:	a904      	add	r1, sp, #16
 800f010:	4630      	mov	r0, r6
 800f012:	f7fc ff01 	bl	800be18 <_printf_float>
 800f016:	4607      	mov	r7, r0
 800f018:	1c78      	adds	r0, r7, #1
 800f01a:	d1d6      	bne.n	800efca <_vfiprintf_r+0x19a>
 800f01c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f01e:	07d9      	lsls	r1, r3, #31
 800f020:	d405      	bmi.n	800f02e <_vfiprintf_r+0x1fe>
 800f022:	89ab      	ldrh	r3, [r5, #12]
 800f024:	059a      	lsls	r2, r3, #22
 800f026:	d402      	bmi.n	800f02e <_vfiprintf_r+0x1fe>
 800f028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f02a:	f7fd fcbf 	bl	800c9ac <__retarget_lock_release_recursive>
 800f02e:	89ab      	ldrh	r3, [r5, #12]
 800f030:	065b      	lsls	r3, r3, #25
 800f032:	f53f af1f 	bmi.w	800ee74 <_vfiprintf_r+0x44>
 800f036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f038:	e71e      	b.n	800ee78 <_vfiprintf_r+0x48>
 800f03a:	ab03      	add	r3, sp, #12
 800f03c:	9300      	str	r3, [sp, #0]
 800f03e:	462a      	mov	r2, r5
 800f040:	4b05      	ldr	r3, [pc, #20]	@ (800f058 <_vfiprintf_r+0x228>)
 800f042:	a904      	add	r1, sp, #16
 800f044:	4630      	mov	r0, r6
 800f046:	f7fd f97f 	bl	800c348 <_printf_i>
 800f04a:	e7e4      	b.n	800f016 <_vfiprintf_r+0x1e6>
 800f04c:	0800f8e9 	.word	0x0800f8e9
 800f050:	0800f8f3 	.word	0x0800f8f3
 800f054:	0800be19 	.word	0x0800be19
 800f058:	0800ee0d 	.word	0x0800ee0d
 800f05c:	0800f8ef 	.word	0x0800f8ef

0800f060 <__swbuf_r>:
 800f060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f062:	460e      	mov	r6, r1
 800f064:	4614      	mov	r4, r2
 800f066:	4605      	mov	r5, r0
 800f068:	b118      	cbz	r0, 800f072 <__swbuf_r+0x12>
 800f06a:	6a03      	ldr	r3, [r0, #32]
 800f06c:	b90b      	cbnz	r3, 800f072 <__swbuf_r+0x12>
 800f06e:	f7fd fb17 	bl	800c6a0 <__sinit>
 800f072:	69a3      	ldr	r3, [r4, #24]
 800f074:	60a3      	str	r3, [r4, #8]
 800f076:	89a3      	ldrh	r3, [r4, #12]
 800f078:	071a      	lsls	r2, r3, #28
 800f07a:	d501      	bpl.n	800f080 <__swbuf_r+0x20>
 800f07c:	6923      	ldr	r3, [r4, #16]
 800f07e:	b943      	cbnz	r3, 800f092 <__swbuf_r+0x32>
 800f080:	4621      	mov	r1, r4
 800f082:	4628      	mov	r0, r5
 800f084:	f000 f82a 	bl	800f0dc <__swsetup_r>
 800f088:	b118      	cbz	r0, 800f092 <__swbuf_r+0x32>
 800f08a:	f04f 37ff 	mov.w	r7, #4294967295
 800f08e:	4638      	mov	r0, r7
 800f090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f092:	6823      	ldr	r3, [r4, #0]
 800f094:	6922      	ldr	r2, [r4, #16]
 800f096:	1a98      	subs	r0, r3, r2
 800f098:	6963      	ldr	r3, [r4, #20]
 800f09a:	b2f6      	uxtb	r6, r6
 800f09c:	4283      	cmp	r3, r0
 800f09e:	4637      	mov	r7, r6
 800f0a0:	dc05      	bgt.n	800f0ae <__swbuf_r+0x4e>
 800f0a2:	4621      	mov	r1, r4
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	f7ff fded 	bl	800ec84 <_fflush_r>
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	d1ed      	bne.n	800f08a <__swbuf_r+0x2a>
 800f0ae:	68a3      	ldr	r3, [r4, #8]
 800f0b0:	3b01      	subs	r3, #1
 800f0b2:	60a3      	str	r3, [r4, #8]
 800f0b4:	6823      	ldr	r3, [r4, #0]
 800f0b6:	1c5a      	adds	r2, r3, #1
 800f0b8:	6022      	str	r2, [r4, #0]
 800f0ba:	701e      	strb	r6, [r3, #0]
 800f0bc:	6962      	ldr	r2, [r4, #20]
 800f0be:	1c43      	adds	r3, r0, #1
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d004      	beq.n	800f0ce <__swbuf_r+0x6e>
 800f0c4:	89a3      	ldrh	r3, [r4, #12]
 800f0c6:	07db      	lsls	r3, r3, #31
 800f0c8:	d5e1      	bpl.n	800f08e <__swbuf_r+0x2e>
 800f0ca:	2e0a      	cmp	r6, #10
 800f0cc:	d1df      	bne.n	800f08e <__swbuf_r+0x2e>
 800f0ce:	4621      	mov	r1, r4
 800f0d0:	4628      	mov	r0, r5
 800f0d2:	f7ff fdd7 	bl	800ec84 <_fflush_r>
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	d0d9      	beq.n	800f08e <__swbuf_r+0x2e>
 800f0da:	e7d6      	b.n	800f08a <__swbuf_r+0x2a>

0800f0dc <__swsetup_r>:
 800f0dc:	b538      	push	{r3, r4, r5, lr}
 800f0de:	4b29      	ldr	r3, [pc, #164]	@ (800f184 <__swsetup_r+0xa8>)
 800f0e0:	4605      	mov	r5, r0
 800f0e2:	6818      	ldr	r0, [r3, #0]
 800f0e4:	460c      	mov	r4, r1
 800f0e6:	b118      	cbz	r0, 800f0f0 <__swsetup_r+0x14>
 800f0e8:	6a03      	ldr	r3, [r0, #32]
 800f0ea:	b90b      	cbnz	r3, 800f0f0 <__swsetup_r+0x14>
 800f0ec:	f7fd fad8 	bl	800c6a0 <__sinit>
 800f0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0f4:	0719      	lsls	r1, r3, #28
 800f0f6:	d422      	bmi.n	800f13e <__swsetup_r+0x62>
 800f0f8:	06da      	lsls	r2, r3, #27
 800f0fa:	d407      	bmi.n	800f10c <__swsetup_r+0x30>
 800f0fc:	2209      	movs	r2, #9
 800f0fe:	602a      	str	r2, [r5, #0]
 800f100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f104:	81a3      	strh	r3, [r4, #12]
 800f106:	f04f 30ff 	mov.w	r0, #4294967295
 800f10a:	e033      	b.n	800f174 <__swsetup_r+0x98>
 800f10c:	0758      	lsls	r0, r3, #29
 800f10e:	d512      	bpl.n	800f136 <__swsetup_r+0x5a>
 800f110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f112:	b141      	cbz	r1, 800f126 <__swsetup_r+0x4a>
 800f114:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f118:	4299      	cmp	r1, r3
 800f11a:	d002      	beq.n	800f122 <__swsetup_r+0x46>
 800f11c:	4628      	mov	r0, r5
 800f11e:	f7fe facb 	bl	800d6b8 <_free_r>
 800f122:	2300      	movs	r3, #0
 800f124:	6363      	str	r3, [r4, #52]	@ 0x34
 800f126:	89a3      	ldrh	r3, [r4, #12]
 800f128:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f12c:	81a3      	strh	r3, [r4, #12]
 800f12e:	2300      	movs	r3, #0
 800f130:	6063      	str	r3, [r4, #4]
 800f132:	6923      	ldr	r3, [r4, #16]
 800f134:	6023      	str	r3, [r4, #0]
 800f136:	89a3      	ldrh	r3, [r4, #12]
 800f138:	f043 0308 	orr.w	r3, r3, #8
 800f13c:	81a3      	strh	r3, [r4, #12]
 800f13e:	6923      	ldr	r3, [r4, #16]
 800f140:	b94b      	cbnz	r3, 800f156 <__swsetup_r+0x7a>
 800f142:	89a3      	ldrh	r3, [r4, #12]
 800f144:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f14c:	d003      	beq.n	800f156 <__swsetup_r+0x7a>
 800f14e:	4621      	mov	r1, r4
 800f150:	4628      	mov	r0, r5
 800f152:	f000 f88b 	bl	800f26c <__smakebuf_r>
 800f156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f15a:	f013 0201 	ands.w	r2, r3, #1
 800f15e:	d00a      	beq.n	800f176 <__swsetup_r+0x9a>
 800f160:	2200      	movs	r2, #0
 800f162:	60a2      	str	r2, [r4, #8]
 800f164:	6962      	ldr	r2, [r4, #20]
 800f166:	4252      	negs	r2, r2
 800f168:	61a2      	str	r2, [r4, #24]
 800f16a:	6922      	ldr	r2, [r4, #16]
 800f16c:	b942      	cbnz	r2, 800f180 <__swsetup_r+0xa4>
 800f16e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f172:	d1c5      	bne.n	800f100 <__swsetup_r+0x24>
 800f174:	bd38      	pop	{r3, r4, r5, pc}
 800f176:	0799      	lsls	r1, r3, #30
 800f178:	bf58      	it	pl
 800f17a:	6962      	ldrpl	r2, [r4, #20]
 800f17c:	60a2      	str	r2, [r4, #8]
 800f17e:	e7f4      	b.n	800f16a <__swsetup_r+0x8e>
 800f180:	2000      	movs	r0, #0
 800f182:	e7f7      	b.n	800f174 <__swsetup_r+0x98>
 800f184:	20000188 	.word	0x20000188

0800f188 <_raise_r>:
 800f188:	291f      	cmp	r1, #31
 800f18a:	b538      	push	{r3, r4, r5, lr}
 800f18c:	4605      	mov	r5, r0
 800f18e:	460c      	mov	r4, r1
 800f190:	d904      	bls.n	800f19c <_raise_r+0x14>
 800f192:	2316      	movs	r3, #22
 800f194:	6003      	str	r3, [r0, #0]
 800f196:	f04f 30ff 	mov.w	r0, #4294967295
 800f19a:	bd38      	pop	{r3, r4, r5, pc}
 800f19c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f19e:	b112      	cbz	r2, 800f1a6 <_raise_r+0x1e>
 800f1a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1a4:	b94b      	cbnz	r3, 800f1ba <_raise_r+0x32>
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	f000 f830 	bl	800f20c <_getpid_r>
 800f1ac:	4622      	mov	r2, r4
 800f1ae:	4601      	mov	r1, r0
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1b6:	f000 b817 	b.w	800f1e8 <_kill_r>
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d00a      	beq.n	800f1d4 <_raise_r+0x4c>
 800f1be:	1c59      	adds	r1, r3, #1
 800f1c0:	d103      	bne.n	800f1ca <_raise_r+0x42>
 800f1c2:	2316      	movs	r3, #22
 800f1c4:	6003      	str	r3, [r0, #0]
 800f1c6:	2001      	movs	r0, #1
 800f1c8:	e7e7      	b.n	800f19a <_raise_r+0x12>
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	4798      	blx	r3
 800f1d4:	2000      	movs	r0, #0
 800f1d6:	e7e0      	b.n	800f19a <_raise_r+0x12>

0800f1d8 <raise>:
 800f1d8:	4b02      	ldr	r3, [pc, #8]	@ (800f1e4 <raise+0xc>)
 800f1da:	4601      	mov	r1, r0
 800f1dc:	6818      	ldr	r0, [r3, #0]
 800f1de:	f7ff bfd3 	b.w	800f188 <_raise_r>
 800f1e2:	bf00      	nop
 800f1e4:	20000188 	.word	0x20000188

0800f1e8 <_kill_r>:
 800f1e8:	b538      	push	{r3, r4, r5, lr}
 800f1ea:	4d07      	ldr	r5, [pc, #28]	@ (800f208 <_kill_r+0x20>)
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	4604      	mov	r4, r0
 800f1f0:	4608      	mov	r0, r1
 800f1f2:	4611      	mov	r1, r2
 800f1f4:	602b      	str	r3, [r5, #0]
 800f1f6:	f7f4 f90d 	bl	8003414 <_kill>
 800f1fa:	1c43      	adds	r3, r0, #1
 800f1fc:	d102      	bne.n	800f204 <_kill_r+0x1c>
 800f1fe:	682b      	ldr	r3, [r5, #0]
 800f200:	b103      	cbz	r3, 800f204 <_kill_r+0x1c>
 800f202:	6023      	str	r3, [r4, #0]
 800f204:	bd38      	pop	{r3, r4, r5, pc}
 800f206:	bf00      	nop
 800f208:	20000954 	.word	0x20000954

0800f20c <_getpid_r>:
 800f20c:	f7f4 b8fa 	b.w	8003404 <_getpid>

0800f210 <_malloc_usable_size_r>:
 800f210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f214:	1f18      	subs	r0, r3, #4
 800f216:	2b00      	cmp	r3, #0
 800f218:	bfbc      	itt	lt
 800f21a:	580b      	ldrlt	r3, [r1, r0]
 800f21c:	18c0      	addlt	r0, r0, r3
 800f21e:	4770      	bx	lr

0800f220 <__swhatbuf_r>:
 800f220:	b570      	push	{r4, r5, r6, lr}
 800f222:	460c      	mov	r4, r1
 800f224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f228:	2900      	cmp	r1, #0
 800f22a:	b096      	sub	sp, #88	@ 0x58
 800f22c:	4615      	mov	r5, r2
 800f22e:	461e      	mov	r6, r3
 800f230:	da0d      	bge.n	800f24e <__swhatbuf_r+0x2e>
 800f232:	89a3      	ldrh	r3, [r4, #12]
 800f234:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f238:	f04f 0100 	mov.w	r1, #0
 800f23c:	bf14      	ite	ne
 800f23e:	2340      	movne	r3, #64	@ 0x40
 800f240:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f244:	2000      	movs	r0, #0
 800f246:	6031      	str	r1, [r6, #0]
 800f248:	602b      	str	r3, [r5, #0]
 800f24a:	b016      	add	sp, #88	@ 0x58
 800f24c:	bd70      	pop	{r4, r5, r6, pc}
 800f24e:	466a      	mov	r2, sp
 800f250:	f000 f848 	bl	800f2e4 <_fstat_r>
 800f254:	2800      	cmp	r0, #0
 800f256:	dbec      	blt.n	800f232 <__swhatbuf_r+0x12>
 800f258:	9901      	ldr	r1, [sp, #4]
 800f25a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f25e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f262:	4259      	negs	r1, r3
 800f264:	4159      	adcs	r1, r3
 800f266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f26a:	e7eb      	b.n	800f244 <__swhatbuf_r+0x24>

0800f26c <__smakebuf_r>:
 800f26c:	898b      	ldrh	r3, [r1, #12]
 800f26e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f270:	079d      	lsls	r5, r3, #30
 800f272:	4606      	mov	r6, r0
 800f274:	460c      	mov	r4, r1
 800f276:	d507      	bpl.n	800f288 <__smakebuf_r+0x1c>
 800f278:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	6123      	str	r3, [r4, #16]
 800f280:	2301      	movs	r3, #1
 800f282:	6163      	str	r3, [r4, #20]
 800f284:	b003      	add	sp, #12
 800f286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f288:	ab01      	add	r3, sp, #4
 800f28a:	466a      	mov	r2, sp
 800f28c:	f7ff ffc8 	bl	800f220 <__swhatbuf_r>
 800f290:	9f00      	ldr	r7, [sp, #0]
 800f292:	4605      	mov	r5, r0
 800f294:	4639      	mov	r1, r7
 800f296:	4630      	mov	r0, r6
 800f298:	f7fe fdbc 	bl	800de14 <_malloc_r>
 800f29c:	b948      	cbnz	r0, 800f2b2 <__smakebuf_r+0x46>
 800f29e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2a2:	059a      	lsls	r2, r3, #22
 800f2a4:	d4ee      	bmi.n	800f284 <__smakebuf_r+0x18>
 800f2a6:	f023 0303 	bic.w	r3, r3, #3
 800f2aa:	f043 0302 	orr.w	r3, r3, #2
 800f2ae:	81a3      	strh	r3, [r4, #12]
 800f2b0:	e7e2      	b.n	800f278 <__smakebuf_r+0xc>
 800f2b2:	89a3      	ldrh	r3, [r4, #12]
 800f2b4:	6020      	str	r0, [r4, #0]
 800f2b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2ba:	81a3      	strh	r3, [r4, #12]
 800f2bc:	9b01      	ldr	r3, [sp, #4]
 800f2be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f2c2:	b15b      	cbz	r3, 800f2dc <__smakebuf_r+0x70>
 800f2c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f000 f81d 	bl	800f308 <_isatty_r>
 800f2ce:	b128      	cbz	r0, 800f2dc <__smakebuf_r+0x70>
 800f2d0:	89a3      	ldrh	r3, [r4, #12]
 800f2d2:	f023 0303 	bic.w	r3, r3, #3
 800f2d6:	f043 0301 	orr.w	r3, r3, #1
 800f2da:	81a3      	strh	r3, [r4, #12]
 800f2dc:	89a3      	ldrh	r3, [r4, #12]
 800f2de:	431d      	orrs	r5, r3
 800f2e0:	81a5      	strh	r5, [r4, #12]
 800f2e2:	e7cf      	b.n	800f284 <__smakebuf_r+0x18>

0800f2e4 <_fstat_r>:
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	4d07      	ldr	r5, [pc, #28]	@ (800f304 <_fstat_r+0x20>)
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	4608      	mov	r0, r1
 800f2ee:	4611      	mov	r1, r2
 800f2f0:	602b      	str	r3, [r5, #0]
 800f2f2:	f7f4 f8ef 	bl	80034d4 <_fstat>
 800f2f6:	1c43      	adds	r3, r0, #1
 800f2f8:	d102      	bne.n	800f300 <_fstat_r+0x1c>
 800f2fa:	682b      	ldr	r3, [r5, #0]
 800f2fc:	b103      	cbz	r3, 800f300 <_fstat_r+0x1c>
 800f2fe:	6023      	str	r3, [r4, #0]
 800f300:	bd38      	pop	{r3, r4, r5, pc}
 800f302:	bf00      	nop
 800f304:	20000954 	.word	0x20000954

0800f308 <_isatty_r>:
 800f308:	b538      	push	{r3, r4, r5, lr}
 800f30a:	4d06      	ldr	r5, [pc, #24]	@ (800f324 <_isatty_r+0x1c>)
 800f30c:	2300      	movs	r3, #0
 800f30e:	4604      	mov	r4, r0
 800f310:	4608      	mov	r0, r1
 800f312:	602b      	str	r3, [r5, #0]
 800f314:	f7f4 f8ee 	bl	80034f4 <_isatty>
 800f318:	1c43      	adds	r3, r0, #1
 800f31a:	d102      	bne.n	800f322 <_isatty_r+0x1a>
 800f31c:	682b      	ldr	r3, [r5, #0]
 800f31e:	b103      	cbz	r3, 800f322 <_isatty_r+0x1a>
 800f320:	6023      	str	r3, [r4, #0]
 800f322:	bd38      	pop	{r3, r4, r5, pc}
 800f324:	20000954 	.word	0x20000954

0800f328 <_init>:
 800f328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f32a:	bf00      	nop
 800f32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f32e:	bc08      	pop	{r3}
 800f330:	469e      	mov	lr, r3
 800f332:	4770      	bx	lr

0800f334 <_fini>:
 800f334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f336:	bf00      	nop
 800f338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f33a:	bc08      	pop	{r3}
 800f33c:	469e      	mov	lr, r3
 800f33e:	4770      	bx	lr
