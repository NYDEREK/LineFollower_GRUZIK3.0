
GRUZIK3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f188  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800f368  0800f368  0001f368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f998  0800f998  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f998  0800f998  0001f998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9a0  0800f9a0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9a0  0800f9a0  0001f9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9a4  0800f9a4  0001f9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f9a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  200001e4  0800fb8c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d0  0800fb8c  000207d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002332c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043c8  00000000  00000000  00043540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc8  00000000  00000000  00047908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ae0  00000000  00000000  000495d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056d8  00000000  00000000  0004b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000246d7  00000000  00000000  00050788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119e6b  00000000  00000000  00074e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018ecca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fc8  00000000  00000000  0018ed1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f350 	.word	0x0800f350

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800f350 	.word	0x0800f350

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9aa 	b.w	8001064 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <RB_Write>:
 */
#include "main.h"
#include "RingBuffer.h"

RB_Status RB_Write(RingBuffer_t *Buf, uint8_t value)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	425a      	negs	r2, r3
 800107c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001080:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001084:	bf58      	it	pl
 8001086:	4253      	negpl	r3, r2
 8001088:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buf->Tail)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	b29a      	uxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	885b      	ldrh	r3, [r3, #2]
 8001092:	429a      	cmp	r2, r3
 8001094:	d101      	bne.n	800109a <RB_Write+0x32>
	{
		return RB_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00b      	b.n	80010b2 <RB_Write+0x4a>
	}

	Buf->Buffer[Buf->Head] = value;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	78fa      	ldrb	r2, [r7, #3]
 80010a6:	711a      	strb	r2, [r3, #4]

	Buf->Head = HeadTmp;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <RB_Read>:

RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *value)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
	if(Buf->Head == Buf->Tail)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	885b      	ldrh	r3, [r3, #2]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d101      	bne.n	80010d8 <RB_Read+0x1a>
	{
		return RB_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e015      	b.n	8001104 <RB_Read+0x46>
	}

	*value = Buf->Buffer[Buf->Tail];
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	885b      	ldrh	r3, [r3, #2]
 80010dc:	461a      	mov	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	791a      	ldrb	r2, [r3, #4]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	701a      	strb	r2, [r3, #0]

	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	885b      	ldrh	r3, [r3, #2]
 80010ec:	3301      	adds	r3, #1
 80010ee:	425a      	negs	r2, r3
 80010f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010f4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010f8:	bf58      	it	pl
 80010fa:	4253      	negpl	r3, r2
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <Parser_TakeLine>:
#include "SimpleParser.h"
#include "Line_Follower.h"
char My_Name[32] = "GRUZIK3.0";

void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *ReceivedData)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	uint8_t Tmp;
	uint8_t i = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
	do
	{
		RB_Read(Buf, &Tmp);
 800111e:	f107 030e 	add.w	r3, r7, #14
 8001122:	4619      	mov	r1, r3
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffca 	bl	80010be <RB_Read>

		if(Tmp == ENDLINE)
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	2b0a      	cmp	r3, #10
 800112e:	d105      	bne.n	800113c <Parser_TakeLine+0x2c>
		{
			ReceivedData[i] = 0;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	4413      	add	r3, r2
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e004      	b.n	8001146 <Parser_TakeLine+0x36>

		}

		else
		{
			ReceivedData[i] = Tmp;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	4413      	add	r3, r2
 8001142:	7bba      	ldrb	r2, [r7, #14]
 8001144:	701a      	strb	r2, [r3, #0]
		}
		i++;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	3301      	adds	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]

	} while(Tmp != ENDLINE);
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	2b0a      	cmp	r3, #10
 8001150:	d1e5      	bne.n	800111e <Parser_TakeLine+0xe>

}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <kp_change>:

static void kp_change(LineFollower_t *LF)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001164:	490f      	ldr	r1, [pc, #60]	; (80011a4 <kp_change+0x48>)
 8001166:	2000      	movs	r0, #0
 8001168:	f00b f970 	bl	800c44c <strtok>
 800116c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d011      	beq.n	800119a <kp_change+0x3e>
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff f85c 	bl	8000234 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	2b1f      	cmp	r3, #31
 8001180:	d80b      	bhi.n	800119a <kp_change+0x3e>
	{
		LF->Kp = atof(ParsePointer);
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f009 fe74 	bl	800ae70 <atof>
 8001188:	ec53 2b10 	vmov	r2, r3, d0
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fd62 	bl	8000c58 <__aeabi_d2f>
 8001194:	4602      	mov	r2, r0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	601a      	str	r2, [r3, #0]
	}

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	0800f368 	.word	0x0800f368

080011a8 <kd_change>:
static void kd_change(LineFollower_t *LF)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80011b0:	490f      	ldr	r1, [pc, #60]	; (80011f0 <kd_change+0x48>)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f00b f94a 	bl	800c44c <strtok>
 80011b8:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d011      	beq.n	80011e6 <kd_change+0x3e>
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff f836 	bl	8000234 <strlen>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b1f      	cmp	r3, #31
 80011cc:	d80b      	bhi.n	80011e6 <kd_change+0x3e>
	{
		LF->Kd = atof(ParsePointer);
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f009 fe4e 	bl	800ae70 <atof>
 80011d4:	ec53 2b10 	vmov	r2, r3, d0
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fd3c 	bl	8000c58 <__aeabi_d2f>
 80011e0:	4602      	mov	r2, r0
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	605a      	str	r2, [r3, #4]
	}
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	0800f368 	.word	0x0800f368

080011f4 <Base_speed_change>:
static void Base_speed_change(LineFollower_t *LF)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80011fc:	4915      	ldr	r1, [pc, #84]	; (8001254 <Base_speed_change+0x60>)
 80011fe:	2000      	movs	r0, #0
 8001200:	f00b f924 	bl	800c44c <strtok>
 8001204:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01d      	beq.n	800124a <Base_speed_change+0x56>
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff f810 	bl	8000234 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	2b1f      	cmp	r3, #31
 8001218:	d817      	bhi.n	800124a <Base_speed_change+0x56>
	{
		LF->Base_speed_R = atof(ParsePointer);
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f009 fe28 	bl	800ae70 <atof>
 8001220:	ec53 2b10 	vmov	r2, r3, d0
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fcce 	bl	8000bc8 <__aeabi_d2iz>
 800122c:	4602      	mov	r2, r0
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	609a      	str	r2, [r3, #8]
		LF->Base_speed_L = atof(ParsePointer);
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f009 fe1c 	bl	800ae70 <atof>
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fcc2 	bl	8000bc8 <__aeabi_d2iz>
 8001244:	4602      	mov	r2, r0
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60da      	str	r2, [r3, #12]
	}
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	0800f368 	.word	0x0800f368

08001258 <Max_speed_change>:

static void Max_speed_change(LineFollower_t *LF)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001260:	4915      	ldr	r1, [pc, #84]	; (80012b8 <Max_speed_change+0x60>)
 8001262:	2000      	movs	r0, #0
 8001264:	f00b f8f2 	bl	800c44c <strtok>
 8001268:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d01d      	beq.n	80012ae <Max_speed_change+0x56>
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f7fe ffde 	bl	8000234 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	2b1f      	cmp	r3, #31
 800127c:	d817      	bhi.n	80012ae <Max_speed_change+0x56>
	{
		LF->Max_speed_R = atof(ParsePointer);
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f009 fdf6 	bl	800ae70 <atof>
 8001284:	ec53 2b10 	vmov	r2, r3, d0
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fc9c 	bl	8000bc8 <__aeabi_d2iz>
 8001290:	4602      	mov	r2, r0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	611a      	str	r2, [r3, #16]
		LF->Max_speed_L = atof(ParsePointer);
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f009 fdea 	bl	800ae70 <atof>
 800129c:	ec53 2b10 	vmov	r2, r3, d0
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff fc90 	bl	8000bc8 <__aeabi_d2iz>
 80012a8:	4602      	mov	r2, r0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	615a      	str	r2, [r3, #20]
	}
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	0800f368 	.word	0x0800f368

080012bc <Sharp_bend_speed_right_change>:
static void Sharp_bend_speed_right_change(LineFollower_t *LF)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80012c4:	490f      	ldr	r1, [pc, #60]	; (8001304 <Sharp_bend_speed_right_change+0x48>)
 80012c6:	2000      	movs	r0, #0
 80012c8:	f00b f8c0 	bl	800c44c <strtok>
 80012cc:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d011      	beq.n	80012fa <Sharp_bend_speed_right_change+0x3e>
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7fe ffac 	bl	8000234 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b1f      	cmp	r3, #31
 80012e0:	d80b      	bhi.n	80012fa <Sharp_bend_speed_right_change+0x3e>
	{
	LF->Sharp_bend_speed_right = atof(ParsePointer);
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f009 fdc4 	bl	800ae70 <atof>
 80012e8:	ec53 2b10 	vmov	r2, r3, d0
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fc6a 	bl	8000bc8 <__aeabi_d2iz>
 80012f4:	4602      	mov	r2, r0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	619a      	str	r2, [r3, #24]
	}
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	0800f368 	.word	0x0800f368

08001308 <Sharp_bend_speed_left_change>:
static void Sharp_bend_speed_left_change(LineFollower_t *LF)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001310:	490f      	ldr	r1, [pc, #60]	; (8001350 <Sharp_bend_speed_left_change+0x48>)
 8001312:	2000      	movs	r0, #0
 8001314:	f00b f89a 	bl	800c44c <strtok>
 8001318:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d011      	beq.n	8001346 <Sharp_bend_speed_left_change+0x3e>
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7fe ff86 	bl	8000234 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	2b1f      	cmp	r3, #31
 800132c:	d80b      	bhi.n	8001346 <Sharp_bend_speed_left_change+0x3e>
	{
	LF->Sharp_bend_speed_left = atof(ParsePointer);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f009 fd9e 	bl	800ae70 <atof>
 8001334:	ec53 2b10 	vmov	r2, r3, d0
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fc44 	bl	8000bc8 <__aeabi_d2iz>
 8001340:	4602      	mov	r2, r0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	61da      	str	r2, [r3, #28]
	}
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	0800f368 	.word	0x0800f368

08001354 <Bend_speed_right_change>:
static void Bend_speed_right_change(LineFollower_t *LF)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 800135c:	490f      	ldr	r1, [pc, #60]	; (800139c <Bend_speed_right_change+0x48>)
 800135e:	2000      	movs	r0, #0
 8001360:	f00b f874 	bl	800c44c <strtok>
 8001364:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d011      	beq.n	8001392 <Bend_speed_right_change+0x3e>
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f7fe ff60 	bl	8000234 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	2b1f      	cmp	r3, #31
 8001378:	d80b      	bhi.n	8001392 <Bend_speed_right_change+0x3e>
	{
	LF->Bend_speed_right = atof(ParsePointer);
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f009 fd78 	bl	800ae70 <atof>
 8001380:	ec53 2b10 	vmov	r2, r3, d0
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff fc1e 	bl	8000bc8 <__aeabi_d2iz>
 800138c:	4602      	mov	r2, r0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	621a      	str	r2, [r3, #32]
	}
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	0800f368 	.word	0x0800f368

080013a0 <Bend_speed_left_change>:
static void Bend_speed_left_change(LineFollower_t *LF)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80013a8:	490f      	ldr	r1, [pc, #60]	; (80013e8 <Bend_speed_left_change+0x48>)
 80013aa:	2000      	movs	r0, #0
 80013ac:	f00b f84e 	bl	800c44c <strtok>
 80013b0:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d011      	beq.n	80013de <Bend_speed_left_change+0x3e>
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7fe ff3a 	bl	8000234 <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b1f      	cmp	r3, #31
 80013c4:	d80b      	bhi.n	80013de <Bend_speed_left_change+0x3e>
	{
	LF->Bend_speed_left = atof(ParsePointer);
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f009 fd52 	bl	800ae70 <atof>
 80013cc:	ec53 2b10 	vmov	r2, r3, d0
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f7ff fbf8 	bl	8000bc8 <__aeabi_d2iz>
 80013d8:	4602      	mov	r2, r0
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	0800f368 	.word	0x0800f368
 80013ec:	00000000 	.word	0x00000000

080013f0 <App_Controll>:
static void App_Controll(char RxData, LineFollower_t *LineFollower)
{
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b092      	sub	sp, #72	; 0x48
 80013f4:	af02      	add	r7, sp, #8
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
	/*Stop robot*/
	if(RxData == 'N')
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b4e      	cmp	r3, #78	; 0x4e
 8001400:	d14a      	bne.n	8001498 <App_Controll+0xa8>
	{
		uint8_t buffer[48];
		/*Stop GRUZIK2.0 and turn off the LED*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2140      	movs	r1, #64	; 0x40
 8001406:	485a      	ldr	r0, [pc, #360]	; (8001570 <App_Controll+0x180>)
 8001408:	f004 fd3c 	bl	8005e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2120      	movs	r1, #32
 8001410:	4857      	ldr	r0, [pc, #348]	; (8001570 <App_Controll+0x180>)
 8001412:	f004 fd37 	bl	8005e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2140      	movs	r1, #64	; 0x40
 800141a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141e:	f004 fd31 	bl	8005e84 <HAL_GPIO_WritePin>

		/*Send battery voltage*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f8b4 	bl	8000594 <__aeabi_i2d>
 800142c:	a348      	add	r3, pc, #288	; (adr r3, 8001550 <App_Controll+0x160>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff f919 	bl	8000668 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	a346      	add	r3, pc, #280	; (adr r3, 8001558 <App_Controll+0x168>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7ff fa3a 	bl	80008bc <__aeabi_ddiv>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff fc02 	bl	8000c58 <__aeabi_d2f>
 8001454:	4602      	mov	r2, r0
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800145e:	461c      	mov	r4, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f8a7 	bl	80005b8 <__aeabi_f2d>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	f107 000c 	add.w	r0, r7, #12
 8001472:	e9cd 2300 	strd	r2, r3, [sp]
 8001476:	4622      	mov	r2, r4
 8001478:	493e      	ldr	r1, [pc, #248]	; (8001574 <App_Controll+0x184>)
 800147a:	f00a f999 	bl	800b7b0 <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4618      	mov	r0, r3
 8001484:	f7fe fed6 	bl	8000234 <strlen>
 8001488:	4603      	mov	r3, r0
 800148a:	b29a      	uxth	r2, r3
 800148c:	f107 010c 	add.w	r1, r7, #12
 8001490:	2364      	movs	r3, #100	; 0x64
 8001492:	4839      	ldr	r0, [pc, #228]	; (8001578 <App_Controll+0x188>)
 8001494:	f007 fc10 	bl	8008cb8 <HAL_UART_Transmit>
	}
	/*Start robot*/
	if (RxData == 'Y')
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b59      	cmp	r3, #89	; 0x59
 800149c:	f040 8105 	bne.w	80016aa <App_Controll+0x2ba>
		/*Proportional to battery percentage boost for motors
		 * to keep roughly same speed as with full battery*/
		float battery_percentage;
		uint8_t buffer[48];
		//Calculate battery percentage based on battery voltage
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f875 	bl	8000594 <__aeabi_i2d>
 80014aa:	a329      	add	r3, pc, #164	; (adr r3, 8001550 <App_Controll+0x160>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8da 	bl	8000668 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	a326      	add	r3, pc, #152	; (adr r3, 8001558 <App_Controll+0x168>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f9fb 	bl	80008bc <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fbc3 	bl	8000c58 <__aeabi_d2f>
 80014d2:	4602      	mov	r2, r0
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28

		//Full battery voltage in working line follower is about 8.24V
		battery_percentage = (LineFollower->battery_voltage / 8.24) * 100;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f86b 	bl	80005b8 <__aeabi_f2d>
 80014e2:	a31f      	add	r3, pc, #124	; (adr r3, 8001560 <App_Controll+0x170>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f9e8 	bl	80008bc <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <App_Controll+0x18c>)
 80014fa:	f7ff f8b5 	bl	8000668 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fba7 	bl	8000c58 <__aeabi_d2f>
 800150a:	4603      	mov	r3, r0
 800150c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/*To don't damage 2s LiPo battery Line follower can't start with battery below 7.2V*/
		if (LineFollower->battery_voltage < 7.2)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f850 	bl	80005b8 <__aeabi_f2d>
 8001518:	a313      	add	r3, pc, #76	; (adr r3, 8001568 <App_Controll+0x178>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7ff fb15 	bl	8000b4c <__aeabi_dcmplt>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d02f      	beq.n	8001588 <App_Controll+0x198>
		{
			sprintf((char*)buffer, "! Low Battery !\r\n");
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4914      	ldr	r1, [pc, #80]	; (8001580 <App_Controll+0x190>)
 800152e:	4618      	mov	r0, r3
 8001530:	f00a f93e 	bl	800b7b0 <siprintf>
			HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe7b 	bl	8000234 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 010c 	add.w	r1, r7, #12
 8001546:	2364      	movs	r3, #100	; 0x64
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <App_Controll+0x188>)
 800154a:	f007 fbb5 	bl	8008cb8 <HAL_UART_Transmit>
 800154e:	e32a      	b.n	8001ba6 <App_Controll+0x7b6>
 8001550:	9999999a 	.word	0x9999999a
 8001554:	40209999 	.word	0x40209999
 8001558:	00000000 	.word	0x00000000
 800155c:	40adee00 	.word	0x40adee00
 8001560:	47ae147b 	.word	0x47ae147b
 8001564:	40207ae1 	.word	0x40207ae1
 8001568:	cccccccd 	.word	0xcccccccd
 800156c:	401ccccc 	.word	0x401ccccc
 8001570:	48000800 	.word	0x48000800
 8001574:	0800f36c 	.word	0x0800f36c
 8001578:	20000728 	.word	0x20000728
 800157c:	40590000 	.word	0x40590000
 8001580:	0800f39c 	.word	0x0800f39c
 8001584:	42c80000 	.word	0x42c80000
			return;
		}
		/*Motor speed*/
		LineFollower->Speed_level = ((100 - battery_percentage + 100) / 100) - LineFollower->Speed_offset;
 8001588:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8001584 <App_Controll+0x194>
 800158c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001594:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8001584 <App_Controll+0x194>
 8001598:	ee77 7a87 	vadd.f32	s15, s15, s14
 800159c:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8001584 <App_Controll+0x194>
 80015a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		if(LineFollower->Speed_level < 1)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80015ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c6:	d503      	bpl.n	80015d0 <App_Controll+0x1e0>
		{
			LineFollower->Speed_level = 1;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015ce:	631a      	str	r2, [r3, #48]	; 0x30
		}

		/*Send battery data*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffdd 	bl	8000594 <__aeabi_i2d>
 80015da:	a3b8      	add	r3, pc, #736	; (adr r3, 80018bc <App_Controll+0x4cc>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7ff f842 	bl	8000668 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	a3b5      	add	r3, pc, #724	; (adr r3, 80018c4 <App_Controll+0x4d4>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7ff f963 	bl	80008bc <__aeabi_ddiv>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f7ff fb2b 	bl	8000c58 <__aeabi_d2f>
 8001602:	4602      	mov	r2, r0
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800160c:	461c      	mov	r4, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ffd0 	bl	80005b8 <__aeabi_f2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	f107 000c 	add.w	r0, r7, #12
 8001620:	e9cd 2300 	strd	r2, r3, [sp]
 8001624:	4622      	mov	r2, r4
 8001626:	499c      	ldr	r1, [pc, #624]	; (8001898 <App_Controll+0x4a8>)
 8001628:	f00a f8c2 	bl	800b7b0 <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fdff 	bl	8000234 <strlen>
 8001636:	4603      	mov	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	f107 010c 	add.w	r1, r7, #12
 800163e:	2364      	movs	r3, #100	; 0x64
 8001640:	4896      	ldr	r0, [pc, #600]	; (800189c <App_Controll+0x4ac>)
 8001642:	f007 fb39 	bl	8008cb8 <HAL_UART_Transmit>


		sprintf((char*)buffer, "Percentage = %0.2f \r\n Speed_level = %0.2f \r\n", battery_percentage, LineFollower->Speed_level);
 8001646:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001648:	f7fe ffb6 	bl	80005b8 <__aeabi_f2d>
 800164c:	4604      	mov	r4, r0
 800164e:	460d      	mov	r5, r1
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ffaf 	bl	80005b8 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	f107 000c 	add.w	r0, r7, #12
 8001662:	e9cd 2300 	strd	r2, r3, [sp]
 8001666:	4622      	mov	r2, r4
 8001668:	462b      	mov	r3, r5
 800166a:	498d      	ldr	r1, [pc, #564]	; (80018a0 <App_Controll+0x4b0>)
 800166c:	f00a f8a0 	bl	800b7b0 <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe fddd 	bl	8000234 <strlen>
 800167a:	4603      	mov	r3, r0
 800167c:	b29a      	uxth	r2, r3
 800167e:	f107 010c 	add.w	r1, r7, #12
 8001682:	2364      	movs	r3, #100	; 0x64
 8001684:	4885      	ldr	r0, [pc, #532]	; (800189c <App_Controll+0x4ac>)
 8001686:	f007 fb17 	bl	8008cb8 <HAL_UART_Transmit>

		/*Stop LineFollower and turn on the LED*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800168a:	2201      	movs	r2, #1
 800168c:	2140      	movs	r1, #64	; 0x40
 800168e:	4885      	ldr	r0, [pc, #532]	; (80018a4 <App_Controll+0x4b4>)
 8001690:	f004 fbf8 	bl	8005e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001694:	2201      	movs	r2, #1
 8001696:	2120      	movs	r1, #32
 8001698:	4882      	ldr	r0, [pc, #520]	; (80018a4 <App_Controll+0x4b4>)
 800169a:	f004 fbf3 	bl	8005e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	2140      	movs	r1, #64	; 0x40
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a6:	f004 fbed 	bl	8005e84 <HAL_GPIO_WritePin>
	}
	/*LOW mode*/
	if(RxData == 'a')
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b61      	cmp	r3, #97	; 0x61
 80016ae:	d11f      	bne.n	80016f0 <App_Controll+0x300>
	{
		LineFollower->Base_speed_R = 100;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2264      	movs	r2, #100	; 0x64
 80016b4:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 100;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2264      	movs	r2, #100	; 0x64
 80016ba:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 100;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2264      	movs	r2, #100	; 0x64
 80016c0:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 100;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2264      	movs	r2, #100	; 0x64
 80016c6:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 80016ce:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 95;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	225f      	movs	r2, #95	; 0x5f
 80016d4:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -25;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f06f 0218 	mvn.w	r2, #24
 80016dc:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 100;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2264      	movs	r2, #100	; 0x64
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.01;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4a70      	ldr	r2, [pc, #448]	; (80018a8 <App_Controll+0x4b8>)
 80016e8:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.08;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	4a6f      	ldr	r2, [pc, #444]	; (80018ac <App_Controll+0x4bc>)
 80016ee:	605a      	str	r2, [r3, #4]
	}
	/*LOW+ mode*/
	if(RxData == 'd')
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d11f      	bne.n	8001736 <App_Controll+0x346>
	{
		LineFollower->Base_speed_R = 100;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2264      	movs	r2, #100	; 0x64
 80016fa:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 100;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2264      	movs	r2, #100	; 0x64
 8001700:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 150;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2296      	movs	r2, #150	; 0x96
 8001706:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 150;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2296      	movs	r2, #150	; 0x96
 800170c:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -30;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f06f 021d 	mvn.w	r2, #29
 8001714:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 100;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	2264      	movs	r2, #100	; 0x64
 800171a:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -40;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8001722:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 80;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	2250      	movs	r2, #80	; 0x50
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	4a60      	ldr	r2, [pc, #384]	; (80018b0 <App_Controll+0x4c0>)
 800172e:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.08;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	4a5e      	ldr	r2, [pc, #376]	; (80018ac <App_Controll+0x4bc>)
 8001734:	605a      	str	r2, [r3, #4]
	}
	/*Medium mode*/
	if(RxData == 'b')
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b62      	cmp	r3, #98	; 0x62
 800173a:	d120      	bne.n	800177e <App_Controll+0x38e>
	{
		LineFollower->Base_speed_R = 115;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	2273      	movs	r2, #115	; 0x73
 8001740:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 115;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2273      	movs	r2, #115	; 0x73
 8001746:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 115;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2273      	movs	r2, #115	; 0x73
 800174c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 115;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2273      	movs	r2, #115	; 0x73
 8001752:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800175a:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 85;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2255      	movs	r2, #85	; 0x55
 8001760:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001768:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	226e      	movs	r2, #110	; 0x6e
 800176e:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4a4f      	ldr	r2, [pc, #316]	; (80018b0 <App_Controll+0x4c0>)
 8001774:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.25;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800177c:	605a      	str	r2, [r3, #4]
	}
	/*Medium+ mode*/
	if(RxData == 'e')
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b65      	cmp	r3, #101	; 0x65
 8001782:	d11f      	bne.n	80017c4 <App_Controll+0x3d4>
	{
		LineFollower->Base_speed_R = 120;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2278      	movs	r2, #120	; 0x78
 8001788:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 120;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2278      	movs	r2, #120	; 0x78
 800178e:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 120;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2278      	movs	r2, #120	; 0x78
 8001794:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 120;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2278      	movs	r2, #120	; 0x78
 800179a:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80017a2:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	225c      	movs	r2, #92	; 0x5c
 80017a8:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80017b0:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;//110
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	221e      	movs	r2, #30
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4a3d      	ldr	r2, [pc, #244]	; (80018b0 <App_Controll+0x4c0>)
 80017bc:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.2;//0.25
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	4a3c      	ldr	r2, [pc, #240]	; (80018b4 <App_Controll+0x4c4>)
 80017c2:	605a      	str	r2, [r3, #4]
	}
	/*HIGH mode*/
	if(RxData == 'c')
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b63      	cmp	r3, #99	; 0x63
 80017c8:	d11f      	bne.n	800180a <App_Controll+0x41a>
	{
		LineFollower->Base_speed_R = 125;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	227d      	movs	r2, #125	; 0x7d
 80017ce:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 125;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	227d      	movs	r2, #125	; 0x7d
 80017d4:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 130;//125
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2282      	movs	r2, #130	; 0x82
 80017da:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 130;//125
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2282      	movs	r2, #130	; 0x82
 80017e0:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80017e8:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92; //88
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	225c      	movs	r2, #92	; 0x5c
 80017ee:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80017f6:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	221e      	movs	r2, #30
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	4a2b      	ldr	r2, [pc, #172]	; (80018b0 <App_Controll+0x4c0>)
 8001802:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.175;//0.2
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	4a2c      	ldr	r2, [pc, #176]	; (80018b8 <App_Controll+0x4c8>)
 8001808:	605a      	str	r2, [r3, #4]
	}
	/*HIGH+ mode*/ /*For now it's just HIGH*/
	if(RxData == 'f')
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b66      	cmp	r3, #102	; 0x66
 800180e:	d11f      	bne.n	8001850 <App_Controll+0x460>
	{
		LineFollower->Base_speed_R = 130;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2282      	movs	r2, #130	; 0x82
 8001814:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 130;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2282      	movs	r2, #130	; 0x82
 800181a:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 130;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2282      	movs	r2, #130	; 0x82
 8001820:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 130;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2282      	movs	r2, #130	; 0x82
 8001826:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800182e:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92; //88
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	225c      	movs	r2, #92	; 0x5c
 8001834:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f06f 0231 	mvn.w	r2, #49	; 0x31
 800183c:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	221e      	movs	r2, #30
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <App_Controll+0x4c0>)
 8001848:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.175;//0.2
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <App_Controll+0x4c8>)
 800184e:	605a      	str	r2, [r3, #4]
	}
	/*TRUBO mode*/
	if(RxData == 'i')
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	2b69      	cmp	r3, #105	; 0x69
 8001854:	d13a      	bne.n	80018cc <App_Controll+0x4dc>
	{
		LineFollower->Base_speed_R = 135;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2287      	movs	r2, #135	; 0x87
 800185a:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 135;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2287      	movs	r2, #135	; 0x87
 8001860:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 135;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2287      	movs	r2, #135	; 0x87
 8001866:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 135;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2287      	movs	r2, #135	; 0x87
 800186c:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60; //-65
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001874:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2246      	movs	r2, #70	; 0x46
 800187a:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001882:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	226e      	movs	r2, #110	; 0x6e
 8001888:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <App_Controll+0x4c0>)
 800188e:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.2;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <App_Controll+0x4c4>)
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	e019      	b.n	80018cc <App_Controll+0x4dc>
 8001898:	0800f36c 	.word	0x0800f36c
 800189c:	20000728 	.word	0x20000728
 80018a0:	0800f3b0 	.word	0x0800f3b0
 80018a4:	48000800 	.word	0x48000800
 80018a8:	3c23d70a 	.word	0x3c23d70a
 80018ac:	3da3d70a 	.word	0x3da3d70a
 80018b0:	3c75c28f 	.word	0x3c75c28f
 80018b4:	3e4ccccd 	.word	0x3e4ccccd
 80018b8:	3e333333 	.word	0x3e333333
 80018bc:	9999999a 	.word	0x9999999a
 80018c0:	40209999 	.word	0x40209999
 80018c4:	00000000 	.word	0x00000000
 80018c8:	40adee00 	.word	0x40adee00
	}
	/*TRUBO+ mode*/
	if(RxData == 'j')
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2b6a      	cmp	r3, #106	; 0x6a
 80018d0:	d11f      	bne.n	8001912 <App_Controll+0x522>
	{
	   LineFollower->Base_speed_R = 140;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	228c      	movs	r2, #140	; 0x8c
 80018d6:	609a      	str	r2, [r3, #8]
	   LineFollower->Base_speed_L = 140;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	228c      	movs	r2, #140	; 0x8c
 80018dc:	60da      	str	r2, [r3, #12]
	   LineFollower->Max_speed_L = 140;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	228c      	movs	r2, #140	; 0x8c
 80018e2:	615a      	str	r2, [r3, #20]
	   LineFollower->Max_speed_R = 140;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	228c      	movs	r2, #140	; 0x8c
 80018e8:	611a      	str	r2, [r3, #16]
	   LineFollower->Sharp_bend_speed_right = -60;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 80018f0:	619a      	str	r2, [r3, #24]
	   LineFollower->Sharp_bend_speed_left = 70;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2246      	movs	r2, #70	; 0x46
 80018f6:	61da      	str	r2, [r3, #28]
	   LineFollower->Bend_speed_right = -60;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 80018fe:	621a      	str	r2, [r3, #32]
	   LineFollower->Bend_speed_left = 110;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	226e      	movs	r2, #110	; 0x6e
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
	   LineFollower->Kp = 0.015;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	4a8e      	ldr	r2, [pc, #568]	; (8001b44 <App_Controll+0x754>)
 800190a:	601a      	str	r2, [r3, #0]
	   LineFollower->Kd = 0.2;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4a8e      	ldr	r2, [pc, #568]	; (8001b48 <App_Controll+0x758>)
 8001910:	605a      	str	r2, [r3, #4]
	}
	/*ULTRA mode*/
	if(RxData == 'k')
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b6b      	cmp	r3, #107	; 0x6b
 8001916:	d11f      	bne.n	8001958 <App_Controll+0x568>
	{
		LineFollower->Base_speed_R = 145;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2291      	movs	r2, #145	; 0x91
 800191c:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 145;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2291      	movs	r2, #145	; 0x91
 8001922:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 145;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2291      	movs	r2, #145	; 0x91
 8001928:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 145;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2291      	movs	r2, #145	; 0x91
 800192e:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60;//-70
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001936:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;//88
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2246      	movs	r2, #70	; 0x46
 800193c:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001944:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	226e      	movs	r2, #110	; 0x6e
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4a7d      	ldr	r2, [pc, #500]	; (8001b44 <App_Controll+0x754>)
 8001950:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.22;     //Jeśli sie gubi wylaturje itd mozna zwiększyć jesli sobie radzi to mozna obniżyc i zwiększyc płynność
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	4a7d      	ldr	r2, [pc, #500]	; (8001b4c <App_Controll+0x75c>)
 8001956:	605a      	str	r2, [r3, #4]
	 }
	 /*ULTRA+ mode*/
	 if(RxData == 'l')
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b6c      	cmp	r3, #108	; 0x6c
 800195c:	d11f      	bne.n	800199e <App_Controll+0x5ae>
	 {
		LineFollower->Base_speed_R = 150;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2296      	movs	r2, #150	; 0x96
 8001962:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 150;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2296      	movs	r2, #150	; 0x96
 8001968:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 150;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2296      	movs	r2, #150	; 0x96
 800196e:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 150;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2296      	movs	r2, #150	; 0x96
 8001974:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -55;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f06f 0236 	mvn.w	r2, #54	; 0x36
 800197c:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 75;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	224b      	movs	r2, #75	; 0x4b
 8001982:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 800198a:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 120;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2278      	movs	r2, #120	; 0x78
 8001990:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	4a6b      	ldr	r2, [pc, #428]	; (8001b44 <App_Controll+0x754>)
 8001996:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.23;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4a6d      	ldr	r2, [pc, #436]	; (8001b50 <App_Controll+0x760>)
 800199c:	605a      	str	r2, [r3, #4]
	  }
	  /*EXTREME mode*/
	  if(RxData == 'm')
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b6d      	cmp	r3, #109	; 0x6d
 80019a2:	d11f      	bne.n	80019e4 <App_Controll+0x5f4>
	  {
		 LineFollower->Base_speed_R = 155;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	229b      	movs	r2, #155	; 0x9b
 80019a8:	609a      	str	r2, [r3, #8]
		 LineFollower->Base_speed_L = 155;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	229b      	movs	r2, #155	; 0x9b
 80019ae:	60da      	str	r2, [r3, #12]
		 LineFollower->Max_speed_L = 155;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	229b      	movs	r2, #155	; 0x9b
 80019b4:	615a      	str	r2, [r3, #20]
		 LineFollower->Max_speed_R = 155;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	229b      	movs	r2, #155	; 0x9b
 80019ba:	611a      	str	r2, [r3, #16]
		 LineFollower->Sharp_bend_speed_right = -70;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80019c2:	619a      	str	r2, [r3, #24]
		 LineFollower->Sharp_bend_speed_left = 85;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2255      	movs	r2, #85	; 0x55
 80019c8:	61da      	str	r2, [r3, #28]
		 LineFollower->Bend_speed_right = -50;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80019d0:	621a      	str	r2, [r3, #32]
		 LineFollower->Bend_speed_left = 30;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	221e      	movs	r2, #30
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24
		 LineFollower->Kp = 0.015;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4a5a      	ldr	r2, [pc, #360]	; (8001b44 <App_Controll+0x754>)
 80019dc:	601a      	str	r2, [r3, #0]
		 LineFollower->Kd = 0.265;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	4a5c      	ldr	r2, [pc, #368]	; (8001b54 <App_Controll+0x764>)
 80019e2:	605a      	str	r2, [r3, #4]
	  }

 	  /*EXTREME+ mode*/
 	  if(RxData == 'n')
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b6e      	cmp	r3, #110	; 0x6e
 80019e8:	d11f      	bne.n	8001a2a <App_Controll+0x63a>
 	  {
 	    LineFollower->Base_speed_R = 160;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	22a0      	movs	r2, #160	; 0xa0
 80019ee:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 160;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	22a0      	movs	r2, #160	; 0xa0
 80019f4:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 160;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	22a0      	movs	r2, #160	; 0xa0
 80019fa:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 160;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	22a0      	movs	r2, #160	; 0xa0
 8001a00:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -70;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8001a08:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 85;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2255      	movs	r2, #85	; 0x55
 8001a0e:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001a16:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 30;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	221e      	movs	r2, #30
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.015;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	4a48      	ldr	r2, [pc, #288]	; (8001b44 <App_Controll+0x754>)
 8001a22:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 0.265;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4a4b      	ldr	r2, [pc, #300]	; (8001b54 <App_Controll+0x764>)
 8001a28:	605a      	str	r2, [r3, #4]
 	  }
 	  /*SPECIAL mode*/
 	  if(RxData == 'h')
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2b68      	cmp	r3, #104	; 0x68
 8001a2e:	d11f      	bne.n	8001a70 <App_Controll+0x680>
 	  {
 	    LineFollower->Base_speed_R = 135;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2287      	movs	r2, #135	; 0x87
 8001a34:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 135;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2287      	movs	r2, #135	; 0x87
 8001a3a:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 135;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2287      	movs	r2, #135	; 0x87
 8001a40:	615a      	str	r2, [r3, #20]
 	    LineFollower->Max_speed_R = 135;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2287      	movs	r2, #135	; 0x87
 8001a46:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -66;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f06f 0241 	mvn.w	r2, #65	; 0x41
 8001a4e:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 92;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	225c      	movs	r2, #92	; 0x5c
 8001a54:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001a5c:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 30;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	221e      	movs	r2, #30
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.015;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4a37      	ldr	r2, [pc, #220]	; (8001b44 <App_Controll+0x754>)
 8001a68:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 0.2;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	4a36      	ldr	r2, [pc, #216]	; (8001b48 <App_Controll+0x758>)
 8001a6e:	605a      	str	r2, [r3, #4]
 	  }
 	  /*RA-1-final-slower*/
 	  if(RxData == 'o')
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2b6f      	cmp	r3, #111	; 0x6f
 8001a74:	d11f      	bne.n	8001ab6 <App_Controll+0x6c6>
 	  {
 	    LineFollower->Base_speed_R = 143;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	228f      	movs	r2, #143	; 0x8f
 8001a7a:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 143;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	228f      	movs	r2, #143	; 0x8f
 8001a80:	60da      	str	r2, [r3, #12]
 	   	LineFollower->Max_speed_L = 182;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	22b6      	movs	r2, #182	; 0xb6
 8001a86:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 182;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	22b6      	movs	r2, #182	; 0xb6
 8001a8c:	611a      	str	r2, [r3, #16]
 	  	LineFollower->Sharp_bend_speed_right = -76;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001a94:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 90;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	225a      	movs	r2, #90	; 0x5a
 8001a9a:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001aa2:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2264      	movs	r2, #100	; 0x64
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.02;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	4a2a      	ldr	r2, [pc, #168]	; (8001b58 <App_Controll+0x768>)
 8001aae:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	4a2a      	ldr	r2, [pc, #168]	; (8001b5c <App_Controll+0x76c>)
 8001ab4:	605a      	str	r2, [r3, #4]
 	   }
 	   /*RA-2-eliminations-faster*/
 	   if(RxData == 'u')
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	2b75      	cmp	r3, #117	; 0x75
 8001aba:	d11f      	bne.n	8001afc <App_Controll+0x70c>
 	   {
 	     LineFollower->Base_speed_R = 153;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2299      	movs	r2, #153	; 0x99
 8001ac0:	609a      	str	r2, [r3, #8]
 	     LineFollower->Base_speed_L = 153;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2299      	movs	r2, #153	; 0x99
 8001ac6:	60da      	str	r2, [r3, #12]
 	     LineFollower->Max_speed_L = 187;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	22bb      	movs	r2, #187	; 0xbb
 8001acc:	615a      	str	r2, [r3, #20]
 	   	 LineFollower->Max_speed_R = 187;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	22bb      	movs	r2, #187	; 0xbb
 8001ad2:	611a      	str	r2, [r3, #16]
 	  	 LineFollower->Sharp_bend_speed_right = -76;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001ada:	619a      	str	r2, [r3, #24]
 	 	 LineFollower->Sharp_bend_speed_left = 90;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	225a      	movs	r2, #90	; 0x5a
 8001ae0:	61da      	str	r2, [r3, #28]
 	 	 LineFollower->Bend_speed_right = -50;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001ae8:	621a      	str	r2, [r3, #32]
 	 	 LineFollower->Bend_speed_left = 100;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2264      	movs	r2, #100	; 0x64
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
 	 	 LineFollower->Kp = 0.02;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <App_Controll+0x768>)
 8001af4:	601a      	str	r2, [r3, #0]
 	 	 LineFollower->Kd = 350;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <App_Controll+0x76c>)
 8001afa:	605a      	str	r2, [r3, #4]
 	   }
 	  /*Gruzik2.1 Robo Comp 2024r 1*/
 	  if(RxData == 'p')
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b70      	cmp	r3, #112	; 0x70
 8001b00:	d12e      	bne.n	8001b60 <App_Controll+0x770>
 	  {
 		 LineFollower->Base_speed_R = 143;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	228f      	movs	r2, #143	; 0x8f
 8001b06:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 143;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	228f      	movs	r2, #143	; 0x8f
 8001b0c:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 182;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	22b6      	movs	r2, #182	; 0xb6
 8001b12:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 182;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	22b6      	movs	r2, #182	; 0xb6
 8001b18:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001b20:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	225a      	movs	r2, #90	; 0x5a
 8001b26:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8001b2e:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	226e      	movs	r2, #110	; 0x6e
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
 		 LineFollower->Kp = 0.02;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <App_Controll+0x768>)
 8001b3a:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <App_Controll+0x76c>)
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	e00d      	b.n	8001b60 <App_Controll+0x770>
 8001b44:	3c75c28f 	.word	0x3c75c28f
 8001b48:	3e4ccccd 	.word	0x3e4ccccd
 8001b4c:	3e6147ae 	.word	0x3e6147ae
 8001b50:	3e6b851f 	.word	0x3e6b851f
 8001b54:	3e87ae14 	.word	0x3e87ae14
 8001b58:	3ca3d70a 	.word	0x3ca3d70a
 8001b5c:	43af0000 	.word	0x43af0000
 	  }
 	  /*Gruzik2.1 Robo Comp 2024 2*/
 	  if(RxData == 'r')
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b72      	cmp	r3, #114	; 0x72
 8001b64:	d11f      	bne.n	8001ba6 <App_Controll+0x7b6>
 	  {
 		 LineFollower->Base_speed_R = 153;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2299      	movs	r2, #153	; 0x99
 8001b6a:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 153;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2299      	movs	r2, #153	; 0x99
 8001b70:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 187;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	22bb      	movs	r2, #187	; 0xbb
 8001b76:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 187;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	22bb      	movs	r2, #187	; 0xbb
 8001b7c:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001b84:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	225a      	movs	r2, #90	; 0x5a
 8001b8a:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8001b92:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	226e      	movs	r2, #110	; 0x6e
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
 		 LineFollower->Kp = 0.02;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	4a03      	ldr	r2, [pc, #12]	; (8001bac <App_Controll+0x7bc>)
 8001b9e:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4a03      	ldr	r2, [pc, #12]	; (8001bb0 <App_Controll+0x7c0>)
 8001ba4:	605a      	str	r2, [r3, #4]
 	   }
}
 8001ba6:	3740      	adds	r7, #64	; 0x40
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bdb0      	pop	{r4, r5, r7, pc}
 8001bac:	3ca3d70a 	.word	0x3ca3d70a
 8001bb0:	43af0000 	.word	0x43af0000

08001bb4 <Mode_change>:

static void Mode_change(LineFollower_t *LF)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <Mode_change+0x3c>)
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f00a fc44 	bl	800c44c <strtok>
 8001bc4:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 2)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <Mode_change+0x32>
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f7fe fb30 	bl	8000234 <strlen>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d805      	bhi.n	8001be6 <Mode_change+0x32>
	{
		App_Controll(ParsePointer[0], LF);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fc05 	bl	80013f0 <App_Controll>
	}
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	0800f368 	.word	0x0800f368

08001bf4 <Parser_Parse>:
void Parser_Parse(uint8_t *ReceivedData, LineFollower_t *LineFollower)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
	char *ParsePointer = strtok((char*)ReceivedData, "=");
 8001bfe:	4935      	ldr	r1, [pc, #212]	; (8001cd4 <Parser_Parse+0xe0>)
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f00a fc23 	bl	800c44c <strtok>
 8001c06:	60f8      	str	r0, [r7, #12]

	if(!strcmp("Kp",ParsePointer))
 8001c08:	68f9      	ldr	r1, [r7, #12]
 8001c0a:	4833      	ldr	r0, [pc, #204]	; (8001cd8 <Parser_Parse+0xe4>)
 8001c0c:	f7fe fb08 	bl	8000220 <strcmp>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d103      	bne.n	8001c1e <Parser_Parse+0x2a>
	{
		kp_change(LineFollower);
 8001c16:	6838      	ldr	r0, [r7, #0]
 8001c18:	f7ff faa0 	bl	800115c <kp_change>
	}
	else if(!strcmp("Mode",ParsePointer))
	{
		Mode_change(LineFollower);
	}
}
 8001c1c:	e056      	b.n	8001ccc <Parser_Parse+0xd8>
	else if(!strcmp("Kd",ParsePointer))
 8001c1e:	68f9      	ldr	r1, [r7, #12]
 8001c20:	482e      	ldr	r0, [pc, #184]	; (8001cdc <Parser_Parse+0xe8>)
 8001c22:	f7fe fafd 	bl	8000220 <strcmp>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d103      	bne.n	8001c34 <Parser_Parse+0x40>
		kd_change(LineFollower);
 8001c2c:	6838      	ldr	r0, [r7, #0]
 8001c2e:	f7ff fabb 	bl	80011a8 <kd_change>
}
 8001c32:	e04b      	b.n	8001ccc <Parser_Parse+0xd8>
	else if(!strcmp("Base_speed",ParsePointer))
 8001c34:	68f9      	ldr	r1, [r7, #12]
 8001c36:	482a      	ldr	r0, [pc, #168]	; (8001ce0 <Parser_Parse+0xec>)
 8001c38:	f7fe faf2 	bl	8000220 <strcmp>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d103      	bne.n	8001c4a <Parser_Parse+0x56>
		Base_speed_change(LineFollower);
 8001c42:	6838      	ldr	r0, [r7, #0]
 8001c44:	f7ff fad6 	bl	80011f4 <Base_speed_change>
}
 8001c48:	e040      	b.n	8001ccc <Parser_Parse+0xd8>
	else if(!strcmp("Max_speed",ParsePointer))
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	4825      	ldr	r0, [pc, #148]	; (8001ce4 <Parser_Parse+0xf0>)
 8001c4e:	f7fe fae7 	bl	8000220 <strcmp>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d103      	bne.n	8001c60 <Parser_Parse+0x6c>
		Max_speed_change(LineFollower);
 8001c58:	6838      	ldr	r0, [r7, #0]
 8001c5a:	f7ff fafd 	bl	8001258 <Max_speed_change>
}
 8001c5e:	e035      	b.n	8001ccc <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_right",ParsePointer))
 8001c60:	68f9      	ldr	r1, [r7, #12]
 8001c62:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <Parser_Parse+0xf4>)
 8001c64:	f7fe fadc 	bl	8000220 <strcmp>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <Parser_Parse+0x82>
		Sharp_bend_speed_right_change(LineFollower);
 8001c6e:	6838      	ldr	r0, [r7, #0]
 8001c70:	f7ff fb24 	bl	80012bc <Sharp_bend_speed_right_change>
}
 8001c74:	e02a      	b.n	8001ccc <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_left",ParsePointer))
 8001c76:	68f9      	ldr	r1, [r7, #12]
 8001c78:	481c      	ldr	r0, [pc, #112]	; (8001cec <Parser_Parse+0xf8>)
 8001c7a:	f7fe fad1 	bl	8000220 <strcmp>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d103      	bne.n	8001c8c <Parser_Parse+0x98>
		Sharp_bend_speed_left_change(LineFollower);
 8001c84:	6838      	ldr	r0, [r7, #0]
 8001c86:	f7ff fb3f 	bl	8001308 <Sharp_bend_speed_left_change>
}
 8001c8a:	e01f      	b.n	8001ccc <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_right",ParsePointer))
 8001c8c:	68f9      	ldr	r1, [r7, #12]
 8001c8e:	4818      	ldr	r0, [pc, #96]	; (8001cf0 <Parser_Parse+0xfc>)
 8001c90:	f7fe fac6 	bl	8000220 <strcmp>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <Parser_Parse+0xae>
		Bend_speed_right_change(LineFollower);
 8001c9a:	6838      	ldr	r0, [r7, #0]
 8001c9c:	f7ff fb5a 	bl	8001354 <Bend_speed_right_change>
}
 8001ca0:	e014      	b.n	8001ccc <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_left",ParsePointer))
 8001ca2:	68f9      	ldr	r1, [r7, #12]
 8001ca4:	4813      	ldr	r0, [pc, #76]	; (8001cf4 <Parser_Parse+0x100>)
 8001ca6:	f7fe fabb 	bl	8000220 <strcmp>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d103      	bne.n	8001cb8 <Parser_Parse+0xc4>
		Bend_speed_left_change(LineFollower);
 8001cb0:	6838      	ldr	r0, [r7, #0]
 8001cb2:	f7ff fb75 	bl	80013a0 <Bend_speed_left_change>
}
 8001cb6:	e009      	b.n	8001ccc <Parser_Parse+0xd8>
	else if(!strcmp("Mode",ParsePointer))
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	480f      	ldr	r0, [pc, #60]	; (8001cf8 <Parser_Parse+0x104>)
 8001cbc:	f7fe fab0 	bl	8000220 <strcmp>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <Parser_Parse+0xd8>
		Mode_change(LineFollower);
 8001cc6:	6838      	ldr	r0, [r7, #0]
 8001cc8:	f7ff ff74 	bl	8001bb4 <Mode_change>
}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	0800f3e0 	.word	0x0800f3e0
 8001cd8:	0800f3e4 	.word	0x0800f3e4
 8001cdc:	0800f3e8 	.word	0x0800f3e8
 8001ce0:	0800f3ec 	.word	0x0800f3ec
 8001ce4:	0800f3f8 	.word	0x0800f3f8
 8001ce8:	0800f404 	.word	0x0800f404
 8001cec:	0800f41c 	.word	0x0800f41c
 8001cf0:	0800f434 	.word	0x0800f434
 8001cf4:	0800f448 	.word	0x0800f448
 8001cf8:	0800f458 	.word	0x0800f458

08001cfc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2220      	movs	r2, #32
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f009 f8d9 	bl	800aecc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d22:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d30:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d3c:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d44:	2204      	movs	r2, #4
 8001d46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d5a:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d84:	4817      	ldr	r0, [pc, #92]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001d86:	f002 f95b 	bl	8004040 <HAL_ADC_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001d90:	f001 f89a 	bl	8002ec8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4811      	ldr	r0, [pc, #68]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001da0:	f003 f98c 	bl	80050bc <HAL_ADCEx_MultiModeConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001daa:	f001 f88d 	bl	8002ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001db0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001db2:	2306      	movs	r3, #6
 8001db4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001db6:	2307      	movs	r3, #7
 8001db8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dba:	237f      	movs	r3, #127	; 0x7f
 8001dbc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <MX_ADC1_Init+0xe8>)
 8001dcc:	f002 fbe6 	bl	800459c <HAL_ADC_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001dd6:	f001 f877 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3730      	adds	r7, #48	; 0x30
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000200 	.word	0x20000200
 8001de8:	08600004 	.word	0x08600004

08001dec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b09e      	sub	sp, #120	; 0x78
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	2254      	movs	r2, #84	; 0x54
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f009 f85d 	bl	800aecc <memset>
  if(adcHandle->Instance==ADC1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e1a:	d15f      	bne.n	8001edc <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e20:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e26:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f004 ff65 	bl	8006cfc <HAL_RCCEx_PeriphCLKConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e38:	f001 f846 	bl	8002ec8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e3c:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <HAL_ADC_MspInit+0xf8>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e40:	4a28      	ldr	r2, [pc, #160]	; (8001ee4 <HAL_ADC_MspInit+0xf8>)
 8001e42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e48:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_ADC_MspInit+0xf8>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_ADC_MspInit+0xf8>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <HAL_ADC_MspInit+0xf8>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_ADC_MspInit+0xf8>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e70:	2303      	movs	r3, #3
 8001e72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e82:	f003 fe65 	bl	8005b50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_ADC_MspInit+0xfc>)
 8001e88:	4a18      	ldr	r2, [pc, #96]	; (8001eec <HAL_ADC_MspInit+0x100>)
 8001e8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_ADC_MspInit+0xfc>)
 8001e8e:	2205      	movs	r2, #5
 8001e90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_ADC_MspInit+0xfc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_ADC_MspInit+0xfc>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_ADC_MspInit+0xfc>)
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_ADC_MspInit+0xfc>)
 8001ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eaa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_ADC_MspInit+0xfc>)
 8001eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_ADC_MspInit+0xfc>)
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_ADC_MspInit+0xfc>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ec0:	4809      	ldr	r0, [pc, #36]	; (8001ee8 <HAL_ADC_MspInit+0xfc>)
 8001ec2:	f003 fb13 	bl	80054ec <HAL_DMA_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001ecc:	f000 fffc 	bl	8002ec8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <HAL_ADC_MspInit+0xfc>)
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_ADC_MspInit+0xfc>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001edc:	bf00      	nop
 8001ede:	3778      	adds	r7, #120	; 0x78
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	2000026c 	.word	0x2000026c
 8001eec:	40020008 	.word	0x40020008

08001ef0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <MX_DMA_Init+0x60>)
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <MX_DMA_Init+0x60>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6493      	str	r3, [r2, #72]	; 0x48
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <MX_DMA_Init+0x60>)
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <MX_DMA_Init+0x60>)
 8001f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f12:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <MX_DMA_Init+0x60>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6493      	str	r3, [r2, #72]	; 0x48
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <MX_DMA_Init+0x60>)
 8001f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	200b      	movs	r0, #11
 8001f2c:	f003 faa9 	bl	8005482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f30:	200b      	movs	r0, #11
 8001f32:	f003 fac0 	bl	80054b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	200c      	movs	r0, #12
 8001f3c:	f003 faa1 	bl	8005482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f40:	200c      	movs	r0, #12
 8001f42:	f003 fab8 	bl	80054b6 <HAL_NVIC_EnableIRQ>

}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000

08001f54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6a:	4b5a      	ldr	r3, [pc, #360]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	4a59      	ldr	r2, [pc, #356]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f76:	4b57      	ldr	r3, [pc, #348]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f82:	4b54      	ldr	r3, [pc, #336]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	4a53      	ldr	r2, [pc, #332]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001f88:	f043 0320 	orr.w	r3, r3, #32
 8001f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8e:	4b51      	ldr	r3, [pc, #324]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b4e      	ldr	r3, [pc, #312]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a4d      	ldr	r2, [pc, #308]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	4b48      	ldr	r3, [pc, #288]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	4a47      	ldr	r2, [pc, #284]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbe:	4b45      	ldr	r3, [pc, #276]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fca:	4b42      	ldr	r3, [pc, #264]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	4a41      	ldr	r2, [pc, #260]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd6:	4b3f      	ldr	r3, [pc, #252]	; (80020d4 <MX_GPIO_Init+0x180>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDON_Pin|Motor_R_A_Pin|Motor_R_B_Pin|LED_2_Pin
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f242 017c 	movw	r1, #8316	; 0x207c
 8001fe8:	483b      	ldr	r0, [pc, #236]	; (80020d8 <MX_GPIO_Init+0x184>)
 8001fea:	f003 ff4b 	bl	8005e84 <HAL_GPIO_WritePin>
                          |LED_1_Pin|Motor_STBY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_4_Pin|LED_3_Pin|Motor_L_A_Pin|Motor_L_B_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f003 ff44 	bl	8005e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002002:	4836      	ldr	r0, [pc, #216]	; (80020dc <MX_GPIO_Init+0x188>)
 8002004:	f003 ff3e 	bl	8005e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LEDON_Pin|Motor_R_A_Pin|Motor_R_B_Pin|LED_2_Pin
 8002008:	f242 037c 	movw	r3, #8316	; 0x207c
 800200c:	617b      	str	r3, [r7, #20]
                          |LED_1_Pin|Motor_STBY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	482d      	ldr	r0, [pc, #180]	; (80020d8 <MX_GPIO_Init+0x184>)
 8002022:	f003 fd95 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR11_Pin|SENSOR12_Pin|SENSOR10_Pin;
 8002026:	f248 0330 	movw	r3, #32816	; 0x8030
 800202a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203e:	f003 fd87 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|Motor_L_A_Pin|Motor_L_B_Pin;
 8002042:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002048:	2301      	movs	r3, #1
 800204a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205e:	f003 fd77 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002068:	2301      	movs	r3, #1
 800206a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4619      	mov	r1, r3
 800207a:	4818      	ldr	r0, [pc, #96]	; (80020dc <MX_GPIO_Init+0x188>)
 800207c:	f003 fd68 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SENSOR9_Pin|SENSOR8_Pin|SENSOR7_Pin;
 8002080:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4810      	ldr	r0, [pc, #64]	; (80020d8 <MX_GPIO_Init+0x184>)
 8002096:	f003 fd5b 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR6_Pin;
 800209a:	2304      	movs	r3, #4
 800209c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR6_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <MX_GPIO_Init+0x18c>)
 80020ae:	f003 fd4f 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin
 80020b2:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 80020b6:	617b      	str	r3, [r7, #20]
                          |SENSOR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <MX_GPIO_Init+0x188>)
 80020c8:	f003 fd42 	bl	8005b50 <HAL_GPIO_Init>

}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	48000800 	.word	0x48000800
 80020dc:	48000400 	.word	0x48000400
 80020e0:	48000c00 	.word	0x48000c00

080020e4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <MX_I2C3_Init+0x74>)
 80020ea:	4a1c      	ldr	r2, [pc, #112]	; (800215c <MX_I2C3_Init+0x78>)
 80020ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 80020ee:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <MX_I2C3_Init+0x74>)
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <MX_I2C3_Init+0x7c>)
 80020f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <MX_I2C3_Init+0x74>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <MX_I2C3_Init+0x74>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <MX_I2C3_Init+0x74>)
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <MX_I2C3_Init+0x74>)
 8002108:	2200      	movs	r2, #0
 800210a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <MX_I2C3_Init+0x74>)
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_I2C3_Init+0x74>)
 8002114:	2200      	movs	r2, #0
 8002116:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <MX_I2C3_Init+0x74>)
 800211a:	2200      	movs	r2, #0
 800211c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800211e:	480e      	ldr	r0, [pc, #56]	; (8002158 <MX_I2C3_Init+0x74>)
 8002120:	f003 fec8 	bl	8005eb4 <HAL_I2C_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800212a:	f000 fecd 	bl	8002ec8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800212e:	2100      	movs	r1, #0
 8002130:	4809      	ldr	r0, [pc, #36]	; (8002158 <MX_I2C3_Init+0x74>)
 8002132:	f003 ff5a 	bl	8005fea <HAL_I2CEx_ConfigAnalogFilter>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800213c:	f000 fec4 	bl	8002ec8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002140:	2100      	movs	r1, #0
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_I2C3_Init+0x74>)
 8002144:	f003 ff9c 	bl	8006080 <HAL_I2CEx_ConfigDigitalFilter>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800214e:	f000 febb 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200002cc 	.word	0x200002cc
 800215c:	40007800 	.word	0x40007800
 8002160:	30a0a7fb 	.word	0x30a0a7fb

08002164 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b09e      	sub	sp, #120	; 0x78
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	2254      	movs	r2, #84	; 0x54
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f008 fea1 	bl	800aecc <memset>
  if(i2cHandle->Instance==I2C3)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1f      	ldr	r2, [pc, #124]	; (800220c <HAL_I2C_MspInit+0xa8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d137      	bne.n	8002204 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002198:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800219a:	2300      	movs	r3, #0
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800219e:	f107 0310 	add.w	r3, r7, #16
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 fdaa 	bl	8006cfc <HAL_RCCEx_PeriphCLKConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80021ae:	f000 fe8b 	bl	8002ec8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b2:	4b17      	ldr	r3, [pc, #92]	; (8002210 <HAL_I2C_MspInit+0xac>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a16      	ldr	r2, [pc, #88]	; (8002210 <HAL_I2C_MspInit+0xac>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <HAL_I2C_MspInit+0xac>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d0:	2312      	movs	r3, #18
 80021d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80021dc:	2308      	movs	r3, #8
 80021de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021e4:	4619      	mov	r1, r3
 80021e6:	480b      	ldr	r0, [pc, #44]	; (8002214 <HAL_I2C_MspInit+0xb0>)
 80021e8:	f003 fcb2 	bl	8005b50 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_I2C_MspInit+0xac>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <HAL_I2C_MspInit+0xac>)
 80021f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021f6:	6593      	str	r3, [r2, #88]	; 0x58
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_I2C_MspInit+0xac>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002204:	bf00      	nop
 8002206:	3778      	adds	r7, #120	; 0x78
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40007800 	.word	0x40007800
 8002210:	40021000 	.word	0x40021000
 8002214:	48000800 	.word	0x48000800

08002218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800221c:	f001 fc81 	bl	8003b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002220:	f000 f8c4 	bl	80023ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002224:	f7ff fe96 	bl	8001f54 <MX_GPIO_Init>
  MX_DMA_Init();
 8002228:	f7ff fe62 	bl	8001ef0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800222c:	f001 fba6 	bl	800397c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8002230:	f7ff fd64 	bl	8001cfc <MX_ADC1_Init>
  MX_I2C3_Init();
 8002234:	f7ff ff56 	bl	80020e4 <MX_I2C3_Init>
  MX_SPI2_Init();
 8002238:	f000 fecc 	bl	8002fd4 <MX_SPI2_Init>
  MX_TIM1_Init();
 800223c:	f001 f89a 	bl	8003374 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002240:	f001 f8f2 	bl	8003428 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002244:	f001 f9c0 	bl	80035c8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002248:	f001 f970 	bl	800352c <MX_TIM3_Init>
  MX_TIM5_Init();
 800224c:	f001 fa12 	bl	8003674 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&GRUZIK.Adc_Value, 1);
 8002250:	2201      	movs	r2, #1
 8002252:	4941      	ldr	r1, [pc, #260]	; (8002358 <main+0x140>)
 8002254:	4841      	ldr	r0, [pc, #260]	; (800235c <main+0x144>)
 8002256:	f002 f8af 	bl	80043b8 <HAL_ADC_Start_DMA>

  	/*Set initial values for PID*/
    GRUZIK.Kp = 0.02;
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <main+0x148>)
 800225c:	4a41      	ldr	r2, [pc, #260]	; (8002364 <main+0x14c>)
 800225e:	601a      	str	r2, [r3, #0]
  	GRUZIK.Kd = 0.1;
 8002260:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <main+0x148>)
 8002262:	4a41      	ldr	r2, [pc, #260]	; (8002368 <main+0x150>)
 8002264:	605a      	str	r2, [r3, #4]
  	GRUZIK.Speed_offset = 0.014;
 8002266:	4b3e      	ldr	r3, [pc, #248]	; (8002360 <main+0x148>)
 8002268:	4a40      	ldr	r2, [pc, #256]	; (800236c <main+0x154>)
 800226a:	635a      	str	r2, [r3, #52]	; 0x34

  	GRUZIK.Base_speed_R = 120;
 800226c:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <main+0x148>)
 800226e:	2278      	movs	r2, #120	; 0x78
 8002270:	609a      	str	r2, [r3, #8]
  	GRUZIK.Base_speed_L = 120;
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <main+0x148>)
 8002274:	2278      	movs	r2, #120	; 0x78
 8002276:	60da      	str	r2, [r3, #12]
  	GRUZIK.Max_speed_R = 120;
 8002278:	4b39      	ldr	r3, [pc, #228]	; (8002360 <main+0x148>)
 800227a:	2278      	movs	r2, #120	; 0x78
 800227c:	611a      	str	r2, [r3, #16]
  	GRUZIK.Max_speed_L = 120;
 800227e:	4b38      	ldr	r3, [pc, #224]	; (8002360 <main+0x148>)
 8002280:	2278      	movs	r2, #120	; 0x78
 8002282:	615a      	str	r2, [r3, #20]

  	/*Sharp turn speed*/
  	GRUZIK.Sharp_bend_speed_right=-70;
 8002284:	4b36      	ldr	r3, [pc, #216]	; (8002360 <main+0x148>)
 8002286:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800228a:	619a      	str	r2, [r3, #24]
  	GRUZIK.Sharp_bend_speed_left=85;
 800228c:	4b34      	ldr	r3, [pc, #208]	; (8002360 <main+0x148>)
 800228e:	2255      	movs	r2, #85	; 0x55
 8002290:	61da      	str	r2, [r3, #28]
  	GRUZIK.Bend_speed_right=-50;
 8002292:	4b33      	ldr	r3, [pc, #204]	; (8002360 <main+0x148>)
 8002294:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8002298:	621a      	str	r2, [r3, #32]
  	GRUZIK.Bend_speed_left=110;
 800229a:	4b31      	ldr	r3, [pc, #196]	; (8002360 <main+0x148>)
 800229c:	226e      	movs	r2, #110	; 0x6e
 800229e:	625a      	str	r2, [r3, #36]	; 0x24

    /*Start receiving data from Blue tooth*/
    HAL_UART_Receive_IT(&hlpuart1, &RxData, 1);
 80022a0:	2201      	movs	r2, #1
 80022a2:	4933      	ldr	r1, [pc, #204]	; (8002370 <main+0x158>)
 80022a4:	4833      	ldr	r0, [pc, #204]	; (8002374 <main+0x15c>)
 80022a6:	f006 fd95 	bl	8008dd4 <HAL_UART_Receive_IT>

    /*encoders*/
    HAL_TIM_Base_Start_IT(&htim5);// 100
 80022aa:	4833      	ldr	r0, [pc, #204]	; (8002378 <main+0x160>)
 80022ac:	f005 f876 	bl	800739c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Left Encoder
 80022b0:	213c      	movs	r1, #60	; 0x3c
 80022b2:	4832      	ldr	r0, [pc, #200]	; (800237c <main+0x164>)
 80022b4:	f005 fb04 	bl	80078c0 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // Right Encoder
 80022b8:	213c      	movs	r1, #60	; 0x3c
 80022ba:	4831      	ldr	r0, [pc, #196]	; (8002380 <main+0x168>)
 80022bc:	f005 fb00 	bl	80078c0 <HAL_TIM_Encoder_Start>

    Motor_Init(&Motor_R, 0.1, 0.1, 10000, 0.01);
 80022c0:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8002384 <main+0x16c>
 80022c4:	f242 7110 	movw	r1, #10000	; 0x2710
 80022c8:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8002388 <main+0x170>
 80022cc:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8002388 <main+0x170>
 80022d0:	482e      	ldr	r0, [pc, #184]	; (800238c <main+0x174>)
 80022d2:	f000 fe61 	bl	8002f98 <Motor_Init>
    Motor_Init(&Motor_L, 0.1, 0.1, 10000, 0.01);
 80022d6:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8002384 <main+0x16c>
 80022da:	f242 7110 	movw	r1, #10000	; 0x2710
 80022de:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8002388 <main+0x170>
 80022e2:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8002388 <main+0x170>
 80022e6:	482a      	ldr	r0, [pc, #168]	; (8002390 <main+0x178>)
 80022e8:	f000 fe56 	bl	8002f98 <Motor_Init>

	/*Start timers and PWM on channels*/
	HAL_TIM_Base_Start_IT(&htim3);
 80022ec:	4829      	ldr	r0, [pc, #164]	; (8002394 <main+0x17c>)
 80022ee:	f005 f855 	bl	800739c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//right pwm
 80022f2:	2100      	movs	r1, #0
 80022f4:	4828      	ldr	r0, [pc, #160]	; (8002398 <main+0x180>)
 80022f6:	f005 f92b 	bl	8007550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);//left pwm
 80022fa:	210c      	movs	r1, #12
 80022fc:	4826      	ldr	r0, [pc, #152]	; (8002398 <main+0x180>)
 80022fe:	f005 f927 	bl	8007550 <HAL_TIM_PWM_Start>

    /*LED diodes initial set*/
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8002302:	2201      	movs	r2, #1
 8002304:	2140      	movs	r1, #64	; 0x40
 8002306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230a:	f003 fdbb 	bl	8005e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800230e:	2201      	movs	r2, #1
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002316:	f003 fdb5 	bl	8005e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800231a:	2201      	movs	r2, #1
 800231c:	2110      	movs	r1, #16
 800231e:	481f      	ldr	r0, [pc, #124]	; (800239c <main+0x184>)
 8002320:	f003 fdb0 	bl	8005e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8002324:	2201      	movs	r2, #1
 8002326:	2120      	movs	r1, #32
 8002328:	481c      	ldr	r0, [pc, #112]	; (800239c <main+0x184>)
 800232a:	f003 fdab 	bl	8005e84 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 800232e:	f000 fd1b 	bl	8002d68 <PID_control>

	  /*If there is a message form Bluetooth Parser it*/
	  if(ReceivedLines > 0)
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <main+0x188>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f9      	beq.n	800232e <main+0x116>
	  {
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 800233a:	491a      	ldr	r1, [pc, #104]	; (80023a4 <main+0x18c>)
 800233c:	481a      	ldr	r0, [pc, #104]	; (80023a8 <main+0x190>)
 800233e:	f7fe fee7 	bl	8001110 <Parser_TakeLine>
		  Parser_Parse(ReceivedData,&GRUZIK);
 8002342:	4907      	ldr	r1, [pc, #28]	; (8002360 <main+0x148>)
 8002344:	4817      	ldr	r0, [pc, #92]	; (80023a4 <main+0x18c>)
 8002346:	f7ff fc55 	bl	8001bf4 <Parser_Parse>

		  ReceivedLines--;
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <main+0x188>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	3b01      	subs	r3, #1
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <main+0x188>)
 8002354:	701a      	strb	r2, [r3, #0]
	  PID_control();
 8002356:	e7ea      	b.n	800232e <main+0x116>
 8002358:	2000034c 	.word	0x2000034c
 800235c:	20000200 	.word	0x20000200
 8002360:	20000320 	.word	0x20000320
 8002364:	3ca3d70a 	.word	0x3ca3d70a
 8002368:	3dcccccd 	.word	0x3dcccccd
 800236c:	3c656042 	.word	0x3c656042
 8002370:	20000478 	.word	0x20000478
 8002374:	20000728 	.word	0x20000728
 8002378:	2000067c 	.word	0x2000067c
 800237c:	20000630 	.word	0x20000630
 8002380:	2000054c 	.word	0x2000054c
 8002384:	3c23d70a 	.word	0x3c23d70a
 8002388:	3dcccccd 	.word	0x3dcccccd
 800238c:	200003bc 	.word	0x200003bc
 8002390:	20000358 	.word	0x20000358
 8002394:	200005e4 	.word	0x200005e4
 8002398:	20000598 	.word	0x20000598
 800239c:	48000800 	.word	0x48000800
 80023a0:	200004e0 	.word	0x200004e0
 80023a4:	200004c0 	.word	0x200004c0
 80023a8:	2000047c 	.word	0x2000047c

080023ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b094      	sub	sp, #80	; 0x50
 80023b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023b2:	f107 0318 	add.w	r3, r7, #24
 80023b6:	2238      	movs	r2, #56	; 0x38
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f008 fd86 	bl	800aecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f003 feb2 	bl	8006138 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80023d4:	f003 fea0 	bl	8006118 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80023d8:	4b20      	ldr	r3, [pc, #128]	; (800245c <SystemClock_Config+0xb0>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023de:	4a1f      	ldr	r2, [pc, #124]	; (800245c <SystemClock_Config+0xb0>)
 80023e0:	f023 0318 	bic.w	r3, r3, #24
 80023e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80023e8:	2306      	movs	r3, #6
 80023ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023ec:	2301      	movs	r3, #1
 80023ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023f6:	2340      	movs	r3, #64	; 0x40
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023fa:	2302      	movs	r3, #2
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023fe:	2302      	movs	r3, #2
 8002400:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002402:	2304      	movs	r3, #4
 8002404:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002406:	2355      	movs	r3, #85	; 0x55
 8002408:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800240a:	2302      	movs	r3, #2
 800240c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800240e:	2302      	movs	r3, #2
 8002410:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002412:	2302      	movs	r3, #2
 8002414:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002416:	f107 0318 	add.w	r3, r7, #24
 800241a:	4618      	mov	r0, r3
 800241c:	f003 ff40 	bl	80062a0 <HAL_RCC_OscConfig>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002426:	f000 fd4f 	bl	8002ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800242a:	230f      	movs	r3, #15
 800242c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800242e:	2303      	movs	r3, #3
 8002430:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	2104      	movs	r1, #4
 8002442:	4618      	mov	r0, r3
 8002444:	f004 fa3e 	bl	80068c4 <HAL_RCC_ClockConfig>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800244e:	f000 fd3b 	bl	8002ec8 <Error_Handler>
  }
}
 8002452:	bf00      	nop
 8002454:	3750      	adds	r7, #80	; 0x50
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/*Interrupts*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0f      	ldr	r2, [pc, #60]	; (80024ac <HAL_UART_RxCpltCallback+0x4c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d117      	bne.n	80024a2 <HAL_UART_RxCpltCallback+0x42>
	{
		if(RB_Write(&ReceiveBuffer, RxData) == RB_OK)
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_UART_RxCpltCallback+0x50>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	480e      	ldr	r0, [pc, #56]	; (80024b4 <HAL_UART_RxCpltCallback+0x54>)
 800247a:	f7fe fdf5 	bl	8001068 <RB_Write>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_UART_RxCpltCallback+0x38>
		{
			if(RxData == ENDLINE)
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_UART_RxCpltCallback+0x50>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b0a      	cmp	r3, #10
 800248a:	d105      	bne.n	8002498 <HAL_UART_RxCpltCallback+0x38>
			{
				ReceivedLines++;
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_UART_RxCpltCallback+0x58>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	3301      	adds	r3, #1
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_UART_RxCpltCallback+0x58>)
 8002496:	701a      	strb	r2, [r3, #0]
			}
		}
    	HAL_UART_Receive_IT(&hlpuart1,&RxData, 1);
 8002498:	2201      	movs	r2, #1
 800249a:	4905      	ldr	r1, [pc, #20]	; (80024b0 <HAL_UART_RxCpltCallback+0x50>)
 800249c:	4807      	ldr	r0, [pc, #28]	; (80024bc <HAL_UART_RxCpltCallback+0x5c>)
 800249e:	f006 fc99 	bl	8008dd4 <HAL_UART_Receive_IT>
	}
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40008000 	.word	0x40008000
 80024b0:	20000478 	.word	0x20000478
 80024b4:	2000047c 	.word	0x2000047c
 80024b8:	200004e0 	.word	0x200004e0
 80024bc:	20000728 	.word	0x20000728

080024c0 <HAL_TIM_PeriodElapsedCallback>:
/*Encoders reading at 100Hz */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a10      	ldr	r2, [pc, #64]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d119      	bne.n	8002506 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		/*Save last values*/
		Motor_L.EncoderPreviousValue = Motor_L.EncoderValue;
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024d4:	881a      	ldrh	r2, [r3, #0]
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024d8:	805a      	strh	r2, [r3, #2]
		Motor_R.EncoderPreviousValue = Motor_R.EncoderValue;
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024dc:	881a      	ldrh	r2, [r3, #0]
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024e0:	805a      	strh	r2, [r3, #2]
		/*Get Encoder values*/
		Motor_L.EncoderValue = __HAL_TIM_GET_COUNTER(&htim4);
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024ec:	801a      	strh	r2, [r3, #0]
		Motor_R.EncoderValue = __HAL_TIM_GET_COUNTER(&htim1);
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024f8:	801a      	strh	r2, [r3, #0]

	    Motor_CalculateSpeed(&Motor_R);
 80024fa:	4807      	ldr	r0, [pc, #28]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024fc:	f000 fcec 	bl	8002ed8 <Motor_CalculateSpeed>
	    Motor_CalculateSpeed(&Motor_L);
 8002500:	4804      	ldr	r0, [pc, #16]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002502:	f000 fce9 	bl	8002ed8 <Motor_CalculateSpeed>
	}
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40000c00 	.word	0x40000c00
 8002514:	20000358 	.word	0x20000358
 8002518:	200003bc 	.word	0x200003bc
 800251c:	20000630 	.word	0x20000630
 8002520:	2000054c 	.word	0x2000054c

08002524 <delay_us>:
/*Functions*/
void delay_us (uint16_t us) //Blocking function
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <delay_us+0x30>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8002536:	bf00      	nop
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <delay_us+0x30>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	429a      	cmp	r2, r3
 8002542:	d3f9      	bcc.n	8002538 <delay_us+0x14>
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	200005e4 	.word	0x200005e4

08002558 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002574:	887b      	ldrh	r3, [r7, #2]
 8002576:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002578:	2301      	movs	r3, #1
 800257a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f003 fae2 	bl	8005b50 <HAL_GPIO_Init>
}
 800258c:	bf00      	nop
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b8:	2301      	movs	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f003 fac4 	bl	8005b50 <HAL_GPIO_Init>
}
 80025c8:	bf00      	nop
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <motor_control>:


void motor_control (double pos_right, double pos_left)

{
 80025d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	ed87 0b02 	vstr	d0, [r7, #8]
 80025dc:	ed87 1b00 	vstr	d1, [r7]
	if (pos_left < 0 )
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025ec:	f7fe faae 	bl	8000b4c <__aeabi_dcmplt>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d031      	beq.n	800265a <motor_control+0x8a>
	{
		__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_4, (uint32_t)((ARR*pos_left*-1) * GRUZIK.Speed_level));//PWM_L
 80025f6:	4b66      	ldr	r3, [pc, #408]	; (8002790 <motor_control+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fd ffca 	bl	8000594 <__aeabi_i2d>
 8002600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002604:	f7fe f830 	bl	8000668 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4690      	mov	r8, r2
 800260e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002612:	4b60      	ldr	r3, [pc, #384]	; (8002794 <motor_control+0x1c4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd ffce 	bl	80005b8 <__aeabi_f2d>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4640      	mov	r0, r8
 8002622:	4649      	mov	r1, r9
 8002624:	f7fe f820 	bl	8000668 <__aeabi_dmul>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	495a      	ldr	r1, [pc, #360]	; (8002798 <motor_control+0x1c8>)
 800262e:	680e      	ldr	r6, [r1, #0]
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f7fe faf0 	bl	8000c18 <__aeabi_d2uiz>
 8002638:	4603      	mov	r3, r0
 800263a:	6433      	str	r3, [r6, #64]	; 0x40
		HAL_GPIO_WritePin(Motor_L_A_GPIO_Port, Motor_L_B_Pin, GPIO_PIN_SET);
 800263c:	2201      	movs	r2, #1
 800263e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002646:	f003 fc1d 	bl	8005e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_L_B_GPIO_Port, Motor_L_A_Pin, GPIO_PIN_RESET);
 800264a:	2200      	movs	r2, #0
 800264c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002654:	f003 fc16 	bl	8005e84 <HAL_GPIO_WritePin>
 8002658:	e02f      	b.n	80026ba <motor_control+0xea>

	}
	else
	{
		__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_4, (uint32_t)((ARR*pos_left) * GRUZIK.Speed_level));//PWM_L
 800265a:	4b4d      	ldr	r3, [pc, #308]	; (8002790 <motor_control+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff98 	bl	8000594 <__aeabi_i2d>
 8002664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002668:	f7fd fffe 	bl	8000668 <__aeabi_dmul>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4690      	mov	r8, r2
 8002672:	4699      	mov	r9, r3
 8002674:	4b47      	ldr	r3, [pc, #284]	; (8002794 <motor_control+0x1c4>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ff9d 	bl	80005b8 <__aeabi_f2d>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4640      	mov	r0, r8
 8002684:	4649      	mov	r1, r9
 8002686:	f7fd ffef 	bl	8000668 <__aeabi_dmul>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4942      	ldr	r1, [pc, #264]	; (8002798 <motor_control+0x1c8>)
 8002690:	680e      	ldr	r6, [r1, #0]
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	f7fe fabf 	bl	8000c18 <__aeabi_d2uiz>
 800269a:	4603      	mov	r3, r0
 800269c:	6433      	str	r3, [r6, #64]	; 0x40
		HAL_GPIO_WritePin(Motor_L_A_GPIO_Port, Motor_L_B_Pin, GPIO_PIN_RESET);
 800269e:	2200      	movs	r2, #0
 80026a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a8:	f003 fbec 	bl	8005e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_L_B_GPIO_Port, Motor_L_A_Pin, GPIO_PIN_SET);
 80026ac:	2201      	movs	r2, #1
 80026ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b6:	f003 fbe5 	bl	8005e84 <HAL_GPIO_WritePin>
	}
	if (pos_right < 0 )
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026c6:	f7fe fa41 	bl	8000b4c <__aeabi_dcmplt>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d02d      	beq.n	800272c <motor_control+0x15c>
	{
		__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, (uint32_t)((ARR*pos_right* -1) * GRUZIK.Speed_level));//PWM_R
 80026d0:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <motor_control+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd ff5d 	bl	8000594 <__aeabi_i2d>
 80026da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026de:	f7fd ffc3 	bl	8000668 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4614      	mov	r4, r2
 80026e8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80026ec:	4b29      	ldr	r3, [pc, #164]	; (8002794 <motor_control+0x1c4>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd ff61 	bl	80005b8 <__aeabi_f2d>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4620      	mov	r0, r4
 80026fc:	4629      	mov	r1, r5
 80026fe:	f7fd ffb3 	bl	8000668 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4924      	ldr	r1, [pc, #144]	; (8002798 <motor_control+0x1c8>)
 8002708:	680c      	ldr	r4, [r1, #0]
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f7fe fa83 	bl	8000c18 <__aeabi_d2uiz>
 8002712:	4603      	mov	r3, r0
 8002714:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(Motor_R_A_GPIO_Port, Motor_R_A_Pin, GPIO_PIN_SET);
 8002716:	2201      	movs	r2, #1
 8002718:	2104      	movs	r1, #4
 800271a:	4820      	ldr	r0, [pc, #128]	; (800279c <motor_control+0x1cc>)
 800271c:	f003 fbb2 	bl	8005e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_R_B_GPIO_Port, Motor_R_B_Pin, GPIO_PIN_RESET);
 8002720:	2200      	movs	r2, #0
 8002722:	2108      	movs	r1, #8
 8002724:	481d      	ldr	r0, [pc, #116]	; (800279c <motor_control+0x1cc>)
 8002726:	f003 fbad 	bl	8005e84 <HAL_GPIO_WritePin>
	{
		__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, (uint32_t)((ARR*pos_right) * GRUZIK.Speed_level));//PWM_R
		HAL_GPIO_WritePin(Motor_R_A_GPIO_Port, Motor_R_A_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Motor_R_B_GPIO_Port, Motor_R_B_Pin, GPIO_PIN_SET);
	}
}
 800272a:	e02b      	b.n	8002784 <motor_control+0x1b4>
		__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, (uint32_t)((ARR*pos_right) * GRUZIK.Speed_level));//PWM_R
 800272c:	4b18      	ldr	r3, [pc, #96]	; (8002790 <motor_control+0x1c0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd ff2f 	bl	8000594 <__aeabi_i2d>
 8002736:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800273a:	f7fd ff95 	bl	8000668 <__aeabi_dmul>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4614      	mov	r4, r2
 8002744:	461d      	mov	r5, r3
 8002746:	4b13      	ldr	r3, [pc, #76]	; (8002794 <motor_control+0x1c4>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd ff34 	bl	80005b8 <__aeabi_f2d>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4620      	mov	r0, r4
 8002756:	4629      	mov	r1, r5
 8002758:	f7fd ff86 	bl	8000668 <__aeabi_dmul>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	490d      	ldr	r1, [pc, #52]	; (8002798 <motor_control+0x1c8>)
 8002762:	680c      	ldr	r4, [r1, #0]
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe fa56 	bl	8000c18 <__aeabi_d2uiz>
 800276c:	4603      	mov	r3, r0
 800276e:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(Motor_R_A_GPIO_Port, Motor_R_A_Pin, GPIO_PIN_RESET);
 8002770:	2200      	movs	r2, #0
 8002772:	2104      	movs	r1, #4
 8002774:	4809      	ldr	r0, [pc, #36]	; (800279c <motor_control+0x1cc>)
 8002776:	f003 fb85 	bl	8005e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_R_B_GPIO_Port, Motor_R_B_Pin, GPIO_PIN_SET);
 800277a:	2201      	movs	r2, #1
 800277c:	2108      	movs	r1, #8
 800277e:	4807      	ldr	r0, [pc, #28]	; (800279c <motor_control+0x1cc>)
 8002780:	f003 fb80 	bl	8005e84 <HAL_GPIO_WritePin>
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800278e:	bf00      	nop
 8002790:	20000000 	.word	0x20000000
 8002794:	20000320 	.word	0x20000320
 8002798:	20000598 	.word	0x20000598
 800279c:	48000800 	.word	0x48000800

080027a0 <sharp_turn>:


void sharp_turn ()
{
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	af00      	add	r7, sp, #0

	if (Last_idle < 25)
 80027a4:	4b30      	ldr	r3, [pc, #192]	; (8002868 <sharp_turn+0xc8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b18      	cmp	r3, #24
 80027aa:	dc2d      	bgt.n	8002808 <sharp_turn+0x68>
	{
		if (Last_end == 1)
 80027ac:	4b2f      	ldr	r3, [pc, #188]	; (800286c <sharp_turn+0xcc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d114      	bne.n	80027de <sharp_turn+0x3e>
			motor_control(GRUZIK.Sharp_bend_speed_right, GRUZIK.Sharp_bend_speed_left);
 80027b4:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <sharp_turn+0xd0>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd feeb 	bl	8000594 <__aeabi_i2d>
 80027be:	4604      	mov	r4, r0
 80027c0:	460d      	mov	r5, r1
 80027c2:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <sharp_turn+0xd0>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fee4 	bl	8000594 <__aeabi_i2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	ec43 2b11 	vmov	d1, r2, r3
 80027d4:	ec45 4b10 	vmov	d0, r4, r5
 80027d8:	f7ff fefa 	bl	80025d0 <motor_control>
		if (Last_end == 1)
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
		else
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
	}
}
 80027dc:	e041      	b.n	8002862 <sharp_turn+0xc2>
			motor_control(GRUZIK.Sharp_bend_speed_left, GRUZIK.Sharp_bend_speed_right);
 80027de:	4b24      	ldr	r3, [pc, #144]	; (8002870 <sharp_turn+0xd0>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd fed6 	bl	8000594 <__aeabi_i2d>
 80027e8:	4604      	mov	r4, r0
 80027ea:	460d      	mov	r5, r1
 80027ec:	4b20      	ldr	r3, [pc, #128]	; (8002870 <sharp_turn+0xd0>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fecf 	bl	8000594 <__aeabi_i2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	ec43 2b11 	vmov	d1, r2, r3
 80027fe:	ec45 4b10 	vmov	d0, r4, r5
 8002802:	f7ff fee5 	bl	80025d0 <motor_control>
}
 8002806:	e02c      	b.n	8002862 <sharp_turn+0xc2>
		if (Last_end == 1)
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <sharp_turn+0xcc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d114      	bne.n	800283a <sharp_turn+0x9a>
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <sharp_turn+0xd0>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd febd 	bl	8000594 <__aeabi_i2d>
 800281a:	4604      	mov	r4, r0
 800281c:	460d      	mov	r5, r1
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <sharp_turn+0xd0>)
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd feb6 	bl	8000594 <__aeabi_i2d>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	ec43 2b11 	vmov	d1, r2, r3
 8002830:	ec45 4b10 	vmov	d0, r4, r5
 8002834:	f7ff fecc 	bl	80025d0 <motor_control>
}
 8002838:	e013      	b.n	8002862 <sharp_turn+0xc2>
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <sharp_turn+0xd0>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fea8 	bl	8000594 <__aeabi_i2d>
 8002844:	4604      	mov	r4, r0
 8002846:	460d      	mov	r5, r1
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <sharp_turn+0xd0>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fea1 	bl	8000594 <__aeabi_i2d>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	ec43 2b11 	vmov	d1, r2, r3
 800285a:	ec45 4b10 	vmov	d0, r4, r5
 800285e:	f7ff feb7 	bl	80025d0 <motor_control>
}
 8002862:	bf00      	nop
 8002864:	bdb0      	pop	{r4, r5, r7, pc}
 8002866:	bf00      	nop
 8002868:	20000470 	.word	0x20000470
 800286c:	2000046c 	.word	0x2000046c
 8002870:	20000320 	.word	0x20000320

08002874 <QTR8_read>:
int QTR8_read ()
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 800287a:	2201      	movs	r2, #1
 800287c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002880:	48bd      	ldr	r0, [pc, #756]	; (8002b78 <QTR8_read+0x304>)
 8002882:	f003 faff 	bl	8005e84 <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8002886:	f44f 7100 	mov.w	r1, #512	; 0x200
 800288a:	48bc      	ldr	r0, [pc, #752]	; (8002b7c <QTR8_read+0x308>)
 800288c:	f7ff fe64 	bl	8002558 <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8002890:	2180      	movs	r1, #128	; 0x80
 8002892:	48ba      	ldr	r0, [pc, #744]	; (8002b7c <QTR8_read+0x308>)
 8002894:	f7ff fe60 	bl	8002558 <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8002898:	2140      	movs	r1, #64	; 0x40
 800289a:	48b8      	ldr	r0, [pc, #736]	; (8002b7c <QTR8_read+0x308>)
 800289c:	f7ff fe5c 	bl	8002558 <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80028a0:	2120      	movs	r1, #32
 80028a2:	48b6      	ldr	r0, [pc, #728]	; (8002b7c <QTR8_read+0x308>)
 80028a4:	f7ff fe58 	bl	8002558 <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80028a8:	2110      	movs	r1, #16
 80028aa:	48b4      	ldr	r0, [pc, #720]	; (8002b7c <QTR8_read+0x308>)
 80028ac:	f7ff fe54 	bl	8002558 <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80028b0:	2104      	movs	r1, #4
 80028b2:	48b3      	ldr	r0, [pc, #716]	; (8002b80 <QTR8_read+0x30c>)
 80028b4:	f7ff fe50 	bl	8002558 <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80028b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028bc:	48ae      	ldr	r0, [pc, #696]	; (8002b78 <QTR8_read+0x304>)
 80028be:	f7ff fe4b 	bl	8002558 <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80028c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028c6:	48ac      	ldr	r0, [pc, #688]	; (8002b78 <QTR8_read+0x304>)
 80028c8:	f7ff fe46 	bl	8002558 <Set_Pin_Output>
	Set_Pin_Output(SENSOR9_GPIO_Port, SENSOR9_Pin);
 80028cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028d0:	48a9      	ldr	r0, [pc, #676]	; (8002b78 <QTR8_read+0x304>)
 80028d2:	f7ff fe41 	bl	8002558 <Set_Pin_Output>
	Set_Pin_Output(SENSOR10_GPIO_Port, SENSOR10_Pin);
 80028d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028de:	f7ff fe3b 	bl	8002558 <Set_Pin_Output>
	Set_Pin_Output(SENSOR11_GPIO_Port, SENSOR11_Pin);
 80028e2:	2110      	movs	r1, #16
 80028e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028e8:	f7ff fe36 	bl	8002558 <Set_Pin_Output>
	Set_Pin_Output(SENSOR12_GPIO_Port, SENSOR12_Pin);
 80028ec:	2120      	movs	r1, #32
 80028ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f2:	f7ff fe31 	bl	8002558 <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 80028f6:	2201      	movs	r2, #1
 80028f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028fc:	489f      	ldr	r0, [pc, #636]	; (8002b7c <QTR8_read+0x308>)
 80028fe:	f003 fac1 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 8002902:	2201      	movs	r2, #1
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	489d      	ldr	r0, [pc, #628]	; (8002b7c <QTR8_read+0x308>)
 8002908:	f003 fabc 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 800290c:	2201      	movs	r2, #1
 800290e:	2140      	movs	r1, #64	; 0x40
 8002910:	489a      	ldr	r0, [pc, #616]	; (8002b7c <QTR8_read+0x308>)
 8002912:	f003 fab7 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 8002916:	2201      	movs	r2, #1
 8002918:	2120      	movs	r1, #32
 800291a:	4898      	ldr	r0, [pc, #608]	; (8002b7c <QTR8_read+0x308>)
 800291c:	f003 fab2 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 8002920:	2201      	movs	r2, #1
 8002922:	2110      	movs	r1, #16
 8002924:	4895      	ldr	r0, [pc, #596]	; (8002b7c <QTR8_read+0x308>)
 8002926:	f003 faad 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 800292a:	2201      	movs	r2, #1
 800292c:	2104      	movs	r1, #4
 800292e:	4894      	ldr	r0, [pc, #592]	; (8002b80 <QTR8_read+0x30c>)
 8002930:	f003 faa8 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 8002934:	2201      	movs	r2, #1
 8002936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800293a:	488f      	ldr	r0, [pc, #572]	; (8002b78 <QTR8_read+0x304>)
 800293c:	f003 faa2 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 8002940:	2201      	movs	r2, #1
 8002942:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002946:	488c      	ldr	r0, [pc, #560]	; (8002b78 <QTR8_read+0x304>)
 8002948:	f003 fa9c 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR9_GPIO_Port, SENSOR9_Pin, 1);
 800294c:	2201      	movs	r2, #1
 800294e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002952:	4889      	ldr	r0, [pc, #548]	; (8002b78 <QTR8_read+0x304>)
 8002954:	f003 fa96 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR10_GPIO_Port, SENSOR10_Pin, 1);
 8002958:	2201      	movs	r2, #1
 800295a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800295e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002962:	f003 fa8f 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR11_GPIO_Port, SENSOR11_Pin, 1);
 8002966:	2201      	movs	r2, #1
 8002968:	2110      	movs	r1, #16
 800296a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800296e:	f003 fa89 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR12_GPIO_Port, SENSOR12_Pin, 1);
 8002972:	2201      	movs	r2, #1
 8002974:	2120      	movs	r1, #32
 8002976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297a:	f003 fa83 	bl	8005e84 <HAL_GPIO_WritePin>

	delay_us(10);
 800297e:	200a      	movs	r0, #10
 8002980:	f7ff fdd0 	bl	8002524 <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8002984:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002988:	487c      	ldr	r0, [pc, #496]	; (8002b7c <QTR8_read+0x308>)
 800298a:	f7ff fe03 	bl	8002594 <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 800298e:	2180      	movs	r1, #128	; 0x80
 8002990:	487a      	ldr	r0, [pc, #488]	; (8002b7c <QTR8_read+0x308>)
 8002992:	f7ff fdff 	bl	8002594 <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8002996:	2140      	movs	r1, #64	; 0x40
 8002998:	4878      	ldr	r0, [pc, #480]	; (8002b7c <QTR8_read+0x308>)
 800299a:	f7ff fdfb 	bl	8002594 <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 800299e:	2120      	movs	r1, #32
 80029a0:	4876      	ldr	r0, [pc, #472]	; (8002b7c <QTR8_read+0x308>)
 80029a2:	f7ff fdf7 	bl	8002594 <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80029a6:	2110      	movs	r1, #16
 80029a8:	4874      	ldr	r0, [pc, #464]	; (8002b7c <QTR8_read+0x308>)
 80029aa:	f7ff fdf3 	bl	8002594 <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80029ae:	2104      	movs	r1, #4
 80029b0:	4873      	ldr	r0, [pc, #460]	; (8002b80 <QTR8_read+0x30c>)
 80029b2:	f7ff fdef 	bl	8002594 <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80029b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ba:	486f      	ldr	r0, [pc, #444]	; (8002b78 <QTR8_read+0x304>)
 80029bc:	f7ff fdea 	bl	8002594 <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80029c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029c4:	486c      	ldr	r0, [pc, #432]	; (8002b78 <QTR8_read+0x304>)
 80029c6:	f7ff fde5 	bl	8002594 <Set_Pin_Input>
	Set_Pin_Input(SENSOR9_GPIO_Port, SENSOR9_Pin);
 80029ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ce:	486a      	ldr	r0, [pc, #424]	; (8002b78 <QTR8_read+0x304>)
 80029d0:	f7ff fde0 	bl	8002594 <Set_Pin_Input>
	Set_Pin_Input(SENSOR10_GPIO_Port, SENSOR10_Pin);
 80029d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029dc:	f7ff fdda 	bl	8002594 <Set_Pin_Input>
	Set_Pin_Input(SENSOR11_GPIO_Port, SENSOR11_Pin);
 80029e0:	2110      	movs	r1, #16
 80029e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e6:	f7ff fdd5 	bl	8002594 <Set_Pin_Input>
	Set_Pin_Input(SENSOR12_GPIO_Port, SENSOR12_Pin);
 80029ea:	2120      	movs	r1, #32
 80029ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f0:	f7ff fdd0 	bl	8002594 <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 80029f4:	f241 1094 	movw	r0, #4500	; 0x1194
 80029f8:	f7ff fd94 	bl	8002524 <delay_us>
//	 uint8_t Message[124];
//	 sprintf((char*)Message,"S1: %d S2: %d S3: %d S4: %d S5: %d S6: %d S7: %d S8: %d S9: %d S10: %d S11: %d S12: %d \n\r", sensory[0],sensory[1],sensory[2],sensory[3],sensory[4],sensory[5],sensory[6],sensory[7],
//			 sensory[8],sensory[9],sensory[10],sensory[11]);
//	 HAL_UART_Transmit(&hlpuart1, Message, strlen((char*)Message), 100);

	Sensors_read = 0x00000000;
 80029fc:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <QTR8_read+0x310>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
	int pos = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]
  int active = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) { // LEFT SIDE
 8002a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a0e:	485b      	ldr	r0, [pc, #364]	; (8002b7c <QTR8_read+0x308>)
 8002a10:	f003 fa20 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00f      	beq.n	8002a3a <QTR8_read+0x1c6>
		Sensors_read |= 0x000000000001;
 8002a1a:	4b5a      	ldr	r3, [pc, #360]	; (8002b84 <QTR8_read+0x310>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	4a58      	ldr	r2, [pc, #352]	; (8002b84 <QTR8_read+0x310>)
 8002a24:	6013      	str	r3, [r2, #0]
		pos += 1000 * SENSOR_SCALE;//1000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002a2c:	607b      	str	r3, [r7, #4]
    active++;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	3301      	adds	r3, #1
 8002a32:	603b      	str	r3, [r7, #0]
		Last_end = 1;
 8002a34:	4b54      	ldr	r3, [pc, #336]	; (8002b88 <QTR8_read+0x314>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8002a3a:	2180      	movs	r1, #128	; 0x80
 8002a3c:	484f      	ldr	r0, [pc, #316]	; (8002b7c <QTR8_read+0x308>)
 8002a3e:	f003 fa09 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00c      	beq.n	8002a62 <QTR8_read+0x1ee>
		Sensors_read |= 0x000000000010;
 8002a48:	4b4e      	ldr	r3, [pc, #312]	; (8002b84 <QTR8_read+0x310>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f043 0310 	orr.w	r3, r3, #16
 8002a50:	4a4c      	ldr	r2, [pc, #304]	; (8002b84 <QTR8_read+0x310>)
 8002a52:	6013      	str	r3, [r2, #0]
		pos += 2000 * SENSOR_SCALE;//2000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002a5a:	607b      	str	r3, [r7, #4]
    active++;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	603b      	str	r3, [r7, #0]
    	//Last_end = 1;//1
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8002a62:	2140      	movs	r1, #64	; 0x40
 8002a64:	4845      	ldr	r0, [pc, #276]	; (8002b7c <QTR8_read+0x308>)
 8002a66:	f003 f9f5 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00c      	beq.n	8002a8a <QTR8_read+0x216>
		Sensors_read |= 0x000000000100;
 8002a70:	4b44      	ldr	r3, [pc, #272]	; (8002b84 <QTR8_read+0x310>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	4a42      	ldr	r2, [pc, #264]	; (8002b84 <QTR8_read+0x310>)
 8002a7a:	6013      	str	r3, [r2, #0]
		pos += 3000 * SENSOR_SCALE;//3000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002a82:	607b      	str	r3, [r7, #4]
    active++;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	603b      	str	r3, [r7, #0]
    	//Last_end = 1;//1
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8002a8a:	2120      	movs	r1, #32
 8002a8c:	483b      	ldr	r0, [pc, #236]	; (8002b7c <QTR8_read+0x308>)
 8002a8e:	f003 f9e1 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00c      	beq.n	8002ab2 <QTR8_read+0x23e>
		Sensors_read |= 0x000000001000;
 8002a98:	4b3a      	ldr	r3, [pc, #232]	; (8002b84 <QTR8_read+0x310>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aa0:	4a38      	ldr	r2, [pc, #224]	; (8002b84 <QTR8_read+0x310>)
 8002aa2:	6013      	str	r3, [r2, #0]
		pos += 4000 * SENSOR_SCALE;//4000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8002aaa:	607b      	str	r3, [r7, #4]
    active++;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8002ab2:	2110      	movs	r1, #16
 8002ab4:	4831      	ldr	r0, [pc, #196]	; (8002b7c <QTR8_read+0x308>)
 8002ab6:	f003 f9cd 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00d      	beq.n	8002adc <QTR8_read+0x268>
		Sensors_read |= 0x000000010000;
 8002ac0:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <QTR8_read+0x310>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <QTR8_read+0x310>)
 8002aca:	6013      	str	r3, [r2, #0]
		pos += 5000 * SENSOR_SCALE;//5000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	607b      	str	r3, [r7, #4]
    active++;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 8002adc:	2104      	movs	r1, #4
 8002ade:	4828      	ldr	r0, [pc, #160]	; (8002b80 <QTR8_read+0x30c>)
 8002ae0:	f003 f9b8 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <QTR8_read+0x292>
		Sensors_read |= 0x000000100000;
 8002aea:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <QTR8_read+0x310>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af2:	4a24      	ldr	r2, [pc, #144]	; (8002b84 <QTR8_read+0x310>)
 8002af4:	6013      	str	r3, [r2, #0]
		pos += 6000 * SENSOR_SCALE;//6000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002afc:	3310      	adds	r3, #16
 8002afe:	607b      	str	r3, [r7, #4]
    active++;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	3301      	adds	r3, #1
 8002b04:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 8002b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b0a:	481b      	ldr	r0, [pc, #108]	; (8002b78 <QTR8_read+0x304>)
 8002b0c:	f003 f9a2 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00d      	beq.n	8002b32 <QTR8_read+0x2be>
		Sensors_read |= 0x000001000000;
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <QTR8_read+0x310>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <QTR8_read+0x310>)
 8002b20:	6013      	str	r3, [r2, #0]
		pos += 7000 * SENSOR_SCALE;//7000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 8002b28:	3318      	adds	r3, #24
 8002b2a:	607b      	str	r3, [r7, #4]
    active++;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 8002b32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b36:	4810      	ldr	r0, [pc, #64]	; (8002b78 <QTR8_read+0x304>)
 8002b38:	f003 f98c 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <QTR8_read+0x2e8>
		Sensors_read |= 0x000010000000;
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <QTR8_read+0x310>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <QTR8_read+0x310>)
 8002b4c:	6013      	str	r3, [r2, #0]
		pos += 8000 * SENSOR_SCALE;//8000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8002b54:	607b      	str	r3, [r7, #4]
    active++;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	603b      	str	r3, [r7, #0]
  }
  if (HAL_GPIO_ReadPin(SENSOR9_GPIO_Port, SENSOR9_Pin)) {
 8002b5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b60:	4805      	ldr	r0, [pc, #20]	; (8002b78 <QTR8_read+0x304>)
 8002b62:	f003 f977 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d017      	beq.n	8002b9c <QTR8_read+0x328>
	   Sensors_read |= 0x000100000000;
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <QTR8_read+0x310>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <QTR8_read+0x310>)
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	e00a      	b.n	8002b8c <QTR8_read+0x318>
 8002b76:	bf00      	nop
 8002b78:	48000800 	.word	0x48000800
 8002b7c:	48000400 	.word	0x48000400
 8002b80:	48000c00 	.word	0x48000c00
 8002b84:	20000420 	.word	0x20000420
 8002b88:	2000046c 	.word	0x2000046c
	   pos += 9000 * SENSOR_SCALE;//8000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 8002b92:	3328      	adds	r3, #40	; 0x28
 8002b94:	607b      	str	r3, [r7, #4]
	active++;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	603b      	str	r3, [r7, #0]

  }
  if (HAL_GPIO_ReadPin(SENSOR10_GPIO_Port, SENSOR10_Pin)) {
 8002b9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba4:	f003 f956 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <QTR8_read+0x352>
	   Sensors_read |= 0x001000000000;
 8002bae:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <QTR8_read+0x3f0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2c      	ldr	r2, [pc, #176]	; (8002c64 <QTR8_read+0x3f0>)
 8002bb4:	6013      	str	r3, [r2, #0]
	   pos += 10000 * SENSOR_SCALE;//8000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002bbc:	3310      	adds	r3, #16
 8002bbe:	607b      	str	r3, [r7, #4]
    active++;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	603b      	str	r3, [r7, #0]
	  // Last_end = 0;//0
  }
  if (HAL_GPIO_ReadPin(SENSOR11_GPIO_Port, SENSOR11_Pin)) {
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bcc:	f003 f942 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <QTR8_read+0x37a>
	   Sensors_read |= 0x010000000000;
 8002bd6:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <QTR8_read+0x3f0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a22      	ldr	r2, [pc, #136]	; (8002c64 <QTR8_read+0x3f0>)
 8002bdc:	6013      	str	r3, [r2, #0]
	   pos += 11000 * SENSOR_SCALE;//8000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8002be4:	3338      	adds	r3, #56	; 0x38
 8002be6:	607b      	str	r3, [r7, #4]
    active++;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	603b      	str	r3, [r7, #0]
	  // Last_end = 0;//0
  }
  if (HAL_GPIO_ReadPin(SENSOR12_GPIO_Port, SENSOR12_Pin)) { // RIGH SIDE
 8002bee:	2120      	movs	r1, #32
 8002bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf4:	f003 f92e 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00e      	beq.n	8002c1c <QTR8_read+0x3a8>
	   Sensors_read |= 0x100000000000;
 8002bfe:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <QTR8_read+0x3f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <QTR8_read+0x3f0>)
 8002c04:	6013      	str	r3, [r2, #0]
	   pos += 12000 * SENSOR_SCALE;//8000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8002c0c:	3320      	adds	r3, #32
 8002c0e:	607b      	str	r3, [r7, #4]
    active++;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	603b      	str	r3, [r7, #0]
	   Last_end = 0;
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <QTR8_read+0x3f4>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c22:	4812      	ldr	r0, [pc, #72]	; (8002c6c <QTR8_read+0x3f8>)
 8002c24:	f003 f92e 	bl	8005e84 <HAL_GPIO_WritePin>

  actives = active;
 8002c28:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <QTR8_read+0x3fc>)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6013      	str	r3, [r2, #0]
	Position = pos/active;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c36:	4a0f      	ldr	r2, [pc, #60]	; (8002c74 <QTR8_read+0x400>)
 8002c38:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <QTR8_read+0x3fc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d105      	bne.n	8002c4e <QTR8_read+0x3da>
		Last_idle++;
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <QTR8_read+0x404>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3301      	adds	r3, #1
 8002c48:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <QTR8_read+0x404>)
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	e002      	b.n	8002c54 <QTR8_read+0x3e0>
	else
		Last_idle = 0;
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <QTR8_read+0x404>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

	return pos/active;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000420 	.word	0x20000420
 8002c68:	2000046c 	.word	0x2000046c
 8002c6c:	48000800 	.word	0x48000800
 8002c70:	20000474 	.word	0x20000474
 8002c74:	20000424 	.word	0x20000424
 8002c78:	20000470 	.word	0x20000470

08002c7c <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 8002c7c:	b5b0      	push	{r4, r5, r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <forward_brake+0x40>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <forward_brake+0x18>
		sharp_turn();
 8002c8e:	f7ff fd87 	bl	80027a0 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 8002c92:	e00f      	b.n	8002cb4 <forward_brake+0x38>
	  motor_control(pos_right, pos_left);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7fd fc7d 	bl	8000594 <__aeabi_i2d>
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	460d      	mov	r5, r1
 8002c9e:	6838      	ldr	r0, [r7, #0]
 8002ca0:	f7fd fc78 	bl	8000594 <__aeabi_i2d>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	ec43 2b11 	vmov	d1, r2, r3
 8002cac:	ec45 4b10 	vmov	d0, r4, r5
 8002cb0:	f7ff fc8e 	bl	80025d0 <motor_control>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bdb0      	pop	{r4, r5, r7, pc}
 8002cbc:	20000474 	.word	0x20000474

08002cc0 <past_errors>:

void past_errors (int error)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 8002cc8:	2309      	movs	r3, #9
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	e00b      	b.n	8002ce6 <past_errors+0x26>
      Errors[i] = Errors[i-1];
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	4a0b      	ldr	r2, [pc, #44]	; (8002d00 <past_errors+0x40>)
 8002cd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cd8:	4909      	ldr	r1, [pc, #36]	; (8002d00 <past_errors+0x40>)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	dcf0      	bgt.n	8002cce <past_errors+0xe>
  Errors[0] = error;
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <past_errors+0x40>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6013      	str	r3, [r2, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20000444 	.word	0x20000444

08002d04 <errors_sum>:

int errors_sum (int index, int abs)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  int sum = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	e01a      	b.n	8002d4e <errors_sum+0x4a>
  {
    if (abs == 1 && Errors[i] < 0)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10d      	bne.n	8002d3a <errors_sum+0x36>
 8002d1e:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <errors_sum+0x60>)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	da07      	bge.n	8002d3a <errors_sum+0x36>
      sum += -Errors[i];
 8002d2a:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <errors_sum+0x60>)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e006      	b.n	8002d48 <errors_sum+0x44>
    else
      sum += Errors[i];
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <errors_sum+0x60>)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	dbe0      	blt.n	8002d18 <errors_sum+0x14>
  }
  return sum;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	20000444 	.word	0x20000444

08002d68 <PID_control>:

void PID_control()
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 8002d6e:	f7ff fd81 	bl	8002874 <QTR8_read>
 8002d72:	4603      	mov	r3, r0
 8002d74:	81fb      	strh	r3, [r7, #14]
  int error = (6500 * SENSOR_SCALE) - position;
 8002d76:	89fb      	ldrh	r3, [r7, #14]
 8002d78:	f5c3 53cb 	rsb	r3, r3, #6496	; 0x1960
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8002d80:	68b8      	ldr	r0, [r7, #8]
 8002d82:	f7ff ff9d 	bl	8002cc0 <past_errors>

  P = error;
 8002d86:	4a48      	ldr	r2, [pc, #288]	; (8002ea8 <PID_control+0x140>)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	2005      	movs	r0, #5
 8002d90:	f7ff ffb8 	bl	8002d04 <errors_sum>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4a45      	ldr	r2, [pc, #276]	; (8002eac <PID_control+0x144>)
 8002d98:	6013      	str	r3, [r2, #0]
  D = error - Last_error;
 8002d9a:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <PID_control+0x148>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	4a44      	ldr	r2, [pc, #272]	; (8002eb4 <PID_control+0x14c>)
 8002da4:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 8002da6:	2101      	movs	r1, #1
 8002da8:	2005      	movs	r0, #5
 8002daa:	f7ff ffab 	bl	8002d04 <errors_sum>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4a41      	ldr	r2, [pc, #260]	; (8002eb8 <PID_control+0x150>)
 8002db2:	6013      	str	r3, [r2, #0]
  Last_error = error;
 8002db4:	4a3e      	ldr	r2, [pc, #248]	; (8002eb0 <PID_control+0x148>)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6013      	str	r3, [r2, #0]

  int motorspeed = P*GRUZIK.Kp + I*Ki + D*GRUZIK.Kd;
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <PID_control+0x140>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	ee07 3a90 	vmov	s15, r3
 8002dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dc6:	4b3d      	ldr	r3, [pc, #244]	; (8002ebc <PID_control+0x154>)
 8002dc8:	edd3 7a00 	vldr	s15, [r3]
 8002dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dd0:	4b36      	ldr	r3, [pc, #216]	; (8002eac <PID_control+0x144>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ddc:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <PID_control+0x158>)
 8002dde:	edd3 7a00 	vldr	s15, [r3]
 8002de2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dea:	4b32      	ldr	r3, [pc, #200]	; (8002eb4 <PID_control+0x14c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002df6:	4b31      	ldr	r3, [pc, #196]	; (8002ebc <PID_control+0x154>)
 8002df8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e08:	ee17 3a90 	vmov	r3, s15
 8002e0c:	607b      	str	r3, [r7, #4]

  int motorspeedl = GRUZIK.Base_speed_L + motorspeed - R*Kr;
 8002e0e:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <PID_control+0x154>)
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <PID_control+0x150>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <PID_control+0x15c>)
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e3c:	ee17 3a90 	vmov	r3, s15
 8002e40:	617b      	str	r3, [r7, #20]
  int motorspeedr = GRUZIK.Base_speed_R - motorspeed - R*Kr;
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <PID_control+0x154>)
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e52:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <PID_control+0x150>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e5e:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <PID_control+0x15c>)
 8002e60:	edd3 7a00 	vldr	s15, [r3]
 8002e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e70:	ee17 3a90 	vmov	r3, s15
 8002e74:	613b      	str	r3, [r7, #16]

  if (motorspeedl > GRUZIK.Max_speed_L)
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <PID_control+0x154>)
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	dd02      	ble.n	8002e86 <PID_control+0x11e>
    motorspeedl = GRUZIK.Max_speed_L;
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <PID_control+0x154>)
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	617b      	str	r3, [r7, #20]
  if (motorspeedr > GRUZIK.Max_speed_R)
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <PID_control+0x154>)
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	dd02      	ble.n	8002e96 <PID_control+0x12e>
    motorspeedr = GRUZIK.Max_speed_R;
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <PID_control+0x154>)
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	613b      	str	r3, [r7, #16]

	forward_brake(motorspeedr, motorspeedl);
 8002e96:	6979      	ldr	r1, [r7, #20]
 8002e98:	6938      	ldr	r0, [r7, #16]
 8002e9a:	f7ff feef 	bl	8002c7c <forward_brake>
}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000430 	.word	0x20000430
 8002eac:	20000434 	.word	0x20000434
 8002eb0:	20000440 	.word	0x20000440
 8002eb4:	20000438 	.word	0x20000438
 8002eb8:	2000043c 	.word	0x2000043c
 8002ebc:	20000320 	.word	0x20000320
 8002ec0:	20000428 	.word	0x20000428
 8002ec4:	2000042c 	.word	0x2000042c

08002ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ecc:	b672      	cpsid	i
}
 8002ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ed0:	e7fe      	b.n	8002ed0 <Error_Handler+0x8>
 8002ed2:	0000      	movs	r0, r0
 8002ed4:	0000      	movs	r0, r0
	...

08002ed8 <Motor_CalculateSpeed>:

#include "main.h"
#include "motor.h"

void Motor_CalculateSpeed(motor_t *motor)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
    //How many impulses did we get ?
	int impulses = motor->EncoderValue - motor->EncoderPreviousValue;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	885b      	ldrh	r3, [r3, #2]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	60fb      	str	r3, [r7, #12]
    //How many times motor has rotated ?
	if(motor->ImpulsesPerRotation != 0)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	891b      	ldrh	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d010      	beq.n	8002f18 <Motor_CalculateSpeed+0x40>
	{
		motor->NumberOfRotations = impulses * 0.001;
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7fd fb4c 	bl	8000594 <__aeabi_i2d>
 8002efc:	a320      	add	r3, pc, #128	; (adr r3, 8002f80 <Motor_CalculateSpeed+0xa8>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	f7fd fbb1 	bl	8000668 <__aeabi_dmul>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7fd fea3 	bl	8000c58 <__aeabi_d2f>
 8002f12:	4602      	mov	r2, r0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	611a      	str	r2, [r3, #16]
	}
	//Rotations per minute based on period
	if(motor->period != 0)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	d012      	beq.n	8002f4e <Motor_CalculateSpeed+0x76>
	{
		motor->RPM = motor->NumberOfRotations / 0.01; //rotates per 10ms
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fb43 	bl	80005b8 <__aeabi_f2d>
 8002f32:	a315      	add	r3, pc, #84	; (adr r3, 8002f88 <Motor_CalculateSpeed+0xb0>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f7fd fcc0 	bl	80008bc <__aeabi_ddiv>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7fd fe88 	bl	8000c58 <__aeabi_d2f>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	605a      	str	r2, [r3, #4]
	}

	motor->KilometersPerHour = motor->RPM * 0.0048;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fb30 	bl	80005b8 <__aeabi_f2d>
 8002f58:	a30d      	add	r3, pc, #52	; (adr r3, 8002f90 <Motor_CalculateSpeed+0xb8>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f7fd fb83 	bl	8000668 <__aeabi_dmul>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7fd fe75 	bl	8000c58 <__aeabi_d2f>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	615a      	str	r2, [r3, #20]
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	f3af 8000 	nop.w
 8002f80:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f84:	3f50624d 	.word	0x3f50624d
 8002f88:	47ae147b 	.word	0x47ae147b
 8002f8c:	3f847ae1 	.word	0x3f847ae1
 8002f90:	30553261 	.word	0x30553261
 8002f94:	3f73a92a 	.word	0x3f73a92a

08002f98 <Motor_Init>:

void Motor_Init(motor_t *motor, float Kp, float Ki, uint16_t ImpulsesPerRotation, float period)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6178      	str	r0, [r7, #20]
 8002fa0:	ed87 0a04 	vstr	s0, [r7, #16]
 8002fa4:	edc7 0a03 	vstr	s1, [r7, #12]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	ed87 1a01 	vstr	s2, [r7, #4]
 8002fae:	817b      	strh	r3, [r7, #10]
	motor->kp = Kp;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	659a      	str	r2, [r3, #88]	; 0x58
	motor->ki = Ki;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
	motor->ImpulsesPerRotation = ImpulsesPerRotation;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	897a      	ldrh	r2, [r7, #10]
 8002fc0:	811a      	strh	r2, [r3, #8]
	motor->period = period;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	60da      	str	r2, [r3, #12]
}
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <MX_SPI2_Init+0x74>)
 8002fda:	4a1c      	ldr	r2, [pc, #112]	; (800304c <MX_SPI2_Init+0x78>)
 8002fdc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002fde:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <MX_SPI2_Init+0x74>)
 8002fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fe4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002fe6:	4b18      	ldr	r3, [pc, #96]	; (8003048 <MX_SPI2_Init+0x74>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002fec:	4b16      	ldr	r3, [pc, #88]	; (8003048 <MX_SPI2_Init+0x74>)
 8002fee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002ff2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <MX_SPI2_Init+0x74>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ffa:	4b13      	ldr	r3, [pc, #76]	; (8003048 <MX_SPI2_Init+0x74>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <MX_SPI2_Init+0x74>)
 8003002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003006:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <MX_SPI2_Init+0x74>)
 800300a:	2208      	movs	r2, #8
 800300c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <MX_SPI2_Init+0x74>)
 8003010:	2200      	movs	r2, #0
 8003012:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <MX_SPI2_Init+0x74>)
 8003016:	2200      	movs	r2, #0
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <MX_SPI2_Init+0x74>)
 800301c:	2200      	movs	r2, #0
 800301e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003020:	4b09      	ldr	r3, [pc, #36]	; (8003048 <MX_SPI2_Init+0x74>)
 8003022:	2207      	movs	r2, #7
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <MX_SPI2_Init+0x74>)
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <MX_SPI2_Init+0x74>)
 800302e:	2208      	movs	r2, #8
 8003030:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003032:	4805      	ldr	r0, [pc, #20]	; (8003048 <MX_SPI2_Init+0x74>)
 8003034:	f004 f8b0 	bl	8007198 <HAL_SPI_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800303e:	f7ff ff43 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200004e4 	.word	0x200004e4
 800304c:	40003800 	.word	0x40003800

08003050 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a17      	ldr	r2, [pc, #92]	; (80030cc <HAL_SPI_MspInit+0x7c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d128      	bne.n	80030c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003072:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <HAL_SPI_MspInit+0x80>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <HAL_SPI_MspInit+0x80>)
 8003078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307c:	6593      	str	r3, [r2, #88]	; 0x58
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <HAL_SPI_MspInit+0x80>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_SPI_MspInit+0x80>)
 800308c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308e:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <HAL_SPI_MspInit+0x80>)
 8003090:	f043 0302 	orr.w	r3, r3, #2
 8003094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_SPI_MspInit+0x80>)
 8003098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80030a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80030a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	2302      	movs	r3, #2
 80030aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2300      	movs	r3, #0
 80030b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030b4:	2305      	movs	r3, #5
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	4619      	mov	r1, r3
 80030be:	4805      	ldr	r0, [pc, #20]	; (80030d4 <HAL_SPI_MspInit+0x84>)
 80030c0:	f002 fd46 	bl	8005b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80030c4:	bf00      	nop
 80030c6:	3728      	adds	r7, #40	; 0x28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40003800 	.word	0x40003800
 80030d0:	40021000 	.word	0x40021000
 80030d4:	48000400 	.word	0x48000400

080030d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_MspInit+0x44>)
 80030e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e2:	4a0e      	ldr	r2, [pc, #56]	; (800311c <HAL_MspInit+0x44>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6613      	str	r3, [r2, #96]	; 0x60
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_MspInit+0x44>)
 80030ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_MspInit+0x44>)
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	4a08      	ldr	r2, [pc, #32]	; (800311c <HAL_MspInit+0x44>)
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003100:	6593      	str	r3, [r2, #88]	; 0x58
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_MspInit+0x44>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800310e:	f003 f8b7 	bl	8006280 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000

08003120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003124:	e7fe      	b.n	8003124 <NMI_Handler+0x4>

08003126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800312a:	e7fe      	b.n	800312a <HardFault_Handler+0x4>

0800312c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003130:	e7fe      	b.n	8003130 <MemManage_Handler+0x4>

08003132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003136:	e7fe      	b.n	8003136 <BusFault_Handler+0x4>

08003138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800313c:	e7fe      	b.n	800313c <UsageFault_Handler+0x4>

0800313e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800316c:	f000 fd2c 	bl	8003bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}

08003174 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <DMA1_Channel1_IRQHandler+0x10>)
 800317a:	f002 fb9a 	bl	80058b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	2000026c 	.word	0x2000026c

08003188 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <DMA1_Channel2_IRQHandler+0x10>)
 800318e:	f002 fb90 	bl	80058b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	200006c8 	.word	0x200006c8

0800319c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <TIM5_IRQHandler+0x10>)
 80031a2:	f004 fc1b 	bl	80079dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	2000067c 	.word	0x2000067c

080031b0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <LPUART1_IRQHandler+0x10>)
 80031b6:	f005 fe59 	bl	8008e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20000728 	.word	0x20000728

080031c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return 1;
 80031c8:	2301      	movs	r3, #1
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <_kill>:

int _kill(int pid, int sig)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031de:	f007 fe4b 	bl	800ae78 <__errno>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2216      	movs	r2, #22
 80031e6:	601a      	str	r2, [r3, #0]
  return -1;
 80031e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <_exit>:

void _exit (int status)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ffe7 	bl	80031d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003206:	e7fe      	b.n	8003206 <_exit+0x12>

08003208 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e00a      	b.n	8003230 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800321a:	f3af 8000 	nop.w
 800321e:	4601      	mov	r1, r0
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	60ba      	str	r2, [r7, #8]
 8003226:	b2ca      	uxtb	r2, r1
 8003228:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	3301      	adds	r3, #1
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	dbf0      	blt.n	800321a <_read+0x12>
  }

  return len;
 8003238:	687b      	ldr	r3, [r7, #4]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e009      	b.n	8003268 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	60ba      	str	r2, [r7, #8]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	3301      	adds	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	dbf1      	blt.n	8003254 <_write+0x12>
  }
  return len;
 8003270:	687b      	ldr	r3, [r7, #4]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <_close>:

int _close(int file)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032a2:	605a      	str	r2, [r3, #4]
  return 0;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <_isatty>:

int _isatty(int file)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032ba:	2301      	movs	r3, #1
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032ec:	4a14      	ldr	r2, [pc, #80]	; (8003340 <_sbrk+0x5c>)
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <_sbrk+0x60>)
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <_sbrk+0x64>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <_sbrk+0x64>)
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <_sbrk+0x68>)
 8003304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <_sbrk+0x64>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	429a      	cmp	r2, r3
 8003312:	d207      	bcs.n	8003324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003314:	f007 fdb0 	bl	800ae78 <__errno>
 8003318:	4603      	mov	r3, r0
 800331a:	220c      	movs	r2, #12
 800331c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800331e:	f04f 33ff 	mov.w	r3, #4294967295
 8003322:	e009      	b.n	8003338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <_sbrk+0x64>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <_sbrk+0x64>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	4a05      	ldr	r2, [pc, #20]	; (8003348 <_sbrk+0x64>)
 8003334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20020000 	.word	0x20020000
 8003344:	00000400 	.word	0x00000400
 8003348:	20000548 	.word	0x20000548
 800334c:	200007d0 	.word	0x200007d0

08003350 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <SystemInit+0x20>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	4a05      	ldr	r2, [pc, #20]	; (8003370 <SystemInit+0x20>)
 800335c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim4_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08c      	sub	sp, #48	; 0x30
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800337a:	f107 030c 	add.w	r3, r7, #12
 800337e:	2224      	movs	r2, #36	; 0x24
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f007 fda2 	bl	800aecc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003388:	463b      	mov	r3, r7
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	605a      	str	r2, [r3, #4]
 8003390:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003392:	4b23      	ldr	r3, [pc, #140]	; (8003420 <MX_TIM1_Init+0xac>)
 8003394:	4a23      	ldr	r2, [pc, #140]	; (8003424 <MX_TIM1_Init+0xb0>)
 8003396:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003398:	4b21      	ldr	r3, [pc, #132]	; (8003420 <MX_TIM1_Init+0xac>)
 800339a:	2200      	movs	r2, #0
 800339c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <MX_TIM1_Init+0xac>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80033a4:	4b1e      	ldr	r3, [pc, #120]	; (8003420 <MX_TIM1_Init+0xac>)
 80033a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80033aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ac:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <MX_TIM1_Init+0xac>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033b2:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <MX_TIM1_Init+0xac>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <MX_TIM1_Init+0xac>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80033be:	2301      	movs	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033c6:	2301      	movs	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80033ce:	2301      	movs	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033d2:	2300      	movs	r3, #0
 80033d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033d6:	2301      	movs	r3, #1
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033da:	2300      	movs	r3, #0
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80033de:	2301      	movs	r3, #1
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80033e2:	f107 030c 	add.w	r3, r7, #12
 80033e6:	4619      	mov	r1, r3
 80033e8:	480d      	ldr	r0, [pc, #52]	; (8003420 <MX_TIM1_Init+0xac>)
 80033ea:	f004 f9c3 	bl	8007774 <HAL_TIM_Encoder_Init>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80033f4:	f7ff fd68 	bl	8002ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033f8:	2300      	movs	r3, #0
 80033fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80033fc:	2300      	movs	r3, #0
 80033fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003400:	2300      	movs	r3, #0
 8003402:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003404:	463b      	mov	r3, r7
 8003406:	4619      	mov	r1, r3
 8003408:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_TIM1_Init+0xac>)
 800340a:	f005 fb29 	bl	8008a60 <HAL_TIMEx_MasterConfigSynchronization>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003414:	f7ff fd58 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003418:	bf00      	nop
 800341a:	3730      	adds	r7, #48	; 0x30
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	2000054c 	.word	0x2000054c
 8003424:	40012c00 	.word	0x40012c00

08003428 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08e      	sub	sp, #56	; 0x38
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800342e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	609a      	str	r2, [r3, #8]
 800343a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800343c:	f107 031c 	add.w	r3, r7, #28
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003448:	463b      	mov	r3, r7
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	60da      	str	r2, [r3, #12]
 8003454:	611a      	str	r2, [r3, #16]
 8003456:	615a      	str	r2, [r3, #20]
 8003458:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800345a:	4b33      	ldr	r3, [pc, #204]	; (8003528 <MX_TIM2_Init+0x100>)
 800345c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003460:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003462:	4b31      	ldr	r3, [pc, #196]	; (8003528 <MX_TIM2_Init+0x100>)
 8003464:	22a9      	movs	r2, #169	; 0xa9
 8003466:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003468:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <MX_TIM2_Init+0x100>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800346e:	4b2e      	ldr	r3, [pc, #184]	; (8003528 <MX_TIM2_Init+0x100>)
 8003470:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003474:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003476:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <MX_TIM2_Init+0x100>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800347c:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <MX_TIM2_Init+0x100>)
 800347e:	2200      	movs	r2, #0
 8003480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003482:	4829      	ldr	r0, [pc, #164]	; (8003528 <MX_TIM2_Init+0x100>)
 8003484:	f003 ff33 	bl	80072ee <HAL_TIM_Base_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800348e:	f7ff fd1b 	bl	8002ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800349c:	4619      	mov	r1, r3
 800349e:	4822      	ldr	r0, [pc, #136]	; (8003528 <MX_TIM2_Init+0x100>)
 80034a0:	f004 fd00 	bl	8007ea4 <HAL_TIM_ConfigClockSource>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80034aa:	f7ff fd0d 	bl	8002ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80034ae:	481e      	ldr	r0, [pc, #120]	; (8003528 <MX_TIM2_Init+0x100>)
 80034b0:	f003 ffec 	bl	800748c <HAL_TIM_PWM_Init>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80034ba:	f7ff fd05 	bl	8002ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034c6:	f107 031c 	add.w	r3, r7, #28
 80034ca:	4619      	mov	r1, r3
 80034cc:	4816      	ldr	r0, [pc, #88]	; (8003528 <MX_TIM2_Init+0x100>)
 80034ce:	f005 fac7 	bl	8008a60 <HAL_TIMEx_MasterConfigSynchronization>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80034d8:	f7ff fcf6 	bl	8002ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034dc:	2360      	movs	r3, #96	; 0x60
 80034de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034ec:	463b      	mov	r3, r7
 80034ee:	2200      	movs	r2, #0
 80034f0:	4619      	mov	r1, r3
 80034f2:	480d      	ldr	r0, [pc, #52]	; (8003528 <MX_TIM2_Init+0x100>)
 80034f4:	f004 fbc2 	bl	8007c7c <HAL_TIM_PWM_ConfigChannel>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80034fe:	f7ff fce3 	bl	8002ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003502:	463b      	mov	r3, r7
 8003504:	220c      	movs	r2, #12
 8003506:	4619      	mov	r1, r3
 8003508:	4807      	ldr	r0, [pc, #28]	; (8003528 <MX_TIM2_Init+0x100>)
 800350a:	f004 fbb7 	bl	8007c7c <HAL_TIM_PWM_ConfigChannel>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003514:	f7ff fcd8 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <MX_TIM2_Init+0x100>)
 800351a:	f000 f9e9 	bl	80038f0 <HAL_TIM_MspPostInit>

}
 800351e:	bf00      	nop
 8003520:	3738      	adds	r7, #56	; 0x38
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000598 	.word	0x20000598

0800352c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003532:	f107 0310 	add.w	r3, r7, #16
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003540:	1d3b      	adds	r3, r7, #4
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800354a:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <MX_TIM3_Init+0x94>)
 800354c:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <MX_TIM3_Init+0x98>)
 800354e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <MX_TIM3_Init+0x94>)
 8003552:	22a9      	movs	r2, #169	; 0xa9
 8003554:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003556:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <MX_TIM3_Init+0x94>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800355c:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <MX_TIM3_Init+0x94>)
 800355e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003562:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003564:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <MX_TIM3_Init+0x94>)
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <MX_TIM3_Init+0x94>)
 800356c:	2200      	movs	r2, #0
 800356e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003570:	4813      	ldr	r0, [pc, #76]	; (80035c0 <MX_TIM3_Init+0x94>)
 8003572:	f003 febc 	bl	80072ee <HAL_TIM_Base_Init>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800357c:	f7ff fca4 	bl	8002ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003584:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003586:	f107 0310 	add.w	r3, r7, #16
 800358a:	4619      	mov	r1, r3
 800358c:	480c      	ldr	r0, [pc, #48]	; (80035c0 <MX_TIM3_Init+0x94>)
 800358e:	f004 fc89 	bl	8007ea4 <HAL_TIM_ConfigClockSource>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003598:	f7ff fc96 	bl	8002ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800359c:	2300      	movs	r3, #0
 800359e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	4619      	mov	r1, r3
 80035a8:	4805      	ldr	r0, [pc, #20]	; (80035c0 <MX_TIM3_Init+0x94>)
 80035aa:	f005 fa59 	bl	8008a60 <HAL_TIMEx_MasterConfigSynchronization>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80035b4:	f7ff fc88 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035b8:	bf00      	nop
 80035ba:	3720      	adds	r7, #32
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	200005e4 	.word	0x200005e4
 80035c4:	40000400 	.word	0x40000400

080035c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08c      	sub	sp, #48	; 0x30
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035ce:	f107 030c 	add.w	r3, r7, #12
 80035d2:	2224      	movs	r2, #36	; 0x24
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f007 fc78 	bl	800aecc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035dc:	463b      	mov	r3, r7
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <MX_TIM4_Init+0xa4>)
 80035e8:	4a21      	ldr	r2, [pc, #132]	; (8003670 <MX_TIM4_Init+0xa8>)
 80035ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80035ec:	4b1f      	ldr	r3, [pc, #124]	; (800366c <MX_TIM4_Init+0xa4>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f2:	4b1e      	ldr	r3, [pc, #120]	; (800366c <MX_TIM4_Init+0xa4>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <MX_TIM4_Init+0xa4>)
 80035fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003600:	4b1a      	ldr	r3, [pc, #104]	; (800366c <MX_TIM4_Init+0xa4>)
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003606:	4b19      	ldr	r3, [pc, #100]	; (800366c <MX_TIM4_Init+0xa4>)
 8003608:	2200      	movs	r2, #0
 800360a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800360c:	2301      	movs	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003614:	2301      	movs	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003618:	2300      	movs	r3, #0
 800361a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 800361c:	2301      	movs	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003620:	2300      	movs	r3, #0
 8003622:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003624:	2301      	movs	r3, #1
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003628:	2300      	movs	r3, #0
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 800362c:	2301      	movs	r3, #1
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003630:	f107 030c 	add.w	r3, r7, #12
 8003634:	4619      	mov	r1, r3
 8003636:	480d      	ldr	r0, [pc, #52]	; (800366c <MX_TIM4_Init+0xa4>)
 8003638:	f004 f89c 	bl	8007774 <HAL_TIM_Encoder_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003642:	f7ff fc41 	bl	8002ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800364e:	463b      	mov	r3, r7
 8003650:	4619      	mov	r1, r3
 8003652:	4806      	ldr	r0, [pc, #24]	; (800366c <MX_TIM4_Init+0xa4>)
 8003654:	f005 fa04 	bl	8008a60 <HAL_TIMEx_MasterConfigSynchronization>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800365e:	f7ff fc33 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003662:	bf00      	nop
 8003664:	3730      	adds	r7, #48	; 0x30
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000630 	.word	0x20000630
 8003670:	40000800 	.word	0x40000800

08003674 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800367a:	f107 0310 	add.w	r3, r7, #16
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003692:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <MX_TIM5_Init+0x94>)
 8003694:	4a1d      	ldr	r2, [pc, #116]	; (800370c <MX_TIM5_Init+0x98>)
 8003696:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <MX_TIM5_Init+0x94>)
 800369a:	22a9      	movs	r2, #169	; 0xa9
 800369c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <MX_TIM5_Init+0x94>)
 80036a0:	2210      	movs	r2, #16
 80036a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 80036a4:	4b18      	ldr	r3, [pc, #96]	; (8003708 <MX_TIM5_Init+0x94>)
 80036a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80036aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ac:	4b16      	ldr	r3, [pc, #88]	; (8003708 <MX_TIM5_Init+0x94>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <MX_TIM5_Init+0x94>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80036b8:	4813      	ldr	r0, [pc, #76]	; (8003708 <MX_TIM5_Init+0x94>)
 80036ba:	f003 fe18 	bl	80072ee <HAL_TIM_Base_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80036c4:	f7ff fc00 	bl	8002ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80036ce:	f107 0310 	add.w	r3, r7, #16
 80036d2:	4619      	mov	r1, r3
 80036d4:	480c      	ldr	r0, [pc, #48]	; (8003708 <MX_TIM5_Init+0x94>)
 80036d6:	f004 fbe5 	bl	8007ea4 <HAL_TIM_ConfigClockSource>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80036e0:	f7ff fbf2 	bl	8002ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80036ec:	1d3b      	adds	r3, r7, #4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4805      	ldr	r0, [pc, #20]	; (8003708 <MX_TIM5_Init+0x94>)
 80036f2:	f005 f9b5 	bl	8008a60 <HAL_TIMEx_MasterConfigSynchronization>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80036fc:	f7ff fbe4 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003700:	bf00      	nop
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	2000067c 	.word	0x2000067c
 800370c:	40000c00 	.word	0x40000c00

08003710 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08c      	sub	sp, #48	; 0x30
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 031c 	add.w	r3, r7, #28
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a44      	ldr	r2, [pc, #272]	; (8003840 <HAL_TIM_Encoder_MspInit+0x130>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d128      	bne.n	8003784 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003732:	4b44      	ldr	r3, [pc, #272]	; (8003844 <HAL_TIM_Encoder_MspInit+0x134>)
 8003734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003736:	4a43      	ldr	r2, [pc, #268]	; (8003844 <HAL_TIM_Encoder_MspInit+0x134>)
 8003738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800373c:	6613      	str	r3, [r2, #96]	; 0x60
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_TIM_Encoder_MspInit+0x134>)
 8003740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800374a:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <HAL_TIM_Encoder_MspInit+0x134>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	4a3d      	ldr	r2, [pc, #244]	; (8003844 <HAL_TIM_Encoder_MspInit+0x134>)
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003756:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_TIM_Encoder_MspInit+0x134>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R_1_Pin|ENCODER_R_2_Pin;
 8003762:	2303      	movs	r3, #3
 8003764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	2302      	movs	r3, #2
 8003768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	2300      	movs	r3, #0
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003772:	2302      	movs	r3, #2
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003776:	f107 031c 	add.w	r3, r7, #28
 800377a:	4619      	mov	r1, r3
 800377c:	4832      	ldr	r0, [pc, #200]	; (8003848 <HAL_TIM_Encoder_MspInit+0x138>)
 800377e:	f002 f9e7 	bl	8005b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003782:	e059      	b.n	8003838 <HAL_TIM_Encoder_MspInit+0x128>
  else if(tim_encoderHandle->Instance==TIM4)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a30      	ldr	r2, [pc, #192]	; (800384c <HAL_TIM_Encoder_MspInit+0x13c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d154      	bne.n	8003838 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800378e:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_TIM_Encoder_MspInit+0x134>)
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	4a2c      	ldr	r2, [pc, #176]	; (8003844 <HAL_TIM_Encoder_MspInit+0x134>)
 8003794:	f043 0304 	orr.w	r3, r3, #4
 8003798:	6593      	str	r3, [r2, #88]	; 0x58
 800379a:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <HAL_TIM_Encoder_MspInit+0x134>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a6:	4b27      	ldr	r3, [pc, #156]	; (8003844 <HAL_TIM_Encoder_MspInit+0x134>)
 80037a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037aa:	4a26      	ldr	r2, [pc, #152]	; (8003844 <HAL_TIM_Encoder_MspInit+0x134>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <HAL_TIM_Encoder_MspInit+0x134>)
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_L_1_Pin|ENCODER_L_2_Pin;
 80037be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80037c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c4:	2302      	movs	r3, #2
 80037c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80037d0:	230a      	movs	r3, #10
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d4:	f107 031c 	add.w	r3, r7, #28
 80037d8:	4619      	mov	r1, r3
 80037da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037de:	f002 f9b7 	bl	8005b50 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Channel2;
 80037e2:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <HAL_TIM_Encoder_MspInit+0x140>)
 80037e4:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <HAL_TIM_Encoder_MspInit+0x144>)
 80037e6:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_TIM_Encoder_MspInit+0x140>)
 80037ea:	2247      	movs	r2, #71	; 0x47
 80037ec:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ee:	4b18      	ldr	r3, [pc, #96]	; (8003850 <HAL_TIM_Encoder_MspInit+0x140>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80037f4:	4b16      	ldr	r3, [pc, #88]	; (8003850 <HAL_TIM_Encoder_MspInit+0x140>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_TIM_Encoder_MspInit+0x140>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003800:	4b13      	ldr	r3, [pc, #76]	; (8003850 <HAL_TIM_Encoder_MspInit+0x140>)
 8003802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003806:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_TIM_Encoder_MspInit+0x140>)
 800380a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800380e:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <HAL_TIM_Encoder_MspInit+0x140>)
 8003812:	2220      	movs	r2, #32
 8003814:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003816:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <HAL_TIM_Encoder_MspInit+0x140>)
 8003818:	2200      	movs	r2, #0
 800381a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 800381c:	480c      	ldr	r0, [pc, #48]	; (8003850 <HAL_TIM_Encoder_MspInit+0x140>)
 800381e:	f001 fe65 	bl	80054ec <HAL_DMA_Init>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_TIM_Encoder_MspInit+0x11c>
      Error_Handler();
 8003828:	f7ff fb4e 	bl	8002ec8 <Error_Handler>
    __HAL_LINKDMA(tim_encoderHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a08      	ldr	r2, [pc, #32]	; (8003850 <HAL_TIM_Encoder_MspInit+0x140>)
 8003830:	621a      	str	r2, [r3, #32]
 8003832:	4a07      	ldr	r2, [pc, #28]	; (8003850 <HAL_TIM_Encoder_MspInit+0x140>)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003838:	bf00      	nop
 800383a:	3730      	adds	r7, #48	; 0x30
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40021000 	.word	0x40021000
 8003848:	48000800 	.word	0x48000800
 800384c:	40000800 	.word	0x40000800
 8003850:	200006c8 	.word	0x200006c8
 8003854:	4002001c 	.word	0x4002001c

08003858 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003868:	d10c      	bne.n	8003884 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800386a:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <HAL_TIM_Base_MspInit+0x8c>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <HAL_TIM_Base_MspInit+0x8c>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6593      	str	r3, [r2, #88]	; 0x58
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_TIM_Base_MspInit+0x8c>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003882:	e02a      	b.n	80038da <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <HAL_TIM_Base_MspInit+0x90>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10c      	bne.n	80038a8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800388e:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <HAL_TIM_Base_MspInit+0x8c>)
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	4a14      	ldr	r2, [pc, #80]	; (80038e4 <HAL_TIM_Base_MspInit+0x8c>)
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	6593      	str	r3, [r2, #88]	; 0x58
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_TIM_Base_MspInit+0x8c>)
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
}
 80038a6:	e018      	b.n	80038da <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM5)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0f      	ldr	r2, [pc, #60]	; (80038ec <HAL_TIM_Base_MspInit+0x94>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d113      	bne.n	80038da <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <HAL_TIM_Base_MspInit+0x8c>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <HAL_TIM_Base_MspInit+0x8c>)
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	6593      	str	r3, [r2, #88]	; 0x58
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_TIM_Base_MspInit+0x8c>)
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2100      	movs	r1, #0
 80038ce:	2032      	movs	r0, #50	; 0x32
 80038d0:	f001 fdd7 	bl	8005482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80038d4:	2032      	movs	r0, #50	; 0x32
 80038d6:	f001 fdee 	bl	80054b6 <HAL_NVIC_EnableIRQ>
}
 80038da:	bf00      	nop
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000c00 	.word	0x40000c00

080038f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	f107 030c 	add.w	r3, r7, #12
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d12e      	bne.n	8003970 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003912:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_TIM_MspPostInit+0x88>)
 8003914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003916:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_TIM_MspPostInit+0x88>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800391e:	4b16      	ldr	r3, [pc, #88]	; (8003978 <HAL_TIM_MspPostInit+0x88>)
 8003920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_R_Pin;
 800392a:	2301      	movs	r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392e:	2302      	movs	r3, #2
 8003930:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003936:	2300      	movs	r3, #0
 8003938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800393a:	2301      	movs	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 800393e:	f107 030c 	add.w	r3, r7, #12
 8003942:	4619      	mov	r1, r3
 8003944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003948:	f002 f902 	bl	8005b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_L_Pin;
 800394c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003950:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003952:	2302      	movs	r3, #2
 8003954:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800395e:	230a      	movs	r3, #10
 8003960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8003962:	f107 030c 	add.w	r3, r7, #12
 8003966:	4619      	mov	r1, r3
 8003968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800396c:	f002 f8f0 	bl	8005b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003970:	bf00      	nop
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000

0800397c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003980:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 8003982:	4a22      	ldr	r2, [pc, #136]	; (8003a0c <MX_LPUART1_UART_Init+0x90>)
 8003984:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 8003988:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800398c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800398e:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003994:	4b1c      	ldr	r3, [pc, #112]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 8003996:	2200      	movs	r2, #0
 8003998:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800399a:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 800399c:	2200      	movs	r2, #0
 800399e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80039a0:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 80039a2:	220c      	movs	r2, #12
 80039a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039ac:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039b8:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80039be:	4812      	ldr	r0, [pc, #72]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 80039c0:	f005 f92a 	bl	8008c18 <HAL_UART_Init>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80039ca:	f7ff fa7d 	bl	8002ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039ce:	2100      	movs	r1, #0
 80039d0:	480d      	ldr	r0, [pc, #52]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 80039d2:	f007 f982 	bl	800acda <HAL_UARTEx_SetTxFifoThreshold>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80039dc:	f7ff fa74 	bl	8002ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039e0:	2100      	movs	r1, #0
 80039e2:	4809      	ldr	r0, [pc, #36]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 80039e4:	f007 f9b7 	bl	800ad56 <HAL_UARTEx_SetRxFifoThreshold>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80039ee:	f7ff fa6b 	bl	8002ec8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80039f2:	4805      	ldr	r0, [pc, #20]	; (8003a08 <MX_LPUART1_UART_Init+0x8c>)
 80039f4:	f007 f938 	bl	800ac68 <HAL_UARTEx_DisableFifoMode>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80039fe:	f7ff fa63 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000728 	.word	0x20000728
 8003a0c:	40008000 	.word	0x40008000

08003a10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b09e      	sub	sp, #120	; 0x78
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a28:	f107 0310 	add.w	r3, r7, #16
 8003a2c:	2254      	movs	r2, #84	; 0x54
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f007 fa4b 	bl	800aecc <memset>
  if(uartHandle->Instance==LPUART1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <HAL_UART_MspInit+0xb8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d13f      	bne.n	8003ac0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003a40:	2320      	movs	r3, #32
 8003a42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8003a44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a4a:	f107 0310 	add.w	r3, r7, #16
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f003 f954 	bl	8006cfc <HAL_RCCEx_PeriphCLKConfig>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003a5a:	f7ff fa35 	bl	8002ec8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003a5e:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_UART_MspInit+0xbc>)
 8003a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a62:	4a1a      	ldr	r2, [pc, #104]	; (8003acc <HAL_UART_MspInit+0xbc>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003a6a:	4b18      	ldr	r3, [pc, #96]	; (8003acc <HAL_UART_MspInit+0xbc>)
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a76:	4b15      	ldr	r3, [pc, #84]	; (8003acc <HAL_UART_MspInit+0xbc>)
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	4a14      	ldr	r2, [pc, #80]	; (8003acc <HAL_UART_MspInit+0xbc>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_UART_MspInit+0xbc>)
 8003a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003a8e:	230c      	movs	r3, #12
 8003a90:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a92:	2302      	movs	r3, #2
 8003a94:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aac:	f002 f850 	bl	8005b50 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	205b      	movs	r0, #91	; 0x5b
 8003ab6:	f001 fce4 	bl	8005482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003aba:	205b      	movs	r0, #91	; 0x5b
 8003abc:	f001 fcfb 	bl	80054b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3778      	adds	r7, #120	; 0x78
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40008000 	.word	0x40008000
 8003acc:	40021000 	.word	0x40021000

08003ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ad0:	480d      	ldr	r0, [pc, #52]	; (8003b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ad2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ad4:	f7ff fc3c 	bl	8003350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ad8:	480c      	ldr	r0, [pc, #48]	; (8003b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8003ada:	490d      	ldr	r1, [pc, #52]	; (8003b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <LoopForever+0xe>)
  movs r3, #0
 8003ade:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003ae0:	e002      	b.n	8003ae8 <LoopCopyDataInit>

08003ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ae6:	3304      	adds	r3, #4

08003ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aec:	d3f9      	bcc.n	8003ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003af0:	4c0a      	ldr	r4, [pc, #40]	; (8003b1c <LoopForever+0x16>)
  movs r3, #0
 8003af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af4:	e001      	b.n	8003afa <LoopFillZerobss>

08003af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af8:	3204      	adds	r2, #4

08003afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003afc:	d3fb      	bcc.n	8003af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003afe:	f007 f9c1 	bl	800ae84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b02:	f7fe fb89 	bl	8002218 <main>

08003b06 <LoopForever>:

LoopForever:
    b LoopForever
 8003b06:	e7fe      	b.n	8003b06 <LoopForever>
  ldr   r0, =_estack
 8003b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b10:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003b14:	0800f9a8 	.word	0x0800f9a8
  ldr r2, =_sbss
 8003b18:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003b1c:	200007d0 	.word	0x200007d0

08003b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b20:	e7fe      	b.n	8003b20 <ADC1_2_IRQHandler>

08003b22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b2c:	2003      	movs	r0, #3
 8003b2e:	f001 fc9d 	bl	800546c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b32:	2000      	movs	r0, #0
 8003b34:	f000 f80e 	bl	8003b54 <HAL_InitTick>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	71fb      	strb	r3, [r7, #7]
 8003b42:	e001      	b.n	8003b48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b44:	f7ff fac8 	bl	80030d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b48:	79fb      	ldrb	r3, [r7, #7]

}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003b60:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <HAL_InitTick+0x68>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d022      	beq.n	8003bae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003b68:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <HAL_InitTick+0x6c>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <HAL_InitTick+0x68>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 fca8 	bl	80054d2 <HAL_SYSTICK_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10f      	bne.n	8003ba8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	d809      	bhi.n	8003ba2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	f04f 30ff 	mov.w	r0, #4294967295
 8003b96:	f001 fc74 	bl	8005482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <HAL_InitTick+0x70>)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	e007      	b.n	8003bb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
 8003ba6:	e004      	b.n	8003bb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
 8003bac:	e001      	b.n	8003bb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	2000000c 	.word	0x2000000c
 8003bc0:	20000004 	.word	0x20000004
 8003bc4:	20000008 	.word	0x20000008

08003bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_IncTick+0x1c>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_IncTick+0x20>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	4a03      	ldr	r2, [pc, #12]	; (8003be4 <HAL_IncTick+0x1c>)
 8003bd8:	6013      	str	r3, [r2, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	200007bc 	.word	0x200007bc
 8003be8:	2000000c 	.word	0x2000000c

08003bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <HAL_GetTick+0x14>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	200007bc 	.word	0x200007bc

08003c04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	609a      	str	r2, [r3, #8]
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	609a      	str	r2, [r3, #8]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3360      	adds	r3, #96	; 0x60
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <LL_ADC_SetOffset+0x44>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	03fff000 	.word	0x03fff000

08003cb4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3360      	adds	r3, #96	; 0x60
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3360      	adds	r3, #96	; 0x60
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b087      	sub	sp, #28
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3360      	adds	r3, #96	; 0x60
 8003d26:	461a      	mov	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003d40:	bf00      	nop
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3360      	adds	r3, #96	; 0x60
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	615a      	str	r2, [r3, #20]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b087      	sub	sp, #28
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3330      	adds	r3, #48	; 0x30
 8003dde:	461a      	mov	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	4413      	add	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	211f      	movs	r1, #31
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	401a      	ands	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0e9b      	lsrs	r3, r3, #26
 8003e06:	f003 011f 	and.w	r1, r3, #31
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	fa01 f303 	lsl.w	r3, r1, r3
 8003e14:	431a      	orrs	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b087      	sub	sp, #28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3314      	adds	r3, #20
 8003e36:	461a      	mov	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	0e5b      	lsrs	r3, r3, #25
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	4413      	add	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	0d1b      	lsrs	r3, r3, #20
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2107      	movs	r1, #7
 8003e54:	fa01 f303 	lsl.w	r3, r1, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	0d1b      	lsrs	r3, r3, #20
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e94:	43db      	mvns	r3, r3
 8003e96:	401a      	ands	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0318 	and.w	r3, r3, #24
 8003e9e:	4908      	ldr	r1, [pc, #32]	; (8003ec0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ea0:	40d9      	lsrs	r1, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	400b      	ands	r3, r1
 8003ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	0007ffff 	.word	0x0007ffff

08003ec4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003ef0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6093      	str	r3, [r2, #8]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f18:	d101      	bne.n	8003f1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003f3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f68:	d101      	bne.n	8003f6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f90:	f043 0201 	orr.w	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <LL_ADC_IsEnabled+0x18>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <LL_ADC_IsEnabled+0x1a>
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fde:	f043 0204 	orr.w	r2, r3, #4
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b04      	cmp	r3, #4
 8004004:	d101      	bne.n	800400a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b08      	cmp	r3, #8
 800402a:	d101      	bne.n	8004030 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e1a9      	b.n	80043ae <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7fd febf 	bl	8001dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff3f 	bl	8003f04 <LL_ADC_IsDeepPowerDownEnabled>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff25 	bl	8003ee0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff ff5a 	bl	8003f54 <LL_ADC_IsInternalRegulatorEnabled>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d115      	bne.n	80040d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff ff3e 	bl	8003f2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040b0:	4b9c      	ldr	r3, [pc, #624]	; (8004324 <HAL_ADC_Init+0x2e4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	099b      	lsrs	r3, r3, #6
 80040b6:	4a9c      	ldr	r2, [pc, #624]	; (8004328 <HAL_ADC_Init+0x2e8>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	099b      	lsrs	r3, r3, #6
 80040be:	3301      	adds	r3, #1
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80040c4:	e002      	b.n	80040cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f9      	bne.n	80040c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff ff3c 	bl	8003f54 <LL_ADC_IsInternalRegulatorEnabled>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10d      	bne.n	80040fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e6:	f043 0210 	orr.w	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f2:	f043 0201 	orr.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff ff75 	bl	8003ff2 <LL_ADC_REG_IsConversionOngoing>
 8004108:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	f040 8142 	bne.w	800439c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f040 813e 	bne.w	800439c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004128:	f043 0202 	orr.w	r2, r3, #2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ff35 	bl	8003fa4 <LL_ADC_IsEnabled>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d141      	bne.n	80041c4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004148:	d004      	beq.n	8004154 <HAL_ADC_Init+0x114>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a77      	ldr	r2, [pc, #476]	; (800432c <HAL_ADC_Init+0x2ec>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d10f      	bne.n	8004174 <HAL_ADC_Init+0x134>
 8004154:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004158:	f7ff ff24 	bl	8003fa4 <LL_ADC_IsEnabled>
 800415c:	4604      	mov	r4, r0
 800415e:	4873      	ldr	r0, [pc, #460]	; (800432c <HAL_ADC_Init+0x2ec>)
 8004160:	f7ff ff20 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004164:	4603      	mov	r3, r0
 8004166:	4323      	orrs	r3, r4
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e012      	b.n	800419a <HAL_ADC_Init+0x15a>
 8004174:	486e      	ldr	r0, [pc, #440]	; (8004330 <HAL_ADC_Init+0x2f0>)
 8004176:	f7ff ff15 	bl	8003fa4 <LL_ADC_IsEnabled>
 800417a:	4604      	mov	r4, r0
 800417c:	486d      	ldr	r0, [pc, #436]	; (8004334 <HAL_ADC_Init+0x2f4>)
 800417e:	f7ff ff11 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004182:	4603      	mov	r3, r0
 8004184:	431c      	orrs	r4, r3
 8004186:	486c      	ldr	r0, [pc, #432]	; (8004338 <HAL_ADC_Init+0x2f8>)
 8004188:	f7ff ff0c 	bl	8003fa4 <LL_ADC_IsEnabled>
 800418c:	4603      	mov	r3, r0
 800418e:	4323      	orrs	r3, r4
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d012      	beq.n	80041c4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041a6:	d004      	beq.n	80041b2 <HAL_ADC_Init+0x172>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a5f      	ldr	r2, [pc, #380]	; (800432c <HAL_ADC_Init+0x2ec>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d101      	bne.n	80041b6 <HAL_ADC_Init+0x176>
 80041b2:	4a62      	ldr	r2, [pc, #392]	; (800433c <HAL_ADC_Init+0x2fc>)
 80041b4:	e000      	b.n	80041b8 <HAL_ADC_Init+0x178>
 80041b6:	4a62      	ldr	r2, [pc, #392]	; (8004340 <HAL_ADC_Init+0x300>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f7ff fd20 	bl	8003c04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7f5b      	ldrb	r3, [r3, #29]
 80041c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80041d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80041da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d106      	bne.n	8004200 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	3b01      	subs	r3, #1
 80041f8:	045b      	lsls	r3, r3, #17
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	4b48      	ldr	r3, [pc, #288]	; (8004344 <HAL_ADC_Init+0x304>)
 8004224:	4013      	ands	r3, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	69b9      	ldr	r1, [r7, #24]
 800422c:	430b      	orrs	r3, r1
 800422e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fee4 	bl	8004018 <LL_ADC_INJ_IsConversionOngoing>
 8004250:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d17f      	bne.n	8004358 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d17c      	bne.n	8004358 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004262:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800426a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427a:	f023 0302 	bic.w	r3, r3, #2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	69b9      	ldr	r1, [r7, #24]
 8004284:	430b      	orrs	r3, r1
 8004286:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d017      	beq.n	80042c0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800429e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80042a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6911      	ldr	r1, [r2, #16]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80042be:	e013      	b.n	80042e8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d12a      	bne.n	8004348 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042fc:	f023 0304 	bic.w	r3, r3, #4
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004314:	430a      	orrs	r2, r1
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0201 	orr.w	r2, r2, #1
 8004320:	611a      	str	r2, [r3, #16]
 8004322:	e019      	b.n	8004358 <HAL_ADC_Init+0x318>
 8004324:	20000004 	.word	0x20000004
 8004328:	053e2d63 	.word	0x053e2d63
 800432c:	50000100 	.word	0x50000100
 8004330:	50000400 	.word	0x50000400
 8004334:	50000500 	.word	0x50000500
 8004338:	50000600 	.word	0x50000600
 800433c:	50000300 	.word	0x50000300
 8004340:	50000700 	.word	0x50000700
 8004344:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d10c      	bne.n	800437a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f023 010f 	bic.w	r1, r3, #15
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	1e5a      	subs	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
 8004378:	e007      	b.n	800438a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 020f 	bic.w	r2, r2, #15
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	f043 0201 	orr.w	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	65da      	str	r2, [r3, #92]	; 0x5c
 800439a:	e007      	b.n	80043ac <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	f043 0210 	orr.w	r2, r3, #16
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3724      	adds	r7, #36	; 0x24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd90      	pop	{r4, r7, pc}
 80043b6:	bf00      	nop

080043b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043cc:	d004      	beq.n	80043d8 <HAL_ADC_Start_DMA+0x20>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a5a      	ldr	r2, [pc, #360]	; (800453c <HAL_ADC_Start_DMA+0x184>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d101      	bne.n	80043dc <HAL_ADC_Start_DMA+0x24>
 80043d8:	4b59      	ldr	r3, [pc, #356]	; (8004540 <HAL_ADC_Start_DMA+0x188>)
 80043da:	e000      	b.n	80043de <HAL_ADC_Start_DMA+0x26>
 80043dc:	4b59      	ldr	r3, [pc, #356]	; (8004544 <HAL_ADC_Start_DMA+0x18c>)
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fd70 	bl	8003ec4 <LL_ADC_GetMultimode>
 80043e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fe01 	bl	8003ff2 <LL_ADC_REG_IsConversionOngoing>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f040 809b 	bne.w	800452e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <HAL_ADC_Start_DMA+0x4e>
 8004402:	2302      	movs	r3, #2
 8004404:	e096      	b.n	8004534 <HAL_ADC_Start_DMA+0x17c>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a4d      	ldr	r2, [pc, #308]	; (8004548 <HAL_ADC_Start_DMA+0x190>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d008      	beq.n	800442a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b05      	cmp	r3, #5
 8004422:	d002      	beq.n	800442a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b09      	cmp	r3, #9
 8004428:	d17a      	bne.n	8004520 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fcf6 	bl	8004e1c <ADC_Enable>
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d16d      	bne.n	8004516 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a3a      	ldr	r2, [pc, #232]	; (800453c <HAL_ADC_Start_DMA+0x184>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_ADC_Start_DMA+0xb4>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a3b      	ldr	r2, [pc, #236]	; (800454c <HAL_ADC_Start_DMA+0x194>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d002      	beq.n	8004468 <HAL_ADC_Start_DMA+0xb0>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	e003      	b.n	8004470 <HAL_ADC_Start_DMA+0xb8>
 8004468:	4b39      	ldr	r3, [pc, #228]	; (8004550 <HAL_ADC_Start_DMA+0x198>)
 800446a:	e001      	b.n	8004470 <HAL_ADC_Start_DMA+0xb8>
 800446c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	4293      	cmp	r3, r2
 8004476:	d002      	beq.n	800447e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d105      	bne.n	800448a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d006      	beq.n	80044a4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449a:	f023 0206 	bic.w	r2, r3, #6
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	661a      	str	r2, [r3, #96]	; 0x60
 80044a2:	e002      	b.n	80044aa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	4a29      	ldr	r2, [pc, #164]	; (8004554 <HAL_ADC_Start_DMA+0x19c>)
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	4a28      	ldr	r2, [pc, #160]	; (8004558 <HAL_ADC_Start_DMA+0x1a0>)
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	4a27      	ldr	r2, [pc, #156]	; (800455c <HAL_ADC_Start_DMA+0x1a4>)
 80044c0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	221c      	movs	r2, #28
 80044c8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0210 	orr.w	r2, r2, #16
 80044e0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3340      	adds	r3, #64	; 0x40
 80044fc:	4619      	mov	r1, r3
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f001 f89b 	bl	800563c <HAL_DMA_Start_IT>
 8004506:	4603      	mov	r3, r0
 8004508:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fd5b 	bl	8003fca <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004514:	e00d      	b.n	8004532 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800451e:	e008      	b.n	8004532 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800452c:	e001      	b.n	8004532 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800452e:	2302      	movs	r3, #2
 8004530:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004532:	7dfb      	ldrb	r3, [r7, #23]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	50000100 	.word	0x50000100
 8004540:	50000300 	.word	0x50000300
 8004544:	50000700 	.word	0x50000700
 8004548:	50000600 	.word	0x50000600
 800454c:	50000500 	.word	0x50000500
 8004550:	50000400 	.word	0x50000400
 8004554:	08004f49 	.word	0x08004f49
 8004558:	08005021 	.word	0x08005021
 800455c:	0800503d 	.word	0x0800503d

08004560 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b0b6      	sub	sp, #216	; 0xd8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d102      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x24>
 80045ba:	2302      	movs	r3, #2
 80045bc:	f000 bc13 	b.w	8004de6 <HAL_ADC_ConfigChannel+0x84a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fd10 	bl	8003ff2 <LL_ADC_REG_IsConversionOngoing>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f040 83f3 	bne.w	8004dc0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f7ff fbf1 	bl	8003dce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fcfe 	bl	8003ff2 <LL_ADC_REG_IsConversionOngoing>
 80045f6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fd0a 	bl	8004018 <LL_ADC_INJ_IsConversionOngoing>
 8004604:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004608:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800460c:	2b00      	cmp	r3, #0
 800460e:	f040 81d9 	bne.w	80049c4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004616:	2b00      	cmp	r3, #0
 8004618:	f040 81d4 	bne.w	80049c4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004624:	d10f      	bne.n	8004646 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2200      	movs	r2, #0
 8004630:	4619      	mov	r1, r3
 8004632:	f7ff fbf8 	bl	8003e26 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fb9f 	bl	8003d82 <LL_ADC_SetSamplingTimeCommonConfig>
 8004644:	e00e      	b.n	8004664 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6819      	ldr	r1, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	461a      	mov	r2, r3
 8004654:	f7ff fbe7 	bl	8003e26 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fb8f 	bl	8003d82 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	08db      	lsrs	r3, r3, #3
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b04      	cmp	r3, #4
 8004684:	d022      	beq.n	80046cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6919      	ldr	r1, [r3, #16]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004696:	f7ff fae9 	bl	8003c6c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6919      	ldr	r1, [r3, #16]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	461a      	mov	r2, r3
 80046a8:	f7ff fb35 	bl	8003d16 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d102      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x126>
 80046bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046c0:	e000      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x128>
 80046c2:	2300      	movs	r3, #0
 80046c4:	461a      	mov	r2, r3
 80046c6:	f7ff fb41 	bl	8003d4c <LL_ADC_SetOffsetSaturation>
 80046ca:	e17b      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff faee 	bl	8003cb4 <LL_ADC_GetOffsetChannel>
 80046d8:	4603      	mov	r3, r0
 80046da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x15c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2100      	movs	r1, #0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fae3 	bl	8003cb4 <LL_ADC_GetOffsetChannel>
 80046ee:	4603      	mov	r3, r0
 80046f0:	0e9b      	lsrs	r3, r3, #26
 80046f2:	f003 021f 	and.w	r2, r3, #31
 80046f6:	e01e      	b.n	8004736 <HAL_ADC_ConfigChannel+0x19a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2100      	movs	r1, #0
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fad8 	bl	8003cb4 <LL_ADC_GetOffsetChannel>
 8004704:	4603      	mov	r3, r0
 8004706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800470e:	fa93 f3a3 	rbit	r3, r3
 8004712:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800471a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800471e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004726:	2320      	movs	r3, #32
 8004728:	e004      	b.n	8004734 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800472a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473e:	2b00      	cmp	r3, #0
 8004740:	d105      	bne.n	800474e <HAL_ADC_ConfigChannel+0x1b2>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	0e9b      	lsrs	r3, r3, #26
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	e018      	b.n	8004780 <HAL_ADC_ConfigChannel+0x1e4>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004766:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800476a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004772:	2320      	movs	r3, #32
 8004774:	e004      	b.n	8004780 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004776:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800477a:	fab3 f383 	clz	r3, r3
 800477e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004780:	429a      	cmp	r2, r3
 8004782:	d106      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2200      	movs	r2, #0
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff faa7 	bl	8003ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2101      	movs	r1, #1
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fa8b 	bl	8003cb4 <LL_ADC_GetOffsetChannel>
 800479e:	4603      	mov	r3, r0
 80047a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <HAL_ADC_ConfigChannel+0x222>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2101      	movs	r1, #1
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fa80 	bl	8003cb4 <LL_ADC_GetOffsetChannel>
 80047b4:	4603      	mov	r3, r0
 80047b6:	0e9b      	lsrs	r3, r3, #26
 80047b8:	f003 021f 	and.w	r2, r3, #31
 80047bc:	e01e      	b.n	80047fc <HAL_ADC_ConfigChannel+0x260>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2101      	movs	r1, #1
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fa75 	bl	8003cb4 <LL_ADC_GetOffsetChannel>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80047dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80047e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80047ec:	2320      	movs	r3, #32
 80047ee:	e004      	b.n	80047fa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80047f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047f4:	fab3 f383 	clz	r3, r3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004804:	2b00      	cmp	r3, #0
 8004806:	d105      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x278>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	0e9b      	lsrs	r3, r3, #26
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	e018      	b.n	8004846 <HAL_ADC_ConfigChannel+0x2aa>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004820:	fa93 f3a3 	rbit	r3, r3
 8004824:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004828:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800482c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004838:	2320      	movs	r3, #32
 800483a:	e004      	b.n	8004846 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800483c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004846:	429a      	cmp	r2, r3
 8004848:	d106      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2200      	movs	r2, #0
 8004850:	2101      	movs	r1, #1
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff fa44 	bl	8003ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2102      	movs	r1, #2
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff fa28 	bl	8003cb4 <LL_ADC_GetOffsetChannel>
 8004864:	4603      	mov	r3, r0
 8004866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10a      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x2e8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2102      	movs	r1, #2
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fa1d 	bl	8003cb4 <LL_ADC_GetOffsetChannel>
 800487a:	4603      	mov	r3, r0
 800487c:	0e9b      	lsrs	r3, r3, #26
 800487e:	f003 021f 	and.w	r2, r3, #31
 8004882:	e01e      	b.n	80048c2 <HAL_ADC_ConfigChannel+0x326>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2102      	movs	r1, #2
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fa12 	bl	8003cb4 <LL_ADC_GetOffsetChannel>
 8004890:	4603      	mov	r3, r0
 8004892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80048a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80048aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80048b2:	2320      	movs	r3, #32
 80048b4:	e004      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80048b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048ba:	fab3 f383 	clz	r3, r3
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d105      	bne.n	80048da <HAL_ADC_ConfigChannel+0x33e>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	0e9b      	lsrs	r3, r3, #26
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	e016      	b.n	8004908 <HAL_ADC_ConfigChannel+0x36c>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048e6:	fa93 f3a3 	rbit	r3, r3
 80048ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80048ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80048f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80048fa:	2320      	movs	r3, #32
 80048fc:	e004      	b.n	8004908 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80048fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004908:	429a      	cmp	r2, r3
 800490a:	d106      	bne.n	800491a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2200      	movs	r2, #0
 8004912:	2102      	movs	r1, #2
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff f9e3 	bl	8003ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2103      	movs	r1, #3
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff f9c7 	bl	8003cb4 <LL_ADC_GetOffsetChannel>
 8004926:	4603      	mov	r3, r0
 8004928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x3aa>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2103      	movs	r1, #3
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff f9bc 	bl	8003cb4 <LL_ADC_GetOffsetChannel>
 800493c:	4603      	mov	r3, r0
 800493e:	0e9b      	lsrs	r3, r3, #26
 8004940:	f003 021f 	and.w	r2, r3, #31
 8004944:	e017      	b.n	8004976 <HAL_ADC_ConfigChannel+0x3da>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2103      	movs	r1, #3
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff f9b1 	bl	8003cb4 <LL_ADC_GetOffsetChannel>
 8004952:	4603      	mov	r3, r0
 8004954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004958:	fa93 f3a3 	rbit	r3, r3
 800495c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800495e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004960:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004968:	2320      	movs	r3, #32
 800496a:	e003      	b.n	8004974 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800496c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800497e:	2b00      	cmp	r3, #0
 8004980:	d105      	bne.n	800498e <HAL_ADC_ConfigChannel+0x3f2>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	0e9b      	lsrs	r3, r3, #26
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	e011      	b.n	80049b2 <HAL_ADC_ConfigChannel+0x416>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800499c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800499e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80049a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80049a6:	2320      	movs	r3, #32
 80049a8:	e003      	b.n	80049b2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80049aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ac:	fab3 f383 	clz	r3, r3
 80049b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d106      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2200      	movs	r2, #0
 80049bc:	2103      	movs	r1, #3
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff f98e 	bl	8003ce0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff faeb 	bl	8003fa4 <LL_ADC_IsEnabled>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f040 813d 	bne.w	8004c50 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f7ff fa4a 	bl	8003e7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4aa2      	ldr	r2, [pc, #648]	; (8004c78 <HAL_ADC_ConfigChannel+0x6dc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	f040 812e 	bne.w	8004c50 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <HAL_ADC_ConfigChannel+0x480>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	0e9b      	lsrs	r3, r3, #26
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	2b09      	cmp	r3, #9
 8004a12:	bf94      	ite	ls
 8004a14:	2301      	movls	r3, #1
 8004a16:	2300      	movhi	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	e019      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x4b4>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a24:	fa93 f3a3 	rbit	r3, r3
 8004a28:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004a34:	2320      	movs	r3, #32
 8004a36:	e003      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	3301      	adds	r3, #1
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	2b09      	cmp	r3, #9
 8004a48:	bf94      	ite	ls
 8004a4a:	2301      	movls	r3, #1
 8004a4c:	2300      	movhi	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d079      	beq.n	8004b48 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d107      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x4d4>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	0e9b      	lsrs	r3, r3, #26
 8004a66:	3301      	adds	r3, #1
 8004a68:	069b      	lsls	r3, r3, #26
 8004a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a6e:	e015      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x500>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a78:	fa93 f3a3 	rbit	r3, r3
 8004a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a80:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004a88:	2320      	movs	r3, #32
 8004a8a:	e003      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a8e:	fab3 f383 	clz	r3, r3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	3301      	adds	r3, #1
 8004a96:	069b      	lsls	r3, r3, #26
 8004a98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <HAL_ADC_ConfigChannel+0x520>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	0e9b      	lsrs	r3, r3, #26
 8004aae:	3301      	adds	r3, #1
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aba:	e017      	b.n	8004aec <HAL_ADC_ConfigChannel+0x550>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac4:	fa93 f3a3 	rbit	r3, r3
 8004ac8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004acc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004ad4:	2320      	movs	r3, #32
 8004ad6:	e003      	b.n	8004ae0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ada:	fab3 f383 	clz	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aec:	ea42 0103 	orr.w	r1, r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x576>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0e9b      	lsrs	r3, r3, #26
 8004b02:	3301      	adds	r3, #1
 8004b04:	f003 021f 	and.w	r2, r3, #31
 8004b08:	4613      	mov	r3, r2
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	4413      	add	r3, r2
 8004b0e:	051b      	lsls	r3, r3, #20
 8004b10:	e018      	b.n	8004b44 <HAL_ADC_ConfigChannel+0x5a8>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	fa93 f3a3 	rbit	r3, r3
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004b2a:	2320      	movs	r3, #32
 8004b2c:	e003      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b30:	fab3 f383 	clz	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	3301      	adds	r3, #1
 8004b38:	f003 021f 	and.w	r2, r3, #31
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	4413      	add	r3, r2
 8004b42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b44:	430b      	orrs	r3, r1
 8004b46:	e07e      	b.n	8004c46 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d107      	bne.n	8004b64 <HAL_ADC_ConfigChannel+0x5c8>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	0e9b      	lsrs	r3, r3, #26
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	069b      	lsls	r3, r3, #26
 8004b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b62:	e015      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x5f4>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	fa93 f3a3 	rbit	r3, r3
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004b7c:	2320      	movs	r3, #32
 8004b7e:	e003      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	fab3 f383 	clz	r3, r3
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	3301      	adds	r3, #1
 8004b8a:	069b      	lsls	r3, r3, #26
 8004b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x614>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	0e9b      	lsrs	r3, r3, #26
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	2101      	movs	r1, #1
 8004baa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bae:	e017      	b.n	8004be0 <HAL_ADC_ConfigChannel+0x644>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	fa93 f3a3 	rbit	r3, r3
 8004bbc:	61fb      	str	r3, [r7, #28]
  return result;
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004bc8:	2320      	movs	r3, #32
 8004bca:	e003      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	fab3 f383 	clz	r3, r3
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	f003 031f 	and.w	r3, r3, #31
 8004bda:	2101      	movs	r1, #1
 8004bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004be0:	ea42 0103 	orr.w	r1, r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10d      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x670>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	0e9b      	lsrs	r3, r3, #26
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	f003 021f 	and.w	r2, r3, #31
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	4413      	add	r3, r2
 8004c02:	3b1e      	subs	r3, #30
 8004c04:	051b      	lsls	r3, r3, #20
 8004c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	e01b      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x6a8>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	fa93 f3a3 	rbit	r3, r3
 8004c18:	613b      	str	r3, [r7, #16]
  return result;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004c24:	2320      	movs	r3, #32
 8004c26:	e003      	b.n	8004c30 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	fab3 f383 	clz	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	3301      	adds	r3, #1
 8004c32:	f003 021f 	and.w	r2, r3, #31
 8004c36:	4613      	mov	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3b1e      	subs	r3, #30
 8004c3e:	051b      	lsls	r3, r3, #20
 8004c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c44:	430b      	orrs	r3, r1
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	6892      	ldr	r2, [r2, #8]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	f7ff f8eb 	bl	8003e26 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_ADC_ConfigChannel+0x6e0>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80be 	beq.w	8004dda <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c66:	d004      	beq.n	8004c72 <HAL_ADC_ConfigChannel+0x6d6>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a04      	ldr	r2, [pc, #16]	; (8004c80 <HAL_ADC_ConfigChannel+0x6e4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10a      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x6ec>
 8004c72:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <HAL_ADC_ConfigChannel+0x6e8>)
 8004c74:	e009      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x6ee>
 8004c76:	bf00      	nop
 8004c78:	407f0000 	.word	0x407f0000
 8004c7c:	80080000 	.word	0x80080000
 8004c80:	50000100 	.word	0x50000100
 8004c84:	50000300 	.word	0x50000300
 8004c88:	4b59      	ldr	r3, [pc, #356]	; (8004df0 <HAL_ADC_ConfigChannel+0x854>)
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fe ffe0 	bl	8003c50 <LL_ADC_GetCommonPathInternalCh>
 8004c90:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a56      	ldr	r2, [pc, #344]	; (8004df4 <HAL_ADC_ConfigChannel+0x858>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_ADC_ConfigChannel+0x70c>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a55      	ldr	r2, [pc, #340]	; (8004df8 <HAL_ADC_ConfigChannel+0x85c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d13a      	bne.n	8004d1e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d134      	bne.n	8004d1e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cbc:	d005      	beq.n	8004cca <HAL_ADC_ConfigChannel+0x72e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a4e      	ldr	r2, [pc, #312]	; (8004dfc <HAL_ADC_ConfigChannel+0x860>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	f040 8085 	bne.w	8004dd4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cd2:	d004      	beq.n	8004cde <HAL_ADC_ConfigChannel+0x742>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a49      	ldr	r2, [pc, #292]	; (8004e00 <HAL_ADC_ConfigChannel+0x864>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d101      	bne.n	8004ce2 <HAL_ADC_ConfigChannel+0x746>
 8004cde:	4a49      	ldr	r2, [pc, #292]	; (8004e04 <HAL_ADC_ConfigChannel+0x868>)
 8004ce0:	e000      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x748>
 8004ce2:	4a43      	ldr	r2, [pc, #268]	; (8004df0 <HAL_ADC_ConfigChannel+0x854>)
 8004ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ce8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f7fe ff9b 	bl	8003c2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cf4:	4b44      	ldr	r3, [pc, #272]	; (8004e08 <HAL_ADC_ConfigChannel+0x86c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	099b      	lsrs	r3, r3, #6
 8004cfa:	4a44      	ldr	r2, [pc, #272]	; (8004e0c <HAL_ADC_ConfigChannel+0x870>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	099b      	lsrs	r3, r3, #6
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	4613      	mov	r3, r2
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d0e:	e002      	b.n	8004d16 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f9      	bne.n	8004d10 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d1c:	e05a      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a3b      	ldr	r2, [pc, #236]	; (8004e10 <HAL_ADC_ConfigChannel+0x874>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d125      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d11f      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a31      	ldr	r2, [pc, #196]	; (8004e00 <HAL_ADC_ConfigChannel+0x864>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d104      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x7ac>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a34      	ldr	r2, [pc, #208]	; (8004e14 <HAL_ADC_ConfigChannel+0x878>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d047      	beq.n	8004dd8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d50:	d004      	beq.n	8004d5c <HAL_ADC_ConfigChannel+0x7c0>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a2a      	ldr	r2, [pc, #168]	; (8004e00 <HAL_ADC_ConfigChannel+0x864>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d101      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x7c4>
 8004d5c:	4a29      	ldr	r2, [pc, #164]	; (8004e04 <HAL_ADC_ConfigChannel+0x868>)
 8004d5e:	e000      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x7c6>
 8004d60:	4a23      	ldr	r2, [pc, #140]	; (8004df0 <HAL_ADC_ConfigChannel+0x854>)
 8004d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f7fe ff5c 	bl	8003c2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d72:	e031      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a27      	ldr	r2, [pc, #156]	; (8004e18 <HAL_ADC_ConfigChannel+0x87c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d12d      	bne.n	8004dda <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d127      	bne.n	8004dda <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1c      	ldr	r2, [pc, #112]	; (8004e00 <HAL_ADC_ConfigChannel+0x864>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d022      	beq.n	8004dda <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d9c:	d004      	beq.n	8004da8 <HAL_ADC_ConfigChannel+0x80c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <HAL_ADC_ConfigChannel+0x864>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d101      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x810>
 8004da8:	4a16      	ldr	r2, [pc, #88]	; (8004e04 <HAL_ADC_ConfigChannel+0x868>)
 8004daa:	e000      	b.n	8004dae <HAL_ADC_ConfigChannel+0x812>
 8004dac:	4a10      	ldr	r2, [pc, #64]	; (8004df0 <HAL_ADC_ConfigChannel+0x854>)
 8004dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004db2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f7fe ff36 	bl	8003c2a <LL_ADC_SetCommonPathInternalCh>
 8004dbe:	e00c      	b.n	8004dda <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc4:	f043 0220 	orr.w	r2, r3, #32
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004dd2:	e002      	b.n	8004dda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dd4:	bf00      	nop
 8004dd6:	e000      	b.n	8004dda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004de2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	37d8      	adds	r7, #216	; 0xd8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	50000700 	.word	0x50000700
 8004df4:	c3210000 	.word	0xc3210000
 8004df8:	90c00010 	.word	0x90c00010
 8004dfc:	50000600 	.word	0x50000600
 8004e00:	50000100 	.word	0x50000100
 8004e04:	50000300 	.word	0x50000300
 8004e08:	20000004 	.word	0x20000004
 8004e0c:	053e2d63 	.word	0x053e2d63
 8004e10:	c7520000 	.word	0xc7520000
 8004e14:	50000500 	.word	0x50000500
 8004e18:	cb840000 	.word	0xcb840000

08004e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff f8b9 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d176      	bne.n	8004f26 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	4b3c      	ldr	r3, [pc, #240]	; (8004f30 <ADC_Enable+0x114>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00d      	beq.n	8004e62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4a:	f043 0210 	orr.w	r2, r3, #16
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e56:	f043 0201 	orr.w	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e062      	b.n	8004f28 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff f888 	bl	8003f7c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e74:	d004      	beq.n	8004e80 <ADC_Enable+0x64>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2e      	ldr	r2, [pc, #184]	; (8004f34 <ADC_Enable+0x118>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d101      	bne.n	8004e84 <ADC_Enable+0x68>
 8004e80:	4b2d      	ldr	r3, [pc, #180]	; (8004f38 <ADC_Enable+0x11c>)
 8004e82:	e000      	b.n	8004e86 <ADC_Enable+0x6a>
 8004e84:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <ADC_Enable+0x120>)
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe fee2 	bl	8003c50 <LL_ADC_GetCommonPathInternalCh>
 8004e8c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d013      	beq.n	8004ebe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e96:	4b2a      	ldr	r3, [pc, #168]	; (8004f40 <ADC_Enable+0x124>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	099b      	lsrs	r3, r3, #6
 8004e9c:	4a29      	ldr	r2, [pc, #164]	; (8004f44 <ADC_Enable+0x128>)
 8004e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea2:	099b      	lsrs	r3, r3, #6
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004eb0:	e002      	b.n	8004eb8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f9      	bne.n	8004eb2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ebe:	f7fe fe95 	bl	8003bec <HAL_GetTick>
 8004ec2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ec4:	e028      	b.n	8004f18 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff f86a 	bl	8003fa4 <LL_ADC_IsEnabled>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d104      	bne.n	8004ee0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff f84e 	bl	8003f7c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ee0:	f7fe fe84 	bl	8003bec <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d914      	bls.n	8004f18 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d00d      	beq.n	8004f18 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f00:	f043 0210 	orr.w	r2, r3, #16
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0c:	f043 0201 	orr.w	r2, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e007      	b.n	8004f28 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d1cf      	bne.n	8004ec6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	8000003f 	.word	0x8000003f
 8004f34:	50000100 	.word	0x50000100
 8004f38:	50000300 	.word	0x50000300
 8004f3c:	50000700 	.word	0x50000700
 8004f40:	20000004 	.word	0x20000004
 8004f44:	053e2d63 	.word	0x053e2d63

08004f48 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d14b      	bne.n	8004ffa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d021      	beq.n	8004fc0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fe ff11 	bl	8003da8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d032      	beq.n	8004ff2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d12b      	bne.n	8004ff2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d11f      	bne.n	8004ff2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8004fbe:	e018      	b.n	8004ff2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d111      	bne.n	8004ff2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d105      	bne.n	8004ff2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fea:	f043 0201 	orr.w	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff fab4 	bl	8004560 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ff8:	e00e      	b.n	8005018 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f7ff fabe 	bl	8004588 <HAL_ADC_ErrorCallback>
}
 800500c:	e004      	b.n	8005018 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff faa0 	bl	8004574 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505a:	f043 0204 	orr.w	r2, r3, #4
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff fa90 	bl	8004588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <LL_ADC_IsEnabled>:
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <LL_ADC_IsEnabled+0x18>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <LL_ADC_IsEnabled+0x1a>
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <LL_ADC_REG_IsConversionOngoing>:
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d101      	bne.n	80050ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80050bc:	b590      	push	{r4, r7, lr}
 80050be:	b0a1      	sub	sp, #132	; 0x84
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e0e7      	b.n	80052aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80050e2:	2300      	movs	r3, #0
 80050e4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80050e6:	2300      	movs	r3, #0
 80050e8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050f2:	d102      	bne.n	80050fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050f4:	4b6f      	ldr	r3, [pc, #444]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050f6:	60bb      	str	r3, [r7, #8]
 80050f8:	e009      	b.n	800510e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a6e      	ldr	r2, [pc, #440]	; (80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d102      	bne.n	800510a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005104:	4b6d      	ldr	r3, [pc, #436]	; (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005106:	60bb      	str	r3, [r7, #8]
 8005108:	e001      	b.n	800510e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0be      	b.n	80052aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff ffb1 	bl	8005096 <LL_ADC_REG_IsConversionOngoing>
 8005134:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff ffab 	bl	8005096 <LL_ADC_REG_IsConversionOngoing>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 80a0 	bne.w	8005288 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800514a:	2b00      	cmp	r3, #0
 800514c:	f040 809c 	bne.w	8005288 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005158:	d004      	beq.n	8005164 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a55      	ldr	r2, [pc, #340]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d101      	bne.n	8005168 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005164:	4b56      	ldr	r3, [pc, #344]	; (80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005166:	e000      	b.n	800516a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005168:	4b56      	ldr	r3, [pc, #344]	; (80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800516a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d04b      	beq.n	800520c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	6859      	ldr	r1, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005186:	035b      	lsls	r3, r3, #13
 8005188:	430b      	orrs	r3, r1
 800518a:	431a      	orrs	r2, r3
 800518c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800518e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005198:	d004      	beq.n	80051a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a45      	ldr	r2, [pc, #276]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d10f      	bne.n	80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80051a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80051a8:	f7ff ff62 	bl	8005070 <LL_ADC_IsEnabled>
 80051ac:	4604      	mov	r4, r0
 80051ae:	4841      	ldr	r0, [pc, #260]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051b0:	f7ff ff5e 	bl	8005070 <LL_ADC_IsEnabled>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4323      	orrs	r3, r4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	e012      	b.n	80051ea <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80051c4:	483c      	ldr	r0, [pc, #240]	; (80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80051c6:	f7ff ff53 	bl	8005070 <LL_ADC_IsEnabled>
 80051ca:	4604      	mov	r4, r0
 80051cc:	483b      	ldr	r0, [pc, #236]	; (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80051ce:	f7ff ff4f 	bl	8005070 <LL_ADC_IsEnabled>
 80051d2:	4603      	mov	r3, r0
 80051d4:	431c      	orrs	r4, r3
 80051d6:	483c      	ldr	r0, [pc, #240]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80051d8:	f7ff ff4a 	bl	8005070 <LL_ADC_IsEnabled>
 80051dc:	4603      	mov	r3, r0
 80051de:	4323      	orrs	r3, r4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf0c      	ite	eq
 80051e4:	2301      	moveq	r3, #1
 80051e6:	2300      	movne	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d056      	beq.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80051f6:	f023 030f 	bic.w	r3, r3, #15
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	6811      	ldr	r1, [r2, #0]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	6892      	ldr	r2, [r2, #8]
 8005202:	430a      	orrs	r2, r1
 8005204:	431a      	orrs	r2, r3
 8005206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005208:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800520a:	e047      	b.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800520c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005216:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005220:	d004      	beq.n	800522c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a23      	ldr	r2, [pc, #140]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10f      	bne.n	800524c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800522c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005230:	f7ff ff1e 	bl	8005070 <LL_ADC_IsEnabled>
 8005234:	4604      	mov	r4, r0
 8005236:	481f      	ldr	r0, [pc, #124]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005238:	f7ff ff1a 	bl	8005070 <LL_ADC_IsEnabled>
 800523c:	4603      	mov	r3, r0
 800523e:	4323      	orrs	r3, r4
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e012      	b.n	8005272 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800524c:	481a      	ldr	r0, [pc, #104]	; (80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800524e:	f7ff ff0f 	bl	8005070 <LL_ADC_IsEnabled>
 8005252:	4604      	mov	r4, r0
 8005254:	4819      	ldr	r0, [pc, #100]	; (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005256:	f7ff ff0b 	bl	8005070 <LL_ADC_IsEnabled>
 800525a:	4603      	mov	r3, r0
 800525c:	431c      	orrs	r4, r3
 800525e:	481a      	ldr	r0, [pc, #104]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005260:	f7ff ff06 	bl	8005070 <LL_ADC_IsEnabled>
 8005264:	4603      	mov	r3, r0
 8005266:	4323      	orrs	r3, r4
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d012      	beq.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800527e:	f023 030f 	bic.w	r3, r3, #15
 8005282:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005284:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005286:	e009      	b.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528c:	f043 0220 	orr.w	r2, r3, #32
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800529a:	e000      	b.n	800529e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800529c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80052a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3784      	adds	r7, #132	; 0x84
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd90      	pop	{r4, r7, pc}
 80052b2:	bf00      	nop
 80052b4:	50000100 	.word	0x50000100
 80052b8:	50000400 	.word	0x50000400
 80052bc:	50000500 	.word	0x50000500
 80052c0:	50000300 	.word	0x50000300
 80052c4:	50000700 	.word	0x50000700
 80052c8:	50000600 	.word	0x50000600

080052cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052dc:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <__NVIC_SetPriorityGrouping+0x44>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052e8:	4013      	ands	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052fe:	4a04      	ldr	r2, [pc, #16]	; (8005310 <__NVIC_SetPriorityGrouping+0x44>)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	60d3      	str	r3, [r2, #12]
}
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	e000ed00 	.word	0xe000ed00

08005314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005318:	4b04      	ldr	r3, [pc, #16]	; (800532c <__NVIC_GetPriorityGrouping+0x18>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	0a1b      	lsrs	r3, r3, #8
 800531e:	f003 0307 	and.w	r3, r3, #7
}
 8005322:	4618      	mov	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	e000ed00 	.word	0xe000ed00

08005330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800533a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533e:	2b00      	cmp	r3, #0
 8005340:	db0b      	blt.n	800535a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	f003 021f 	and.w	r2, r3, #31
 8005348:	4907      	ldr	r1, [pc, #28]	; (8005368 <__NVIC_EnableIRQ+0x38>)
 800534a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2001      	movs	r0, #1
 8005352:	fa00 f202 	lsl.w	r2, r0, r2
 8005356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	e000e100 	.word	0xe000e100

0800536c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	6039      	str	r1, [r7, #0]
 8005376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537c:	2b00      	cmp	r3, #0
 800537e:	db0a      	blt.n	8005396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	b2da      	uxtb	r2, r3
 8005384:	490c      	ldr	r1, [pc, #48]	; (80053b8 <__NVIC_SetPriority+0x4c>)
 8005386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538a:	0112      	lsls	r2, r2, #4
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	440b      	add	r3, r1
 8005390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005394:	e00a      	b.n	80053ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	4908      	ldr	r1, [pc, #32]	; (80053bc <__NVIC_SetPriority+0x50>)
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	3b04      	subs	r3, #4
 80053a4:	0112      	lsls	r2, r2, #4
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	440b      	add	r3, r1
 80053aa:	761a      	strb	r2, [r3, #24]
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	e000e100 	.word	0xe000e100
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b089      	sub	sp, #36	; 0x24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f1c3 0307 	rsb	r3, r3, #7
 80053da:	2b04      	cmp	r3, #4
 80053dc:	bf28      	it	cs
 80053de:	2304      	movcs	r3, #4
 80053e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	3304      	adds	r3, #4
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d902      	bls.n	80053f0 <NVIC_EncodePriority+0x30>
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	3b03      	subs	r3, #3
 80053ee:	e000      	b.n	80053f2 <NVIC_EncodePriority+0x32>
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f4:	f04f 32ff 	mov.w	r2, #4294967295
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43da      	mvns	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	401a      	ands	r2, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005408:	f04f 31ff 	mov.w	r1, #4294967295
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	43d9      	mvns	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005418:	4313      	orrs	r3, r2
         );
}
 800541a:	4618      	mov	r0, r3
 800541c:	3724      	adds	r7, #36	; 0x24
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3b01      	subs	r3, #1
 8005434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005438:	d301      	bcc.n	800543e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800543a:	2301      	movs	r3, #1
 800543c:	e00f      	b.n	800545e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800543e:	4a0a      	ldr	r2, [pc, #40]	; (8005468 <SysTick_Config+0x40>)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3b01      	subs	r3, #1
 8005444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005446:	210f      	movs	r1, #15
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	f7ff ff8e 	bl	800536c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005450:	4b05      	ldr	r3, [pc, #20]	; (8005468 <SysTick_Config+0x40>)
 8005452:	2200      	movs	r2, #0
 8005454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005456:	4b04      	ldr	r3, [pc, #16]	; (8005468 <SysTick_Config+0x40>)
 8005458:	2207      	movs	r2, #7
 800545a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	e000e010 	.word	0xe000e010

0800546c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ff29 	bl	80052cc <__NVIC_SetPriorityGrouping>
}
 800547a:	bf00      	nop
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	4603      	mov	r3, r0
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
 800548e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005490:	f7ff ff40 	bl	8005314 <__NVIC_GetPriorityGrouping>
 8005494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	6978      	ldr	r0, [r7, #20]
 800549c:	f7ff ff90 	bl	80053c0 <NVIC_EncodePriority>
 80054a0:	4602      	mov	r2, r0
 80054a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a6:	4611      	mov	r1, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff ff5f 	bl	800536c <__NVIC_SetPriority>
}
 80054ae:	bf00      	nop
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	4603      	mov	r3, r0
 80054be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff ff33 	bl	8005330 <__NVIC_EnableIRQ>
}
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff ffa4 	bl	8005428 <SysTick_Config>
 80054e0:	4603      	mov	r3, r0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e08d      	b.n	800561a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	4b47      	ldr	r3, [pc, #284]	; (8005624 <HAL_DMA_Init+0x138>)
 8005506:	429a      	cmp	r2, r3
 8005508:	d80f      	bhi.n	800552a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	4b45      	ldr	r3, [pc, #276]	; (8005628 <HAL_DMA_Init+0x13c>)
 8005512:	4413      	add	r3, r2
 8005514:	4a45      	ldr	r2, [pc, #276]	; (800562c <HAL_DMA_Init+0x140>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	091b      	lsrs	r3, r3, #4
 800551c:	009a      	lsls	r2, r3, #2
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a42      	ldr	r2, [pc, #264]	; (8005630 <HAL_DMA_Init+0x144>)
 8005526:	641a      	str	r2, [r3, #64]	; 0x40
 8005528:	e00e      	b.n	8005548 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	4b40      	ldr	r3, [pc, #256]	; (8005634 <HAL_DMA_Init+0x148>)
 8005532:	4413      	add	r3, r2
 8005534:	4a3d      	ldr	r2, [pc, #244]	; (800562c <HAL_DMA_Init+0x140>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	009a      	lsls	r2, r3, #2
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a3c      	ldr	r2, [pc, #240]	; (8005638 <HAL_DMA_Init+0x14c>)
 8005546:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800556c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa76 	bl	8005a8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a8:	d102      	bne.n	80055b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80055c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d010      	beq.n	80055f0 <HAL_DMA_Init+0x104>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d80c      	bhi.n	80055f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa96 	bl	8005b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80055ec:	605a      	str	r2, [r3, #4]
 80055ee:	e008      	b.n	8005602 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40020407 	.word	0x40020407
 8005628:	bffdfff8 	.word	0xbffdfff8
 800562c:	cccccccd 	.word	0xcccccccd
 8005630:	40020000 	.word	0x40020000
 8005634:	bffdfbf8 	.word	0xbffdfbf8
 8005638:	40020400 	.word	0x40020400

0800563c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_DMA_Start_IT+0x20>
 8005658:	2302      	movs	r3, #2
 800565a:	e066      	b.n	800572a <HAL_DMA_Start_IT+0xee>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d155      	bne.n	800571c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0201 	bic.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f9bb 	bl	8005a10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 020e 	orr.w	r2, r2, #14
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	e00f      	b.n	80056d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0204 	bic.w	r2, r2, #4
 80056c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 020a 	orr.w	r2, r2, #10
 80056d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005708:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 0201 	orr.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	e005      	b.n	8005728 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005724:	2302      	movs	r3, #2
 8005726:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005728:	7dfb      	ldrb	r3, [r7, #23]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d005      	beq.n	8005756 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2204      	movs	r2, #4
 800574e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
 8005754:	e037      	b.n	80057c6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 020e 	bic.w	r2, r2, #14
 8005764:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005774:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0201 	bic.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	f003 021f 	and.w	r2, r3, #31
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	2101      	movs	r1, #1
 8005794:	fa01 f202 	lsl.w	r2, r1, r2
 8005798:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057a2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00c      	beq.n	80057c6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057ba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057c4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d00d      	beq.n	8005818 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2204      	movs	r2, #4
 8005800:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	73fb      	strb	r3, [r7, #15]
 8005816:	e047      	b.n	80058a8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 020e 	bic.w	r2, r2, #14
 8005826:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0201 	bic.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005842:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005846:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584c:	f003 021f 	and.w	r2, r3, #31
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	2101      	movs	r1, #1
 8005856:	fa01 f202 	lsl.w	r2, r1, r2
 800585a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005864:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00c      	beq.n	8005888 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800587c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005886:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	4798      	blx	r3
    }
  }
  return status;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	2204      	movs	r2, #4
 80058d4:	409a      	lsls	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d026      	beq.n	800592c <HAL_DMA_IRQHandler+0x7a>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d021      	beq.n	800592c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d107      	bne.n	8005906 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0204 	bic.w	r2, r2, #4
 8005904:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	f003 021f 	and.w	r2, r3, #31
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	2104      	movs	r1, #4
 8005914:	fa01 f202 	lsl.w	r2, r1, r2
 8005918:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	2b00      	cmp	r3, #0
 8005920:	d071      	beq.n	8005a06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800592a:	e06c      	b.n	8005a06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	2202      	movs	r2, #2
 8005936:	409a      	lsls	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d02e      	beq.n	800599e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d029      	beq.n	800599e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10b      	bne.n	8005970 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 020a 	bic.w	r2, r2, #10
 8005966:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005974:	f003 021f 	and.w	r2, r3, #31
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	2102      	movs	r1, #2
 800597e:	fa01 f202 	lsl.w	r2, r1, r2
 8005982:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d038      	beq.n	8005a06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800599c:	e033      	b.n	8005a06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	f003 031f 	and.w	r3, r3, #31
 80059a6:	2208      	movs	r2, #8
 80059a8:	409a      	lsls	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d02a      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d025      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 020e 	bic.w	r2, r2, #14
 80059ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d0:	f003 021f 	and.w	r2, r3, #31
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d8:	2101      	movs	r1, #1
 80059da:	fa01 f202 	lsl.w	r2, r1, r2
 80059de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
}
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	f003 021f 	and.w	r2, r3, #31
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	2101      	movs	r1, #1
 8005a48:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b10      	cmp	r3, #16
 8005a5c:	d108      	bne.n	8005a70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a6e:	e007      	b.n	8005a80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	60da      	str	r2, [r3, #12]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4b16      	ldr	r3, [pc, #88]	; (8005af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d802      	bhi.n	8005aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005aa0:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e001      	b.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005aa6:	4b15      	ldr	r3, [pc, #84]	; (8005afc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005aa8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	3b08      	subs	r3, #8
 8005ab6:	4a12      	ldr	r2, [pc, #72]	; (8005b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8005abc:	091b      	lsrs	r3, r3, #4
 8005abe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac4:	089b      	lsrs	r3, r3, #2
 8005ac6:	009a      	lsls	r2, r3, #2
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	4413      	add	r3, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a0b      	ldr	r2, [pc, #44]	; (8005b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005ad6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f003 031f 	and.w	r3, r3, #31
 8005ade:	2201      	movs	r2, #1
 8005ae0:	409a      	lsls	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ae6:	bf00      	nop
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40020407 	.word	0x40020407
 8005af8:	40020800 	.word	0x40020800
 8005afc:	40020820 	.word	0x40020820
 8005b00:	cccccccd 	.word	0xcccccccd
 8005b04:	40020880 	.word	0x40020880

08005b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	461a      	mov	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a08      	ldr	r2, [pc, #32]	; (8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b2a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	2201      	movs	r2, #1
 8005b36:	409a      	lsls	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	1000823f 	.word	0x1000823f
 8005b4c:	40020940 	.word	0x40020940

08005b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b5e:	e15a      	b.n	8005e16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	2101      	movs	r1, #1
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 814c 	beq.w	8005e10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d005      	beq.n	8005b90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d130      	bne.n	8005bf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	fa02 f303 	lsl.w	r3, r2, r3
 8005bce:	43db      	mvns	r3, r3
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	091b      	lsrs	r3, r3, #4
 8005bdc:	f003 0201 	and.w	r2, r3, #1
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d017      	beq.n	8005c2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	2203      	movs	r2, #3
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4013      	ands	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d123      	bne.n	8005c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	08da      	lsrs	r2, r3, #3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3208      	adds	r2, #8
 8005c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	220f      	movs	r2, #15
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43db      	mvns	r3, r3
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	08da      	lsrs	r2, r3, #3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3208      	adds	r2, #8
 8005c7c:	6939      	ldr	r1, [r7, #16]
 8005c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	2203      	movs	r2, #3
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	43db      	mvns	r3, r3
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4013      	ands	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f003 0203 	and.w	r2, r3, #3
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 80a6 	beq.w	8005e10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cc4:	4b5b      	ldr	r3, [pc, #364]	; (8005e34 <HAL_GPIO_Init+0x2e4>)
 8005cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc8:	4a5a      	ldr	r2, [pc, #360]	; (8005e34 <HAL_GPIO_Init+0x2e4>)
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	6613      	str	r3, [r2, #96]	; 0x60
 8005cd0:	4b58      	ldr	r3, [pc, #352]	; (8005e34 <HAL_GPIO_Init+0x2e4>)
 8005cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	60bb      	str	r3, [r7, #8]
 8005cda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cdc:	4a56      	ldr	r2, [pc, #344]	; (8005e38 <HAL_GPIO_Init+0x2e8>)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	089b      	lsrs	r3, r3, #2
 8005ce2:	3302      	adds	r3, #2
 8005ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	220f      	movs	r2, #15
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d06:	d01f      	beq.n	8005d48 <HAL_GPIO_Init+0x1f8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a4c      	ldr	r2, [pc, #304]	; (8005e3c <HAL_GPIO_Init+0x2ec>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d019      	beq.n	8005d44 <HAL_GPIO_Init+0x1f4>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a4b      	ldr	r2, [pc, #300]	; (8005e40 <HAL_GPIO_Init+0x2f0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d013      	beq.n	8005d40 <HAL_GPIO_Init+0x1f0>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a4a      	ldr	r2, [pc, #296]	; (8005e44 <HAL_GPIO_Init+0x2f4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00d      	beq.n	8005d3c <HAL_GPIO_Init+0x1ec>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a49      	ldr	r2, [pc, #292]	; (8005e48 <HAL_GPIO_Init+0x2f8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <HAL_GPIO_Init+0x1e8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a48      	ldr	r2, [pc, #288]	; (8005e4c <HAL_GPIO_Init+0x2fc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d101      	bne.n	8005d34 <HAL_GPIO_Init+0x1e4>
 8005d30:	2305      	movs	r3, #5
 8005d32:	e00a      	b.n	8005d4a <HAL_GPIO_Init+0x1fa>
 8005d34:	2306      	movs	r3, #6
 8005d36:	e008      	b.n	8005d4a <HAL_GPIO_Init+0x1fa>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	e006      	b.n	8005d4a <HAL_GPIO_Init+0x1fa>
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e004      	b.n	8005d4a <HAL_GPIO_Init+0x1fa>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e002      	b.n	8005d4a <HAL_GPIO_Init+0x1fa>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <HAL_GPIO_Init+0x1fa>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	f002 0203 	and.w	r2, r2, #3
 8005d50:	0092      	lsls	r2, r2, #2
 8005d52:	4093      	lsls	r3, r2
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d5a:	4937      	ldr	r1, [pc, #220]	; (8005e38 <HAL_GPIO_Init+0x2e8>)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	089b      	lsrs	r3, r3, #2
 8005d60:	3302      	adds	r3, #2
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d68:	4b39      	ldr	r3, [pc, #228]	; (8005e50 <HAL_GPIO_Init+0x300>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4013      	ands	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d8c:	4a30      	ldr	r2, [pc, #192]	; (8005e50 <HAL_GPIO_Init+0x300>)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005d92:	4b2f      	ldr	r3, [pc, #188]	; (8005e50 <HAL_GPIO_Init+0x300>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005db6:	4a26      	ldr	r2, [pc, #152]	; (8005e50 <HAL_GPIO_Init+0x300>)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005dbc:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <HAL_GPIO_Init+0x300>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <HAL_GPIO_Init+0x300>)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005de6:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <HAL_GPIO_Init+0x300>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	43db      	mvns	r3, r3
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4013      	ands	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e0a:	4a11      	ldr	r2, [pc, #68]	; (8005e50 <HAL_GPIO_Init+0x300>)
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	3301      	adds	r3, #1
 8005e14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f47f ae9d 	bne.w	8005b60 <HAL_GPIO_Init+0x10>
  }
}
 8005e26:	bf00      	nop
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40021000 	.word	0x40021000
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	48000400 	.word	0x48000400
 8005e40:	48000800 	.word	0x48000800
 8005e44:	48000c00 	.word	0x48000c00
 8005e48:	48001000 	.word	0x48001000
 8005e4c:	48001400 	.word	0x48001400
 8005e50:	40010400 	.word	0x40010400

08005e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	887b      	ldrh	r3, [r7, #2]
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	73fb      	strb	r3, [r7, #15]
 8005e70:	e001      	b.n	8005e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e72:	2300      	movs	r3, #0
 8005e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	807b      	strh	r3, [r7, #2]
 8005e90:	4613      	mov	r3, r2
 8005e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e94:	787b      	ldrb	r3, [r7, #1]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e9a:	887a      	ldrh	r2, [r7, #2]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ea0:	e002      	b.n	8005ea8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ea2:	887a      	ldrh	r2, [r7, #2]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e08d      	b.n	8005fe2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fc f942 	bl	8002164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2224      	movs	r2, #36	; 0x24
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0201 	bic.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d107      	bne.n	8005f2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f2a:	609a      	str	r2, [r3, #8]
 8005f2c:	e006      	b.n	8005f3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005f3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d108      	bne.n	8005f56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f52:	605a      	str	r2, [r3, #4]
 8005f54:	e007      	b.n	8005f66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6812      	ldr	r2, [r2, #0]
 8005f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69d9      	ldr	r1, [r3, #28]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1a      	ldr	r2, [r3, #32]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d138      	bne.n	8006072 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800600a:	2302      	movs	r3, #2
 800600c:	e032      	b.n	8006074 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2224      	movs	r2, #36	; 0x24
 800601a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0201 	bic.w	r2, r2, #1
 800602c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800603c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6819      	ldr	r1, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	e000      	b.n	8006074 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006072:	2302      	movs	r3, #2
  }
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b20      	cmp	r3, #32
 8006094:	d139      	bne.n	800610a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e033      	b.n	800610c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2224      	movs	r2, #36	; 0x24
 80060b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0201 	bic.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	021b      	lsls	r3, r3, #8
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800610a:	2302      	movs	r3, #2
  }
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800611c:	4b05      	ldr	r3, [pc, #20]	; (8006134 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a04      	ldr	r2, [pc, #16]	; (8006134 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006126:	6013      	str	r3, [r2, #0]
}
 8006128:	bf00      	nop
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40007000 	.word	0x40007000

08006138 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d141      	bne.n	80061ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006146:	4b4b      	ldr	r3, [pc, #300]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800614e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006152:	d131      	bne.n	80061b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006154:	4b47      	ldr	r3, [pc, #284]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800615a:	4a46      	ldr	r2, [pc, #280]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800615c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006164:	4b43      	ldr	r3, [pc, #268]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800616c:	4a41      	ldr	r2, [pc, #260]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800616e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006172:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006174:	4b40      	ldr	r3, [pc, #256]	; (8006278 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2232      	movs	r2, #50	; 0x32
 800617a:	fb02 f303 	mul.w	r3, r2, r3
 800617e:	4a3f      	ldr	r2, [pc, #252]	; (800627c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	0c9b      	lsrs	r3, r3, #18
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800618a:	e002      	b.n	8006192 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3b01      	subs	r3, #1
 8006190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006192:	4b38      	ldr	r3, [pc, #224]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800619a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800619e:	d102      	bne.n	80061a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f2      	bne.n	800618c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061a6:	4b33      	ldr	r3, [pc, #204]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b2:	d158      	bne.n	8006266 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e057      	b.n	8006268 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061b8:	4b2e      	ldr	r3, [pc, #184]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061be:	4a2d      	ldr	r2, [pc, #180]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80061c8:	e04d      	b.n	8006266 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d0:	d141      	bne.n	8006256 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061d2:	4b28      	ldr	r3, [pc, #160]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061de:	d131      	bne.n	8006244 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061e0:	4b24      	ldr	r3, [pc, #144]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061e6:	4a23      	ldr	r2, [pc, #140]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061f0:	4b20      	ldr	r3, [pc, #128]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061f8:	4a1e      	ldr	r2, [pc, #120]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006200:	4b1d      	ldr	r3, [pc, #116]	; (8006278 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2232      	movs	r2, #50	; 0x32
 8006206:	fb02 f303 	mul.w	r3, r2, r3
 800620a:	4a1c      	ldr	r2, [pc, #112]	; (800627c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800620c:	fba2 2303 	umull	r2, r3, r2, r3
 8006210:	0c9b      	lsrs	r3, r3, #18
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006216:	e002      	b.n	800621e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3b01      	subs	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800621e:	4b15      	ldr	r3, [pc, #84]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800622a:	d102      	bne.n	8006232 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f2      	bne.n	8006218 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006232:	4b10      	ldr	r3, [pc, #64]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800623a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623e:	d112      	bne.n	8006266 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e011      	b.n	8006268 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006244:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800624a:	4a0a      	ldr	r2, [pc, #40]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800624c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006250:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006254:	e007      	b.n	8006266 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006256:	4b07      	ldr	r3, [pc, #28]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800625e:	4a05      	ldr	r2, [pc, #20]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006264:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	40007000 	.word	0x40007000
 8006278:	20000004 	.word	0x20000004
 800627c:	431bde83 	.word	0x431bde83

08006280 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4a04      	ldr	r2, [pc, #16]	; (800629c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800628a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800628e:	6093      	str	r3, [r2, #8]
}
 8006290:	bf00      	nop
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40007000 	.word	0x40007000

080062a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e2fe      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d075      	beq.n	80063aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062be:	4b97      	ldr	r3, [pc, #604]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 030c 	and.w	r3, r3, #12
 80062c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062c8:	4b94      	ldr	r3, [pc, #592]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b0c      	cmp	r3, #12
 80062d6:	d102      	bne.n	80062de <HAL_RCC_OscConfig+0x3e>
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d002      	beq.n	80062e4 <HAL_RCC_OscConfig+0x44>
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d10b      	bne.n	80062fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e4:	4b8d      	ldr	r3, [pc, #564]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d05b      	beq.n	80063a8 <HAL_RCC_OscConfig+0x108>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d157      	bne.n	80063a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e2d9      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006304:	d106      	bne.n	8006314 <HAL_RCC_OscConfig+0x74>
 8006306:	4b85      	ldr	r3, [pc, #532]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a84      	ldr	r2, [pc, #528]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 800630c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	e01d      	b.n	8006350 <HAL_RCC_OscConfig+0xb0>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800631c:	d10c      	bne.n	8006338 <HAL_RCC_OscConfig+0x98>
 800631e:	4b7f      	ldr	r3, [pc, #508]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a7e      	ldr	r2, [pc, #504]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 8006324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	4b7c      	ldr	r3, [pc, #496]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a7b      	ldr	r2, [pc, #492]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 8006330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	e00b      	b.n	8006350 <HAL_RCC_OscConfig+0xb0>
 8006338:	4b78      	ldr	r3, [pc, #480]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a77      	ldr	r2, [pc, #476]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 800633e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	4b75      	ldr	r3, [pc, #468]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a74      	ldr	r2, [pc, #464]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 800634a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800634e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d013      	beq.n	8006380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006358:	f7fd fc48 	bl	8003bec <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006360:	f7fd fc44 	bl	8003bec <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b64      	cmp	r3, #100	; 0x64
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e29e      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006372:	4b6a      	ldr	r3, [pc, #424]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0f0      	beq.n	8006360 <HAL_RCC_OscConfig+0xc0>
 800637e:	e014      	b.n	80063aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006380:	f7fd fc34 	bl	8003bec <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006388:	f7fd fc30 	bl	8003bec <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b64      	cmp	r3, #100	; 0x64
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e28a      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800639a:	4b60      	ldr	r3, [pc, #384]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0xe8>
 80063a6:	e000      	b.n	80063aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d075      	beq.n	80064a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063b6:	4b59      	ldr	r3, [pc, #356]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 030c 	and.w	r3, r3, #12
 80063be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063c0:	4b56      	ldr	r3, [pc, #344]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	2b0c      	cmp	r3, #12
 80063ce:	d102      	bne.n	80063d6 <HAL_RCC_OscConfig+0x136>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d002      	beq.n	80063dc <HAL_RCC_OscConfig+0x13c>
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d11f      	bne.n	800641c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063dc:	4b4f      	ldr	r3, [pc, #316]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_RCC_OscConfig+0x154>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e25d      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f4:	4b49      	ldr	r3, [pc, #292]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	4946      	ldr	r1, [pc, #280]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 8006404:	4313      	orrs	r3, r2
 8006406:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006408:	4b45      	ldr	r3, [pc, #276]	; (8006520 <HAL_RCC_OscConfig+0x280>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4618      	mov	r0, r3
 800640e:	f7fd fba1 	bl	8003b54 <HAL_InitTick>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d043      	beq.n	80064a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e249      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d023      	beq.n	800646c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006424:	4b3d      	ldr	r3, [pc, #244]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a3c      	ldr	r2, [pc, #240]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 800642a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800642e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7fd fbdc 	bl	8003bec <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006438:	f7fd fbd8 	bl	8003bec <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e232      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800644a:	4b34      	ldr	r3, [pc, #208]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0f0      	beq.n	8006438 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006456:	4b31      	ldr	r3, [pc, #196]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	061b      	lsls	r3, r3, #24
 8006464:	492d      	ldr	r1, [pc, #180]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 8006466:	4313      	orrs	r3, r2
 8006468:	604b      	str	r3, [r1, #4]
 800646a:	e01a      	b.n	80064a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800646c:	4b2b      	ldr	r3, [pc, #172]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a2a      	ldr	r2, [pc, #168]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 8006472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006478:	f7fd fbb8 	bl	8003bec <HAL_GetTick>
 800647c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006480:	f7fd fbb4 	bl	8003bec <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e20e      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006492:	4b22      	ldr	r3, [pc, #136]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1f0      	bne.n	8006480 <HAL_RCC_OscConfig+0x1e0>
 800649e:	e000      	b.n	80064a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d041      	beq.n	8006532 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d01c      	beq.n	80064f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064b6:	4b19      	ldr	r3, [pc, #100]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 80064b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064bc:	4a17      	ldr	r2, [pc, #92]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c6:	f7fd fb91 	bl	8003bec <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064ce:	f7fd fb8d 	bl	8003bec <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e1e7      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064e0:	4b0e      	ldr	r3, [pc, #56]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 80064e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0ef      	beq.n	80064ce <HAL_RCC_OscConfig+0x22e>
 80064ee:	e020      	b.n	8006532 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064f0:	4b0a      	ldr	r3, [pc, #40]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 80064f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064f6:	4a09      	ldr	r2, [pc, #36]	; (800651c <HAL_RCC_OscConfig+0x27c>)
 80064f8:	f023 0301 	bic.w	r3, r3, #1
 80064fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006500:	f7fd fb74 	bl	8003bec <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006506:	e00d      	b.n	8006524 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006508:	f7fd fb70 	bl	8003bec <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d906      	bls.n	8006524 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e1ca      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
 800651a:	bf00      	nop
 800651c:	40021000 	.word	0x40021000
 8006520:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006524:	4b8c      	ldr	r3, [pc, #560]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 8006526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1ea      	bne.n	8006508 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 80a6 	beq.w	800668c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006540:	2300      	movs	r3, #0
 8006542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006544:	4b84      	ldr	r3, [pc, #528]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 8006546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_RCC_OscConfig+0x2b4>
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <HAL_RCC_OscConfig+0x2b6>
 8006554:	2300      	movs	r3, #0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00d      	beq.n	8006576 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800655a:	4b7f      	ldr	r3, [pc, #508]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 800655c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655e:	4a7e      	ldr	r2, [pc, #504]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 8006560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006564:	6593      	str	r3, [r2, #88]	; 0x58
 8006566:	4b7c      	ldr	r3, [pc, #496]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 8006568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006572:	2301      	movs	r3, #1
 8006574:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006576:	4b79      	ldr	r3, [pc, #484]	; (800675c <HAL_RCC_OscConfig+0x4bc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657e:	2b00      	cmp	r3, #0
 8006580:	d118      	bne.n	80065b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006582:	4b76      	ldr	r3, [pc, #472]	; (800675c <HAL_RCC_OscConfig+0x4bc>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a75      	ldr	r2, [pc, #468]	; (800675c <HAL_RCC_OscConfig+0x4bc>)
 8006588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800658e:	f7fd fb2d 	bl	8003bec <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006596:	f7fd fb29 	bl	8003bec <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e183      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065a8:	4b6c      	ldr	r3, [pc, #432]	; (800675c <HAL_RCC_OscConfig+0x4bc>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f0      	beq.n	8006596 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d108      	bne.n	80065ce <HAL_RCC_OscConfig+0x32e>
 80065bc:	4b66      	ldr	r3, [pc, #408]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c2:	4a65      	ldr	r2, [pc, #404]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065cc:	e024      	b.n	8006618 <HAL_RCC_OscConfig+0x378>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	2b05      	cmp	r3, #5
 80065d4:	d110      	bne.n	80065f8 <HAL_RCC_OscConfig+0x358>
 80065d6:	4b60      	ldr	r3, [pc, #384]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 80065d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065dc:	4a5e      	ldr	r2, [pc, #376]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 80065de:	f043 0304 	orr.w	r3, r3, #4
 80065e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065e6:	4b5c      	ldr	r3, [pc, #368]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 80065e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ec:	4a5a      	ldr	r2, [pc, #360]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065f6:	e00f      	b.n	8006618 <HAL_RCC_OscConfig+0x378>
 80065f8:	4b57      	ldr	r3, [pc, #348]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fe:	4a56      	ldr	r2, [pc, #344]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006608:	4b53      	ldr	r3, [pc, #332]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660e:	4a52      	ldr	r2, [pc, #328]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 8006610:	f023 0304 	bic.w	r3, r3, #4
 8006614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d016      	beq.n	800664e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006620:	f7fd fae4 	bl	8003bec <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006626:	e00a      	b.n	800663e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006628:	f7fd fae0 	bl	8003bec <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	; 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e138      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800663e:	4b46      	ldr	r3, [pc, #280]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 8006640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0ed      	beq.n	8006628 <HAL_RCC_OscConfig+0x388>
 800664c:	e015      	b.n	800667a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664e:	f7fd facd 	bl	8003bec <HAL_GetTick>
 8006652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006654:	e00a      	b.n	800666c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006656:	f7fd fac9 	bl	8003bec <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	f241 3288 	movw	r2, #5000	; 0x1388
 8006664:	4293      	cmp	r3, r2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e121      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800666c:	4b3a      	ldr	r3, [pc, #232]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 800666e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1ed      	bne.n	8006656 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800667a:	7ffb      	ldrb	r3, [r7, #31]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d105      	bne.n	800668c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006680:	4b35      	ldr	r3, [pc, #212]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 8006682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006684:	4a34      	ldr	r2, [pc, #208]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 8006686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800668a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d03c      	beq.n	8006712 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01c      	beq.n	80066da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066a0:	4b2d      	ldr	r3, [pc, #180]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 80066a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066a6:	4a2c      	ldr	r2, [pc, #176]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 80066a8:	f043 0301 	orr.w	r3, r3, #1
 80066ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b0:	f7fd fa9c 	bl	8003bec <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066b6:	e008      	b.n	80066ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066b8:	f7fd fa98 	bl	8003bec <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e0f2      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066ca:	4b23      	ldr	r3, [pc, #140]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 80066cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0ef      	beq.n	80066b8 <HAL_RCC_OscConfig+0x418>
 80066d8:	e01b      	b.n	8006712 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066da:	4b1f      	ldr	r3, [pc, #124]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 80066dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066e0:	4a1d      	ldr	r2, [pc, #116]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 80066e2:	f023 0301 	bic.w	r3, r3, #1
 80066e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ea:	f7fd fa7f 	bl	8003bec <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066f2:	f7fd fa7b 	bl	8003bec <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e0d5      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006704:	4b14      	ldr	r3, [pc, #80]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 8006706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1ef      	bne.n	80066f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 80c9 	beq.w	80068ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800671c:	4b0e      	ldr	r3, [pc, #56]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 030c 	and.w	r3, r3, #12
 8006724:	2b0c      	cmp	r3, #12
 8006726:	f000 8083 	beq.w	8006830 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d15e      	bne.n	80067f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006732:	4b09      	ldr	r3, [pc, #36]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a08      	ldr	r2, [pc, #32]	; (8006758 <HAL_RCC_OscConfig+0x4b8>)
 8006738:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800673c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673e:	f7fd fa55 	bl	8003bec <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006744:	e00c      	b.n	8006760 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006746:	f7fd fa51 	bl	8003bec <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d905      	bls.n	8006760 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e0ab      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
 8006758:	40021000 	.word	0x40021000
 800675c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006760:	4b55      	ldr	r3, [pc, #340]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1ec      	bne.n	8006746 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800676c:	4b52      	ldr	r3, [pc, #328]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	4b52      	ldr	r3, [pc, #328]	; (80068bc <HAL_RCC_OscConfig+0x61c>)
 8006772:	4013      	ands	r3, r2
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6a11      	ldr	r1, [r2, #32]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800677c:	3a01      	subs	r2, #1
 800677e:	0112      	lsls	r2, r2, #4
 8006780:	4311      	orrs	r1, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006786:	0212      	lsls	r2, r2, #8
 8006788:	4311      	orrs	r1, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800678e:	0852      	lsrs	r2, r2, #1
 8006790:	3a01      	subs	r2, #1
 8006792:	0552      	lsls	r2, r2, #21
 8006794:	4311      	orrs	r1, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800679a:	0852      	lsrs	r2, r2, #1
 800679c:	3a01      	subs	r2, #1
 800679e:	0652      	lsls	r2, r2, #25
 80067a0:	4311      	orrs	r1, r2
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80067a6:	06d2      	lsls	r2, r2, #27
 80067a8:	430a      	orrs	r2, r1
 80067aa:	4943      	ldr	r1, [pc, #268]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067b0:	4b41      	ldr	r3, [pc, #260]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a40      	ldr	r2, [pc, #256]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 80067b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067bc:	4b3e      	ldr	r3, [pc, #248]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	4a3d      	ldr	r2, [pc, #244]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 80067c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c8:	f7fd fa10 	bl	8003bec <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d0:	f7fd fa0c 	bl	8003bec <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e066      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067e2:	4b35      	ldr	r3, [pc, #212]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0f0      	beq.n	80067d0 <HAL_RCC_OscConfig+0x530>
 80067ee:	e05e      	b.n	80068ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f0:	4b31      	ldr	r3, [pc, #196]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a30      	ldr	r2, [pc, #192]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 80067f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fc:	f7fd f9f6 	bl	8003bec <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006804:	f7fd f9f2 	bl	8003bec <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e04c      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006816:	4b28      	ldr	r3, [pc, #160]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1f0      	bne.n	8006804 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006822:	4b25      	ldr	r3, [pc, #148]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	4924      	ldr	r1, [pc, #144]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 8006828:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <HAL_RCC_OscConfig+0x620>)
 800682a:	4013      	ands	r3, r2
 800682c:	60cb      	str	r3, [r1, #12]
 800682e:	e03e      	b.n	80068ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e039      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800683c:	4b1e      	ldr	r3, [pc, #120]	; (80068b8 <HAL_RCC_OscConfig+0x618>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f003 0203 	and.w	r2, r3, #3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	429a      	cmp	r2, r3
 800684e:	d12c      	bne.n	80068aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	3b01      	subs	r3, #1
 800685c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800685e:	429a      	cmp	r2, r3
 8006860:	d123      	bne.n	80068aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800686e:	429a      	cmp	r2, r3
 8006870:	d11b      	bne.n	80068aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800687e:	429a      	cmp	r2, r3
 8006880:	d113      	bne.n	80068aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688c:	085b      	lsrs	r3, r3, #1
 800688e:	3b01      	subs	r3, #1
 8006890:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006892:	429a      	cmp	r2, r3
 8006894:	d109      	bne.n	80068aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a0:	085b      	lsrs	r3, r3, #1
 80068a2:	3b01      	subs	r3, #1
 80068a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d001      	beq.n	80068ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3720      	adds	r7, #32
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40021000 	.word	0x40021000
 80068bc:	019f800c 	.word	0x019f800c
 80068c0:	feeefffc 	.word	0xfeeefffc

080068c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e11e      	b.n	8006b1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068dc:	4b91      	ldr	r3, [pc, #580]	; (8006b24 <HAL_RCC_ClockConfig+0x260>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 030f 	and.w	r3, r3, #15
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d910      	bls.n	800690c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ea:	4b8e      	ldr	r3, [pc, #568]	; (8006b24 <HAL_RCC_ClockConfig+0x260>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f023 020f 	bic.w	r2, r3, #15
 80068f2:	498c      	ldr	r1, [pc, #560]	; (8006b24 <HAL_RCC_ClockConfig+0x260>)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068fa:	4b8a      	ldr	r3, [pc, #552]	; (8006b24 <HAL_RCC_ClockConfig+0x260>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d001      	beq.n	800690c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e106      	b.n	8006b1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d073      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2b03      	cmp	r3, #3
 800691e:	d129      	bne.n	8006974 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006920:	4b81      	ldr	r3, [pc, #516]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e0f4      	b.n	8006b1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006930:	f000 f99e 	bl	8006c70 <RCC_GetSysClockFreqFromPLLSource>
 8006934:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4a7c      	ldr	r2, [pc, #496]	; (8006b2c <HAL_RCC_ClockConfig+0x268>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d93f      	bls.n	80069be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800693e:	4b7a      	ldr	r3, [pc, #488]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006952:	2b00      	cmp	r3, #0
 8006954:	d033      	beq.n	80069be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800695a:	2b00      	cmp	r3, #0
 800695c:	d12f      	bne.n	80069be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800695e:	4b72      	ldr	r3, [pc, #456]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006966:	4a70      	ldr	r2, [pc, #448]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800696e:	2380      	movs	r3, #128	; 0x80
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	e024      	b.n	80069be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d107      	bne.n	800698c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800697c:	4b6a      	ldr	r3, [pc, #424]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0c6      	b.n	8006b1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800698c:	4b66      	ldr	r3, [pc, #408]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0be      	b.n	8006b1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800699c:	f000 f8ce 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 80069a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	4a61      	ldr	r2, [pc, #388]	; (8006b2c <HAL_RCC_ClockConfig+0x268>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d909      	bls.n	80069be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069aa:	4b5f      	ldr	r3, [pc, #380]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069b2:	4a5d      	ldr	r2, [pc, #372]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 80069b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80069ba:	2380      	movs	r3, #128	; 0x80
 80069bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069be:	4b5a      	ldr	r3, [pc, #360]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f023 0203 	bic.w	r2, r3, #3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	4957      	ldr	r1, [pc, #348]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d0:	f7fd f90c 	bl	8003bec <HAL_GetTick>
 80069d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d6:	e00a      	b.n	80069ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069d8:	f7fd f908 	bl	8003bec <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e095      	b.n	8006b1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ee:	4b4e      	ldr	r3, [pc, #312]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 020c 	and.w	r2, r3, #12
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d1eb      	bne.n	80069d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d023      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a18:	4b43      	ldr	r3, [pc, #268]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	4a42      	ldr	r2, [pc, #264]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006a1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006a30:	4b3d      	ldr	r3, [pc, #244]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a38:	4a3b      	ldr	r2, [pc, #236]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a40:	4b39      	ldr	r3, [pc, #228]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	4936      	ldr	r1, [pc, #216]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	608b      	str	r3, [r1, #8]
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2b80      	cmp	r3, #128	; 0x80
 8006a58:	d105      	bne.n	8006a66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a5a:	4b33      	ldr	r3, [pc, #204]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	4a32      	ldr	r2, [pc, #200]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006a60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a66:	4b2f      	ldr	r3, [pc, #188]	; (8006b24 <HAL_RCC_ClockConfig+0x260>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d21d      	bcs.n	8006ab0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a74:	4b2b      	ldr	r3, [pc, #172]	; (8006b24 <HAL_RCC_ClockConfig+0x260>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f023 020f 	bic.w	r2, r3, #15
 8006a7c:	4929      	ldr	r1, [pc, #164]	; (8006b24 <HAL_RCC_ClockConfig+0x260>)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a84:	f7fd f8b2 	bl	8003bec <HAL_GetTick>
 8006a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a8a:	e00a      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a8c:	f7fd f8ae 	bl	8003bec <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e03b      	b.n	8006b1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa2:	4b20      	ldr	r3, [pc, #128]	; (8006b24 <HAL_RCC_ClockConfig+0x260>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d1ed      	bne.n	8006a8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d008      	beq.n	8006ace <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006abc:	4b1a      	ldr	r3, [pc, #104]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	4917      	ldr	r1, [pc, #92]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d009      	beq.n	8006aee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ada:	4b13      	ldr	r3, [pc, #76]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	490f      	ldr	r1, [pc, #60]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006aee:	f000 f825 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8006af2:	4602      	mov	r2, r0
 8006af4:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <HAL_RCC_ClockConfig+0x264>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	091b      	lsrs	r3, r3, #4
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	490c      	ldr	r1, [pc, #48]	; (8006b30 <HAL_RCC_ClockConfig+0x26c>)
 8006b00:	5ccb      	ldrb	r3, [r1, r3]
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0a:	4a0a      	ldr	r2, [pc, #40]	; (8006b34 <HAL_RCC_ClockConfig+0x270>)
 8006b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <HAL_RCC_ClockConfig+0x274>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fd f81e 	bl	8003b54 <HAL_InitTick>
 8006b18:	4603      	mov	r3, r0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40022000 	.word	0x40022000
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	04c4b400 	.word	0x04c4b400
 8006b30:	0800f460 	.word	0x0800f460
 8006b34:	20000004 	.word	0x20000004
 8006b38:	20000008 	.word	0x20000008

08006b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b42:	4b2c      	ldr	r3, [pc, #176]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 030c 	and.w	r3, r3, #12
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d102      	bne.n	8006b54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b4e:	4b2a      	ldr	r3, [pc, #168]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	e047      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b54:	4b27      	ldr	r3, [pc, #156]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 030c 	and.w	r3, r3, #12
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d102      	bne.n	8006b66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b60:	4b26      	ldr	r3, [pc, #152]	; (8006bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	e03e      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006b66:	4b23      	ldr	r3, [pc, #140]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	2b0c      	cmp	r3, #12
 8006b70:	d136      	bne.n	8006be0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b72:	4b20      	ldr	r3, [pc, #128]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b7c:	4b1d      	ldr	r3, [pc, #116]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	091b      	lsrs	r3, r3, #4
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	3301      	adds	r3, #1
 8006b88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d10c      	bne.n	8006baa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b90:	4a1a      	ldr	r2, [pc, #104]	; (8006bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b98:	4a16      	ldr	r2, [pc, #88]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b9a:	68d2      	ldr	r2, [r2, #12]
 8006b9c:	0a12      	lsrs	r2, r2, #8
 8006b9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ba2:	fb02 f303 	mul.w	r3, r2, r3
 8006ba6:	617b      	str	r3, [r7, #20]
      break;
 8006ba8:	e00c      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006baa:	4a13      	ldr	r2, [pc, #76]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	4a10      	ldr	r2, [pc, #64]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bb4:	68d2      	ldr	r2, [r2, #12]
 8006bb6:	0a12      	lsrs	r2, r2, #8
 8006bb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006bbc:	fb02 f303 	mul.w	r3, r2, r3
 8006bc0:	617b      	str	r3, [r7, #20]
      break;
 8006bc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	0e5b      	lsrs	r3, r3, #25
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	3301      	adds	r3, #1
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	e001      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006be4:	693b      	ldr	r3, [r7, #16]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	00f42400 	.word	0x00f42400
 8006bfc:	016e3600 	.word	0x016e3600

08006c00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c04:	4b03      	ldr	r3, [pc, #12]	; (8006c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c06:	681b      	ldr	r3, [r3, #0]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	20000004 	.word	0x20000004

08006c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c1c:	f7ff fff0 	bl	8006c00 <HAL_RCC_GetHCLKFreq>
 8006c20:	4602      	mov	r2, r0
 8006c22:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	0a1b      	lsrs	r3, r3, #8
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	4904      	ldr	r1, [pc, #16]	; (8006c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c2e:	5ccb      	ldrb	r3, [r1, r3]
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	0800f470 	.word	0x0800f470

08006c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c48:	f7ff ffda 	bl	8006c00 <HAL_RCC_GetHCLKFreq>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	0adb      	lsrs	r3, r3, #11
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	4904      	ldr	r1, [pc, #16]	; (8006c6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c5a:	5ccb      	ldrb	r3, [r1, r3]
 8006c5c:	f003 031f 	and.w	r3, r3, #31
 8006c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	0800f470 	.word	0x0800f470

08006c70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c76:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c80:	4b1b      	ldr	r3, [pc, #108]	; (8006cf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	091b      	lsrs	r3, r3, #4
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d10c      	bne.n	8006cae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c94:	4a17      	ldr	r2, [pc, #92]	; (8006cf4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9c:	4a14      	ldr	r2, [pc, #80]	; (8006cf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c9e:	68d2      	ldr	r2, [r2, #12]
 8006ca0:	0a12      	lsrs	r2, r2, #8
 8006ca2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ca6:	fb02 f303 	mul.w	r3, r2, r3
 8006caa:	617b      	str	r3, [r7, #20]
    break;
 8006cac:	e00c      	b.n	8006cc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cae:	4a12      	ldr	r2, [pc, #72]	; (8006cf8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb6:	4a0e      	ldr	r2, [pc, #56]	; (8006cf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cb8:	68d2      	ldr	r2, [r2, #12]
 8006cba:	0a12      	lsrs	r2, r2, #8
 8006cbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006cc0:	fb02 f303 	mul.w	r3, r2, r3
 8006cc4:	617b      	str	r3, [r7, #20]
    break;
 8006cc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cc8:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	0e5b      	lsrs	r3, r3, #25
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006ce2:	687b      	ldr	r3, [r7, #4]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	016e3600 	.word	0x016e3600
 8006cf8:	00f42400 	.word	0x00f42400

08006cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d04:	2300      	movs	r3, #0
 8006d06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d08:	2300      	movs	r3, #0
 8006d0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8098 	beq.w	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d1e:	4b43      	ldr	r3, [pc, #268]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10d      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d2a:	4b40      	ldr	r3, [pc, #256]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2e:	4a3f      	ldr	r2, [pc, #252]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d34:	6593      	str	r3, [r2, #88]	; 0x58
 8006d36:	4b3d      	ldr	r3, [pc, #244]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d3e:	60bb      	str	r3, [r7, #8]
 8006d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d42:	2301      	movs	r3, #1
 8006d44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d46:	4b3a      	ldr	r3, [pc, #232]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a39      	ldr	r2, [pc, #228]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d52:	f7fc ff4b 	bl	8003bec <HAL_GetTick>
 8006d56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d58:	e009      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d5a:	f7fc ff47 	bl	8003bec <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d902      	bls.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	74fb      	strb	r3, [r7, #19]
        break;
 8006d6c:	e005      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d6e:	4b30      	ldr	r3, [pc, #192]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0ef      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006d7a:	7cfb      	ldrb	r3, [r7, #19]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d159      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d80:	4b2a      	ldr	r3, [pc, #168]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01e      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d019      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d9c:	4b23      	ldr	r3, [pc, #140]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006da8:	4b20      	ldr	r3, [pc, #128]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dae:	4a1f      	ldr	r2, [pc, #124]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006db8:	4b1c      	ldr	r3, [pc, #112]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbe:	4a1b      	ldr	r2, [pc, #108]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006dc8:	4a18      	ldr	r2, [pc, #96]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d016      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dda:	f7fc ff07 	bl	8003bec <HAL_GetTick>
 8006dde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006de0:	e00b      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de2:	f7fc ff03 	bl	8003bec <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d902      	bls.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	74fb      	strb	r3, [r7, #19]
            break;
 8006df8:	e006      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dfa:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0ec      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006e08:	7cfb      	ldrb	r3, [r7, #19]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10b      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e0e:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1c:	4903      	ldr	r1, [pc, #12]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006e24:	e008      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e26:	7cfb      	ldrb	r3, [r7, #19]
 8006e28:	74bb      	strb	r3, [r7, #18]
 8006e2a:	e005      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006e2c:	40021000 	.word	0x40021000
 8006e30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	7cfb      	ldrb	r3, [r7, #19]
 8006e36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e38:	7c7b      	ldrb	r3, [r7, #17]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d105      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e3e:	4ba7      	ldr	r3, [pc, #668]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e42:	4aa6      	ldr	r2, [pc, #664]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e56:	4ba1      	ldr	r3, [pc, #644]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5c:	f023 0203 	bic.w	r2, r3, #3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	499d      	ldr	r1, [pc, #628]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e78:	4b98      	ldr	r3, [pc, #608]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e7e:	f023 020c 	bic.w	r2, r3, #12
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	4995      	ldr	r1, [pc, #596]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0304 	and.w	r3, r3, #4
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e9a:	4b90      	ldr	r3, [pc, #576]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	498c      	ldr	r1, [pc, #560]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0308 	and.w	r3, r3, #8
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ebc:	4b87      	ldr	r3, [pc, #540]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	4984      	ldr	r1, [pc, #528]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ede:	4b7f      	ldr	r3, [pc, #508]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	497b      	ldr	r1, [pc, #492]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00a      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f00:	4b76      	ldr	r3, [pc, #472]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	4973      	ldr	r1, [pc, #460]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f22:	4b6e      	ldr	r3, [pc, #440]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	496a      	ldr	r1, [pc, #424]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00a      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f44:	4b65      	ldr	r3, [pc, #404]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	4962      	ldr	r1, [pc, #392]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f66:	4b5d      	ldr	r3, [pc, #372]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	4959      	ldr	r1, [pc, #356]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00a      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f88:	4b54      	ldr	r3, [pc, #336]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f8e:	f023 0203 	bic.w	r2, r3, #3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	4951      	ldr	r1, [pc, #324]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006faa:	4b4c      	ldr	r3, [pc, #304]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	4948      	ldr	r1, [pc, #288]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d015      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fcc:	4b43      	ldr	r3, [pc, #268]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	4940      	ldr	r1, [pc, #256]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fea:	d105      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fec:	4b3b      	ldr	r3, [pc, #236]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	4a3a      	ldr	r2, [pc, #232]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ff6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007000:	2b00      	cmp	r3, #0
 8007002:	d015      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007004:	4b35      	ldr	r3, [pc, #212]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007012:	4932      	ldr	r1, [pc, #200]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007014:	4313      	orrs	r3, r2
 8007016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007022:	d105      	bne.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007024:	4b2d      	ldr	r3, [pc, #180]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	4a2c      	ldr	r2, [pc, #176]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800702a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800702e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d015      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800703c:	4b27      	ldr	r3, [pc, #156]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007042:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	4924      	ldr	r1, [pc, #144]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800705a:	d105      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800705c:	4b1f      	ldr	r3, [pc, #124]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	4a1e      	ldr	r2, [pc, #120]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007066:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d015      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007074:	4b19      	ldr	r3, [pc, #100]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007082:	4916      	ldr	r1, [pc, #88]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007092:	d105      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007094:	4b11      	ldr	r3, [pc, #68]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	4a10      	ldr	r2, [pc, #64]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800709a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800709e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d019      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070ac:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	4908      	ldr	r1, [pc, #32]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070ca:	d109      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070cc:	4b03      	ldr	r3, [pc, #12]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	4a02      	ldr	r2, [pc, #8]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070d6:	60d3      	str	r3, [r2, #12]
 80070d8:	e002      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80070da:	bf00      	nop
 80070dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d015      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80070ec:	4b29      	ldr	r3, [pc, #164]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fa:	4926      	ldr	r1, [pc, #152]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800710a:	d105      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800710c:	4b21      	ldr	r3, [pc, #132]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	4a20      	ldr	r2, [pc, #128]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007116:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d015      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007124:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007132:	4918      	ldr	r1, [pc, #96]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007134:	4313      	orrs	r3, r2
 8007136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007142:	d105      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007144:	4b13      	ldr	r3, [pc, #76]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	4a12      	ldr	r2, [pc, #72]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800714a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800714e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d015      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800715c:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800715e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800716a:	490a      	ldr	r1, [pc, #40]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800716c:	4313      	orrs	r3, r2
 800716e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800717a:	d105      	bne.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800717c:	4b05      	ldr	r3, [pc, #20]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	4a04      	ldr	r2, [pc, #16]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007186:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007188:	7cbb      	ldrb	r3, [r7, #18]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	40021000 	.word	0x40021000

08007198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e09d      	b.n	80072e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d108      	bne.n	80071c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ba:	d009      	beq.n	80071d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	61da      	str	r2, [r3, #28]
 80071c2:	e005      	b.n	80071d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d106      	bne.n	80071f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fb ff30 	bl	8003050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007206:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007210:	d902      	bls.n	8007218 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	e002      	b.n	800721e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800721c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007226:	d007      	beq.n	8007238 <HAL_SPI_Init+0xa0>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007230:	d002      	beq.n	8007238 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007248:	431a      	orrs	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007270:	431a      	orrs	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727a:	ea42 0103 	orr.w	r1, r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	0c1b      	lsrs	r3, r3, #16
 8007294:	f003 0204 	and.w	r2, r3, #4
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	431a      	orrs	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80072b4:	ea42 0103 	orr.w	r1, r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69da      	ldr	r2, [r3, #28]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e049      	b.n	8007394 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d106      	bne.n	800731a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7fc fa9f 	bl	8003858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2202      	movs	r2, #2
 800731e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3304      	adds	r3, #4
 800732a:	4619      	mov	r1, r3
 800732c:	4610      	mov	r0, r2
 800732e:	f000 fef7 	bl	8008120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d001      	beq.n	80073b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e054      	b.n	800745e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0201 	orr.w	r2, r2, #1
 80073ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a26      	ldr	r2, [pc, #152]	; (800746c <HAL_TIM_Base_Start_IT+0xd0>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d022      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x80>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073de:	d01d      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x80>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a22      	ldr	r2, [pc, #136]	; (8007470 <HAL_TIM_Base_Start_IT+0xd4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d018      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x80>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a21      	ldr	r2, [pc, #132]	; (8007474 <HAL_TIM_Base_Start_IT+0xd8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d013      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x80>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1f      	ldr	r2, [pc, #124]	; (8007478 <HAL_TIM_Base_Start_IT+0xdc>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d00e      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x80>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1e      	ldr	r2, [pc, #120]	; (800747c <HAL_TIM_Base_Start_IT+0xe0>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d009      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x80>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1c      	ldr	r2, [pc, #112]	; (8007480 <HAL_TIM_Base_Start_IT+0xe4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d004      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x80>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1b      	ldr	r2, [pc, #108]	; (8007484 <HAL_TIM_Base_Start_IT+0xe8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d115      	bne.n	8007448 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689a      	ldr	r2, [r3, #8]
 8007422:	4b19      	ldr	r3, [pc, #100]	; (8007488 <HAL_TIM_Base_Start_IT+0xec>)
 8007424:	4013      	ands	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b06      	cmp	r3, #6
 800742c:	d015      	beq.n	800745a <HAL_TIM_Base_Start_IT+0xbe>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007434:	d011      	beq.n	800745a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0201 	orr.w	r2, r2, #1
 8007444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007446:	e008      	b.n	800745a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	e000      	b.n	800745c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800745a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	40012c00 	.word	0x40012c00
 8007470:	40000400 	.word	0x40000400
 8007474:	40000800 	.word	0x40000800
 8007478:	40000c00 	.word	0x40000c00
 800747c:	40013400 	.word	0x40013400
 8007480:	40014000 	.word	0x40014000
 8007484:	40015000 	.word	0x40015000
 8007488:	00010007 	.word	0x00010007

0800748c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e049      	b.n	8007532 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d106      	bne.n	80074b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f841 	bl	800753a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3304      	adds	r3, #4
 80074c8:	4619      	mov	r1, r3
 80074ca:	4610      	mov	r0, r2
 80074cc:	f000 fe28 	bl	8008120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007542:	bf00      	nop
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d109      	bne.n	8007574 <HAL_TIM_PWM_Start+0x24>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	bf14      	ite	ne
 800756c:	2301      	movne	r3, #1
 800756e:	2300      	moveq	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	e03c      	b.n	80075ee <HAL_TIM_PWM_Start+0x9e>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b04      	cmp	r3, #4
 8007578:	d109      	bne.n	800758e <HAL_TIM_PWM_Start+0x3e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	bf14      	ite	ne
 8007586:	2301      	movne	r3, #1
 8007588:	2300      	moveq	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	e02f      	b.n	80075ee <HAL_TIM_PWM_Start+0x9e>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d109      	bne.n	80075a8 <HAL_TIM_PWM_Start+0x58>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	bf14      	ite	ne
 80075a0:	2301      	movne	r3, #1
 80075a2:	2300      	moveq	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	e022      	b.n	80075ee <HAL_TIM_PWM_Start+0x9e>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b0c      	cmp	r3, #12
 80075ac:	d109      	bne.n	80075c2 <HAL_TIM_PWM_Start+0x72>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	bf14      	ite	ne
 80075ba:	2301      	movne	r3, #1
 80075bc:	2300      	moveq	r3, #0
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	e015      	b.n	80075ee <HAL_TIM_PWM_Start+0x9e>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d109      	bne.n	80075dc <HAL_TIM_PWM_Start+0x8c>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	bf14      	ite	ne
 80075d4:	2301      	movne	r3, #1
 80075d6:	2300      	moveq	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	e008      	b.n	80075ee <HAL_TIM_PWM_Start+0x9e>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	bf14      	ite	ne
 80075e8:	2301      	movne	r3, #1
 80075ea:	2300      	moveq	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e0a6      	b.n	8007744 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d104      	bne.n	8007606 <HAL_TIM_PWM_Start+0xb6>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007604:	e023      	b.n	800764e <HAL_TIM_PWM_Start+0xfe>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b04      	cmp	r3, #4
 800760a:	d104      	bne.n	8007616 <HAL_TIM_PWM_Start+0xc6>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007614:	e01b      	b.n	800764e <HAL_TIM_PWM_Start+0xfe>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b08      	cmp	r3, #8
 800761a:	d104      	bne.n	8007626 <HAL_TIM_PWM_Start+0xd6>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007624:	e013      	b.n	800764e <HAL_TIM_PWM_Start+0xfe>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b0c      	cmp	r3, #12
 800762a:	d104      	bne.n	8007636 <HAL_TIM_PWM_Start+0xe6>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007634:	e00b      	b.n	800764e <HAL_TIM_PWM_Start+0xfe>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b10      	cmp	r3, #16
 800763a:	d104      	bne.n	8007646 <HAL_TIM_PWM_Start+0xf6>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007644:	e003      	b.n	800764e <HAL_TIM_PWM_Start+0xfe>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2202      	movs	r2, #2
 800764a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2201      	movs	r2, #1
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f001 f9dc 	bl	8008a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a3a      	ldr	r2, [pc, #232]	; (800774c <HAL_TIM_PWM_Start+0x1fc>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d018      	beq.n	8007698 <HAL_TIM_PWM_Start+0x148>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a39      	ldr	r2, [pc, #228]	; (8007750 <HAL_TIM_PWM_Start+0x200>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d013      	beq.n	8007698 <HAL_TIM_PWM_Start+0x148>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a37      	ldr	r2, [pc, #220]	; (8007754 <HAL_TIM_PWM_Start+0x204>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d00e      	beq.n	8007698 <HAL_TIM_PWM_Start+0x148>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a36      	ldr	r2, [pc, #216]	; (8007758 <HAL_TIM_PWM_Start+0x208>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d009      	beq.n	8007698 <HAL_TIM_PWM_Start+0x148>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a34      	ldr	r2, [pc, #208]	; (800775c <HAL_TIM_PWM_Start+0x20c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d004      	beq.n	8007698 <HAL_TIM_PWM_Start+0x148>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a33      	ldr	r2, [pc, #204]	; (8007760 <HAL_TIM_PWM_Start+0x210>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d101      	bne.n	800769c <HAL_TIM_PWM_Start+0x14c>
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <HAL_TIM_PWM_Start+0x14e>
 800769c:	2300      	movs	r3, #0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a25      	ldr	r2, [pc, #148]	; (800774c <HAL_TIM_PWM_Start+0x1fc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d022      	beq.n	8007702 <HAL_TIM_PWM_Start+0x1b2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c4:	d01d      	beq.n	8007702 <HAL_TIM_PWM_Start+0x1b2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a26      	ldr	r2, [pc, #152]	; (8007764 <HAL_TIM_PWM_Start+0x214>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d018      	beq.n	8007702 <HAL_TIM_PWM_Start+0x1b2>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a24      	ldr	r2, [pc, #144]	; (8007768 <HAL_TIM_PWM_Start+0x218>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <HAL_TIM_PWM_Start+0x1b2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a23      	ldr	r2, [pc, #140]	; (800776c <HAL_TIM_PWM_Start+0x21c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00e      	beq.n	8007702 <HAL_TIM_PWM_Start+0x1b2>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a19      	ldr	r2, [pc, #100]	; (8007750 <HAL_TIM_PWM_Start+0x200>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d009      	beq.n	8007702 <HAL_TIM_PWM_Start+0x1b2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a18      	ldr	r2, [pc, #96]	; (8007754 <HAL_TIM_PWM_Start+0x204>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d004      	beq.n	8007702 <HAL_TIM_PWM_Start+0x1b2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a18      	ldr	r2, [pc, #96]	; (8007760 <HAL_TIM_PWM_Start+0x210>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d115      	bne.n	800772e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	4b19      	ldr	r3, [pc, #100]	; (8007770 <HAL_TIM_PWM_Start+0x220>)
 800770a:	4013      	ands	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b06      	cmp	r3, #6
 8007712:	d015      	beq.n	8007740 <HAL_TIM_PWM_Start+0x1f0>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800771a:	d011      	beq.n	8007740 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0201 	orr.w	r2, r2, #1
 800772a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800772c:	e008      	b.n	8007740 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f042 0201 	orr.w	r2, r2, #1
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	e000      	b.n	8007742 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007740:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	40012c00 	.word	0x40012c00
 8007750:	40013400 	.word	0x40013400
 8007754:	40014000 	.word	0x40014000
 8007758:	40014400 	.word	0x40014400
 800775c:	40014800 	.word	0x40014800
 8007760:	40015000 	.word	0x40015000
 8007764:	40000400 	.word	0x40000400
 8007768:	40000800 	.word	0x40000800
 800776c:	40000c00 	.word	0x40000c00
 8007770:	00010007 	.word	0x00010007

08007774 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e097      	b.n	80078b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d106      	bne.n	80077a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7fb ffb7 	bl	8003710 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2202      	movs	r2, #2
 80077a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6812      	ldr	r2, [r2, #0]
 80077b4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80077b8:	f023 0307 	bic.w	r3, r3, #7
 80077bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3304      	adds	r3, #4
 80077c6:	4619      	mov	r1, r3
 80077c8:	4610      	mov	r0, r2
 80077ca:	f000 fca9 	bl	8008120 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f6:	f023 0303 	bic.w	r3, r3, #3
 80077fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	4313      	orrs	r3, r2
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	4313      	orrs	r3, r2
 800780c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007814:	f023 030c 	bic.w	r3, r3, #12
 8007818:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	4313      	orrs	r3, r2
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	011a      	lsls	r2, r3, #4
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	031b      	lsls	r3, r3, #12
 8007844:	4313      	orrs	r3, r2
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007852:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800785a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	4313      	orrs	r3, r2
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d110      	bne.n	8007912 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d102      	bne.n	80078fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80078f6:	7b7b      	ldrb	r3, [r7, #13]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d001      	beq.n	8007900 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e069      	b.n	80079d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007910:	e031      	b.n	8007976 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b04      	cmp	r3, #4
 8007916:	d110      	bne.n	800793a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d102      	bne.n	8007924 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800791e:	7b3b      	ldrb	r3, [r7, #12]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d001      	beq.n	8007928 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e055      	b.n	80079d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007938:	e01d      	b.n	8007976 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d108      	bne.n	8007952 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d105      	bne.n	8007952 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007946:	7b7b      	ldrb	r3, [r7, #13]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d102      	bne.n	8007952 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800794c:	7b3b      	ldrb	r3, [r7, #12]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d001      	beq.n	8007956 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e03e      	b.n	80079d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2202      	movs	r2, #2
 800795a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2202      	movs	r2, #2
 8007962:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2202      	movs	r2, #2
 800796a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2202      	movs	r2, #2
 8007972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <HAL_TIM_Encoder_Start+0xc4>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b04      	cmp	r3, #4
 8007980:	d008      	beq.n	8007994 <HAL_TIM_Encoder_Start+0xd4>
 8007982:	e00f      	b.n	80079a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2201      	movs	r2, #1
 800798a:	2100      	movs	r1, #0
 800798c:	4618      	mov	r0, r3
 800798e:	f001 f841 	bl	8008a14 <TIM_CCxChannelCmd>
      break;
 8007992:	e016      	b.n	80079c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2201      	movs	r2, #1
 800799a:	2104      	movs	r1, #4
 800799c:	4618      	mov	r0, r3
 800799e:	f001 f839 	bl	8008a14 <TIM_CCxChannelCmd>
      break;
 80079a2:	e00e      	b.n	80079c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2201      	movs	r2, #1
 80079aa:	2100      	movs	r1, #0
 80079ac:	4618      	mov	r0, r3
 80079ae:	f001 f831 	bl	8008a14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2201      	movs	r2, #1
 80079b8:	2104      	movs	r1, #4
 80079ba:	4618      	mov	r0, r3
 80079bc:	f001 f82a 	bl	8008a14 <TIM_CCxChannelCmd>
      break;
 80079c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f042 0201 	orr.w	r2, r2, #1
 80079d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d020      	beq.n	8007a40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01b      	beq.n	8007a40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0202 	mvn.w	r2, #2
 8007a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fb5c 	bl	80080e4 <HAL_TIM_IC_CaptureCallback>
 8007a2c:	e005      	b.n	8007a3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fb4e 	bl	80080d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fb5f 	bl	80080f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f003 0304 	and.w	r3, r3, #4
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d020      	beq.n	8007a8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01b      	beq.n	8007a8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0204 	mvn.w	r2, #4
 8007a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fb36 	bl	80080e4 <HAL_TIM_IC_CaptureCallback>
 8007a78:	e005      	b.n	8007a86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fb28 	bl	80080d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fb39 	bl	80080f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f003 0308 	and.w	r3, r3, #8
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d020      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01b      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0208 	mvn.w	r2, #8
 8007aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2204      	movs	r2, #4
 8007aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fb10 	bl	80080e4 <HAL_TIM_IC_CaptureCallback>
 8007ac4:	e005      	b.n	8007ad2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fb02 	bl	80080d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fb13 	bl	80080f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f003 0310 	and.w	r3, r3, #16
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d020      	beq.n	8007b24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d01b      	beq.n	8007b24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f06f 0210 	mvn.w	r2, #16
 8007af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2208      	movs	r2, #8
 8007afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 faea 	bl	80080e4 <HAL_TIM_IC_CaptureCallback>
 8007b10:	e005      	b.n	8007b1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fadc 	bl	80080d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 faed 	bl	80080f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00c      	beq.n	8007b48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0201 	mvn.w	r2, #1
 8007b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fa fcbc 	bl	80024c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d104      	bne.n	8007b5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00c      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f815 	bl	8008ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00c      	beq.n	8007b9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d007      	beq.n	8007b9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 f80d 	bl	8008bb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00c      	beq.n	8007bbe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d007      	beq.n	8007bbe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 faa7 	bl	800810c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00c      	beq.n	8007be2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 0320 	and.w	r3, r3, #32
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d007      	beq.n	8007be2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f06f 0220 	mvn.w	r2, #32
 8007bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 ffd5 	bl	8008b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00c      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d007      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 ffe1 	bl	8008bc8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00c      	beq.n	8007c2a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d007      	beq.n	8007c2a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 ffd9 	bl	8008bdc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00c      	beq.n	8007c4e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d007      	beq.n	8007c4e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 ffd1 	bl	8008bf0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00c      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 ffc9 	bl	8008c04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d101      	bne.n	8007c9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c96:	2302      	movs	r3, #2
 8007c98:	e0ff      	b.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b14      	cmp	r3, #20
 8007ca6:	f200 80f0 	bhi.w	8007e8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007caa:	a201      	add	r2, pc, #4	; (adr r2, 8007cb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007d05 	.word	0x08007d05
 8007cb4:	08007e8b 	.word	0x08007e8b
 8007cb8:	08007e8b 	.word	0x08007e8b
 8007cbc:	08007e8b 	.word	0x08007e8b
 8007cc0:	08007d45 	.word	0x08007d45
 8007cc4:	08007e8b 	.word	0x08007e8b
 8007cc8:	08007e8b 	.word	0x08007e8b
 8007ccc:	08007e8b 	.word	0x08007e8b
 8007cd0:	08007d87 	.word	0x08007d87
 8007cd4:	08007e8b 	.word	0x08007e8b
 8007cd8:	08007e8b 	.word	0x08007e8b
 8007cdc:	08007e8b 	.word	0x08007e8b
 8007ce0:	08007dc7 	.word	0x08007dc7
 8007ce4:	08007e8b 	.word	0x08007e8b
 8007ce8:	08007e8b 	.word	0x08007e8b
 8007cec:	08007e8b 	.word	0x08007e8b
 8007cf0:	08007e09 	.word	0x08007e09
 8007cf4:	08007e8b 	.word	0x08007e8b
 8007cf8:	08007e8b 	.word	0x08007e8b
 8007cfc:	08007e8b 	.word	0x08007e8b
 8007d00:	08007e49 	.word	0x08007e49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 fabc 	bl	8008288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699a      	ldr	r2, [r3, #24]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0208 	orr.w	r2, r2, #8
 8007d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	699a      	ldr	r2, [r3, #24]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 0204 	bic.w	r2, r2, #4
 8007d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6999      	ldr	r1, [r3, #24]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	619a      	str	r2, [r3, #24]
      break;
 8007d42:	e0a5      	b.n	8007e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 fb36 	bl	80083bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699a      	ldr	r2, [r3, #24]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6999      	ldr	r1, [r3, #24]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	021a      	lsls	r2, r3, #8
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	619a      	str	r2, [r3, #24]
      break;
 8007d84:	e084      	b.n	8007e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fba9 	bl	80084e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	69da      	ldr	r2, [r3, #28]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f042 0208 	orr.w	r2, r2, #8
 8007da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	69da      	ldr	r2, [r3, #28]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0204 	bic.w	r2, r2, #4
 8007db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69d9      	ldr	r1, [r3, #28]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	691a      	ldr	r2, [r3, #16]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	61da      	str	r2, [r3, #28]
      break;
 8007dc4:	e064      	b.n	8007e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68b9      	ldr	r1, [r7, #8]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fc1b 	bl	8008608 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69da      	ldr	r2, [r3, #28]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69da      	ldr	r2, [r3, #28]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69d9      	ldr	r1, [r3, #28]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	021a      	lsls	r2, r3, #8
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	61da      	str	r2, [r3, #28]
      break;
 8007e06:	e043      	b.n	8007e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68b9      	ldr	r1, [r7, #8]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 fc8e 	bl	8008730 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0208 	orr.w	r2, r2, #8
 8007e22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0204 	bic.w	r2, r2, #4
 8007e32:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	691a      	ldr	r2, [r3, #16]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007e46:	e023      	b.n	8007e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68b9      	ldr	r1, [r7, #8]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 fcd8 	bl	8008804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e72:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	021a      	lsls	r2, r3, #8
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007e88:	e002      	b.n	8007e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop

08007ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <HAL_TIM_ConfigClockSource+0x1c>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e0f6      	b.n	80080ae <HAL_TIM_ConfigClockSource+0x20a>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a6f      	ldr	r2, [pc, #444]	; (80080b8 <HAL_TIM_ConfigClockSource+0x214>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	f000 80c1 	beq.w	8008082 <HAL_TIM_ConfigClockSource+0x1de>
 8007f00:	4a6d      	ldr	r2, [pc, #436]	; (80080b8 <HAL_TIM_ConfigClockSource+0x214>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	f200 80c6 	bhi.w	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f08:	4a6c      	ldr	r2, [pc, #432]	; (80080bc <HAL_TIM_ConfigClockSource+0x218>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	f000 80b9 	beq.w	8008082 <HAL_TIM_ConfigClockSource+0x1de>
 8007f10:	4a6a      	ldr	r2, [pc, #424]	; (80080bc <HAL_TIM_ConfigClockSource+0x218>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	f200 80be 	bhi.w	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f18:	4a69      	ldr	r2, [pc, #420]	; (80080c0 <HAL_TIM_ConfigClockSource+0x21c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	f000 80b1 	beq.w	8008082 <HAL_TIM_ConfigClockSource+0x1de>
 8007f20:	4a67      	ldr	r2, [pc, #412]	; (80080c0 <HAL_TIM_ConfigClockSource+0x21c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	f200 80b6 	bhi.w	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f28:	4a66      	ldr	r2, [pc, #408]	; (80080c4 <HAL_TIM_ConfigClockSource+0x220>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	f000 80a9 	beq.w	8008082 <HAL_TIM_ConfigClockSource+0x1de>
 8007f30:	4a64      	ldr	r2, [pc, #400]	; (80080c4 <HAL_TIM_ConfigClockSource+0x220>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	f200 80ae 	bhi.w	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f38:	4a63      	ldr	r2, [pc, #396]	; (80080c8 <HAL_TIM_ConfigClockSource+0x224>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	f000 80a1 	beq.w	8008082 <HAL_TIM_ConfigClockSource+0x1de>
 8007f40:	4a61      	ldr	r2, [pc, #388]	; (80080c8 <HAL_TIM_ConfigClockSource+0x224>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	f200 80a6 	bhi.w	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f48:	4a60      	ldr	r2, [pc, #384]	; (80080cc <HAL_TIM_ConfigClockSource+0x228>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	f000 8099 	beq.w	8008082 <HAL_TIM_ConfigClockSource+0x1de>
 8007f50:	4a5e      	ldr	r2, [pc, #376]	; (80080cc <HAL_TIM_ConfigClockSource+0x228>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	f200 809e 	bhi.w	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007f5c:	f000 8091 	beq.w	8008082 <HAL_TIM_ConfigClockSource+0x1de>
 8007f60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007f64:	f200 8096 	bhi.w	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f6c:	f000 8089 	beq.w	8008082 <HAL_TIM_ConfigClockSource+0x1de>
 8007f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f74:	f200 808e 	bhi.w	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f7c:	d03e      	beq.n	8007ffc <HAL_TIM_ConfigClockSource+0x158>
 8007f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f82:	f200 8087 	bhi.w	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f8a:	f000 8086 	beq.w	800809a <HAL_TIM_ConfigClockSource+0x1f6>
 8007f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f92:	d87f      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f94:	2b70      	cmp	r3, #112	; 0x70
 8007f96:	d01a      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0x12a>
 8007f98:	2b70      	cmp	r3, #112	; 0x70
 8007f9a:	d87b      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f9c:	2b60      	cmp	r3, #96	; 0x60
 8007f9e:	d050      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0x19e>
 8007fa0:	2b60      	cmp	r3, #96	; 0x60
 8007fa2:	d877      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fa4:	2b50      	cmp	r3, #80	; 0x50
 8007fa6:	d03c      	beq.n	8008022 <HAL_TIM_ConfigClockSource+0x17e>
 8007fa8:	2b50      	cmp	r3, #80	; 0x50
 8007faa:	d873      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fac:	2b40      	cmp	r3, #64	; 0x40
 8007fae:	d058      	beq.n	8008062 <HAL_TIM_ConfigClockSource+0x1be>
 8007fb0:	2b40      	cmp	r3, #64	; 0x40
 8007fb2:	d86f      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fb4:	2b30      	cmp	r3, #48	; 0x30
 8007fb6:	d064      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x1de>
 8007fb8:	2b30      	cmp	r3, #48	; 0x30
 8007fba:	d86b      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fbc:	2b20      	cmp	r3, #32
 8007fbe:	d060      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x1de>
 8007fc0:	2b20      	cmp	r3, #32
 8007fc2:	d867      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d05c      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x1de>
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d05a      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x1de>
 8007fcc:	e062      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	6899      	ldr	r1, [r3, #8]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f000 fcf9 	bl	80089d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	609a      	str	r2, [r3, #8]
      break;
 8007ffa:	e04f      	b.n	800809c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	6899      	ldr	r1, [r3, #8]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f000 fce2 	bl	80089d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689a      	ldr	r2, [r3, #8]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800801e:	609a      	str	r2, [r3, #8]
      break;
 8008020:	e03c      	b.n	800809c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	6859      	ldr	r1, [r3, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	461a      	mov	r2, r3
 8008030:	f000 fc54 	bl	80088dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2150      	movs	r1, #80	; 0x50
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fcad 	bl	800899a <TIM_ITRx_SetConfig>
      break;
 8008040:	e02c      	b.n	800809c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6818      	ldr	r0, [r3, #0]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	6859      	ldr	r1, [r3, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	461a      	mov	r2, r3
 8008050:	f000 fc73 	bl	800893a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2160      	movs	r1, #96	; 0x60
 800805a:	4618      	mov	r0, r3
 800805c:	f000 fc9d 	bl	800899a <TIM_ITRx_SetConfig>
      break;
 8008060:	e01c      	b.n	800809c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	6859      	ldr	r1, [r3, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	461a      	mov	r2, r3
 8008070:	f000 fc34 	bl	80088dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2140      	movs	r1, #64	; 0x40
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fc8d 	bl	800899a <TIM_ITRx_SetConfig>
      break;
 8008080:	e00c      	b.n	800809c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f000 fc84 	bl	800899a <TIM_ITRx_SetConfig>
      break;
 8008092:	e003      	b.n	800809c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	73fb      	strb	r3, [r7, #15]
      break;
 8008098:	e000      	b.n	800809c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800809a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	00100070 	.word	0x00100070
 80080bc:	00100060 	.word	0x00100060
 80080c0:	00100050 	.word	0x00100050
 80080c4:	00100040 	.word	0x00100040
 80080c8:	00100030 	.word	0x00100030
 80080cc:	00100020 	.word	0x00100020

080080d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a4c      	ldr	r2, [pc, #304]	; (8008264 <TIM_Base_SetConfig+0x144>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d017      	beq.n	8008168 <TIM_Base_SetConfig+0x48>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813e:	d013      	beq.n	8008168 <TIM_Base_SetConfig+0x48>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a49      	ldr	r2, [pc, #292]	; (8008268 <TIM_Base_SetConfig+0x148>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00f      	beq.n	8008168 <TIM_Base_SetConfig+0x48>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a48      	ldr	r2, [pc, #288]	; (800826c <TIM_Base_SetConfig+0x14c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00b      	beq.n	8008168 <TIM_Base_SetConfig+0x48>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a47      	ldr	r2, [pc, #284]	; (8008270 <TIM_Base_SetConfig+0x150>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d007      	beq.n	8008168 <TIM_Base_SetConfig+0x48>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a46      	ldr	r2, [pc, #280]	; (8008274 <TIM_Base_SetConfig+0x154>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_Base_SetConfig+0x48>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a45      	ldr	r2, [pc, #276]	; (8008278 <TIM_Base_SetConfig+0x158>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d108      	bne.n	800817a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a39      	ldr	r2, [pc, #228]	; (8008264 <TIM_Base_SetConfig+0x144>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d023      	beq.n	80081ca <TIM_Base_SetConfig+0xaa>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008188:	d01f      	beq.n	80081ca <TIM_Base_SetConfig+0xaa>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a36      	ldr	r2, [pc, #216]	; (8008268 <TIM_Base_SetConfig+0x148>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d01b      	beq.n	80081ca <TIM_Base_SetConfig+0xaa>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a35      	ldr	r2, [pc, #212]	; (800826c <TIM_Base_SetConfig+0x14c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d017      	beq.n	80081ca <TIM_Base_SetConfig+0xaa>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a34      	ldr	r2, [pc, #208]	; (8008270 <TIM_Base_SetConfig+0x150>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d013      	beq.n	80081ca <TIM_Base_SetConfig+0xaa>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a33      	ldr	r2, [pc, #204]	; (8008274 <TIM_Base_SetConfig+0x154>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00f      	beq.n	80081ca <TIM_Base_SetConfig+0xaa>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a33      	ldr	r2, [pc, #204]	; (800827c <TIM_Base_SetConfig+0x15c>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d00b      	beq.n	80081ca <TIM_Base_SetConfig+0xaa>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a32      	ldr	r2, [pc, #200]	; (8008280 <TIM_Base_SetConfig+0x160>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d007      	beq.n	80081ca <TIM_Base_SetConfig+0xaa>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a31      	ldr	r2, [pc, #196]	; (8008284 <TIM_Base_SetConfig+0x164>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d003      	beq.n	80081ca <TIM_Base_SetConfig+0xaa>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a2c      	ldr	r2, [pc, #176]	; (8008278 <TIM_Base_SetConfig+0x158>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d108      	bne.n	80081dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a18      	ldr	r2, [pc, #96]	; (8008264 <TIM_Base_SetConfig+0x144>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d013      	beq.n	8008230 <TIM_Base_SetConfig+0x110>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a1a      	ldr	r2, [pc, #104]	; (8008274 <TIM_Base_SetConfig+0x154>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00f      	beq.n	8008230 <TIM_Base_SetConfig+0x110>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a1a      	ldr	r2, [pc, #104]	; (800827c <TIM_Base_SetConfig+0x15c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d00b      	beq.n	8008230 <TIM_Base_SetConfig+0x110>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a19      	ldr	r2, [pc, #100]	; (8008280 <TIM_Base_SetConfig+0x160>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d007      	beq.n	8008230 <TIM_Base_SetConfig+0x110>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a18      	ldr	r2, [pc, #96]	; (8008284 <TIM_Base_SetConfig+0x164>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d003      	beq.n	8008230 <TIM_Base_SetConfig+0x110>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a13      	ldr	r2, [pc, #76]	; (8008278 <TIM_Base_SetConfig+0x158>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d103      	bne.n	8008238 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	691a      	ldr	r2, [r3, #16]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b01      	cmp	r3, #1
 8008248:	d105      	bne.n	8008256 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f023 0201 	bic.w	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	611a      	str	r2, [r3, #16]
  }
}
 8008256:	bf00      	nop
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40012c00 	.word	0x40012c00
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800
 8008270:	40000c00 	.word	0x40000c00
 8008274:	40013400 	.word	0x40013400
 8008278:	40015000 	.word	0x40015000
 800827c:	40014000 	.word	0x40014000
 8008280:	40014400 	.word	0x40014400
 8008284:	40014800 	.word	0x40014800

08008288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	f023 0201 	bic.w	r2, r3, #1
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0303 	bic.w	r3, r3, #3
 80082c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f023 0302 	bic.w	r3, r3, #2
 80082d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a30      	ldr	r2, [pc, #192]	; (80083a4 <TIM_OC1_SetConfig+0x11c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d013      	beq.n	8008310 <TIM_OC1_SetConfig+0x88>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a2f      	ldr	r2, [pc, #188]	; (80083a8 <TIM_OC1_SetConfig+0x120>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00f      	beq.n	8008310 <TIM_OC1_SetConfig+0x88>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a2e      	ldr	r2, [pc, #184]	; (80083ac <TIM_OC1_SetConfig+0x124>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00b      	beq.n	8008310 <TIM_OC1_SetConfig+0x88>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a2d      	ldr	r2, [pc, #180]	; (80083b0 <TIM_OC1_SetConfig+0x128>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d007      	beq.n	8008310 <TIM_OC1_SetConfig+0x88>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a2c      	ldr	r2, [pc, #176]	; (80083b4 <TIM_OC1_SetConfig+0x12c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_OC1_SetConfig+0x88>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a2b      	ldr	r2, [pc, #172]	; (80083b8 <TIM_OC1_SetConfig+0x130>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d10c      	bne.n	800832a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f023 0308 	bic.w	r3, r3, #8
 8008316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	4313      	orrs	r3, r2
 8008320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f023 0304 	bic.w	r3, r3, #4
 8008328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a1d      	ldr	r2, [pc, #116]	; (80083a4 <TIM_OC1_SetConfig+0x11c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d013      	beq.n	800835a <TIM_OC1_SetConfig+0xd2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a1c      	ldr	r2, [pc, #112]	; (80083a8 <TIM_OC1_SetConfig+0x120>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00f      	beq.n	800835a <TIM_OC1_SetConfig+0xd2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a1b      	ldr	r2, [pc, #108]	; (80083ac <TIM_OC1_SetConfig+0x124>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00b      	beq.n	800835a <TIM_OC1_SetConfig+0xd2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a1a      	ldr	r2, [pc, #104]	; (80083b0 <TIM_OC1_SetConfig+0x128>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d007      	beq.n	800835a <TIM_OC1_SetConfig+0xd2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a19      	ldr	r2, [pc, #100]	; (80083b4 <TIM_OC1_SetConfig+0x12c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d003      	beq.n	800835a <TIM_OC1_SetConfig+0xd2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a18      	ldr	r2, [pc, #96]	; (80083b8 <TIM_OC1_SetConfig+0x130>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d111      	bne.n	800837e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	4313      	orrs	r3, r2
 8008372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	4313      	orrs	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	621a      	str	r2, [r3, #32]
}
 8008398:	bf00      	nop
 800839a:	371c      	adds	r7, #28
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	40012c00 	.word	0x40012c00
 80083a8:	40013400 	.word	0x40013400
 80083ac:	40014000 	.word	0x40014000
 80083b0:	40014400 	.word	0x40014400
 80083b4:	40014800 	.word	0x40014800
 80083b8:	40015000 	.word	0x40015000

080083bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	f023 0210 	bic.w	r2, r3, #16
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	021b      	lsls	r3, r3, #8
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4313      	orrs	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f023 0320 	bic.w	r3, r3, #32
 800840a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	011b      	lsls	r3, r3, #4
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	4313      	orrs	r3, r2
 8008416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a2c      	ldr	r2, [pc, #176]	; (80084cc <TIM_OC2_SetConfig+0x110>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d007      	beq.n	8008430 <TIM_OC2_SetConfig+0x74>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a2b      	ldr	r2, [pc, #172]	; (80084d0 <TIM_OC2_SetConfig+0x114>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d003      	beq.n	8008430 <TIM_OC2_SetConfig+0x74>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a2a      	ldr	r2, [pc, #168]	; (80084d4 <TIM_OC2_SetConfig+0x118>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d10d      	bne.n	800844c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	4313      	orrs	r3, r2
 8008442:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800844a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a1f      	ldr	r2, [pc, #124]	; (80084cc <TIM_OC2_SetConfig+0x110>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d013      	beq.n	800847c <TIM_OC2_SetConfig+0xc0>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a1e      	ldr	r2, [pc, #120]	; (80084d0 <TIM_OC2_SetConfig+0x114>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d00f      	beq.n	800847c <TIM_OC2_SetConfig+0xc0>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a1e      	ldr	r2, [pc, #120]	; (80084d8 <TIM_OC2_SetConfig+0x11c>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d00b      	beq.n	800847c <TIM_OC2_SetConfig+0xc0>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a1d      	ldr	r2, [pc, #116]	; (80084dc <TIM_OC2_SetConfig+0x120>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d007      	beq.n	800847c <TIM_OC2_SetConfig+0xc0>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a1c      	ldr	r2, [pc, #112]	; (80084e0 <TIM_OC2_SetConfig+0x124>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d003      	beq.n	800847c <TIM_OC2_SetConfig+0xc0>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a17      	ldr	r2, [pc, #92]	; (80084d4 <TIM_OC2_SetConfig+0x118>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d113      	bne.n	80084a4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800848a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	621a      	str	r2, [r3, #32]
}
 80084be:	bf00      	nop
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	40012c00 	.word	0x40012c00
 80084d0:	40013400 	.word	0x40013400
 80084d4:	40015000 	.word	0x40015000
 80084d8:	40014000 	.word	0x40014000
 80084dc:	40014400 	.word	0x40014400
 80084e0:	40014800 	.word	0x40014800

080084e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 0303 	bic.w	r3, r3, #3
 800851e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	4313      	orrs	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	021b      	lsls	r3, r3, #8
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a2b      	ldr	r2, [pc, #172]	; (80085f0 <TIM_OC3_SetConfig+0x10c>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d007      	beq.n	8008556 <TIM_OC3_SetConfig+0x72>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a2a      	ldr	r2, [pc, #168]	; (80085f4 <TIM_OC3_SetConfig+0x110>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d003      	beq.n	8008556 <TIM_OC3_SetConfig+0x72>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a29      	ldr	r2, [pc, #164]	; (80085f8 <TIM_OC3_SetConfig+0x114>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d10d      	bne.n	8008572 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800855c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	021b      	lsls	r3, r3, #8
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a1e      	ldr	r2, [pc, #120]	; (80085f0 <TIM_OC3_SetConfig+0x10c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d013      	beq.n	80085a2 <TIM_OC3_SetConfig+0xbe>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a1d      	ldr	r2, [pc, #116]	; (80085f4 <TIM_OC3_SetConfig+0x110>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d00f      	beq.n	80085a2 <TIM_OC3_SetConfig+0xbe>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a1d      	ldr	r2, [pc, #116]	; (80085fc <TIM_OC3_SetConfig+0x118>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00b      	beq.n	80085a2 <TIM_OC3_SetConfig+0xbe>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a1c      	ldr	r2, [pc, #112]	; (8008600 <TIM_OC3_SetConfig+0x11c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d007      	beq.n	80085a2 <TIM_OC3_SetConfig+0xbe>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a1b      	ldr	r2, [pc, #108]	; (8008604 <TIM_OC3_SetConfig+0x120>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d003      	beq.n	80085a2 <TIM_OC3_SetConfig+0xbe>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a16      	ldr	r2, [pc, #88]	; (80085f8 <TIM_OC3_SetConfig+0x114>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d113      	bne.n	80085ca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	011b      	lsls	r3, r3, #4
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	011b      	lsls	r3, r3, #4
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	621a      	str	r2, [r3, #32]
}
 80085e4:	bf00      	nop
 80085e6:	371c      	adds	r7, #28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	40012c00 	.word	0x40012c00
 80085f4:	40013400 	.word	0x40013400
 80085f8:	40015000 	.word	0x40015000
 80085fc:	40014000 	.word	0x40014000
 8008600:	40014400 	.word	0x40014400
 8008604:	40014800 	.word	0x40014800

08008608 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800863a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	021b      	lsls	r3, r3, #8
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	4313      	orrs	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	031b      	lsls	r3, r3, #12
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a2c      	ldr	r2, [pc, #176]	; (8008718 <TIM_OC4_SetConfig+0x110>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d007      	beq.n	800867c <TIM_OC4_SetConfig+0x74>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a2b      	ldr	r2, [pc, #172]	; (800871c <TIM_OC4_SetConfig+0x114>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d003      	beq.n	800867c <TIM_OC4_SetConfig+0x74>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a2a      	ldr	r2, [pc, #168]	; (8008720 <TIM_OC4_SetConfig+0x118>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d10d      	bne.n	8008698 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	031b      	lsls	r3, r3, #12
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	4313      	orrs	r3, r2
 800868e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008696:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a1f      	ldr	r2, [pc, #124]	; (8008718 <TIM_OC4_SetConfig+0x110>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d013      	beq.n	80086c8 <TIM_OC4_SetConfig+0xc0>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a1e      	ldr	r2, [pc, #120]	; (800871c <TIM_OC4_SetConfig+0x114>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00f      	beq.n	80086c8 <TIM_OC4_SetConfig+0xc0>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a1e      	ldr	r2, [pc, #120]	; (8008724 <TIM_OC4_SetConfig+0x11c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d00b      	beq.n	80086c8 <TIM_OC4_SetConfig+0xc0>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a1d      	ldr	r2, [pc, #116]	; (8008728 <TIM_OC4_SetConfig+0x120>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d007      	beq.n	80086c8 <TIM_OC4_SetConfig+0xc0>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a1c      	ldr	r2, [pc, #112]	; (800872c <TIM_OC4_SetConfig+0x124>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d003      	beq.n	80086c8 <TIM_OC4_SetConfig+0xc0>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a17      	ldr	r2, [pc, #92]	; (8008720 <TIM_OC4_SetConfig+0x118>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d113      	bne.n	80086f0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	019b      	lsls	r3, r3, #6
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	019b      	lsls	r3, r3, #6
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	621a      	str	r2, [r3, #32]
}
 800870a:	bf00      	nop
 800870c:	371c      	adds	r7, #28
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	40012c00 	.word	0x40012c00
 800871c:	40013400 	.word	0x40013400
 8008720:	40015000 	.word	0x40015000
 8008724:	40014000 	.word	0x40014000
 8008728:	40014400 	.word	0x40014400
 800872c:	40014800 	.word	0x40014800

08008730 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a1b      	ldr	r3, [r3, #32]
 8008744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800875e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008774:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	041b      	lsls	r3, r3, #16
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	4313      	orrs	r3, r2
 8008780:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a19      	ldr	r2, [pc, #100]	; (80087ec <TIM_OC5_SetConfig+0xbc>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d013      	beq.n	80087b2 <TIM_OC5_SetConfig+0x82>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a18      	ldr	r2, [pc, #96]	; (80087f0 <TIM_OC5_SetConfig+0xc0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00f      	beq.n	80087b2 <TIM_OC5_SetConfig+0x82>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a17      	ldr	r2, [pc, #92]	; (80087f4 <TIM_OC5_SetConfig+0xc4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00b      	beq.n	80087b2 <TIM_OC5_SetConfig+0x82>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a16      	ldr	r2, [pc, #88]	; (80087f8 <TIM_OC5_SetConfig+0xc8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d007      	beq.n	80087b2 <TIM_OC5_SetConfig+0x82>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a15      	ldr	r2, [pc, #84]	; (80087fc <TIM_OC5_SetConfig+0xcc>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d003      	beq.n	80087b2 <TIM_OC5_SetConfig+0x82>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a14      	ldr	r2, [pc, #80]	; (8008800 <TIM_OC5_SetConfig+0xd0>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d109      	bne.n	80087c6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	621a      	str	r2, [r3, #32]
}
 80087e0:	bf00      	nop
 80087e2:	371c      	adds	r7, #28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	40012c00 	.word	0x40012c00
 80087f0:	40013400 	.word	0x40013400
 80087f4:	40014000 	.word	0x40014000
 80087f8:	40014400 	.word	0x40014400
 80087fc:	40014800 	.word	0x40014800
 8008800:	40015000 	.word	0x40015000

08008804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a1b      	ldr	r3, [r3, #32]
 8008818:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800882a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800884a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	051b      	lsls	r3, r3, #20
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	4313      	orrs	r3, r2
 8008856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a1a      	ldr	r2, [pc, #104]	; (80088c4 <TIM_OC6_SetConfig+0xc0>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d013      	beq.n	8008888 <TIM_OC6_SetConfig+0x84>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a19      	ldr	r2, [pc, #100]	; (80088c8 <TIM_OC6_SetConfig+0xc4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00f      	beq.n	8008888 <TIM_OC6_SetConfig+0x84>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a18      	ldr	r2, [pc, #96]	; (80088cc <TIM_OC6_SetConfig+0xc8>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d00b      	beq.n	8008888 <TIM_OC6_SetConfig+0x84>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a17      	ldr	r2, [pc, #92]	; (80088d0 <TIM_OC6_SetConfig+0xcc>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d007      	beq.n	8008888 <TIM_OC6_SetConfig+0x84>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a16      	ldr	r2, [pc, #88]	; (80088d4 <TIM_OC6_SetConfig+0xd0>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d003      	beq.n	8008888 <TIM_OC6_SetConfig+0x84>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a15      	ldr	r2, [pc, #84]	; (80088d8 <TIM_OC6_SetConfig+0xd4>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d109      	bne.n	800889c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800888e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	029b      	lsls	r3, r3, #10
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	4313      	orrs	r3, r2
 800889a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	621a      	str	r2, [r3, #32]
}
 80088b6:	bf00      	nop
 80088b8:	371c      	adds	r7, #28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	40012c00 	.word	0x40012c00
 80088c8:	40013400 	.word	0x40013400
 80088cc:	40014000 	.word	0x40014000
 80088d0:	40014400 	.word	0x40014400
 80088d4:	40014800 	.word	0x40014800
 80088d8:	40015000 	.word	0x40015000

080088dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	f023 0201 	bic.w	r2, r3, #1
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	011b      	lsls	r3, r3, #4
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	4313      	orrs	r3, r2
 8008910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f023 030a 	bic.w	r3, r3, #10
 8008918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4313      	orrs	r3, r2
 8008920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	621a      	str	r2, [r3, #32]
}
 800892e:	bf00      	nop
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800893a:	b480      	push	{r7}
 800893c:	b087      	sub	sp, #28
 800893e:	af00      	add	r7, sp, #0
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	f023 0210 	bic.w	r2, r3, #16
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	031b      	lsls	r3, r3, #12
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4313      	orrs	r3, r2
 800896e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008976:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	011b      	lsls	r3, r3, #4
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	4313      	orrs	r3, r2
 8008980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	621a      	str	r2, [r3, #32]
}
 800898e:	bf00      	nop
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800899a:	b480      	push	{r7}
 800899c:	b085      	sub	sp, #20
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80089b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	f043 0307 	orr.w	r3, r3, #7
 80089c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	609a      	str	r2, [r3, #8]
}
 80089c8:	bf00      	nop
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	021a      	lsls	r2, r3, #8
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	431a      	orrs	r2, r3
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	609a      	str	r2, [r3, #8]
}
 8008a08:	bf00      	nop
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f003 031f 	and.w	r3, r3, #31
 8008a26:	2201      	movs	r2, #1
 8008a28:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6a1a      	ldr	r2, [r3, #32]
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	43db      	mvns	r3, r3
 8008a36:	401a      	ands	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6a1a      	ldr	r2, [r3, #32]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f003 031f 	and.w	r3, r3, #31
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4c:	431a      	orrs	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	621a      	str	r2, [r3, #32]
}
 8008a52:	bf00      	nop
 8008a54:	371c      	adds	r7, #28
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
	...

08008a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d101      	bne.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a74:	2302      	movs	r3, #2
 8008a76:	e074      	b.n	8008b62 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a34      	ldr	r2, [pc, #208]	; (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d009      	beq.n	8008ab6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a33      	ldr	r2, [pc, #204]	; (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d004      	beq.n	8008ab6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a31      	ldr	r2, [pc, #196]	; (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d108      	bne.n	8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008abc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a21      	ldr	r2, [pc, #132]	; (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d022      	beq.n	8008b36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af8:	d01d      	beq.n	8008b36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a1f      	ldr	r2, [pc, #124]	; (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d018      	beq.n	8008b36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a1d      	ldr	r2, [pc, #116]	; (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d013      	beq.n	8008b36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a1c      	ldr	r2, [pc, #112]	; (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d00e      	beq.n	8008b36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a15      	ldr	r2, [pc, #84]	; (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d009      	beq.n	8008b36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a18      	ldr	r2, [pc, #96]	; (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d004      	beq.n	8008b36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a11      	ldr	r2, [pc, #68]	; (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d10c      	bne.n	8008b50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	40012c00 	.word	0x40012c00
 8008b74:	40013400 	.word	0x40013400
 8008b78:	40015000 	.word	0x40015000
 8008b7c:	40000400 	.word	0x40000400
 8008b80:	40000800 	.word	0x40000800
 8008b84:	40000c00 	.word	0x40000c00
 8008b88:	40014000 	.word	0x40014000

08008b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e042      	b.n	8008cb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d106      	bne.n	8008c42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7fa fee7 	bl	8003a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2224      	movs	r2, #36	; 0x24
 8008c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 0201 	bic.w	r2, r2, #1
 8008c58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 ff42 	bl	8009aec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fc43 	bl	80094f4 <UART_SetConfig>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e01b      	b.n	8008cb0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f042 0201 	orr.w	r2, r2, #1
 8008ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 ffc1 	bl	8009c30 <UART_CheckIdleState>
 8008cae:	4603      	mov	r3, r0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08a      	sub	sp, #40	; 0x28
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cce:	2b20      	cmp	r3, #32
 8008cd0:	d17b      	bne.n	8008dca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <HAL_UART_Transmit+0x26>
 8008cd8:	88fb      	ldrh	r3, [r7, #6]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e074      	b.n	8008dcc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2221      	movs	r2, #33	; 0x21
 8008cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cf2:	f7fa ff7b 	bl	8003bec <HAL_GetTick>
 8008cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	88fa      	ldrh	r2, [r7, #6]
 8008cfc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	88fa      	ldrh	r2, [r7, #6]
 8008d04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d10:	d108      	bne.n	8008d24 <HAL_UART_Transmit+0x6c>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d104      	bne.n	8008d24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	61bb      	str	r3, [r7, #24]
 8008d22:	e003      	b.n	8008d2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d2c:	e030      	b.n	8008d90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2200      	movs	r2, #0
 8008d36:	2180      	movs	r1, #128	; 0x80
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f001 f823 	bl	8009d84 <UART_WaitOnFlagUntilTimeout>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d005      	beq.n	8008d50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2220      	movs	r2, #32
 8008d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e03d      	b.n	8008dcc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	881b      	ldrh	r3, [r3, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	3302      	adds	r3, #2
 8008d6a:	61bb      	str	r3, [r7, #24]
 8008d6c:	e007      	b.n	8008d7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	781a      	ldrb	r2, [r3, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	3b01      	subs	r3, #1
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1c8      	bne.n	8008d2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	2200      	movs	r2, #0
 8008da4:	2140      	movs	r1, #64	; 0x40
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f000 ffec 	bl	8009d84 <UART_WaitOnFlagUntilTimeout>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e006      	b.n	8008dcc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e000      	b.n	8008dcc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008dca:	2302      	movs	r3, #2
  }
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3720      	adds	r7, #32
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08a      	sub	sp, #40	; 0x28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008de8:	2b20      	cmp	r3, #32
 8008dea:	d137      	bne.n	8008e5c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d002      	beq.n	8008df8 <HAL_UART_Receive_IT+0x24>
 8008df2:	88fb      	ldrh	r3, [r7, #6]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e030      	b.n	8008e5e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a18      	ldr	r2, [pc, #96]	; (8008e68 <HAL_UART_Receive_IT+0x94>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d01f      	beq.n	8008e4c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d018      	beq.n	8008e4c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	613b      	str	r3, [r7, #16]
   return(result);
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	623b      	str	r3, [r7, #32]
 8008e3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	69f9      	ldr	r1, [r7, #28]
 8008e3e:	6a3a      	ldr	r2, [r7, #32]
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e6      	bne.n	8008e1a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e4c:	88fb      	ldrh	r3, [r7, #6]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	68b9      	ldr	r1, [r7, #8]
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f001 f804 	bl	8009e60 <UART_Start_Receive_IT>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	e000      	b.n	8008e5e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e5c:	2302      	movs	r3, #2
  }
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3728      	adds	r7, #40	; 0x28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	40008000 	.word	0x40008000

08008e6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b0ba      	sub	sp, #232	; 0xe8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008e96:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008ea0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d11b      	bne.n	8008ee0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eac:	f003 0320 	and.w	r3, r3, #32
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d015      	beq.n	8008ee0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eb8:	f003 0320 	and.w	r3, r3, #32
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d105      	bne.n	8008ecc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d009      	beq.n	8008ee0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 82e3 	beq.w	800949c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	4798      	blx	r3
      }
      return;
 8008ede:	e2dd      	b.n	800949c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ee0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 8123 	beq.w	8009130 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008eea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008eee:	4b8d      	ldr	r3, [pc, #564]	; (8009124 <HAL_UART_IRQHandler+0x2b8>)
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ef6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008efa:	4b8b      	ldr	r3, [pc, #556]	; (8009128 <HAL_UART_IRQHandler+0x2bc>)
 8008efc:	4013      	ands	r3, r2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 8116 	beq.w	8009130 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d011      	beq.n	8008f34 <HAL_UART_IRQHandler+0xc8>
 8008f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00b      	beq.n	8008f34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2201      	movs	r2, #1
 8008f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f2a:	f043 0201 	orr.w	r2, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d011      	beq.n	8008f64 <HAL_UART_IRQHandler+0xf8>
 8008f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00b      	beq.n	8008f64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2202      	movs	r2, #2
 8008f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f5a:	f043 0204 	orr.w	r2, r3, #4
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f68:	f003 0304 	and.w	r3, r3, #4
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d011      	beq.n	8008f94 <HAL_UART_IRQHandler+0x128>
 8008f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00b      	beq.n	8008f94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2204      	movs	r2, #4
 8008f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f8a:	f043 0202 	orr.w	r2, r3, #2
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d017      	beq.n	8008fd0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa4:	f003 0320 	and.w	r3, r3, #32
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d105      	bne.n	8008fb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008fac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008fb0:	4b5c      	ldr	r3, [pc, #368]	; (8009124 <HAL_UART_IRQHandler+0x2b8>)
 8008fb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc6:	f043 0208 	orr.w	r2, r3, #8
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d012      	beq.n	8009002 <HAL_UART_IRQHandler+0x196>
 8008fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00c      	beq.n	8009002 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff8:	f043 0220 	orr.w	r2, r3, #32
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 8249 	beq.w	80094a0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800900e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b00      	cmp	r3, #0
 8009018:	d013      	beq.n	8009042 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800901a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800901e:	f003 0320 	and.w	r3, r3, #32
 8009022:	2b00      	cmp	r3, #0
 8009024:	d105      	bne.n	8009032 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800902a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d007      	beq.n	8009042 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009048:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009056:	2b40      	cmp	r3, #64	; 0x40
 8009058:	d005      	beq.n	8009066 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800905a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800905e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009062:	2b00      	cmp	r3, #0
 8009064:	d054      	beq.n	8009110 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 f81c 	bl	800a0a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009076:	2b40      	cmp	r3, #64	; 0x40
 8009078:	d146      	bne.n	8009108 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3308      	adds	r3, #8
 80090a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090b6:	e841 2300 	strex	r3, r2, [r1]
 80090ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1d9      	bne.n	800907a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d017      	beq.n	8009100 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090d6:	4a15      	ldr	r2, [pc, #84]	; (800912c <HAL_UART_IRQHandler+0x2c0>)
 80090d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fc fb7f 	bl	80057e4 <HAL_DMA_Abort_IT>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d019      	beq.n	8009120 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80090fa:	4610      	mov	r0, r2
 80090fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090fe:	e00f      	b.n	8009120 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f9e1 	bl	80094c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009106:	e00b      	b.n	8009120 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f9dd 	bl	80094c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800910e:	e007      	b.n	8009120 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f9d9 	bl	80094c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800911e:	e1bf      	b.n	80094a0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009120:	bf00      	nop
    return;
 8009122:	e1bd      	b.n	80094a0 <HAL_UART_IRQHandler+0x634>
 8009124:	10000001 	.word	0x10000001
 8009128:	04000120 	.word	0x04000120
 800912c:	0800a171 	.word	0x0800a171

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009134:	2b01      	cmp	r3, #1
 8009136:	f040 8153 	bne.w	80093e0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800913a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800913e:	f003 0310 	and.w	r3, r3, #16
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 814c 	beq.w	80093e0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800914c:	f003 0310 	and.w	r3, r3, #16
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 8145 	beq.w	80093e0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2210      	movs	r2, #16
 800915c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009168:	2b40      	cmp	r3, #64	; 0x40
 800916a:	f040 80bb 	bne.w	80092e4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800917c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 818f 	beq.w	80094a4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800918c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009190:	429a      	cmp	r2, r3
 8009192:	f080 8187 	bcs.w	80094a4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800919c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0320 	and.w	r3, r3, #32
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f040 8087 	bne.w	80092c2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	461a      	mov	r2, r3
 80091da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1da      	bne.n	80091b4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3308      	adds	r3, #8
 8009204:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009208:	e853 3f00 	ldrex	r3, [r3]
 800920c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800920e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009210:	f023 0301 	bic.w	r3, r3, #1
 8009214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3308      	adds	r3, #8
 800921e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009222:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009226:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009228:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800922a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e1      	bne.n	80091fe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800924a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800924c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009250:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800925e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009260:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009264:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009266:	e841 2300 	strex	r3, r2, [r1]
 800926a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800926c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1e3      	bne.n	800923a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2220      	movs	r2, #32
 8009276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800928e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009290:	f023 0310 	bic.w	r3, r3, #16
 8009294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80092a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e4      	bne.n	8009280 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fc fa38 	bl	8005732 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2202      	movs	r2, #2
 80092c6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	b29b      	uxth	r3, r3
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f8fd 	bl	80094dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092e2:	e0df      	b.n	80094a4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092fe:	b29b      	uxth	r3, r3
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 80d1 	beq.w	80094a8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009306:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 80cc 	beq.w	80094a8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800931e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009332:	647b      	str	r3, [r7, #68]	; 0x44
 8009334:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800933a:	e841 2300 	strex	r3, r2, [r1]
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e4      	bne.n	8009310 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3308      	adds	r3, #8
 800934c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009350:	e853 3f00 	ldrex	r3, [r3]
 8009354:	623b      	str	r3, [r7, #32]
   return(result);
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800935c:	f023 0301 	bic.w	r3, r3, #1
 8009360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3308      	adds	r3, #8
 800936a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800936e:	633a      	str	r2, [r7, #48]	; 0x30
 8009370:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1e1      	bne.n	8009346 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2220      	movs	r2, #32
 8009386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 0310 	bic.w	r3, r3, #16
 80093aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093b8:	61fb      	str	r3, [r7, #28]
 80093ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	69b9      	ldr	r1, [r7, #24]
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	617b      	str	r3, [r7, #20]
   return(result);
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e4      	bne.n	8009396 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2202      	movs	r2, #2
 80093d0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f87f 	bl	80094dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093de:	e063      	b.n	80094a8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00e      	beq.n	800940a <HAL_UART_IRQHandler+0x59e>
 80093ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d008      	beq.n	800940a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009400:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f001 fc12 	bl	800ac2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009408:	e051      	b.n	80094ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800940a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009412:	2b00      	cmp	r3, #0
 8009414:	d014      	beq.n	8009440 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800941a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941e:	2b00      	cmp	r3, #0
 8009420:	d105      	bne.n	800942e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d008      	beq.n	8009440 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009432:	2b00      	cmp	r3, #0
 8009434:	d03a      	beq.n	80094ac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
    }
    return;
 800943e:	e035      	b.n	80094ac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009448:	2b00      	cmp	r3, #0
 800944a:	d009      	beq.n	8009460 <HAL_UART_IRQHandler+0x5f4>
 800944c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fe9f 	bl	800a19c <UART_EndTransmit_IT>
    return;
 800945e:	e026      	b.n	80094ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d009      	beq.n	8009480 <HAL_UART_IRQHandler+0x614>
 800946c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009470:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d003      	beq.n	8009480 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 fbeb 	bl	800ac54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800947e:	e016      	b.n	80094ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009488:	2b00      	cmp	r3, #0
 800948a:	d010      	beq.n	80094ae <HAL_UART_IRQHandler+0x642>
 800948c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009490:	2b00      	cmp	r3, #0
 8009492:	da0c      	bge.n	80094ae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f001 fbd3 	bl	800ac40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800949a:	e008      	b.n	80094ae <HAL_UART_IRQHandler+0x642>
      return;
 800949c:	bf00      	nop
 800949e:	e006      	b.n	80094ae <HAL_UART_IRQHandler+0x642>
    return;
 80094a0:	bf00      	nop
 80094a2:	e004      	b.n	80094ae <HAL_UART_IRQHandler+0x642>
      return;
 80094a4:	bf00      	nop
 80094a6:	e002      	b.n	80094ae <HAL_UART_IRQHandler+0x642>
      return;
 80094a8:	bf00      	nop
 80094aa:	e000      	b.n	80094ae <HAL_UART_IRQHandler+0x642>
    return;
 80094ac:	bf00      	nop
  }
}
 80094ae:	37e8      	adds	r7, #232	; 0xe8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094f8:	b08c      	sub	sp, #48	; 0x30
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	689a      	ldr	r2, [r3, #8]
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	431a      	orrs	r2, r3
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	431a      	orrs	r2, r3
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	4313      	orrs	r3, r2
 800951a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	4baa      	ldr	r3, [pc, #680]	; (80097cc <UART_SetConfig+0x2d8>)
 8009524:	4013      	ands	r3, r2
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	6812      	ldr	r2, [r2, #0]
 800952a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800952c:	430b      	orrs	r3, r1
 800952e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	68da      	ldr	r2, [r3, #12]
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	430a      	orrs	r2, r1
 8009544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a9f      	ldr	r2, [pc, #636]	; (80097d0 <UART_SetConfig+0x2dc>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d004      	beq.n	8009560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800955c:	4313      	orrs	r3, r2
 800955e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800956a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	6812      	ldr	r2, [r2, #0]
 8009572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009574:	430b      	orrs	r3, r1
 8009576:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957e:	f023 010f 	bic.w	r1, r3, #15
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a90      	ldr	r2, [pc, #576]	; (80097d4 <UART_SetConfig+0x2e0>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d125      	bne.n	80095e4 <UART_SetConfig+0xf0>
 8009598:	4b8f      	ldr	r3, [pc, #572]	; (80097d8 <UART_SetConfig+0x2e4>)
 800959a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800959e:	f003 0303 	and.w	r3, r3, #3
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d81a      	bhi.n	80095dc <UART_SetConfig+0xe8>
 80095a6:	a201      	add	r2, pc, #4	; (adr r2, 80095ac <UART_SetConfig+0xb8>)
 80095a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ac:	080095bd 	.word	0x080095bd
 80095b0:	080095cd 	.word	0x080095cd
 80095b4:	080095c5 	.word	0x080095c5
 80095b8:	080095d5 	.word	0x080095d5
 80095bc:	2301      	movs	r3, #1
 80095be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095c2:	e116      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80095c4:	2302      	movs	r3, #2
 80095c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ca:	e112      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80095cc:	2304      	movs	r3, #4
 80095ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095d2:	e10e      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80095d4:	2308      	movs	r3, #8
 80095d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095da:	e10a      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80095dc:	2310      	movs	r3, #16
 80095de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095e2:	e106      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a7c      	ldr	r2, [pc, #496]	; (80097dc <UART_SetConfig+0x2e8>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d138      	bne.n	8009660 <UART_SetConfig+0x16c>
 80095ee:	4b7a      	ldr	r3, [pc, #488]	; (80097d8 <UART_SetConfig+0x2e4>)
 80095f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f4:	f003 030c 	and.w	r3, r3, #12
 80095f8:	2b0c      	cmp	r3, #12
 80095fa:	d82d      	bhi.n	8009658 <UART_SetConfig+0x164>
 80095fc:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <UART_SetConfig+0x110>)
 80095fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009602:	bf00      	nop
 8009604:	08009639 	.word	0x08009639
 8009608:	08009659 	.word	0x08009659
 800960c:	08009659 	.word	0x08009659
 8009610:	08009659 	.word	0x08009659
 8009614:	08009649 	.word	0x08009649
 8009618:	08009659 	.word	0x08009659
 800961c:	08009659 	.word	0x08009659
 8009620:	08009659 	.word	0x08009659
 8009624:	08009641 	.word	0x08009641
 8009628:	08009659 	.word	0x08009659
 800962c:	08009659 	.word	0x08009659
 8009630:	08009659 	.word	0x08009659
 8009634:	08009651 	.word	0x08009651
 8009638:	2300      	movs	r3, #0
 800963a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800963e:	e0d8      	b.n	80097f2 <UART_SetConfig+0x2fe>
 8009640:	2302      	movs	r3, #2
 8009642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009646:	e0d4      	b.n	80097f2 <UART_SetConfig+0x2fe>
 8009648:	2304      	movs	r3, #4
 800964a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800964e:	e0d0      	b.n	80097f2 <UART_SetConfig+0x2fe>
 8009650:	2308      	movs	r3, #8
 8009652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009656:	e0cc      	b.n	80097f2 <UART_SetConfig+0x2fe>
 8009658:	2310      	movs	r3, #16
 800965a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800965e:	e0c8      	b.n	80097f2 <UART_SetConfig+0x2fe>
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a5e      	ldr	r2, [pc, #376]	; (80097e0 <UART_SetConfig+0x2ec>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d125      	bne.n	80096b6 <UART_SetConfig+0x1c2>
 800966a:	4b5b      	ldr	r3, [pc, #364]	; (80097d8 <UART_SetConfig+0x2e4>)
 800966c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009670:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009674:	2b30      	cmp	r3, #48	; 0x30
 8009676:	d016      	beq.n	80096a6 <UART_SetConfig+0x1b2>
 8009678:	2b30      	cmp	r3, #48	; 0x30
 800967a:	d818      	bhi.n	80096ae <UART_SetConfig+0x1ba>
 800967c:	2b20      	cmp	r3, #32
 800967e:	d00a      	beq.n	8009696 <UART_SetConfig+0x1a2>
 8009680:	2b20      	cmp	r3, #32
 8009682:	d814      	bhi.n	80096ae <UART_SetConfig+0x1ba>
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <UART_SetConfig+0x19a>
 8009688:	2b10      	cmp	r3, #16
 800968a:	d008      	beq.n	800969e <UART_SetConfig+0x1aa>
 800968c:	e00f      	b.n	80096ae <UART_SetConfig+0x1ba>
 800968e:	2300      	movs	r3, #0
 8009690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009694:	e0ad      	b.n	80097f2 <UART_SetConfig+0x2fe>
 8009696:	2302      	movs	r3, #2
 8009698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800969c:	e0a9      	b.n	80097f2 <UART_SetConfig+0x2fe>
 800969e:	2304      	movs	r3, #4
 80096a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096a4:	e0a5      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80096a6:	2308      	movs	r3, #8
 80096a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ac:	e0a1      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80096ae:	2310      	movs	r3, #16
 80096b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096b4:	e09d      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a4a      	ldr	r2, [pc, #296]	; (80097e4 <UART_SetConfig+0x2f0>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d125      	bne.n	800970c <UART_SetConfig+0x218>
 80096c0:	4b45      	ldr	r3, [pc, #276]	; (80097d8 <UART_SetConfig+0x2e4>)
 80096c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80096ca:	2bc0      	cmp	r3, #192	; 0xc0
 80096cc:	d016      	beq.n	80096fc <UART_SetConfig+0x208>
 80096ce:	2bc0      	cmp	r3, #192	; 0xc0
 80096d0:	d818      	bhi.n	8009704 <UART_SetConfig+0x210>
 80096d2:	2b80      	cmp	r3, #128	; 0x80
 80096d4:	d00a      	beq.n	80096ec <UART_SetConfig+0x1f8>
 80096d6:	2b80      	cmp	r3, #128	; 0x80
 80096d8:	d814      	bhi.n	8009704 <UART_SetConfig+0x210>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <UART_SetConfig+0x1f0>
 80096de:	2b40      	cmp	r3, #64	; 0x40
 80096e0:	d008      	beq.n	80096f4 <UART_SetConfig+0x200>
 80096e2:	e00f      	b.n	8009704 <UART_SetConfig+0x210>
 80096e4:	2300      	movs	r3, #0
 80096e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ea:	e082      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80096ec:	2302      	movs	r3, #2
 80096ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096f2:	e07e      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80096f4:	2304      	movs	r3, #4
 80096f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096fa:	e07a      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80096fc:	2308      	movs	r3, #8
 80096fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009702:	e076      	b.n	80097f2 <UART_SetConfig+0x2fe>
 8009704:	2310      	movs	r3, #16
 8009706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800970a:	e072      	b.n	80097f2 <UART_SetConfig+0x2fe>
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a35      	ldr	r2, [pc, #212]	; (80097e8 <UART_SetConfig+0x2f4>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d12a      	bne.n	800976c <UART_SetConfig+0x278>
 8009716:	4b30      	ldr	r3, [pc, #192]	; (80097d8 <UART_SetConfig+0x2e4>)
 8009718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800971c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009724:	d01a      	beq.n	800975c <UART_SetConfig+0x268>
 8009726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800972a:	d81b      	bhi.n	8009764 <UART_SetConfig+0x270>
 800972c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009730:	d00c      	beq.n	800974c <UART_SetConfig+0x258>
 8009732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009736:	d815      	bhi.n	8009764 <UART_SetConfig+0x270>
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <UART_SetConfig+0x250>
 800973c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009740:	d008      	beq.n	8009754 <UART_SetConfig+0x260>
 8009742:	e00f      	b.n	8009764 <UART_SetConfig+0x270>
 8009744:	2300      	movs	r3, #0
 8009746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800974a:	e052      	b.n	80097f2 <UART_SetConfig+0x2fe>
 800974c:	2302      	movs	r3, #2
 800974e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009752:	e04e      	b.n	80097f2 <UART_SetConfig+0x2fe>
 8009754:	2304      	movs	r3, #4
 8009756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800975a:	e04a      	b.n	80097f2 <UART_SetConfig+0x2fe>
 800975c:	2308      	movs	r3, #8
 800975e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009762:	e046      	b.n	80097f2 <UART_SetConfig+0x2fe>
 8009764:	2310      	movs	r3, #16
 8009766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800976a:	e042      	b.n	80097f2 <UART_SetConfig+0x2fe>
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a17      	ldr	r2, [pc, #92]	; (80097d0 <UART_SetConfig+0x2dc>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d13a      	bne.n	80097ec <UART_SetConfig+0x2f8>
 8009776:	4b18      	ldr	r3, [pc, #96]	; (80097d8 <UART_SetConfig+0x2e4>)
 8009778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800977c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009780:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009784:	d01a      	beq.n	80097bc <UART_SetConfig+0x2c8>
 8009786:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800978a:	d81b      	bhi.n	80097c4 <UART_SetConfig+0x2d0>
 800978c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009790:	d00c      	beq.n	80097ac <UART_SetConfig+0x2b8>
 8009792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009796:	d815      	bhi.n	80097c4 <UART_SetConfig+0x2d0>
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <UART_SetConfig+0x2b0>
 800979c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097a0:	d008      	beq.n	80097b4 <UART_SetConfig+0x2c0>
 80097a2:	e00f      	b.n	80097c4 <UART_SetConfig+0x2d0>
 80097a4:	2300      	movs	r3, #0
 80097a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097aa:	e022      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80097ac:	2302      	movs	r3, #2
 80097ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097b2:	e01e      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80097b4:	2304      	movs	r3, #4
 80097b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ba:	e01a      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80097bc:	2308      	movs	r3, #8
 80097be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097c2:	e016      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80097c4:	2310      	movs	r3, #16
 80097c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ca:	e012      	b.n	80097f2 <UART_SetConfig+0x2fe>
 80097cc:	cfff69f3 	.word	0xcfff69f3
 80097d0:	40008000 	.word	0x40008000
 80097d4:	40013800 	.word	0x40013800
 80097d8:	40021000 	.word	0x40021000
 80097dc:	40004400 	.word	0x40004400
 80097e0:	40004800 	.word	0x40004800
 80097e4:	40004c00 	.word	0x40004c00
 80097e8:	40005000 	.word	0x40005000
 80097ec:	2310      	movs	r3, #16
 80097ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4aae      	ldr	r2, [pc, #696]	; (8009ab0 <UART_SetConfig+0x5bc>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	f040 8097 	bne.w	800992c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80097fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009802:	2b08      	cmp	r3, #8
 8009804:	d823      	bhi.n	800984e <UART_SetConfig+0x35a>
 8009806:	a201      	add	r2, pc, #4	; (adr r2, 800980c <UART_SetConfig+0x318>)
 8009808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980c:	08009831 	.word	0x08009831
 8009810:	0800984f 	.word	0x0800984f
 8009814:	08009839 	.word	0x08009839
 8009818:	0800984f 	.word	0x0800984f
 800981c:	0800983f 	.word	0x0800983f
 8009820:	0800984f 	.word	0x0800984f
 8009824:	0800984f 	.word	0x0800984f
 8009828:	0800984f 	.word	0x0800984f
 800982c:	08009847 	.word	0x08009847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009830:	f7fd f9f2 	bl	8006c18 <HAL_RCC_GetPCLK1Freq>
 8009834:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009836:	e010      	b.n	800985a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009838:	4b9e      	ldr	r3, [pc, #632]	; (8009ab4 <UART_SetConfig+0x5c0>)
 800983a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800983c:	e00d      	b.n	800985a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800983e:	f7fd f97d 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8009842:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009844:	e009      	b.n	800985a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800984a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800984c:	e005      	b.n	800985a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009858:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 8130 	beq.w	8009ac2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	4a94      	ldr	r2, [pc, #592]	; (8009ab8 <UART_SetConfig+0x5c4>)
 8009868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800986c:	461a      	mov	r2, r3
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009870:	fbb3 f3f2 	udiv	r3, r3, r2
 8009874:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	4613      	mov	r3, r2
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	4413      	add	r3, r2
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	429a      	cmp	r2, r3
 8009884:	d305      	bcc.n	8009892 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800988c:	69ba      	ldr	r2, [r7, #24]
 800988e:	429a      	cmp	r2, r3
 8009890:	d903      	bls.n	800989a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009898:	e113      	b.n	8009ac2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	2200      	movs	r2, #0
 800989e:	60bb      	str	r3, [r7, #8]
 80098a0:	60fa      	str	r2, [r7, #12]
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a6:	4a84      	ldr	r2, [pc, #528]	; (8009ab8 <UART_SetConfig+0x5c4>)
 80098a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	2200      	movs	r2, #0
 80098b0:	603b      	str	r3, [r7, #0]
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098bc:	f7f7 fa1c 	bl	8000cf8 <__aeabi_uldivmod>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4610      	mov	r0, r2
 80098c6:	4619      	mov	r1, r3
 80098c8:	f04f 0200 	mov.w	r2, #0
 80098cc:	f04f 0300 	mov.w	r3, #0
 80098d0:	020b      	lsls	r3, r1, #8
 80098d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80098d6:	0202      	lsls	r2, r0, #8
 80098d8:	6979      	ldr	r1, [r7, #20]
 80098da:	6849      	ldr	r1, [r1, #4]
 80098dc:	0849      	lsrs	r1, r1, #1
 80098de:	2000      	movs	r0, #0
 80098e0:	460c      	mov	r4, r1
 80098e2:	4605      	mov	r5, r0
 80098e4:	eb12 0804 	adds.w	r8, r2, r4
 80098e8:	eb43 0905 	adc.w	r9, r3, r5
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	469a      	mov	sl, r3
 80098f4:	4693      	mov	fp, r2
 80098f6:	4652      	mov	r2, sl
 80098f8:	465b      	mov	r3, fp
 80098fa:	4640      	mov	r0, r8
 80098fc:	4649      	mov	r1, r9
 80098fe:	f7f7 f9fb 	bl	8000cf8 <__aeabi_uldivmod>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4613      	mov	r3, r2
 8009908:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009910:	d308      	bcc.n	8009924 <UART_SetConfig+0x430>
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009918:	d204      	bcs.n	8009924 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	6a3a      	ldr	r2, [r7, #32]
 8009920:	60da      	str	r2, [r3, #12]
 8009922:	e0ce      	b.n	8009ac2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800992a:	e0ca      	b.n	8009ac2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009934:	d166      	bne.n	8009a04 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009936:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800993a:	2b08      	cmp	r3, #8
 800993c:	d827      	bhi.n	800998e <UART_SetConfig+0x49a>
 800993e:	a201      	add	r2, pc, #4	; (adr r2, 8009944 <UART_SetConfig+0x450>)
 8009940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009944:	08009969 	.word	0x08009969
 8009948:	08009971 	.word	0x08009971
 800994c:	08009979 	.word	0x08009979
 8009950:	0800998f 	.word	0x0800998f
 8009954:	0800997f 	.word	0x0800997f
 8009958:	0800998f 	.word	0x0800998f
 800995c:	0800998f 	.word	0x0800998f
 8009960:	0800998f 	.word	0x0800998f
 8009964:	08009987 	.word	0x08009987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009968:	f7fd f956 	bl	8006c18 <HAL_RCC_GetPCLK1Freq>
 800996c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800996e:	e014      	b.n	800999a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009970:	f7fd f968 	bl	8006c44 <HAL_RCC_GetPCLK2Freq>
 8009974:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009976:	e010      	b.n	800999a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009978:	4b4e      	ldr	r3, [pc, #312]	; (8009ab4 <UART_SetConfig+0x5c0>)
 800997a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800997c:	e00d      	b.n	800999a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800997e:	f7fd f8dd 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8009982:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009984:	e009      	b.n	800999a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800998c:	e005      	b.n	800999a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 8090 	beq.w	8009ac2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	4a44      	ldr	r2, [pc, #272]	; (8009ab8 <UART_SetConfig+0x5c4>)
 80099a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ac:	461a      	mov	r2, r3
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80099b4:	005a      	lsls	r2, r3, #1
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	085b      	lsrs	r3, r3, #1
 80099bc:	441a      	add	r2, r3
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	2b0f      	cmp	r3, #15
 80099cc:	d916      	bls.n	80099fc <UART_SetConfig+0x508>
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099d4:	d212      	bcs.n	80099fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f023 030f 	bic.w	r3, r3, #15
 80099de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	085b      	lsrs	r3, r3, #1
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	8bfb      	ldrh	r3, [r7, #30]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	8bfa      	ldrh	r2, [r7, #30]
 80099f8:	60da      	str	r2, [r3, #12]
 80099fa:	e062      	b.n	8009ac2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009a02:	e05e      	b.n	8009ac2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a08:	2b08      	cmp	r3, #8
 8009a0a:	d828      	bhi.n	8009a5e <UART_SetConfig+0x56a>
 8009a0c:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <UART_SetConfig+0x520>)
 8009a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a12:	bf00      	nop
 8009a14:	08009a39 	.word	0x08009a39
 8009a18:	08009a41 	.word	0x08009a41
 8009a1c:	08009a49 	.word	0x08009a49
 8009a20:	08009a5f 	.word	0x08009a5f
 8009a24:	08009a4f 	.word	0x08009a4f
 8009a28:	08009a5f 	.word	0x08009a5f
 8009a2c:	08009a5f 	.word	0x08009a5f
 8009a30:	08009a5f 	.word	0x08009a5f
 8009a34:	08009a57 	.word	0x08009a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a38:	f7fd f8ee 	bl	8006c18 <HAL_RCC_GetPCLK1Freq>
 8009a3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a3e:	e014      	b.n	8009a6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a40:	f7fd f900 	bl	8006c44 <HAL_RCC_GetPCLK2Freq>
 8009a44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a46:	e010      	b.n	8009a6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a48:	4b1a      	ldr	r3, [pc, #104]	; (8009ab4 <UART_SetConfig+0x5c0>)
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a4c:	e00d      	b.n	8009a6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a4e:	f7fd f875 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8009a52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a54:	e009      	b.n	8009a6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a5c:	e005      	b.n	8009a6a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009a68:	bf00      	nop
    }

    if (pclk != 0U)
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d028      	beq.n	8009ac2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	4a10      	ldr	r2, [pc, #64]	; (8009ab8 <UART_SetConfig+0x5c4>)
 8009a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	085b      	lsrs	r3, r3, #1
 8009a88:	441a      	add	r2, r3
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	2b0f      	cmp	r3, #15
 8009a98:	d910      	bls.n	8009abc <UART_SetConfig+0x5c8>
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa0:	d20c      	bcs.n	8009abc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	60da      	str	r2, [r3, #12]
 8009aac:	e009      	b.n	8009ac2 <UART_SetConfig+0x5ce>
 8009aae:	bf00      	nop
 8009ab0:	40008000 	.word	0x40008000
 8009ab4:	00f42400 	.word	0x00f42400
 8009ab8:	0800f478 	.word	0x0800f478
      }
      else
      {
        ret = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	2200      	movs	r2, #0
 8009adc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009ade:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3730      	adds	r7, #48	; 0x30
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af8:	f003 0308 	and.w	r3, r3, #8
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00a      	beq.n	8009b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	430a      	orrs	r2, r1
 8009b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00a      	beq.n	8009b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	430a      	orrs	r2, r1
 8009b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3c:	f003 0302 	and.w	r3, r3, #2
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00a      	beq.n	8009b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5e:	f003 0304 	and.w	r3, r3, #4
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b80:	f003 0310 	and.w	r3, r3, #16
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00a      	beq.n	8009b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba2:	f003 0320 	and.w	r3, r3, #32
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00a      	beq.n	8009bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d01a      	beq.n	8009c02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	430a      	orrs	r2, r1
 8009be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bea:	d10a      	bne.n	8009c02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00a      	beq.n	8009c24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	430a      	orrs	r2, r1
 8009c22:	605a      	str	r2, [r3, #4]
  }
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b098      	sub	sp, #96	; 0x60
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c40:	f7f9 ffd4 	bl	8003bec <HAL_GetTick>
 8009c44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0308 	and.w	r3, r3, #8
 8009c50:	2b08      	cmp	r3, #8
 8009c52:	d12f      	bne.n	8009cb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f88e 	bl	8009d84 <UART_WaitOnFlagUntilTimeout>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d022      	beq.n	8009cb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c76:	e853 3f00 	ldrex	r3, [r3]
 8009c7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c82:	653b      	str	r3, [r7, #80]	; 0x50
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8009c8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c94:	e841 2300 	strex	r3, r2, [r1]
 8009c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1e6      	bne.n	8009c6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	e063      	b.n	8009d7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0304 	and.w	r3, r3, #4
 8009cbe:	2b04      	cmp	r3, #4
 8009cc0:	d149      	bne.n	8009d56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f857 	bl	8009d84 <UART_WaitOnFlagUntilTimeout>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d03c      	beq.n	8009d56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8009cfc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e6      	bne.n	8009cdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3308      	adds	r3, #8
 8009d14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f023 0301 	bic.w	r3, r3, #1
 8009d24:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d2e:	61fa      	str	r2, [r7, #28]
 8009d30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	69b9      	ldr	r1, [r7, #24]
 8009d34:	69fa      	ldr	r2, [r7, #28]
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e5      	bne.n	8009d0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2220      	movs	r2, #32
 8009d46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e012      	b.n	8009d7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2220      	movs	r2, #32
 8009d62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3758      	adds	r7, #88	; 0x58
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	603b      	str	r3, [r7, #0]
 8009d90:	4613      	mov	r3, r2
 8009d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d94:	e04f      	b.n	8009e36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9c:	d04b      	beq.n	8009e36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d9e:	f7f9 ff25 	bl	8003bec <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d302      	bcc.n	8009db4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e04e      	b.n	8009e56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0304 	and.w	r3, r3, #4
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d037      	beq.n	8009e36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2b80      	cmp	r3, #128	; 0x80
 8009dca:	d034      	beq.n	8009e36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2b40      	cmp	r3, #64	; 0x40
 8009dd0:	d031      	beq.n	8009e36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	69db      	ldr	r3, [r3, #28]
 8009dd8:	f003 0308 	and.w	r3, r3, #8
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d110      	bne.n	8009e02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2208      	movs	r2, #8
 8009de6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f000 f95b 	bl	800a0a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2208      	movs	r2, #8
 8009df2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e029      	b.n	8009e56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	69db      	ldr	r3, [r3, #28]
 8009e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e10:	d111      	bne.n	8009e36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 f941 	bl	800a0a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e00f      	b.n	8009e56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	69da      	ldr	r2, [r3, #28]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	4013      	ands	r3, r2
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	bf0c      	ite	eq
 8009e46:	2301      	moveq	r3, #1
 8009e48:	2300      	movne	r3, #0
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d0a0      	beq.n	8009d96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
	...

08009e60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b0a3      	sub	sp, #140	; 0x8c
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	88fa      	ldrh	r2, [r7, #6]
 8009e78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	88fa      	ldrh	r2, [r7, #6]
 8009e80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e92:	d10e      	bne.n	8009eb2 <UART_Start_Receive_IT+0x52>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d105      	bne.n	8009ea8 <UART_Start_Receive_IT+0x48>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009ea2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009ea6:	e02d      	b.n	8009f04 <UART_Start_Receive_IT+0xa4>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	22ff      	movs	r2, #255	; 0xff
 8009eac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009eb0:	e028      	b.n	8009f04 <UART_Start_Receive_IT+0xa4>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10d      	bne.n	8009ed6 <UART_Start_Receive_IT+0x76>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d104      	bne.n	8009ecc <UART_Start_Receive_IT+0x6c>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	22ff      	movs	r2, #255	; 0xff
 8009ec6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009eca:	e01b      	b.n	8009f04 <UART_Start_Receive_IT+0xa4>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	227f      	movs	r2, #127	; 0x7f
 8009ed0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009ed4:	e016      	b.n	8009f04 <UART_Start_Receive_IT+0xa4>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ede:	d10d      	bne.n	8009efc <UART_Start_Receive_IT+0x9c>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d104      	bne.n	8009ef2 <UART_Start_Receive_IT+0x92>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	227f      	movs	r2, #127	; 0x7f
 8009eec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009ef0:	e008      	b.n	8009f04 <UART_Start_Receive_IT+0xa4>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	223f      	movs	r2, #63	; 0x3f
 8009ef6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009efa:	e003      	b.n	8009f04 <UART_Start_Receive_IT+0xa4>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2222      	movs	r2, #34	; 0x22
 8009f10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3308      	adds	r3, #8
 8009f1a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f1e:	e853 3f00 	ldrex	r3, [r3]
 8009f22:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f26:	f043 0301 	orr.w	r3, r3, #1
 8009f2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009f38:	673a      	str	r2, [r7, #112]	; 0x70
 8009f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009f3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009f40:	e841 2300 	strex	r3, r2, [r1]
 8009f44:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1e3      	bne.n	8009f14 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f54:	d14f      	bne.n	8009ff6 <UART_Start_Receive_IT+0x196>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f5c:	88fa      	ldrh	r2, [r7, #6]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d349      	bcc.n	8009ff6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f6a:	d107      	bne.n	8009f7c <UART_Start_Receive_IT+0x11c>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d103      	bne.n	8009f7c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	4a47      	ldr	r2, [pc, #284]	; (800a094 <UART_Start_Receive_IT+0x234>)
 8009f78:	675a      	str	r2, [r3, #116]	; 0x74
 8009f7a:	e002      	b.n	8009f82 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4a46      	ldr	r2, [pc, #280]	; (800a098 <UART_Start_Receive_IT+0x238>)
 8009f80:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d01a      	beq.n	8009fc0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f92:	e853 3f00 	ldrex	r3, [r3]
 8009f96:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009fac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e4      	bne.n	8009f8a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3308      	adds	r3, #8
 8009fde:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009fe0:	64ba      	str	r2, [r7, #72]	; 0x48
 8009fe2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fe8:	e841 2300 	strex	r3, r2, [r1]
 8009fec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e5      	bne.n	8009fc0 <UART_Start_Receive_IT+0x160>
 8009ff4:	e046      	b.n	800a084 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ffe:	d107      	bne.n	800a010 <UART_Start_Receive_IT+0x1b0>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d103      	bne.n	800a010 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4a24      	ldr	r2, [pc, #144]	; (800a09c <UART_Start_Receive_IT+0x23c>)
 800a00c:	675a      	str	r2, [r3, #116]	; 0x74
 800a00e:	e002      	b.n	800a016 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4a23      	ldr	r2, [pc, #140]	; (800a0a0 <UART_Start_Receive_IT+0x240>)
 800a014:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d019      	beq.n	800a052 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a026:	e853 3f00 	ldrex	r3, [r3]
 800a02a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a032:	677b      	str	r3, [r7, #116]	; 0x74
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	461a      	mov	r2, r3
 800a03a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a03c:	637b      	str	r3, [r7, #52]	; 0x34
 800a03e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a040:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a044:	e841 2300 	strex	r3, r2, [r1]
 800a048:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e6      	bne.n	800a01e <UART_Start_Receive_IT+0x1be>
 800a050:	e018      	b.n	800a084 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	613b      	str	r3, [r7, #16]
   return(result);
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	f043 0320 	orr.w	r3, r3, #32
 800a066:	67bb      	str	r3, [r7, #120]	; 0x78
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	461a      	mov	r2, r3
 800a06e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a070:	623b      	str	r3, [r7, #32]
 800a072:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	69f9      	ldr	r1, [r7, #28]
 800a076:	6a3a      	ldr	r2, [r7, #32]
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e6      	bne.n	800a052 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	378c      	adds	r7, #140	; 0x8c
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	0800a8c5 	.word	0x0800a8c5
 800a098:	0800a565 	.word	0x0800a565
 800a09c:	0800a3ad 	.word	0x0800a3ad
 800a0a0:	0800a1f5 	.word	0x0800a1f5

0800a0a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b095      	sub	sp, #84	; 0x54
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b4:	e853 3f00 	ldrex	r3, [r3]
 800a0b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a0cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0d2:	e841 2300 	strex	r3, r2, [r1]
 800a0d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1e6      	bne.n	800a0ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	e853 3f00 	ldrex	r3, [r3]
 800a0ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0f4:	f023 0301 	bic.w	r3, r3, #1
 800a0f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3308      	adds	r3, #8
 800a100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a102:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a10a:	e841 2300 	strex	r3, r2, [r1]
 800a10e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e3      	bne.n	800a0de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d118      	bne.n	800a150 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	e853 3f00 	ldrex	r3, [r3]
 800a12a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	f023 0310 	bic.w	r3, r3, #16
 800a132:	647b      	str	r3, [r7, #68]	; 0x44
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	461a      	mov	r2, r3
 800a13a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a13c:	61bb      	str	r3, [r7, #24]
 800a13e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a140:	6979      	ldr	r1, [r7, #20]
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	e841 2300 	strex	r3, r2, [r1]
 800a148:	613b      	str	r3, [r7, #16]
   return(result);
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1e6      	bne.n	800a11e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a164:	bf00      	nop
 800a166:	3754      	adds	r7, #84	; 0x54
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f7ff f99a 	bl	80094c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a194:	bf00      	nop
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	e853 3f00 	ldrex	r3, [r3]
 800a1b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1b8:	61fb      	str	r3, [r7, #28]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	61bb      	str	r3, [r7, #24]
 800a1c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c6:	6979      	ldr	r1, [r7, #20]
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	e841 2300 	strex	r3, r2, [r1]
 800a1ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1e6      	bne.n	800a1a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2220      	movs	r2, #32
 800a1da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7ff f965 	bl	80094b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1ea:	bf00      	nop
 800a1ec:	3720      	adds	r7, #32
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b09c      	sub	sp, #112	; 0x70
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a202:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a20c:	2b22      	cmp	r3, #34	; 0x22
 800a20e:	f040 80be 	bne.w	800a38e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a218:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a21c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a220:	b2d9      	uxtb	r1, r3
 800a222:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a226:	b2da      	uxtb	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a22c:	400a      	ands	r2, r1
 800a22e:	b2d2      	uxtb	r2, r2
 800a230:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a242:	b29b      	uxth	r3, r3
 800a244:	3b01      	subs	r3, #1
 800a246:	b29a      	uxth	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a254:	b29b      	uxth	r3, r3
 800a256:	2b00      	cmp	r3, #0
 800a258:	f040 80a1 	bne.w	800a39e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a26a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a26c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a270:	66bb      	str	r3, [r7, #104]	; 0x68
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	461a      	mov	r2, r3
 800a278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a27a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a27c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a280:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a282:	e841 2300 	strex	r3, r2, [r1]
 800a286:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1e6      	bne.n	800a25c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	3308      	adds	r3, #8
 800a294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	e853 3f00 	ldrex	r3, [r3]
 800a29c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a0:	f023 0301 	bic.w	r3, r3, #1
 800a2a4:	667b      	str	r3, [r7, #100]	; 0x64
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a2ae:	647a      	str	r2, [r7, #68]	; 0x44
 800a2b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2b6:	e841 2300 	strex	r3, r2, [r1]
 800a2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1e5      	bne.n	800a28e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2220      	movs	r2, #32
 800a2c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a33      	ldr	r2, [pc, #204]	; (800a3a8 <UART_RxISR_8BIT+0x1b4>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d01f      	beq.n	800a320 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d018      	beq.n	800a320 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	e853 3f00 	ldrex	r3, [r3]
 800a2fa:	623b      	str	r3, [r7, #32]
   return(result);
 800a2fc:	6a3b      	ldr	r3, [r7, #32]
 800a2fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a302:	663b      	str	r3, [r7, #96]	; 0x60
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	461a      	mov	r2, r3
 800a30a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a30c:	633b      	str	r3, [r7, #48]	; 0x30
 800a30e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a314:	e841 2300 	strex	r3, r2, [r1]
 800a318:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e6      	bne.n	800a2ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a324:	2b01      	cmp	r3, #1
 800a326:	d12e      	bne.n	800a386 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	e853 3f00 	ldrex	r3, [r3]
 800a33a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f023 0310 	bic.w	r3, r3, #16
 800a342:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	461a      	mov	r2, r3
 800a34a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a34c:	61fb      	str	r3, [r7, #28]
 800a34e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a350:	69b9      	ldr	r1, [r7, #24]
 800a352:	69fa      	ldr	r2, [r7, #28]
 800a354:	e841 2300 	strex	r3, r2, [r1]
 800a358:	617b      	str	r3, [r7, #20]
   return(result);
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1e6      	bne.n	800a32e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	f003 0310 	and.w	r3, r3, #16
 800a36a:	2b10      	cmp	r3, #16
 800a36c:	d103      	bne.n	800a376 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2210      	movs	r2, #16
 800a374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a37c:	4619      	mov	r1, r3
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7ff f8ac 	bl	80094dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a384:	e00b      	b.n	800a39e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7f8 f86a 	bl	8002460 <HAL_UART_RxCpltCallback>
}
 800a38c:	e007      	b.n	800a39e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	699a      	ldr	r2, [r3, #24]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f042 0208 	orr.w	r2, r2, #8
 800a39c:	619a      	str	r2, [r3, #24]
}
 800a39e:	bf00      	nop
 800a3a0:	3770      	adds	r7, #112	; 0x70
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	40008000 	.word	0x40008000

0800a3ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b09c      	sub	sp, #112	; 0x70
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a3ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3c4:	2b22      	cmp	r3, #34	; 0x22
 800a3c6:	f040 80be 	bne.w	800a546 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a3da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800a3de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ee:	1c9a      	adds	r2, r3, #2
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f040 80a1 	bne.w	800a556 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a41c:	e853 3f00 	ldrex	r3, [r3]
 800a420:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a428:	667b      	str	r3, [r7, #100]	; 0x64
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a432:	657b      	str	r3, [r7, #84]	; 0x54
 800a434:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a436:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a438:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a43a:	e841 2300 	strex	r3, r2, [r1]
 800a43e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1e6      	bne.n	800a414 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3308      	adds	r3, #8
 800a44c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a458:	f023 0301 	bic.w	r3, r3, #1
 800a45c:	663b      	str	r3, [r7, #96]	; 0x60
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3308      	adds	r3, #8
 800a464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a466:	643a      	str	r2, [r7, #64]	; 0x40
 800a468:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a46c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e5      	bne.n	800a446 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2220      	movs	r2, #32
 800a47e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a33      	ldr	r2, [pc, #204]	; (800a560 <UART_RxISR_16BIT+0x1b4>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d01f      	beq.n	800a4d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d018      	beq.n	800a4d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	e853 3f00 	ldrex	r3, [r3]
 800a4b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a4ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4c6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4cc:	e841 2300 	strex	r3, r2, [r1]
 800a4d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1e6      	bne.n	800a4a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d12e      	bne.n	800a53e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	e853 3f00 	ldrex	r3, [r3]
 800a4f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	f023 0310 	bic.w	r3, r3, #16
 800a4fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	461a      	mov	r2, r3
 800a502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a504:	61bb      	str	r3, [r7, #24]
 800a506:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a508:	6979      	ldr	r1, [r7, #20]
 800a50a:	69ba      	ldr	r2, [r7, #24]
 800a50c:	e841 2300 	strex	r3, r2, [r1]
 800a510:	613b      	str	r3, [r7, #16]
   return(result);
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1e6      	bne.n	800a4e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	f003 0310 	and.w	r3, r3, #16
 800a522:	2b10      	cmp	r3, #16
 800a524:	d103      	bne.n	800a52e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2210      	movs	r2, #16
 800a52c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7fe ffd0 	bl	80094dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a53c:	e00b      	b.n	800a556 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7f7 ff8e 	bl	8002460 <HAL_UART_RxCpltCallback>
}
 800a544:	e007      	b.n	800a556 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	699a      	ldr	r2, [r3, #24]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f042 0208 	orr.w	r2, r2, #8
 800a554:	619a      	str	r2, [r3, #24]
}
 800a556:	bf00      	nop
 800a558:	3770      	adds	r7, #112	; 0x70
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	40008000 	.word	0x40008000

0800a564 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b0ac      	sub	sp, #176	; 0xb0
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a572:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	69db      	ldr	r3, [r3, #28]
 800a57c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a59a:	2b22      	cmp	r3, #34	; 0x22
 800a59c:	f040 8182 	bne.w	800a8a4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a5a6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a5aa:	e125      	b.n	800a7f8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a5b6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800a5ba:	b2d9      	uxtb	r1, r3
 800a5bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5c6:	400a      	ands	r2, r1
 800a5c8:	b2d2      	uxtb	r2, r2
 800a5ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5d0:	1c5a      	adds	r2, r3, #1
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a5f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d053      	beq.n	800a6a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	d011      	beq.n	800a62e <UART_RxISR_8BIT_FIFOEN+0xca>
 800a60a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a60e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00b      	beq.n	800a62e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2201      	movs	r2, #1
 800a61c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a624:	f043 0201 	orr.w	r2, r3, #1
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a62e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a632:	f003 0302 	and.w	r3, r3, #2
 800a636:	2b00      	cmp	r3, #0
 800a638:	d011      	beq.n	800a65e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a63a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00b      	beq.n	800a65e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2202      	movs	r2, #2
 800a64c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a654:	f043 0204 	orr.w	r2, r3, #4
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a65e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a662:	f003 0304 	and.w	r3, r3, #4
 800a666:	2b00      	cmp	r3, #0
 800a668:	d011      	beq.n	800a68e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a66a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a66e:	f003 0301 	and.w	r3, r3, #1
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00b      	beq.n	800a68e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2204      	movs	r2, #4
 800a67c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a684:	f043 0202 	orr.w	r2, r3, #2
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a694:	2b00      	cmp	r3, #0
 800a696:	d006      	beq.n	800a6a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7fe ff15 	bl	80094c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f040 80a2 	bne.w	800a7f8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6bc:	e853 3f00 	ldrex	r3, [r3]
 800a6c0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800a6c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6d8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6da:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a6dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a6de:	e841 2300 	strex	r3, r2, [r1]
 800a6e2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800a6e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1e4      	bne.n	800a6b4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3308      	adds	r3, #8
 800a6f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6f4:	e853 3f00 	ldrex	r3, [r3]
 800a6f8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a6fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a700:	f023 0301 	bic.w	r3, r3, #1
 800a704:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3308      	adds	r3, #8
 800a70e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a712:	66ba      	str	r2, [r7, #104]	; 0x68
 800a714:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a718:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e1      	bne.n	800a6ea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2220      	movs	r2, #32
 800a72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a5f      	ldr	r2, [pc, #380]	; (800a8bc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d021      	beq.n	800a788 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d01a      	beq.n	800a788 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a75a:	e853 3f00 	ldrex	r3, [r3]
 800a75e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a762:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a774:	657b      	str	r3, [r7, #84]	; 0x54
 800a776:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a778:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a77a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a77c:	e841 2300 	strex	r3, r2, [r1]
 800a780:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1e4      	bne.n	800a752 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d130      	bne.n	800a7f2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79e:	e853 3f00 	ldrex	r3, [r3]
 800a7a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a6:	f023 0310 	bic.w	r3, r3, #16
 800a7aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7b8:	643b      	str	r3, [r7, #64]	; 0x40
 800a7ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7c0:	e841 2300 	strex	r3, r2, [r1]
 800a7c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1e4      	bne.n	800a796 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	69db      	ldr	r3, [r3, #28]
 800a7d2:	f003 0310 	and.w	r3, r3, #16
 800a7d6:	2b10      	cmp	r3, #16
 800a7d8:	d103      	bne.n	800a7e2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2210      	movs	r2, #16
 800a7e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7fe fe76 	bl	80094dc <HAL_UARTEx_RxEventCallback>
 800a7f0:	e002      	b.n	800a7f8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7f7 fe34 	bl	8002460 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7f8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d006      	beq.n	800a80e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a804:	f003 0320 	and.w	r3, r3, #32
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f47f aecf 	bne.w	800a5ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a814:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a818:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d049      	beq.n	800a8b4 <UART_RxISR_8BIT_FIFOEN+0x350>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a826:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d242      	bcs.n	800a8b4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	3308      	adds	r3, #8
 800a834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	3308      	adds	r3, #8
 800a84e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a852:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a854:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a85a:	e841 2300 	strex	r3, r2, [r1]
 800a85e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1e3      	bne.n	800a82e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a15      	ldr	r2, [pc, #84]	; (800a8c0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a86a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	60bb      	str	r3, [r7, #8]
   return(result);
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	f043 0320 	orr.w	r3, r3, #32
 800a880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	461a      	mov	r2, r3
 800a88a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a88e:	61bb      	str	r3, [r7, #24]
 800a890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	6979      	ldr	r1, [r7, #20]
 800a894:	69ba      	ldr	r2, [r7, #24]
 800a896:	e841 2300 	strex	r3, r2, [r1]
 800a89a:	613b      	str	r3, [r7, #16]
   return(result);
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e4      	bne.n	800a86c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8a2:	e007      	b.n	800a8b4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	699a      	ldr	r2, [r3, #24]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0208 	orr.w	r2, r2, #8
 800a8b2:	619a      	str	r2, [r3, #24]
}
 800a8b4:	bf00      	nop
 800a8b6:	37b0      	adds	r7, #176	; 0xb0
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	40008000 	.word	0x40008000
 800a8c0:	0800a1f5 	.word	0x0800a1f5

0800a8c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b0ae      	sub	sp, #184	; 0xb8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a8d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	69db      	ldr	r3, [r3, #28]
 800a8dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8fa:	2b22      	cmp	r3, #34	; 0x22
 800a8fc:	f040 8186 	bne.w	800ac0c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a906:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a90a:	e129      	b.n	800ab60 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a912:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a91a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a91e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a922:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a926:	4013      	ands	r3, r2
 800a928:	b29a      	uxth	r2, r3
 800a92a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a92e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a934:	1c9a      	adds	r2, r3, #2
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a940:	b29b      	uxth	r3, r3
 800a942:	3b01      	subs	r3, #1
 800a944:	b29a      	uxth	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	69db      	ldr	r3, [r3, #28]
 800a952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a95a:	f003 0307 	and.w	r3, r3, #7
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d053      	beq.n	800aa0a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d011      	beq.n	800a992 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a96e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00b      	beq.n	800a992 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2201      	movs	r2, #1
 800a980:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a988:	f043 0201 	orr.w	r2, r3, #1
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a996:	f003 0302 	and.w	r3, r3, #2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d011      	beq.n	800a9c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a99e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00b      	beq.n	800a9c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9b8:	f043 0204 	orr.w	r2, r3, #4
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a9c6:	f003 0304 	and.w	r3, r3, #4
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d011      	beq.n	800a9f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a9ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00b      	beq.n	800a9f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2204      	movs	r2, #4
 800a9e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9e8:	f043 0202 	orr.w	r2, r3, #2
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d006      	beq.n	800aa0a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7fe fd63 	bl	80094c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f040 80a4 	bne.w	800ab60 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa20:	e853 3f00 	ldrex	r3, [r3]
 800aa24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	461a      	mov	r2, r3
 800aa36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa3e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa46:	e841 2300 	strex	r3, r2, [r1]
 800aa4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1e2      	bne.n	800aa18 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3308      	adds	r3, #8
 800aa58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa68:	f023 0301 	bic.w	r3, r3, #1
 800aa6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3308      	adds	r3, #8
 800aa76:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800aa7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aa7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa82:	e841 2300 	strex	r3, r2, [r1]
 800aa86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1e1      	bne.n	800aa52 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2220      	movs	r2, #32
 800aa92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a5f      	ldr	r2, [pc, #380]	; (800ac24 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d021      	beq.n	800aaf0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d01a      	beq.n	800aaf0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aac2:	e853 3f00 	ldrex	r3, [r3]
 800aac6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aace:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	461a      	mov	r2, r3
 800aad8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aadc:	65bb      	str	r3, [r7, #88]	; 0x58
 800aade:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aae4:	e841 2300 	strex	r3, r2, [r1]
 800aae8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aaea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1e4      	bne.n	800aaba <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d130      	bne.n	800ab5a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab06:	e853 3f00 	ldrex	r3, [r3]
 800ab0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0e:	f023 0310 	bic.w	r3, r3, #16
 800ab12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab20:	647b      	str	r3, [r7, #68]	; 0x44
 800ab22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab28:	e841 2300 	strex	r3, r2, [r1]
 800ab2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1e4      	bne.n	800aafe <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	69db      	ldr	r3, [r3, #28]
 800ab3a:	f003 0310 	and.w	r3, r3, #16
 800ab3e:	2b10      	cmp	r3, #16
 800ab40:	d103      	bne.n	800ab4a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2210      	movs	r2, #16
 800ab48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab50:	4619      	mov	r1, r3
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7fe fcc2 	bl	80094dc <HAL_UARTEx_RxEventCallback>
 800ab58:	e002      	b.n	800ab60 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7f7 fc80 	bl	8002460 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab60:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d006      	beq.n	800ab76 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800ab68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab6c:	f003 0320 	and.w	r3, r3, #32
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f47f aecb 	bne.w	800a90c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab7c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ab80:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d049      	beq.n	800ac1c <UART_RxISR_16BIT_FIFOEN+0x358>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ab8e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d242      	bcs.n	800ac1c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	e853 3f00 	ldrex	r3, [r3]
 800aba4:	623b      	str	r3, [r7, #32]
   return(result);
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3308      	adds	r3, #8
 800abb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800abba:	633a      	str	r2, [r7, #48]	; 0x30
 800abbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abc2:	e841 2300 	strex	r3, r2, [r1]
 800abc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1e3      	bne.n	800ab96 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a15      	ldr	r2, [pc, #84]	; (800ac28 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800abd2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	e853 3f00 	ldrex	r3, [r3]
 800abe0:	60fb      	str	r3, [r7, #12]
   return(result);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f043 0320 	orr.w	r3, r3, #32
 800abe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	461a      	mov	r2, r3
 800abf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abf6:	61fb      	str	r3, [r7, #28]
 800abf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfa:	69b9      	ldr	r1, [r7, #24]
 800abfc:	69fa      	ldr	r2, [r7, #28]
 800abfe:	e841 2300 	strex	r3, r2, [r1]
 800ac02:	617b      	str	r3, [r7, #20]
   return(result);
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1e4      	bne.n	800abd4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac0a:	e007      	b.n	800ac1c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	699a      	ldr	r2, [r3, #24]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f042 0208 	orr.w	r2, r2, #8
 800ac1a:	619a      	str	r2, [r3, #24]
}
 800ac1c:	bf00      	nop
 800ac1e:	37b8      	adds	r7, #184	; 0xb8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	40008000 	.word	0x40008000
 800ac28:	0800a3ad 	.word	0x0800a3ad

0800ac2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d101      	bne.n	800ac7e <HAL_UARTEx_DisableFifoMode+0x16>
 800ac7a:	2302      	movs	r3, #2
 800ac7c:	e027      	b.n	800acce <HAL_UARTEx_DisableFifoMode+0x66>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2201      	movs	r2, #1
 800ac82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2224      	movs	r2, #36	; 0x24
 800ac8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f022 0201 	bic.w	r2, r2, #1
 800aca4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800acac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2220      	movs	r2, #32
 800acc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800acea:	2b01      	cmp	r3, #1
 800acec:	d101      	bne.n	800acf2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800acee:	2302      	movs	r3, #2
 800acf0:	e02d      	b.n	800ad4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2224      	movs	r2, #36	; 0x24
 800acfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f022 0201 	bic.w	r2, r2, #1
 800ad18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	430a      	orrs	r2, r1
 800ad2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f850 	bl	800add4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2220      	movs	r2, #32
 800ad40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
 800ad5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d101      	bne.n	800ad6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	e02d      	b.n	800adca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2224      	movs	r2, #36	; 0x24
 800ad7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f022 0201 	bic.w	r2, r2, #1
 800ad94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	430a      	orrs	r2, r1
 800ada8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f812 	bl	800add4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2220      	movs	r2, #32
 800adbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
	...

0800add4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d108      	bne.n	800adf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800adf4:	e031      	b.n	800ae5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adf6:	2308      	movs	r3, #8
 800adf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adfa:	2308      	movs	r3, #8
 800adfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	0e5b      	lsrs	r3, r3, #25
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	f003 0307 	and.w	r3, r3, #7
 800ae0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	0f5b      	lsrs	r3, r3, #29
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	f003 0307 	and.w	r3, r3, #7
 800ae1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	7b3a      	ldrb	r2, [r7, #12]
 800ae22:	4911      	ldr	r1, [pc, #68]	; (800ae68 <UARTEx_SetNbDataToProcess+0x94>)
 800ae24:	5c8a      	ldrb	r2, [r1, r2]
 800ae26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae2a:	7b3a      	ldrb	r2, [r7, #12]
 800ae2c:	490f      	ldr	r1, [pc, #60]	; (800ae6c <UARTEx_SetNbDataToProcess+0x98>)
 800ae2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae30:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
 800ae3e:	7b7a      	ldrb	r2, [r7, #13]
 800ae40:	4909      	ldr	r1, [pc, #36]	; (800ae68 <UARTEx_SetNbDataToProcess+0x94>)
 800ae42:	5c8a      	ldrb	r2, [r1, r2]
 800ae44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae48:	7b7a      	ldrb	r2, [r7, #13]
 800ae4a:	4908      	ldr	r1, [pc, #32]	; (800ae6c <UARTEx_SetNbDataToProcess+0x98>)
 800ae4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae5a:	bf00      	nop
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	0800f490 	.word	0x0800f490
 800ae6c:	0800f498 	.word	0x0800f498

0800ae70 <atof>:
 800ae70:	2100      	movs	r1, #0
 800ae72:	f001 badf 	b.w	800c434 <strtod>
	...

0800ae78 <__errno>:
 800ae78:	4b01      	ldr	r3, [pc, #4]	; (800ae80 <__errno+0x8>)
 800ae7a:	6818      	ldr	r0, [r3, #0]
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	20000010 	.word	0x20000010

0800ae84 <__libc_init_array>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	4d0d      	ldr	r5, [pc, #52]	; (800aebc <__libc_init_array+0x38>)
 800ae88:	4c0d      	ldr	r4, [pc, #52]	; (800aec0 <__libc_init_array+0x3c>)
 800ae8a:	1b64      	subs	r4, r4, r5
 800ae8c:	10a4      	asrs	r4, r4, #2
 800ae8e:	2600      	movs	r6, #0
 800ae90:	42a6      	cmp	r6, r4
 800ae92:	d109      	bne.n	800aea8 <__libc_init_array+0x24>
 800ae94:	4d0b      	ldr	r5, [pc, #44]	; (800aec4 <__libc_init_array+0x40>)
 800ae96:	4c0c      	ldr	r4, [pc, #48]	; (800aec8 <__libc_init_array+0x44>)
 800ae98:	f004 fa5a 	bl	800f350 <_init>
 800ae9c:	1b64      	subs	r4, r4, r5
 800ae9e:	10a4      	asrs	r4, r4, #2
 800aea0:	2600      	movs	r6, #0
 800aea2:	42a6      	cmp	r6, r4
 800aea4:	d105      	bne.n	800aeb2 <__libc_init_array+0x2e>
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeac:	4798      	blx	r3
 800aeae:	3601      	adds	r6, #1
 800aeb0:	e7ee      	b.n	800ae90 <__libc_init_array+0xc>
 800aeb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeb6:	4798      	blx	r3
 800aeb8:	3601      	adds	r6, #1
 800aeba:	e7f2      	b.n	800aea2 <__libc_init_array+0x1e>
 800aebc:	0800f9a0 	.word	0x0800f9a0
 800aec0:	0800f9a0 	.word	0x0800f9a0
 800aec4:	0800f9a0 	.word	0x0800f9a0
 800aec8:	0800f9a4 	.word	0x0800f9a4

0800aecc <memset>:
 800aecc:	4402      	add	r2, r0
 800aece:	4603      	mov	r3, r0
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d100      	bne.n	800aed6 <memset+0xa>
 800aed4:	4770      	bx	lr
 800aed6:	f803 1b01 	strb.w	r1, [r3], #1
 800aeda:	e7f9      	b.n	800aed0 <memset+0x4>

0800aedc <__cvt>:
 800aedc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aee0:	ec55 4b10 	vmov	r4, r5, d0
 800aee4:	2d00      	cmp	r5, #0
 800aee6:	460e      	mov	r6, r1
 800aee8:	4619      	mov	r1, r3
 800aeea:	462b      	mov	r3, r5
 800aeec:	bfbb      	ittet	lt
 800aeee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aef2:	461d      	movlt	r5, r3
 800aef4:	2300      	movge	r3, #0
 800aef6:	232d      	movlt	r3, #45	; 0x2d
 800aef8:	700b      	strb	r3, [r1, #0]
 800aefa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aefc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af00:	4691      	mov	r9, r2
 800af02:	f023 0820 	bic.w	r8, r3, #32
 800af06:	bfbc      	itt	lt
 800af08:	4622      	movlt	r2, r4
 800af0a:	4614      	movlt	r4, r2
 800af0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af10:	d005      	beq.n	800af1e <__cvt+0x42>
 800af12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af16:	d100      	bne.n	800af1a <__cvt+0x3e>
 800af18:	3601      	adds	r6, #1
 800af1a:	2102      	movs	r1, #2
 800af1c:	e000      	b.n	800af20 <__cvt+0x44>
 800af1e:	2103      	movs	r1, #3
 800af20:	ab03      	add	r3, sp, #12
 800af22:	9301      	str	r3, [sp, #4]
 800af24:	ab02      	add	r3, sp, #8
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	ec45 4b10 	vmov	d0, r4, r5
 800af2c:	4653      	mov	r3, sl
 800af2e:	4632      	mov	r2, r6
 800af30:	f001 fb92 	bl	800c658 <_dtoa_r>
 800af34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af38:	4607      	mov	r7, r0
 800af3a:	d102      	bne.n	800af42 <__cvt+0x66>
 800af3c:	f019 0f01 	tst.w	r9, #1
 800af40:	d022      	beq.n	800af88 <__cvt+0xac>
 800af42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af46:	eb07 0906 	add.w	r9, r7, r6
 800af4a:	d110      	bne.n	800af6e <__cvt+0x92>
 800af4c:	783b      	ldrb	r3, [r7, #0]
 800af4e:	2b30      	cmp	r3, #48	; 0x30
 800af50:	d10a      	bne.n	800af68 <__cvt+0x8c>
 800af52:	2200      	movs	r2, #0
 800af54:	2300      	movs	r3, #0
 800af56:	4620      	mov	r0, r4
 800af58:	4629      	mov	r1, r5
 800af5a:	f7f5 fded 	bl	8000b38 <__aeabi_dcmpeq>
 800af5e:	b918      	cbnz	r0, 800af68 <__cvt+0x8c>
 800af60:	f1c6 0601 	rsb	r6, r6, #1
 800af64:	f8ca 6000 	str.w	r6, [sl]
 800af68:	f8da 3000 	ldr.w	r3, [sl]
 800af6c:	4499      	add	r9, r3
 800af6e:	2200      	movs	r2, #0
 800af70:	2300      	movs	r3, #0
 800af72:	4620      	mov	r0, r4
 800af74:	4629      	mov	r1, r5
 800af76:	f7f5 fddf 	bl	8000b38 <__aeabi_dcmpeq>
 800af7a:	b108      	cbz	r0, 800af80 <__cvt+0xa4>
 800af7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800af80:	2230      	movs	r2, #48	; 0x30
 800af82:	9b03      	ldr	r3, [sp, #12]
 800af84:	454b      	cmp	r3, r9
 800af86:	d307      	bcc.n	800af98 <__cvt+0xbc>
 800af88:	9b03      	ldr	r3, [sp, #12]
 800af8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af8c:	1bdb      	subs	r3, r3, r7
 800af8e:	4638      	mov	r0, r7
 800af90:	6013      	str	r3, [r2, #0]
 800af92:	b004      	add	sp, #16
 800af94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af98:	1c59      	adds	r1, r3, #1
 800af9a:	9103      	str	r1, [sp, #12]
 800af9c:	701a      	strb	r2, [r3, #0]
 800af9e:	e7f0      	b.n	800af82 <__cvt+0xa6>

0800afa0 <__exponent>:
 800afa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afa2:	4603      	mov	r3, r0
 800afa4:	2900      	cmp	r1, #0
 800afa6:	bfb8      	it	lt
 800afa8:	4249      	neglt	r1, r1
 800afaa:	f803 2b02 	strb.w	r2, [r3], #2
 800afae:	bfb4      	ite	lt
 800afb0:	222d      	movlt	r2, #45	; 0x2d
 800afb2:	222b      	movge	r2, #43	; 0x2b
 800afb4:	2909      	cmp	r1, #9
 800afb6:	7042      	strb	r2, [r0, #1]
 800afb8:	dd2a      	ble.n	800b010 <__exponent+0x70>
 800afba:	f10d 0407 	add.w	r4, sp, #7
 800afbe:	46a4      	mov	ip, r4
 800afc0:	270a      	movs	r7, #10
 800afc2:	46a6      	mov	lr, r4
 800afc4:	460a      	mov	r2, r1
 800afc6:	fb91 f6f7 	sdiv	r6, r1, r7
 800afca:	fb07 1516 	mls	r5, r7, r6, r1
 800afce:	3530      	adds	r5, #48	; 0x30
 800afd0:	2a63      	cmp	r2, #99	; 0x63
 800afd2:	f104 34ff 	add.w	r4, r4, #4294967295
 800afd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800afda:	4631      	mov	r1, r6
 800afdc:	dcf1      	bgt.n	800afc2 <__exponent+0x22>
 800afde:	3130      	adds	r1, #48	; 0x30
 800afe0:	f1ae 0502 	sub.w	r5, lr, #2
 800afe4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800afe8:	1c44      	adds	r4, r0, #1
 800afea:	4629      	mov	r1, r5
 800afec:	4561      	cmp	r1, ip
 800afee:	d30a      	bcc.n	800b006 <__exponent+0x66>
 800aff0:	f10d 0209 	add.w	r2, sp, #9
 800aff4:	eba2 020e 	sub.w	r2, r2, lr
 800aff8:	4565      	cmp	r5, ip
 800affa:	bf88      	it	hi
 800affc:	2200      	movhi	r2, #0
 800affe:	4413      	add	r3, r2
 800b000:	1a18      	subs	r0, r3, r0
 800b002:	b003      	add	sp, #12
 800b004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b00a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b00e:	e7ed      	b.n	800afec <__exponent+0x4c>
 800b010:	2330      	movs	r3, #48	; 0x30
 800b012:	3130      	adds	r1, #48	; 0x30
 800b014:	7083      	strb	r3, [r0, #2]
 800b016:	70c1      	strb	r1, [r0, #3]
 800b018:	1d03      	adds	r3, r0, #4
 800b01a:	e7f1      	b.n	800b000 <__exponent+0x60>

0800b01c <_printf_float>:
 800b01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b020:	ed2d 8b02 	vpush	{d8}
 800b024:	b08d      	sub	sp, #52	; 0x34
 800b026:	460c      	mov	r4, r1
 800b028:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b02c:	4616      	mov	r6, r2
 800b02e:	461f      	mov	r7, r3
 800b030:	4605      	mov	r5, r0
 800b032:	f002 fc81 	bl	800d938 <_localeconv_r>
 800b036:	f8d0 a000 	ldr.w	sl, [r0]
 800b03a:	4650      	mov	r0, sl
 800b03c:	f7f5 f8fa 	bl	8000234 <strlen>
 800b040:	2300      	movs	r3, #0
 800b042:	930a      	str	r3, [sp, #40]	; 0x28
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	9305      	str	r3, [sp, #20]
 800b048:	f8d8 3000 	ldr.w	r3, [r8]
 800b04c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b050:	3307      	adds	r3, #7
 800b052:	f023 0307 	bic.w	r3, r3, #7
 800b056:	f103 0208 	add.w	r2, r3, #8
 800b05a:	f8c8 2000 	str.w	r2, [r8]
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b066:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b06a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b06e:	9307      	str	r3, [sp, #28]
 800b070:	f8cd 8018 	str.w	r8, [sp, #24]
 800b074:	ee08 0a10 	vmov	s16, r0
 800b078:	4b9f      	ldr	r3, [pc, #636]	; (800b2f8 <_printf_float+0x2dc>)
 800b07a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b07e:	f04f 32ff 	mov.w	r2, #4294967295
 800b082:	f7f5 fd8b 	bl	8000b9c <__aeabi_dcmpun>
 800b086:	bb88      	cbnz	r0, 800b0ec <_printf_float+0xd0>
 800b088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b08c:	4b9a      	ldr	r3, [pc, #616]	; (800b2f8 <_printf_float+0x2dc>)
 800b08e:	f04f 32ff 	mov.w	r2, #4294967295
 800b092:	f7f5 fd65 	bl	8000b60 <__aeabi_dcmple>
 800b096:	bb48      	cbnz	r0, 800b0ec <_printf_float+0xd0>
 800b098:	2200      	movs	r2, #0
 800b09a:	2300      	movs	r3, #0
 800b09c:	4640      	mov	r0, r8
 800b09e:	4649      	mov	r1, r9
 800b0a0:	f7f5 fd54 	bl	8000b4c <__aeabi_dcmplt>
 800b0a4:	b110      	cbz	r0, 800b0ac <_printf_float+0x90>
 800b0a6:	232d      	movs	r3, #45	; 0x2d
 800b0a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0ac:	4b93      	ldr	r3, [pc, #588]	; (800b2fc <_printf_float+0x2e0>)
 800b0ae:	4894      	ldr	r0, [pc, #592]	; (800b300 <_printf_float+0x2e4>)
 800b0b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b0b4:	bf94      	ite	ls
 800b0b6:	4698      	movls	r8, r3
 800b0b8:	4680      	movhi	r8, r0
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	6123      	str	r3, [r4, #16]
 800b0be:	9b05      	ldr	r3, [sp, #20]
 800b0c0:	f023 0204 	bic.w	r2, r3, #4
 800b0c4:	6022      	str	r2, [r4, #0]
 800b0c6:	f04f 0900 	mov.w	r9, #0
 800b0ca:	9700      	str	r7, [sp, #0]
 800b0cc:	4633      	mov	r3, r6
 800b0ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	f000 f9d8 	bl	800b488 <_printf_common>
 800b0d8:	3001      	adds	r0, #1
 800b0da:	f040 8090 	bne.w	800b1fe <_printf_float+0x1e2>
 800b0de:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e2:	b00d      	add	sp, #52	; 0x34
 800b0e4:	ecbd 8b02 	vpop	{d8}
 800b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ec:	4642      	mov	r2, r8
 800b0ee:	464b      	mov	r3, r9
 800b0f0:	4640      	mov	r0, r8
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	f7f5 fd52 	bl	8000b9c <__aeabi_dcmpun>
 800b0f8:	b140      	cbz	r0, 800b10c <_printf_float+0xf0>
 800b0fa:	464b      	mov	r3, r9
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	bfbc      	itt	lt
 800b100:	232d      	movlt	r3, #45	; 0x2d
 800b102:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b106:	487f      	ldr	r0, [pc, #508]	; (800b304 <_printf_float+0x2e8>)
 800b108:	4b7f      	ldr	r3, [pc, #508]	; (800b308 <_printf_float+0x2ec>)
 800b10a:	e7d1      	b.n	800b0b0 <_printf_float+0x94>
 800b10c:	6863      	ldr	r3, [r4, #4]
 800b10e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b112:	9206      	str	r2, [sp, #24]
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	d13f      	bne.n	800b198 <_printf_float+0x17c>
 800b118:	2306      	movs	r3, #6
 800b11a:	6063      	str	r3, [r4, #4]
 800b11c:	9b05      	ldr	r3, [sp, #20]
 800b11e:	6861      	ldr	r1, [r4, #4]
 800b120:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b124:	2300      	movs	r3, #0
 800b126:	9303      	str	r3, [sp, #12]
 800b128:	ab0a      	add	r3, sp, #40	; 0x28
 800b12a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b12e:	ab09      	add	r3, sp, #36	; 0x24
 800b130:	ec49 8b10 	vmov	d0, r8, r9
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	6022      	str	r2, [r4, #0]
 800b138:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b13c:	4628      	mov	r0, r5
 800b13e:	f7ff fecd 	bl	800aedc <__cvt>
 800b142:	9b06      	ldr	r3, [sp, #24]
 800b144:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b146:	2b47      	cmp	r3, #71	; 0x47
 800b148:	4680      	mov	r8, r0
 800b14a:	d108      	bne.n	800b15e <_printf_float+0x142>
 800b14c:	1cc8      	adds	r0, r1, #3
 800b14e:	db02      	blt.n	800b156 <_printf_float+0x13a>
 800b150:	6863      	ldr	r3, [r4, #4]
 800b152:	4299      	cmp	r1, r3
 800b154:	dd41      	ble.n	800b1da <_printf_float+0x1be>
 800b156:	f1ab 0b02 	sub.w	fp, fp, #2
 800b15a:	fa5f fb8b 	uxtb.w	fp, fp
 800b15e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b162:	d820      	bhi.n	800b1a6 <_printf_float+0x18a>
 800b164:	3901      	subs	r1, #1
 800b166:	465a      	mov	r2, fp
 800b168:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b16c:	9109      	str	r1, [sp, #36]	; 0x24
 800b16e:	f7ff ff17 	bl	800afa0 <__exponent>
 800b172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b174:	1813      	adds	r3, r2, r0
 800b176:	2a01      	cmp	r2, #1
 800b178:	4681      	mov	r9, r0
 800b17a:	6123      	str	r3, [r4, #16]
 800b17c:	dc02      	bgt.n	800b184 <_printf_float+0x168>
 800b17e:	6822      	ldr	r2, [r4, #0]
 800b180:	07d2      	lsls	r2, r2, #31
 800b182:	d501      	bpl.n	800b188 <_printf_float+0x16c>
 800b184:	3301      	adds	r3, #1
 800b186:	6123      	str	r3, [r4, #16]
 800b188:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d09c      	beq.n	800b0ca <_printf_float+0xae>
 800b190:	232d      	movs	r3, #45	; 0x2d
 800b192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b196:	e798      	b.n	800b0ca <_printf_float+0xae>
 800b198:	9a06      	ldr	r2, [sp, #24]
 800b19a:	2a47      	cmp	r2, #71	; 0x47
 800b19c:	d1be      	bne.n	800b11c <_printf_float+0x100>
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1bc      	bne.n	800b11c <_printf_float+0x100>
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e7b9      	b.n	800b11a <_printf_float+0xfe>
 800b1a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b1aa:	d118      	bne.n	800b1de <_printf_float+0x1c2>
 800b1ac:	2900      	cmp	r1, #0
 800b1ae:	6863      	ldr	r3, [r4, #4]
 800b1b0:	dd0b      	ble.n	800b1ca <_printf_float+0x1ae>
 800b1b2:	6121      	str	r1, [r4, #16]
 800b1b4:	b913      	cbnz	r3, 800b1bc <_printf_float+0x1a0>
 800b1b6:	6822      	ldr	r2, [r4, #0]
 800b1b8:	07d0      	lsls	r0, r2, #31
 800b1ba:	d502      	bpl.n	800b1c2 <_printf_float+0x1a6>
 800b1bc:	3301      	adds	r3, #1
 800b1be:	440b      	add	r3, r1
 800b1c0:	6123      	str	r3, [r4, #16]
 800b1c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1c4:	f04f 0900 	mov.w	r9, #0
 800b1c8:	e7de      	b.n	800b188 <_printf_float+0x16c>
 800b1ca:	b913      	cbnz	r3, 800b1d2 <_printf_float+0x1b6>
 800b1cc:	6822      	ldr	r2, [r4, #0]
 800b1ce:	07d2      	lsls	r2, r2, #31
 800b1d0:	d501      	bpl.n	800b1d6 <_printf_float+0x1ba>
 800b1d2:	3302      	adds	r3, #2
 800b1d4:	e7f4      	b.n	800b1c0 <_printf_float+0x1a4>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e7f2      	b.n	800b1c0 <_printf_float+0x1a4>
 800b1da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b1de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1e0:	4299      	cmp	r1, r3
 800b1e2:	db05      	blt.n	800b1f0 <_printf_float+0x1d4>
 800b1e4:	6823      	ldr	r3, [r4, #0]
 800b1e6:	6121      	str	r1, [r4, #16]
 800b1e8:	07d8      	lsls	r0, r3, #31
 800b1ea:	d5ea      	bpl.n	800b1c2 <_printf_float+0x1a6>
 800b1ec:	1c4b      	adds	r3, r1, #1
 800b1ee:	e7e7      	b.n	800b1c0 <_printf_float+0x1a4>
 800b1f0:	2900      	cmp	r1, #0
 800b1f2:	bfd4      	ite	le
 800b1f4:	f1c1 0202 	rsble	r2, r1, #2
 800b1f8:	2201      	movgt	r2, #1
 800b1fa:	4413      	add	r3, r2
 800b1fc:	e7e0      	b.n	800b1c0 <_printf_float+0x1a4>
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	055a      	lsls	r2, r3, #21
 800b202:	d407      	bmi.n	800b214 <_printf_float+0x1f8>
 800b204:	6923      	ldr	r3, [r4, #16]
 800b206:	4642      	mov	r2, r8
 800b208:	4631      	mov	r1, r6
 800b20a:	4628      	mov	r0, r5
 800b20c:	47b8      	blx	r7
 800b20e:	3001      	adds	r0, #1
 800b210:	d12c      	bne.n	800b26c <_printf_float+0x250>
 800b212:	e764      	b.n	800b0de <_printf_float+0xc2>
 800b214:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b218:	f240 80e0 	bls.w	800b3dc <_printf_float+0x3c0>
 800b21c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b220:	2200      	movs	r2, #0
 800b222:	2300      	movs	r3, #0
 800b224:	f7f5 fc88 	bl	8000b38 <__aeabi_dcmpeq>
 800b228:	2800      	cmp	r0, #0
 800b22a:	d034      	beq.n	800b296 <_printf_float+0x27a>
 800b22c:	4a37      	ldr	r2, [pc, #220]	; (800b30c <_printf_float+0x2f0>)
 800b22e:	2301      	movs	r3, #1
 800b230:	4631      	mov	r1, r6
 800b232:	4628      	mov	r0, r5
 800b234:	47b8      	blx	r7
 800b236:	3001      	adds	r0, #1
 800b238:	f43f af51 	beq.w	800b0de <_printf_float+0xc2>
 800b23c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b240:	429a      	cmp	r2, r3
 800b242:	db02      	blt.n	800b24a <_printf_float+0x22e>
 800b244:	6823      	ldr	r3, [r4, #0]
 800b246:	07d8      	lsls	r0, r3, #31
 800b248:	d510      	bpl.n	800b26c <_printf_float+0x250>
 800b24a:	ee18 3a10 	vmov	r3, s16
 800b24e:	4652      	mov	r2, sl
 800b250:	4631      	mov	r1, r6
 800b252:	4628      	mov	r0, r5
 800b254:	47b8      	blx	r7
 800b256:	3001      	adds	r0, #1
 800b258:	f43f af41 	beq.w	800b0de <_printf_float+0xc2>
 800b25c:	f04f 0800 	mov.w	r8, #0
 800b260:	f104 091a 	add.w	r9, r4, #26
 800b264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b266:	3b01      	subs	r3, #1
 800b268:	4543      	cmp	r3, r8
 800b26a:	dc09      	bgt.n	800b280 <_printf_float+0x264>
 800b26c:	6823      	ldr	r3, [r4, #0]
 800b26e:	079b      	lsls	r3, r3, #30
 800b270:	f100 8105 	bmi.w	800b47e <_printf_float+0x462>
 800b274:	68e0      	ldr	r0, [r4, #12]
 800b276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b278:	4298      	cmp	r0, r3
 800b27a:	bfb8      	it	lt
 800b27c:	4618      	movlt	r0, r3
 800b27e:	e730      	b.n	800b0e2 <_printf_float+0xc6>
 800b280:	2301      	movs	r3, #1
 800b282:	464a      	mov	r2, r9
 800b284:	4631      	mov	r1, r6
 800b286:	4628      	mov	r0, r5
 800b288:	47b8      	blx	r7
 800b28a:	3001      	adds	r0, #1
 800b28c:	f43f af27 	beq.w	800b0de <_printf_float+0xc2>
 800b290:	f108 0801 	add.w	r8, r8, #1
 800b294:	e7e6      	b.n	800b264 <_printf_float+0x248>
 800b296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b298:	2b00      	cmp	r3, #0
 800b29a:	dc39      	bgt.n	800b310 <_printf_float+0x2f4>
 800b29c:	4a1b      	ldr	r2, [pc, #108]	; (800b30c <_printf_float+0x2f0>)
 800b29e:	2301      	movs	r3, #1
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	47b8      	blx	r7
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	f43f af19 	beq.w	800b0de <_printf_float+0xc2>
 800b2ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	d102      	bne.n	800b2ba <_printf_float+0x29e>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	07d9      	lsls	r1, r3, #31
 800b2b8:	d5d8      	bpl.n	800b26c <_printf_float+0x250>
 800b2ba:	ee18 3a10 	vmov	r3, s16
 800b2be:	4652      	mov	r2, sl
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	47b8      	blx	r7
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	f43f af09 	beq.w	800b0de <_printf_float+0xc2>
 800b2cc:	f04f 0900 	mov.w	r9, #0
 800b2d0:	f104 0a1a 	add.w	sl, r4, #26
 800b2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d6:	425b      	negs	r3, r3
 800b2d8:	454b      	cmp	r3, r9
 800b2da:	dc01      	bgt.n	800b2e0 <_printf_float+0x2c4>
 800b2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2de:	e792      	b.n	800b206 <_printf_float+0x1ea>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	4652      	mov	r2, sl
 800b2e4:	4631      	mov	r1, r6
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	47b8      	blx	r7
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	f43f aef7 	beq.w	800b0de <_printf_float+0xc2>
 800b2f0:	f109 0901 	add.w	r9, r9, #1
 800b2f4:	e7ee      	b.n	800b2d4 <_printf_float+0x2b8>
 800b2f6:	bf00      	nop
 800b2f8:	7fefffff 	.word	0x7fefffff
 800b2fc:	0800f4a4 	.word	0x0800f4a4
 800b300:	0800f4a8 	.word	0x0800f4a8
 800b304:	0800f4b0 	.word	0x0800f4b0
 800b308:	0800f4ac 	.word	0x0800f4ac
 800b30c:	0800f4b4 	.word	0x0800f4b4
 800b310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b312:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b314:	429a      	cmp	r2, r3
 800b316:	bfa8      	it	ge
 800b318:	461a      	movge	r2, r3
 800b31a:	2a00      	cmp	r2, #0
 800b31c:	4691      	mov	r9, r2
 800b31e:	dc37      	bgt.n	800b390 <_printf_float+0x374>
 800b320:	f04f 0b00 	mov.w	fp, #0
 800b324:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b328:	f104 021a 	add.w	r2, r4, #26
 800b32c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b32e:	9305      	str	r3, [sp, #20]
 800b330:	eba3 0309 	sub.w	r3, r3, r9
 800b334:	455b      	cmp	r3, fp
 800b336:	dc33      	bgt.n	800b3a0 <_printf_float+0x384>
 800b338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b33c:	429a      	cmp	r2, r3
 800b33e:	db3b      	blt.n	800b3b8 <_printf_float+0x39c>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	07da      	lsls	r2, r3, #31
 800b344:	d438      	bmi.n	800b3b8 <_printf_float+0x39c>
 800b346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b348:	9a05      	ldr	r2, [sp, #20]
 800b34a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b34c:	1a9a      	subs	r2, r3, r2
 800b34e:	eba3 0901 	sub.w	r9, r3, r1
 800b352:	4591      	cmp	r9, r2
 800b354:	bfa8      	it	ge
 800b356:	4691      	movge	r9, r2
 800b358:	f1b9 0f00 	cmp.w	r9, #0
 800b35c:	dc35      	bgt.n	800b3ca <_printf_float+0x3ae>
 800b35e:	f04f 0800 	mov.w	r8, #0
 800b362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b366:	f104 0a1a 	add.w	sl, r4, #26
 800b36a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b36e:	1a9b      	subs	r3, r3, r2
 800b370:	eba3 0309 	sub.w	r3, r3, r9
 800b374:	4543      	cmp	r3, r8
 800b376:	f77f af79 	ble.w	800b26c <_printf_float+0x250>
 800b37a:	2301      	movs	r3, #1
 800b37c:	4652      	mov	r2, sl
 800b37e:	4631      	mov	r1, r6
 800b380:	4628      	mov	r0, r5
 800b382:	47b8      	blx	r7
 800b384:	3001      	adds	r0, #1
 800b386:	f43f aeaa 	beq.w	800b0de <_printf_float+0xc2>
 800b38a:	f108 0801 	add.w	r8, r8, #1
 800b38e:	e7ec      	b.n	800b36a <_printf_float+0x34e>
 800b390:	4613      	mov	r3, r2
 800b392:	4631      	mov	r1, r6
 800b394:	4642      	mov	r2, r8
 800b396:	4628      	mov	r0, r5
 800b398:	47b8      	blx	r7
 800b39a:	3001      	adds	r0, #1
 800b39c:	d1c0      	bne.n	800b320 <_printf_float+0x304>
 800b39e:	e69e      	b.n	800b0de <_printf_float+0xc2>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	4631      	mov	r1, r6
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	9205      	str	r2, [sp, #20]
 800b3a8:	47b8      	blx	r7
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	f43f ae97 	beq.w	800b0de <_printf_float+0xc2>
 800b3b0:	9a05      	ldr	r2, [sp, #20]
 800b3b2:	f10b 0b01 	add.w	fp, fp, #1
 800b3b6:	e7b9      	b.n	800b32c <_printf_float+0x310>
 800b3b8:	ee18 3a10 	vmov	r3, s16
 800b3bc:	4652      	mov	r2, sl
 800b3be:	4631      	mov	r1, r6
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	47b8      	blx	r7
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d1be      	bne.n	800b346 <_printf_float+0x32a>
 800b3c8:	e689      	b.n	800b0de <_printf_float+0xc2>
 800b3ca:	9a05      	ldr	r2, [sp, #20]
 800b3cc:	464b      	mov	r3, r9
 800b3ce:	4442      	add	r2, r8
 800b3d0:	4631      	mov	r1, r6
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	47b8      	blx	r7
 800b3d6:	3001      	adds	r0, #1
 800b3d8:	d1c1      	bne.n	800b35e <_printf_float+0x342>
 800b3da:	e680      	b.n	800b0de <_printf_float+0xc2>
 800b3dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3de:	2a01      	cmp	r2, #1
 800b3e0:	dc01      	bgt.n	800b3e6 <_printf_float+0x3ca>
 800b3e2:	07db      	lsls	r3, r3, #31
 800b3e4:	d538      	bpl.n	800b458 <_printf_float+0x43c>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	4642      	mov	r2, r8
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	47b8      	blx	r7
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	f43f ae74 	beq.w	800b0de <_printf_float+0xc2>
 800b3f6:	ee18 3a10 	vmov	r3, s16
 800b3fa:	4652      	mov	r2, sl
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	4628      	mov	r0, r5
 800b400:	47b8      	blx	r7
 800b402:	3001      	adds	r0, #1
 800b404:	f43f ae6b 	beq.w	800b0de <_printf_float+0xc2>
 800b408:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b40c:	2200      	movs	r2, #0
 800b40e:	2300      	movs	r3, #0
 800b410:	f7f5 fb92 	bl	8000b38 <__aeabi_dcmpeq>
 800b414:	b9d8      	cbnz	r0, 800b44e <_printf_float+0x432>
 800b416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b418:	f108 0201 	add.w	r2, r8, #1
 800b41c:	3b01      	subs	r3, #1
 800b41e:	4631      	mov	r1, r6
 800b420:	4628      	mov	r0, r5
 800b422:	47b8      	blx	r7
 800b424:	3001      	adds	r0, #1
 800b426:	d10e      	bne.n	800b446 <_printf_float+0x42a>
 800b428:	e659      	b.n	800b0de <_printf_float+0xc2>
 800b42a:	2301      	movs	r3, #1
 800b42c:	4652      	mov	r2, sl
 800b42e:	4631      	mov	r1, r6
 800b430:	4628      	mov	r0, r5
 800b432:	47b8      	blx	r7
 800b434:	3001      	adds	r0, #1
 800b436:	f43f ae52 	beq.w	800b0de <_printf_float+0xc2>
 800b43a:	f108 0801 	add.w	r8, r8, #1
 800b43e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b440:	3b01      	subs	r3, #1
 800b442:	4543      	cmp	r3, r8
 800b444:	dcf1      	bgt.n	800b42a <_printf_float+0x40e>
 800b446:	464b      	mov	r3, r9
 800b448:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b44c:	e6dc      	b.n	800b208 <_printf_float+0x1ec>
 800b44e:	f04f 0800 	mov.w	r8, #0
 800b452:	f104 0a1a 	add.w	sl, r4, #26
 800b456:	e7f2      	b.n	800b43e <_printf_float+0x422>
 800b458:	2301      	movs	r3, #1
 800b45a:	4642      	mov	r2, r8
 800b45c:	e7df      	b.n	800b41e <_printf_float+0x402>
 800b45e:	2301      	movs	r3, #1
 800b460:	464a      	mov	r2, r9
 800b462:	4631      	mov	r1, r6
 800b464:	4628      	mov	r0, r5
 800b466:	47b8      	blx	r7
 800b468:	3001      	adds	r0, #1
 800b46a:	f43f ae38 	beq.w	800b0de <_printf_float+0xc2>
 800b46e:	f108 0801 	add.w	r8, r8, #1
 800b472:	68e3      	ldr	r3, [r4, #12]
 800b474:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b476:	1a5b      	subs	r3, r3, r1
 800b478:	4543      	cmp	r3, r8
 800b47a:	dcf0      	bgt.n	800b45e <_printf_float+0x442>
 800b47c:	e6fa      	b.n	800b274 <_printf_float+0x258>
 800b47e:	f04f 0800 	mov.w	r8, #0
 800b482:	f104 0919 	add.w	r9, r4, #25
 800b486:	e7f4      	b.n	800b472 <_printf_float+0x456>

0800b488 <_printf_common>:
 800b488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b48c:	4616      	mov	r6, r2
 800b48e:	4699      	mov	r9, r3
 800b490:	688a      	ldr	r2, [r1, #8]
 800b492:	690b      	ldr	r3, [r1, #16]
 800b494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b498:	4293      	cmp	r3, r2
 800b49a:	bfb8      	it	lt
 800b49c:	4613      	movlt	r3, r2
 800b49e:	6033      	str	r3, [r6, #0]
 800b4a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4a4:	4607      	mov	r7, r0
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	b10a      	cbz	r2, 800b4ae <_printf_common+0x26>
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	6033      	str	r3, [r6, #0]
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	0699      	lsls	r1, r3, #26
 800b4b2:	bf42      	ittt	mi
 800b4b4:	6833      	ldrmi	r3, [r6, #0]
 800b4b6:	3302      	addmi	r3, #2
 800b4b8:	6033      	strmi	r3, [r6, #0]
 800b4ba:	6825      	ldr	r5, [r4, #0]
 800b4bc:	f015 0506 	ands.w	r5, r5, #6
 800b4c0:	d106      	bne.n	800b4d0 <_printf_common+0x48>
 800b4c2:	f104 0a19 	add.w	sl, r4, #25
 800b4c6:	68e3      	ldr	r3, [r4, #12]
 800b4c8:	6832      	ldr	r2, [r6, #0]
 800b4ca:	1a9b      	subs	r3, r3, r2
 800b4cc:	42ab      	cmp	r3, r5
 800b4ce:	dc26      	bgt.n	800b51e <_printf_common+0x96>
 800b4d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4d4:	1e13      	subs	r3, r2, #0
 800b4d6:	6822      	ldr	r2, [r4, #0]
 800b4d8:	bf18      	it	ne
 800b4da:	2301      	movne	r3, #1
 800b4dc:	0692      	lsls	r2, r2, #26
 800b4de:	d42b      	bmi.n	800b538 <_printf_common+0xb0>
 800b4e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4e4:	4649      	mov	r1, r9
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	47c0      	blx	r8
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	d01e      	beq.n	800b52c <_printf_common+0xa4>
 800b4ee:	6823      	ldr	r3, [r4, #0]
 800b4f0:	68e5      	ldr	r5, [r4, #12]
 800b4f2:	6832      	ldr	r2, [r6, #0]
 800b4f4:	f003 0306 	and.w	r3, r3, #6
 800b4f8:	2b04      	cmp	r3, #4
 800b4fa:	bf08      	it	eq
 800b4fc:	1aad      	subeq	r5, r5, r2
 800b4fe:	68a3      	ldr	r3, [r4, #8]
 800b500:	6922      	ldr	r2, [r4, #16]
 800b502:	bf0c      	ite	eq
 800b504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b508:	2500      	movne	r5, #0
 800b50a:	4293      	cmp	r3, r2
 800b50c:	bfc4      	itt	gt
 800b50e:	1a9b      	subgt	r3, r3, r2
 800b510:	18ed      	addgt	r5, r5, r3
 800b512:	2600      	movs	r6, #0
 800b514:	341a      	adds	r4, #26
 800b516:	42b5      	cmp	r5, r6
 800b518:	d11a      	bne.n	800b550 <_printf_common+0xc8>
 800b51a:	2000      	movs	r0, #0
 800b51c:	e008      	b.n	800b530 <_printf_common+0xa8>
 800b51e:	2301      	movs	r3, #1
 800b520:	4652      	mov	r2, sl
 800b522:	4649      	mov	r1, r9
 800b524:	4638      	mov	r0, r7
 800b526:	47c0      	blx	r8
 800b528:	3001      	adds	r0, #1
 800b52a:	d103      	bne.n	800b534 <_printf_common+0xac>
 800b52c:	f04f 30ff 	mov.w	r0, #4294967295
 800b530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b534:	3501      	adds	r5, #1
 800b536:	e7c6      	b.n	800b4c6 <_printf_common+0x3e>
 800b538:	18e1      	adds	r1, r4, r3
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	2030      	movs	r0, #48	; 0x30
 800b53e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b542:	4422      	add	r2, r4
 800b544:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b548:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b54c:	3302      	adds	r3, #2
 800b54e:	e7c7      	b.n	800b4e0 <_printf_common+0x58>
 800b550:	2301      	movs	r3, #1
 800b552:	4622      	mov	r2, r4
 800b554:	4649      	mov	r1, r9
 800b556:	4638      	mov	r0, r7
 800b558:	47c0      	blx	r8
 800b55a:	3001      	adds	r0, #1
 800b55c:	d0e6      	beq.n	800b52c <_printf_common+0xa4>
 800b55e:	3601      	adds	r6, #1
 800b560:	e7d9      	b.n	800b516 <_printf_common+0x8e>
	...

0800b564 <_printf_i>:
 800b564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b568:	7e0f      	ldrb	r7, [r1, #24]
 800b56a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b56c:	2f78      	cmp	r7, #120	; 0x78
 800b56e:	4691      	mov	r9, r2
 800b570:	4680      	mov	r8, r0
 800b572:	460c      	mov	r4, r1
 800b574:	469a      	mov	sl, r3
 800b576:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b57a:	d807      	bhi.n	800b58c <_printf_i+0x28>
 800b57c:	2f62      	cmp	r7, #98	; 0x62
 800b57e:	d80a      	bhi.n	800b596 <_printf_i+0x32>
 800b580:	2f00      	cmp	r7, #0
 800b582:	f000 80d8 	beq.w	800b736 <_printf_i+0x1d2>
 800b586:	2f58      	cmp	r7, #88	; 0x58
 800b588:	f000 80a3 	beq.w	800b6d2 <_printf_i+0x16e>
 800b58c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b594:	e03a      	b.n	800b60c <_printf_i+0xa8>
 800b596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b59a:	2b15      	cmp	r3, #21
 800b59c:	d8f6      	bhi.n	800b58c <_printf_i+0x28>
 800b59e:	a101      	add	r1, pc, #4	; (adr r1, 800b5a4 <_printf_i+0x40>)
 800b5a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5a4:	0800b5fd 	.word	0x0800b5fd
 800b5a8:	0800b611 	.word	0x0800b611
 800b5ac:	0800b58d 	.word	0x0800b58d
 800b5b0:	0800b58d 	.word	0x0800b58d
 800b5b4:	0800b58d 	.word	0x0800b58d
 800b5b8:	0800b58d 	.word	0x0800b58d
 800b5bc:	0800b611 	.word	0x0800b611
 800b5c0:	0800b58d 	.word	0x0800b58d
 800b5c4:	0800b58d 	.word	0x0800b58d
 800b5c8:	0800b58d 	.word	0x0800b58d
 800b5cc:	0800b58d 	.word	0x0800b58d
 800b5d0:	0800b71d 	.word	0x0800b71d
 800b5d4:	0800b641 	.word	0x0800b641
 800b5d8:	0800b6ff 	.word	0x0800b6ff
 800b5dc:	0800b58d 	.word	0x0800b58d
 800b5e0:	0800b58d 	.word	0x0800b58d
 800b5e4:	0800b73f 	.word	0x0800b73f
 800b5e8:	0800b58d 	.word	0x0800b58d
 800b5ec:	0800b641 	.word	0x0800b641
 800b5f0:	0800b58d 	.word	0x0800b58d
 800b5f4:	0800b58d 	.word	0x0800b58d
 800b5f8:	0800b707 	.word	0x0800b707
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	1d1a      	adds	r2, r3, #4
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	602a      	str	r2, [r5, #0]
 800b604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b60c:	2301      	movs	r3, #1
 800b60e:	e0a3      	b.n	800b758 <_printf_i+0x1f4>
 800b610:	6820      	ldr	r0, [r4, #0]
 800b612:	6829      	ldr	r1, [r5, #0]
 800b614:	0606      	lsls	r6, r0, #24
 800b616:	f101 0304 	add.w	r3, r1, #4
 800b61a:	d50a      	bpl.n	800b632 <_printf_i+0xce>
 800b61c:	680e      	ldr	r6, [r1, #0]
 800b61e:	602b      	str	r3, [r5, #0]
 800b620:	2e00      	cmp	r6, #0
 800b622:	da03      	bge.n	800b62c <_printf_i+0xc8>
 800b624:	232d      	movs	r3, #45	; 0x2d
 800b626:	4276      	negs	r6, r6
 800b628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b62c:	485e      	ldr	r0, [pc, #376]	; (800b7a8 <_printf_i+0x244>)
 800b62e:	230a      	movs	r3, #10
 800b630:	e019      	b.n	800b666 <_printf_i+0x102>
 800b632:	680e      	ldr	r6, [r1, #0]
 800b634:	602b      	str	r3, [r5, #0]
 800b636:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b63a:	bf18      	it	ne
 800b63c:	b236      	sxthne	r6, r6
 800b63e:	e7ef      	b.n	800b620 <_printf_i+0xbc>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	6820      	ldr	r0, [r4, #0]
 800b644:	1d19      	adds	r1, r3, #4
 800b646:	6029      	str	r1, [r5, #0]
 800b648:	0601      	lsls	r1, r0, #24
 800b64a:	d501      	bpl.n	800b650 <_printf_i+0xec>
 800b64c:	681e      	ldr	r6, [r3, #0]
 800b64e:	e002      	b.n	800b656 <_printf_i+0xf2>
 800b650:	0646      	lsls	r6, r0, #25
 800b652:	d5fb      	bpl.n	800b64c <_printf_i+0xe8>
 800b654:	881e      	ldrh	r6, [r3, #0]
 800b656:	4854      	ldr	r0, [pc, #336]	; (800b7a8 <_printf_i+0x244>)
 800b658:	2f6f      	cmp	r7, #111	; 0x6f
 800b65a:	bf0c      	ite	eq
 800b65c:	2308      	moveq	r3, #8
 800b65e:	230a      	movne	r3, #10
 800b660:	2100      	movs	r1, #0
 800b662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b666:	6865      	ldr	r5, [r4, #4]
 800b668:	60a5      	str	r5, [r4, #8]
 800b66a:	2d00      	cmp	r5, #0
 800b66c:	bfa2      	ittt	ge
 800b66e:	6821      	ldrge	r1, [r4, #0]
 800b670:	f021 0104 	bicge.w	r1, r1, #4
 800b674:	6021      	strge	r1, [r4, #0]
 800b676:	b90e      	cbnz	r6, 800b67c <_printf_i+0x118>
 800b678:	2d00      	cmp	r5, #0
 800b67a:	d04d      	beq.n	800b718 <_printf_i+0x1b4>
 800b67c:	4615      	mov	r5, r2
 800b67e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b682:	fb03 6711 	mls	r7, r3, r1, r6
 800b686:	5dc7      	ldrb	r7, [r0, r7]
 800b688:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b68c:	4637      	mov	r7, r6
 800b68e:	42bb      	cmp	r3, r7
 800b690:	460e      	mov	r6, r1
 800b692:	d9f4      	bls.n	800b67e <_printf_i+0x11a>
 800b694:	2b08      	cmp	r3, #8
 800b696:	d10b      	bne.n	800b6b0 <_printf_i+0x14c>
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	07de      	lsls	r6, r3, #31
 800b69c:	d508      	bpl.n	800b6b0 <_printf_i+0x14c>
 800b69e:	6923      	ldr	r3, [r4, #16]
 800b6a0:	6861      	ldr	r1, [r4, #4]
 800b6a2:	4299      	cmp	r1, r3
 800b6a4:	bfde      	ittt	le
 800b6a6:	2330      	movle	r3, #48	; 0x30
 800b6a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b6b0:	1b52      	subs	r2, r2, r5
 800b6b2:	6122      	str	r2, [r4, #16]
 800b6b4:	f8cd a000 	str.w	sl, [sp]
 800b6b8:	464b      	mov	r3, r9
 800b6ba:	aa03      	add	r2, sp, #12
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4640      	mov	r0, r8
 800b6c0:	f7ff fee2 	bl	800b488 <_printf_common>
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	d14c      	bne.n	800b762 <_printf_i+0x1fe>
 800b6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6cc:	b004      	add	sp, #16
 800b6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d2:	4835      	ldr	r0, [pc, #212]	; (800b7a8 <_printf_i+0x244>)
 800b6d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b6d8:	6829      	ldr	r1, [r5, #0]
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6e0:	6029      	str	r1, [r5, #0]
 800b6e2:	061d      	lsls	r5, r3, #24
 800b6e4:	d514      	bpl.n	800b710 <_printf_i+0x1ac>
 800b6e6:	07df      	lsls	r7, r3, #31
 800b6e8:	bf44      	itt	mi
 800b6ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b6ee:	6023      	strmi	r3, [r4, #0]
 800b6f0:	b91e      	cbnz	r6, 800b6fa <_printf_i+0x196>
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	f023 0320 	bic.w	r3, r3, #32
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	2310      	movs	r3, #16
 800b6fc:	e7b0      	b.n	800b660 <_printf_i+0xfc>
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	f043 0320 	orr.w	r3, r3, #32
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	2378      	movs	r3, #120	; 0x78
 800b708:	4828      	ldr	r0, [pc, #160]	; (800b7ac <_printf_i+0x248>)
 800b70a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b70e:	e7e3      	b.n	800b6d8 <_printf_i+0x174>
 800b710:	0659      	lsls	r1, r3, #25
 800b712:	bf48      	it	mi
 800b714:	b2b6      	uxthmi	r6, r6
 800b716:	e7e6      	b.n	800b6e6 <_printf_i+0x182>
 800b718:	4615      	mov	r5, r2
 800b71a:	e7bb      	b.n	800b694 <_printf_i+0x130>
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	6826      	ldr	r6, [r4, #0]
 800b720:	6961      	ldr	r1, [r4, #20]
 800b722:	1d18      	adds	r0, r3, #4
 800b724:	6028      	str	r0, [r5, #0]
 800b726:	0635      	lsls	r5, r6, #24
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	d501      	bpl.n	800b730 <_printf_i+0x1cc>
 800b72c:	6019      	str	r1, [r3, #0]
 800b72e:	e002      	b.n	800b736 <_printf_i+0x1d2>
 800b730:	0670      	lsls	r0, r6, #25
 800b732:	d5fb      	bpl.n	800b72c <_printf_i+0x1c8>
 800b734:	8019      	strh	r1, [r3, #0]
 800b736:	2300      	movs	r3, #0
 800b738:	6123      	str	r3, [r4, #16]
 800b73a:	4615      	mov	r5, r2
 800b73c:	e7ba      	b.n	800b6b4 <_printf_i+0x150>
 800b73e:	682b      	ldr	r3, [r5, #0]
 800b740:	1d1a      	adds	r2, r3, #4
 800b742:	602a      	str	r2, [r5, #0]
 800b744:	681d      	ldr	r5, [r3, #0]
 800b746:	6862      	ldr	r2, [r4, #4]
 800b748:	2100      	movs	r1, #0
 800b74a:	4628      	mov	r0, r5
 800b74c:	f7f4 fd80 	bl	8000250 <memchr>
 800b750:	b108      	cbz	r0, 800b756 <_printf_i+0x1f2>
 800b752:	1b40      	subs	r0, r0, r5
 800b754:	6060      	str	r0, [r4, #4]
 800b756:	6863      	ldr	r3, [r4, #4]
 800b758:	6123      	str	r3, [r4, #16]
 800b75a:	2300      	movs	r3, #0
 800b75c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b760:	e7a8      	b.n	800b6b4 <_printf_i+0x150>
 800b762:	6923      	ldr	r3, [r4, #16]
 800b764:	462a      	mov	r2, r5
 800b766:	4649      	mov	r1, r9
 800b768:	4640      	mov	r0, r8
 800b76a:	47d0      	blx	sl
 800b76c:	3001      	adds	r0, #1
 800b76e:	d0ab      	beq.n	800b6c8 <_printf_i+0x164>
 800b770:	6823      	ldr	r3, [r4, #0]
 800b772:	079b      	lsls	r3, r3, #30
 800b774:	d413      	bmi.n	800b79e <_printf_i+0x23a>
 800b776:	68e0      	ldr	r0, [r4, #12]
 800b778:	9b03      	ldr	r3, [sp, #12]
 800b77a:	4298      	cmp	r0, r3
 800b77c:	bfb8      	it	lt
 800b77e:	4618      	movlt	r0, r3
 800b780:	e7a4      	b.n	800b6cc <_printf_i+0x168>
 800b782:	2301      	movs	r3, #1
 800b784:	4632      	mov	r2, r6
 800b786:	4649      	mov	r1, r9
 800b788:	4640      	mov	r0, r8
 800b78a:	47d0      	blx	sl
 800b78c:	3001      	adds	r0, #1
 800b78e:	d09b      	beq.n	800b6c8 <_printf_i+0x164>
 800b790:	3501      	adds	r5, #1
 800b792:	68e3      	ldr	r3, [r4, #12]
 800b794:	9903      	ldr	r1, [sp, #12]
 800b796:	1a5b      	subs	r3, r3, r1
 800b798:	42ab      	cmp	r3, r5
 800b79a:	dcf2      	bgt.n	800b782 <_printf_i+0x21e>
 800b79c:	e7eb      	b.n	800b776 <_printf_i+0x212>
 800b79e:	2500      	movs	r5, #0
 800b7a0:	f104 0619 	add.w	r6, r4, #25
 800b7a4:	e7f5      	b.n	800b792 <_printf_i+0x22e>
 800b7a6:	bf00      	nop
 800b7a8:	0800f4b6 	.word	0x0800f4b6
 800b7ac:	0800f4c7 	.word	0x0800f4c7

0800b7b0 <siprintf>:
 800b7b0:	b40e      	push	{r1, r2, r3}
 800b7b2:	b500      	push	{lr}
 800b7b4:	b09c      	sub	sp, #112	; 0x70
 800b7b6:	ab1d      	add	r3, sp, #116	; 0x74
 800b7b8:	9002      	str	r0, [sp, #8]
 800b7ba:	9006      	str	r0, [sp, #24]
 800b7bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7c0:	4809      	ldr	r0, [pc, #36]	; (800b7e8 <siprintf+0x38>)
 800b7c2:	9107      	str	r1, [sp, #28]
 800b7c4:	9104      	str	r1, [sp, #16]
 800b7c6:	4909      	ldr	r1, [pc, #36]	; (800b7ec <siprintf+0x3c>)
 800b7c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7cc:	9105      	str	r1, [sp, #20]
 800b7ce:	6800      	ldr	r0, [r0, #0]
 800b7d0:	9301      	str	r3, [sp, #4]
 800b7d2:	a902      	add	r1, sp, #8
 800b7d4:	f002 fef0 	bl	800e5b8 <_svfiprintf_r>
 800b7d8:	9b02      	ldr	r3, [sp, #8]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	701a      	strb	r2, [r3, #0]
 800b7de:	b01c      	add	sp, #112	; 0x70
 800b7e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7e4:	b003      	add	sp, #12
 800b7e6:	4770      	bx	lr
 800b7e8:	20000010 	.word	0x20000010
 800b7ec:	ffff0208 	.word	0xffff0208

0800b7f0 <sulp>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	460d      	mov	r5, r1
 800b7f6:	ec45 4b10 	vmov	d0, r4, r5
 800b7fa:	4616      	mov	r6, r2
 800b7fc:	f002 fc3a 	bl	800e074 <__ulp>
 800b800:	ec51 0b10 	vmov	r0, r1, d0
 800b804:	b17e      	cbz	r6, 800b826 <sulp+0x36>
 800b806:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b80a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b80e:	2b00      	cmp	r3, #0
 800b810:	dd09      	ble.n	800b826 <sulp+0x36>
 800b812:	051b      	lsls	r3, r3, #20
 800b814:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b818:	2400      	movs	r4, #0
 800b81a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b81e:	4622      	mov	r2, r4
 800b820:	462b      	mov	r3, r5
 800b822:	f7f4 ff21 	bl	8000668 <__aeabi_dmul>
 800b826:	bd70      	pop	{r4, r5, r6, pc}

0800b828 <_strtod_l>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	ed2d 8b02 	vpush	{d8}
 800b830:	b09d      	sub	sp, #116	; 0x74
 800b832:	461f      	mov	r7, r3
 800b834:	2300      	movs	r3, #0
 800b836:	9318      	str	r3, [sp, #96]	; 0x60
 800b838:	4ba2      	ldr	r3, [pc, #648]	; (800bac4 <_strtod_l+0x29c>)
 800b83a:	9213      	str	r2, [sp, #76]	; 0x4c
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	9305      	str	r3, [sp, #20]
 800b840:	4604      	mov	r4, r0
 800b842:	4618      	mov	r0, r3
 800b844:	4688      	mov	r8, r1
 800b846:	f7f4 fcf5 	bl	8000234 <strlen>
 800b84a:	f04f 0a00 	mov.w	sl, #0
 800b84e:	4605      	mov	r5, r0
 800b850:	f04f 0b00 	mov.w	fp, #0
 800b854:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b85a:	781a      	ldrb	r2, [r3, #0]
 800b85c:	2a2b      	cmp	r2, #43	; 0x2b
 800b85e:	d04e      	beq.n	800b8fe <_strtod_l+0xd6>
 800b860:	d83b      	bhi.n	800b8da <_strtod_l+0xb2>
 800b862:	2a0d      	cmp	r2, #13
 800b864:	d834      	bhi.n	800b8d0 <_strtod_l+0xa8>
 800b866:	2a08      	cmp	r2, #8
 800b868:	d834      	bhi.n	800b8d4 <_strtod_l+0xac>
 800b86a:	2a00      	cmp	r2, #0
 800b86c:	d03e      	beq.n	800b8ec <_strtod_l+0xc4>
 800b86e:	2300      	movs	r3, #0
 800b870:	930a      	str	r3, [sp, #40]	; 0x28
 800b872:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b874:	7833      	ldrb	r3, [r6, #0]
 800b876:	2b30      	cmp	r3, #48	; 0x30
 800b878:	f040 80b0 	bne.w	800b9dc <_strtod_l+0x1b4>
 800b87c:	7873      	ldrb	r3, [r6, #1]
 800b87e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b882:	2b58      	cmp	r3, #88	; 0x58
 800b884:	d168      	bne.n	800b958 <_strtod_l+0x130>
 800b886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	ab18      	add	r3, sp, #96	; 0x60
 800b88c:	9702      	str	r7, [sp, #8]
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	4a8d      	ldr	r2, [pc, #564]	; (800bac8 <_strtod_l+0x2a0>)
 800b892:	ab19      	add	r3, sp, #100	; 0x64
 800b894:	a917      	add	r1, sp, #92	; 0x5c
 800b896:	4620      	mov	r0, r4
 800b898:	f001 fd46 	bl	800d328 <__gethex>
 800b89c:	f010 0707 	ands.w	r7, r0, #7
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	d005      	beq.n	800b8b0 <_strtod_l+0x88>
 800b8a4:	2f06      	cmp	r7, #6
 800b8a6:	d12c      	bne.n	800b902 <_strtod_l+0xda>
 800b8a8:	3601      	adds	r6, #1
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	9617      	str	r6, [sp, #92]	; 0x5c
 800b8ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b8b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f040 8590 	bne.w	800c3d8 <_strtod_l+0xbb0>
 800b8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ba:	b1eb      	cbz	r3, 800b8f8 <_strtod_l+0xd0>
 800b8bc:	4652      	mov	r2, sl
 800b8be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b8c2:	ec43 2b10 	vmov	d0, r2, r3
 800b8c6:	b01d      	add	sp, #116	; 0x74
 800b8c8:	ecbd 8b02 	vpop	{d8}
 800b8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d0:	2a20      	cmp	r2, #32
 800b8d2:	d1cc      	bne.n	800b86e <_strtod_l+0x46>
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b8d8:	e7be      	b.n	800b858 <_strtod_l+0x30>
 800b8da:	2a2d      	cmp	r2, #45	; 0x2d
 800b8dc:	d1c7      	bne.n	800b86e <_strtod_l+0x46>
 800b8de:	2201      	movs	r2, #1
 800b8e0:	920a      	str	r2, [sp, #40]	; 0x28
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b8e6:	785b      	ldrb	r3, [r3, #1]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1c2      	bne.n	800b872 <_strtod_l+0x4a>
 800b8ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f040 856e 	bne.w	800c3d4 <_strtod_l+0xbac>
 800b8f8:	4652      	mov	r2, sl
 800b8fa:	465b      	mov	r3, fp
 800b8fc:	e7e1      	b.n	800b8c2 <_strtod_l+0x9a>
 800b8fe:	2200      	movs	r2, #0
 800b900:	e7ee      	b.n	800b8e0 <_strtod_l+0xb8>
 800b902:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b904:	b13a      	cbz	r2, 800b916 <_strtod_l+0xee>
 800b906:	2135      	movs	r1, #53	; 0x35
 800b908:	a81a      	add	r0, sp, #104	; 0x68
 800b90a:	f002 fcbe 	bl	800e28a <__copybits>
 800b90e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b910:	4620      	mov	r0, r4
 800b912:	f002 f87d 	bl	800da10 <_Bfree>
 800b916:	3f01      	subs	r7, #1
 800b918:	2f04      	cmp	r7, #4
 800b91a:	d806      	bhi.n	800b92a <_strtod_l+0x102>
 800b91c:	e8df f007 	tbb	[pc, r7]
 800b920:	1714030a 	.word	0x1714030a
 800b924:	0a          	.byte	0x0a
 800b925:	00          	.byte	0x00
 800b926:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b92a:	0728      	lsls	r0, r5, #28
 800b92c:	d5c0      	bpl.n	800b8b0 <_strtod_l+0x88>
 800b92e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b932:	e7bd      	b.n	800b8b0 <_strtod_l+0x88>
 800b934:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b938:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b93a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b93e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b942:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b946:	e7f0      	b.n	800b92a <_strtod_l+0x102>
 800b948:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bacc <_strtod_l+0x2a4>
 800b94c:	e7ed      	b.n	800b92a <_strtod_l+0x102>
 800b94e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b952:	f04f 3aff 	mov.w	sl, #4294967295
 800b956:	e7e8      	b.n	800b92a <_strtod_l+0x102>
 800b958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b95e:	785b      	ldrb	r3, [r3, #1]
 800b960:	2b30      	cmp	r3, #48	; 0x30
 800b962:	d0f9      	beq.n	800b958 <_strtod_l+0x130>
 800b964:	2b00      	cmp	r3, #0
 800b966:	d0a3      	beq.n	800b8b0 <_strtod_l+0x88>
 800b968:	2301      	movs	r3, #1
 800b96a:	f04f 0900 	mov.w	r9, #0
 800b96e:	9304      	str	r3, [sp, #16]
 800b970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b972:	9308      	str	r3, [sp, #32]
 800b974:	f8cd 901c 	str.w	r9, [sp, #28]
 800b978:	464f      	mov	r7, r9
 800b97a:	220a      	movs	r2, #10
 800b97c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b97e:	7806      	ldrb	r6, [r0, #0]
 800b980:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b984:	b2d9      	uxtb	r1, r3
 800b986:	2909      	cmp	r1, #9
 800b988:	d92a      	bls.n	800b9e0 <_strtod_l+0x1b8>
 800b98a:	9905      	ldr	r1, [sp, #20]
 800b98c:	462a      	mov	r2, r5
 800b98e:	f003 f887 	bl	800eaa0 <strncmp>
 800b992:	b398      	cbz	r0, 800b9fc <_strtod_l+0x1d4>
 800b994:	2000      	movs	r0, #0
 800b996:	4632      	mov	r2, r6
 800b998:	463d      	mov	r5, r7
 800b99a:	9005      	str	r0, [sp, #20]
 800b99c:	4603      	mov	r3, r0
 800b99e:	2a65      	cmp	r2, #101	; 0x65
 800b9a0:	d001      	beq.n	800b9a6 <_strtod_l+0x17e>
 800b9a2:	2a45      	cmp	r2, #69	; 0x45
 800b9a4:	d118      	bne.n	800b9d8 <_strtod_l+0x1b0>
 800b9a6:	b91d      	cbnz	r5, 800b9b0 <_strtod_l+0x188>
 800b9a8:	9a04      	ldr	r2, [sp, #16]
 800b9aa:	4302      	orrs	r2, r0
 800b9ac:	d09e      	beq.n	800b8ec <_strtod_l+0xc4>
 800b9ae:	2500      	movs	r5, #0
 800b9b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b9b4:	f108 0201 	add.w	r2, r8, #1
 800b9b8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b9ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b9be:	2a2b      	cmp	r2, #43	; 0x2b
 800b9c0:	d075      	beq.n	800baae <_strtod_l+0x286>
 800b9c2:	2a2d      	cmp	r2, #45	; 0x2d
 800b9c4:	d07b      	beq.n	800babe <_strtod_l+0x296>
 800b9c6:	f04f 0c00 	mov.w	ip, #0
 800b9ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b9ce:	2909      	cmp	r1, #9
 800b9d0:	f240 8082 	bls.w	800bad8 <_strtod_l+0x2b0>
 800b9d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b9d8:	2600      	movs	r6, #0
 800b9da:	e09d      	b.n	800bb18 <_strtod_l+0x2f0>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	e7c4      	b.n	800b96a <_strtod_l+0x142>
 800b9e0:	2f08      	cmp	r7, #8
 800b9e2:	bfd8      	it	le
 800b9e4:	9907      	ldrle	r1, [sp, #28]
 800b9e6:	f100 0001 	add.w	r0, r0, #1
 800b9ea:	bfda      	itte	le
 800b9ec:	fb02 3301 	mlale	r3, r2, r1, r3
 800b9f0:	9307      	strle	r3, [sp, #28]
 800b9f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b9f6:	3701      	adds	r7, #1
 800b9f8:	9017      	str	r0, [sp, #92]	; 0x5c
 800b9fa:	e7bf      	b.n	800b97c <_strtod_l+0x154>
 800b9fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9fe:	195a      	adds	r2, r3, r5
 800ba00:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba02:	5d5a      	ldrb	r2, [r3, r5]
 800ba04:	2f00      	cmp	r7, #0
 800ba06:	d037      	beq.n	800ba78 <_strtod_l+0x250>
 800ba08:	9005      	str	r0, [sp, #20]
 800ba0a:	463d      	mov	r5, r7
 800ba0c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ba10:	2b09      	cmp	r3, #9
 800ba12:	d912      	bls.n	800ba3a <_strtod_l+0x212>
 800ba14:	2301      	movs	r3, #1
 800ba16:	e7c2      	b.n	800b99e <_strtod_l+0x176>
 800ba18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba1a:	1c5a      	adds	r2, r3, #1
 800ba1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba1e:	785a      	ldrb	r2, [r3, #1]
 800ba20:	3001      	adds	r0, #1
 800ba22:	2a30      	cmp	r2, #48	; 0x30
 800ba24:	d0f8      	beq.n	800ba18 <_strtod_l+0x1f0>
 800ba26:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ba2a:	2b08      	cmp	r3, #8
 800ba2c:	f200 84d9 	bhi.w	800c3e2 <_strtod_l+0xbba>
 800ba30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba32:	9005      	str	r0, [sp, #20]
 800ba34:	2000      	movs	r0, #0
 800ba36:	9308      	str	r3, [sp, #32]
 800ba38:	4605      	mov	r5, r0
 800ba3a:	3a30      	subs	r2, #48	; 0x30
 800ba3c:	f100 0301 	add.w	r3, r0, #1
 800ba40:	d014      	beq.n	800ba6c <_strtod_l+0x244>
 800ba42:	9905      	ldr	r1, [sp, #20]
 800ba44:	4419      	add	r1, r3
 800ba46:	9105      	str	r1, [sp, #20]
 800ba48:	462b      	mov	r3, r5
 800ba4a:	eb00 0e05 	add.w	lr, r0, r5
 800ba4e:	210a      	movs	r1, #10
 800ba50:	4573      	cmp	r3, lr
 800ba52:	d113      	bne.n	800ba7c <_strtod_l+0x254>
 800ba54:	182b      	adds	r3, r5, r0
 800ba56:	2b08      	cmp	r3, #8
 800ba58:	f105 0501 	add.w	r5, r5, #1
 800ba5c:	4405      	add	r5, r0
 800ba5e:	dc1c      	bgt.n	800ba9a <_strtod_l+0x272>
 800ba60:	9907      	ldr	r1, [sp, #28]
 800ba62:	230a      	movs	r3, #10
 800ba64:	fb03 2301 	mla	r3, r3, r1, r2
 800ba68:	9307      	str	r3, [sp, #28]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ba6e:	1c51      	adds	r1, r2, #1
 800ba70:	9117      	str	r1, [sp, #92]	; 0x5c
 800ba72:	7852      	ldrb	r2, [r2, #1]
 800ba74:	4618      	mov	r0, r3
 800ba76:	e7c9      	b.n	800ba0c <_strtod_l+0x1e4>
 800ba78:	4638      	mov	r0, r7
 800ba7a:	e7d2      	b.n	800ba22 <_strtod_l+0x1fa>
 800ba7c:	2b08      	cmp	r3, #8
 800ba7e:	dc04      	bgt.n	800ba8a <_strtod_l+0x262>
 800ba80:	9e07      	ldr	r6, [sp, #28]
 800ba82:	434e      	muls	r6, r1
 800ba84:	9607      	str	r6, [sp, #28]
 800ba86:	3301      	adds	r3, #1
 800ba88:	e7e2      	b.n	800ba50 <_strtod_l+0x228>
 800ba8a:	f103 0c01 	add.w	ip, r3, #1
 800ba8e:	f1bc 0f10 	cmp.w	ip, #16
 800ba92:	bfd8      	it	le
 800ba94:	fb01 f909 	mulle.w	r9, r1, r9
 800ba98:	e7f5      	b.n	800ba86 <_strtod_l+0x25e>
 800ba9a:	2d10      	cmp	r5, #16
 800ba9c:	bfdc      	itt	le
 800ba9e:	230a      	movle	r3, #10
 800baa0:	fb03 2909 	mlale	r9, r3, r9, r2
 800baa4:	e7e1      	b.n	800ba6a <_strtod_l+0x242>
 800baa6:	2300      	movs	r3, #0
 800baa8:	9305      	str	r3, [sp, #20]
 800baaa:	2301      	movs	r3, #1
 800baac:	e77c      	b.n	800b9a8 <_strtod_l+0x180>
 800baae:	f04f 0c00 	mov.w	ip, #0
 800bab2:	f108 0202 	add.w	r2, r8, #2
 800bab6:	9217      	str	r2, [sp, #92]	; 0x5c
 800bab8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800babc:	e785      	b.n	800b9ca <_strtod_l+0x1a2>
 800babe:	f04f 0c01 	mov.w	ip, #1
 800bac2:	e7f6      	b.n	800bab2 <_strtod_l+0x28a>
 800bac4:	0800f6b8 	.word	0x0800f6b8
 800bac8:	0800f4d8 	.word	0x0800f4d8
 800bacc:	7ff00000 	.word	0x7ff00000
 800bad0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bad2:	1c51      	adds	r1, r2, #1
 800bad4:	9117      	str	r1, [sp, #92]	; 0x5c
 800bad6:	7852      	ldrb	r2, [r2, #1]
 800bad8:	2a30      	cmp	r2, #48	; 0x30
 800bada:	d0f9      	beq.n	800bad0 <_strtod_l+0x2a8>
 800badc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bae0:	2908      	cmp	r1, #8
 800bae2:	f63f af79 	bhi.w	800b9d8 <_strtod_l+0x1b0>
 800bae6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800baea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800baec:	9206      	str	r2, [sp, #24]
 800baee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800baf0:	1c51      	adds	r1, r2, #1
 800baf2:	9117      	str	r1, [sp, #92]	; 0x5c
 800baf4:	7852      	ldrb	r2, [r2, #1]
 800baf6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bafa:	2e09      	cmp	r6, #9
 800bafc:	d937      	bls.n	800bb6e <_strtod_l+0x346>
 800bafe:	9e06      	ldr	r6, [sp, #24]
 800bb00:	1b89      	subs	r1, r1, r6
 800bb02:	2908      	cmp	r1, #8
 800bb04:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bb08:	dc02      	bgt.n	800bb10 <_strtod_l+0x2e8>
 800bb0a:	4576      	cmp	r6, lr
 800bb0c:	bfa8      	it	ge
 800bb0e:	4676      	movge	r6, lr
 800bb10:	f1bc 0f00 	cmp.w	ip, #0
 800bb14:	d000      	beq.n	800bb18 <_strtod_l+0x2f0>
 800bb16:	4276      	negs	r6, r6
 800bb18:	2d00      	cmp	r5, #0
 800bb1a:	d14d      	bne.n	800bbb8 <_strtod_l+0x390>
 800bb1c:	9904      	ldr	r1, [sp, #16]
 800bb1e:	4301      	orrs	r1, r0
 800bb20:	f47f aec6 	bne.w	800b8b0 <_strtod_l+0x88>
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f47f aee1 	bne.w	800b8ec <_strtod_l+0xc4>
 800bb2a:	2a69      	cmp	r2, #105	; 0x69
 800bb2c:	d027      	beq.n	800bb7e <_strtod_l+0x356>
 800bb2e:	dc24      	bgt.n	800bb7a <_strtod_l+0x352>
 800bb30:	2a49      	cmp	r2, #73	; 0x49
 800bb32:	d024      	beq.n	800bb7e <_strtod_l+0x356>
 800bb34:	2a4e      	cmp	r2, #78	; 0x4e
 800bb36:	f47f aed9 	bne.w	800b8ec <_strtod_l+0xc4>
 800bb3a:	499f      	ldr	r1, [pc, #636]	; (800bdb8 <_strtod_l+0x590>)
 800bb3c:	a817      	add	r0, sp, #92	; 0x5c
 800bb3e:	f001 fe4b 	bl	800d7d8 <__match>
 800bb42:	2800      	cmp	r0, #0
 800bb44:	f43f aed2 	beq.w	800b8ec <_strtod_l+0xc4>
 800bb48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	2b28      	cmp	r3, #40	; 0x28
 800bb4e:	d12d      	bne.n	800bbac <_strtod_l+0x384>
 800bb50:	499a      	ldr	r1, [pc, #616]	; (800bdbc <_strtod_l+0x594>)
 800bb52:	aa1a      	add	r2, sp, #104	; 0x68
 800bb54:	a817      	add	r0, sp, #92	; 0x5c
 800bb56:	f001 fe53 	bl	800d800 <__hexnan>
 800bb5a:	2805      	cmp	r0, #5
 800bb5c:	d126      	bne.n	800bbac <_strtod_l+0x384>
 800bb5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb60:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bb64:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bb68:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bb6c:	e6a0      	b.n	800b8b0 <_strtod_l+0x88>
 800bb6e:	210a      	movs	r1, #10
 800bb70:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bb74:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bb78:	e7b9      	b.n	800baee <_strtod_l+0x2c6>
 800bb7a:	2a6e      	cmp	r2, #110	; 0x6e
 800bb7c:	e7db      	b.n	800bb36 <_strtod_l+0x30e>
 800bb7e:	4990      	ldr	r1, [pc, #576]	; (800bdc0 <_strtod_l+0x598>)
 800bb80:	a817      	add	r0, sp, #92	; 0x5c
 800bb82:	f001 fe29 	bl	800d7d8 <__match>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	f43f aeb0 	beq.w	800b8ec <_strtod_l+0xc4>
 800bb8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb8e:	498d      	ldr	r1, [pc, #564]	; (800bdc4 <_strtod_l+0x59c>)
 800bb90:	3b01      	subs	r3, #1
 800bb92:	a817      	add	r0, sp, #92	; 0x5c
 800bb94:	9317      	str	r3, [sp, #92]	; 0x5c
 800bb96:	f001 fe1f 	bl	800d7d8 <__match>
 800bb9a:	b910      	cbnz	r0, 800bba2 <_strtod_l+0x37a>
 800bb9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb9e:	3301      	adds	r3, #1
 800bba0:	9317      	str	r3, [sp, #92]	; 0x5c
 800bba2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bdd4 <_strtod_l+0x5ac>
 800bba6:	f04f 0a00 	mov.w	sl, #0
 800bbaa:	e681      	b.n	800b8b0 <_strtod_l+0x88>
 800bbac:	4886      	ldr	r0, [pc, #536]	; (800bdc8 <_strtod_l+0x5a0>)
 800bbae:	f002 ff5f 	bl	800ea70 <nan>
 800bbb2:	ec5b ab10 	vmov	sl, fp, d0
 800bbb6:	e67b      	b.n	800b8b0 <_strtod_l+0x88>
 800bbb8:	9b05      	ldr	r3, [sp, #20]
 800bbba:	9807      	ldr	r0, [sp, #28]
 800bbbc:	1af3      	subs	r3, r6, r3
 800bbbe:	2f00      	cmp	r7, #0
 800bbc0:	bf08      	it	eq
 800bbc2:	462f      	moveq	r7, r5
 800bbc4:	2d10      	cmp	r5, #16
 800bbc6:	9306      	str	r3, [sp, #24]
 800bbc8:	46a8      	mov	r8, r5
 800bbca:	bfa8      	it	ge
 800bbcc:	f04f 0810 	movge.w	r8, #16
 800bbd0:	f7f4 fcd0 	bl	8000574 <__aeabi_ui2d>
 800bbd4:	2d09      	cmp	r5, #9
 800bbd6:	4682      	mov	sl, r0
 800bbd8:	468b      	mov	fp, r1
 800bbda:	dd13      	ble.n	800bc04 <_strtod_l+0x3dc>
 800bbdc:	4b7b      	ldr	r3, [pc, #492]	; (800bdcc <_strtod_l+0x5a4>)
 800bbde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bbe2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bbe6:	f7f4 fd3f 	bl	8000668 <__aeabi_dmul>
 800bbea:	4682      	mov	sl, r0
 800bbec:	4648      	mov	r0, r9
 800bbee:	468b      	mov	fp, r1
 800bbf0:	f7f4 fcc0 	bl	8000574 <__aeabi_ui2d>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4650      	mov	r0, sl
 800bbfa:	4659      	mov	r1, fp
 800bbfc:	f7f4 fb7e 	bl	80002fc <__adddf3>
 800bc00:	4682      	mov	sl, r0
 800bc02:	468b      	mov	fp, r1
 800bc04:	2d0f      	cmp	r5, #15
 800bc06:	dc38      	bgt.n	800bc7a <_strtod_l+0x452>
 800bc08:	9b06      	ldr	r3, [sp, #24]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f43f ae50 	beq.w	800b8b0 <_strtod_l+0x88>
 800bc10:	dd24      	ble.n	800bc5c <_strtod_l+0x434>
 800bc12:	2b16      	cmp	r3, #22
 800bc14:	dc0b      	bgt.n	800bc2e <_strtod_l+0x406>
 800bc16:	496d      	ldr	r1, [pc, #436]	; (800bdcc <_strtod_l+0x5a4>)
 800bc18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc20:	4652      	mov	r2, sl
 800bc22:	465b      	mov	r3, fp
 800bc24:	f7f4 fd20 	bl	8000668 <__aeabi_dmul>
 800bc28:	4682      	mov	sl, r0
 800bc2a:	468b      	mov	fp, r1
 800bc2c:	e640      	b.n	800b8b0 <_strtod_l+0x88>
 800bc2e:	9a06      	ldr	r2, [sp, #24]
 800bc30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bc34:	4293      	cmp	r3, r2
 800bc36:	db20      	blt.n	800bc7a <_strtod_l+0x452>
 800bc38:	4c64      	ldr	r4, [pc, #400]	; (800bdcc <_strtod_l+0x5a4>)
 800bc3a:	f1c5 050f 	rsb	r5, r5, #15
 800bc3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bc42:	4652      	mov	r2, sl
 800bc44:	465b      	mov	r3, fp
 800bc46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc4a:	f7f4 fd0d 	bl	8000668 <__aeabi_dmul>
 800bc4e:	9b06      	ldr	r3, [sp, #24]
 800bc50:	1b5d      	subs	r5, r3, r5
 800bc52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bc56:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bc5a:	e7e3      	b.n	800bc24 <_strtod_l+0x3fc>
 800bc5c:	9b06      	ldr	r3, [sp, #24]
 800bc5e:	3316      	adds	r3, #22
 800bc60:	db0b      	blt.n	800bc7a <_strtod_l+0x452>
 800bc62:	9b05      	ldr	r3, [sp, #20]
 800bc64:	1b9e      	subs	r6, r3, r6
 800bc66:	4b59      	ldr	r3, [pc, #356]	; (800bdcc <_strtod_l+0x5a4>)
 800bc68:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bc6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc70:	4650      	mov	r0, sl
 800bc72:	4659      	mov	r1, fp
 800bc74:	f7f4 fe22 	bl	80008bc <__aeabi_ddiv>
 800bc78:	e7d6      	b.n	800bc28 <_strtod_l+0x400>
 800bc7a:	9b06      	ldr	r3, [sp, #24]
 800bc7c:	eba5 0808 	sub.w	r8, r5, r8
 800bc80:	4498      	add	r8, r3
 800bc82:	f1b8 0f00 	cmp.w	r8, #0
 800bc86:	dd74      	ble.n	800bd72 <_strtod_l+0x54a>
 800bc88:	f018 030f 	ands.w	r3, r8, #15
 800bc8c:	d00a      	beq.n	800bca4 <_strtod_l+0x47c>
 800bc8e:	494f      	ldr	r1, [pc, #316]	; (800bdcc <_strtod_l+0x5a4>)
 800bc90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc94:	4652      	mov	r2, sl
 800bc96:	465b      	mov	r3, fp
 800bc98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc9c:	f7f4 fce4 	bl	8000668 <__aeabi_dmul>
 800bca0:	4682      	mov	sl, r0
 800bca2:	468b      	mov	fp, r1
 800bca4:	f038 080f 	bics.w	r8, r8, #15
 800bca8:	d04f      	beq.n	800bd4a <_strtod_l+0x522>
 800bcaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bcae:	dd22      	ble.n	800bcf6 <_strtod_l+0x4ce>
 800bcb0:	2500      	movs	r5, #0
 800bcb2:	462e      	mov	r6, r5
 800bcb4:	9507      	str	r5, [sp, #28]
 800bcb6:	9505      	str	r5, [sp, #20]
 800bcb8:	2322      	movs	r3, #34	; 0x22
 800bcba:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bdd4 <_strtod_l+0x5ac>
 800bcbe:	6023      	str	r3, [r4, #0]
 800bcc0:	f04f 0a00 	mov.w	sl, #0
 800bcc4:	9b07      	ldr	r3, [sp, #28]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f43f adf2 	beq.w	800b8b0 <_strtod_l+0x88>
 800bccc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f001 fe9e 	bl	800da10 <_Bfree>
 800bcd4:	9905      	ldr	r1, [sp, #20]
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f001 fe9a 	bl	800da10 <_Bfree>
 800bcdc:	4631      	mov	r1, r6
 800bcde:	4620      	mov	r0, r4
 800bce0:	f001 fe96 	bl	800da10 <_Bfree>
 800bce4:	9907      	ldr	r1, [sp, #28]
 800bce6:	4620      	mov	r0, r4
 800bce8:	f001 fe92 	bl	800da10 <_Bfree>
 800bcec:	4629      	mov	r1, r5
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f001 fe8e 	bl	800da10 <_Bfree>
 800bcf4:	e5dc      	b.n	800b8b0 <_strtod_l+0x88>
 800bcf6:	4b36      	ldr	r3, [pc, #216]	; (800bdd0 <_strtod_l+0x5a8>)
 800bcf8:	9304      	str	r3, [sp, #16]
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bd00:	4650      	mov	r0, sl
 800bd02:	4659      	mov	r1, fp
 800bd04:	4699      	mov	r9, r3
 800bd06:	f1b8 0f01 	cmp.w	r8, #1
 800bd0a:	dc21      	bgt.n	800bd50 <_strtod_l+0x528>
 800bd0c:	b10b      	cbz	r3, 800bd12 <_strtod_l+0x4ea>
 800bd0e:	4682      	mov	sl, r0
 800bd10:	468b      	mov	fp, r1
 800bd12:	4b2f      	ldr	r3, [pc, #188]	; (800bdd0 <_strtod_l+0x5a8>)
 800bd14:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bd18:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bd1c:	4652      	mov	r2, sl
 800bd1e:	465b      	mov	r3, fp
 800bd20:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bd24:	f7f4 fca0 	bl	8000668 <__aeabi_dmul>
 800bd28:	4b2a      	ldr	r3, [pc, #168]	; (800bdd4 <_strtod_l+0x5ac>)
 800bd2a:	460a      	mov	r2, r1
 800bd2c:	400b      	ands	r3, r1
 800bd2e:	492a      	ldr	r1, [pc, #168]	; (800bdd8 <_strtod_l+0x5b0>)
 800bd30:	428b      	cmp	r3, r1
 800bd32:	4682      	mov	sl, r0
 800bd34:	d8bc      	bhi.n	800bcb0 <_strtod_l+0x488>
 800bd36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bd3a:	428b      	cmp	r3, r1
 800bd3c:	bf86      	itte	hi
 800bd3e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bddc <_strtod_l+0x5b4>
 800bd42:	f04f 3aff 	movhi.w	sl, #4294967295
 800bd46:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	9304      	str	r3, [sp, #16]
 800bd4e:	e084      	b.n	800be5a <_strtod_l+0x632>
 800bd50:	f018 0f01 	tst.w	r8, #1
 800bd54:	d005      	beq.n	800bd62 <_strtod_l+0x53a>
 800bd56:	9b04      	ldr	r3, [sp, #16]
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f7f4 fc84 	bl	8000668 <__aeabi_dmul>
 800bd60:	2301      	movs	r3, #1
 800bd62:	9a04      	ldr	r2, [sp, #16]
 800bd64:	3208      	adds	r2, #8
 800bd66:	f109 0901 	add.w	r9, r9, #1
 800bd6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bd6e:	9204      	str	r2, [sp, #16]
 800bd70:	e7c9      	b.n	800bd06 <_strtod_l+0x4de>
 800bd72:	d0ea      	beq.n	800bd4a <_strtod_l+0x522>
 800bd74:	f1c8 0800 	rsb	r8, r8, #0
 800bd78:	f018 020f 	ands.w	r2, r8, #15
 800bd7c:	d00a      	beq.n	800bd94 <_strtod_l+0x56c>
 800bd7e:	4b13      	ldr	r3, [pc, #76]	; (800bdcc <_strtod_l+0x5a4>)
 800bd80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd84:	4650      	mov	r0, sl
 800bd86:	4659      	mov	r1, fp
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	f7f4 fd96 	bl	80008bc <__aeabi_ddiv>
 800bd90:	4682      	mov	sl, r0
 800bd92:	468b      	mov	fp, r1
 800bd94:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bd98:	d0d7      	beq.n	800bd4a <_strtod_l+0x522>
 800bd9a:	f1b8 0f1f 	cmp.w	r8, #31
 800bd9e:	dd1f      	ble.n	800bde0 <_strtod_l+0x5b8>
 800bda0:	2500      	movs	r5, #0
 800bda2:	462e      	mov	r6, r5
 800bda4:	9507      	str	r5, [sp, #28]
 800bda6:	9505      	str	r5, [sp, #20]
 800bda8:	2322      	movs	r3, #34	; 0x22
 800bdaa:	f04f 0a00 	mov.w	sl, #0
 800bdae:	f04f 0b00 	mov.w	fp, #0
 800bdb2:	6023      	str	r3, [r4, #0]
 800bdb4:	e786      	b.n	800bcc4 <_strtod_l+0x49c>
 800bdb6:	bf00      	nop
 800bdb8:	0800f4b1 	.word	0x0800f4b1
 800bdbc:	0800f4ec 	.word	0x0800f4ec
 800bdc0:	0800f4a9 	.word	0x0800f4a9
 800bdc4:	0800f5db 	.word	0x0800f5db
 800bdc8:	0800f5d7 	.word	0x0800f5d7
 800bdcc:	0800f750 	.word	0x0800f750
 800bdd0:	0800f728 	.word	0x0800f728
 800bdd4:	7ff00000 	.word	0x7ff00000
 800bdd8:	7ca00000 	.word	0x7ca00000
 800bddc:	7fefffff 	.word	0x7fefffff
 800bde0:	f018 0310 	ands.w	r3, r8, #16
 800bde4:	bf18      	it	ne
 800bde6:	236a      	movne	r3, #106	; 0x6a
 800bde8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c198 <_strtod_l+0x970>
 800bdec:	9304      	str	r3, [sp, #16]
 800bdee:	4650      	mov	r0, sl
 800bdf0:	4659      	mov	r1, fp
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f018 0f01 	tst.w	r8, #1
 800bdf8:	d004      	beq.n	800be04 <_strtod_l+0x5dc>
 800bdfa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bdfe:	f7f4 fc33 	bl	8000668 <__aeabi_dmul>
 800be02:	2301      	movs	r3, #1
 800be04:	ea5f 0868 	movs.w	r8, r8, asr #1
 800be08:	f109 0908 	add.w	r9, r9, #8
 800be0c:	d1f2      	bne.n	800bdf4 <_strtod_l+0x5cc>
 800be0e:	b10b      	cbz	r3, 800be14 <_strtod_l+0x5ec>
 800be10:	4682      	mov	sl, r0
 800be12:	468b      	mov	fp, r1
 800be14:	9b04      	ldr	r3, [sp, #16]
 800be16:	b1c3      	cbz	r3, 800be4a <_strtod_l+0x622>
 800be18:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800be1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800be20:	2b00      	cmp	r3, #0
 800be22:	4659      	mov	r1, fp
 800be24:	dd11      	ble.n	800be4a <_strtod_l+0x622>
 800be26:	2b1f      	cmp	r3, #31
 800be28:	f340 8124 	ble.w	800c074 <_strtod_l+0x84c>
 800be2c:	2b34      	cmp	r3, #52	; 0x34
 800be2e:	bfde      	ittt	le
 800be30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800be34:	f04f 33ff 	movle.w	r3, #4294967295
 800be38:	fa03 f202 	lslle.w	r2, r3, r2
 800be3c:	f04f 0a00 	mov.w	sl, #0
 800be40:	bfcc      	ite	gt
 800be42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800be46:	ea02 0b01 	andle.w	fp, r2, r1
 800be4a:	2200      	movs	r2, #0
 800be4c:	2300      	movs	r3, #0
 800be4e:	4650      	mov	r0, sl
 800be50:	4659      	mov	r1, fp
 800be52:	f7f4 fe71 	bl	8000b38 <__aeabi_dcmpeq>
 800be56:	2800      	cmp	r0, #0
 800be58:	d1a2      	bne.n	800bda0 <_strtod_l+0x578>
 800be5a:	9b07      	ldr	r3, [sp, #28]
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	9908      	ldr	r1, [sp, #32]
 800be60:	462b      	mov	r3, r5
 800be62:	463a      	mov	r2, r7
 800be64:	4620      	mov	r0, r4
 800be66:	f001 fe3b 	bl	800dae0 <__s2b>
 800be6a:	9007      	str	r0, [sp, #28]
 800be6c:	2800      	cmp	r0, #0
 800be6e:	f43f af1f 	beq.w	800bcb0 <_strtod_l+0x488>
 800be72:	9b05      	ldr	r3, [sp, #20]
 800be74:	1b9e      	subs	r6, r3, r6
 800be76:	9b06      	ldr	r3, [sp, #24]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	bfb4      	ite	lt
 800be7c:	4633      	movlt	r3, r6
 800be7e:	2300      	movge	r3, #0
 800be80:	930c      	str	r3, [sp, #48]	; 0x30
 800be82:	9b06      	ldr	r3, [sp, #24]
 800be84:	2500      	movs	r5, #0
 800be86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800be8a:	9312      	str	r3, [sp, #72]	; 0x48
 800be8c:	462e      	mov	r6, r5
 800be8e:	9b07      	ldr	r3, [sp, #28]
 800be90:	4620      	mov	r0, r4
 800be92:	6859      	ldr	r1, [r3, #4]
 800be94:	f001 fd7c 	bl	800d990 <_Balloc>
 800be98:	9005      	str	r0, [sp, #20]
 800be9a:	2800      	cmp	r0, #0
 800be9c:	f43f af0c 	beq.w	800bcb8 <_strtod_l+0x490>
 800bea0:	9b07      	ldr	r3, [sp, #28]
 800bea2:	691a      	ldr	r2, [r3, #16]
 800bea4:	3202      	adds	r2, #2
 800bea6:	f103 010c 	add.w	r1, r3, #12
 800beaa:	0092      	lsls	r2, r2, #2
 800beac:	300c      	adds	r0, #12
 800beae:	f001 fd61 	bl	800d974 <memcpy>
 800beb2:	ec4b ab10 	vmov	d0, sl, fp
 800beb6:	aa1a      	add	r2, sp, #104	; 0x68
 800beb8:	a919      	add	r1, sp, #100	; 0x64
 800beba:	4620      	mov	r0, r4
 800bebc:	f002 f956 	bl	800e16c <__d2b>
 800bec0:	ec4b ab18 	vmov	d8, sl, fp
 800bec4:	9018      	str	r0, [sp, #96]	; 0x60
 800bec6:	2800      	cmp	r0, #0
 800bec8:	f43f aef6 	beq.w	800bcb8 <_strtod_l+0x490>
 800becc:	2101      	movs	r1, #1
 800bece:	4620      	mov	r0, r4
 800bed0:	f001 fea0 	bl	800dc14 <__i2b>
 800bed4:	4606      	mov	r6, r0
 800bed6:	2800      	cmp	r0, #0
 800bed8:	f43f aeee 	beq.w	800bcb8 <_strtod_l+0x490>
 800bedc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bede:	9904      	ldr	r1, [sp, #16]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	bfab      	itete	ge
 800bee4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bee6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bee8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800beea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800beee:	bfac      	ite	ge
 800bef0:	eb03 0902 	addge.w	r9, r3, r2
 800bef4:	1ad7      	sublt	r7, r2, r3
 800bef6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bef8:	eba3 0801 	sub.w	r8, r3, r1
 800befc:	4490      	add	r8, r2
 800befe:	4ba1      	ldr	r3, [pc, #644]	; (800c184 <_strtod_l+0x95c>)
 800bf00:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf04:	4598      	cmp	r8, r3
 800bf06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bf0a:	f280 80c7 	bge.w	800c09c <_strtod_l+0x874>
 800bf0e:	eba3 0308 	sub.w	r3, r3, r8
 800bf12:	2b1f      	cmp	r3, #31
 800bf14:	eba2 0203 	sub.w	r2, r2, r3
 800bf18:	f04f 0101 	mov.w	r1, #1
 800bf1c:	f300 80b1 	bgt.w	800c082 <_strtod_l+0x85a>
 800bf20:	fa01 f303 	lsl.w	r3, r1, r3
 800bf24:	930d      	str	r3, [sp, #52]	; 0x34
 800bf26:	2300      	movs	r3, #0
 800bf28:	9308      	str	r3, [sp, #32]
 800bf2a:	eb09 0802 	add.w	r8, r9, r2
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	45c1      	cmp	r9, r8
 800bf32:	4417      	add	r7, r2
 800bf34:	441f      	add	r7, r3
 800bf36:	464b      	mov	r3, r9
 800bf38:	bfa8      	it	ge
 800bf3a:	4643      	movge	r3, r8
 800bf3c:	42bb      	cmp	r3, r7
 800bf3e:	bfa8      	it	ge
 800bf40:	463b      	movge	r3, r7
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	bfc2      	ittt	gt
 800bf46:	eba8 0803 	subgt.w	r8, r8, r3
 800bf4a:	1aff      	subgt	r7, r7, r3
 800bf4c:	eba9 0903 	subgt.w	r9, r9, r3
 800bf50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	dd17      	ble.n	800bf86 <_strtod_l+0x75e>
 800bf56:	4631      	mov	r1, r6
 800bf58:	461a      	mov	r2, r3
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f001 ff1a 	bl	800dd94 <__pow5mult>
 800bf60:	4606      	mov	r6, r0
 800bf62:	2800      	cmp	r0, #0
 800bf64:	f43f aea8 	beq.w	800bcb8 <_strtod_l+0x490>
 800bf68:	4601      	mov	r1, r0
 800bf6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f001 fe67 	bl	800dc40 <__multiply>
 800bf72:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf74:	2800      	cmp	r0, #0
 800bf76:	f43f ae9f 	beq.w	800bcb8 <_strtod_l+0x490>
 800bf7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f001 fd47 	bl	800da10 <_Bfree>
 800bf82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf84:	9318      	str	r3, [sp, #96]	; 0x60
 800bf86:	f1b8 0f00 	cmp.w	r8, #0
 800bf8a:	f300 808c 	bgt.w	800c0a6 <_strtod_l+0x87e>
 800bf8e:	9b06      	ldr	r3, [sp, #24]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dd08      	ble.n	800bfa6 <_strtod_l+0x77e>
 800bf94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf96:	9905      	ldr	r1, [sp, #20]
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f001 fefb 	bl	800dd94 <__pow5mult>
 800bf9e:	9005      	str	r0, [sp, #20]
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	f43f ae89 	beq.w	800bcb8 <_strtod_l+0x490>
 800bfa6:	2f00      	cmp	r7, #0
 800bfa8:	dd08      	ble.n	800bfbc <_strtod_l+0x794>
 800bfaa:	9905      	ldr	r1, [sp, #20]
 800bfac:	463a      	mov	r2, r7
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f001 ff4a 	bl	800de48 <__lshift>
 800bfb4:	9005      	str	r0, [sp, #20]
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	f43f ae7e 	beq.w	800bcb8 <_strtod_l+0x490>
 800bfbc:	f1b9 0f00 	cmp.w	r9, #0
 800bfc0:	dd08      	ble.n	800bfd4 <_strtod_l+0x7ac>
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	464a      	mov	r2, r9
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f001 ff3e 	bl	800de48 <__lshift>
 800bfcc:	4606      	mov	r6, r0
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	f43f ae72 	beq.w	800bcb8 <_strtod_l+0x490>
 800bfd4:	9a05      	ldr	r2, [sp, #20]
 800bfd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f001 ffc1 	bl	800df60 <__mdiff>
 800bfde:	4605      	mov	r5, r0
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	f43f ae69 	beq.w	800bcb8 <_strtod_l+0x490>
 800bfe6:	68c3      	ldr	r3, [r0, #12]
 800bfe8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfea:	2300      	movs	r3, #0
 800bfec:	60c3      	str	r3, [r0, #12]
 800bfee:	4631      	mov	r1, r6
 800bff0:	f001 ff9a 	bl	800df28 <__mcmp>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	da60      	bge.n	800c0ba <_strtod_l+0x892>
 800bff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bffa:	ea53 030a 	orrs.w	r3, r3, sl
 800bffe:	f040 8082 	bne.w	800c106 <_strtod_l+0x8de>
 800c002:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c006:	2b00      	cmp	r3, #0
 800c008:	d17d      	bne.n	800c106 <_strtod_l+0x8de>
 800c00a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c00e:	0d1b      	lsrs	r3, r3, #20
 800c010:	051b      	lsls	r3, r3, #20
 800c012:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c016:	d976      	bls.n	800c106 <_strtod_l+0x8de>
 800c018:	696b      	ldr	r3, [r5, #20]
 800c01a:	b913      	cbnz	r3, 800c022 <_strtod_l+0x7fa>
 800c01c:	692b      	ldr	r3, [r5, #16]
 800c01e:	2b01      	cmp	r3, #1
 800c020:	dd71      	ble.n	800c106 <_strtod_l+0x8de>
 800c022:	4629      	mov	r1, r5
 800c024:	2201      	movs	r2, #1
 800c026:	4620      	mov	r0, r4
 800c028:	f001 ff0e 	bl	800de48 <__lshift>
 800c02c:	4631      	mov	r1, r6
 800c02e:	4605      	mov	r5, r0
 800c030:	f001 ff7a 	bl	800df28 <__mcmp>
 800c034:	2800      	cmp	r0, #0
 800c036:	dd66      	ble.n	800c106 <_strtod_l+0x8de>
 800c038:	9904      	ldr	r1, [sp, #16]
 800c03a:	4a53      	ldr	r2, [pc, #332]	; (800c188 <_strtod_l+0x960>)
 800c03c:	465b      	mov	r3, fp
 800c03e:	2900      	cmp	r1, #0
 800c040:	f000 8081 	beq.w	800c146 <_strtod_l+0x91e>
 800c044:	ea02 010b 	and.w	r1, r2, fp
 800c048:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c04c:	dc7b      	bgt.n	800c146 <_strtod_l+0x91e>
 800c04e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c052:	f77f aea9 	ble.w	800bda8 <_strtod_l+0x580>
 800c056:	4b4d      	ldr	r3, [pc, #308]	; (800c18c <_strtod_l+0x964>)
 800c058:	4650      	mov	r0, sl
 800c05a:	4659      	mov	r1, fp
 800c05c:	2200      	movs	r2, #0
 800c05e:	f7f4 fb03 	bl	8000668 <__aeabi_dmul>
 800c062:	460b      	mov	r3, r1
 800c064:	4303      	orrs	r3, r0
 800c066:	bf08      	it	eq
 800c068:	2322      	moveq	r3, #34	; 0x22
 800c06a:	4682      	mov	sl, r0
 800c06c:	468b      	mov	fp, r1
 800c06e:	bf08      	it	eq
 800c070:	6023      	streq	r3, [r4, #0]
 800c072:	e62b      	b.n	800bccc <_strtod_l+0x4a4>
 800c074:	f04f 32ff 	mov.w	r2, #4294967295
 800c078:	fa02 f303 	lsl.w	r3, r2, r3
 800c07c:	ea03 0a0a 	and.w	sl, r3, sl
 800c080:	e6e3      	b.n	800be4a <_strtod_l+0x622>
 800c082:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c086:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c08a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c08e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c092:	fa01 f308 	lsl.w	r3, r1, r8
 800c096:	9308      	str	r3, [sp, #32]
 800c098:	910d      	str	r1, [sp, #52]	; 0x34
 800c09a:	e746      	b.n	800bf2a <_strtod_l+0x702>
 800c09c:	2300      	movs	r3, #0
 800c09e:	9308      	str	r3, [sp, #32]
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	930d      	str	r3, [sp, #52]	; 0x34
 800c0a4:	e741      	b.n	800bf2a <_strtod_l+0x702>
 800c0a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c0a8:	4642      	mov	r2, r8
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f001 fecc 	bl	800de48 <__lshift>
 800c0b0:	9018      	str	r0, [sp, #96]	; 0x60
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f47f af6b 	bne.w	800bf8e <_strtod_l+0x766>
 800c0b8:	e5fe      	b.n	800bcb8 <_strtod_l+0x490>
 800c0ba:	465f      	mov	r7, fp
 800c0bc:	d16e      	bne.n	800c19c <_strtod_l+0x974>
 800c0be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0c4:	b342      	cbz	r2, 800c118 <_strtod_l+0x8f0>
 800c0c6:	4a32      	ldr	r2, [pc, #200]	; (800c190 <_strtod_l+0x968>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d128      	bne.n	800c11e <_strtod_l+0x8f6>
 800c0cc:	9b04      	ldr	r3, [sp, #16]
 800c0ce:	4651      	mov	r1, sl
 800c0d0:	b1eb      	cbz	r3, 800c10e <_strtod_l+0x8e6>
 800c0d2:	4b2d      	ldr	r3, [pc, #180]	; (800c188 <_strtod_l+0x960>)
 800c0d4:	403b      	ands	r3, r7
 800c0d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0da:	f04f 32ff 	mov.w	r2, #4294967295
 800c0de:	d819      	bhi.n	800c114 <_strtod_l+0x8ec>
 800c0e0:	0d1b      	lsrs	r3, r3, #20
 800c0e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ea:	4299      	cmp	r1, r3
 800c0ec:	d117      	bne.n	800c11e <_strtod_l+0x8f6>
 800c0ee:	4b29      	ldr	r3, [pc, #164]	; (800c194 <_strtod_l+0x96c>)
 800c0f0:	429f      	cmp	r7, r3
 800c0f2:	d102      	bne.n	800c0fa <_strtod_l+0x8d2>
 800c0f4:	3101      	adds	r1, #1
 800c0f6:	f43f addf 	beq.w	800bcb8 <_strtod_l+0x490>
 800c0fa:	4b23      	ldr	r3, [pc, #140]	; (800c188 <_strtod_l+0x960>)
 800c0fc:	403b      	ands	r3, r7
 800c0fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c102:	f04f 0a00 	mov.w	sl, #0
 800c106:	9b04      	ldr	r3, [sp, #16]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1a4      	bne.n	800c056 <_strtod_l+0x82e>
 800c10c:	e5de      	b.n	800bccc <_strtod_l+0x4a4>
 800c10e:	f04f 33ff 	mov.w	r3, #4294967295
 800c112:	e7ea      	b.n	800c0ea <_strtod_l+0x8c2>
 800c114:	4613      	mov	r3, r2
 800c116:	e7e8      	b.n	800c0ea <_strtod_l+0x8c2>
 800c118:	ea53 030a 	orrs.w	r3, r3, sl
 800c11c:	d08c      	beq.n	800c038 <_strtod_l+0x810>
 800c11e:	9b08      	ldr	r3, [sp, #32]
 800c120:	b1db      	cbz	r3, 800c15a <_strtod_l+0x932>
 800c122:	423b      	tst	r3, r7
 800c124:	d0ef      	beq.n	800c106 <_strtod_l+0x8de>
 800c126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c128:	9a04      	ldr	r2, [sp, #16]
 800c12a:	4650      	mov	r0, sl
 800c12c:	4659      	mov	r1, fp
 800c12e:	b1c3      	cbz	r3, 800c162 <_strtod_l+0x93a>
 800c130:	f7ff fb5e 	bl	800b7f0 <sulp>
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
 800c138:	ec51 0b18 	vmov	r0, r1, d8
 800c13c:	f7f4 f8de 	bl	80002fc <__adddf3>
 800c140:	4682      	mov	sl, r0
 800c142:	468b      	mov	fp, r1
 800c144:	e7df      	b.n	800c106 <_strtod_l+0x8de>
 800c146:	4013      	ands	r3, r2
 800c148:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c14c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c150:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c154:	f04f 3aff 	mov.w	sl, #4294967295
 800c158:	e7d5      	b.n	800c106 <_strtod_l+0x8de>
 800c15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c15c:	ea13 0f0a 	tst.w	r3, sl
 800c160:	e7e0      	b.n	800c124 <_strtod_l+0x8fc>
 800c162:	f7ff fb45 	bl	800b7f0 <sulp>
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	ec51 0b18 	vmov	r0, r1, d8
 800c16e:	f7f4 f8c3 	bl	80002f8 <__aeabi_dsub>
 800c172:	2200      	movs	r2, #0
 800c174:	2300      	movs	r3, #0
 800c176:	4682      	mov	sl, r0
 800c178:	468b      	mov	fp, r1
 800c17a:	f7f4 fcdd 	bl	8000b38 <__aeabi_dcmpeq>
 800c17e:	2800      	cmp	r0, #0
 800c180:	d0c1      	beq.n	800c106 <_strtod_l+0x8de>
 800c182:	e611      	b.n	800bda8 <_strtod_l+0x580>
 800c184:	fffffc02 	.word	0xfffffc02
 800c188:	7ff00000 	.word	0x7ff00000
 800c18c:	39500000 	.word	0x39500000
 800c190:	000fffff 	.word	0x000fffff
 800c194:	7fefffff 	.word	0x7fefffff
 800c198:	0800f500 	.word	0x0800f500
 800c19c:	4631      	mov	r1, r6
 800c19e:	4628      	mov	r0, r5
 800c1a0:	f002 f840 	bl	800e224 <__ratio>
 800c1a4:	ec59 8b10 	vmov	r8, r9, d0
 800c1a8:	ee10 0a10 	vmov	r0, s0
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1b2:	4649      	mov	r1, r9
 800c1b4:	f7f4 fcd4 	bl	8000b60 <__aeabi_dcmple>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d07a      	beq.n	800c2b2 <_strtod_l+0xa8a>
 800c1bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d04a      	beq.n	800c258 <_strtod_l+0xa30>
 800c1c2:	4b95      	ldr	r3, [pc, #596]	; (800c418 <_strtod_l+0xbf0>)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c418 <_strtod_l+0xbf0>
 800c1ce:	f04f 0800 	mov.w	r8, #0
 800c1d2:	4b92      	ldr	r3, [pc, #584]	; (800c41c <_strtod_l+0xbf4>)
 800c1d4:	403b      	ands	r3, r7
 800c1d6:	930d      	str	r3, [sp, #52]	; 0x34
 800c1d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1da:	4b91      	ldr	r3, [pc, #580]	; (800c420 <_strtod_l+0xbf8>)
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	f040 80b0 	bne.w	800c342 <_strtod_l+0xb1a>
 800c1e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c1ea:	ec4b ab10 	vmov	d0, sl, fp
 800c1ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c1f2:	f001 ff3f 	bl	800e074 <__ulp>
 800c1f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1fa:	ec53 2b10 	vmov	r2, r3, d0
 800c1fe:	f7f4 fa33 	bl	8000668 <__aeabi_dmul>
 800c202:	4652      	mov	r2, sl
 800c204:	465b      	mov	r3, fp
 800c206:	f7f4 f879 	bl	80002fc <__adddf3>
 800c20a:	460b      	mov	r3, r1
 800c20c:	4983      	ldr	r1, [pc, #524]	; (800c41c <_strtod_l+0xbf4>)
 800c20e:	4a85      	ldr	r2, [pc, #532]	; (800c424 <_strtod_l+0xbfc>)
 800c210:	4019      	ands	r1, r3
 800c212:	4291      	cmp	r1, r2
 800c214:	4682      	mov	sl, r0
 800c216:	d960      	bls.n	800c2da <_strtod_l+0xab2>
 800c218:	ee18 3a90 	vmov	r3, s17
 800c21c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c220:	4293      	cmp	r3, r2
 800c222:	d104      	bne.n	800c22e <_strtod_l+0xa06>
 800c224:	ee18 3a10 	vmov	r3, s16
 800c228:	3301      	adds	r3, #1
 800c22a:	f43f ad45 	beq.w	800bcb8 <_strtod_l+0x490>
 800c22e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c430 <_strtod_l+0xc08>
 800c232:	f04f 3aff 	mov.w	sl, #4294967295
 800c236:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c238:	4620      	mov	r0, r4
 800c23a:	f001 fbe9 	bl	800da10 <_Bfree>
 800c23e:	9905      	ldr	r1, [sp, #20]
 800c240:	4620      	mov	r0, r4
 800c242:	f001 fbe5 	bl	800da10 <_Bfree>
 800c246:	4631      	mov	r1, r6
 800c248:	4620      	mov	r0, r4
 800c24a:	f001 fbe1 	bl	800da10 <_Bfree>
 800c24e:	4629      	mov	r1, r5
 800c250:	4620      	mov	r0, r4
 800c252:	f001 fbdd 	bl	800da10 <_Bfree>
 800c256:	e61a      	b.n	800be8e <_strtod_l+0x666>
 800c258:	f1ba 0f00 	cmp.w	sl, #0
 800c25c:	d11b      	bne.n	800c296 <_strtod_l+0xa6e>
 800c25e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c262:	b9f3      	cbnz	r3, 800c2a2 <_strtod_l+0xa7a>
 800c264:	4b6c      	ldr	r3, [pc, #432]	; (800c418 <_strtod_l+0xbf0>)
 800c266:	2200      	movs	r2, #0
 800c268:	4640      	mov	r0, r8
 800c26a:	4649      	mov	r1, r9
 800c26c:	f7f4 fc6e 	bl	8000b4c <__aeabi_dcmplt>
 800c270:	b9d0      	cbnz	r0, 800c2a8 <_strtod_l+0xa80>
 800c272:	4640      	mov	r0, r8
 800c274:	4649      	mov	r1, r9
 800c276:	4b6c      	ldr	r3, [pc, #432]	; (800c428 <_strtod_l+0xc00>)
 800c278:	2200      	movs	r2, #0
 800c27a:	f7f4 f9f5 	bl	8000668 <__aeabi_dmul>
 800c27e:	4680      	mov	r8, r0
 800c280:	4689      	mov	r9, r1
 800c282:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c286:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c28a:	9315      	str	r3, [sp, #84]	; 0x54
 800c28c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c290:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c294:	e79d      	b.n	800c1d2 <_strtod_l+0x9aa>
 800c296:	f1ba 0f01 	cmp.w	sl, #1
 800c29a:	d102      	bne.n	800c2a2 <_strtod_l+0xa7a>
 800c29c:	2f00      	cmp	r7, #0
 800c29e:	f43f ad83 	beq.w	800bda8 <_strtod_l+0x580>
 800c2a2:	4b62      	ldr	r3, [pc, #392]	; (800c42c <_strtod_l+0xc04>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	e78e      	b.n	800c1c6 <_strtod_l+0x99e>
 800c2a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c428 <_strtod_l+0xc00>
 800c2ac:	f04f 0800 	mov.w	r8, #0
 800c2b0:	e7e7      	b.n	800c282 <_strtod_l+0xa5a>
 800c2b2:	4b5d      	ldr	r3, [pc, #372]	; (800c428 <_strtod_l+0xc00>)
 800c2b4:	4640      	mov	r0, r8
 800c2b6:	4649      	mov	r1, r9
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f7f4 f9d5 	bl	8000668 <__aeabi_dmul>
 800c2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2c0:	4680      	mov	r8, r0
 800c2c2:	4689      	mov	r9, r1
 800c2c4:	b933      	cbnz	r3, 800c2d4 <_strtod_l+0xaac>
 800c2c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2ca:	900e      	str	r0, [sp, #56]	; 0x38
 800c2cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c2d2:	e7dd      	b.n	800c290 <_strtod_l+0xa68>
 800c2d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c2d8:	e7f9      	b.n	800c2ce <_strtod_l+0xaa6>
 800c2da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c2de:	9b04      	ldr	r3, [sp, #16]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1a8      	bne.n	800c236 <_strtod_l+0xa0e>
 800c2e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c2e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2ea:	0d1b      	lsrs	r3, r3, #20
 800c2ec:	051b      	lsls	r3, r3, #20
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d1a1      	bne.n	800c236 <_strtod_l+0xa0e>
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	f7f4 fd17 	bl	8000d28 <__aeabi_d2lz>
 800c2fa:	f7f4 f987 	bl	800060c <__aeabi_l2d>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	4640      	mov	r0, r8
 800c304:	4649      	mov	r1, r9
 800c306:	f7f3 fff7 	bl	80002f8 <__aeabi_dsub>
 800c30a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c30c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c310:	ea43 030a 	orr.w	r3, r3, sl
 800c314:	4313      	orrs	r3, r2
 800c316:	4680      	mov	r8, r0
 800c318:	4689      	mov	r9, r1
 800c31a:	d055      	beq.n	800c3c8 <_strtod_l+0xba0>
 800c31c:	a336      	add	r3, pc, #216	; (adr r3, 800c3f8 <_strtod_l+0xbd0>)
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	f7f4 fc13 	bl	8000b4c <__aeabi_dcmplt>
 800c326:	2800      	cmp	r0, #0
 800c328:	f47f acd0 	bne.w	800bccc <_strtod_l+0x4a4>
 800c32c:	a334      	add	r3, pc, #208	; (adr r3, 800c400 <_strtod_l+0xbd8>)
 800c32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c332:	4640      	mov	r0, r8
 800c334:	4649      	mov	r1, r9
 800c336:	f7f4 fc27 	bl	8000b88 <__aeabi_dcmpgt>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	f43f af7b 	beq.w	800c236 <_strtod_l+0xa0e>
 800c340:	e4c4      	b.n	800bccc <_strtod_l+0x4a4>
 800c342:	9b04      	ldr	r3, [sp, #16]
 800c344:	b333      	cbz	r3, 800c394 <_strtod_l+0xb6c>
 800c346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c348:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c34c:	d822      	bhi.n	800c394 <_strtod_l+0xb6c>
 800c34e:	a32e      	add	r3, pc, #184	; (adr r3, 800c408 <_strtod_l+0xbe0>)
 800c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c354:	4640      	mov	r0, r8
 800c356:	4649      	mov	r1, r9
 800c358:	f7f4 fc02 	bl	8000b60 <__aeabi_dcmple>
 800c35c:	b1a0      	cbz	r0, 800c388 <_strtod_l+0xb60>
 800c35e:	4649      	mov	r1, r9
 800c360:	4640      	mov	r0, r8
 800c362:	f7f4 fc59 	bl	8000c18 <__aeabi_d2uiz>
 800c366:	2801      	cmp	r0, #1
 800c368:	bf38      	it	cc
 800c36a:	2001      	movcc	r0, #1
 800c36c:	f7f4 f902 	bl	8000574 <__aeabi_ui2d>
 800c370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c372:	4680      	mov	r8, r0
 800c374:	4689      	mov	r9, r1
 800c376:	bb23      	cbnz	r3, 800c3c2 <_strtod_l+0xb9a>
 800c378:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c37c:	9010      	str	r0, [sp, #64]	; 0x40
 800c37e:	9311      	str	r3, [sp, #68]	; 0x44
 800c380:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c384:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c38a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c38c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c390:	1a9b      	subs	r3, r3, r2
 800c392:	9309      	str	r3, [sp, #36]	; 0x24
 800c394:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c398:	eeb0 0a48 	vmov.f32	s0, s16
 800c39c:	eef0 0a68 	vmov.f32	s1, s17
 800c3a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c3a4:	f001 fe66 	bl	800e074 <__ulp>
 800c3a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3ac:	ec53 2b10 	vmov	r2, r3, d0
 800c3b0:	f7f4 f95a 	bl	8000668 <__aeabi_dmul>
 800c3b4:	ec53 2b18 	vmov	r2, r3, d8
 800c3b8:	f7f3 ffa0 	bl	80002fc <__adddf3>
 800c3bc:	4682      	mov	sl, r0
 800c3be:	468b      	mov	fp, r1
 800c3c0:	e78d      	b.n	800c2de <_strtod_l+0xab6>
 800c3c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c3c6:	e7db      	b.n	800c380 <_strtod_l+0xb58>
 800c3c8:	a311      	add	r3, pc, #68	; (adr r3, 800c410 <_strtod_l+0xbe8>)
 800c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ce:	f7f4 fbbd 	bl	8000b4c <__aeabi_dcmplt>
 800c3d2:	e7b2      	b.n	800c33a <_strtod_l+0xb12>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c3d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3dc:	6013      	str	r3, [r2, #0]
 800c3de:	f7ff ba6b 	b.w	800b8b8 <_strtod_l+0x90>
 800c3e2:	2a65      	cmp	r2, #101	; 0x65
 800c3e4:	f43f ab5f 	beq.w	800baa6 <_strtod_l+0x27e>
 800c3e8:	2a45      	cmp	r2, #69	; 0x45
 800c3ea:	f43f ab5c 	beq.w	800baa6 <_strtod_l+0x27e>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	f7ff bb94 	b.w	800bb1c <_strtod_l+0x2f4>
 800c3f4:	f3af 8000 	nop.w
 800c3f8:	94a03595 	.word	0x94a03595
 800c3fc:	3fdfffff 	.word	0x3fdfffff
 800c400:	35afe535 	.word	0x35afe535
 800c404:	3fe00000 	.word	0x3fe00000
 800c408:	ffc00000 	.word	0xffc00000
 800c40c:	41dfffff 	.word	0x41dfffff
 800c410:	94a03595 	.word	0x94a03595
 800c414:	3fcfffff 	.word	0x3fcfffff
 800c418:	3ff00000 	.word	0x3ff00000
 800c41c:	7ff00000 	.word	0x7ff00000
 800c420:	7fe00000 	.word	0x7fe00000
 800c424:	7c9fffff 	.word	0x7c9fffff
 800c428:	3fe00000 	.word	0x3fe00000
 800c42c:	bff00000 	.word	0xbff00000
 800c430:	7fefffff 	.word	0x7fefffff

0800c434 <strtod>:
 800c434:	460a      	mov	r2, r1
 800c436:	4601      	mov	r1, r0
 800c438:	4802      	ldr	r0, [pc, #8]	; (800c444 <strtod+0x10>)
 800c43a:	4b03      	ldr	r3, [pc, #12]	; (800c448 <strtod+0x14>)
 800c43c:	6800      	ldr	r0, [r0, #0]
 800c43e:	f7ff b9f3 	b.w	800b828 <_strtod_l>
 800c442:	bf00      	nop
 800c444:	20000010 	.word	0x20000010
 800c448:	20000078 	.word	0x20000078

0800c44c <strtok>:
 800c44c:	4b16      	ldr	r3, [pc, #88]	; (800c4a8 <strtok+0x5c>)
 800c44e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c450:	681e      	ldr	r6, [r3, #0]
 800c452:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c454:	4605      	mov	r5, r0
 800c456:	b9fc      	cbnz	r4, 800c498 <strtok+0x4c>
 800c458:	2050      	movs	r0, #80	; 0x50
 800c45a:	9101      	str	r1, [sp, #4]
 800c45c:	f001 fa70 	bl	800d940 <malloc>
 800c460:	9901      	ldr	r1, [sp, #4]
 800c462:	65b0      	str	r0, [r6, #88]	; 0x58
 800c464:	4602      	mov	r2, r0
 800c466:	b920      	cbnz	r0, 800c472 <strtok+0x26>
 800c468:	4b10      	ldr	r3, [pc, #64]	; (800c4ac <strtok+0x60>)
 800c46a:	4811      	ldr	r0, [pc, #68]	; (800c4b0 <strtok+0x64>)
 800c46c:	2157      	movs	r1, #87	; 0x57
 800c46e:	f000 f849 	bl	800c504 <__assert_func>
 800c472:	e9c0 4400 	strd	r4, r4, [r0]
 800c476:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c47a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c47e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c482:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c486:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c48a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c48e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c492:	6184      	str	r4, [r0, #24]
 800c494:	7704      	strb	r4, [r0, #28]
 800c496:	6244      	str	r4, [r0, #36]	; 0x24
 800c498:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c49a:	2301      	movs	r3, #1
 800c49c:	4628      	mov	r0, r5
 800c49e:	b002      	add	sp, #8
 800c4a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4a4:	f000 b806 	b.w	800c4b4 <__strtok_r>
 800c4a8:	20000010 	.word	0x20000010
 800c4ac:	0800f528 	.word	0x0800f528
 800c4b0:	0800f53f 	.word	0x0800f53f

0800c4b4 <__strtok_r>:
 800c4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4b6:	b908      	cbnz	r0, 800c4bc <__strtok_r+0x8>
 800c4b8:	6810      	ldr	r0, [r2, #0]
 800c4ba:	b188      	cbz	r0, 800c4e0 <__strtok_r+0x2c>
 800c4bc:	4604      	mov	r4, r0
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c4c4:	460f      	mov	r7, r1
 800c4c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c4ca:	b91e      	cbnz	r6, 800c4d4 <__strtok_r+0x20>
 800c4cc:	b965      	cbnz	r5, 800c4e8 <__strtok_r+0x34>
 800c4ce:	6015      	str	r5, [r2, #0]
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	e005      	b.n	800c4e0 <__strtok_r+0x2c>
 800c4d4:	42b5      	cmp	r5, r6
 800c4d6:	d1f6      	bne.n	800c4c6 <__strtok_r+0x12>
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1f0      	bne.n	800c4be <__strtok_r+0xa>
 800c4dc:	6014      	str	r4, [r2, #0]
 800c4de:	7003      	strb	r3, [r0, #0]
 800c4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4e2:	461c      	mov	r4, r3
 800c4e4:	e00c      	b.n	800c500 <__strtok_r+0x4c>
 800c4e6:	b915      	cbnz	r5, 800c4ee <__strtok_r+0x3a>
 800c4e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4ec:	460e      	mov	r6, r1
 800c4ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c4f2:	42ab      	cmp	r3, r5
 800c4f4:	d1f7      	bne.n	800c4e6 <__strtok_r+0x32>
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d0f3      	beq.n	800c4e2 <__strtok_r+0x2e>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c500:	6014      	str	r4, [r2, #0]
 800c502:	e7ed      	b.n	800c4e0 <__strtok_r+0x2c>

0800c504 <__assert_func>:
 800c504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c506:	4614      	mov	r4, r2
 800c508:	461a      	mov	r2, r3
 800c50a:	4b09      	ldr	r3, [pc, #36]	; (800c530 <__assert_func+0x2c>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4605      	mov	r5, r0
 800c510:	68d8      	ldr	r0, [r3, #12]
 800c512:	b14c      	cbz	r4, 800c528 <__assert_func+0x24>
 800c514:	4b07      	ldr	r3, [pc, #28]	; (800c534 <__assert_func+0x30>)
 800c516:	9100      	str	r1, [sp, #0]
 800c518:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c51c:	4906      	ldr	r1, [pc, #24]	; (800c538 <__assert_func+0x34>)
 800c51e:	462b      	mov	r3, r5
 800c520:	f000 fe88 	bl	800d234 <fiprintf>
 800c524:	f002 fb9e 	bl	800ec64 <abort>
 800c528:	4b04      	ldr	r3, [pc, #16]	; (800c53c <__assert_func+0x38>)
 800c52a:	461c      	mov	r4, r3
 800c52c:	e7f3      	b.n	800c516 <__assert_func+0x12>
 800c52e:	bf00      	nop
 800c530:	20000010 	.word	0x20000010
 800c534:	0800f59c 	.word	0x0800f59c
 800c538:	0800f5a9 	.word	0x0800f5a9
 800c53c:	0800f5d7 	.word	0x0800f5d7

0800c540 <quorem>:
 800c540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	6903      	ldr	r3, [r0, #16]
 800c546:	690c      	ldr	r4, [r1, #16]
 800c548:	42a3      	cmp	r3, r4
 800c54a:	4607      	mov	r7, r0
 800c54c:	f2c0 8081 	blt.w	800c652 <quorem+0x112>
 800c550:	3c01      	subs	r4, #1
 800c552:	f101 0814 	add.w	r8, r1, #20
 800c556:	f100 0514 	add.w	r5, r0, #20
 800c55a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c55e:	9301      	str	r3, [sp, #4]
 800c560:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c564:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c568:	3301      	adds	r3, #1
 800c56a:	429a      	cmp	r2, r3
 800c56c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c570:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c574:	fbb2 f6f3 	udiv	r6, r2, r3
 800c578:	d331      	bcc.n	800c5de <quorem+0x9e>
 800c57a:	f04f 0e00 	mov.w	lr, #0
 800c57e:	4640      	mov	r0, r8
 800c580:	46ac      	mov	ip, r5
 800c582:	46f2      	mov	sl, lr
 800c584:	f850 2b04 	ldr.w	r2, [r0], #4
 800c588:	b293      	uxth	r3, r2
 800c58a:	fb06 e303 	mla	r3, r6, r3, lr
 800c58e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c592:	b29b      	uxth	r3, r3
 800c594:	ebaa 0303 	sub.w	r3, sl, r3
 800c598:	f8dc a000 	ldr.w	sl, [ip]
 800c59c:	0c12      	lsrs	r2, r2, #16
 800c59e:	fa13 f38a 	uxtah	r3, r3, sl
 800c5a2:	fb06 e202 	mla	r2, r6, r2, lr
 800c5a6:	9300      	str	r3, [sp, #0]
 800c5a8:	9b00      	ldr	r3, [sp, #0]
 800c5aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5ae:	b292      	uxth	r2, r2
 800c5b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c5b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800c5bc:	4581      	cmp	r9, r0
 800c5be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5c2:	f84c 3b04 	str.w	r3, [ip], #4
 800c5c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c5ca:	d2db      	bcs.n	800c584 <quorem+0x44>
 800c5cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800c5d0:	b92b      	cbnz	r3, 800c5de <quorem+0x9e>
 800c5d2:	9b01      	ldr	r3, [sp, #4]
 800c5d4:	3b04      	subs	r3, #4
 800c5d6:	429d      	cmp	r5, r3
 800c5d8:	461a      	mov	r2, r3
 800c5da:	d32e      	bcc.n	800c63a <quorem+0xfa>
 800c5dc:	613c      	str	r4, [r7, #16]
 800c5de:	4638      	mov	r0, r7
 800c5e0:	f001 fca2 	bl	800df28 <__mcmp>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	db24      	blt.n	800c632 <quorem+0xf2>
 800c5e8:	3601      	adds	r6, #1
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	f04f 0c00 	mov.w	ip, #0
 800c5f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5f4:	f8d0 e000 	ldr.w	lr, [r0]
 800c5f8:	b293      	uxth	r3, r2
 800c5fa:	ebac 0303 	sub.w	r3, ip, r3
 800c5fe:	0c12      	lsrs	r2, r2, #16
 800c600:	fa13 f38e 	uxtah	r3, r3, lr
 800c604:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c612:	45c1      	cmp	r9, r8
 800c614:	f840 3b04 	str.w	r3, [r0], #4
 800c618:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c61c:	d2e8      	bcs.n	800c5f0 <quorem+0xb0>
 800c61e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c626:	b922      	cbnz	r2, 800c632 <quorem+0xf2>
 800c628:	3b04      	subs	r3, #4
 800c62a:	429d      	cmp	r5, r3
 800c62c:	461a      	mov	r2, r3
 800c62e:	d30a      	bcc.n	800c646 <quorem+0x106>
 800c630:	613c      	str	r4, [r7, #16]
 800c632:	4630      	mov	r0, r6
 800c634:	b003      	add	sp, #12
 800c636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63a:	6812      	ldr	r2, [r2, #0]
 800c63c:	3b04      	subs	r3, #4
 800c63e:	2a00      	cmp	r2, #0
 800c640:	d1cc      	bne.n	800c5dc <quorem+0x9c>
 800c642:	3c01      	subs	r4, #1
 800c644:	e7c7      	b.n	800c5d6 <quorem+0x96>
 800c646:	6812      	ldr	r2, [r2, #0]
 800c648:	3b04      	subs	r3, #4
 800c64a:	2a00      	cmp	r2, #0
 800c64c:	d1f0      	bne.n	800c630 <quorem+0xf0>
 800c64e:	3c01      	subs	r4, #1
 800c650:	e7eb      	b.n	800c62a <quorem+0xea>
 800c652:	2000      	movs	r0, #0
 800c654:	e7ee      	b.n	800c634 <quorem+0xf4>
	...

0800c658 <_dtoa_r>:
 800c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	ed2d 8b04 	vpush	{d8-d9}
 800c660:	ec57 6b10 	vmov	r6, r7, d0
 800c664:	b093      	sub	sp, #76	; 0x4c
 800c666:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c668:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c66c:	9106      	str	r1, [sp, #24]
 800c66e:	ee10 aa10 	vmov	sl, s0
 800c672:	4604      	mov	r4, r0
 800c674:	9209      	str	r2, [sp, #36]	; 0x24
 800c676:	930c      	str	r3, [sp, #48]	; 0x30
 800c678:	46bb      	mov	fp, r7
 800c67a:	b975      	cbnz	r5, 800c69a <_dtoa_r+0x42>
 800c67c:	2010      	movs	r0, #16
 800c67e:	f001 f95f 	bl	800d940 <malloc>
 800c682:	4602      	mov	r2, r0
 800c684:	6260      	str	r0, [r4, #36]	; 0x24
 800c686:	b920      	cbnz	r0, 800c692 <_dtoa_r+0x3a>
 800c688:	4ba7      	ldr	r3, [pc, #668]	; (800c928 <_dtoa_r+0x2d0>)
 800c68a:	21ea      	movs	r1, #234	; 0xea
 800c68c:	48a7      	ldr	r0, [pc, #668]	; (800c92c <_dtoa_r+0x2d4>)
 800c68e:	f7ff ff39 	bl	800c504 <__assert_func>
 800c692:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c696:	6005      	str	r5, [r0, #0]
 800c698:	60c5      	str	r5, [r0, #12]
 800c69a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c69c:	6819      	ldr	r1, [r3, #0]
 800c69e:	b151      	cbz	r1, 800c6b6 <_dtoa_r+0x5e>
 800c6a0:	685a      	ldr	r2, [r3, #4]
 800c6a2:	604a      	str	r2, [r1, #4]
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	4093      	lsls	r3, r2
 800c6a8:	608b      	str	r3, [r1, #8]
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f001 f9b0 	bl	800da10 <_Bfree>
 800c6b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	1e3b      	subs	r3, r7, #0
 800c6b8:	bfaa      	itet	ge
 800c6ba:	2300      	movge	r3, #0
 800c6bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c6c0:	f8c8 3000 	strge.w	r3, [r8]
 800c6c4:	4b9a      	ldr	r3, [pc, #616]	; (800c930 <_dtoa_r+0x2d8>)
 800c6c6:	bfbc      	itt	lt
 800c6c8:	2201      	movlt	r2, #1
 800c6ca:	f8c8 2000 	strlt.w	r2, [r8]
 800c6ce:	ea33 030b 	bics.w	r3, r3, fp
 800c6d2:	d11b      	bne.n	800c70c <_dtoa_r+0xb4>
 800c6d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6e0:	4333      	orrs	r3, r6
 800c6e2:	f000 8592 	beq.w	800d20a <_dtoa_r+0xbb2>
 800c6e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6e8:	b963      	cbnz	r3, 800c704 <_dtoa_r+0xac>
 800c6ea:	4b92      	ldr	r3, [pc, #584]	; (800c934 <_dtoa_r+0x2dc>)
 800c6ec:	e022      	b.n	800c734 <_dtoa_r+0xdc>
 800c6ee:	4b92      	ldr	r3, [pc, #584]	; (800c938 <_dtoa_r+0x2e0>)
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	3308      	adds	r3, #8
 800c6f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6f6:	6013      	str	r3, [r2, #0]
 800c6f8:	9801      	ldr	r0, [sp, #4]
 800c6fa:	b013      	add	sp, #76	; 0x4c
 800c6fc:	ecbd 8b04 	vpop	{d8-d9}
 800c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c704:	4b8b      	ldr	r3, [pc, #556]	; (800c934 <_dtoa_r+0x2dc>)
 800c706:	9301      	str	r3, [sp, #4]
 800c708:	3303      	adds	r3, #3
 800c70a:	e7f3      	b.n	800c6f4 <_dtoa_r+0x9c>
 800c70c:	2200      	movs	r2, #0
 800c70e:	2300      	movs	r3, #0
 800c710:	4650      	mov	r0, sl
 800c712:	4659      	mov	r1, fp
 800c714:	f7f4 fa10 	bl	8000b38 <__aeabi_dcmpeq>
 800c718:	ec4b ab19 	vmov	d9, sl, fp
 800c71c:	4680      	mov	r8, r0
 800c71e:	b158      	cbz	r0, 800c738 <_dtoa_r+0xe0>
 800c720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c722:	2301      	movs	r3, #1
 800c724:	6013      	str	r3, [r2, #0]
 800c726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f000 856b 	beq.w	800d204 <_dtoa_r+0xbac>
 800c72e:	4883      	ldr	r0, [pc, #524]	; (800c93c <_dtoa_r+0x2e4>)
 800c730:	6018      	str	r0, [r3, #0]
 800c732:	1e43      	subs	r3, r0, #1
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	e7df      	b.n	800c6f8 <_dtoa_r+0xa0>
 800c738:	ec4b ab10 	vmov	d0, sl, fp
 800c73c:	aa10      	add	r2, sp, #64	; 0x40
 800c73e:	a911      	add	r1, sp, #68	; 0x44
 800c740:	4620      	mov	r0, r4
 800c742:	f001 fd13 	bl	800e16c <__d2b>
 800c746:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c74a:	ee08 0a10 	vmov	s16, r0
 800c74e:	2d00      	cmp	r5, #0
 800c750:	f000 8084 	beq.w	800c85c <_dtoa_r+0x204>
 800c754:	ee19 3a90 	vmov	r3, s19
 800c758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c75c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c760:	4656      	mov	r6, sl
 800c762:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c766:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c76a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c76e:	4b74      	ldr	r3, [pc, #464]	; (800c940 <_dtoa_r+0x2e8>)
 800c770:	2200      	movs	r2, #0
 800c772:	4630      	mov	r0, r6
 800c774:	4639      	mov	r1, r7
 800c776:	f7f3 fdbf 	bl	80002f8 <__aeabi_dsub>
 800c77a:	a365      	add	r3, pc, #404	; (adr r3, 800c910 <_dtoa_r+0x2b8>)
 800c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c780:	f7f3 ff72 	bl	8000668 <__aeabi_dmul>
 800c784:	a364      	add	r3, pc, #400	; (adr r3, 800c918 <_dtoa_r+0x2c0>)
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	f7f3 fdb7 	bl	80002fc <__adddf3>
 800c78e:	4606      	mov	r6, r0
 800c790:	4628      	mov	r0, r5
 800c792:	460f      	mov	r7, r1
 800c794:	f7f3 fefe 	bl	8000594 <__aeabi_i2d>
 800c798:	a361      	add	r3, pc, #388	; (adr r3, 800c920 <_dtoa_r+0x2c8>)
 800c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79e:	f7f3 ff63 	bl	8000668 <__aeabi_dmul>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	4639      	mov	r1, r7
 800c7aa:	f7f3 fda7 	bl	80002fc <__adddf3>
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	460f      	mov	r7, r1
 800c7b2:	f7f4 fa09 	bl	8000bc8 <__aeabi_d2iz>
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	9000      	str	r0, [sp, #0]
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	4630      	mov	r0, r6
 800c7be:	4639      	mov	r1, r7
 800c7c0:	f7f4 f9c4 	bl	8000b4c <__aeabi_dcmplt>
 800c7c4:	b150      	cbz	r0, 800c7dc <_dtoa_r+0x184>
 800c7c6:	9800      	ldr	r0, [sp, #0]
 800c7c8:	f7f3 fee4 	bl	8000594 <__aeabi_i2d>
 800c7cc:	4632      	mov	r2, r6
 800c7ce:	463b      	mov	r3, r7
 800c7d0:	f7f4 f9b2 	bl	8000b38 <__aeabi_dcmpeq>
 800c7d4:	b910      	cbnz	r0, 800c7dc <_dtoa_r+0x184>
 800c7d6:	9b00      	ldr	r3, [sp, #0]
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	9b00      	ldr	r3, [sp, #0]
 800c7de:	2b16      	cmp	r3, #22
 800c7e0:	d85a      	bhi.n	800c898 <_dtoa_r+0x240>
 800c7e2:	9a00      	ldr	r2, [sp, #0]
 800c7e4:	4b57      	ldr	r3, [pc, #348]	; (800c944 <_dtoa_r+0x2ec>)
 800c7e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	ec51 0b19 	vmov	r0, r1, d9
 800c7f2:	f7f4 f9ab 	bl	8000b4c <__aeabi_dcmplt>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d050      	beq.n	800c89c <_dtoa_r+0x244>
 800c7fa:	9b00      	ldr	r3, [sp, #0]
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	2300      	movs	r3, #0
 800c802:	930b      	str	r3, [sp, #44]	; 0x2c
 800c804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c806:	1b5d      	subs	r5, r3, r5
 800c808:	1e6b      	subs	r3, r5, #1
 800c80a:	9305      	str	r3, [sp, #20]
 800c80c:	bf45      	ittet	mi
 800c80e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c812:	9304      	strmi	r3, [sp, #16]
 800c814:	2300      	movpl	r3, #0
 800c816:	2300      	movmi	r3, #0
 800c818:	bf4c      	ite	mi
 800c81a:	9305      	strmi	r3, [sp, #20]
 800c81c:	9304      	strpl	r3, [sp, #16]
 800c81e:	9b00      	ldr	r3, [sp, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	db3d      	blt.n	800c8a0 <_dtoa_r+0x248>
 800c824:	9b05      	ldr	r3, [sp, #20]
 800c826:	9a00      	ldr	r2, [sp, #0]
 800c828:	920a      	str	r2, [sp, #40]	; 0x28
 800c82a:	4413      	add	r3, r2
 800c82c:	9305      	str	r3, [sp, #20]
 800c82e:	2300      	movs	r3, #0
 800c830:	9307      	str	r3, [sp, #28]
 800c832:	9b06      	ldr	r3, [sp, #24]
 800c834:	2b09      	cmp	r3, #9
 800c836:	f200 8089 	bhi.w	800c94c <_dtoa_r+0x2f4>
 800c83a:	2b05      	cmp	r3, #5
 800c83c:	bfc4      	itt	gt
 800c83e:	3b04      	subgt	r3, #4
 800c840:	9306      	strgt	r3, [sp, #24]
 800c842:	9b06      	ldr	r3, [sp, #24]
 800c844:	f1a3 0302 	sub.w	r3, r3, #2
 800c848:	bfcc      	ite	gt
 800c84a:	2500      	movgt	r5, #0
 800c84c:	2501      	movle	r5, #1
 800c84e:	2b03      	cmp	r3, #3
 800c850:	f200 8087 	bhi.w	800c962 <_dtoa_r+0x30a>
 800c854:	e8df f003 	tbb	[pc, r3]
 800c858:	59383a2d 	.word	0x59383a2d
 800c85c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c860:	441d      	add	r5, r3
 800c862:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c866:	2b20      	cmp	r3, #32
 800c868:	bfc1      	itttt	gt
 800c86a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c86e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c872:	fa0b f303 	lslgt.w	r3, fp, r3
 800c876:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c87a:	bfda      	itte	le
 800c87c:	f1c3 0320 	rsble	r3, r3, #32
 800c880:	fa06 f003 	lslle.w	r0, r6, r3
 800c884:	4318      	orrgt	r0, r3
 800c886:	f7f3 fe75 	bl	8000574 <__aeabi_ui2d>
 800c88a:	2301      	movs	r3, #1
 800c88c:	4606      	mov	r6, r0
 800c88e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c892:	3d01      	subs	r5, #1
 800c894:	930e      	str	r3, [sp, #56]	; 0x38
 800c896:	e76a      	b.n	800c76e <_dtoa_r+0x116>
 800c898:	2301      	movs	r3, #1
 800c89a:	e7b2      	b.n	800c802 <_dtoa_r+0x1aa>
 800c89c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c89e:	e7b1      	b.n	800c804 <_dtoa_r+0x1ac>
 800c8a0:	9b04      	ldr	r3, [sp, #16]
 800c8a2:	9a00      	ldr	r2, [sp, #0]
 800c8a4:	1a9b      	subs	r3, r3, r2
 800c8a6:	9304      	str	r3, [sp, #16]
 800c8a8:	4253      	negs	r3, r2
 800c8aa:	9307      	str	r3, [sp, #28]
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c8b0:	e7bf      	b.n	800c832 <_dtoa_r+0x1da>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	9308      	str	r3, [sp, #32]
 800c8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	dc55      	bgt.n	800c968 <_dtoa_r+0x310>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	9209      	str	r2, [sp, #36]	; 0x24
 800c8c6:	e00c      	b.n	800c8e2 <_dtoa_r+0x28a>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e7f3      	b.n	800c8b4 <_dtoa_r+0x25c>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8d0:	9308      	str	r3, [sp, #32]
 800c8d2:	9b00      	ldr	r3, [sp, #0]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	9302      	str	r3, [sp, #8]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	9303      	str	r3, [sp, #12]
 800c8de:	bfb8      	it	lt
 800c8e0:	2301      	movlt	r3, #1
 800c8e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	6042      	str	r2, [r0, #4]
 800c8e8:	2204      	movs	r2, #4
 800c8ea:	f102 0614 	add.w	r6, r2, #20
 800c8ee:	429e      	cmp	r6, r3
 800c8f0:	6841      	ldr	r1, [r0, #4]
 800c8f2:	d93d      	bls.n	800c970 <_dtoa_r+0x318>
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f001 f84b 	bl	800d990 <_Balloc>
 800c8fa:	9001      	str	r0, [sp, #4]
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d13b      	bne.n	800c978 <_dtoa_r+0x320>
 800c900:	4b11      	ldr	r3, [pc, #68]	; (800c948 <_dtoa_r+0x2f0>)
 800c902:	4602      	mov	r2, r0
 800c904:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c908:	e6c0      	b.n	800c68c <_dtoa_r+0x34>
 800c90a:	2301      	movs	r3, #1
 800c90c:	e7df      	b.n	800c8ce <_dtoa_r+0x276>
 800c90e:	bf00      	nop
 800c910:	636f4361 	.word	0x636f4361
 800c914:	3fd287a7 	.word	0x3fd287a7
 800c918:	8b60c8b3 	.word	0x8b60c8b3
 800c91c:	3fc68a28 	.word	0x3fc68a28
 800c920:	509f79fb 	.word	0x509f79fb
 800c924:	3fd34413 	.word	0x3fd34413
 800c928:	0800f528 	.word	0x0800f528
 800c92c:	0800f5e5 	.word	0x0800f5e5
 800c930:	7ff00000 	.word	0x7ff00000
 800c934:	0800f5e1 	.word	0x0800f5e1
 800c938:	0800f5d8 	.word	0x0800f5d8
 800c93c:	0800f4b5 	.word	0x0800f4b5
 800c940:	3ff80000 	.word	0x3ff80000
 800c944:	0800f750 	.word	0x0800f750
 800c948:	0800f640 	.word	0x0800f640
 800c94c:	2501      	movs	r5, #1
 800c94e:	2300      	movs	r3, #0
 800c950:	9306      	str	r3, [sp, #24]
 800c952:	9508      	str	r5, [sp, #32]
 800c954:	f04f 33ff 	mov.w	r3, #4294967295
 800c958:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c95c:	2200      	movs	r2, #0
 800c95e:	2312      	movs	r3, #18
 800c960:	e7b0      	b.n	800c8c4 <_dtoa_r+0x26c>
 800c962:	2301      	movs	r3, #1
 800c964:	9308      	str	r3, [sp, #32]
 800c966:	e7f5      	b.n	800c954 <_dtoa_r+0x2fc>
 800c968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c96a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c96e:	e7b8      	b.n	800c8e2 <_dtoa_r+0x28a>
 800c970:	3101      	adds	r1, #1
 800c972:	6041      	str	r1, [r0, #4]
 800c974:	0052      	lsls	r2, r2, #1
 800c976:	e7b8      	b.n	800c8ea <_dtoa_r+0x292>
 800c978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c97a:	9a01      	ldr	r2, [sp, #4]
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	9b03      	ldr	r3, [sp, #12]
 800c980:	2b0e      	cmp	r3, #14
 800c982:	f200 809d 	bhi.w	800cac0 <_dtoa_r+0x468>
 800c986:	2d00      	cmp	r5, #0
 800c988:	f000 809a 	beq.w	800cac0 <_dtoa_r+0x468>
 800c98c:	9b00      	ldr	r3, [sp, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	dd32      	ble.n	800c9f8 <_dtoa_r+0x3a0>
 800c992:	4ab7      	ldr	r2, [pc, #732]	; (800cc70 <_dtoa_r+0x618>)
 800c994:	f003 030f 	and.w	r3, r3, #15
 800c998:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c99c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9a0:	9b00      	ldr	r3, [sp, #0]
 800c9a2:	05d8      	lsls	r0, r3, #23
 800c9a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c9a8:	d516      	bpl.n	800c9d8 <_dtoa_r+0x380>
 800c9aa:	4bb2      	ldr	r3, [pc, #712]	; (800cc74 <_dtoa_r+0x61c>)
 800c9ac:	ec51 0b19 	vmov	r0, r1, d9
 800c9b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9b4:	f7f3 ff82 	bl	80008bc <__aeabi_ddiv>
 800c9b8:	f007 070f 	and.w	r7, r7, #15
 800c9bc:	4682      	mov	sl, r0
 800c9be:	468b      	mov	fp, r1
 800c9c0:	2503      	movs	r5, #3
 800c9c2:	4eac      	ldr	r6, [pc, #688]	; (800cc74 <_dtoa_r+0x61c>)
 800c9c4:	b957      	cbnz	r7, 800c9dc <_dtoa_r+0x384>
 800c9c6:	4642      	mov	r2, r8
 800c9c8:	464b      	mov	r3, r9
 800c9ca:	4650      	mov	r0, sl
 800c9cc:	4659      	mov	r1, fp
 800c9ce:	f7f3 ff75 	bl	80008bc <__aeabi_ddiv>
 800c9d2:	4682      	mov	sl, r0
 800c9d4:	468b      	mov	fp, r1
 800c9d6:	e028      	b.n	800ca2a <_dtoa_r+0x3d2>
 800c9d8:	2502      	movs	r5, #2
 800c9da:	e7f2      	b.n	800c9c2 <_dtoa_r+0x36a>
 800c9dc:	07f9      	lsls	r1, r7, #31
 800c9de:	d508      	bpl.n	800c9f2 <_dtoa_r+0x39a>
 800c9e0:	4640      	mov	r0, r8
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c9e8:	f7f3 fe3e 	bl	8000668 <__aeabi_dmul>
 800c9ec:	3501      	adds	r5, #1
 800c9ee:	4680      	mov	r8, r0
 800c9f0:	4689      	mov	r9, r1
 800c9f2:	107f      	asrs	r7, r7, #1
 800c9f4:	3608      	adds	r6, #8
 800c9f6:	e7e5      	b.n	800c9c4 <_dtoa_r+0x36c>
 800c9f8:	f000 809b 	beq.w	800cb32 <_dtoa_r+0x4da>
 800c9fc:	9b00      	ldr	r3, [sp, #0]
 800c9fe:	4f9d      	ldr	r7, [pc, #628]	; (800cc74 <_dtoa_r+0x61c>)
 800ca00:	425e      	negs	r6, r3
 800ca02:	4b9b      	ldr	r3, [pc, #620]	; (800cc70 <_dtoa_r+0x618>)
 800ca04:	f006 020f 	and.w	r2, r6, #15
 800ca08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	ec51 0b19 	vmov	r0, r1, d9
 800ca14:	f7f3 fe28 	bl	8000668 <__aeabi_dmul>
 800ca18:	1136      	asrs	r6, r6, #4
 800ca1a:	4682      	mov	sl, r0
 800ca1c:	468b      	mov	fp, r1
 800ca1e:	2300      	movs	r3, #0
 800ca20:	2502      	movs	r5, #2
 800ca22:	2e00      	cmp	r6, #0
 800ca24:	d17a      	bne.n	800cb1c <_dtoa_r+0x4c4>
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1d3      	bne.n	800c9d2 <_dtoa_r+0x37a>
 800ca2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f000 8082 	beq.w	800cb36 <_dtoa_r+0x4de>
 800ca32:	4b91      	ldr	r3, [pc, #580]	; (800cc78 <_dtoa_r+0x620>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	4650      	mov	r0, sl
 800ca38:	4659      	mov	r1, fp
 800ca3a:	f7f4 f887 	bl	8000b4c <__aeabi_dcmplt>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d079      	beq.n	800cb36 <_dtoa_r+0x4de>
 800ca42:	9b03      	ldr	r3, [sp, #12]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d076      	beq.n	800cb36 <_dtoa_r+0x4de>
 800ca48:	9b02      	ldr	r3, [sp, #8]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	dd36      	ble.n	800cabc <_dtoa_r+0x464>
 800ca4e:	9b00      	ldr	r3, [sp, #0]
 800ca50:	4650      	mov	r0, sl
 800ca52:	4659      	mov	r1, fp
 800ca54:	1e5f      	subs	r7, r3, #1
 800ca56:	2200      	movs	r2, #0
 800ca58:	4b88      	ldr	r3, [pc, #544]	; (800cc7c <_dtoa_r+0x624>)
 800ca5a:	f7f3 fe05 	bl	8000668 <__aeabi_dmul>
 800ca5e:	9e02      	ldr	r6, [sp, #8]
 800ca60:	4682      	mov	sl, r0
 800ca62:	468b      	mov	fp, r1
 800ca64:	3501      	adds	r5, #1
 800ca66:	4628      	mov	r0, r5
 800ca68:	f7f3 fd94 	bl	8000594 <__aeabi_i2d>
 800ca6c:	4652      	mov	r2, sl
 800ca6e:	465b      	mov	r3, fp
 800ca70:	f7f3 fdfa 	bl	8000668 <__aeabi_dmul>
 800ca74:	4b82      	ldr	r3, [pc, #520]	; (800cc80 <_dtoa_r+0x628>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	f7f3 fc40 	bl	80002fc <__adddf3>
 800ca7c:	46d0      	mov	r8, sl
 800ca7e:	46d9      	mov	r9, fp
 800ca80:	4682      	mov	sl, r0
 800ca82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ca86:	2e00      	cmp	r6, #0
 800ca88:	d158      	bne.n	800cb3c <_dtoa_r+0x4e4>
 800ca8a:	4b7e      	ldr	r3, [pc, #504]	; (800cc84 <_dtoa_r+0x62c>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4640      	mov	r0, r8
 800ca90:	4649      	mov	r1, r9
 800ca92:	f7f3 fc31 	bl	80002f8 <__aeabi_dsub>
 800ca96:	4652      	mov	r2, sl
 800ca98:	465b      	mov	r3, fp
 800ca9a:	4680      	mov	r8, r0
 800ca9c:	4689      	mov	r9, r1
 800ca9e:	f7f4 f873 	bl	8000b88 <__aeabi_dcmpgt>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	f040 8295 	bne.w	800cfd2 <_dtoa_r+0x97a>
 800caa8:	4652      	mov	r2, sl
 800caaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800caae:	4640      	mov	r0, r8
 800cab0:	4649      	mov	r1, r9
 800cab2:	f7f4 f84b 	bl	8000b4c <__aeabi_dcmplt>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	f040 8289 	bne.w	800cfce <_dtoa_r+0x976>
 800cabc:	ec5b ab19 	vmov	sl, fp, d9
 800cac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f2c0 8148 	blt.w	800cd58 <_dtoa_r+0x700>
 800cac8:	9a00      	ldr	r2, [sp, #0]
 800caca:	2a0e      	cmp	r2, #14
 800cacc:	f300 8144 	bgt.w	800cd58 <_dtoa_r+0x700>
 800cad0:	4b67      	ldr	r3, [pc, #412]	; (800cc70 <_dtoa_r+0x618>)
 800cad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cad6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f280 80d5 	bge.w	800cc8c <_dtoa_r+0x634>
 800cae2:	9b03      	ldr	r3, [sp, #12]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f300 80d1 	bgt.w	800cc8c <_dtoa_r+0x634>
 800caea:	f040 826f 	bne.w	800cfcc <_dtoa_r+0x974>
 800caee:	4b65      	ldr	r3, [pc, #404]	; (800cc84 <_dtoa_r+0x62c>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	4640      	mov	r0, r8
 800caf4:	4649      	mov	r1, r9
 800caf6:	f7f3 fdb7 	bl	8000668 <__aeabi_dmul>
 800cafa:	4652      	mov	r2, sl
 800cafc:	465b      	mov	r3, fp
 800cafe:	f7f4 f839 	bl	8000b74 <__aeabi_dcmpge>
 800cb02:	9e03      	ldr	r6, [sp, #12]
 800cb04:	4637      	mov	r7, r6
 800cb06:	2800      	cmp	r0, #0
 800cb08:	f040 8245 	bne.w	800cf96 <_dtoa_r+0x93e>
 800cb0c:	9d01      	ldr	r5, [sp, #4]
 800cb0e:	2331      	movs	r3, #49	; 0x31
 800cb10:	f805 3b01 	strb.w	r3, [r5], #1
 800cb14:	9b00      	ldr	r3, [sp, #0]
 800cb16:	3301      	adds	r3, #1
 800cb18:	9300      	str	r3, [sp, #0]
 800cb1a:	e240      	b.n	800cf9e <_dtoa_r+0x946>
 800cb1c:	07f2      	lsls	r2, r6, #31
 800cb1e:	d505      	bpl.n	800cb2c <_dtoa_r+0x4d4>
 800cb20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb24:	f7f3 fda0 	bl	8000668 <__aeabi_dmul>
 800cb28:	3501      	adds	r5, #1
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	1076      	asrs	r6, r6, #1
 800cb2e:	3708      	adds	r7, #8
 800cb30:	e777      	b.n	800ca22 <_dtoa_r+0x3ca>
 800cb32:	2502      	movs	r5, #2
 800cb34:	e779      	b.n	800ca2a <_dtoa_r+0x3d2>
 800cb36:	9f00      	ldr	r7, [sp, #0]
 800cb38:	9e03      	ldr	r6, [sp, #12]
 800cb3a:	e794      	b.n	800ca66 <_dtoa_r+0x40e>
 800cb3c:	9901      	ldr	r1, [sp, #4]
 800cb3e:	4b4c      	ldr	r3, [pc, #304]	; (800cc70 <_dtoa_r+0x618>)
 800cb40:	4431      	add	r1, r6
 800cb42:	910d      	str	r1, [sp, #52]	; 0x34
 800cb44:	9908      	ldr	r1, [sp, #32]
 800cb46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb4e:	2900      	cmp	r1, #0
 800cb50:	d043      	beq.n	800cbda <_dtoa_r+0x582>
 800cb52:	494d      	ldr	r1, [pc, #308]	; (800cc88 <_dtoa_r+0x630>)
 800cb54:	2000      	movs	r0, #0
 800cb56:	f7f3 feb1 	bl	80008bc <__aeabi_ddiv>
 800cb5a:	4652      	mov	r2, sl
 800cb5c:	465b      	mov	r3, fp
 800cb5e:	f7f3 fbcb 	bl	80002f8 <__aeabi_dsub>
 800cb62:	9d01      	ldr	r5, [sp, #4]
 800cb64:	4682      	mov	sl, r0
 800cb66:	468b      	mov	fp, r1
 800cb68:	4649      	mov	r1, r9
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	f7f4 f82c 	bl	8000bc8 <__aeabi_d2iz>
 800cb70:	4606      	mov	r6, r0
 800cb72:	f7f3 fd0f 	bl	8000594 <__aeabi_i2d>
 800cb76:	4602      	mov	r2, r0
 800cb78:	460b      	mov	r3, r1
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	4649      	mov	r1, r9
 800cb7e:	f7f3 fbbb 	bl	80002f8 <__aeabi_dsub>
 800cb82:	3630      	adds	r6, #48	; 0x30
 800cb84:	f805 6b01 	strb.w	r6, [r5], #1
 800cb88:	4652      	mov	r2, sl
 800cb8a:	465b      	mov	r3, fp
 800cb8c:	4680      	mov	r8, r0
 800cb8e:	4689      	mov	r9, r1
 800cb90:	f7f3 ffdc 	bl	8000b4c <__aeabi_dcmplt>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d163      	bne.n	800cc60 <_dtoa_r+0x608>
 800cb98:	4642      	mov	r2, r8
 800cb9a:	464b      	mov	r3, r9
 800cb9c:	4936      	ldr	r1, [pc, #216]	; (800cc78 <_dtoa_r+0x620>)
 800cb9e:	2000      	movs	r0, #0
 800cba0:	f7f3 fbaa 	bl	80002f8 <__aeabi_dsub>
 800cba4:	4652      	mov	r2, sl
 800cba6:	465b      	mov	r3, fp
 800cba8:	f7f3 ffd0 	bl	8000b4c <__aeabi_dcmplt>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	f040 80b5 	bne.w	800cd1c <_dtoa_r+0x6c4>
 800cbb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbb4:	429d      	cmp	r5, r3
 800cbb6:	d081      	beq.n	800cabc <_dtoa_r+0x464>
 800cbb8:	4b30      	ldr	r3, [pc, #192]	; (800cc7c <_dtoa_r+0x624>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	4650      	mov	r0, sl
 800cbbe:	4659      	mov	r1, fp
 800cbc0:	f7f3 fd52 	bl	8000668 <__aeabi_dmul>
 800cbc4:	4b2d      	ldr	r3, [pc, #180]	; (800cc7c <_dtoa_r+0x624>)
 800cbc6:	4682      	mov	sl, r0
 800cbc8:	468b      	mov	fp, r1
 800cbca:	4640      	mov	r0, r8
 800cbcc:	4649      	mov	r1, r9
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f7f3 fd4a 	bl	8000668 <__aeabi_dmul>
 800cbd4:	4680      	mov	r8, r0
 800cbd6:	4689      	mov	r9, r1
 800cbd8:	e7c6      	b.n	800cb68 <_dtoa_r+0x510>
 800cbda:	4650      	mov	r0, sl
 800cbdc:	4659      	mov	r1, fp
 800cbde:	f7f3 fd43 	bl	8000668 <__aeabi_dmul>
 800cbe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbe4:	9d01      	ldr	r5, [sp, #4]
 800cbe6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbe8:	4682      	mov	sl, r0
 800cbea:	468b      	mov	fp, r1
 800cbec:	4649      	mov	r1, r9
 800cbee:	4640      	mov	r0, r8
 800cbf0:	f7f3 ffea 	bl	8000bc8 <__aeabi_d2iz>
 800cbf4:	4606      	mov	r6, r0
 800cbf6:	f7f3 fccd 	bl	8000594 <__aeabi_i2d>
 800cbfa:	3630      	adds	r6, #48	; 0x30
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	460b      	mov	r3, r1
 800cc00:	4640      	mov	r0, r8
 800cc02:	4649      	mov	r1, r9
 800cc04:	f7f3 fb78 	bl	80002f8 <__aeabi_dsub>
 800cc08:	f805 6b01 	strb.w	r6, [r5], #1
 800cc0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc0e:	429d      	cmp	r5, r3
 800cc10:	4680      	mov	r8, r0
 800cc12:	4689      	mov	r9, r1
 800cc14:	f04f 0200 	mov.w	r2, #0
 800cc18:	d124      	bne.n	800cc64 <_dtoa_r+0x60c>
 800cc1a:	4b1b      	ldr	r3, [pc, #108]	; (800cc88 <_dtoa_r+0x630>)
 800cc1c:	4650      	mov	r0, sl
 800cc1e:	4659      	mov	r1, fp
 800cc20:	f7f3 fb6c 	bl	80002fc <__adddf3>
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	4640      	mov	r0, r8
 800cc2a:	4649      	mov	r1, r9
 800cc2c:	f7f3 ffac 	bl	8000b88 <__aeabi_dcmpgt>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d173      	bne.n	800cd1c <_dtoa_r+0x6c4>
 800cc34:	4652      	mov	r2, sl
 800cc36:	465b      	mov	r3, fp
 800cc38:	4913      	ldr	r1, [pc, #76]	; (800cc88 <_dtoa_r+0x630>)
 800cc3a:	2000      	movs	r0, #0
 800cc3c:	f7f3 fb5c 	bl	80002f8 <__aeabi_dsub>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	4640      	mov	r0, r8
 800cc46:	4649      	mov	r1, r9
 800cc48:	f7f3 ff80 	bl	8000b4c <__aeabi_dcmplt>
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f43f af35 	beq.w	800cabc <_dtoa_r+0x464>
 800cc52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc54:	1e6b      	subs	r3, r5, #1
 800cc56:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc5c:	2b30      	cmp	r3, #48	; 0x30
 800cc5e:	d0f8      	beq.n	800cc52 <_dtoa_r+0x5fa>
 800cc60:	9700      	str	r7, [sp, #0]
 800cc62:	e049      	b.n	800ccf8 <_dtoa_r+0x6a0>
 800cc64:	4b05      	ldr	r3, [pc, #20]	; (800cc7c <_dtoa_r+0x624>)
 800cc66:	f7f3 fcff 	bl	8000668 <__aeabi_dmul>
 800cc6a:	4680      	mov	r8, r0
 800cc6c:	4689      	mov	r9, r1
 800cc6e:	e7bd      	b.n	800cbec <_dtoa_r+0x594>
 800cc70:	0800f750 	.word	0x0800f750
 800cc74:	0800f728 	.word	0x0800f728
 800cc78:	3ff00000 	.word	0x3ff00000
 800cc7c:	40240000 	.word	0x40240000
 800cc80:	401c0000 	.word	0x401c0000
 800cc84:	40140000 	.word	0x40140000
 800cc88:	3fe00000 	.word	0x3fe00000
 800cc8c:	9d01      	ldr	r5, [sp, #4]
 800cc8e:	4656      	mov	r6, sl
 800cc90:	465f      	mov	r7, fp
 800cc92:	4642      	mov	r2, r8
 800cc94:	464b      	mov	r3, r9
 800cc96:	4630      	mov	r0, r6
 800cc98:	4639      	mov	r1, r7
 800cc9a:	f7f3 fe0f 	bl	80008bc <__aeabi_ddiv>
 800cc9e:	f7f3 ff93 	bl	8000bc8 <__aeabi_d2iz>
 800cca2:	4682      	mov	sl, r0
 800cca4:	f7f3 fc76 	bl	8000594 <__aeabi_i2d>
 800cca8:	4642      	mov	r2, r8
 800ccaa:	464b      	mov	r3, r9
 800ccac:	f7f3 fcdc 	bl	8000668 <__aeabi_dmul>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ccbc:	f7f3 fb1c 	bl	80002f8 <__aeabi_dsub>
 800ccc0:	f805 6b01 	strb.w	r6, [r5], #1
 800ccc4:	9e01      	ldr	r6, [sp, #4]
 800ccc6:	9f03      	ldr	r7, [sp, #12]
 800ccc8:	1bae      	subs	r6, r5, r6
 800ccca:	42b7      	cmp	r7, r6
 800cccc:	4602      	mov	r2, r0
 800ccce:	460b      	mov	r3, r1
 800ccd0:	d135      	bne.n	800cd3e <_dtoa_r+0x6e6>
 800ccd2:	f7f3 fb13 	bl	80002fc <__adddf3>
 800ccd6:	4642      	mov	r2, r8
 800ccd8:	464b      	mov	r3, r9
 800ccda:	4606      	mov	r6, r0
 800ccdc:	460f      	mov	r7, r1
 800ccde:	f7f3 ff53 	bl	8000b88 <__aeabi_dcmpgt>
 800cce2:	b9d0      	cbnz	r0, 800cd1a <_dtoa_r+0x6c2>
 800cce4:	4642      	mov	r2, r8
 800cce6:	464b      	mov	r3, r9
 800cce8:	4630      	mov	r0, r6
 800ccea:	4639      	mov	r1, r7
 800ccec:	f7f3 ff24 	bl	8000b38 <__aeabi_dcmpeq>
 800ccf0:	b110      	cbz	r0, 800ccf8 <_dtoa_r+0x6a0>
 800ccf2:	f01a 0f01 	tst.w	sl, #1
 800ccf6:	d110      	bne.n	800cd1a <_dtoa_r+0x6c2>
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	ee18 1a10 	vmov	r1, s16
 800ccfe:	f000 fe87 	bl	800da10 <_Bfree>
 800cd02:	2300      	movs	r3, #0
 800cd04:	9800      	ldr	r0, [sp, #0]
 800cd06:	702b      	strb	r3, [r5, #0]
 800cd08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	6018      	str	r0, [r3, #0]
 800cd0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f43f acf1 	beq.w	800c6f8 <_dtoa_r+0xa0>
 800cd16:	601d      	str	r5, [r3, #0]
 800cd18:	e4ee      	b.n	800c6f8 <_dtoa_r+0xa0>
 800cd1a:	9f00      	ldr	r7, [sp, #0]
 800cd1c:	462b      	mov	r3, r5
 800cd1e:	461d      	mov	r5, r3
 800cd20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd24:	2a39      	cmp	r2, #57	; 0x39
 800cd26:	d106      	bne.n	800cd36 <_dtoa_r+0x6de>
 800cd28:	9a01      	ldr	r2, [sp, #4]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d1f7      	bne.n	800cd1e <_dtoa_r+0x6c6>
 800cd2e:	9901      	ldr	r1, [sp, #4]
 800cd30:	2230      	movs	r2, #48	; 0x30
 800cd32:	3701      	adds	r7, #1
 800cd34:	700a      	strb	r2, [r1, #0]
 800cd36:	781a      	ldrb	r2, [r3, #0]
 800cd38:	3201      	adds	r2, #1
 800cd3a:	701a      	strb	r2, [r3, #0]
 800cd3c:	e790      	b.n	800cc60 <_dtoa_r+0x608>
 800cd3e:	4ba6      	ldr	r3, [pc, #664]	; (800cfd8 <_dtoa_r+0x980>)
 800cd40:	2200      	movs	r2, #0
 800cd42:	f7f3 fc91 	bl	8000668 <__aeabi_dmul>
 800cd46:	2200      	movs	r2, #0
 800cd48:	2300      	movs	r3, #0
 800cd4a:	4606      	mov	r6, r0
 800cd4c:	460f      	mov	r7, r1
 800cd4e:	f7f3 fef3 	bl	8000b38 <__aeabi_dcmpeq>
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d09d      	beq.n	800cc92 <_dtoa_r+0x63a>
 800cd56:	e7cf      	b.n	800ccf8 <_dtoa_r+0x6a0>
 800cd58:	9a08      	ldr	r2, [sp, #32]
 800cd5a:	2a00      	cmp	r2, #0
 800cd5c:	f000 80d7 	beq.w	800cf0e <_dtoa_r+0x8b6>
 800cd60:	9a06      	ldr	r2, [sp, #24]
 800cd62:	2a01      	cmp	r2, #1
 800cd64:	f300 80ba 	bgt.w	800cedc <_dtoa_r+0x884>
 800cd68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd6a:	2a00      	cmp	r2, #0
 800cd6c:	f000 80b2 	beq.w	800ced4 <_dtoa_r+0x87c>
 800cd70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd74:	9e07      	ldr	r6, [sp, #28]
 800cd76:	9d04      	ldr	r5, [sp, #16]
 800cd78:	9a04      	ldr	r2, [sp, #16]
 800cd7a:	441a      	add	r2, r3
 800cd7c:	9204      	str	r2, [sp, #16]
 800cd7e:	9a05      	ldr	r2, [sp, #20]
 800cd80:	2101      	movs	r1, #1
 800cd82:	441a      	add	r2, r3
 800cd84:	4620      	mov	r0, r4
 800cd86:	9205      	str	r2, [sp, #20]
 800cd88:	f000 ff44 	bl	800dc14 <__i2b>
 800cd8c:	4607      	mov	r7, r0
 800cd8e:	2d00      	cmp	r5, #0
 800cd90:	dd0c      	ble.n	800cdac <_dtoa_r+0x754>
 800cd92:	9b05      	ldr	r3, [sp, #20]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	dd09      	ble.n	800cdac <_dtoa_r+0x754>
 800cd98:	42ab      	cmp	r3, r5
 800cd9a:	9a04      	ldr	r2, [sp, #16]
 800cd9c:	bfa8      	it	ge
 800cd9e:	462b      	movge	r3, r5
 800cda0:	1ad2      	subs	r2, r2, r3
 800cda2:	9204      	str	r2, [sp, #16]
 800cda4:	9a05      	ldr	r2, [sp, #20]
 800cda6:	1aed      	subs	r5, r5, r3
 800cda8:	1ad3      	subs	r3, r2, r3
 800cdaa:	9305      	str	r3, [sp, #20]
 800cdac:	9b07      	ldr	r3, [sp, #28]
 800cdae:	b31b      	cbz	r3, 800cdf8 <_dtoa_r+0x7a0>
 800cdb0:	9b08      	ldr	r3, [sp, #32]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f000 80af 	beq.w	800cf16 <_dtoa_r+0x8be>
 800cdb8:	2e00      	cmp	r6, #0
 800cdba:	dd13      	ble.n	800cde4 <_dtoa_r+0x78c>
 800cdbc:	4639      	mov	r1, r7
 800cdbe:	4632      	mov	r2, r6
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f000 ffe7 	bl	800dd94 <__pow5mult>
 800cdc6:	ee18 2a10 	vmov	r2, s16
 800cdca:	4601      	mov	r1, r0
 800cdcc:	4607      	mov	r7, r0
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f000 ff36 	bl	800dc40 <__multiply>
 800cdd4:	ee18 1a10 	vmov	r1, s16
 800cdd8:	4680      	mov	r8, r0
 800cdda:	4620      	mov	r0, r4
 800cddc:	f000 fe18 	bl	800da10 <_Bfree>
 800cde0:	ee08 8a10 	vmov	s16, r8
 800cde4:	9b07      	ldr	r3, [sp, #28]
 800cde6:	1b9a      	subs	r2, r3, r6
 800cde8:	d006      	beq.n	800cdf8 <_dtoa_r+0x7a0>
 800cdea:	ee18 1a10 	vmov	r1, s16
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f000 ffd0 	bl	800dd94 <__pow5mult>
 800cdf4:	ee08 0a10 	vmov	s16, r0
 800cdf8:	2101      	movs	r1, #1
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	f000 ff0a 	bl	800dc14 <__i2b>
 800ce00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	4606      	mov	r6, r0
 800ce06:	f340 8088 	ble.w	800cf1a <_dtoa_r+0x8c2>
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	4601      	mov	r1, r0
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f000 ffc0 	bl	800dd94 <__pow5mult>
 800ce14:	9b06      	ldr	r3, [sp, #24]
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	4606      	mov	r6, r0
 800ce1a:	f340 8081 	ble.w	800cf20 <_dtoa_r+0x8c8>
 800ce1e:	f04f 0800 	mov.w	r8, #0
 800ce22:	6933      	ldr	r3, [r6, #16]
 800ce24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce28:	6918      	ldr	r0, [r3, #16]
 800ce2a:	f000 fea3 	bl	800db74 <__hi0bits>
 800ce2e:	f1c0 0020 	rsb	r0, r0, #32
 800ce32:	9b05      	ldr	r3, [sp, #20]
 800ce34:	4418      	add	r0, r3
 800ce36:	f010 001f 	ands.w	r0, r0, #31
 800ce3a:	f000 8092 	beq.w	800cf62 <_dtoa_r+0x90a>
 800ce3e:	f1c0 0320 	rsb	r3, r0, #32
 800ce42:	2b04      	cmp	r3, #4
 800ce44:	f340 808a 	ble.w	800cf5c <_dtoa_r+0x904>
 800ce48:	f1c0 001c 	rsb	r0, r0, #28
 800ce4c:	9b04      	ldr	r3, [sp, #16]
 800ce4e:	4403      	add	r3, r0
 800ce50:	9304      	str	r3, [sp, #16]
 800ce52:	9b05      	ldr	r3, [sp, #20]
 800ce54:	4403      	add	r3, r0
 800ce56:	4405      	add	r5, r0
 800ce58:	9305      	str	r3, [sp, #20]
 800ce5a:	9b04      	ldr	r3, [sp, #16]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	dd07      	ble.n	800ce70 <_dtoa_r+0x818>
 800ce60:	ee18 1a10 	vmov	r1, s16
 800ce64:	461a      	mov	r2, r3
 800ce66:	4620      	mov	r0, r4
 800ce68:	f000 ffee 	bl	800de48 <__lshift>
 800ce6c:	ee08 0a10 	vmov	s16, r0
 800ce70:	9b05      	ldr	r3, [sp, #20]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	dd05      	ble.n	800ce82 <_dtoa_r+0x82a>
 800ce76:	4631      	mov	r1, r6
 800ce78:	461a      	mov	r2, r3
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 ffe4 	bl	800de48 <__lshift>
 800ce80:	4606      	mov	r6, r0
 800ce82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d06e      	beq.n	800cf66 <_dtoa_r+0x90e>
 800ce88:	ee18 0a10 	vmov	r0, s16
 800ce8c:	4631      	mov	r1, r6
 800ce8e:	f001 f84b 	bl	800df28 <__mcmp>
 800ce92:	2800      	cmp	r0, #0
 800ce94:	da67      	bge.n	800cf66 <_dtoa_r+0x90e>
 800ce96:	9b00      	ldr	r3, [sp, #0]
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	ee18 1a10 	vmov	r1, s16
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	220a      	movs	r2, #10
 800cea2:	2300      	movs	r3, #0
 800cea4:	4620      	mov	r0, r4
 800cea6:	f000 fdd5 	bl	800da54 <__multadd>
 800ceaa:	9b08      	ldr	r3, [sp, #32]
 800ceac:	ee08 0a10 	vmov	s16, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f000 81b1 	beq.w	800d218 <_dtoa_r+0xbc0>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	4639      	mov	r1, r7
 800ceba:	220a      	movs	r2, #10
 800cebc:	4620      	mov	r0, r4
 800cebe:	f000 fdc9 	bl	800da54 <__multadd>
 800cec2:	9b02      	ldr	r3, [sp, #8]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	4607      	mov	r7, r0
 800cec8:	f300 808e 	bgt.w	800cfe8 <_dtoa_r+0x990>
 800cecc:	9b06      	ldr	r3, [sp, #24]
 800cece:	2b02      	cmp	r3, #2
 800ced0:	dc51      	bgt.n	800cf76 <_dtoa_r+0x91e>
 800ced2:	e089      	b.n	800cfe8 <_dtoa_r+0x990>
 800ced4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ced6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ceda:	e74b      	b.n	800cd74 <_dtoa_r+0x71c>
 800cedc:	9b03      	ldr	r3, [sp, #12]
 800cede:	1e5e      	subs	r6, r3, #1
 800cee0:	9b07      	ldr	r3, [sp, #28]
 800cee2:	42b3      	cmp	r3, r6
 800cee4:	bfbf      	itttt	lt
 800cee6:	9b07      	ldrlt	r3, [sp, #28]
 800cee8:	9607      	strlt	r6, [sp, #28]
 800ceea:	1af2      	sublt	r2, r6, r3
 800ceec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ceee:	bfb6      	itet	lt
 800cef0:	189b      	addlt	r3, r3, r2
 800cef2:	1b9e      	subge	r6, r3, r6
 800cef4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cef6:	9b03      	ldr	r3, [sp, #12]
 800cef8:	bfb8      	it	lt
 800cefa:	2600      	movlt	r6, #0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	bfb7      	itett	lt
 800cf00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cf04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cf08:	1a9d      	sublt	r5, r3, r2
 800cf0a:	2300      	movlt	r3, #0
 800cf0c:	e734      	b.n	800cd78 <_dtoa_r+0x720>
 800cf0e:	9e07      	ldr	r6, [sp, #28]
 800cf10:	9d04      	ldr	r5, [sp, #16]
 800cf12:	9f08      	ldr	r7, [sp, #32]
 800cf14:	e73b      	b.n	800cd8e <_dtoa_r+0x736>
 800cf16:	9a07      	ldr	r2, [sp, #28]
 800cf18:	e767      	b.n	800cdea <_dtoa_r+0x792>
 800cf1a:	9b06      	ldr	r3, [sp, #24]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	dc18      	bgt.n	800cf52 <_dtoa_r+0x8fa>
 800cf20:	f1ba 0f00 	cmp.w	sl, #0
 800cf24:	d115      	bne.n	800cf52 <_dtoa_r+0x8fa>
 800cf26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf2a:	b993      	cbnz	r3, 800cf52 <_dtoa_r+0x8fa>
 800cf2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf30:	0d1b      	lsrs	r3, r3, #20
 800cf32:	051b      	lsls	r3, r3, #20
 800cf34:	b183      	cbz	r3, 800cf58 <_dtoa_r+0x900>
 800cf36:	9b04      	ldr	r3, [sp, #16]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	9304      	str	r3, [sp, #16]
 800cf3c:	9b05      	ldr	r3, [sp, #20]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	9305      	str	r3, [sp, #20]
 800cf42:	f04f 0801 	mov.w	r8, #1
 800cf46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f47f af6a 	bne.w	800ce22 <_dtoa_r+0x7ca>
 800cf4e:	2001      	movs	r0, #1
 800cf50:	e76f      	b.n	800ce32 <_dtoa_r+0x7da>
 800cf52:	f04f 0800 	mov.w	r8, #0
 800cf56:	e7f6      	b.n	800cf46 <_dtoa_r+0x8ee>
 800cf58:	4698      	mov	r8, r3
 800cf5a:	e7f4      	b.n	800cf46 <_dtoa_r+0x8ee>
 800cf5c:	f43f af7d 	beq.w	800ce5a <_dtoa_r+0x802>
 800cf60:	4618      	mov	r0, r3
 800cf62:	301c      	adds	r0, #28
 800cf64:	e772      	b.n	800ce4c <_dtoa_r+0x7f4>
 800cf66:	9b03      	ldr	r3, [sp, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	dc37      	bgt.n	800cfdc <_dtoa_r+0x984>
 800cf6c:	9b06      	ldr	r3, [sp, #24]
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	dd34      	ble.n	800cfdc <_dtoa_r+0x984>
 800cf72:	9b03      	ldr	r3, [sp, #12]
 800cf74:	9302      	str	r3, [sp, #8]
 800cf76:	9b02      	ldr	r3, [sp, #8]
 800cf78:	b96b      	cbnz	r3, 800cf96 <_dtoa_r+0x93e>
 800cf7a:	4631      	mov	r1, r6
 800cf7c:	2205      	movs	r2, #5
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f000 fd68 	bl	800da54 <__multadd>
 800cf84:	4601      	mov	r1, r0
 800cf86:	4606      	mov	r6, r0
 800cf88:	ee18 0a10 	vmov	r0, s16
 800cf8c:	f000 ffcc 	bl	800df28 <__mcmp>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	f73f adbb 	bgt.w	800cb0c <_dtoa_r+0x4b4>
 800cf96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf98:	9d01      	ldr	r5, [sp, #4]
 800cf9a:	43db      	mvns	r3, r3
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	f04f 0800 	mov.w	r8, #0
 800cfa2:	4631      	mov	r1, r6
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 fd33 	bl	800da10 <_Bfree>
 800cfaa:	2f00      	cmp	r7, #0
 800cfac:	f43f aea4 	beq.w	800ccf8 <_dtoa_r+0x6a0>
 800cfb0:	f1b8 0f00 	cmp.w	r8, #0
 800cfb4:	d005      	beq.n	800cfc2 <_dtoa_r+0x96a>
 800cfb6:	45b8      	cmp	r8, r7
 800cfb8:	d003      	beq.n	800cfc2 <_dtoa_r+0x96a>
 800cfba:	4641      	mov	r1, r8
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	f000 fd27 	bl	800da10 <_Bfree>
 800cfc2:	4639      	mov	r1, r7
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f000 fd23 	bl	800da10 <_Bfree>
 800cfca:	e695      	b.n	800ccf8 <_dtoa_r+0x6a0>
 800cfcc:	2600      	movs	r6, #0
 800cfce:	4637      	mov	r7, r6
 800cfd0:	e7e1      	b.n	800cf96 <_dtoa_r+0x93e>
 800cfd2:	9700      	str	r7, [sp, #0]
 800cfd4:	4637      	mov	r7, r6
 800cfd6:	e599      	b.n	800cb0c <_dtoa_r+0x4b4>
 800cfd8:	40240000 	.word	0x40240000
 800cfdc:	9b08      	ldr	r3, [sp, #32]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f000 80ca 	beq.w	800d178 <_dtoa_r+0xb20>
 800cfe4:	9b03      	ldr	r3, [sp, #12]
 800cfe6:	9302      	str	r3, [sp, #8]
 800cfe8:	2d00      	cmp	r5, #0
 800cfea:	dd05      	ble.n	800cff8 <_dtoa_r+0x9a0>
 800cfec:	4639      	mov	r1, r7
 800cfee:	462a      	mov	r2, r5
 800cff0:	4620      	mov	r0, r4
 800cff2:	f000 ff29 	bl	800de48 <__lshift>
 800cff6:	4607      	mov	r7, r0
 800cff8:	f1b8 0f00 	cmp.w	r8, #0
 800cffc:	d05b      	beq.n	800d0b6 <_dtoa_r+0xa5e>
 800cffe:	6879      	ldr	r1, [r7, #4]
 800d000:	4620      	mov	r0, r4
 800d002:	f000 fcc5 	bl	800d990 <_Balloc>
 800d006:	4605      	mov	r5, r0
 800d008:	b928      	cbnz	r0, 800d016 <_dtoa_r+0x9be>
 800d00a:	4b87      	ldr	r3, [pc, #540]	; (800d228 <_dtoa_r+0xbd0>)
 800d00c:	4602      	mov	r2, r0
 800d00e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d012:	f7ff bb3b 	b.w	800c68c <_dtoa_r+0x34>
 800d016:	693a      	ldr	r2, [r7, #16]
 800d018:	3202      	adds	r2, #2
 800d01a:	0092      	lsls	r2, r2, #2
 800d01c:	f107 010c 	add.w	r1, r7, #12
 800d020:	300c      	adds	r0, #12
 800d022:	f000 fca7 	bl	800d974 <memcpy>
 800d026:	2201      	movs	r2, #1
 800d028:	4629      	mov	r1, r5
 800d02a:	4620      	mov	r0, r4
 800d02c:	f000 ff0c 	bl	800de48 <__lshift>
 800d030:	9b01      	ldr	r3, [sp, #4]
 800d032:	f103 0901 	add.w	r9, r3, #1
 800d036:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d03a:	4413      	add	r3, r2
 800d03c:	9305      	str	r3, [sp, #20]
 800d03e:	f00a 0301 	and.w	r3, sl, #1
 800d042:	46b8      	mov	r8, r7
 800d044:	9304      	str	r3, [sp, #16]
 800d046:	4607      	mov	r7, r0
 800d048:	4631      	mov	r1, r6
 800d04a:	ee18 0a10 	vmov	r0, s16
 800d04e:	f7ff fa77 	bl	800c540 <quorem>
 800d052:	4641      	mov	r1, r8
 800d054:	9002      	str	r0, [sp, #8]
 800d056:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d05a:	ee18 0a10 	vmov	r0, s16
 800d05e:	f000 ff63 	bl	800df28 <__mcmp>
 800d062:	463a      	mov	r2, r7
 800d064:	9003      	str	r0, [sp, #12]
 800d066:	4631      	mov	r1, r6
 800d068:	4620      	mov	r0, r4
 800d06a:	f000 ff79 	bl	800df60 <__mdiff>
 800d06e:	68c2      	ldr	r2, [r0, #12]
 800d070:	f109 3bff 	add.w	fp, r9, #4294967295
 800d074:	4605      	mov	r5, r0
 800d076:	bb02      	cbnz	r2, 800d0ba <_dtoa_r+0xa62>
 800d078:	4601      	mov	r1, r0
 800d07a:	ee18 0a10 	vmov	r0, s16
 800d07e:	f000 ff53 	bl	800df28 <__mcmp>
 800d082:	4602      	mov	r2, r0
 800d084:	4629      	mov	r1, r5
 800d086:	4620      	mov	r0, r4
 800d088:	9207      	str	r2, [sp, #28]
 800d08a:	f000 fcc1 	bl	800da10 <_Bfree>
 800d08e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d092:	ea43 0102 	orr.w	r1, r3, r2
 800d096:	9b04      	ldr	r3, [sp, #16]
 800d098:	430b      	orrs	r3, r1
 800d09a:	464d      	mov	r5, r9
 800d09c:	d10f      	bne.n	800d0be <_dtoa_r+0xa66>
 800d09e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0a2:	d02a      	beq.n	800d0fa <_dtoa_r+0xaa2>
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	dd02      	ble.n	800d0b0 <_dtoa_r+0xa58>
 800d0aa:	9b02      	ldr	r3, [sp, #8]
 800d0ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d0b0:	f88b a000 	strb.w	sl, [fp]
 800d0b4:	e775      	b.n	800cfa2 <_dtoa_r+0x94a>
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	e7ba      	b.n	800d030 <_dtoa_r+0x9d8>
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	e7e2      	b.n	800d084 <_dtoa_r+0xa2c>
 800d0be:	9b03      	ldr	r3, [sp, #12]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	db04      	blt.n	800d0ce <_dtoa_r+0xa76>
 800d0c4:	9906      	ldr	r1, [sp, #24]
 800d0c6:	430b      	orrs	r3, r1
 800d0c8:	9904      	ldr	r1, [sp, #16]
 800d0ca:	430b      	orrs	r3, r1
 800d0cc:	d122      	bne.n	800d114 <_dtoa_r+0xabc>
 800d0ce:	2a00      	cmp	r2, #0
 800d0d0:	ddee      	ble.n	800d0b0 <_dtoa_r+0xa58>
 800d0d2:	ee18 1a10 	vmov	r1, s16
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f000 feb5 	bl	800de48 <__lshift>
 800d0de:	4631      	mov	r1, r6
 800d0e0:	ee08 0a10 	vmov	s16, r0
 800d0e4:	f000 ff20 	bl	800df28 <__mcmp>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	dc03      	bgt.n	800d0f4 <_dtoa_r+0xa9c>
 800d0ec:	d1e0      	bne.n	800d0b0 <_dtoa_r+0xa58>
 800d0ee:	f01a 0f01 	tst.w	sl, #1
 800d0f2:	d0dd      	beq.n	800d0b0 <_dtoa_r+0xa58>
 800d0f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0f8:	d1d7      	bne.n	800d0aa <_dtoa_r+0xa52>
 800d0fa:	2339      	movs	r3, #57	; 0x39
 800d0fc:	f88b 3000 	strb.w	r3, [fp]
 800d100:	462b      	mov	r3, r5
 800d102:	461d      	mov	r5, r3
 800d104:	3b01      	subs	r3, #1
 800d106:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d10a:	2a39      	cmp	r2, #57	; 0x39
 800d10c:	d071      	beq.n	800d1f2 <_dtoa_r+0xb9a>
 800d10e:	3201      	adds	r2, #1
 800d110:	701a      	strb	r2, [r3, #0]
 800d112:	e746      	b.n	800cfa2 <_dtoa_r+0x94a>
 800d114:	2a00      	cmp	r2, #0
 800d116:	dd07      	ble.n	800d128 <_dtoa_r+0xad0>
 800d118:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d11c:	d0ed      	beq.n	800d0fa <_dtoa_r+0xaa2>
 800d11e:	f10a 0301 	add.w	r3, sl, #1
 800d122:	f88b 3000 	strb.w	r3, [fp]
 800d126:	e73c      	b.n	800cfa2 <_dtoa_r+0x94a>
 800d128:	9b05      	ldr	r3, [sp, #20]
 800d12a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d12e:	4599      	cmp	r9, r3
 800d130:	d047      	beq.n	800d1c2 <_dtoa_r+0xb6a>
 800d132:	ee18 1a10 	vmov	r1, s16
 800d136:	2300      	movs	r3, #0
 800d138:	220a      	movs	r2, #10
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 fc8a 	bl	800da54 <__multadd>
 800d140:	45b8      	cmp	r8, r7
 800d142:	ee08 0a10 	vmov	s16, r0
 800d146:	f04f 0300 	mov.w	r3, #0
 800d14a:	f04f 020a 	mov.w	r2, #10
 800d14e:	4641      	mov	r1, r8
 800d150:	4620      	mov	r0, r4
 800d152:	d106      	bne.n	800d162 <_dtoa_r+0xb0a>
 800d154:	f000 fc7e 	bl	800da54 <__multadd>
 800d158:	4680      	mov	r8, r0
 800d15a:	4607      	mov	r7, r0
 800d15c:	f109 0901 	add.w	r9, r9, #1
 800d160:	e772      	b.n	800d048 <_dtoa_r+0x9f0>
 800d162:	f000 fc77 	bl	800da54 <__multadd>
 800d166:	4639      	mov	r1, r7
 800d168:	4680      	mov	r8, r0
 800d16a:	2300      	movs	r3, #0
 800d16c:	220a      	movs	r2, #10
 800d16e:	4620      	mov	r0, r4
 800d170:	f000 fc70 	bl	800da54 <__multadd>
 800d174:	4607      	mov	r7, r0
 800d176:	e7f1      	b.n	800d15c <_dtoa_r+0xb04>
 800d178:	9b03      	ldr	r3, [sp, #12]
 800d17a:	9302      	str	r3, [sp, #8]
 800d17c:	9d01      	ldr	r5, [sp, #4]
 800d17e:	ee18 0a10 	vmov	r0, s16
 800d182:	4631      	mov	r1, r6
 800d184:	f7ff f9dc 	bl	800c540 <quorem>
 800d188:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d18c:	9b01      	ldr	r3, [sp, #4]
 800d18e:	f805 ab01 	strb.w	sl, [r5], #1
 800d192:	1aea      	subs	r2, r5, r3
 800d194:	9b02      	ldr	r3, [sp, #8]
 800d196:	4293      	cmp	r3, r2
 800d198:	dd09      	ble.n	800d1ae <_dtoa_r+0xb56>
 800d19a:	ee18 1a10 	vmov	r1, s16
 800d19e:	2300      	movs	r3, #0
 800d1a0:	220a      	movs	r2, #10
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f000 fc56 	bl	800da54 <__multadd>
 800d1a8:	ee08 0a10 	vmov	s16, r0
 800d1ac:	e7e7      	b.n	800d17e <_dtoa_r+0xb26>
 800d1ae:	9b02      	ldr	r3, [sp, #8]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	bfc8      	it	gt
 800d1b4:	461d      	movgt	r5, r3
 800d1b6:	9b01      	ldr	r3, [sp, #4]
 800d1b8:	bfd8      	it	le
 800d1ba:	2501      	movle	r5, #1
 800d1bc:	441d      	add	r5, r3
 800d1be:	f04f 0800 	mov.w	r8, #0
 800d1c2:	ee18 1a10 	vmov	r1, s16
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	f000 fe3d 	bl	800de48 <__lshift>
 800d1ce:	4631      	mov	r1, r6
 800d1d0:	ee08 0a10 	vmov	s16, r0
 800d1d4:	f000 fea8 	bl	800df28 <__mcmp>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	dc91      	bgt.n	800d100 <_dtoa_r+0xaa8>
 800d1dc:	d102      	bne.n	800d1e4 <_dtoa_r+0xb8c>
 800d1de:	f01a 0f01 	tst.w	sl, #1
 800d1e2:	d18d      	bne.n	800d100 <_dtoa_r+0xaa8>
 800d1e4:	462b      	mov	r3, r5
 800d1e6:	461d      	mov	r5, r3
 800d1e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1ec:	2a30      	cmp	r2, #48	; 0x30
 800d1ee:	d0fa      	beq.n	800d1e6 <_dtoa_r+0xb8e>
 800d1f0:	e6d7      	b.n	800cfa2 <_dtoa_r+0x94a>
 800d1f2:	9a01      	ldr	r2, [sp, #4]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d184      	bne.n	800d102 <_dtoa_r+0xaaa>
 800d1f8:	9b00      	ldr	r3, [sp, #0]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	2331      	movs	r3, #49	; 0x31
 800d200:	7013      	strb	r3, [r2, #0]
 800d202:	e6ce      	b.n	800cfa2 <_dtoa_r+0x94a>
 800d204:	4b09      	ldr	r3, [pc, #36]	; (800d22c <_dtoa_r+0xbd4>)
 800d206:	f7ff ba95 	b.w	800c734 <_dtoa_r+0xdc>
 800d20a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f47f aa6e 	bne.w	800c6ee <_dtoa_r+0x96>
 800d212:	4b07      	ldr	r3, [pc, #28]	; (800d230 <_dtoa_r+0xbd8>)
 800d214:	f7ff ba8e 	b.w	800c734 <_dtoa_r+0xdc>
 800d218:	9b02      	ldr	r3, [sp, #8]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	dcae      	bgt.n	800d17c <_dtoa_r+0xb24>
 800d21e:	9b06      	ldr	r3, [sp, #24]
 800d220:	2b02      	cmp	r3, #2
 800d222:	f73f aea8 	bgt.w	800cf76 <_dtoa_r+0x91e>
 800d226:	e7a9      	b.n	800d17c <_dtoa_r+0xb24>
 800d228:	0800f640 	.word	0x0800f640
 800d22c:	0800f4b4 	.word	0x0800f4b4
 800d230:	0800f5d8 	.word	0x0800f5d8

0800d234 <fiprintf>:
 800d234:	b40e      	push	{r1, r2, r3}
 800d236:	b503      	push	{r0, r1, lr}
 800d238:	4601      	mov	r1, r0
 800d23a:	ab03      	add	r3, sp, #12
 800d23c:	4805      	ldr	r0, [pc, #20]	; (800d254 <fiprintf+0x20>)
 800d23e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d242:	6800      	ldr	r0, [r0, #0]
 800d244:	9301      	str	r3, [sp, #4]
 800d246:	f001 fae1 	bl	800e80c <_vfiprintf_r>
 800d24a:	b002      	add	sp, #8
 800d24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d250:	b003      	add	sp, #12
 800d252:	4770      	bx	lr
 800d254:	20000010 	.word	0x20000010

0800d258 <rshift>:
 800d258:	6903      	ldr	r3, [r0, #16]
 800d25a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d25e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d262:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d266:	f100 0414 	add.w	r4, r0, #20
 800d26a:	dd45      	ble.n	800d2f8 <rshift+0xa0>
 800d26c:	f011 011f 	ands.w	r1, r1, #31
 800d270:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d274:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d278:	d10c      	bne.n	800d294 <rshift+0x3c>
 800d27a:	f100 0710 	add.w	r7, r0, #16
 800d27e:	4629      	mov	r1, r5
 800d280:	42b1      	cmp	r1, r6
 800d282:	d334      	bcc.n	800d2ee <rshift+0x96>
 800d284:	1a9b      	subs	r3, r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	1eea      	subs	r2, r5, #3
 800d28a:	4296      	cmp	r6, r2
 800d28c:	bf38      	it	cc
 800d28e:	2300      	movcc	r3, #0
 800d290:	4423      	add	r3, r4
 800d292:	e015      	b.n	800d2c0 <rshift+0x68>
 800d294:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d298:	f1c1 0820 	rsb	r8, r1, #32
 800d29c:	40cf      	lsrs	r7, r1
 800d29e:	f105 0e04 	add.w	lr, r5, #4
 800d2a2:	46a1      	mov	r9, r4
 800d2a4:	4576      	cmp	r6, lr
 800d2a6:	46f4      	mov	ip, lr
 800d2a8:	d815      	bhi.n	800d2d6 <rshift+0x7e>
 800d2aa:	1a9a      	subs	r2, r3, r2
 800d2ac:	0092      	lsls	r2, r2, #2
 800d2ae:	3a04      	subs	r2, #4
 800d2b0:	3501      	adds	r5, #1
 800d2b2:	42ae      	cmp	r6, r5
 800d2b4:	bf38      	it	cc
 800d2b6:	2200      	movcc	r2, #0
 800d2b8:	18a3      	adds	r3, r4, r2
 800d2ba:	50a7      	str	r7, [r4, r2]
 800d2bc:	b107      	cbz	r7, 800d2c0 <rshift+0x68>
 800d2be:	3304      	adds	r3, #4
 800d2c0:	1b1a      	subs	r2, r3, r4
 800d2c2:	42a3      	cmp	r3, r4
 800d2c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d2c8:	bf08      	it	eq
 800d2ca:	2300      	moveq	r3, #0
 800d2cc:	6102      	str	r2, [r0, #16]
 800d2ce:	bf08      	it	eq
 800d2d0:	6143      	streq	r3, [r0, #20]
 800d2d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2d6:	f8dc c000 	ldr.w	ip, [ip]
 800d2da:	fa0c fc08 	lsl.w	ip, ip, r8
 800d2de:	ea4c 0707 	orr.w	r7, ip, r7
 800d2e2:	f849 7b04 	str.w	r7, [r9], #4
 800d2e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2ea:	40cf      	lsrs	r7, r1
 800d2ec:	e7da      	b.n	800d2a4 <rshift+0x4c>
 800d2ee:	f851 cb04 	ldr.w	ip, [r1], #4
 800d2f2:	f847 cf04 	str.w	ip, [r7, #4]!
 800d2f6:	e7c3      	b.n	800d280 <rshift+0x28>
 800d2f8:	4623      	mov	r3, r4
 800d2fa:	e7e1      	b.n	800d2c0 <rshift+0x68>

0800d2fc <__hexdig_fun>:
 800d2fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d300:	2b09      	cmp	r3, #9
 800d302:	d802      	bhi.n	800d30a <__hexdig_fun+0xe>
 800d304:	3820      	subs	r0, #32
 800d306:	b2c0      	uxtb	r0, r0
 800d308:	4770      	bx	lr
 800d30a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d30e:	2b05      	cmp	r3, #5
 800d310:	d801      	bhi.n	800d316 <__hexdig_fun+0x1a>
 800d312:	3847      	subs	r0, #71	; 0x47
 800d314:	e7f7      	b.n	800d306 <__hexdig_fun+0xa>
 800d316:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d31a:	2b05      	cmp	r3, #5
 800d31c:	d801      	bhi.n	800d322 <__hexdig_fun+0x26>
 800d31e:	3827      	subs	r0, #39	; 0x27
 800d320:	e7f1      	b.n	800d306 <__hexdig_fun+0xa>
 800d322:	2000      	movs	r0, #0
 800d324:	4770      	bx	lr
	...

0800d328 <__gethex>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	ed2d 8b02 	vpush	{d8}
 800d330:	b089      	sub	sp, #36	; 0x24
 800d332:	ee08 0a10 	vmov	s16, r0
 800d336:	9304      	str	r3, [sp, #16]
 800d338:	4bb4      	ldr	r3, [pc, #720]	; (800d60c <__gethex+0x2e4>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	4618      	mov	r0, r3
 800d340:	468b      	mov	fp, r1
 800d342:	4690      	mov	r8, r2
 800d344:	f7f2 ff76 	bl	8000234 <strlen>
 800d348:	9b01      	ldr	r3, [sp, #4]
 800d34a:	f8db 2000 	ldr.w	r2, [fp]
 800d34e:	4403      	add	r3, r0
 800d350:	4682      	mov	sl, r0
 800d352:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d356:	9305      	str	r3, [sp, #20]
 800d358:	1c93      	adds	r3, r2, #2
 800d35a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d35e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d362:	32fe      	adds	r2, #254	; 0xfe
 800d364:	18d1      	adds	r1, r2, r3
 800d366:	461f      	mov	r7, r3
 800d368:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d36c:	9100      	str	r1, [sp, #0]
 800d36e:	2830      	cmp	r0, #48	; 0x30
 800d370:	d0f8      	beq.n	800d364 <__gethex+0x3c>
 800d372:	f7ff ffc3 	bl	800d2fc <__hexdig_fun>
 800d376:	4604      	mov	r4, r0
 800d378:	2800      	cmp	r0, #0
 800d37a:	d13a      	bne.n	800d3f2 <__gethex+0xca>
 800d37c:	9901      	ldr	r1, [sp, #4]
 800d37e:	4652      	mov	r2, sl
 800d380:	4638      	mov	r0, r7
 800d382:	f001 fb8d 	bl	800eaa0 <strncmp>
 800d386:	4605      	mov	r5, r0
 800d388:	2800      	cmp	r0, #0
 800d38a:	d168      	bne.n	800d45e <__gethex+0x136>
 800d38c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d390:	eb07 060a 	add.w	r6, r7, sl
 800d394:	f7ff ffb2 	bl	800d2fc <__hexdig_fun>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d062      	beq.n	800d462 <__gethex+0x13a>
 800d39c:	4633      	mov	r3, r6
 800d39e:	7818      	ldrb	r0, [r3, #0]
 800d3a0:	2830      	cmp	r0, #48	; 0x30
 800d3a2:	461f      	mov	r7, r3
 800d3a4:	f103 0301 	add.w	r3, r3, #1
 800d3a8:	d0f9      	beq.n	800d39e <__gethex+0x76>
 800d3aa:	f7ff ffa7 	bl	800d2fc <__hexdig_fun>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	fab0 f480 	clz	r4, r0
 800d3b4:	0964      	lsrs	r4, r4, #5
 800d3b6:	4635      	mov	r5, r6
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	463a      	mov	r2, r7
 800d3bc:	4616      	mov	r6, r2
 800d3be:	3201      	adds	r2, #1
 800d3c0:	7830      	ldrb	r0, [r6, #0]
 800d3c2:	f7ff ff9b 	bl	800d2fc <__hexdig_fun>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d1f8      	bne.n	800d3bc <__gethex+0x94>
 800d3ca:	9901      	ldr	r1, [sp, #4]
 800d3cc:	4652      	mov	r2, sl
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	f001 fb66 	bl	800eaa0 <strncmp>
 800d3d4:	b980      	cbnz	r0, 800d3f8 <__gethex+0xd0>
 800d3d6:	b94d      	cbnz	r5, 800d3ec <__gethex+0xc4>
 800d3d8:	eb06 050a 	add.w	r5, r6, sl
 800d3dc:	462a      	mov	r2, r5
 800d3de:	4616      	mov	r6, r2
 800d3e0:	3201      	adds	r2, #1
 800d3e2:	7830      	ldrb	r0, [r6, #0]
 800d3e4:	f7ff ff8a 	bl	800d2fc <__hexdig_fun>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	d1f8      	bne.n	800d3de <__gethex+0xb6>
 800d3ec:	1bad      	subs	r5, r5, r6
 800d3ee:	00ad      	lsls	r5, r5, #2
 800d3f0:	e004      	b.n	800d3fc <__gethex+0xd4>
 800d3f2:	2400      	movs	r4, #0
 800d3f4:	4625      	mov	r5, r4
 800d3f6:	e7e0      	b.n	800d3ba <__gethex+0x92>
 800d3f8:	2d00      	cmp	r5, #0
 800d3fa:	d1f7      	bne.n	800d3ec <__gethex+0xc4>
 800d3fc:	7833      	ldrb	r3, [r6, #0]
 800d3fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d402:	2b50      	cmp	r3, #80	; 0x50
 800d404:	d13b      	bne.n	800d47e <__gethex+0x156>
 800d406:	7873      	ldrb	r3, [r6, #1]
 800d408:	2b2b      	cmp	r3, #43	; 0x2b
 800d40a:	d02c      	beq.n	800d466 <__gethex+0x13e>
 800d40c:	2b2d      	cmp	r3, #45	; 0x2d
 800d40e:	d02e      	beq.n	800d46e <__gethex+0x146>
 800d410:	1c71      	adds	r1, r6, #1
 800d412:	f04f 0900 	mov.w	r9, #0
 800d416:	7808      	ldrb	r0, [r1, #0]
 800d418:	f7ff ff70 	bl	800d2fc <__hexdig_fun>
 800d41c:	1e43      	subs	r3, r0, #1
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	2b18      	cmp	r3, #24
 800d422:	d82c      	bhi.n	800d47e <__gethex+0x156>
 800d424:	f1a0 0210 	sub.w	r2, r0, #16
 800d428:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d42c:	f7ff ff66 	bl	800d2fc <__hexdig_fun>
 800d430:	1e43      	subs	r3, r0, #1
 800d432:	b2db      	uxtb	r3, r3
 800d434:	2b18      	cmp	r3, #24
 800d436:	d91d      	bls.n	800d474 <__gethex+0x14c>
 800d438:	f1b9 0f00 	cmp.w	r9, #0
 800d43c:	d000      	beq.n	800d440 <__gethex+0x118>
 800d43e:	4252      	negs	r2, r2
 800d440:	4415      	add	r5, r2
 800d442:	f8cb 1000 	str.w	r1, [fp]
 800d446:	b1e4      	cbz	r4, 800d482 <__gethex+0x15a>
 800d448:	9b00      	ldr	r3, [sp, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	bf14      	ite	ne
 800d44e:	2700      	movne	r7, #0
 800d450:	2706      	moveq	r7, #6
 800d452:	4638      	mov	r0, r7
 800d454:	b009      	add	sp, #36	; 0x24
 800d456:	ecbd 8b02 	vpop	{d8}
 800d45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45e:	463e      	mov	r6, r7
 800d460:	4625      	mov	r5, r4
 800d462:	2401      	movs	r4, #1
 800d464:	e7ca      	b.n	800d3fc <__gethex+0xd4>
 800d466:	f04f 0900 	mov.w	r9, #0
 800d46a:	1cb1      	adds	r1, r6, #2
 800d46c:	e7d3      	b.n	800d416 <__gethex+0xee>
 800d46e:	f04f 0901 	mov.w	r9, #1
 800d472:	e7fa      	b.n	800d46a <__gethex+0x142>
 800d474:	230a      	movs	r3, #10
 800d476:	fb03 0202 	mla	r2, r3, r2, r0
 800d47a:	3a10      	subs	r2, #16
 800d47c:	e7d4      	b.n	800d428 <__gethex+0x100>
 800d47e:	4631      	mov	r1, r6
 800d480:	e7df      	b.n	800d442 <__gethex+0x11a>
 800d482:	1bf3      	subs	r3, r6, r7
 800d484:	3b01      	subs	r3, #1
 800d486:	4621      	mov	r1, r4
 800d488:	2b07      	cmp	r3, #7
 800d48a:	dc0b      	bgt.n	800d4a4 <__gethex+0x17c>
 800d48c:	ee18 0a10 	vmov	r0, s16
 800d490:	f000 fa7e 	bl	800d990 <_Balloc>
 800d494:	4604      	mov	r4, r0
 800d496:	b940      	cbnz	r0, 800d4aa <__gethex+0x182>
 800d498:	4b5d      	ldr	r3, [pc, #372]	; (800d610 <__gethex+0x2e8>)
 800d49a:	4602      	mov	r2, r0
 800d49c:	21de      	movs	r1, #222	; 0xde
 800d49e:	485d      	ldr	r0, [pc, #372]	; (800d614 <__gethex+0x2ec>)
 800d4a0:	f7ff f830 	bl	800c504 <__assert_func>
 800d4a4:	3101      	adds	r1, #1
 800d4a6:	105b      	asrs	r3, r3, #1
 800d4a8:	e7ee      	b.n	800d488 <__gethex+0x160>
 800d4aa:	f100 0914 	add.w	r9, r0, #20
 800d4ae:	f04f 0b00 	mov.w	fp, #0
 800d4b2:	f1ca 0301 	rsb	r3, sl, #1
 800d4b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d4ba:	f8cd b000 	str.w	fp, [sp]
 800d4be:	9306      	str	r3, [sp, #24]
 800d4c0:	42b7      	cmp	r7, r6
 800d4c2:	d340      	bcc.n	800d546 <__gethex+0x21e>
 800d4c4:	9802      	ldr	r0, [sp, #8]
 800d4c6:	9b00      	ldr	r3, [sp, #0]
 800d4c8:	f840 3b04 	str.w	r3, [r0], #4
 800d4cc:	eba0 0009 	sub.w	r0, r0, r9
 800d4d0:	1080      	asrs	r0, r0, #2
 800d4d2:	0146      	lsls	r6, r0, #5
 800d4d4:	6120      	str	r0, [r4, #16]
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f000 fb4c 	bl	800db74 <__hi0bits>
 800d4dc:	1a30      	subs	r0, r6, r0
 800d4de:	f8d8 6000 	ldr.w	r6, [r8]
 800d4e2:	42b0      	cmp	r0, r6
 800d4e4:	dd63      	ble.n	800d5ae <__gethex+0x286>
 800d4e6:	1b87      	subs	r7, r0, r6
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	f000 fef0 	bl	800e2d0 <__any_on>
 800d4f0:	4682      	mov	sl, r0
 800d4f2:	b1a8      	cbz	r0, 800d520 <__gethex+0x1f8>
 800d4f4:	1e7b      	subs	r3, r7, #1
 800d4f6:	1159      	asrs	r1, r3, #5
 800d4f8:	f003 021f 	and.w	r2, r3, #31
 800d4fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d500:	f04f 0a01 	mov.w	sl, #1
 800d504:	fa0a f202 	lsl.w	r2, sl, r2
 800d508:	420a      	tst	r2, r1
 800d50a:	d009      	beq.n	800d520 <__gethex+0x1f8>
 800d50c:	4553      	cmp	r3, sl
 800d50e:	dd05      	ble.n	800d51c <__gethex+0x1f4>
 800d510:	1eb9      	subs	r1, r7, #2
 800d512:	4620      	mov	r0, r4
 800d514:	f000 fedc 	bl	800e2d0 <__any_on>
 800d518:	2800      	cmp	r0, #0
 800d51a:	d145      	bne.n	800d5a8 <__gethex+0x280>
 800d51c:	f04f 0a02 	mov.w	sl, #2
 800d520:	4639      	mov	r1, r7
 800d522:	4620      	mov	r0, r4
 800d524:	f7ff fe98 	bl	800d258 <rshift>
 800d528:	443d      	add	r5, r7
 800d52a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d52e:	42ab      	cmp	r3, r5
 800d530:	da4c      	bge.n	800d5cc <__gethex+0x2a4>
 800d532:	ee18 0a10 	vmov	r0, s16
 800d536:	4621      	mov	r1, r4
 800d538:	f000 fa6a 	bl	800da10 <_Bfree>
 800d53c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d53e:	2300      	movs	r3, #0
 800d540:	6013      	str	r3, [r2, #0]
 800d542:	27a3      	movs	r7, #163	; 0xa3
 800d544:	e785      	b.n	800d452 <__gethex+0x12a>
 800d546:	1e73      	subs	r3, r6, #1
 800d548:	9a05      	ldr	r2, [sp, #20]
 800d54a:	9303      	str	r3, [sp, #12]
 800d54c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d550:	4293      	cmp	r3, r2
 800d552:	d019      	beq.n	800d588 <__gethex+0x260>
 800d554:	f1bb 0f20 	cmp.w	fp, #32
 800d558:	d107      	bne.n	800d56a <__gethex+0x242>
 800d55a:	9b02      	ldr	r3, [sp, #8]
 800d55c:	9a00      	ldr	r2, [sp, #0]
 800d55e:	f843 2b04 	str.w	r2, [r3], #4
 800d562:	9302      	str	r3, [sp, #8]
 800d564:	2300      	movs	r3, #0
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	469b      	mov	fp, r3
 800d56a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d56e:	f7ff fec5 	bl	800d2fc <__hexdig_fun>
 800d572:	9b00      	ldr	r3, [sp, #0]
 800d574:	f000 000f 	and.w	r0, r0, #15
 800d578:	fa00 f00b 	lsl.w	r0, r0, fp
 800d57c:	4303      	orrs	r3, r0
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	f10b 0b04 	add.w	fp, fp, #4
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	e00d      	b.n	800d5a4 <__gethex+0x27c>
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	9a06      	ldr	r2, [sp, #24]
 800d58c:	4413      	add	r3, r2
 800d58e:	42bb      	cmp	r3, r7
 800d590:	d3e0      	bcc.n	800d554 <__gethex+0x22c>
 800d592:	4618      	mov	r0, r3
 800d594:	9901      	ldr	r1, [sp, #4]
 800d596:	9307      	str	r3, [sp, #28]
 800d598:	4652      	mov	r2, sl
 800d59a:	f001 fa81 	bl	800eaa0 <strncmp>
 800d59e:	9b07      	ldr	r3, [sp, #28]
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d1d7      	bne.n	800d554 <__gethex+0x22c>
 800d5a4:	461e      	mov	r6, r3
 800d5a6:	e78b      	b.n	800d4c0 <__gethex+0x198>
 800d5a8:	f04f 0a03 	mov.w	sl, #3
 800d5ac:	e7b8      	b.n	800d520 <__gethex+0x1f8>
 800d5ae:	da0a      	bge.n	800d5c6 <__gethex+0x29e>
 800d5b0:	1a37      	subs	r7, r6, r0
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	ee18 0a10 	vmov	r0, s16
 800d5b8:	463a      	mov	r2, r7
 800d5ba:	f000 fc45 	bl	800de48 <__lshift>
 800d5be:	1bed      	subs	r5, r5, r7
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	f100 0914 	add.w	r9, r0, #20
 800d5c6:	f04f 0a00 	mov.w	sl, #0
 800d5ca:	e7ae      	b.n	800d52a <__gethex+0x202>
 800d5cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d5d0:	42a8      	cmp	r0, r5
 800d5d2:	dd72      	ble.n	800d6ba <__gethex+0x392>
 800d5d4:	1b45      	subs	r5, r0, r5
 800d5d6:	42ae      	cmp	r6, r5
 800d5d8:	dc36      	bgt.n	800d648 <__gethex+0x320>
 800d5da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	d02a      	beq.n	800d638 <__gethex+0x310>
 800d5e2:	2b03      	cmp	r3, #3
 800d5e4:	d02c      	beq.n	800d640 <__gethex+0x318>
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d11c      	bne.n	800d624 <__gethex+0x2fc>
 800d5ea:	42ae      	cmp	r6, r5
 800d5ec:	d11a      	bne.n	800d624 <__gethex+0x2fc>
 800d5ee:	2e01      	cmp	r6, #1
 800d5f0:	d112      	bne.n	800d618 <__gethex+0x2f0>
 800d5f2:	9a04      	ldr	r2, [sp, #16]
 800d5f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d5f8:	6013      	str	r3, [r2, #0]
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	6123      	str	r3, [r4, #16]
 800d5fe:	f8c9 3000 	str.w	r3, [r9]
 800d602:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d604:	2762      	movs	r7, #98	; 0x62
 800d606:	601c      	str	r4, [r3, #0]
 800d608:	e723      	b.n	800d452 <__gethex+0x12a>
 800d60a:	bf00      	nop
 800d60c:	0800f6b8 	.word	0x0800f6b8
 800d610:	0800f640 	.word	0x0800f640
 800d614:	0800f651 	.word	0x0800f651
 800d618:	1e71      	subs	r1, r6, #1
 800d61a:	4620      	mov	r0, r4
 800d61c:	f000 fe58 	bl	800e2d0 <__any_on>
 800d620:	2800      	cmp	r0, #0
 800d622:	d1e6      	bne.n	800d5f2 <__gethex+0x2ca>
 800d624:	ee18 0a10 	vmov	r0, s16
 800d628:	4621      	mov	r1, r4
 800d62a:	f000 f9f1 	bl	800da10 <_Bfree>
 800d62e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d630:	2300      	movs	r3, #0
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	2750      	movs	r7, #80	; 0x50
 800d636:	e70c      	b.n	800d452 <__gethex+0x12a>
 800d638:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1f2      	bne.n	800d624 <__gethex+0x2fc>
 800d63e:	e7d8      	b.n	800d5f2 <__gethex+0x2ca>
 800d640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1d5      	bne.n	800d5f2 <__gethex+0x2ca>
 800d646:	e7ed      	b.n	800d624 <__gethex+0x2fc>
 800d648:	1e6f      	subs	r7, r5, #1
 800d64a:	f1ba 0f00 	cmp.w	sl, #0
 800d64e:	d131      	bne.n	800d6b4 <__gethex+0x38c>
 800d650:	b127      	cbz	r7, 800d65c <__gethex+0x334>
 800d652:	4639      	mov	r1, r7
 800d654:	4620      	mov	r0, r4
 800d656:	f000 fe3b 	bl	800e2d0 <__any_on>
 800d65a:	4682      	mov	sl, r0
 800d65c:	117b      	asrs	r3, r7, #5
 800d65e:	2101      	movs	r1, #1
 800d660:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d664:	f007 071f 	and.w	r7, r7, #31
 800d668:	fa01 f707 	lsl.w	r7, r1, r7
 800d66c:	421f      	tst	r7, r3
 800d66e:	4629      	mov	r1, r5
 800d670:	4620      	mov	r0, r4
 800d672:	bf18      	it	ne
 800d674:	f04a 0a02 	orrne.w	sl, sl, #2
 800d678:	1b76      	subs	r6, r6, r5
 800d67a:	f7ff fded 	bl	800d258 <rshift>
 800d67e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d682:	2702      	movs	r7, #2
 800d684:	f1ba 0f00 	cmp.w	sl, #0
 800d688:	d048      	beq.n	800d71c <__gethex+0x3f4>
 800d68a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d68e:	2b02      	cmp	r3, #2
 800d690:	d015      	beq.n	800d6be <__gethex+0x396>
 800d692:	2b03      	cmp	r3, #3
 800d694:	d017      	beq.n	800d6c6 <__gethex+0x39e>
 800d696:	2b01      	cmp	r3, #1
 800d698:	d109      	bne.n	800d6ae <__gethex+0x386>
 800d69a:	f01a 0f02 	tst.w	sl, #2
 800d69e:	d006      	beq.n	800d6ae <__gethex+0x386>
 800d6a0:	f8d9 0000 	ldr.w	r0, [r9]
 800d6a4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d6a8:	f01a 0f01 	tst.w	sl, #1
 800d6ac:	d10e      	bne.n	800d6cc <__gethex+0x3a4>
 800d6ae:	f047 0710 	orr.w	r7, r7, #16
 800d6b2:	e033      	b.n	800d71c <__gethex+0x3f4>
 800d6b4:	f04f 0a01 	mov.w	sl, #1
 800d6b8:	e7d0      	b.n	800d65c <__gethex+0x334>
 800d6ba:	2701      	movs	r7, #1
 800d6bc:	e7e2      	b.n	800d684 <__gethex+0x35c>
 800d6be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6c0:	f1c3 0301 	rsb	r3, r3, #1
 800d6c4:	9315      	str	r3, [sp, #84]	; 0x54
 800d6c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d0f0      	beq.n	800d6ae <__gethex+0x386>
 800d6cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d6d0:	f104 0314 	add.w	r3, r4, #20
 800d6d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d6d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d6dc:	f04f 0c00 	mov.w	ip, #0
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d6ea:	d01c      	beq.n	800d726 <__gethex+0x3fe>
 800d6ec:	3201      	adds	r2, #1
 800d6ee:	6002      	str	r2, [r0, #0]
 800d6f0:	2f02      	cmp	r7, #2
 800d6f2:	f104 0314 	add.w	r3, r4, #20
 800d6f6:	d13f      	bne.n	800d778 <__gethex+0x450>
 800d6f8:	f8d8 2000 	ldr.w	r2, [r8]
 800d6fc:	3a01      	subs	r2, #1
 800d6fe:	42b2      	cmp	r2, r6
 800d700:	d10a      	bne.n	800d718 <__gethex+0x3f0>
 800d702:	1171      	asrs	r1, r6, #5
 800d704:	2201      	movs	r2, #1
 800d706:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d70a:	f006 061f 	and.w	r6, r6, #31
 800d70e:	fa02 f606 	lsl.w	r6, r2, r6
 800d712:	421e      	tst	r6, r3
 800d714:	bf18      	it	ne
 800d716:	4617      	movne	r7, r2
 800d718:	f047 0720 	orr.w	r7, r7, #32
 800d71c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d71e:	601c      	str	r4, [r3, #0]
 800d720:	9b04      	ldr	r3, [sp, #16]
 800d722:	601d      	str	r5, [r3, #0]
 800d724:	e695      	b.n	800d452 <__gethex+0x12a>
 800d726:	4299      	cmp	r1, r3
 800d728:	f843 cc04 	str.w	ip, [r3, #-4]
 800d72c:	d8d8      	bhi.n	800d6e0 <__gethex+0x3b8>
 800d72e:	68a3      	ldr	r3, [r4, #8]
 800d730:	459b      	cmp	fp, r3
 800d732:	db19      	blt.n	800d768 <__gethex+0x440>
 800d734:	6861      	ldr	r1, [r4, #4]
 800d736:	ee18 0a10 	vmov	r0, s16
 800d73a:	3101      	adds	r1, #1
 800d73c:	f000 f928 	bl	800d990 <_Balloc>
 800d740:	4681      	mov	r9, r0
 800d742:	b918      	cbnz	r0, 800d74c <__gethex+0x424>
 800d744:	4b1a      	ldr	r3, [pc, #104]	; (800d7b0 <__gethex+0x488>)
 800d746:	4602      	mov	r2, r0
 800d748:	2184      	movs	r1, #132	; 0x84
 800d74a:	e6a8      	b.n	800d49e <__gethex+0x176>
 800d74c:	6922      	ldr	r2, [r4, #16]
 800d74e:	3202      	adds	r2, #2
 800d750:	f104 010c 	add.w	r1, r4, #12
 800d754:	0092      	lsls	r2, r2, #2
 800d756:	300c      	adds	r0, #12
 800d758:	f000 f90c 	bl	800d974 <memcpy>
 800d75c:	4621      	mov	r1, r4
 800d75e:	ee18 0a10 	vmov	r0, s16
 800d762:	f000 f955 	bl	800da10 <_Bfree>
 800d766:	464c      	mov	r4, r9
 800d768:	6923      	ldr	r3, [r4, #16]
 800d76a:	1c5a      	adds	r2, r3, #1
 800d76c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d770:	6122      	str	r2, [r4, #16]
 800d772:	2201      	movs	r2, #1
 800d774:	615a      	str	r2, [r3, #20]
 800d776:	e7bb      	b.n	800d6f0 <__gethex+0x3c8>
 800d778:	6922      	ldr	r2, [r4, #16]
 800d77a:	455a      	cmp	r2, fp
 800d77c:	dd0b      	ble.n	800d796 <__gethex+0x46e>
 800d77e:	2101      	movs	r1, #1
 800d780:	4620      	mov	r0, r4
 800d782:	f7ff fd69 	bl	800d258 <rshift>
 800d786:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d78a:	3501      	adds	r5, #1
 800d78c:	42ab      	cmp	r3, r5
 800d78e:	f6ff aed0 	blt.w	800d532 <__gethex+0x20a>
 800d792:	2701      	movs	r7, #1
 800d794:	e7c0      	b.n	800d718 <__gethex+0x3f0>
 800d796:	f016 061f 	ands.w	r6, r6, #31
 800d79a:	d0fa      	beq.n	800d792 <__gethex+0x46a>
 800d79c:	4453      	add	r3, sl
 800d79e:	f1c6 0620 	rsb	r6, r6, #32
 800d7a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d7a6:	f000 f9e5 	bl	800db74 <__hi0bits>
 800d7aa:	42b0      	cmp	r0, r6
 800d7ac:	dbe7      	blt.n	800d77e <__gethex+0x456>
 800d7ae:	e7f0      	b.n	800d792 <__gethex+0x46a>
 800d7b0:	0800f640 	.word	0x0800f640

0800d7b4 <L_shift>:
 800d7b4:	f1c2 0208 	rsb	r2, r2, #8
 800d7b8:	0092      	lsls	r2, r2, #2
 800d7ba:	b570      	push	{r4, r5, r6, lr}
 800d7bc:	f1c2 0620 	rsb	r6, r2, #32
 800d7c0:	6843      	ldr	r3, [r0, #4]
 800d7c2:	6804      	ldr	r4, [r0, #0]
 800d7c4:	fa03 f506 	lsl.w	r5, r3, r6
 800d7c8:	432c      	orrs	r4, r5
 800d7ca:	40d3      	lsrs	r3, r2
 800d7cc:	6004      	str	r4, [r0, #0]
 800d7ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800d7d2:	4288      	cmp	r0, r1
 800d7d4:	d3f4      	bcc.n	800d7c0 <L_shift+0xc>
 800d7d6:	bd70      	pop	{r4, r5, r6, pc}

0800d7d8 <__match>:
 800d7d8:	b530      	push	{r4, r5, lr}
 800d7da:	6803      	ldr	r3, [r0, #0]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7e2:	b914      	cbnz	r4, 800d7ea <__match+0x12>
 800d7e4:	6003      	str	r3, [r0, #0]
 800d7e6:	2001      	movs	r0, #1
 800d7e8:	bd30      	pop	{r4, r5, pc}
 800d7ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d7f2:	2d19      	cmp	r5, #25
 800d7f4:	bf98      	it	ls
 800d7f6:	3220      	addls	r2, #32
 800d7f8:	42a2      	cmp	r2, r4
 800d7fa:	d0f0      	beq.n	800d7de <__match+0x6>
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	e7f3      	b.n	800d7e8 <__match+0x10>

0800d800 <__hexnan>:
 800d800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d804:	680b      	ldr	r3, [r1, #0]
 800d806:	115e      	asrs	r6, r3, #5
 800d808:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d80c:	f013 031f 	ands.w	r3, r3, #31
 800d810:	b087      	sub	sp, #28
 800d812:	bf18      	it	ne
 800d814:	3604      	addne	r6, #4
 800d816:	2500      	movs	r5, #0
 800d818:	1f37      	subs	r7, r6, #4
 800d81a:	4690      	mov	r8, r2
 800d81c:	6802      	ldr	r2, [r0, #0]
 800d81e:	9301      	str	r3, [sp, #4]
 800d820:	4682      	mov	sl, r0
 800d822:	f846 5c04 	str.w	r5, [r6, #-4]
 800d826:	46b9      	mov	r9, r7
 800d828:	463c      	mov	r4, r7
 800d82a:	9502      	str	r5, [sp, #8]
 800d82c:	46ab      	mov	fp, r5
 800d82e:	7851      	ldrb	r1, [r2, #1]
 800d830:	1c53      	adds	r3, r2, #1
 800d832:	9303      	str	r3, [sp, #12]
 800d834:	b341      	cbz	r1, 800d888 <__hexnan+0x88>
 800d836:	4608      	mov	r0, r1
 800d838:	9205      	str	r2, [sp, #20]
 800d83a:	9104      	str	r1, [sp, #16]
 800d83c:	f7ff fd5e 	bl	800d2fc <__hexdig_fun>
 800d840:	2800      	cmp	r0, #0
 800d842:	d14f      	bne.n	800d8e4 <__hexnan+0xe4>
 800d844:	9904      	ldr	r1, [sp, #16]
 800d846:	9a05      	ldr	r2, [sp, #20]
 800d848:	2920      	cmp	r1, #32
 800d84a:	d818      	bhi.n	800d87e <__hexnan+0x7e>
 800d84c:	9b02      	ldr	r3, [sp, #8]
 800d84e:	459b      	cmp	fp, r3
 800d850:	dd13      	ble.n	800d87a <__hexnan+0x7a>
 800d852:	454c      	cmp	r4, r9
 800d854:	d206      	bcs.n	800d864 <__hexnan+0x64>
 800d856:	2d07      	cmp	r5, #7
 800d858:	dc04      	bgt.n	800d864 <__hexnan+0x64>
 800d85a:	462a      	mov	r2, r5
 800d85c:	4649      	mov	r1, r9
 800d85e:	4620      	mov	r0, r4
 800d860:	f7ff ffa8 	bl	800d7b4 <L_shift>
 800d864:	4544      	cmp	r4, r8
 800d866:	d950      	bls.n	800d90a <__hexnan+0x10a>
 800d868:	2300      	movs	r3, #0
 800d86a:	f1a4 0904 	sub.w	r9, r4, #4
 800d86e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d872:	f8cd b008 	str.w	fp, [sp, #8]
 800d876:	464c      	mov	r4, r9
 800d878:	461d      	mov	r5, r3
 800d87a:	9a03      	ldr	r2, [sp, #12]
 800d87c:	e7d7      	b.n	800d82e <__hexnan+0x2e>
 800d87e:	2929      	cmp	r1, #41	; 0x29
 800d880:	d156      	bne.n	800d930 <__hexnan+0x130>
 800d882:	3202      	adds	r2, #2
 800d884:	f8ca 2000 	str.w	r2, [sl]
 800d888:	f1bb 0f00 	cmp.w	fp, #0
 800d88c:	d050      	beq.n	800d930 <__hexnan+0x130>
 800d88e:	454c      	cmp	r4, r9
 800d890:	d206      	bcs.n	800d8a0 <__hexnan+0xa0>
 800d892:	2d07      	cmp	r5, #7
 800d894:	dc04      	bgt.n	800d8a0 <__hexnan+0xa0>
 800d896:	462a      	mov	r2, r5
 800d898:	4649      	mov	r1, r9
 800d89a:	4620      	mov	r0, r4
 800d89c:	f7ff ff8a 	bl	800d7b4 <L_shift>
 800d8a0:	4544      	cmp	r4, r8
 800d8a2:	d934      	bls.n	800d90e <__hexnan+0x10e>
 800d8a4:	f1a8 0204 	sub.w	r2, r8, #4
 800d8a8:	4623      	mov	r3, r4
 800d8aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800d8ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800d8b2:	429f      	cmp	r7, r3
 800d8b4:	d2f9      	bcs.n	800d8aa <__hexnan+0xaa>
 800d8b6:	1b3b      	subs	r3, r7, r4
 800d8b8:	f023 0303 	bic.w	r3, r3, #3
 800d8bc:	3304      	adds	r3, #4
 800d8be:	3401      	adds	r4, #1
 800d8c0:	3e03      	subs	r6, #3
 800d8c2:	42b4      	cmp	r4, r6
 800d8c4:	bf88      	it	hi
 800d8c6:	2304      	movhi	r3, #4
 800d8c8:	4443      	add	r3, r8
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f843 2b04 	str.w	r2, [r3], #4
 800d8d0:	429f      	cmp	r7, r3
 800d8d2:	d2fb      	bcs.n	800d8cc <__hexnan+0xcc>
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	b91b      	cbnz	r3, 800d8e0 <__hexnan+0xe0>
 800d8d8:	4547      	cmp	r7, r8
 800d8da:	d127      	bne.n	800d92c <__hexnan+0x12c>
 800d8dc:	2301      	movs	r3, #1
 800d8de:	603b      	str	r3, [r7, #0]
 800d8e0:	2005      	movs	r0, #5
 800d8e2:	e026      	b.n	800d932 <__hexnan+0x132>
 800d8e4:	3501      	adds	r5, #1
 800d8e6:	2d08      	cmp	r5, #8
 800d8e8:	f10b 0b01 	add.w	fp, fp, #1
 800d8ec:	dd06      	ble.n	800d8fc <__hexnan+0xfc>
 800d8ee:	4544      	cmp	r4, r8
 800d8f0:	d9c3      	bls.n	800d87a <__hexnan+0x7a>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8f8:	2501      	movs	r5, #1
 800d8fa:	3c04      	subs	r4, #4
 800d8fc:	6822      	ldr	r2, [r4, #0]
 800d8fe:	f000 000f 	and.w	r0, r0, #15
 800d902:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d906:	6022      	str	r2, [r4, #0]
 800d908:	e7b7      	b.n	800d87a <__hexnan+0x7a>
 800d90a:	2508      	movs	r5, #8
 800d90c:	e7b5      	b.n	800d87a <__hexnan+0x7a>
 800d90e:	9b01      	ldr	r3, [sp, #4]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d0df      	beq.n	800d8d4 <__hexnan+0xd4>
 800d914:	f04f 32ff 	mov.w	r2, #4294967295
 800d918:	f1c3 0320 	rsb	r3, r3, #32
 800d91c:	fa22 f303 	lsr.w	r3, r2, r3
 800d920:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d924:	401a      	ands	r2, r3
 800d926:	f846 2c04 	str.w	r2, [r6, #-4]
 800d92a:	e7d3      	b.n	800d8d4 <__hexnan+0xd4>
 800d92c:	3f04      	subs	r7, #4
 800d92e:	e7d1      	b.n	800d8d4 <__hexnan+0xd4>
 800d930:	2004      	movs	r0, #4
 800d932:	b007      	add	sp, #28
 800d934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d938 <_localeconv_r>:
 800d938:	4800      	ldr	r0, [pc, #0]	; (800d93c <_localeconv_r+0x4>)
 800d93a:	4770      	bx	lr
 800d93c:	20000168 	.word	0x20000168

0800d940 <malloc>:
 800d940:	4b02      	ldr	r3, [pc, #8]	; (800d94c <malloc+0xc>)
 800d942:	4601      	mov	r1, r0
 800d944:	6818      	ldr	r0, [r3, #0]
 800d946:	f000 bd67 	b.w	800e418 <_malloc_r>
 800d94a:	bf00      	nop
 800d94c:	20000010 	.word	0x20000010

0800d950 <__ascii_mbtowc>:
 800d950:	b082      	sub	sp, #8
 800d952:	b901      	cbnz	r1, 800d956 <__ascii_mbtowc+0x6>
 800d954:	a901      	add	r1, sp, #4
 800d956:	b142      	cbz	r2, 800d96a <__ascii_mbtowc+0x1a>
 800d958:	b14b      	cbz	r3, 800d96e <__ascii_mbtowc+0x1e>
 800d95a:	7813      	ldrb	r3, [r2, #0]
 800d95c:	600b      	str	r3, [r1, #0]
 800d95e:	7812      	ldrb	r2, [r2, #0]
 800d960:	1e10      	subs	r0, r2, #0
 800d962:	bf18      	it	ne
 800d964:	2001      	movne	r0, #1
 800d966:	b002      	add	sp, #8
 800d968:	4770      	bx	lr
 800d96a:	4610      	mov	r0, r2
 800d96c:	e7fb      	b.n	800d966 <__ascii_mbtowc+0x16>
 800d96e:	f06f 0001 	mvn.w	r0, #1
 800d972:	e7f8      	b.n	800d966 <__ascii_mbtowc+0x16>

0800d974 <memcpy>:
 800d974:	440a      	add	r2, r1
 800d976:	4291      	cmp	r1, r2
 800d978:	f100 33ff 	add.w	r3, r0, #4294967295
 800d97c:	d100      	bne.n	800d980 <memcpy+0xc>
 800d97e:	4770      	bx	lr
 800d980:	b510      	push	{r4, lr}
 800d982:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d98a:	4291      	cmp	r1, r2
 800d98c:	d1f9      	bne.n	800d982 <memcpy+0xe>
 800d98e:	bd10      	pop	{r4, pc}

0800d990 <_Balloc>:
 800d990:	b570      	push	{r4, r5, r6, lr}
 800d992:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d994:	4604      	mov	r4, r0
 800d996:	460d      	mov	r5, r1
 800d998:	b976      	cbnz	r6, 800d9b8 <_Balloc+0x28>
 800d99a:	2010      	movs	r0, #16
 800d99c:	f7ff ffd0 	bl	800d940 <malloc>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	6260      	str	r0, [r4, #36]	; 0x24
 800d9a4:	b920      	cbnz	r0, 800d9b0 <_Balloc+0x20>
 800d9a6:	4b18      	ldr	r3, [pc, #96]	; (800da08 <_Balloc+0x78>)
 800d9a8:	4818      	ldr	r0, [pc, #96]	; (800da0c <_Balloc+0x7c>)
 800d9aa:	2166      	movs	r1, #102	; 0x66
 800d9ac:	f7fe fdaa 	bl	800c504 <__assert_func>
 800d9b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9b4:	6006      	str	r6, [r0, #0]
 800d9b6:	60c6      	str	r6, [r0, #12]
 800d9b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d9ba:	68f3      	ldr	r3, [r6, #12]
 800d9bc:	b183      	cbz	r3, 800d9e0 <_Balloc+0x50>
 800d9be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9c6:	b9b8      	cbnz	r0, 800d9f8 <_Balloc+0x68>
 800d9c8:	2101      	movs	r1, #1
 800d9ca:	fa01 f605 	lsl.w	r6, r1, r5
 800d9ce:	1d72      	adds	r2, r6, #5
 800d9d0:	0092      	lsls	r2, r2, #2
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	f000 fc9d 	bl	800e312 <_calloc_r>
 800d9d8:	b160      	cbz	r0, 800d9f4 <_Balloc+0x64>
 800d9da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d9de:	e00e      	b.n	800d9fe <_Balloc+0x6e>
 800d9e0:	2221      	movs	r2, #33	; 0x21
 800d9e2:	2104      	movs	r1, #4
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f000 fc94 	bl	800e312 <_calloc_r>
 800d9ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9ec:	60f0      	str	r0, [r6, #12]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d1e4      	bne.n	800d9be <_Balloc+0x2e>
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	bd70      	pop	{r4, r5, r6, pc}
 800d9f8:	6802      	ldr	r2, [r0, #0]
 800d9fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d9fe:	2300      	movs	r3, #0
 800da00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da04:	e7f7      	b.n	800d9f6 <_Balloc+0x66>
 800da06:	bf00      	nop
 800da08:	0800f528 	.word	0x0800f528
 800da0c:	0800f6cc 	.word	0x0800f6cc

0800da10 <_Bfree>:
 800da10:	b570      	push	{r4, r5, r6, lr}
 800da12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da14:	4605      	mov	r5, r0
 800da16:	460c      	mov	r4, r1
 800da18:	b976      	cbnz	r6, 800da38 <_Bfree+0x28>
 800da1a:	2010      	movs	r0, #16
 800da1c:	f7ff ff90 	bl	800d940 <malloc>
 800da20:	4602      	mov	r2, r0
 800da22:	6268      	str	r0, [r5, #36]	; 0x24
 800da24:	b920      	cbnz	r0, 800da30 <_Bfree+0x20>
 800da26:	4b09      	ldr	r3, [pc, #36]	; (800da4c <_Bfree+0x3c>)
 800da28:	4809      	ldr	r0, [pc, #36]	; (800da50 <_Bfree+0x40>)
 800da2a:	218a      	movs	r1, #138	; 0x8a
 800da2c:	f7fe fd6a 	bl	800c504 <__assert_func>
 800da30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da34:	6006      	str	r6, [r0, #0]
 800da36:	60c6      	str	r6, [r0, #12]
 800da38:	b13c      	cbz	r4, 800da4a <_Bfree+0x3a>
 800da3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da3c:	6862      	ldr	r2, [r4, #4]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da44:	6021      	str	r1, [r4, #0]
 800da46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da4a:	bd70      	pop	{r4, r5, r6, pc}
 800da4c:	0800f528 	.word	0x0800f528
 800da50:	0800f6cc 	.word	0x0800f6cc

0800da54 <__multadd>:
 800da54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da58:	690d      	ldr	r5, [r1, #16]
 800da5a:	4607      	mov	r7, r0
 800da5c:	460c      	mov	r4, r1
 800da5e:	461e      	mov	r6, r3
 800da60:	f101 0c14 	add.w	ip, r1, #20
 800da64:	2000      	movs	r0, #0
 800da66:	f8dc 3000 	ldr.w	r3, [ip]
 800da6a:	b299      	uxth	r1, r3
 800da6c:	fb02 6101 	mla	r1, r2, r1, r6
 800da70:	0c1e      	lsrs	r6, r3, #16
 800da72:	0c0b      	lsrs	r3, r1, #16
 800da74:	fb02 3306 	mla	r3, r2, r6, r3
 800da78:	b289      	uxth	r1, r1
 800da7a:	3001      	adds	r0, #1
 800da7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da80:	4285      	cmp	r5, r0
 800da82:	f84c 1b04 	str.w	r1, [ip], #4
 800da86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da8a:	dcec      	bgt.n	800da66 <__multadd+0x12>
 800da8c:	b30e      	cbz	r6, 800dad2 <__multadd+0x7e>
 800da8e:	68a3      	ldr	r3, [r4, #8]
 800da90:	42ab      	cmp	r3, r5
 800da92:	dc19      	bgt.n	800dac8 <__multadd+0x74>
 800da94:	6861      	ldr	r1, [r4, #4]
 800da96:	4638      	mov	r0, r7
 800da98:	3101      	adds	r1, #1
 800da9a:	f7ff ff79 	bl	800d990 <_Balloc>
 800da9e:	4680      	mov	r8, r0
 800daa0:	b928      	cbnz	r0, 800daae <__multadd+0x5a>
 800daa2:	4602      	mov	r2, r0
 800daa4:	4b0c      	ldr	r3, [pc, #48]	; (800dad8 <__multadd+0x84>)
 800daa6:	480d      	ldr	r0, [pc, #52]	; (800dadc <__multadd+0x88>)
 800daa8:	21b5      	movs	r1, #181	; 0xb5
 800daaa:	f7fe fd2b 	bl	800c504 <__assert_func>
 800daae:	6922      	ldr	r2, [r4, #16]
 800dab0:	3202      	adds	r2, #2
 800dab2:	f104 010c 	add.w	r1, r4, #12
 800dab6:	0092      	lsls	r2, r2, #2
 800dab8:	300c      	adds	r0, #12
 800daba:	f7ff ff5b 	bl	800d974 <memcpy>
 800dabe:	4621      	mov	r1, r4
 800dac0:	4638      	mov	r0, r7
 800dac2:	f7ff ffa5 	bl	800da10 <_Bfree>
 800dac6:	4644      	mov	r4, r8
 800dac8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dacc:	3501      	adds	r5, #1
 800dace:	615e      	str	r6, [r3, #20]
 800dad0:	6125      	str	r5, [r4, #16]
 800dad2:	4620      	mov	r0, r4
 800dad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad8:	0800f640 	.word	0x0800f640
 800dadc:	0800f6cc 	.word	0x0800f6cc

0800dae0 <__s2b>:
 800dae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dae4:	460c      	mov	r4, r1
 800dae6:	4615      	mov	r5, r2
 800dae8:	461f      	mov	r7, r3
 800daea:	2209      	movs	r2, #9
 800daec:	3308      	adds	r3, #8
 800daee:	4606      	mov	r6, r0
 800daf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800daf4:	2100      	movs	r1, #0
 800daf6:	2201      	movs	r2, #1
 800daf8:	429a      	cmp	r2, r3
 800dafa:	db09      	blt.n	800db10 <__s2b+0x30>
 800dafc:	4630      	mov	r0, r6
 800dafe:	f7ff ff47 	bl	800d990 <_Balloc>
 800db02:	b940      	cbnz	r0, 800db16 <__s2b+0x36>
 800db04:	4602      	mov	r2, r0
 800db06:	4b19      	ldr	r3, [pc, #100]	; (800db6c <__s2b+0x8c>)
 800db08:	4819      	ldr	r0, [pc, #100]	; (800db70 <__s2b+0x90>)
 800db0a:	21ce      	movs	r1, #206	; 0xce
 800db0c:	f7fe fcfa 	bl	800c504 <__assert_func>
 800db10:	0052      	lsls	r2, r2, #1
 800db12:	3101      	adds	r1, #1
 800db14:	e7f0      	b.n	800daf8 <__s2b+0x18>
 800db16:	9b08      	ldr	r3, [sp, #32]
 800db18:	6143      	str	r3, [r0, #20]
 800db1a:	2d09      	cmp	r5, #9
 800db1c:	f04f 0301 	mov.w	r3, #1
 800db20:	6103      	str	r3, [r0, #16]
 800db22:	dd16      	ble.n	800db52 <__s2b+0x72>
 800db24:	f104 0909 	add.w	r9, r4, #9
 800db28:	46c8      	mov	r8, r9
 800db2a:	442c      	add	r4, r5
 800db2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db30:	4601      	mov	r1, r0
 800db32:	3b30      	subs	r3, #48	; 0x30
 800db34:	220a      	movs	r2, #10
 800db36:	4630      	mov	r0, r6
 800db38:	f7ff ff8c 	bl	800da54 <__multadd>
 800db3c:	45a0      	cmp	r8, r4
 800db3e:	d1f5      	bne.n	800db2c <__s2b+0x4c>
 800db40:	f1a5 0408 	sub.w	r4, r5, #8
 800db44:	444c      	add	r4, r9
 800db46:	1b2d      	subs	r5, r5, r4
 800db48:	1963      	adds	r3, r4, r5
 800db4a:	42bb      	cmp	r3, r7
 800db4c:	db04      	blt.n	800db58 <__s2b+0x78>
 800db4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db52:	340a      	adds	r4, #10
 800db54:	2509      	movs	r5, #9
 800db56:	e7f6      	b.n	800db46 <__s2b+0x66>
 800db58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db5c:	4601      	mov	r1, r0
 800db5e:	3b30      	subs	r3, #48	; 0x30
 800db60:	220a      	movs	r2, #10
 800db62:	4630      	mov	r0, r6
 800db64:	f7ff ff76 	bl	800da54 <__multadd>
 800db68:	e7ee      	b.n	800db48 <__s2b+0x68>
 800db6a:	bf00      	nop
 800db6c:	0800f640 	.word	0x0800f640
 800db70:	0800f6cc 	.word	0x0800f6cc

0800db74 <__hi0bits>:
 800db74:	0c03      	lsrs	r3, r0, #16
 800db76:	041b      	lsls	r3, r3, #16
 800db78:	b9d3      	cbnz	r3, 800dbb0 <__hi0bits+0x3c>
 800db7a:	0400      	lsls	r0, r0, #16
 800db7c:	2310      	movs	r3, #16
 800db7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db82:	bf04      	itt	eq
 800db84:	0200      	lsleq	r0, r0, #8
 800db86:	3308      	addeq	r3, #8
 800db88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800db8c:	bf04      	itt	eq
 800db8e:	0100      	lsleq	r0, r0, #4
 800db90:	3304      	addeq	r3, #4
 800db92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800db96:	bf04      	itt	eq
 800db98:	0080      	lsleq	r0, r0, #2
 800db9a:	3302      	addeq	r3, #2
 800db9c:	2800      	cmp	r0, #0
 800db9e:	db05      	blt.n	800dbac <__hi0bits+0x38>
 800dba0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dba4:	f103 0301 	add.w	r3, r3, #1
 800dba8:	bf08      	it	eq
 800dbaa:	2320      	moveq	r3, #32
 800dbac:	4618      	mov	r0, r3
 800dbae:	4770      	bx	lr
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	e7e4      	b.n	800db7e <__hi0bits+0xa>

0800dbb4 <__lo0bits>:
 800dbb4:	6803      	ldr	r3, [r0, #0]
 800dbb6:	f013 0207 	ands.w	r2, r3, #7
 800dbba:	4601      	mov	r1, r0
 800dbbc:	d00b      	beq.n	800dbd6 <__lo0bits+0x22>
 800dbbe:	07da      	lsls	r2, r3, #31
 800dbc0:	d423      	bmi.n	800dc0a <__lo0bits+0x56>
 800dbc2:	0798      	lsls	r0, r3, #30
 800dbc4:	bf49      	itett	mi
 800dbc6:	085b      	lsrmi	r3, r3, #1
 800dbc8:	089b      	lsrpl	r3, r3, #2
 800dbca:	2001      	movmi	r0, #1
 800dbcc:	600b      	strmi	r3, [r1, #0]
 800dbce:	bf5c      	itt	pl
 800dbd0:	600b      	strpl	r3, [r1, #0]
 800dbd2:	2002      	movpl	r0, #2
 800dbd4:	4770      	bx	lr
 800dbd6:	b298      	uxth	r0, r3
 800dbd8:	b9a8      	cbnz	r0, 800dc06 <__lo0bits+0x52>
 800dbda:	0c1b      	lsrs	r3, r3, #16
 800dbdc:	2010      	movs	r0, #16
 800dbde:	b2da      	uxtb	r2, r3
 800dbe0:	b90a      	cbnz	r2, 800dbe6 <__lo0bits+0x32>
 800dbe2:	3008      	adds	r0, #8
 800dbe4:	0a1b      	lsrs	r3, r3, #8
 800dbe6:	071a      	lsls	r2, r3, #28
 800dbe8:	bf04      	itt	eq
 800dbea:	091b      	lsreq	r3, r3, #4
 800dbec:	3004      	addeq	r0, #4
 800dbee:	079a      	lsls	r2, r3, #30
 800dbf0:	bf04      	itt	eq
 800dbf2:	089b      	lsreq	r3, r3, #2
 800dbf4:	3002      	addeq	r0, #2
 800dbf6:	07da      	lsls	r2, r3, #31
 800dbf8:	d403      	bmi.n	800dc02 <__lo0bits+0x4e>
 800dbfa:	085b      	lsrs	r3, r3, #1
 800dbfc:	f100 0001 	add.w	r0, r0, #1
 800dc00:	d005      	beq.n	800dc0e <__lo0bits+0x5a>
 800dc02:	600b      	str	r3, [r1, #0]
 800dc04:	4770      	bx	lr
 800dc06:	4610      	mov	r0, r2
 800dc08:	e7e9      	b.n	800dbde <__lo0bits+0x2a>
 800dc0a:	2000      	movs	r0, #0
 800dc0c:	4770      	bx	lr
 800dc0e:	2020      	movs	r0, #32
 800dc10:	4770      	bx	lr
	...

0800dc14 <__i2b>:
 800dc14:	b510      	push	{r4, lr}
 800dc16:	460c      	mov	r4, r1
 800dc18:	2101      	movs	r1, #1
 800dc1a:	f7ff feb9 	bl	800d990 <_Balloc>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	b928      	cbnz	r0, 800dc2e <__i2b+0x1a>
 800dc22:	4b05      	ldr	r3, [pc, #20]	; (800dc38 <__i2b+0x24>)
 800dc24:	4805      	ldr	r0, [pc, #20]	; (800dc3c <__i2b+0x28>)
 800dc26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dc2a:	f7fe fc6b 	bl	800c504 <__assert_func>
 800dc2e:	2301      	movs	r3, #1
 800dc30:	6144      	str	r4, [r0, #20]
 800dc32:	6103      	str	r3, [r0, #16]
 800dc34:	bd10      	pop	{r4, pc}
 800dc36:	bf00      	nop
 800dc38:	0800f640 	.word	0x0800f640
 800dc3c:	0800f6cc 	.word	0x0800f6cc

0800dc40 <__multiply>:
 800dc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc44:	4691      	mov	r9, r2
 800dc46:	690a      	ldr	r2, [r1, #16]
 800dc48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	bfb8      	it	lt
 800dc50:	460b      	movlt	r3, r1
 800dc52:	460c      	mov	r4, r1
 800dc54:	bfbc      	itt	lt
 800dc56:	464c      	movlt	r4, r9
 800dc58:	4699      	movlt	r9, r3
 800dc5a:	6927      	ldr	r7, [r4, #16]
 800dc5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc60:	68a3      	ldr	r3, [r4, #8]
 800dc62:	6861      	ldr	r1, [r4, #4]
 800dc64:	eb07 060a 	add.w	r6, r7, sl
 800dc68:	42b3      	cmp	r3, r6
 800dc6a:	b085      	sub	sp, #20
 800dc6c:	bfb8      	it	lt
 800dc6e:	3101      	addlt	r1, #1
 800dc70:	f7ff fe8e 	bl	800d990 <_Balloc>
 800dc74:	b930      	cbnz	r0, 800dc84 <__multiply+0x44>
 800dc76:	4602      	mov	r2, r0
 800dc78:	4b44      	ldr	r3, [pc, #272]	; (800dd8c <__multiply+0x14c>)
 800dc7a:	4845      	ldr	r0, [pc, #276]	; (800dd90 <__multiply+0x150>)
 800dc7c:	f240 115d 	movw	r1, #349	; 0x15d
 800dc80:	f7fe fc40 	bl	800c504 <__assert_func>
 800dc84:	f100 0514 	add.w	r5, r0, #20
 800dc88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc8c:	462b      	mov	r3, r5
 800dc8e:	2200      	movs	r2, #0
 800dc90:	4543      	cmp	r3, r8
 800dc92:	d321      	bcc.n	800dcd8 <__multiply+0x98>
 800dc94:	f104 0314 	add.w	r3, r4, #20
 800dc98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc9c:	f109 0314 	add.w	r3, r9, #20
 800dca0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dca4:	9202      	str	r2, [sp, #8]
 800dca6:	1b3a      	subs	r2, r7, r4
 800dca8:	3a15      	subs	r2, #21
 800dcaa:	f022 0203 	bic.w	r2, r2, #3
 800dcae:	3204      	adds	r2, #4
 800dcb0:	f104 0115 	add.w	r1, r4, #21
 800dcb4:	428f      	cmp	r7, r1
 800dcb6:	bf38      	it	cc
 800dcb8:	2204      	movcc	r2, #4
 800dcba:	9201      	str	r2, [sp, #4]
 800dcbc:	9a02      	ldr	r2, [sp, #8]
 800dcbe:	9303      	str	r3, [sp, #12]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d80c      	bhi.n	800dcde <__multiply+0x9e>
 800dcc4:	2e00      	cmp	r6, #0
 800dcc6:	dd03      	ble.n	800dcd0 <__multiply+0x90>
 800dcc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d05a      	beq.n	800dd86 <__multiply+0x146>
 800dcd0:	6106      	str	r6, [r0, #16]
 800dcd2:	b005      	add	sp, #20
 800dcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd8:	f843 2b04 	str.w	r2, [r3], #4
 800dcdc:	e7d8      	b.n	800dc90 <__multiply+0x50>
 800dcde:	f8b3 a000 	ldrh.w	sl, [r3]
 800dce2:	f1ba 0f00 	cmp.w	sl, #0
 800dce6:	d024      	beq.n	800dd32 <__multiply+0xf2>
 800dce8:	f104 0e14 	add.w	lr, r4, #20
 800dcec:	46a9      	mov	r9, r5
 800dcee:	f04f 0c00 	mov.w	ip, #0
 800dcf2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dcf6:	f8d9 1000 	ldr.w	r1, [r9]
 800dcfa:	fa1f fb82 	uxth.w	fp, r2
 800dcfe:	b289      	uxth	r1, r1
 800dd00:	fb0a 110b 	mla	r1, sl, fp, r1
 800dd04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dd08:	f8d9 2000 	ldr.w	r2, [r9]
 800dd0c:	4461      	add	r1, ip
 800dd0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd12:	fb0a c20b 	mla	r2, sl, fp, ip
 800dd16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dd1a:	b289      	uxth	r1, r1
 800dd1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd20:	4577      	cmp	r7, lr
 800dd22:	f849 1b04 	str.w	r1, [r9], #4
 800dd26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd2a:	d8e2      	bhi.n	800dcf2 <__multiply+0xb2>
 800dd2c:	9a01      	ldr	r2, [sp, #4]
 800dd2e:	f845 c002 	str.w	ip, [r5, r2]
 800dd32:	9a03      	ldr	r2, [sp, #12]
 800dd34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd38:	3304      	adds	r3, #4
 800dd3a:	f1b9 0f00 	cmp.w	r9, #0
 800dd3e:	d020      	beq.n	800dd82 <__multiply+0x142>
 800dd40:	6829      	ldr	r1, [r5, #0]
 800dd42:	f104 0c14 	add.w	ip, r4, #20
 800dd46:	46ae      	mov	lr, r5
 800dd48:	f04f 0a00 	mov.w	sl, #0
 800dd4c:	f8bc b000 	ldrh.w	fp, [ip]
 800dd50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd54:	fb09 220b 	mla	r2, r9, fp, r2
 800dd58:	4492      	add	sl, r2
 800dd5a:	b289      	uxth	r1, r1
 800dd5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dd60:	f84e 1b04 	str.w	r1, [lr], #4
 800dd64:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dd68:	f8be 1000 	ldrh.w	r1, [lr]
 800dd6c:	0c12      	lsrs	r2, r2, #16
 800dd6e:	fb09 1102 	mla	r1, r9, r2, r1
 800dd72:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dd76:	4567      	cmp	r7, ip
 800dd78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd7c:	d8e6      	bhi.n	800dd4c <__multiply+0x10c>
 800dd7e:	9a01      	ldr	r2, [sp, #4]
 800dd80:	50a9      	str	r1, [r5, r2]
 800dd82:	3504      	adds	r5, #4
 800dd84:	e79a      	b.n	800dcbc <__multiply+0x7c>
 800dd86:	3e01      	subs	r6, #1
 800dd88:	e79c      	b.n	800dcc4 <__multiply+0x84>
 800dd8a:	bf00      	nop
 800dd8c:	0800f640 	.word	0x0800f640
 800dd90:	0800f6cc 	.word	0x0800f6cc

0800dd94 <__pow5mult>:
 800dd94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd98:	4615      	mov	r5, r2
 800dd9a:	f012 0203 	ands.w	r2, r2, #3
 800dd9e:	4606      	mov	r6, r0
 800dda0:	460f      	mov	r7, r1
 800dda2:	d007      	beq.n	800ddb4 <__pow5mult+0x20>
 800dda4:	4c25      	ldr	r4, [pc, #148]	; (800de3c <__pow5mult+0xa8>)
 800dda6:	3a01      	subs	r2, #1
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddae:	f7ff fe51 	bl	800da54 <__multadd>
 800ddb2:	4607      	mov	r7, r0
 800ddb4:	10ad      	asrs	r5, r5, #2
 800ddb6:	d03d      	beq.n	800de34 <__pow5mult+0xa0>
 800ddb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ddba:	b97c      	cbnz	r4, 800dddc <__pow5mult+0x48>
 800ddbc:	2010      	movs	r0, #16
 800ddbe:	f7ff fdbf 	bl	800d940 <malloc>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	6270      	str	r0, [r6, #36]	; 0x24
 800ddc6:	b928      	cbnz	r0, 800ddd4 <__pow5mult+0x40>
 800ddc8:	4b1d      	ldr	r3, [pc, #116]	; (800de40 <__pow5mult+0xac>)
 800ddca:	481e      	ldr	r0, [pc, #120]	; (800de44 <__pow5mult+0xb0>)
 800ddcc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ddd0:	f7fe fb98 	bl	800c504 <__assert_func>
 800ddd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddd8:	6004      	str	r4, [r0, #0]
 800ddda:	60c4      	str	r4, [r0, #12]
 800dddc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dde0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dde4:	b94c      	cbnz	r4, 800ddfa <__pow5mult+0x66>
 800dde6:	f240 2171 	movw	r1, #625	; 0x271
 800ddea:	4630      	mov	r0, r6
 800ddec:	f7ff ff12 	bl	800dc14 <__i2b>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	6003      	str	r3, [r0, #0]
 800ddfa:	f04f 0900 	mov.w	r9, #0
 800ddfe:	07eb      	lsls	r3, r5, #31
 800de00:	d50a      	bpl.n	800de18 <__pow5mult+0x84>
 800de02:	4639      	mov	r1, r7
 800de04:	4622      	mov	r2, r4
 800de06:	4630      	mov	r0, r6
 800de08:	f7ff ff1a 	bl	800dc40 <__multiply>
 800de0c:	4639      	mov	r1, r7
 800de0e:	4680      	mov	r8, r0
 800de10:	4630      	mov	r0, r6
 800de12:	f7ff fdfd 	bl	800da10 <_Bfree>
 800de16:	4647      	mov	r7, r8
 800de18:	106d      	asrs	r5, r5, #1
 800de1a:	d00b      	beq.n	800de34 <__pow5mult+0xa0>
 800de1c:	6820      	ldr	r0, [r4, #0]
 800de1e:	b938      	cbnz	r0, 800de30 <__pow5mult+0x9c>
 800de20:	4622      	mov	r2, r4
 800de22:	4621      	mov	r1, r4
 800de24:	4630      	mov	r0, r6
 800de26:	f7ff ff0b 	bl	800dc40 <__multiply>
 800de2a:	6020      	str	r0, [r4, #0]
 800de2c:	f8c0 9000 	str.w	r9, [r0]
 800de30:	4604      	mov	r4, r0
 800de32:	e7e4      	b.n	800ddfe <__pow5mult+0x6a>
 800de34:	4638      	mov	r0, r7
 800de36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de3a:	bf00      	nop
 800de3c:	0800f818 	.word	0x0800f818
 800de40:	0800f528 	.word	0x0800f528
 800de44:	0800f6cc 	.word	0x0800f6cc

0800de48 <__lshift>:
 800de48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de4c:	460c      	mov	r4, r1
 800de4e:	6849      	ldr	r1, [r1, #4]
 800de50:	6923      	ldr	r3, [r4, #16]
 800de52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de56:	68a3      	ldr	r3, [r4, #8]
 800de58:	4607      	mov	r7, r0
 800de5a:	4691      	mov	r9, r2
 800de5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de60:	f108 0601 	add.w	r6, r8, #1
 800de64:	42b3      	cmp	r3, r6
 800de66:	db0b      	blt.n	800de80 <__lshift+0x38>
 800de68:	4638      	mov	r0, r7
 800de6a:	f7ff fd91 	bl	800d990 <_Balloc>
 800de6e:	4605      	mov	r5, r0
 800de70:	b948      	cbnz	r0, 800de86 <__lshift+0x3e>
 800de72:	4602      	mov	r2, r0
 800de74:	4b2a      	ldr	r3, [pc, #168]	; (800df20 <__lshift+0xd8>)
 800de76:	482b      	ldr	r0, [pc, #172]	; (800df24 <__lshift+0xdc>)
 800de78:	f240 11d9 	movw	r1, #473	; 0x1d9
 800de7c:	f7fe fb42 	bl	800c504 <__assert_func>
 800de80:	3101      	adds	r1, #1
 800de82:	005b      	lsls	r3, r3, #1
 800de84:	e7ee      	b.n	800de64 <__lshift+0x1c>
 800de86:	2300      	movs	r3, #0
 800de88:	f100 0114 	add.w	r1, r0, #20
 800de8c:	f100 0210 	add.w	r2, r0, #16
 800de90:	4618      	mov	r0, r3
 800de92:	4553      	cmp	r3, sl
 800de94:	db37      	blt.n	800df06 <__lshift+0xbe>
 800de96:	6920      	ldr	r0, [r4, #16]
 800de98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de9c:	f104 0314 	add.w	r3, r4, #20
 800dea0:	f019 091f 	ands.w	r9, r9, #31
 800dea4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dea8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800deac:	d02f      	beq.n	800df0e <__lshift+0xc6>
 800deae:	f1c9 0e20 	rsb	lr, r9, #32
 800deb2:	468a      	mov	sl, r1
 800deb4:	f04f 0c00 	mov.w	ip, #0
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	fa02 f209 	lsl.w	r2, r2, r9
 800debe:	ea42 020c 	orr.w	r2, r2, ip
 800dec2:	f84a 2b04 	str.w	r2, [sl], #4
 800dec6:	f853 2b04 	ldr.w	r2, [r3], #4
 800deca:	4298      	cmp	r0, r3
 800decc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ded0:	d8f2      	bhi.n	800deb8 <__lshift+0x70>
 800ded2:	1b03      	subs	r3, r0, r4
 800ded4:	3b15      	subs	r3, #21
 800ded6:	f023 0303 	bic.w	r3, r3, #3
 800deda:	3304      	adds	r3, #4
 800dedc:	f104 0215 	add.w	r2, r4, #21
 800dee0:	4290      	cmp	r0, r2
 800dee2:	bf38      	it	cc
 800dee4:	2304      	movcc	r3, #4
 800dee6:	f841 c003 	str.w	ip, [r1, r3]
 800deea:	f1bc 0f00 	cmp.w	ip, #0
 800deee:	d001      	beq.n	800def4 <__lshift+0xac>
 800def0:	f108 0602 	add.w	r6, r8, #2
 800def4:	3e01      	subs	r6, #1
 800def6:	4638      	mov	r0, r7
 800def8:	612e      	str	r6, [r5, #16]
 800defa:	4621      	mov	r1, r4
 800defc:	f7ff fd88 	bl	800da10 <_Bfree>
 800df00:	4628      	mov	r0, r5
 800df02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df06:	f842 0f04 	str.w	r0, [r2, #4]!
 800df0a:	3301      	adds	r3, #1
 800df0c:	e7c1      	b.n	800de92 <__lshift+0x4a>
 800df0e:	3904      	subs	r1, #4
 800df10:	f853 2b04 	ldr.w	r2, [r3], #4
 800df14:	f841 2f04 	str.w	r2, [r1, #4]!
 800df18:	4298      	cmp	r0, r3
 800df1a:	d8f9      	bhi.n	800df10 <__lshift+0xc8>
 800df1c:	e7ea      	b.n	800def4 <__lshift+0xac>
 800df1e:	bf00      	nop
 800df20:	0800f640 	.word	0x0800f640
 800df24:	0800f6cc 	.word	0x0800f6cc

0800df28 <__mcmp>:
 800df28:	b530      	push	{r4, r5, lr}
 800df2a:	6902      	ldr	r2, [r0, #16]
 800df2c:	690c      	ldr	r4, [r1, #16]
 800df2e:	1b12      	subs	r2, r2, r4
 800df30:	d10e      	bne.n	800df50 <__mcmp+0x28>
 800df32:	f100 0314 	add.w	r3, r0, #20
 800df36:	3114      	adds	r1, #20
 800df38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800df3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800df40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800df44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df48:	42a5      	cmp	r5, r4
 800df4a:	d003      	beq.n	800df54 <__mcmp+0x2c>
 800df4c:	d305      	bcc.n	800df5a <__mcmp+0x32>
 800df4e:	2201      	movs	r2, #1
 800df50:	4610      	mov	r0, r2
 800df52:	bd30      	pop	{r4, r5, pc}
 800df54:	4283      	cmp	r3, r0
 800df56:	d3f3      	bcc.n	800df40 <__mcmp+0x18>
 800df58:	e7fa      	b.n	800df50 <__mcmp+0x28>
 800df5a:	f04f 32ff 	mov.w	r2, #4294967295
 800df5e:	e7f7      	b.n	800df50 <__mcmp+0x28>

0800df60 <__mdiff>:
 800df60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df64:	460c      	mov	r4, r1
 800df66:	4606      	mov	r6, r0
 800df68:	4611      	mov	r1, r2
 800df6a:	4620      	mov	r0, r4
 800df6c:	4690      	mov	r8, r2
 800df6e:	f7ff ffdb 	bl	800df28 <__mcmp>
 800df72:	1e05      	subs	r5, r0, #0
 800df74:	d110      	bne.n	800df98 <__mdiff+0x38>
 800df76:	4629      	mov	r1, r5
 800df78:	4630      	mov	r0, r6
 800df7a:	f7ff fd09 	bl	800d990 <_Balloc>
 800df7e:	b930      	cbnz	r0, 800df8e <__mdiff+0x2e>
 800df80:	4b3a      	ldr	r3, [pc, #232]	; (800e06c <__mdiff+0x10c>)
 800df82:	4602      	mov	r2, r0
 800df84:	f240 2132 	movw	r1, #562	; 0x232
 800df88:	4839      	ldr	r0, [pc, #228]	; (800e070 <__mdiff+0x110>)
 800df8a:	f7fe fabb 	bl	800c504 <__assert_func>
 800df8e:	2301      	movs	r3, #1
 800df90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df98:	bfa4      	itt	ge
 800df9a:	4643      	movge	r3, r8
 800df9c:	46a0      	movge	r8, r4
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dfa4:	bfa6      	itte	ge
 800dfa6:	461c      	movge	r4, r3
 800dfa8:	2500      	movge	r5, #0
 800dfaa:	2501      	movlt	r5, #1
 800dfac:	f7ff fcf0 	bl	800d990 <_Balloc>
 800dfb0:	b920      	cbnz	r0, 800dfbc <__mdiff+0x5c>
 800dfb2:	4b2e      	ldr	r3, [pc, #184]	; (800e06c <__mdiff+0x10c>)
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dfba:	e7e5      	b.n	800df88 <__mdiff+0x28>
 800dfbc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dfc0:	6926      	ldr	r6, [r4, #16]
 800dfc2:	60c5      	str	r5, [r0, #12]
 800dfc4:	f104 0914 	add.w	r9, r4, #20
 800dfc8:	f108 0514 	add.w	r5, r8, #20
 800dfcc:	f100 0e14 	add.w	lr, r0, #20
 800dfd0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dfd4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dfd8:	f108 0210 	add.w	r2, r8, #16
 800dfdc:	46f2      	mov	sl, lr
 800dfde:	2100      	movs	r1, #0
 800dfe0:	f859 3b04 	ldr.w	r3, [r9], #4
 800dfe4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dfe8:	fa1f f883 	uxth.w	r8, r3
 800dfec:	fa11 f18b 	uxtah	r1, r1, fp
 800dff0:	0c1b      	lsrs	r3, r3, #16
 800dff2:	eba1 0808 	sub.w	r8, r1, r8
 800dff6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dffa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dffe:	fa1f f888 	uxth.w	r8, r8
 800e002:	1419      	asrs	r1, r3, #16
 800e004:	454e      	cmp	r6, r9
 800e006:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e00a:	f84a 3b04 	str.w	r3, [sl], #4
 800e00e:	d8e7      	bhi.n	800dfe0 <__mdiff+0x80>
 800e010:	1b33      	subs	r3, r6, r4
 800e012:	3b15      	subs	r3, #21
 800e014:	f023 0303 	bic.w	r3, r3, #3
 800e018:	3304      	adds	r3, #4
 800e01a:	3415      	adds	r4, #21
 800e01c:	42a6      	cmp	r6, r4
 800e01e:	bf38      	it	cc
 800e020:	2304      	movcc	r3, #4
 800e022:	441d      	add	r5, r3
 800e024:	4473      	add	r3, lr
 800e026:	469e      	mov	lr, r3
 800e028:	462e      	mov	r6, r5
 800e02a:	4566      	cmp	r6, ip
 800e02c:	d30e      	bcc.n	800e04c <__mdiff+0xec>
 800e02e:	f10c 0203 	add.w	r2, ip, #3
 800e032:	1b52      	subs	r2, r2, r5
 800e034:	f022 0203 	bic.w	r2, r2, #3
 800e038:	3d03      	subs	r5, #3
 800e03a:	45ac      	cmp	ip, r5
 800e03c:	bf38      	it	cc
 800e03e:	2200      	movcc	r2, #0
 800e040:	441a      	add	r2, r3
 800e042:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e046:	b17b      	cbz	r3, 800e068 <__mdiff+0x108>
 800e048:	6107      	str	r7, [r0, #16]
 800e04a:	e7a3      	b.n	800df94 <__mdiff+0x34>
 800e04c:	f856 8b04 	ldr.w	r8, [r6], #4
 800e050:	fa11 f288 	uxtah	r2, r1, r8
 800e054:	1414      	asrs	r4, r2, #16
 800e056:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e05a:	b292      	uxth	r2, r2
 800e05c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e060:	f84e 2b04 	str.w	r2, [lr], #4
 800e064:	1421      	asrs	r1, r4, #16
 800e066:	e7e0      	b.n	800e02a <__mdiff+0xca>
 800e068:	3f01      	subs	r7, #1
 800e06a:	e7ea      	b.n	800e042 <__mdiff+0xe2>
 800e06c:	0800f640 	.word	0x0800f640
 800e070:	0800f6cc 	.word	0x0800f6cc

0800e074 <__ulp>:
 800e074:	b082      	sub	sp, #8
 800e076:	ed8d 0b00 	vstr	d0, [sp]
 800e07a:	9b01      	ldr	r3, [sp, #4]
 800e07c:	4912      	ldr	r1, [pc, #72]	; (800e0c8 <__ulp+0x54>)
 800e07e:	4019      	ands	r1, r3
 800e080:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e084:	2900      	cmp	r1, #0
 800e086:	dd05      	ble.n	800e094 <__ulp+0x20>
 800e088:	2200      	movs	r2, #0
 800e08a:	460b      	mov	r3, r1
 800e08c:	ec43 2b10 	vmov	d0, r2, r3
 800e090:	b002      	add	sp, #8
 800e092:	4770      	bx	lr
 800e094:	4249      	negs	r1, r1
 800e096:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e09a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e09e:	f04f 0200 	mov.w	r2, #0
 800e0a2:	f04f 0300 	mov.w	r3, #0
 800e0a6:	da04      	bge.n	800e0b2 <__ulp+0x3e>
 800e0a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e0ac:	fa41 f300 	asr.w	r3, r1, r0
 800e0b0:	e7ec      	b.n	800e08c <__ulp+0x18>
 800e0b2:	f1a0 0114 	sub.w	r1, r0, #20
 800e0b6:	291e      	cmp	r1, #30
 800e0b8:	bfda      	itte	le
 800e0ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e0be:	fa20 f101 	lsrle.w	r1, r0, r1
 800e0c2:	2101      	movgt	r1, #1
 800e0c4:	460a      	mov	r2, r1
 800e0c6:	e7e1      	b.n	800e08c <__ulp+0x18>
 800e0c8:	7ff00000 	.word	0x7ff00000

0800e0cc <__b2d>:
 800e0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ce:	6905      	ldr	r5, [r0, #16]
 800e0d0:	f100 0714 	add.w	r7, r0, #20
 800e0d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e0d8:	1f2e      	subs	r6, r5, #4
 800e0da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f7ff fd48 	bl	800db74 <__hi0bits>
 800e0e4:	f1c0 0320 	rsb	r3, r0, #32
 800e0e8:	280a      	cmp	r0, #10
 800e0ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e168 <__b2d+0x9c>
 800e0ee:	600b      	str	r3, [r1, #0]
 800e0f0:	dc14      	bgt.n	800e11c <__b2d+0x50>
 800e0f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800e0f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800e0fa:	42b7      	cmp	r7, r6
 800e0fc:	ea41 030c 	orr.w	r3, r1, ip
 800e100:	bf34      	ite	cc
 800e102:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e106:	2100      	movcs	r1, #0
 800e108:	3015      	adds	r0, #21
 800e10a:	fa04 f000 	lsl.w	r0, r4, r0
 800e10e:	fa21 f10e 	lsr.w	r1, r1, lr
 800e112:	ea40 0201 	orr.w	r2, r0, r1
 800e116:	ec43 2b10 	vmov	d0, r2, r3
 800e11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e11c:	42b7      	cmp	r7, r6
 800e11e:	bf3a      	itte	cc
 800e120:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e124:	f1a5 0608 	subcc.w	r6, r5, #8
 800e128:	2100      	movcs	r1, #0
 800e12a:	380b      	subs	r0, #11
 800e12c:	d017      	beq.n	800e15e <__b2d+0x92>
 800e12e:	f1c0 0c20 	rsb	ip, r0, #32
 800e132:	fa04 f500 	lsl.w	r5, r4, r0
 800e136:	42be      	cmp	r6, r7
 800e138:	fa21 f40c 	lsr.w	r4, r1, ip
 800e13c:	ea45 0504 	orr.w	r5, r5, r4
 800e140:	bf8c      	ite	hi
 800e142:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e146:	2400      	movls	r4, #0
 800e148:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e14c:	fa01 f000 	lsl.w	r0, r1, r0
 800e150:	fa24 f40c 	lsr.w	r4, r4, ip
 800e154:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e158:	ea40 0204 	orr.w	r2, r0, r4
 800e15c:	e7db      	b.n	800e116 <__b2d+0x4a>
 800e15e:	ea44 030c 	orr.w	r3, r4, ip
 800e162:	460a      	mov	r2, r1
 800e164:	e7d7      	b.n	800e116 <__b2d+0x4a>
 800e166:	bf00      	nop
 800e168:	3ff00000 	.word	0x3ff00000

0800e16c <__d2b>:
 800e16c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e170:	4689      	mov	r9, r1
 800e172:	2101      	movs	r1, #1
 800e174:	ec57 6b10 	vmov	r6, r7, d0
 800e178:	4690      	mov	r8, r2
 800e17a:	f7ff fc09 	bl	800d990 <_Balloc>
 800e17e:	4604      	mov	r4, r0
 800e180:	b930      	cbnz	r0, 800e190 <__d2b+0x24>
 800e182:	4602      	mov	r2, r0
 800e184:	4b25      	ldr	r3, [pc, #148]	; (800e21c <__d2b+0xb0>)
 800e186:	4826      	ldr	r0, [pc, #152]	; (800e220 <__d2b+0xb4>)
 800e188:	f240 310a 	movw	r1, #778	; 0x30a
 800e18c:	f7fe f9ba 	bl	800c504 <__assert_func>
 800e190:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e194:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e198:	bb35      	cbnz	r5, 800e1e8 <__d2b+0x7c>
 800e19a:	2e00      	cmp	r6, #0
 800e19c:	9301      	str	r3, [sp, #4]
 800e19e:	d028      	beq.n	800e1f2 <__d2b+0x86>
 800e1a0:	4668      	mov	r0, sp
 800e1a2:	9600      	str	r6, [sp, #0]
 800e1a4:	f7ff fd06 	bl	800dbb4 <__lo0bits>
 800e1a8:	9900      	ldr	r1, [sp, #0]
 800e1aa:	b300      	cbz	r0, 800e1ee <__d2b+0x82>
 800e1ac:	9a01      	ldr	r2, [sp, #4]
 800e1ae:	f1c0 0320 	rsb	r3, r0, #32
 800e1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1b6:	430b      	orrs	r3, r1
 800e1b8:	40c2      	lsrs	r2, r0
 800e1ba:	6163      	str	r3, [r4, #20]
 800e1bc:	9201      	str	r2, [sp, #4]
 800e1be:	9b01      	ldr	r3, [sp, #4]
 800e1c0:	61a3      	str	r3, [r4, #24]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	bf14      	ite	ne
 800e1c6:	2202      	movne	r2, #2
 800e1c8:	2201      	moveq	r2, #1
 800e1ca:	6122      	str	r2, [r4, #16]
 800e1cc:	b1d5      	cbz	r5, 800e204 <__d2b+0x98>
 800e1ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e1d2:	4405      	add	r5, r0
 800e1d4:	f8c9 5000 	str.w	r5, [r9]
 800e1d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e1dc:	f8c8 0000 	str.w	r0, [r8]
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	b003      	add	sp, #12
 800e1e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1ec:	e7d5      	b.n	800e19a <__d2b+0x2e>
 800e1ee:	6161      	str	r1, [r4, #20]
 800e1f0:	e7e5      	b.n	800e1be <__d2b+0x52>
 800e1f2:	a801      	add	r0, sp, #4
 800e1f4:	f7ff fcde 	bl	800dbb4 <__lo0bits>
 800e1f8:	9b01      	ldr	r3, [sp, #4]
 800e1fa:	6163      	str	r3, [r4, #20]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	6122      	str	r2, [r4, #16]
 800e200:	3020      	adds	r0, #32
 800e202:	e7e3      	b.n	800e1cc <__d2b+0x60>
 800e204:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e208:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e20c:	f8c9 0000 	str.w	r0, [r9]
 800e210:	6918      	ldr	r0, [r3, #16]
 800e212:	f7ff fcaf 	bl	800db74 <__hi0bits>
 800e216:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e21a:	e7df      	b.n	800e1dc <__d2b+0x70>
 800e21c:	0800f640 	.word	0x0800f640
 800e220:	0800f6cc 	.word	0x0800f6cc

0800e224 <__ratio>:
 800e224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e228:	4688      	mov	r8, r1
 800e22a:	4669      	mov	r1, sp
 800e22c:	4681      	mov	r9, r0
 800e22e:	f7ff ff4d 	bl	800e0cc <__b2d>
 800e232:	a901      	add	r1, sp, #4
 800e234:	4640      	mov	r0, r8
 800e236:	ec55 4b10 	vmov	r4, r5, d0
 800e23a:	f7ff ff47 	bl	800e0cc <__b2d>
 800e23e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e242:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e246:	eba3 0c02 	sub.w	ip, r3, r2
 800e24a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e24e:	1a9b      	subs	r3, r3, r2
 800e250:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e254:	ec51 0b10 	vmov	r0, r1, d0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	bfd6      	itet	le
 800e25c:	460a      	movle	r2, r1
 800e25e:	462a      	movgt	r2, r5
 800e260:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e264:	468b      	mov	fp, r1
 800e266:	462f      	mov	r7, r5
 800e268:	bfd4      	ite	le
 800e26a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e26e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e272:	4620      	mov	r0, r4
 800e274:	ee10 2a10 	vmov	r2, s0
 800e278:	465b      	mov	r3, fp
 800e27a:	4639      	mov	r1, r7
 800e27c:	f7f2 fb1e 	bl	80008bc <__aeabi_ddiv>
 800e280:	ec41 0b10 	vmov	d0, r0, r1
 800e284:	b003      	add	sp, #12
 800e286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e28a <__copybits>:
 800e28a:	3901      	subs	r1, #1
 800e28c:	b570      	push	{r4, r5, r6, lr}
 800e28e:	1149      	asrs	r1, r1, #5
 800e290:	6914      	ldr	r4, [r2, #16]
 800e292:	3101      	adds	r1, #1
 800e294:	f102 0314 	add.w	r3, r2, #20
 800e298:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e29c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e2a0:	1f05      	subs	r5, r0, #4
 800e2a2:	42a3      	cmp	r3, r4
 800e2a4:	d30c      	bcc.n	800e2c0 <__copybits+0x36>
 800e2a6:	1aa3      	subs	r3, r4, r2
 800e2a8:	3b11      	subs	r3, #17
 800e2aa:	f023 0303 	bic.w	r3, r3, #3
 800e2ae:	3211      	adds	r2, #17
 800e2b0:	42a2      	cmp	r2, r4
 800e2b2:	bf88      	it	hi
 800e2b4:	2300      	movhi	r3, #0
 800e2b6:	4418      	add	r0, r3
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	4288      	cmp	r0, r1
 800e2bc:	d305      	bcc.n	800e2ca <__copybits+0x40>
 800e2be:	bd70      	pop	{r4, r5, r6, pc}
 800e2c0:	f853 6b04 	ldr.w	r6, [r3], #4
 800e2c4:	f845 6f04 	str.w	r6, [r5, #4]!
 800e2c8:	e7eb      	b.n	800e2a2 <__copybits+0x18>
 800e2ca:	f840 3b04 	str.w	r3, [r0], #4
 800e2ce:	e7f4      	b.n	800e2ba <__copybits+0x30>

0800e2d0 <__any_on>:
 800e2d0:	f100 0214 	add.w	r2, r0, #20
 800e2d4:	6900      	ldr	r0, [r0, #16]
 800e2d6:	114b      	asrs	r3, r1, #5
 800e2d8:	4298      	cmp	r0, r3
 800e2da:	b510      	push	{r4, lr}
 800e2dc:	db11      	blt.n	800e302 <__any_on+0x32>
 800e2de:	dd0a      	ble.n	800e2f6 <__any_on+0x26>
 800e2e0:	f011 011f 	ands.w	r1, r1, #31
 800e2e4:	d007      	beq.n	800e2f6 <__any_on+0x26>
 800e2e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e2ea:	fa24 f001 	lsr.w	r0, r4, r1
 800e2ee:	fa00 f101 	lsl.w	r1, r0, r1
 800e2f2:	428c      	cmp	r4, r1
 800e2f4:	d10b      	bne.n	800e30e <__any_on+0x3e>
 800e2f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d803      	bhi.n	800e306 <__any_on+0x36>
 800e2fe:	2000      	movs	r0, #0
 800e300:	bd10      	pop	{r4, pc}
 800e302:	4603      	mov	r3, r0
 800e304:	e7f7      	b.n	800e2f6 <__any_on+0x26>
 800e306:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e30a:	2900      	cmp	r1, #0
 800e30c:	d0f5      	beq.n	800e2fa <__any_on+0x2a>
 800e30e:	2001      	movs	r0, #1
 800e310:	e7f6      	b.n	800e300 <__any_on+0x30>

0800e312 <_calloc_r>:
 800e312:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e314:	fba1 2402 	umull	r2, r4, r1, r2
 800e318:	b94c      	cbnz	r4, 800e32e <_calloc_r+0x1c>
 800e31a:	4611      	mov	r1, r2
 800e31c:	9201      	str	r2, [sp, #4]
 800e31e:	f000 f87b 	bl	800e418 <_malloc_r>
 800e322:	9a01      	ldr	r2, [sp, #4]
 800e324:	4605      	mov	r5, r0
 800e326:	b930      	cbnz	r0, 800e336 <_calloc_r+0x24>
 800e328:	4628      	mov	r0, r5
 800e32a:	b003      	add	sp, #12
 800e32c:	bd30      	pop	{r4, r5, pc}
 800e32e:	220c      	movs	r2, #12
 800e330:	6002      	str	r2, [r0, #0]
 800e332:	2500      	movs	r5, #0
 800e334:	e7f8      	b.n	800e328 <_calloc_r+0x16>
 800e336:	4621      	mov	r1, r4
 800e338:	f7fc fdc8 	bl	800aecc <memset>
 800e33c:	e7f4      	b.n	800e328 <_calloc_r+0x16>
	...

0800e340 <_free_r>:
 800e340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e342:	2900      	cmp	r1, #0
 800e344:	d044      	beq.n	800e3d0 <_free_r+0x90>
 800e346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e34a:	9001      	str	r0, [sp, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f1a1 0404 	sub.w	r4, r1, #4
 800e352:	bfb8      	it	lt
 800e354:	18e4      	addlt	r4, r4, r3
 800e356:	f000 fec7 	bl	800f0e8 <__malloc_lock>
 800e35a:	4a1e      	ldr	r2, [pc, #120]	; (800e3d4 <_free_r+0x94>)
 800e35c:	9801      	ldr	r0, [sp, #4]
 800e35e:	6813      	ldr	r3, [r2, #0]
 800e360:	b933      	cbnz	r3, 800e370 <_free_r+0x30>
 800e362:	6063      	str	r3, [r4, #4]
 800e364:	6014      	str	r4, [r2, #0]
 800e366:	b003      	add	sp, #12
 800e368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e36c:	f000 bec2 	b.w	800f0f4 <__malloc_unlock>
 800e370:	42a3      	cmp	r3, r4
 800e372:	d908      	bls.n	800e386 <_free_r+0x46>
 800e374:	6825      	ldr	r5, [r4, #0]
 800e376:	1961      	adds	r1, r4, r5
 800e378:	428b      	cmp	r3, r1
 800e37a:	bf01      	itttt	eq
 800e37c:	6819      	ldreq	r1, [r3, #0]
 800e37e:	685b      	ldreq	r3, [r3, #4]
 800e380:	1949      	addeq	r1, r1, r5
 800e382:	6021      	streq	r1, [r4, #0]
 800e384:	e7ed      	b.n	800e362 <_free_r+0x22>
 800e386:	461a      	mov	r2, r3
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	b10b      	cbz	r3, 800e390 <_free_r+0x50>
 800e38c:	42a3      	cmp	r3, r4
 800e38e:	d9fa      	bls.n	800e386 <_free_r+0x46>
 800e390:	6811      	ldr	r1, [r2, #0]
 800e392:	1855      	adds	r5, r2, r1
 800e394:	42a5      	cmp	r5, r4
 800e396:	d10b      	bne.n	800e3b0 <_free_r+0x70>
 800e398:	6824      	ldr	r4, [r4, #0]
 800e39a:	4421      	add	r1, r4
 800e39c:	1854      	adds	r4, r2, r1
 800e39e:	42a3      	cmp	r3, r4
 800e3a0:	6011      	str	r1, [r2, #0]
 800e3a2:	d1e0      	bne.n	800e366 <_free_r+0x26>
 800e3a4:	681c      	ldr	r4, [r3, #0]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	6053      	str	r3, [r2, #4]
 800e3aa:	4421      	add	r1, r4
 800e3ac:	6011      	str	r1, [r2, #0]
 800e3ae:	e7da      	b.n	800e366 <_free_r+0x26>
 800e3b0:	d902      	bls.n	800e3b8 <_free_r+0x78>
 800e3b2:	230c      	movs	r3, #12
 800e3b4:	6003      	str	r3, [r0, #0]
 800e3b6:	e7d6      	b.n	800e366 <_free_r+0x26>
 800e3b8:	6825      	ldr	r5, [r4, #0]
 800e3ba:	1961      	adds	r1, r4, r5
 800e3bc:	428b      	cmp	r3, r1
 800e3be:	bf04      	itt	eq
 800e3c0:	6819      	ldreq	r1, [r3, #0]
 800e3c2:	685b      	ldreq	r3, [r3, #4]
 800e3c4:	6063      	str	r3, [r4, #4]
 800e3c6:	bf04      	itt	eq
 800e3c8:	1949      	addeq	r1, r1, r5
 800e3ca:	6021      	streq	r1, [r4, #0]
 800e3cc:	6054      	str	r4, [r2, #4]
 800e3ce:	e7ca      	b.n	800e366 <_free_r+0x26>
 800e3d0:	b003      	add	sp, #12
 800e3d2:	bd30      	pop	{r4, r5, pc}
 800e3d4:	200007c0 	.word	0x200007c0

0800e3d8 <sbrk_aligned>:
 800e3d8:	b570      	push	{r4, r5, r6, lr}
 800e3da:	4e0e      	ldr	r6, [pc, #56]	; (800e414 <sbrk_aligned+0x3c>)
 800e3dc:	460c      	mov	r4, r1
 800e3de:	6831      	ldr	r1, [r6, #0]
 800e3e0:	4605      	mov	r5, r0
 800e3e2:	b911      	cbnz	r1, 800e3ea <sbrk_aligned+0x12>
 800e3e4:	f000 fb4c 	bl	800ea80 <_sbrk_r>
 800e3e8:	6030      	str	r0, [r6, #0]
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	f000 fb47 	bl	800ea80 <_sbrk_r>
 800e3f2:	1c43      	adds	r3, r0, #1
 800e3f4:	d00a      	beq.n	800e40c <sbrk_aligned+0x34>
 800e3f6:	1cc4      	adds	r4, r0, #3
 800e3f8:	f024 0403 	bic.w	r4, r4, #3
 800e3fc:	42a0      	cmp	r0, r4
 800e3fe:	d007      	beq.n	800e410 <sbrk_aligned+0x38>
 800e400:	1a21      	subs	r1, r4, r0
 800e402:	4628      	mov	r0, r5
 800e404:	f000 fb3c 	bl	800ea80 <_sbrk_r>
 800e408:	3001      	adds	r0, #1
 800e40a:	d101      	bne.n	800e410 <sbrk_aligned+0x38>
 800e40c:	f04f 34ff 	mov.w	r4, #4294967295
 800e410:	4620      	mov	r0, r4
 800e412:	bd70      	pop	{r4, r5, r6, pc}
 800e414:	200007c4 	.word	0x200007c4

0800e418 <_malloc_r>:
 800e418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e41c:	1ccd      	adds	r5, r1, #3
 800e41e:	f025 0503 	bic.w	r5, r5, #3
 800e422:	3508      	adds	r5, #8
 800e424:	2d0c      	cmp	r5, #12
 800e426:	bf38      	it	cc
 800e428:	250c      	movcc	r5, #12
 800e42a:	2d00      	cmp	r5, #0
 800e42c:	4607      	mov	r7, r0
 800e42e:	db01      	blt.n	800e434 <_malloc_r+0x1c>
 800e430:	42a9      	cmp	r1, r5
 800e432:	d905      	bls.n	800e440 <_malloc_r+0x28>
 800e434:	230c      	movs	r3, #12
 800e436:	603b      	str	r3, [r7, #0]
 800e438:	2600      	movs	r6, #0
 800e43a:	4630      	mov	r0, r6
 800e43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e440:	4e2e      	ldr	r6, [pc, #184]	; (800e4fc <_malloc_r+0xe4>)
 800e442:	f000 fe51 	bl	800f0e8 <__malloc_lock>
 800e446:	6833      	ldr	r3, [r6, #0]
 800e448:	461c      	mov	r4, r3
 800e44a:	bb34      	cbnz	r4, 800e49a <_malloc_r+0x82>
 800e44c:	4629      	mov	r1, r5
 800e44e:	4638      	mov	r0, r7
 800e450:	f7ff ffc2 	bl	800e3d8 <sbrk_aligned>
 800e454:	1c43      	adds	r3, r0, #1
 800e456:	4604      	mov	r4, r0
 800e458:	d14d      	bne.n	800e4f6 <_malloc_r+0xde>
 800e45a:	6834      	ldr	r4, [r6, #0]
 800e45c:	4626      	mov	r6, r4
 800e45e:	2e00      	cmp	r6, #0
 800e460:	d140      	bne.n	800e4e4 <_malloc_r+0xcc>
 800e462:	6823      	ldr	r3, [r4, #0]
 800e464:	4631      	mov	r1, r6
 800e466:	4638      	mov	r0, r7
 800e468:	eb04 0803 	add.w	r8, r4, r3
 800e46c:	f000 fb08 	bl	800ea80 <_sbrk_r>
 800e470:	4580      	cmp	r8, r0
 800e472:	d13a      	bne.n	800e4ea <_malloc_r+0xd2>
 800e474:	6821      	ldr	r1, [r4, #0]
 800e476:	3503      	adds	r5, #3
 800e478:	1a6d      	subs	r5, r5, r1
 800e47a:	f025 0503 	bic.w	r5, r5, #3
 800e47e:	3508      	adds	r5, #8
 800e480:	2d0c      	cmp	r5, #12
 800e482:	bf38      	it	cc
 800e484:	250c      	movcc	r5, #12
 800e486:	4629      	mov	r1, r5
 800e488:	4638      	mov	r0, r7
 800e48a:	f7ff ffa5 	bl	800e3d8 <sbrk_aligned>
 800e48e:	3001      	adds	r0, #1
 800e490:	d02b      	beq.n	800e4ea <_malloc_r+0xd2>
 800e492:	6823      	ldr	r3, [r4, #0]
 800e494:	442b      	add	r3, r5
 800e496:	6023      	str	r3, [r4, #0]
 800e498:	e00e      	b.n	800e4b8 <_malloc_r+0xa0>
 800e49a:	6822      	ldr	r2, [r4, #0]
 800e49c:	1b52      	subs	r2, r2, r5
 800e49e:	d41e      	bmi.n	800e4de <_malloc_r+0xc6>
 800e4a0:	2a0b      	cmp	r2, #11
 800e4a2:	d916      	bls.n	800e4d2 <_malloc_r+0xba>
 800e4a4:	1961      	adds	r1, r4, r5
 800e4a6:	42a3      	cmp	r3, r4
 800e4a8:	6025      	str	r5, [r4, #0]
 800e4aa:	bf18      	it	ne
 800e4ac:	6059      	strne	r1, [r3, #4]
 800e4ae:	6863      	ldr	r3, [r4, #4]
 800e4b0:	bf08      	it	eq
 800e4b2:	6031      	streq	r1, [r6, #0]
 800e4b4:	5162      	str	r2, [r4, r5]
 800e4b6:	604b      	str	r3, [r1, #4]
 800e4b8:	4638      	mov	r0, r7
 800e4ba:	f104 060b 	add.w	r6, r4, #11
 800e4be:	f000 fe19 	bl	800f0f4 <__malloc_unlock>
 800e4c2:	f026 0607 	bic.w	r6, r6, #7
 800e4c6:	1d23      	adds	r3, r4, #4
 800e4c8:	1af2      	subs	r2, r6, r3
 800e4ca:	d0b6      	beq.n	800e43a <_malloc_r+0x22>
 800e4cc:	1b9b      	subs	r3, r3, r6
 800e4ce:	50a3      	str	r3, [r4, r2]
 800e4d0:	e7b3      	b.n	800e43a <_malloc_r+0x22>
 800e4d2:	6862      	ldr	r2, [r4, #4]
 800e4d4:	42a3      	cmp	r3, r4
 800e4d6:	bf0c      	ite	eq
 800e4d8:	6032      	streq	r2, [r6, #0]
 800e4da:	605a      	strne	r2, [r3, #4]
 800e4dc:	e7ec      	b.n	800e4b8 <_malloc_r+0xa0>
 800e4de:	4623      	mov	r3, r4
 800e4e0:	6864      	ldr	r4, [r4, #4]
 800e4e2:	e7b2      	b.n	800e44a <_malloc_r+0x32>
 800e4e4:	4634      	mov	r4, r6
 800e4e6:	6876      	ldr	r6, [r6, #4]
 800e4e8:	e7b9      	b.n	800e45e <_malloc_r+0x46>
 800e4ea:	230c      	movs	r3, #12
 800e4ec:	603b      	str	r3, [r7, #0]
 800e4ee:	4638      	mov	r0, r7
 800e4f0:	f000 fe00 	bl	800f0f4 <__malloc_unlock>
 800e4f4:	e7a1      	b.n	800e43a <_malloc_r+0x22>
 800e4f6:	6025      	str	r5, [r4, #0]
 800e4f8:	e7de      	b.n	800e4b8 <_malloc_r+0xa0>
 800e4fa:	bf00      	nop
 800e4fc:	200007c0 	.word	0x200007c0

0800e500 <__ssputs_r>:
 800e500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e504:	688e      	ldr	r6, [r1, #8]
 800e506:	429e      	cmp	r6, r3
 800e508:	4682      	mov	sl, r0
 800e50a:	460c      	mov	r4, r1
 800e50c:	4690      	mov	r8, r2
 800e50e:	461f      	mov	r7, r3
 800e510:	d838      	bhi.n	800e584 <__ssputs_r+0x84>
 800e512:	898a      	ldrh	r2, [r1, #12]
 800e514:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e518:	d032      	beq.n	800e580 <__ssputs_r+0x80>
 800e51a:	6825      	ldr	r5, [r4, #0]
 800e51c:	6909      	ldr	r1, [r1, #16]
 800e51e:	eba5 0901 	sub.w	r9, r5, r1
 800e522:	6965      	ldr	r5, [r4, #20]
 800e524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e528:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e52c:	3301      	adds	r3, #1
 800e52e:	444b      	add	r3, r9
 800e530:	106d      	asrs	r5, r5, #1
 800e532:	429d      	cmp	r5, r3
 800e534:	bf38      	it	cc
 800e536:	461d      	movcc	r5, r3
 800e538:	0553      	lsls	r3, r2, #21
 800e53a:	d531      	bpl.n	800e5a0 <__ssputs_r+0xa0>
 800e53c:	4629      	mov	r1, r5
 800e53e:	f7ff ff6b 	bl	800e418 <_malloc_r>
 800e542:	4606      	mov	r6, r0
 800e544:	b950      	cbnz	r0, 800e55c <__ssputs_r+0x5c>
 800e546:	230c      	movs	r3, #12
 800e548:	f8ca 3000 	str.w	r3, [sl]
 800e54c:	89a3      	ldrh	r3, [r4, #12]
 800e54e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e552:	81a3      	strh	r3, [r4, #12]
 800e554:	f04f 30ff 	mov.w	r0, #4294967295
 800e558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e55c:	6921      	ldr	r1, [r4, #16]
 800e55e:	464a      	mov	r2, r9
 800e560:	f7ff fa08 	bl	800d974 <memcpy>
 800e564:	89a3      	ldrh	r3, [r4, #12]
 800e566:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e56a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e56e:	81a3      	strh	r3, [r4, #12]
 800e570:	6126      	str	r6, [r4, #16]
 800e572:	6165      	str	r5, [r4, #20]
 800e574:	444e      	add	r6, r9
 800e576:	eba5 0509 	sub.w	r5, r5, r9
 800e57a:	6026      	str	r6, [r4, #0]
 800e57c:	60a5      	str	r5, [r4, #8]
 800e57e:	463e      	mov	r6, r7
 800e580:	42be      	cmp	r6, r7
 800e582:	d900      	bls.n	800e586 <__ssputs_r+0x86>
 800e584:	463e      	mov	r6, r7
 800e586:	6820      	ldr	r0, [r4, #0]
 800e588:	4632      	mov	r2, r6
 800e58a:	4641      	mov	r1, r8
 800e58c:	f000 fd92 	bl	800f0b4 <memmove>
 800e590:	68a3      	ldr	r3, [r4, #8]
 800e592:	1b9b      	subs	r3, r3, r6
 800e594:	60a3      	str	r3, [r4, #8]
 800e596:	6823      	ldr	r3, [r4, #0]
 800e598:	4433      	add	r3, r6
 800e59a:	6023      	str	r3, [r4, #0]
 800e59c:	2000      	movs	r0, #0
 800e59e:	e7db      	b.n	800e558 <__ssputs_r+0x58>
 800e5a0:	462a      	mov	r2, r5
 800e5a2:	f000 fdad 	bl	800f100 <_realloc_r>
 800e5a6:	4606      	mov	r6, r0
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	d1e1      	bne.n	800e570 <__ssputs_r+0x70>
 800e5ac:	6921      	ldr	r1, [r4, #16]
 800e5ae:	4650      	mov	r0, sl
 800e5b0:	f7ff fec6 	bl	800e340 <_free_r>
 800e5b4:	e7c7      	b.n	800e546 <__ssputs_r+0x46>
	...

0800e5b8 <_svfiprintf_r>:
 800e5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5bc:	4698      	mov	r8, r3
 800e5be:	898b      	ldrh	r3, [r1, #12]
 800e5c0:	061b      	lsls	r3, r3, #24
 800e5c2:	b09d      	sub	sp, #116	; 0x74
 800e5c4:	4607      	mov	r7, r0
 800e5c6:	460d      	mov	r5, r1
 800e5c8:	4614      	mov	r4, r2
 800e5ca:	d50e      	bpl.n	800e5ea <_svfiprintf_r+0x32>
 800e5cc:	690b      	ldr	r3, [r1, #16]
 800e5ce:	b963      	cbnz	r3, 800e5ea <_svfiprintf_r+0x32>
 800e5d0:	2140      	movs	r1, #64	; 0x40
 800e5d2:	f7ff ff21 	bl	800e418 <_malloc_r>
 800e5d6:	6028      	str	r0, [r5, #0]
 800e5d8:	6128      	str	r0, [r5, #16]
 800e5da:	b920      	cbnz	r0, 800e5e6 <_svfiprintf_r+0x2e>
 800e5dc:	230c      	movs	r3, #12
 800e5de:	603b      	str	r3, [r7, #0]
 800e5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e4:	e0d1      	b.n	800e78a <_svfiprintf_r+0x1d2>
 800e5e6:	2340      	movs	r3, #64	; 0x40
 800e5e8:	616b      	str	r3, [r5, #20]
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ee:	2320      	movs	r3, #32
 800e5f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5f8:	2330      	movs	r3, #48	; 0x30
 800e5fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e7a4 <_svfiprintf_r+0x1ec>
 800e5fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e602:	f04f 0901 	mov.w	r9, #1
 800e606:	4623      	mov	r3, r4
 800e608:	469a      	mov	sl, r3
 800e60a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e60e:	b10a      	cbz	r2, 800e614 <_svfiprintf_r+0x5c>
 800e610:	2a25      	cmp	r2, #37	; 0x25
 800e612:	d1f9      	bne.n	800e608 <_svfiprintf_r+0x50>
 800e614:	ebba 0b04 	subs.w	fp, sl, r4
 800e618:	d00b      	beq.n	800e632 <_svfiprintf_r+0x7a>
 800e61a:	465b      	mov	r3, fp
 800e61c:	4622      	mov	r2, r4
 800e61e:	4629      	mov	r1, r5
 800e620:	4638      	mov	r0, r7
 800e622:	f7ff ff6d 	bl	800e500 <__ssputs_r>
 800e626:	3001      	adds	r0, #1
 800e628:	f000 80aa 	beq.w	800e780 <_svfiprintf_r+0x1c8>
 800e62c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e62e:	445a      	add	r2, fp
 800e630:	9209      	str	r2, [sp, #36]	; 0x24
 800e632:	f89a 3000 	ldrb.w	r3, [sl]
 800e636:	2b00      	cmp	r3, #0
 800e638:	f000 80a2 	beq.w	800e780 <_svfiprintf_r+0x1c8>
 800e63c:	2300      	movs	r3, #0
 800e63e:	f04f 32ff 	mov.w	r2, #4294967295
 800e642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e646:	f10a 0a01 	add.w	sl, sl, #1
 800e64a:	9304      	str	r3, [sp, #16]
 800e64c:	9307      	str	r3, [sp, #28]
 800e64e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e652:	931a      	str	r3, [sp, #104]	; 0x68
 800e654:	4654      	mov	r4, sl
 800e656:	2205      	movs	r2, #5
 800e658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e65c:	4851      	ldr	r0, [pc, #324]	; (800e7a4 <_svfiprintf_r+0x1ec>)
 800e65e:	f7f1 fdf7 	bl	8000250 <memchr>
 800e662:	9a04      	ldr	r2, [sp, #16]
 800e664:	b9d8      	cbnz	r0, 800e69e <_svfiprintf_r+0xe6>
 800e666:	06d0      	lsls	r0, r2, #27
 800e668:	bf44      	itt	mi
 800e66a:	2320      	movmi	r3, #32
 800e66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e670:	0711      	lsls	r1, r2, #28
 800e672:	bf44      	itt	mi
 800e674:	232b      	movmi	r3, #43	; 0x2b
 800e676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e67a:	f89a 3000 	ldrb.w	r3, [sl]
 800e67e:	2b2a      	cmp	r3, #42	; 0x2a
 800e680:	d015      	beq.n	800e6ae <_svfiprintf_r+0xf6>
 800e682:	9a07      	ldr	r2, [sp, #28]
 800e684:	4654      	mov	r4, sl
 800e686:	2000      	movs	r0, #0
 800e688:	f04f 0c0a 	mov.w	ip, #10
 800e68c:	4621      	mov	r1, r4
 800e68e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e692:	3b30      	subs	r3, #48	; 0x30
 800e694:	2b09      	cmp	r3, #9
 800e696:	d94e      	bls.n	800e736 <_svfiprintf_r+0x17e>
 800e698:	b1b0      	cbz	r0, 800e6c8 <_svfiprintf_r+0x110>
 800e69a:	9207      	str	r2, [sp, #28]
 800e69c:	e014      	b.n	800e6c8 <_svfiprintf_r+0x110>
 800e69e:	eba0 0308 	sub.w	r3, r0, r8
 800e6a2:	fa09 f303 	lsl.w	r3, r9, r3
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	9304      	str	r3, [sp, #16]
 800e6aa:	46a2      	mov	sl, r4
 800e6ac:	e7d2      	b.n	800e654 <_svfiprintf_r+0x9c>
 800e6ae:	9b03      	ldr	r3, [sp, #12]
 800e6b0:	1d19      	adds	r1, r3, #4
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	9103      	str	r1, [sp, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	bfbb      	ittet	lt
 800e6ba:	425b      	neglt	r3, r3
 800e6bc:	f042 0202 	orrlt.w	r2, r2, #2
 800e6c0:	9307      	strge	r3, [sp, #28]
 800e6c2:	9307      	strlt	r3, [sp, #28]
 800e6c4:	bfb8      	it	lt
 800e6c6:	9204      	strlt	r2, [sp, #16]
 800e6c8:	7823      	ldrb	r3, [r4, #0]
 800e6ca:	2b2e      	cmp	r3, #46	; 0x2e
 800e6cc:	d10c      	bne.n	800e6e8 <_svfiprintf_r+0x130>
 800e6ce:	7863      	ldrb	r3, [r4, #1]
 800e6d0:	2b2a      	cmp	r3, #42	; 0x2a
 800e6d2:	d135      	bne.n	800e740 <_svfiprintf_r+0x188>
 800e6d4:	9b03      	ldr	r3, [sp, #12]
 800e6d6:	1d1a      	adds	r2, r3, #4
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	9203      	str	r2, [sp, #12]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	bfb8      	it	lt
 800e6e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6e4:	3402      	adds	r4, #2
 800e6e6:	9305      	str	r3, [sp, #20]
 800e6e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e7b4 <_svfiprintf_r+0x1fc>
 800e6ec:	7821      	ldrb	r1, [r4, #0]
 800e6ee:	2203      	movs	r2, #3
 800e6f0:	4650      	mov	r0, sl
 800e6f2:	f7f1 fdad 	bl	8000250 <memchr>
 800e6f6:	b140      	cbz	r0, 800e70a <_svfiprintf_r+0x152>
 800e6f8:	2340      	movs	r3, #64	; 0x40
 800e6fa:	eba0 000a 	sub.w	r0, r0, sl
 800e6fe:	fa03 f000 	lsl.w	r0, r3, r0
 800e702:	9b04      	ldr	r3, [sp, #16]
 800e704:	4303      	orrs	r3, r0
 800e706:	3401      	adds	r4, #1
 800e708:	9304      	str	r3, [sp, #16]
 800e70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e70e:	4826      	ldr	r0, [pc, #152]	; (800e7a8 <_svfiprintf_r+0x1f0>)
 800e710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e714:	2206      	movs	r2, #6
 800e716:	f7f1 fd9b 	bl	8000250 <memchr>
 800e71a:	2800      	cmp	r0, #0
 800e71c:	d038      	beq.n	800e790 <_svfiprintf_r+0x1d8>
 800e71e:	4b23      	ldr	r3, [pc, #140]	; (800e7ac <_svfiprintf_r+0x1f4>)
 800e720:	bb1b      	cbnz	r3, 800e76a <_svfiprintf_r+0x1b2>
 800e722:	9b03      	ldr	r3, [sp, #12]
 800e724:	3307      	adds	r3, #7
 800e726:	f023 0307 	bic.w	r3, r3, #7
 800e72a:	3308      	adds	r3, #8
 800e72c:	9303      	str	r3, [sp, #12]
 800e72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e730:	4433      	add	r3, r6
 800e732:	9309      	str	r3, [sp, #36]	; 0x24
 800e734:	e767      	b.n	800e606 <_svfiprintf_r+0x4e>
 800e736:	fb0c 3202 	mla	r2, ip, r2, r3
 800e73a:	460c      	mov	r4, r1
 800e73c:	2001      	movs	r0, #1
 800e73e:	e7a5      	b.n	800e68c <_svfiprintf_r+0xd4>
 800e740:	2300      	movs	r3, #0
 800e742:	3401      	adds	r4, #1
 800e744:	9305      	str	r3, [sp, #20]
 800e746:	4619      	mov	r1, r3
 800e748:	f04f 0c0a 	mov.w	ip, #10
 800e74c:	4620      	mov	r0, r4
 800e74e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e752:	3a30      	subs	r2, #48	; 0x30
 800e754:	2a09      	cmp	r2, #9
 800e756:	d903      	bls.n	800e760 <_svfiprintf_r+0x1a8>
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d0c5      	beq.n	800e6e8 <_svfiprintf_r+0x130>
 800e75c:	9105      	str	r1, [sp, #20]
 800e75e:	e7c3      	b.n	800e6e8 <_svfiprintf_r+0x130>
 800e760:	fb0c 2101 	mla	r1, ip, r1, r2
 800e764:	4604      	mov	r4, r0
 800e766:	2301      	movs	r3, #1
 800e768:	e7f0      	b.n	800e74c <_svfiprintf_r+0x194>
 800e76a:	ab03      	add	r3, sp, #12
 800e76c:	9300      	str	r3, [sp, #0]
 800e76e:	462a      	mov	r2, r5
 800e770:	4b0f      	ldr	r3, [pc, #60]	; (800e7b0 <_svfiprintf_r+0x1f8>)
 800e772:	a904      	add	r1, sp, #16
 800e774:	4638      	mov	r0, r7
 800e776:	f7fc fc51 	bl	800b01c <_printf_float>
 800e77a:	1c42      	adds	r2, r0, #1
 800e77c:	4606      	mov	r6, r0
 800e77e:	d1d6      	bne.n	800e72e <_svfiprintf_r+0x176>
 800e780:	89ab      	ldrh	r3, [r5, #12]
 800e782:	065b      	lsls	r3, r3, #25
 800e784:	f53f af2c 	bmi.w	800e5e0 <_svfiprintf_r+0x28>
 800e788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e78a:	b01d      	add	sp, #116	; 0x74
 800e78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e790:	ab03      	add	r3, sp, #12
 800e792:	9300      	str	r3, [sp, #0]
 800e794:	462a      	mov	r2, r5
 800e796:	4b06      	ldr	r3, [pc, #24]	; (800e7b0 <_svfiprintf_r+0x1f8>)
 800e798:	a904      	add	r1, sp, #16
 800e79a:	4638      	mov	r0, r7
 800e79c:	f7fc fee2 	bl	800b564 <_printf_i>
 800e7a0:	e7eb      	b.n	800e77a <_svfiprintf_r+0x1c2>
 800e7a2:	bf00      	nop
 800e7a4:	0800f824 	.word	0x0800f824
 800e7a8:	0800f82e 	.word	0x0800f82e
 800e7ac:	0800b01d 	.word	0x0800b01d
 800e7b0:	0800e501 	.word	0x0800e501
 800e7b4:	0800f82a 	.word	0x0800f82a

0800e7b8 <__sfputc_r>:
 800e7b8:	6893      	ldr	r3, [r2, #8]
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	b410      	push	{r4}
 800e7c0:	6093      	str	r3, [r2, #8]
 800e7c2:	da08      	bge.n	800e7d6 <__sfputc_r+0x1e>
 800e7c4:	6994      	ldr	r4, [r2, #24]
 800e7c6:	42a3      	cmp	r3, r4
 800e7c8:	db01      	blt.n	800e7ce <__sfputc_r+0x16>
 800e7ca:	290a      	cmp	r1, #10
 800e7cc:	d103      	bne.n	800e7d6 <__sfputc_r+0x1e>
 800e7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7d2:	f000 b979 	b.w	800eac8 <__swbuf_r>
 800e7d6:	6813      	ldr	r3, [r2, #0]
 800e7d8:	1c58      	adds	r0, r3, #1
 800e7da:	6010      	str	r0, [r2, #0]
 800e7dc:	7019      	strb	r1, [r3, #0]
 800e7de:	4608      	mov	r0, r1
 800e7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <__sfputs_r>:
 800e7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e8:	4606      	mov	r6, r0
 800e7ea:	460f      	mov	r7, r1
 800e7ec:	4614      	mov	r4, r2
 800e7ee:	18d5      	adds	r5, r2, r3
 800e7f0:	42ac      	cmp	r4, r5
 800e7f2:	d101      	bne.n	800e7f8 <__sfputs_r+0x12>
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	e007      	b.n	800e808 <__sfputs_r+0x22>
 800e7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7fc:	463a      	mov	r2, r7
 800e7fe:	4630      	mov	r0, r6
 800e800:	f7ff ffda 	bl	800e7b8 <__sfputc_r>
 800e804:	1c43      	adds	r3, r0, #1
 800e806:	d1f3      	bne.n	800e7f0 <__sfputs_r+0xa>
 800e808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e80c <_vfiprintf_r>:
 800e80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e810:	460d      	mov	r5, r1
 800e812:	b09d      	sub	sp, #116	; 0x74
 800e814:	4614      	mov	r4, r2
 800e816:	4698      	mov	r8, r3
 800e818:	4606      	mov	r6, r0
 800e81a:	b118      	cbz	r0, 800e824 <_vfiprintf_r+0x18>
 800e81c:	6983      	ldr	r3, [r0, #24]
 800e81e:	b90b      	cbnz	r3, 800e824 <_vfiprintf_r+0x18>
 800e820:	f000 fb42 	bl	800eea8 <__sinit>
 800e824:	4b89      	ldr	r3, [pc, #548]	; (800ea4c <_vfiprintf_r+0x240>)
 800e826:	429d      	cmp	r5, r3
 800e828:	d11b      	bne.n	800e862 <_vfiprintf_r+0x56>
 800e82a:	6875      	ldr	r5, [r6, #4]
 800e82c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e82e:	07d9      	lsls	r1, r3, #31
 800e830:	d405      	bmi.n	800e83e <_vfiprintf_r+0x32>
 800e832:	89ab      	ldrh	r3, [r5, #12]
 800e834:	059a      	lsls	r2, r3, #22
 800e836:	d402      	bmi.n	800e83e <_vfiprintf_r+0x32>
 800e838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e83a:	f000 fbd3 	bl	800efe4 <__retarget_lock_acquire_recursive>
 800e83e:	89ab      	ldrh	r3, [r5, #12]
 800e840:	071b      	lsls	r3, r3, #28
 800e842:	d501      	bpl.n	800e848 <_vfiprintf_r+0x3c>
 800e844:	692b      	ldr	r3, [r5, #16]
 800e846:	b9eb      	cbnz	r3, 800e884 <_vfiprintf_r+0x78>
 800e848:	4629      	mov	r1, r5
 800e84a:	4630      	mov	r0, r6
 800e84c:	f000 f99c 	bl	800eb88 <__swsetup_r>
 800e850:	b1c0      	cbz	r0, 800e884 <_vfiprintf_r+0x78>
 800e852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e854:	07dc      	lsls	r4, r3, #31
 800e856:	d50e      	bpl.n	800e876 <_vfiprintf_r+0x6a>
 800e858:	f04f 30ff 	mov.w	r0, #4294967295
 800e85c:	b01d      	add	sp, #116	; 0x74
 800e85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e862:	4b7b      	ldr	r3, [pc, #492]	; (800ea50 <_vfiprintf_r+0x244>)
 800e864:	429d      	cmp	r5, r3
 800e866:	d101      	bne.n	800e86c <_vfiprintf_r+0x60>
 800e868:	68b5      	ldr	r5, [r6, #8]
 800e86a:	e7df      	b.n	800e82c <_vfiprintf_r+0x20>
 800e86c:	4b79      	ldr	r3, [pc, #484]	; (800ea54 <_vfiprintf_r+0x248>)
 800e86e:	429d      	cmp	r5, r3
 800e870:	bf08      	it	eq
 800e872:	68f5      	ldreq	r5, [r6, #12]
 800e874:	e7da      	b.n	800e82c <_vfiprintf_r+0x20>
 800e876:	89ab      	ldrh	r3, [r5, #12]
 800e878:	0598      	lsls	r0, r3, #22
 800e87a:	d4ed      	bmi.n	800e858 <_vfiprintf_r+0x4c>
 800e87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e87e:	f000 fbb2 	bl	800efe6 <__retarget_lock_release_recursive>
 800e882:	e7e9      	b.n	800e858 <_vfiprintf_r+0x4c>
 800e884:	2300      	movs	r3, #0
 800e886:	9309      	str	r3, [sp, #36]	; 0x24
 800e888:	2320      	movs	r3, #32
 800e88a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e88e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e892:	2330      	movs	r3, #48	; 0x30
 800e894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ea58 <_vfiprintf_r+0x24c>
 800e898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e89c:	f04f 0901 	mov.w	r9, #1
 800e8a0:	4623      	mov	r3, r4
 800e8a2:	469a      	mov	sl, r3
 800e8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8a8:	b10a      	cbz	r2, 800e8ae <_vfiprintf_r+0xa2>
 800e8aa:	2a25      	cmp	r2, #37	; 0x25
 800e8ac:	d1f9      	bne.n	800e8a2 <_vfiprintf_r+0x96>
 800e8ae:	ebba 0b04 	subs.w	fp, sl, r4
 800e8b2:	d00b      	beq.n	800e8cc <_vfiprintf_r+0xc0>
 800e8b4:	465b      	mov	r3, fp
 800e8b6:	4622      	mov	r2, r4
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f7ff ff93 	bl	800e7e6 <__sfputs_r>
 800e8c0:	3001      	adds	r0, #1
 800e8c2:	f000 80aa 	beq.w	800ea1a <_vfiprintf_r+0x20e>
 800e8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8c8:	445a      	add	r2, fp
 800e8ca:	9209      	str	r2, [sp, #36]	; 0x24
 800e8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	f000 80a2 	beq.w	800ea1a <_vfiprintf_r+0x20e>
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8e0:	f10a 0a01 	add.w	sl, sl, #1
 800e8e4:	9304      	str	r3, [sp, #16]
 800e8e6:	9307      	str	r3, [sp, #28]
 800e8e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8ec:	931a      	str	r3, [sp, #104]	; 0x68
 800e8ee:	4654      	mov	r4, sl
 800e8f0:	2205      	movs	r2, #5
 800e8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8f6:	4858      	ldr	r0, [pc, #352]	; (800ea58 <_vfiprintf_r+0x24c>)
 800e8f8:	f7f1 fcaa 	bl	8000250 <memchr>
 800e8fc:	9a04      	ldr	r2, [sp, #16]
 800e8fe:	b9d8      	cbnz	r0, 800e938 <_vfiprintf_r+0x12c>
 800e900:	06d1      	lsls	r1, r2, #27
 800e902:	bf44      	itt	mi
 800e904:	2320      	movmi	r3, #32
 800e906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e90a:	0713      	lsls	r3, r2, #28
 800e90c:	bf44      	itt	mi
 800e90e:	232b      	movmi	r3, #43	; 0x2b
 800e910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e914:	f89a 3000 	ldrb.w	r3, [sl]
 800e918:	2b2a      	cmp	r3, #42	; 0x2a
 800e91a:	d015      	beq.n	800e948 <_vfiprintf_r+0x13c>
 800e91c:	9a07      	ldr	r2, [sp, #28]
 800e91e:	4654      	mov	r4, sl
 800e920:	2000      	movs	r0, #0
 800e922:	f04f 0c0a 	mov.w	ip, #10
 800e926:	4621      	mov	r1, r4
 800e928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e92c:	3b30      	subs	r3, #48	; 0x30
 800e92e:	2b09      	cmp	r3, #9
 800e930:	d94e      	bls.n	800e9d0 <_vfiprintf_r+0x1c4>
 800e932:	b1b0      	cbz	r0, 800e962 <_vfiprintf_r+0x156>
 800e934:	9207      	str	r2, [sp, #28]
 800e936:	e014      	b.n	800e962 <_vfiprintf_r+0x156>
 800e938:	eba0 0308 	sub.w	r3, r0, r8
 800e93c:	fa09 f303 	lsl.w	r3, r9, r3
 800e940:	4313      	orrs	r3, r2
 800e942:	9304      	str	r3, [sp, #16]
 800e944:	46a2      	mov	sl, r4
 800e946:	e7d2      	b.n	800e8ee <_vfiprintf_r+0xe2>
 800e948:	9b03      	ldr	r3, [sp, #12]
 800e94a:	1d19      	adds	r1, r3, #4
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	9103      	str	r1, [sp, #12]
 800e950:	2b00      	cmp	r3, #0
 800e952:	bfbb      	ittet	lt
 800e954:	425b      	neglt	r3, r3
 800e956:	f042 0202 	orrlt.w	r2, r2, #2
 800e95a:	9307      	strge	r3, [sp, #28]
 800e95c:	9307      	strlt	r3, [sp, #28]
 800e95e:	bfb8      	it	lt
 800e960:	9204      	strlt	r2, [sp, #16]
 800e962:	7823      	ldrb	r3, [r4, #0]
 800e964:	2b2e      	cmp	r3, #46	; 0x2e
 800e966:	d10c      	bne.n	800e982 <_vfiprintf_r+0x176>
 800e968:	7863      	ldrb	r3, [r4, #1]
 800e96a:	2b2a      	cmp	r3, #42	; 0x2a
 800e96c:	d135      	bne.n	800e9da <_vfiprintf_r+0x1ce>
 800e96e:	9b03      	ldr	r3, [sp, #12]
 800e970:	1d1a      	adds	r2, r3, #4
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	9203      	str	r2, [sp, #12]
 800e976:	2b00      	cmp	r3, #0
 800e978:	bfb8      	it	lt
 800e97a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e97e:	3402      	adds	r4, #2
 800e980:	9305      	str	r3, [sp, #20]
 800e982:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ea68 <_vfiprintf_r+0x25c>
 800e986:	7821      	ldrb	r1, [r4, #0]
 800e988:	2203      	movs	r2, #3
 800e98a:	4650      	mov	r0, sl
 800e98c:	f7f1 fc60 	bl	8000250 <memchr>
 800e990:	b140      	cbz	r0, 800e9a4 <_vfiprintf_r+0x198>
 800e992:	2340      	movs	r3, #64	; 0x40
 800e994:	eba0 000a 	sub.w	r0, r0, sl
 800e998:	fa03 f000 	lsl.w	r0, r3, r0
 800e99c:	9b04      	ldr	r3, [sp, #16]
 800e99e:	4303      	orrs	r3, r0
 800e9a0:	3401      	adds	r4, #1
 800e9a2:	9304      	str	r3, [sp, #16]
 800e9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a8:	482c      	ldr	r0, [pc, #176]	; (800ea5c <_vfiprintf_r+0x250>)
 800e9aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9ae:	2206      	movs	r2, #6
 800e9b0:	f7f1 fc4e 	bl	8000250 <memchr>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	d03f      	beq.n	800ea38 <_vfiprintf_r+0x22c>
 800e9b8:	4b29      	ldr	r3, [pc, #164]	; (800ea60 <_vfiprintf_r+0x254>)
 800e9ba:	bb1b      	cbnz	r3, 800ea04 <_vfiprintf_r+0x1f8>
 800e9bc:	9b03      	ldr	r3, [sp, #12]
 800e9be:	3307      	adds	r3, #7
 800e9c0:	f023 0307 	bic.w	r3, r3, #7
 800e9c4:	3308      	adds	r3, #8
 800e9c6:	9303      	str	r3, [sp, #12]
 800e9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ca:	443b      	add	r3, r7
 800e9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ce:	e767      	b.n	800e8a0 <_vfiprintf_r+0x94>
 800e9d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9d4:	460c      	mov	r4, r1
 800e9d6:	2001      	movs	r0, #1
 800e9d8:	e7a5      	b.n	800e926 <_vfiprintf_r+0x11a>
 800e9da:	2300      	movs	r3, #0
 800e9dc:	3401      	adds	r4, #1
 800e9de:	9305      	str	r3, [sp, #20]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	f04f 0c0a 	mov.w	ip, #10
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9ec:	3a30      	subs	r2, #48	; 0x30
 800e9ee:	2a09      	cmp	r2, #9
 800e9f0:	d903      	bls.n	800e9fa <_vfiprintf_r+0x1ee>
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d0c5      	beq.n	800e982 <_vfiprintf_r+0x176>
 800e9f6:	9105      	str	r1, [sp, #20]
 800e9f8:	e7c3      	b.n	800e982 <_vfiprintf_r+0x176>
 800e9fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9fe:	4604      	mov	r4, r0
 800ea00:	2301      	movs	r3, #1
 800ea02:	e7f0      	b.n	800e9e6 <_vfiprintf_r+0x1da>
 800ea04:	ab03      	add	r3, sp, #12
 800ea06:	9300      	str	r3, [sp, #0]
 800ea08:	462a      	mov	r2, r5
 800ea0a:	4b16      	ldr	r3, [pc, #88]	; (800ea64 <_vfiprintf_r+0x258>)
 800ea0c:	a904      	add	r1, sp, #16
 800ea0e:	4630      	mov	r0, r6
 800ea10:	f7fc fb04 	bl	800b01c <_printf_float>
 800ea14:	4607      	mov	r7, r0
 800ea16:	1c78      	adds	r0, r7, #1
 800ea18:	d1d6      	bne.n	800e9c8 <_vfiprintf_r+0x1bc>
 800ea1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea1c:	07d9      	lsls	r1, r3, #31
 800ea1e:	d405      	bmi.n	800ea2c <_vfiprintf_r+0x220>
 800ea20:	89ab      	ldrh	r3, [r5, #12]
 800ea22:	059a      	lsls	r2, r3, #22
 800ea24:	d402      	bmi.n	800ea2c <_vfiprintf_r+0x220>
 800ea26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea28:	f000 fadd 	bl	800efe6 <__retarget_lock_release_recursive>
 800ea2c:	89ab      	ldrh	r3, [r5, #12]
 800ea2e:	065b      	lsls	r3, r3, #25
 800ea30:	f53f af12 	bmi.w	800e858 <_vfiprintf_r+0x4c>
 800ea34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea36:	e711      	b.n	800e85c <_vfiprintf_r+0x50>
 800ea38:	ab03      	add	r3, sp, #12
 800ea3a:	9300      	str	r3, [sp, #0]
 800ea3c:	462a      	mov	r2, r5
 800ea3e:	4b09      	ldr	r3, [pc, #36]	; (800ea64 <_vfiprintf_r+0x258>)
 800ea40:	a904      	add	r1, sp, #16
 800ea42:	4630      	mov	r0, r6
 800ea44:	f7fc fd8e 	bl	800b564 <_printf_i>
 800ea48:	e7e4      	b.n	800ea14 <_vfiprintf_r+0x208>
 800ea4a:	bf00      	nop
 800ea4c:	0800f958 	.word	0x0800f958
 800ea50:	0800f978 	.word	0x0800f978
 800ea54:	0800f938 	.word	0x0800f938
 800ea58:	0800f824 	.word	0x0800f824
 800ea5c:	0800f82e 	.word	0x0800f82e
 800ea60:	0800b01d 	.word	0x0800b01d
 800ea64:	0800e7e7 	.word	0x0800e7e7
 800ea68:	0800f82a 	.word	0x0800f82a
 800ea6c:	00000000 	.word	0x00000000

0800ea70 <nan>:
 800ea70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ea78 <nan+0x8>
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop
 800ea78:	00000000 	.word	0x00000000
 800ea7c:	7ff80000 	.word	0x7ff80000

0800ea80 <_sbrk_r>:
 800ea80:	b538      	push	{r3, r4, r5, lr}
 800ea82:	4d06      	ldr	r5, [pc, #24]	; (800ea9c <_sbrk_r+0x1c>)
 800ea84:	2300      	movs	r3, #0
 800ea86:	4604      	mov	r4, r0
 800ea88:	4608      	mov	r0, r1
 800ea8a:	602b      	str	r3, [r5, #0]
 800ea8c:	f7f4 fc2a 	bl	80032e4 <_sbrk>
 800ea90:	1c43      	adds	r3, r0, #1
 800ea92:	d102      	bne.n	800ea9a <_sbrk_r+0x1a>
 800ea94:	682b      	ldr	r3, [r5, #0]
 800ea96:	b103      	cbz	r3, 800ea9a <_sbrk_r+0x1a>
 800ea98:	6023      	str	r3, [r4, #0]
 800ea9a:	bd38      	pop	{r3, r4, r5, pc}
 800ea9c:	200007cc 	.word	0x200007cc

0800eaa0 <strncmp>:
 800eaa0:	b510      	push	{r4, lr}
 800eaa2:	b17a      	cbz	r2, 800eac4 <strncmp+0x24>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	3901      	subs	r1, #1
 800eaa8:	1884      	adds	r4, r0, r2
 800eaaa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eaae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eab2:	4290      	cmp	r0, r2
 800eab4:	d101      	bne.n	800eaba <strncmp+0x1a>
 800eab6:	42a3      	cmp	r3, r4
 800eab8:	d101      	bne.n	800eabe <strncmp+0x1e>
 800eaba:	1a80      	subs	r0, r0, r2
 800eabc:	bd10      	pop	{r4, pc}
 800eabe:	2800      	cmp	r0, #0
 800eac0:	d1f3      	bne.n	800eaaa <strncmp+0xa>
 800eac2:	e7fa      	b.n	800eaba <strncmp+0x1a>
 800eac4:	4610      	mov	r0, r2
 800eac6:	e7f9      	b.n	800eabc <strncmp+0x1c>

0800eac8 <__swbuf_r>:
 800eac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaca:	460e      	mov	r6, r1
 800eacc:	4614      	mov	r4, r2
 800eace:	4605      	mov	r5, r0
 800ead0:	b118      	cbz	r0, 800eada <__swbuf_r+0x12>
 800ead2:	6983      	ldr	r3, [r0, #24]
 800ead4:	b90b      	cbnz	r3, 800eada <__swbuf_r+0x12>
 800ead6:	f000 f9e7 	bl	800eea8 <__sinit>
 800eada:	4b21      	ldr	r3, [pc, #132]	; (800eb60 <__swbuf_r+0x98>)
 800eadc:	429c      	cmp	r4, r3
 800eade:	d12b      	bne.n	800eb38 <__swbuf_r+0x70>
 800eae0:	686c      	ldr	r4, [r5, #4]
 800eae2:	69a3      	ldr	r3, [r4, #24]
 800eae4:	60a3      	str	r3, [r4, #8]
 800eae6:	89a3      	ldrh	r3, [r4, #12]
 800eae8:	071a      	lsls	r2, r3, #28
 800eaea:	d52f      	bpl.n	800eb4c <__swbuf_r+0x84>
 800eaec:	6923      	ldr	r3, [r4, #16]
 800eaee:	b36b      	cbz	r3, 800eb4c <__swbuf_r+0x84>
 800eaf0:	6923      	ldr	r3, [r4, #16]
 800eaf2:	6820      	ldr	r0, [r4, #0]
 800eaf4:	1ac0      	subs	r0, r0, r3
 800eaf6:	6963      	ldr	r3, [r4, #20]
 800eaf8:	b2f6      	uxtb	r6, r6
 800eafa:	4283      	cmp	r3, r0
 800eafc:	4637      	mov	r7, r6
 800eafe:	dc04      	bgt.n	800eb0a <__swbuf_r+0x42>
 800eb00:	4621      	mov	r1, r4
 800eb02:	4628      	mov	r0, r5
 800eb04:	f000 f93c 	bl	800ed80 <_fflush_r>
 800eb08:	bb30      	cbnz	r0, 800eb58 <__swbuf_r+0x90>
 800eb0a:	68a3      	ldr	r3, [r4, #8]
 800eb0c:	3b01      	subs	r3, #1
 800eb0e:	60a3      	str	r3, [r4, #8]
 800eb10:	6823      	ldr	r3, [r4, #0]
 800eb12:	1c5a      	adds	r2, r3, #1
 800eb14:	6022      	str	r2, [r4, #0]
 800eb16:	701e      	strb	r6, [r3, #0]
 800eb18:	6963      	ldr	r3, [r4, #20]
 800eb1a:	3001      	adds	r0, #1
 800eb1c:	4283      	cmp	r3, r0
 800eb1e:	d004      	beq.n	800eb2a <__swbuf_r+0x62>
 800eb20:	89a3      	ldrh	r3, [r4, #12]
 800eb22:	07db      	lsls	r3, r3, #31
 800eb24:	d506      	bpl.n	800eb34 <__swbuf_r+0x6c>
 800eb26:	2e0a      	cmp	r6, #10
 800eb28:	d104      	bne.n	800eb34 <__swbuf_r+0x6c>
 800eb2a:	4621      	mov	r1, r4
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	f000 f927 	bl	800ed80 <_fflush_r>
 800eb32:	b988      	cbnz	r0, 800eb58 <__swbuf_r+0x90>
 800eb34:	4638      	mov	r0, r7
 800eb36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb38:	4b0a      	ldr	r3, [pc, #40]	; (800eb64 <__swbuf_r+0x9c>)
 800eb3a:	429c      	cmp	r4, r3
 800eb3c:	d101      	bne.n	800eb42 <__swbuf_r+0x7a>
 800eb3e:	68ac      	ldr	r4, [r5, #8]
 800eb40:	e7cf      	b.n	800eae2 <__swbuf_r+0x1a>
 800eb42:	4b09      	ldr	r3, [pc, #36]	; (800eb68 <__swbuf_r+0xa0>)
 800eb44:	429c      	cmp	r4, r3
 800eb46:	bf08      	it	eq
 800eb48:	68ec      	ldreq	r4, [r5, #12]
 800eb4a:	e7ca      	b.n	800eae2 <__swbuf_r+0x1a>
 800eb4c:	4621      	mov	r1, r4
 800eb4e:	4628      	mov	r0, r5
 800eb50:	f000 f81a 	bl	800eb88 <__swsetup_r>
 800eb54:	2800      	cmp	r0, #0
 800eb56:	d0cb      	beq.n	800eaf0 <__swbuf_r+0x28>
 800eb58:	f04f 37ff 	mov.w	r7, #4294967295
 800eb5c:	e7ea      	b.n	800eb34 <__swbuf_r+0x6c>
 800eb5e:	bf00      	nop
 800eb60:	0800f958 	.word	0x0800f958
 800eb64:	0800f978 	.word	0x0800f978
 800eb68:	0800f938 	.word	0x0800f938

0800eb6c <__ascii_wctomb>:
 800eb6c:	b149      	cbz	r1, 800eb82 <__ascii_wctomb+0x16>
 800eb6e:	2aff      	cmp	r2, #255	; 0xff
 800eb70:	bf85      	ittet	hi
 800eb72:	238a      	movhi	r3, #138	; 0x8a
 800eb74:	6003      	strhi	r3, [r0, #0]
 800eb76:	700a      	strbls	r2, [r1, #0]
 800eb78:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb7c:	bf98      	it	ls
 800eb7e:	2001      	movls	r0, #1
 800eb80:	4770      	bx	lr
 800eb82:	4608      	mov	r0, r1
 800eb84:	4770      	bx	lr
	...

0800eb88 <__swsetup_r>:
 800eb88:	4b32      	ldr	r3, [pc, #200]	; (800ec54 <__swsetup_r+0xcc>)
 800eb8a:	b570      	push	{r4, r5, r6, lr}
 800eb8c:	681d      	ldr	r5, [r3, #0]
 800eb8e:	4606      	mov	r6, r0
 800eb90:	460c      	mov	r4, r1
 800eb92:	b125      	cbz	r5, 800eb9e <__swsetup_r+0x16>
 800eb94:	69ab      	ldr	r3, [r5, #24]
 800eb96:	b913      	cbnz	r3, 800eb9e <__swsetup_r+0x16>
 800eb98:	4628      	mov	r0, r5
 800eb9a:	f000 f985 	bl	800eea8 <__sinit>
 800eb9e:	4b2e      	ldr	r3, [pc, #184]	; (800ec58 <__swsetup_r+0xd0>)
 800eba0:	429c      	cmp	r4, r3
 800eba2:	d10f      	bne.n	800ebc4 <__swsetup_r+0x3c>
 800eba4:	686c      	ldr	r4, [r5, #4]
 800eba6:	89a3      	ldrh	r3, [r4, #12]
 800eba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebac:	0719      	lsls	r1, r3, #28
 800ebae:	d42c      	bmi.n	800ec0a <__swsetup_r+0x82>
 800ebb0:	06dd      	lsls	r5, r3, #27
 800ebb2:	d411      	bmi.n	800ebd8 <__swsetup_r+0x50>
 800ebb4:	2309      	movs	r3, #9
 800ebb6:	6033      	str	r3, [r6, #0]
 800ebb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ebbc:	81a3      	strh	r3, [r4, #12]
 800ebbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc2:	e03e      	b.n	800ec42 <__swsetup_r+0xba>
 800ebc4:	4b25      	ldr	r3, [pc, #148]	; (800ec5c <__swsetup_r+0xd4>)
 800ebc6:	429c      	cmp	r4, r3
 800ebc8:	d101      	bne.n	800ebce <__swsetup_r+0x46>
 800ebca:	68ac      	ldr	r4, [r5, #8]
 800ebcc:	e7eb      	b.n	800eba6 <__swsetup_r+0x1e>
 800ebce:	4b24      	ldr	r3, [pc, #144]	; (800ec60 <__swsetup_r+0xd8>)
 800ebd0:	429c      	cmp	r4, r3
 800ebd2:	bf08      	it	eq
 800ebd4:	68ec      	ldreq	r4, [r5, #12]
 800ebd6:	e7e6      	b.n	800eba6 <__swsetup_r+0x1e>
 800ebd8:	0758      	lsls	r0, r3, #29
 800ebda:	d512      	bpl.n	800ec02 <__swsetup_r+0x7a>
 800ebdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebde:	b141      	cbz	r1, 800ebf2 <__swsetup_r+0x6a>
 800ebe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebe4:	4299      	cmp	r1, r3
 800ebe6:	d002      	beq.n	800ebee <__swsetup_r+0x66>
 800ebe8:	4630      	mov	r0, r6
 800ebea:	f7ff fba9 	bl	800e340 <_free_r>
 800ebee:	2300      	movs	r3, #0
 800ebf0:	6363      	str	r3, [r4, #52]	; 0x34
 800ebf2:	89a3      	ldrh	r3, [r4, #12]
 800ebf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ebf8:	81a3      	strh	r3, [r4, #12]
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	6063      	str	r3, [r4, #4]
 800ebfe:	6923      	ldr	r3, [r4, #16]
 800ec00:	6023      	str	r3, [r4, #0]
 800ec02:	89a3      	ldrh	r3, [r4, #12]
 800ec04:	f043 0308 	orr.w	r3, r3, #8
 800ec08:	81a3      	strh	r3, [r4, #12]
 800ec0a:	6923      	ldr	r3, [r4, #16]
 800ec0c:	b94b      	cbnz	r3, 800ec22 <__swsetup_r+0x9a>
 800ec0e:	89a3      	ldrh	r3, [r4, #12]
 800ec10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec18:	d003      	beq.n	800ec22 <__swsetup_r+0x9a>
 800ec1a:	4621      	mov	r1, r4
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	f000 fa09 	bl	800f034 <__smakebuf_r>
 800ec22:	89a0      	ldrh	r0, [r4, #12]
 800ec24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec28:	f010 0301 	ands.w	r3, r0, #1
 800ec2c:	d00a      	beq.n	800ec44 <__swsetup_r+0xbc>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	60a3      	str	r3, [r4, #8]
 800ec32:	6963      	ldr	r3, [r4, #20]
 800ec34:	425b      	negs	r3, r3
 800ec36:	61a3      	str	r3, [r4, #24]
 800ec38:	6923      	ldr	r3, [r4, #16]
 800ec3a:	b943      	cbnz	r3, 800ec4e <__swsetup_r+0xc6>
 800ec3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec40:	d1ba      	bne.n	800ebb8 <__swsetup_r+0x30>
 800ec42:	bd70      	pop	{r4, r5, r6, pc}
 800ec44:	0781      	lsls	r1, r0, #30
 800ec46:	bf58      	it	pl
 800ec48:	6963      	ldrpl	r3, [r4, #20]
 800ec4a:	60a3      	str	r3, [r4, #8]
 800ec4c:	e7f4      	b.n	800ec38 <__swsetup_r+0xb0>
 800ec4e:	2000      	movs	r0, #0
 800ec50:	e7f7      	b.n	800ec42 <__swsetup_r+0xba>
 800ec52:	bf00      	nop
 800ec54:	20000010 	.word	0x20000010
 800ec58:	0800f958 	.word	0x0800f958
 800ec5c:	0800f978 	.word	0x0800f978
 800ec60:	0800f938 	.word	0x0800f938

0800ec64 <abort>:
 800ec64:	b508      	push	{r3, lr}
 800ec66:	2006      	movs	r0, #6
 800ec68:	f000 faa2 	bl	800f1b0 <raise>
 800ec6c:	2001      	movs	r0, #1
 800ec6e:	f7f4 fac1 	bl	80031f4 <_exit>
	...

0800ec74 <__sflush_r>:
 800ec74:	898a      	ldrh	r2, [r1, #12]
 800ec76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec7a:	4605      	mov	r5, r0
 800ec7c:	0710      	lsls	r0, r2, #28
 800ec7e:	460c      	mov	r4, r1
 800ec80:	d458      	bmi.n	800ed34 <__sflush_r+0xc0>
 800ec82:	684b      	ldr	r3, [r1, #4]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	dc05      	bgt.n	800ec94 <__sflush_r+0x20>
 800ec88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	dc02      	bgt.n	800ec94 <__sflush_r+0x20>
 800ec8e:	2000      	movs	r0, #0
 800ec90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec96:	2e00      	cmp	r6, #0
 800ec98:	d0f9      	beq.n	800ec8e <__sflush_r+0x1a>
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eca0:	682f      	ldr	r7, [r5, #0]
 800eca2:	602b      	str	r3, [r5, #0]
 800eca4:	d032      	beq.n	800ed0c <__sflush_r+0x98>
 800eca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eca8:	89a3      	ldrh	r3, [r4, #12]
 800ecaa:	075a      	lsls	r2, r3, #29
 800ecac:	d505      	bpl.n	800ecba <__sflush_r+0x46>
 800ecae:	6863      	ldr	r3, [r4, #4]
 800ecb0:	1ac0      	subs	r0, r0, r3
 800ecb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ecb4:	b10b      	cbz	r3, 800ecba <__sflush_r+0x46>
 800ecb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ecb8:	1ac0      	subs	r0, r0, r3
 800ecba:	2300      	movs	r3, #0
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecc0:	6a21      	ldr	r1, [r4, #32]
 800ecc2:	4628      	mov	r0, r5
 800ecc4:	47b0      	blx	r6
 800ecc6:	1c43      	adds	r3, r0, #1
 800ecc8:	89a3      	ldrh	r3, [r4, #12]
 800ecca:	d106      	bne.n	800ecda <__sflush_r+0x66>
 800eccc:	6829      	ldr	r1, [r5, #0]
 800ecce:	291d      	cmp	r1, #29
 800ecd0:	d82c      	bhi.n	800ed2c <__sflush_r+0xb8>
 800ecd2:	4a2a      	ldr	r2, [pc, #168]	; (800ed7c <__sflush_r+0x108>)
 800ecd4:	40ca      	lsrs	r2, r1
 800ecd6:	07d6      	lsls	r6, r2, #31
 800ecd8:	d528      	bpl.n	800ed2c <__sflush_r+0xb8>
 800ecda:	2200      	movs	r2, #0
 800ecdc:	6062      	str	r2, [r4, #4]
 800ecde:	04d9      	lsls	r1, r3, #19
 800ece0:	6922      	ldr	r2, [r4, #16]
 800ece2:	6022      	str	r2, [r4, #0]
 800ece4:	d504      	bpl.n	800ecf0 <__sflush_r+0x7c>
 800ece6:	1c42      	adds	r2, r0, #1
 800ece8:	d101      	bne.n	800ecee <__sflush_r+0x7a>
 800ecea:	682b      	ldr	r3, [r5, #0]
 800ecec:	b903      	cbnz	r3, 800ecf0 <__sflush_r+0x7c>
 800ecee:	6560      	str	r0, [r4, #84]	; 0x54
 800ecf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecf2:	602f      	str	r7, [r5, #0]
 800ecf4:	2900      	cmp	r1, #0
 800ecf6:	d0ca      	beq.n	800ec8e <__sflush_r+0x1a>
 800ecf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecfc:	4299      	cmp	r1, r3
 800ecfe:	d002      	beq.n	800ed06 <__sflush_r+0x92>
 800ed00:	4628      	mov	r0, r5
 800ed02:	f7ff fb1d 	bl	800e340 <_free_r>
 800ed06:	2000      	movs	r0, #0
 800ed08:	6360      	str	r0, [r4, #52]	; 0x34
 800ed0a:	e7c1      	b.n	800ec90 <__sflush_r+0x1c>
 800ed0c:	6a21      	ldr	r1, [r4, #32]
 800ed0e:	2301      	movs	r3, #1
 800ed10:	4628      	mov	r0, r5
 800ed12:	47b0      	blx	r6
 800ed14:	1c41      	adds	r1, r0, #1
 800ed16:	d1c7      	bne.n	800eca8 <__sflush_r+0x34>
 800ed18:	682b      	ldr	r3, [r5, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d0c4      	beq.n	800eca8 <__sflush_r+0x34>
 800ed1e:	2b1d      	cmp	r3, #29
 800ed20:	d001      	beq.n	800ed26 <__sflush_r+0xb2>
 800ed22:	2b16      	cmp	r3, #22
 800ed24:	d101      	bne.n	800ed2a <__sflush_r+0xb6>
 800ed26:	602f      	str	r7, [r5, #0]
 800ed28:	e7b1      	b.n	800ec8e <__sflush_r+0x1a>
 800ed2a:	89a3      	ldrh	r3, [r4, #12]
 800ed2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed30:	81a3      	strh	r3, [r4, #12]
 800ed32:	e7ad      	b.n	800ec90 <__sflush_r+0x1c>
 800ed34:	690f      	ldr	r7, [r1, #16]
 800ed36:	2f00      	cmp	r7, #0
 800ed38:	d0a9      	beq.n	800ec8e <__sflush_r+0x1a>
 800ed3a:	0793      	lsls	r3, r2, #30
 800ed3c:	680e      	ldr	r6, [r1, #0]
 800ed3e:	bf08      	it	eq
 800ed40:	694b      	ldreq	r3, [r1, #20]
 800ed42:	600f      	str	r7, [r1, #0]
 800ed44:	bf18      	it	ne
 800ed46:	2300      	movne	r3, #0
 800ed48:	eba6 0807 	sub.w	r8, r6, r7
 800ed4c:	608b      	str	r3, [r1, #8]
 800ed4e:	f1b8 0f00 	cmp.w	r8, #0
 800ed52:	dd9c      	ble.n	800ec8e <__sflush_r+0x1a>
 800ed54:	6a21      	ldr	r1, [r4, #32]
 800ed56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed58:	4643      	mov	r3, r8
 800ed5a:	463a      	mov	r2, r7
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	47b0      	blx	r6
 800ed60:	2800      	cmp	r0, #0
 800ed62:	dc06      	bgt.n	800ed72 <__sflush_r+0xfe>
 800ed64:	89a3      	ldrh	r3, [r4, #12]
 800ed66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed6a:	81a3      	strh	r3, [r4, #12]
 800ed6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed70:	e78e      	b.n	800ec90 <__sflush_r+0x1c>
 800ed72:	4407      	add	r7, r0
 800ed74:	eba8 0800 	sub.w	r8, r8, r0
 800ed78:	e7e9      	b.n	800ed4e <__sflush_r+0xda>
 800ed7a:	bf00      	nop
 800ed7c:	20400001 	.word	0x20400001

0800ed80 <_fflush_r>:
 800ed80:	b538      	push	{r3, r4, r5, lr}
 800ed82:	690b      	ldr	r3, [r1, #16]
 800ed84:	4605      	mov	r5, r0
 800ed86:	460c      	mov	r4, r1
 800ed88:	b913      	cbnz	r3, 800ed90 <_fflush_r+0x10>
 800ed8a:	2500      	movs	r5, #0
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	bd38      	pop	{r3, r4, r5, pc}
 800ed90:	b118      	cbz	r0, 800ed9a <_fflush_r+0x1a>
 800ed92:	6983      	ldr	r3, [r0, #24]
 800ed94:	b90b      	cbnz	r3, 800ed9a <_fflush_r+0x1a>
 800ed96:	f000 f887 	bl	800eea8 <__sinit>
 800ed9a:	4b14      	ldr	r3, [pc, #80]	; (800edec <_fflush_r+0x6c>)
 800ed9c:	429c      	cmp	r4, r3
 800ed9e:	d11b      	bne.n	800edd8 <_fflush_r+0x58>
 800eda0:	686c      	ldr	r4, [r5, #4]
 800eda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d0ef      	beq.n	800ed8a <_fflush_r+0xa>
 800edaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800edac:	07d0      	lsls	r0, r2, #31
 800edae:	d404      	bmi.n	800edba <_fflush_r+0x3a>
 800edb0:	0599      	lsls	r1, r3, #22
 800edb2:	d402      	bmi.n	800edba <_fflush_r+0x3a>
 800edb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edb6:	f000 f915 	bl	800efe4 <__retarget_lock_acquire_recursive>
 800edba:	4628      	mov	r0, r5
 800edbc:	4621      	mov	r1, r4
 800edbe:	f7ff ff59 	bl	800ec74 <__sflush_r>
 800edc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edc4:	07da      	lsls	r2, r3, #31
 800edc6:	4605      	mov	r5, r0
 800edc8:	d4e0      	bmi.n	800ed8c <_fflush_r+0xc>
 800edca:	89a3      	ldrh	r3, [r4, #12]
 800edcc:	059b      	lsls	r3, r3, #22
 800edce:	d4dd      	bmi.n	800ed8c <_fflush_r+0xc>
 800edd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edd2:	f000 f908 	bl	800efe6 <__retarget_lock_release_recursive>
 800edd6:	e7d9      	b.n	800ed8c <_fflush_r+0xc>
 800edd8:	4b05      	ldr	r3, [pc, #20]	; (800edf0 <_fflush_r+0x70>)
 800edda:	429c      	cmp	r4, r3
 800eddc:	d101      	bne.n	800ede2 <_fflush_r+0x62>
 800edde:	68ac      	ldr	r4, [r5, #8]
 800ede0:	e7df      	b.n	800eda2 <_fflush_r+0x22>
 800ede2:	4b04      	ldr	r3, [pc, #16]	; (800edf4 <_fflush_r+0x74>)
 800ede4:	429c      	cmp	r4, r3
 800ede6:	bf08      	it	eq
 800ede8:	68ec      	ldreq	r4, [r5, #12]
 800edea:	e7da      	b.n	800eda2 <_fflush_r+0x22>
 800edec:	0800f958 	.word	0x0800f958
 800edf0:	0800f978 	.word	0x0800f978
 800edf4:	0800f938 	.word	0x0800f938

0800edf8 <std>:
 800edf8:	2300      	movs	r3, #0
 800edfa:	b510      	push	{r4, lr}
 800edfc:	4604      	mov	r4, r0
 800edfe:	e9c0 3300 	strd	r3, r3, [r0]
 800ee02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee06:	6083      	str	r3, [r0, #8]
 800ee08:	8181      	strh	r1, [r0, #12]
 800ee0a:	6643      	str	r3, [r0, #100]	; 0x64
 800ee0c:	81c2      	strh	r2, [r0, #14]
 800ee0e:	6183      	str	r3, [r0, #24]
 800ee10:	4619      	mov	r1, r3
 800ee12:	2208      	movs	r2, #8
 800ee14:	305c      	adds	r0, #92	; 0x5c
 800ee16:	f7fc f859 	bl	800aecc <memset>
 800ee1a:	4b05      	ldr	r3, [pc, #20]	; (800ee30 <std+0x38>)
 800ee1c:	6263      	str	r3, [r4, #36]	; 0x24
 800ee1e:	4b05      	ldr	r3, [pc, #20]	; (800ee34 <std+0x3c>)
 800ee20:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee22:	4b05      	ldr	r3, [pc, #20]	; (800ee38 <std+0x40>)
 800ee24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee26:	4b05      	ldr	r3, [pc, #20]	; (800ee3c <std+0x44>)
 800ee28:	6224      	str	r4, [r4, #32]
 800ee2a:	6323      	str	r3, [r4, #48]	; 0x30
 800ee2c:	bd10      	pop	{r4, pc}
 800ee2e:	bf00      	nop
 800ee30:	0800f1e9 	.word	0x0800f1e9
 800ee34:	0800f20b 	.word	0x0800f20b
 800ee38:	0800f243 	.word	0x0800f243
 800ee3c:	0800f267 	.word	0x0800f267

0800ee40 <_cleanup_r>:
 800ee40:	4901      	ldr	r1, [pc, #4]	; (800ee48 <_cleanup_r+0x8>)
 800ee42:	f000 b8af 	b.w	800efa4 <_fwalk_reent>
 800ee46:	bf00      	nop
 800ee48:	0800ed81 	.word	0x0800ed81

0800ee4c <__sfmoreglue>:
 800ee4c:	b570      	push	{r4, r5, r6, lr}
 800ee4e:	2268      	movs	r2, #104	; 0x68
 800ee50:	1e4d      	subs	r5, r1, #1
 800ee52:	4355      	muls	r5, r2
 800ee54:	460e      	mov	r6, r1
 800ee56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee5a:	f7ff fadd 	bl	800e418 <_malloc_r>
 800ee5e:	4604      	mov	r4, r0
 800ee60:	b140      	cbz	r0, 800ee74 <__sfmoreglue+0x28>
 800ee62:	2100      	movs	r1, #0
 800ee64:	e9c0 1600 	strd	r1, r6, [r0]
 800ee68:	300c      	adds	r0, #12
 800ee6a:	60a0      	str	r0, [r4, #8]
 800ee6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee70:	f7fc f82c 	bl	800aecc <memset>
 800ee74:	4620      	mov	r0, r4
 800ee76:	bd70      	pop	{r4, r5, r6, pc}

0800ee78 <__sfp_lock_acquire>:
 800ee78:	4801      	ldr	r0, [pc, #4]	; (800ee80 <__sfp_lock_acquire+0x8>)
 800ee7a:	f000 b8b3 	b.w	800efe4 <__retarget_lock_acquire_recursive>
 800ee7e:	bf00      	nop
 800ee80:	200007c9 	.word	0x200007c9

0800ee84 <__sfp_lock_release>:
 800ee84:	4801      	ldr	r0, [pc, #4]	; (800ee8c <__sfp_lock_release+0x8>)
 800ee86:	f000 b8ae 	b.w	800efe6 <__retarget_lock_release_recursive>
 800ee8a:	bf00      	nop
 800ee8c:	200007c9 	.word	0x200007c9

0800ee90 <__sinit_lock_acquire>:
 800ee90:	4801      	ldr	r0, [pc, #4]	; (800ee98 <__sinit_lock_acquire+0x8>)
 800ee92:	f000 b8a7 	b.w	800efe4 <__retarget_lock_acquire_recursive>
 800ee96:	bf00      	nop
 800ee98:	200007ca 	.word	0x200007ca

0800ee9c <__sinit_lock_release>:
 800ee9c:	4801      	ldr	r0, [pc, #4]	; (800eea4 <__sinit_lock_release+0x8>)
 800ee9e:	f000 b8a2 	b.w	800efe6 <__retarget_lock_release_recursive>
 800eea2:	bf00      	nop
 800eea4:	200007ca 	.word	0x200007ca

0800eea8 <__sinit>:
 800eea8:	b510      	push	{r4, lr}
 800eeaa:	4604      	mov	r4, r0
 800eeac:	f7ff fff0 	bl	800ee90 <__sinit_lock_acquire>
 800eeb0:	69a3      	ldr	r3, [r4, #24]
 800eeb2:	b11b      	cbz	r3, 800eebc <__sinit+0x14>
 800eeb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeb8:	f7ff bff0 	b.w	800ee9c <__sinit_lock_release>
 800eebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eec0:	6523      	str	r3, [r4, #80]	; 0x50
 800eec2:	4b13      	ldr	r3, [pc, #76]	; (800ef10 <__sinit+0x68>)
 800eec4:	4a13      	ldr	r2, [pc, #76]	; (800ef14 <__sinit+0x6c>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	62a2      	str	r2, [r4, #40]	; 0x28
 800eeca:	42a3      	cmp	r3, r4
 800eecc:	bf04      	itt	eq
 800eece:	2301      	moveq	r3, #1
 800eed0:	61a3      	streq	r3, [r4, #24]
 800eed2:	4620      	mov	r0, r4
 800eed4:	f000 f820 	bl	800ef18 <__sfp>
 800eed8:	6060      	str	r0, [r4, #4]
 800eeda:	4620      	mov	r0, r4
 800eedc:	f000 f81c 	bl	800ef18 <__sfp>
 800eee0:	60a0      	str	r0, [r4, #8]
 800eee2:	4620      	mov	r0, r4
 800eee4:	f000 f818 	bl	800ef18 <__sfp>
 800eee8:	2200      	movs	r2, #0
 800eeea:	60e0      	str	r0, [r4, #12]
 800eeec:	2104      	movs	r1, #4
 800eeee:	6860      	ldr	r0, [r4, #4]
 800eef0:	f7ff ff82 	bl	800edf8 <std>
 800eef4:	68a0      	ldr	r0, [r4, #8]
 800eef6:	2201      	movs	r2, #1
 800eef8:	2109      	movs	r1, #9
 800eefa:	f7ff ff7d 	bl	800edf8 <std>
 800eefe:	68e0      	ldr	r0, [r4, #12]
 800ef00:	2202      	movs	r2, #2
 800ef02:	2112      	movs	r1, #18
 800ef04:	f7ff ff78 	bl	800edf8 <std>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	61a3      	str	r3, [r4, #24]
 800ef0c:	e7d2      	b.n	800eeb4 <__sinit+0xc>
 800ef0e:	bf00      	nop
 800ef10:	0800f4a0 	.word	0x0800f4a0
 800ef14:	0800ee41 	.word	0x0800ee41

0800ef18 <__sfp>:
 800ef18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef1a:	4607      	mov	r7, r0
 800ef1c:	f7ff ffac 	bl	800ee78 <__sfp_lock_acquire>
 800ef20:	4b1e      	ldr	r3, [pc, #120]	; (800ef9c <__sfp+0x84>)
 800ef22:	681e      	ldr	r6, [r3, #0]
 800ef24:	69b3      	ldr	r3, [r6, #24]
 800ef26:	b913      	cbnz	r3, 800ef2e <__sfp+0x16>
 800ef28:	4630      	mov	r0, r6
 800ef2a:	f7ff ffbd 	bl	800eea8 <__sinit>
 800ef2e:	3648      	adds	r6, #72	; 0x48
 800ef30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef34:	3b01      	subs	r3, #1
 800ef36:	d503      	bpl.n	800ef40 <__sfp+0x28>
 800ef38:	6833      	ldr	r3, [r6, #0]
 800ef3a:	b30b      	cbz	r3, 800ef80 <__sfp+0x68>
 800ef3c:	6836      	ldr	r6, [r6, #0]
 800ef3e:	e7f7      	b.n	800ef30 <__sfp+0x18>
 800ef40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef44:	b9d5      	cbnz	r5, 800ef7c <__sfp+0x64>
 800ef46:	4b16      	ldr	r3, [pc, #88]	; (800efa0 <__sfp+0x88>)
 800ef48:	60e3      	str	r3, [r4, #12]
 800ef4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef4e:	6665      	str	r5, [r4, #100]	; 0x64
 800ef50:	f000 f847 	bl	800efe2 <__retarget_lock_init_recursive>
 800ef54:	f7ff ff96 	bl	800ee84 <__sfp_lock_release>
 800ef58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef60:	6025      	str	r5, [r4, #0]
 800ef62:	61a5      	str	r5, [r4, #24]
 800ef64:	2208      	movs	r2, #8
 800ef66:	4629      	mov	r1, r5
 800ef68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef6c:	f7fb ffae 	bl	800aecc <memset>
 800ef70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef78:	4620      	mov	r0, r4
 800ef7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef7c:	3468      	adds	r4, #104	; 0x68
 800ef7e:	e7d9      	b.n	800ef34 <__sfp+0x1c>
 800ef80:	2104      	movs	r1, #4
 800ef82:	4638      	mov	r0, r7
 800ef84:	f7ff ff62 	bl	800ee4c <__sfmoreglue>
 800ef88:	4604      	mov	r4, r0
 800ef8a:	6030      	str	r0, [r6, #0]
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	d1d5      	bne.n	800ef3c <__sfp+0x24>
 800ef90:	f7ff ff78 	bl	800ee84 <__sfp_lock_release>
 800ef94:	230c      	movs	r3, #12
 800ef96:	603b      	str	r3, [r7, #0]
 800ef98:	e7ee      	b.n	800ef78 <__sfp+0x60>
 800ef9a:	bf00      	nop
 800ef9c:	0800f4a0 	.word	0x0800f4a0
 800efa0:	ffff0001 	.word	0xffff0001

0800efa4 <_fwalk_reent>:
 800efa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efa8:	4606      	mov	r6, r0
 800efaa:	4688      	mov	r8, r1
 800efac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800efb0:	2700      	movs	r7, #0
 800efb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800efb6:	f1b9 0901 	subs.w	r9, r9, #1
 800efba:	d505      	bpl.n	800efc8 <_fwalk_reent+0x24>
 800efbc:	6824      	ldr	r4, [r4, #0]
 800efbe:	2c00      	cmp	r4, #0
 800efc0:	d1f7      	bne.n	800efb2 <_fwalk_reent+0xe>
 800efc2:	4638      	mov	r0, r7
 800efc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efc8:	89ab      	ldrh	r3, [r5, #12]
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d907      	bls.n	800efde <_fwalk_reent+0x3a>
 800efce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efd2:	3301      	adds	r3, #1
 800efd4:	d003      	beq.n	800efde <_fwalk_reent+0x3a>
 800efd6:	4629      	mov	r1, r5
 800efd8:	4630      	mov	r0, r6
 800efda:	47c0      	blx	r8
 800efdc:	4307      	orrs	r7, r0
 800efde:	3568      	adds	r5, #104	; 0x68
 800efe0:	e7e9      	b.n	800efb6 <_fwalk_reent+0x12>

0800efe2 <__retarget_lock_init_recursive>:
 800efe2:	4770      	bx	lr

0800efe4 <__retarget_lock_acquire_recursive>:
 800efe4:	4770      	bx	lr

0800efe6 <__retarget_lock_release_recursive>:
 800efe6:	4770      	bx	lr

0800efe8 <__swhatbuf_r>:
 800efe8:	b570      	push	{r4, r5, r6, lr}
 800efea:	460e      	mov	r6, r1
 800efec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eff0:	2900      	cmp	r1, #0
 800eff2:	b096      	sub	sp, #88	; 0x58
 800eff4:	4614      	mov	r4, r2
 800eff6:	461d      	mov	r5, r3
 800eff8:	da08      	bge.n	800f00c <__swhatbuf_r+0x24>
 800effa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800effe:	2200      	movs	r2, #0
 800f000:	602a      	str	r2, [r5, #0]
 800f002:	061a      	lsls	r2, r3, #24
 800f004:	d410      	bmi.n	800f028 <__swhatbuf_r+0x40>
 800f006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f00a:	e00e      	b.n	800f02a <__swhatbuf_r+0x42>
 800f00c:	466a      	mov	r2, sp
 800f00e:	f000 f951 	bl	800f2b4 <_fstat_r>
 800f012:	2800      	cmp	r0, #0
 800f014:	dbf1      	blt.n	800effa <__swhatbuf_r+0x12>
 800f016:	9a01      	ldr	r2, [sp, #4]
 800f018:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f01c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f020:	425a      	negs	r2, r3
 800f022:	415a      	adcs	r2, r3
 800f024:	602a      	str	r2, [r5, #0]
 800f026:	e7ee      	b.n	800f006 <__swhatbuf_r+0x1e>
 800f028:	2340      	movs	r3, #64	; 0x40
 800f02a:	2000      	movs	r0, #0
 800f02c:	6023      	str	r3, [r4, #0]
 800f02e:	b016      	add	sp, #88	; 0x58
 800f030:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f034 <__smakebuf_r>:
 800f034:	898b      	ldrh	r3, [r1, #12]
 800f036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f038:	079d      	lsls	r5, r3, #30
 800f03a:	4606      	mov	r6, r0
 800f03c:	460c      	mov	r4, r1
 800f03e:	d507      	bpl.n	800f050 <__smakebuf_r+0x1c>
 800f040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f044:	6023      	str	r3, [r4, #0]
 800f046:	6123      	str	r3, [r4, #16]
 800f048:	2301      	movs	r3, #1
 800f04a:	6163      	str	r3, [r4, #20]
 800f04c:	b002      	add	sp, #8
 800f04e:	bd70      	pop	{r4, r5, r6, pc}
 800f050:	ab01      	add	r3, sp, #4
 800f052:	466a      	mov	r2, sp
 800f054:	f7ff ffc8 	bl	800efe8 <__swhatbuf_r>
 800f058:	9900      	ldr	r1, [sp, #0]
 800f05a:	4605      	mov	r5, r0
 800f05c:	4630      	mov	r0, r6
 800f05e:	f7ff f9db 	bl	800e418 <_malloc_r>
 800f062:	b948      	cbnz	r0, 800f078 <__smakebuf_r+0x44>
 800f064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f068:	059a      	lsls	r2, r3, #22
 800f06a:	d4ef      	bmi.n	800f04c <__smakebuf_r+0x18>
 800f06c:	f023 0303 	bic.w	r3, r3, #3
 800f070:	f043 0302 	orr.w	r3, r3, #2
 800f074:	81a3      	strh	r3, [r4, #12]
 800f076:	e7e3      	b.n	800f040 <__smakebuf_r+0xc>
 800f078:	4b0d      	ldr	r3, [pc, #52]	; (800f0b0 <__smakebuf_r+0x7c>)
 800f07a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f07c:	89a3      	ldrh	r3, [r4, #12]
 800f07e:	6020      	str	r0, [r4, #0]
 800f080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f084:	81a3      	strh	r3, [r4, #12]
 800f086:	9b00      	ldr	r3, [sp, #0]
 800f088:	6163      	str	r3, [r4, #20]
 800f08a:	9b01      	ldr	r3, [sp, #4]
 800f08c:	6120      	str	r0, [r4, #16]
 800f08e:	b15b      	cbz	r3, 800f0a8 <__smakebuf_r+0x74>
 800f090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f094:	4630      	mov	r0, r6
 800f096:	f000 f91f 	bl	800f2d8 <_isatty_r>
 800f09a:	b128      	cbz	r0, 800f0a8 <__smakebuf_r+0x74>
 800f09c:	89a3      	ldrh	r3, [r4, #12]
 800f09e:	f023 0303 	bic.w	r3, r3, #3
 800f0a2:	f043 0301 	orr.w	r3, r3, #1
 800f0a6:	81a3      	strh	r3, [r4, #12]
 800f0a8:	89a0      	ldrh	r0, [r4, #12]
 800f0aa:	4305      	orrs	r5, r0
 800f0ac:	81a5      	strh	r5, [r4, #12]
 800f0ae:	e7cd      	b.n	800f04c <__smakebuf_r+0x18>
 800f0b0:	0800ee41 	.word	0x0800ee41

0800f0b4 <memmove>:
 800f0b4:	4288      	cmp	r0, r1
 800f0b6:	b510      	push	{r4, lr}
 800f0b8:	eb01 0402 	add.w	r4, r1, r2
 800f0bc:	d902      	bls.n	800f0c4 <memmove+0x10>
 800f0be:	4284      	cmp	r4, r0
 800f0c0:	4623      	mov	r3, r4
 800f0c2:	d807      	bhi.n	800f0d4 <memmove+0x20>
 800f0c4:	1e43      	subs	r3, r0, #1
 800f0c6:	42a1      	cmp	r1, r4
 800f0c8:	d008      	beq.n	800f0dc <memmove+0x28>
 800f0ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0d2:	e7f8      	b.n	800f0c6 <memmove+0x12>
 800f0d4:	4402      	add	r2, r0
 800f0d6:	4601      	mov	r1, r0
 800f0d8:	428a      	cmp	r2, r1
 800f0da:	d100      	bne.n	800f0de <memmove+0x2a>
 800f0dc:	bd10      	pop	{r4, pc}
 800f0de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f0e6:	e7f7      	b.n	800f0d8 <memmove+0x24>

0800f0e8 <__malloc_lock>:
 800f0e8:	4801      	ldr	r0, [pc, #4]	; (800f0f0 <__malloc_lock+0x8>)
 800f0ea:	f7ff bf7b 	b.w	800efe4 <__retarget_lock_acquire_recursive>
 800f0ee:	bf00      	nop
 800f0f0:	200007c8 	.word	0x200007c8

0800f0f4 <__malloc_unlock>:
 800f0f4:	4801      	ldr	r0, [pc, #4]	; (800f0fc <__malloc_unlock+0x8>)
 800f0f6:	f7ff bf76 	b.w	800efe6 <__retarget_lock_release_recursive>
 800f0fa:	bf00      	nop
 800f0fc:	200007c8 	.word	0x200007c8

0800f100 <_realloc_r>:
 800f100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f104:	4680      	mov	r8, r0
 800f106:	4614      	mov	r4, r2
 800f108:	460e      	mov	r6, r1
 800f10a:	b921      	cbnz	r1, 800f116 <_realloc_r+0x16>
 800f10c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f110:	4611      	mov	r1, r2
 800f112:	f7ff b981 	b.w	800e418 <_malloc_r>
 800f116:	b92a      	cbnz	r2, 800f124 <_realloc_r+0x24>
 800f118:	f7ff f912 	bl	800e340 <_free_r>
 800f11c:	4625      	mov	r5, r4
 800f11e:	4628      	mov	r0, r5
 800f120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f124:	f000 f8fa 	bl	800f31c <_malloc_usable_size_r>
 800f128:	4284      	cmp	r4, r0
 800f12a:	4607      	mov	r7, r0
 800f12c:	d802      	bhi.n	800f134 <_realloc_r+0x34>
 800f12e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f132:	d812      	bhi.n	800f15a <_realloc_r+0x5a>
 800f134:	4621      	mov	r1, r4
 800f136:	4640      	mov	r0, r8
 800f138:	f7ff f96e 	bl	800e418 <_malloc_r>
 800f13c:	4605      	mov	r5, r0
 800f13e:	2800      	cmp	r0, #0
 800f140:	d0ed      	beq.n	800f11e <_realloc_r+0x1e>
 800f142:	42bc      	cmp	r4, r7
 800f144:	4622      	mov	r2, r4
 800f146:	4631      	mov	r1, r6
 800f148:	bf28      	it	cs
 800f14a:	463a      	movcs	r2, r7
 800f14c:	f7fe fc12 	bl	800d974 <memcpy>
 800f150:	4631      	mov	r1, r6
 800f152:	4640      	mov	r0, r8
 800f154:	f7ff f8f4 	bl	800e340 <_free_r>
 800f158:	e7e1      	b.n	800f11e <_realloc_r+0x1e>
 800f15a:	4635      	mov	r5, r6
 800f15c:	e7df      	b.n	800f11e <_realloc_r+0x1e>

0800f15e <_raise_r>:
 800f15e:	291f      	cmp	r1, #31
 800f160:	b538      	push	{r3, r4, r5, lr}
 800f162:	4604      	mov	r4, r0
 800f164:	460d      	mov	r5, r1
 800f166:	d904      	bls.n	800f172 <_raise_r+0x14>
 800f168:	2316      	movs	r3, #22
 800f16a:	6003      	str	r3, [r0, #0]
 800f16c:	f04f 30ff 	mov.w	r0, #4294967295
 800f170:	bd38      	pop	{r3, r4, r5, pc}
 800f172:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f174:	b112      	cbz	r2, 800f17c <_raise_r+0x1e>
 800f176:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f17a:	b94b      	cbnz	r3, 800f190 <_raise_r+0x32>
 800f17c:	4620      	mov	r0, r4
 800f17e:	f000 f831 	bl	800f1e4 <_getpid_r>
 800f182:	462a      	mov	r2, r5
 800f184:	4601      	mov	r1, r0
 800f186:	4620      	mov	r0, r4
 800f188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f18c:	f000 b818 	b.w	800f1c0 <_kill_r>
 800f190:	2b01      	cmp	r3, #1
 800f192:	d00a      	beq.n	800f1aa <_raise_r+0x4c>
 800f194:	1c59      	adds	r1, r3, #1
 800f196:	d103      	bne.n	800f1a0 <_raise_r+0x42>
 800f198:	2316      	movs	r3, #22
 800f19a:	6003      	str	r3, [r0, #0]
 800f19c:	2001      	movs	r0, #1
 800f19e:	e7e7      	b.n	800f170 <_raise_r+0x12>
 800f1a0:	2400      	movs	r4, #0
 800f1a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	4798      	blx	r3
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	e7e0      	b.n	800f170 <_raise_r+0x12>
	...

0800f1b0 <raise>:
 800f1b0:	4b02      	ldr	r3, [pc, #8]	; (800f1bc <raise+0xc>)
 800f1b2:	4601      	mov	r1, r0
 800f1b4:	6818      	ldr	r0, [r3, #0]
 800f1b6:	f7ff bfd2 	b.w	800f15e <_raise_r>
 800f1ba:	bf00      	nop
 800f1bc:	20000010 	.word	0x20000010

0800f1c0 <_kill_r>:
 800f1c0:	b538      	push	{r3, r4, r5, lr}
 800f1c2:	4d07      	ldr	r5, [pc, #28]	; (800f1e0 <_kill_r+0x20>)
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	4608      	mov	r0, r1
 800f1ca:	4611      	mov	r1, r2
 800f1cc:	602b      	str	r3, [r5, #0]
 800f1ce:	f7f4 f801 	bl	80031d4 <_kill>
 800f1d2:	1c43      	adds	r3, r0, #1
 800f1d4:	d102      	bne.n	800f1dc <_kill_r+0x1c>
 800f1d6:	682b      	ldr	r3, [r5, #0]
 800f1d8:	b103      	cbz	r3, 800f1dc <_kill_r+0x1c>
 800f1da:	6023      	str	r3, [r4, #0]
 800f1dc:	bd38      	pop	{r3, r4, r5, pc}
 800f1de:	bf00      	nop
 800f1e0:	200007cc 	.word	0x200007cc

0800f1e4 <_getpid_r>:
 800f1e4:	f7f3 bfee 	b.w	80031c4 <_getpid>

0800f1e8 <__sread>:
 800f1e8:	b510      	push	{r4, lr}
 800f1ea:	460c      	mov	r4, r1
 800f1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1f0:	f000 f89c 	bl	800f32c <_read_r>
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	bfab      	itete	ge
 800f1f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f1fa:	89a3      	ldrhlt	r3, [r4, #12]
 800f1fc:	181b      	addge	r3, r3, r0
 800f1fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f202:	bfac      	ite	ge
 800f204:	6563      	strge	r3, [r4, #84]	; 0x54
 800f206:	81a3      	strhlt	r3, [r4, #12]
 800f208:	bd10      	pop	{r4, pc}

0800f20a <__swrite>:
 800f20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f20e:	461f      	mov	r7, r3
 800f210:	898b      	ldrh	r3, [r1, #12]
 800f212:	05db      	lsls	r3, r3, #23
 800f214:	4605      	mov	r5, r0
 800f216:	460c      	mov	r4, r1
 800f218:	4616      	mov	r6, r2
 800f21a:	d505      	bpl.n	800f228 <__swrite+0x1e>
 800f21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f220:	2302      	movs	r3, #2
 800f222:	2200      	movs	r2, #0
 800f224:	f000 f868 	bl	800f2f8 <_lseek_r>
 800f228:	89a3      	ldrh	r3, [r4, #12]
 800f22a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f22e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f232:	81a3      	strh	r3, [r4, #12]
 800f234:	4632      	mov	r2, r6
 800f236:	463b      	mov	r3, r7
 800f238:	4628      	mov	r0, r5
 800f23a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f23e:	f000 b817 	b.w	800f270 <_write_r>

0800f242 <__sseek>:
 800f242:	b510      	push	{r4, lr}
 800f244:	460c      	mov	r4, r1
 800f246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f24a:	f000 f855 	bl	800f2f8 <_lseek_r>
 800f24e:	1c43      	adds	r3, r0, #1
 800f250:	89a3      	ldrh	r3, [r4, #12]
 800f252:	bf15      	itete	ne
 800f254:	6560      	strne	r0, [r4, #84]	; 0x54
 800f256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f25a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f25e:	81a3      	strheq	r3, [r4, #12]
 800f260:	bf18      	it	ne
 800f262:	81a3      	strhne	r3, [r4, #12]
 800f264:	bd10      	pop	{r4, pc}

0800f266 <__sclose>:
 800f266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f26a:	f000 b813 	b.w	800f294 <_close_r>
	...

0800f270 <_write_r>:
 800f270:	b538      	push	{r3, r4, r5, lr}
 800f272:	4d07      	ldr	r5, [pc, #28]	; (800f290 <_write_r+0x20>)
 800f274:	4604      	mov	r4, r0
 800f276:	4608      	mov	r0, r1
 800f278:	4611      	mov	r1, r2
 800f27a:	2200      	movs	r2, #0
 800f27c:	602a      	str	r2, [r5, #0]
 800f27e:	461a      	mov	r2, r3
 800f280:	f7f3 ffdf 	bl	8003242 <_write>
 800f284:	1c43      	adds	r3, r0, #1
 800f286:	d102      	bne.n	800f28e <_write_r+0x1e>
 800f288:	682b      	ldr	r3, [r5, #0]
 800f28a:	b103      	cbz	r3, 800f28e <_write_r+0x1e>
 800f28c:	6023      	str	r3, [r4, #0]
 800f28e:	bd38      	pop	{r3, r4, r5, pc}
 800f290:	200007cc 	.word	0x200007cc

0800f294 <_close_r>:
 800f294:	b538      	push	{r3, r4, r5, lr}
 800f296:	4d06      	ldr	r5, [pc, #24]	; (800f2b0 <_close_r+0x1c>)
 800f298:	2300      	movs	r3, #0
 800f29a:	4604      	mov	r4, r0
 800f29c:	4608      	mov	r0, r1
 800f29e:	602b      	str	r3, [r5, #0]
 800f2a0:	f7f3 ffeb 	bl	800327a <_close>
 800f2a4:	1c43      	adds	r3, r0, #1
 800f2a6:	d102      	bne.n	800f2ae <_close_r+0x1a>
 800f2a8:	682b      	ldr	r3, [r5, #0]
 800f2aa:	b103      	cbz	r3, 800f2ae <_close_r+0x1a>
 800f2ac:	6023      	str	r3, [r4, #0]
 800f2ae:	bd38      	pop	{r3, r4, r5, pc}
 800f2b0:	200007cc 	.word	0x200007cc

0800f2b4 <_fstat_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	4d07      	ldr	r5, [pc, #28]	; (800f2d4 <_fstat_r+0x20>)
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	4608      	mov	r0, r1
 800f2be:	4611      	mov	r1, r2
 800f2c0:	602b      	str	r3, [r5, #0]
 800f2c2:	f7f3 ffe6 	bl	8003292 <_fstat>
 800f2c6:	1c43      	adds	r3, r0, #1
 800f2c8:	d102      	bne.n	800f2d0 <_fstat_r+0x1c>
 800f2ca:	682b      	ldr	r3, [r5, #0]
 800f2cc:	b103      	cbz	r3, 800f2d0 <_fstat_r+0x1c>
 800f2ce:	6023      	str	r3, [r4, #0]
 800f2d0:	bd38      	pop	{r3, r4, r5, pc}
 800f2d2:	bf00      	nop
 800f2d4:	200007cc 	.word	0x200007cc

0800f2d8 <_isatty_r>:
 800f2d8:	b538      	push	{r3, r4, r5, lr}
 800f2da:	4d06      	ldr	r5, [pc, #24]	; (800f2f4 <_isatty_r+0x1c>)
 800f2dc:	2300      	movs	r3, #0
 800f2de:	4604      	mov	r4, r0
 800f2e0:	4608      	mov	r0, r1
 800f2e2:	602b      	str	r3, [r5, #0]
 800f2e4:	f7f3 ffe5 	bl	80032b2 <_isatty>
 800f2e8:	1c43      	adds	r3, r0, #1
 800f2ea:	d102      	bne.n	800f2f2 <_isatty_r+0x1a>
 800f2ec:	682b      	ldr	r3, [r5, #0]
 800f2ee:	b103      	cbz	r3, 800f2f2 <_isatty_r+0x1a>
 800f2f0:	6023      	str	r3, [r4, #0]
 800f2f2:	bd38      	pop	{r3, r4, r5, pc}
 800f2f4:	200007cc 	.word	0x200007cc

0800f2f8 <_lseek_r>:
 800f2f8:	b538      	push	{r3, r4, r5, lr}
 800f2fa:	4d07      	ldr	r5, [pc, #28]	; (800f318 <_lseek_r+0x20>)
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	4608      	mov	r0, r1
 800f300:	4611      	mov	r1, r2
 800f302:	2200      	movs	r2, #0
 800f304:	602a      	str	r2, [r5, #0]
 800f306:	461a      	mov	r2, r3
 800f308:	f7f3 ffde 	bl	80032c8 <_lseek>
 800f30c:	1c43      	adds	r3, r0, #1
 800f30e:	d102      	bne.n	800f316 <_lseek_r+0x1e>
 800f310:	682b      	ldr	r3, [r5, #0]
 800f312:	b103      	cbz	r3, 800f316 <_lseek_r+0x1e>
 800f314:	6023      	str	r3, [r4, #0]
 800f316:	bd38      	pop	{r3, r4, r5, pc}
 800f318:	200007cc 	.word	0x200007cc

0800f31c <_malloc_usable_size_r>:
 800f31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f320:	1f18      	subs	r0, r3, #4
 800f322:	2b00      	cmp	r3, #0
 800f324:	bfbc      	itt	lt
 800f326:	580b      	ldrlt	r3, [r1, r0]
 800f328:	18c0      	addlt	r0, r0, r3
 800f32a:	4770      	bx	lr

0800f32c <_read_r>:
 800f32c:	b538      	push	{r3, r4, r5, lr}
 800f32e:	4d07      	ldr	r5, [pc, #28]	; (800f34c <_read_r+0x20>)
 800f330:	4604      	mov	r4, r0
 800f332:	4608      	mov	r0, r1
 800f334:	4611      	mov	r1, r2
 800f336:	2200      	movs	r2, #0
 800f338:	602a      	str	r2, [r5, #0]
 800f33a:	461a      	mov	r2, r3
 800f33c:	f7f3 ff64 	bl	8003208 <_read>
 800f340:	1c43      	adds	r3, r0, #1
 800f342:	d102      	bne.n	800f34a <_read_r+0x1e>
 800f344:	682b      	ldr	r3, [r5, #0]
 800f346:	b103      	cbz	r3, 800f34a <_read_r+0x1e>
 800f348:	6023      	str	r3, [r4, #0]
 800f34a:	bd38      	pop	{r3, r4, r5, pc}
 800f34c:	200007cc 	.word	0x200007cc

0800f350 <_init>:
 800f350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f352:	bf00      	nop
 800f354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f356:	bc08      	pop	{r3}
 800f358:	469e      	mov	lr, r3
 800f35a:	4770      	bx	lr

0800f35c <_fini>:
 800f35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f35e:	bf00      	nop
 800f360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f362:	bc08      	pop	{r3}
 800f364:	469e      	mov	lr, r3
 800f366:	4770      	bx	lr
