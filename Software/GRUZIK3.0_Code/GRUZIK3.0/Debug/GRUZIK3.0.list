
GRUZIK3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139ac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a7c  08013b90  08013b90  00014b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801460c  0801460c  000161f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801460c  0801460c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014614  08014614  000161f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014614  08014614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014618  08014618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801461c  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a3c  200001f0  0801480c  000161f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006c2c  0801480c  00016c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000161f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026ddd  00000000  00000000  00016220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005415  00000000  00000000  0003cffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b8  00000000  00000000  00042418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001945  00000000  00000000  000444d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007ece  00000000  00000000  00045e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dfd5  00000000  00000000  0004dce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d0b1  00000000  00000000  0007bcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00198d69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a02c  00000000  00000000  00198dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001a2dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013b74 	.word	0x08013b74

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	08013b74 	.word	0x08013b74

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <LowPassFilter_Init>:
 */
#include "main.h"
#include"LowPassFilter.h"

void LowPassFilter_Init(LowPassFilter_t *LPF, float alpha)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	ed87 0a00 	vstr	s0, [r7]
	LPF->alpha = alpha;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LowPassFilter_Update>:
float LowPassFilter_Update(LowPassFilter_t *LPF, float input)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	ed87 0a00 	vstr	s0, [r7]
	/*Standard low pass filter*/
	LPF->output = LPF->alpha * input + (1.0f - LPF->alpha) * LPF->output;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	ed93 7a00 	vldr	s14, [r3]
 8001084:	edd7 7a00 	vldr	s15, [r7]
 8001088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001096:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	edd3 7a01 	vldr	s15, [r3, #4]
 80010a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edc3 7a01 	vstr	s15, [r3, #4]

	/*IIR filter*/
	//LPF->output = (1.0f - LPF->alpha) * input + LPF->alpha * LPF->output;

	return LPF->output;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	ee07 3a90 	vmov	s15, r3
}
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <RB_Write>:
 */
#include "main.h"
#include "RingBuffer.h"

RB_Status RB_Write(RingBuffer_t *Buf, uint8_t value)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	425a      	negs	r2, r3
 80010d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010dc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80010e0:	bf58      	it	pl
 80010e2:	4253      	negpl	r3, r2
 80010e4:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buf->Tail)
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	885b      	ldrh	r3, [r3, #2]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d101      	bne.n	80010f6 <RB_Write+0x32>
	{
		return RB_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00b      	b.n	800110e <RB_Write+0x4a>
	}

	Buf->Buffer[Buf->Head] = value;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	78fa      	ldrb	r2, [r7, #3]
 8001102:	711a      	strb	r2, [r3, #4]

	Buf->Head = HeadTmp;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	b29a      	uxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <RB_Read>:

RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *value)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
	if(Buf->Head == Buf->Tail)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	881a      	ldrh	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	885b      	ldrh	r3, [r3, #2]
 800112c:	429a      	cmp	r2, r3
 800112e:	d101      	bne.n	8001134 <RB_Read+0x1a>
	{
		return RB_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e015      	b.n	8001160 <RB_Read+0x46>
	}

	*value = Buf->Buffer[Buf->Tail];
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	885b      	ldrh	r3, [r3, #2]
 8001138:	461a      	mov	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	791a      	ldrb	r2, [r3, #4]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	701a      	strb	r2, [r3, #0]

	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	885b      	ldrh	r3, [r3, #2]
 8001148:	3301      	adds	r3, #1
 800114a:	425a      	negs	r2, r3
 800114c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001150:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001154:	bf58      	it	pl
 8001156:	4253      	negpl	r3, r2
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <Parser_TakeLine>:
extern FIL SdCardFile;
/*MAP*/
extern Map_t map;

void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *ReceivedData)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	uint8_t Tmp;
	uint8_t i = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
	do
	{
		RB_Read(Buf, &Tmp);
 800117a:	f107 030e 	add.w	r3, r7, #14
 800117e:	4619      	mov	r1, r3
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ffca 	bl	800111a <RB_Read>

		if(Tmp == ENDLINE)
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	2b0a      	cmp	r3, #10
 800118a:	d105      	bne.n	8001198 <Parser_TakeLine+0x2c>
		{
			ReceivedData[i] = 0;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	4413      	add	r3, r2
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e004      	b.n	80011a2 <Parser_TakeLine+0x36>

		}

		else
		{
			ReceivedData[i] = Tmp;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	4413      	add	r3, r2
 800119e:	7bba      	ldrb	r2, [r7, #14]
 80011a0:	701a      	strb	r2, [r3, #0]
		}
		i++;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	3301      	adds	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]

	} while(Tmp != ENDLINE);
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	2b0a      	cmp	r3, #10
 80011ac:	d1e5      	bne.n	800117a <Parser_TakeLine+0xe>

}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <kp_change>:

static void kp_change(LineFollower_t *LF)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80011c0:	490f      	ldr	r1, [pc, #60]	@ (8001200 <kp_change+0x48>)
 80011c2:	2000      	movs	r0, #0
 80011c4:	f00f f9c8 	bl	8010558 <strtok>
 80011c8:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d011      	beq.n	80011f6 <kp_change+0x3e>
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff f884 	bl	80002e0 <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b1f      	cmp	r3, #31
 80011dc:	d80b      	bhi.n	80011f6 <kp_change+0x3e>
	{
		LF->Kp = atof(ParsePointer);
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f00d fe11 	bl	800ee06 <atof>
 80011e4:	ec53 2b10 	vmov	r2, r3, d0
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fd34 	bl	8000c58 <__aeabi_d2f>
 80011f0:	4602      	mov	r2, r0
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
	}

}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	08013b90 	.word	0x08013b90

08001204 <kd_change>:
static void kd_change(LineFollower_t *LF)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 800120c:	490f      	ldr	r1, [pc, #60]	@ (800124c <kd_change+0x48>)
 800120e:	2000      	movs	r0, #0
 8001210:	f00f f9a2 	bl	8010558 <strtok>
 8001214:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d011      	beq.n	8001242 <kd_change+0x3e>
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff f85e 	bl	80002e0 <strlen>
 8001224:	4603      	mov	r3, r0
 8001226:	2b1f      	cmp	r3, #31
 8001228:	d80b      	bhi.n	8001242 <kd_change+0x3e>
	{
		LF->Kd = atof(ParsePointer);
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f00d fdeb 	bl	800ee06 <atof>
 8001230:	ec53 2b10 	vmov	r2, r3, d0
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fd0e 	bl	8000c58 <__aeabi_d2f>
 800123c:	4602      	mov	r2, r0
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	605a      	str	r2, [r3, #4]
	}
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	08013b90 	.word	0x08013b90

08001250 <Base_speed_change>:
static void Base_speed_change(LineFollower_t *LF)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001258:	4915      	ldr	r1, [pc, #84]	@ (80012b0 <Base_speed_change+0x60>)
 800125a:	2000      	movs	r0, #0
 800125c:	f00f f97c 	bl	8010558 <strtok>
 8001260:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d01d      	beq.n	80012a6 <Base_speed_change+0x56>
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff f838 	bl	80002e0 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	2b1f      	cmp	r3, #31
 8001274:	d817      	bhi.n	80012a6 <Base_speed_change+0x56>
	{
		LF->Base_speed_R = atof(ParsePointer);
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f00d fdc5 	bl	800ee06 <atof>
 800127c:	ec53 2b10 	vmov	r2, r3, d0
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fca0 	bl	8000bc8 <__aeabi_d2iz>
 8001288:	4602      	mov	r2, r0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	609a      	str	r2, [r3, #8]
		LF->Base_speed_L = atof(ParsePointer);
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f00d fdb9 	bl	800ee06 <atof>
 8001294:	ec53 2b10 	vmov	r2, r3, d0
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fc94 	bl	8000bc8 <__aeabi_d2iz>
 80012a0:	4602      	mov	r2, r0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60da      	str	r2, [r3, #12]
	}
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	08013b90 	.word	0x08013b90

080012b4 <Max_speed_change>:

static void Max_speed_change(LineFollower_t *LF)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80012bc:	4915      	ldr	r1, [pc, #84]	@ (8001314 <Max_speed_change+0x60>)
 80012be:	2000      	movs	r0, #0
 80012c0:	f00f f94a 	bl	8010558 <strtok>
 80012c4:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d01d      	beq.n	800130a <Max_speed_change+0x56>
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff f806 	bl	80002e0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b1f      	cmp	r3, #31
 80012d8:	d817      	bhi.n	800130a <Max_speed_change+0x56>
	{
		LF->Max_speed_R = atof(ParsePointer);
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f00d fd93 	bl	800ee06 <atof>
 80012e0:	ec53 2b10 	vmov	r2, r3, d0
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc6e 	bl	8000bc8 <__aeabi_d2iz>
 80012ec:	4602      	mov	r2, r0
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	611a      	str	r2, [r3, #16]
		LF->Max_speed_L = atof(ParsePointer);
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f00d fd87 	bl	800ee06 <atof>
 80012f8:	ec53 2b10 	vmov	r2, r3, d0
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc62 	bl	8000bc8 <__aeabi_d2iz>
 8001304:	4602      	mov	r2, r0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	615a      	str	r2, [r3, #20]
	}
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	08013b90 	.word	0x08013b90

08001318 <Sharp_bend_speed_right_change>:
static void Sharp_bend_speed_right_change(LineFollower_t *LF)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001320:	490f      	ldr	r1, [pc, #60]	@ (8001360 <Sharp_bend_speed_right_change+0x48>)
 8001322:	2000      	movs	r0, #0
 8001324:	f00f f918 	bl	8010558 <strtok>
 8001328:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d011      	beq.n	8001356 <Sharp_bend_speed_right_change+0x3e>
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f7fe ffd4 	bl	80002e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	2b1f      	cmp	r3, #31
 800133c:	d80b      	bhi.n	8001356 <Sharp_bend_speed_right_change+0x3e>
	{
	LF->Sharp_bend_speed_right = atof(ParsePointer);
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f00d fd61 	bl	800ee06 <atof>
 8001344:	ec53 2b10 	vmov	r2, r3, d0
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc3c 	bl	8000bc8 <__aeabi_d2iz>
 8001350:	4602      	mov	r2, r0
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
	}
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	08013b90 	.word	0x08013b90

08001364 <Sharp_bend_speed_left_change>:
static void Sharp_bend_speed_left_change(LineFollower_t *LF)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 800136c:	490f      	ldr	r1, [pc, #60]	@ (80013ac <Sharp_bend_speed_left_change+0x48>)
 800136e:	2000      	movs	r0, #0
 8001370:	f00f f8f2 	bl	8010558 <strtok>
 8001374:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d011      	beq.n	80013a2 <Sharp_bend_speed_left_change+0x3e>
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7fe ffae 	bl	80002e0 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	2b1f      	cmp	r3, #31
 8001388:	d80b      	bhi.n	80013a2 <Sharp_bend_speed_left_change+0x3e>
	{
	LF->Sharp_bend_speed_left = atof(ParsePointer);
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f00d fd3b 	bl	800ee06 <atof>
 8001390:	ec53 2b10 	vmov	r2, r3, d0
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fc16 	bl	8000bc8 <__aeabi_d2iz>
 800139c:	4602      	mov	r2, r0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	61da      	str	r2, [r3, #28]
	}
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	08013b90 	.word	0x08013b90

080013b0 <Bend_speed_right_change>:
static void Bend_speed_right_change(LineFollower_t *LF)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80013b8:	490f      	ldr	r1, [pc, #60]	@ (80013f8 <Bend_speed_right_change+0x48>)
 80013ba:	2000      	movs	r0, #0
 80013bc:	f00f f8cc 	bl	8010558 <strtok>
 80013c0:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d011      	beq.n	80013ee <Bend_speed_right_change+0x3e>
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7fe ff88 	bl	80002e0 <strlen>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b1f      	cmp	r3, #31
 80013d4:	d80b      	bhi.n	80013ee <Bend_speed_right_change+0x3e>
	{
	LF->Bend_speed_right = atof(ParsePointer);
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f00d fd15 	bl	800ee06 <atof>
 80013dc:	ec53 2b10 	vmov	r2, r3, d0
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fbf0 	bl	8000bc8 <__aeabi_d2iz>
 80013e8:	4602      	mov	r2, r0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	621a      	str	r2, [r3, #32]
	}
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	08013b90 	.word	0x08013b90

080013fc <Bend_speed_left_change>:
static void Bend_speed_left_change(LineFollower_t *LF)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001404:	490f      	ldr	r1, [pc, #60]	@ (8001444 <Bend_speed_left_change+0x48>)
 8001406:	2000      	movs	r0, #0
 8001408:	f00f f8a6 	bl	8010558 <strtok>
 800140c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d011      	beq.n	800143a <Bend_speed_left_change+0x3e>
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7fe ff62 	bl	80002e0 <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	2b1f      	cmp	r3, #31
 8001420:	d80b      	bhi.n	800143a <Bend_speed_left_change+0x3e>
	{
	LF->Bend_speed_left = atof(ParsePointer);
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f00d fcef 	bl	800ee06 <atof>
 8001428:	ec53 2b10 	vmov	r2, r3, d0
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fbca 	bl	8000bc8 <__aeabi_d2iz>
 8001434:	4602      	mov	r2, r0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	08013b90 	.word	0x08013b90

08001448 <App_Controll>:
static void App_Controll(char RxData, LineFollower_t *LineFollower)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b0a6      	sub	sp, #152	@ 0x98
 800144c:	af02      	add	r7, sp, #8
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
	/*Stop robot*/
	if(RxData == 'N')
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b4e      	cmp	r3, #78	@ 0x4e
 8001458:	d154      	bne.n	8001504 <App_Controll+0xbc>
	{
		uint8_t buffer[128];
		/*Stop GRUZIK2.0 and turn off the LED*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	2140      	movs	r1, #64	@ 0x40
 800145e:	4860      	ldr	r0, [pc, #384]	@ (80015e0 <App_Controll+0x198>)
 8001460:	f004 ff9a 	bl	8006398 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2120      	movs	r1, #32
 8001468:	485d      	ldr	r0, [pc, #372]	@ (80015e0 <App_Controll+0x198>)
 800146a:	f004 ff95 	bl	8006398 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2140      	movs	r1, #64	@ 0x40
 8001472:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001476:	f004 ff8f 	bl	8006398 <HAL_GPIO_WritePin>

		/*Send battery voltage*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f888 	bl	8000594 <__aeabi_i2d>
 8001484:	a34e      	add	r3, pc, #312	@ (adr r3, 80015c0 <App_Controll+0x178>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f8ed 	bl	8000668 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	a34c      	add	r3, pc, #304	@ (adr r3, 80015c8 <App_Controll+0x180>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff fa0e 	bl	80008bc <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fbd6 	bl	8000c58 <__aeabi_d2f>
 80014ac:	4602      	mov	r2, r0
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014b6:	461c      	mov	r4, r3
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f87b 	bl	80005b8 <__aeabi_f2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	f107 000c 	add.w	r0, r7, #12
 80014ca:	e9cd 2300 	strd	r2, r3, [sp]
 80014ce:	4622      	mov	r2, r4
 80014d0:	4944      	ldr	r1, [pc, #272]	@ (80015e4 <App_Controll+0x19c>)
 80014d2:	f00e ffc3 	bl	801045c <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe ff00 	bl	80002e0 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	f107 010c 	add.w	r1, r7, #12
 80014e8:	2364      	movs	r3, #100	@ 0x64
 80014ea:	483f      	ldr	r0, [pc, #252]	@ (80015e8 <App_Controll+0x1a0>)
 80014ec:	f008 f9f2 	bl	80098d4 <HAL_UART_Transmit>

		/*Stop mapping the track*/
		map.Mapping = 0;
 80014f0:	4b3e      	ldr	r3, [pc, #248]	@ (80015ec <App_Controll+0x1a4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
		FatFsResult = f_close(&SdCardFile);
 80014f6:	483e      	ldr	r0, [pc, #248]	@ (80015f0 <App_Controll+0x1a8>)
 80014f8:	f00d f96b 	bl	800e7d2 <f_close>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b3c      	ldr	r3, [pc, #240]	@ (80015f4 <App_Controll+0x1ac>)
 8001502:	701a      	strb	r2, [r3, #0]

	}
	/*Start robot*/
	if (RxData == 'Y')
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b59      	cmp	r3, #89	@ 0x59
 8001508:	f040 811a 	bne.w	8001740 <App_Controll+0x2f8>
		/*Proportional to battery percentage boost for motors
		 * to keep roughly same speed as with full battery*/
		float battery_percentage;
		uint8_t buffer[128];
		//Calculate battery percentage based on battery voltage
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f83f 	bl	8000594 <__aeabi_i2d>
 8001516:	a32a      	add	r3, pc, #168	@ (adr r3, 80015c0 <App_Controll+0x178>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f8a4 	bl	8000668 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	a327      	add	r3, pc, #156	@ (adr r3, 80015c8 <App_Controll+0x180>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f9c5 	bl	80008bc <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fb8d 	bl	8000c58 <__aeabi_d2f>
 800153e:	4602      	mov	r2, r0
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28

		//Full battery voltage in working line follower is about 8.24V
		battery_percentage = (LineFollower->battery_voltage / 8.24) * 100;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff f835 	bl	80005b8 <__aeabi_f2d>
 800154e:	a320      	add	r3, pc, #128	@ (adr r3, 80015d0 <App_Controll+0x188>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f9b2 	bl	80008bc <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <App_Controll+0x1b0>)
 8001566:	f7ff f87f 	bl	8000668 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb71 	bl	8000c58 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

		/*To don't damage 2s LiPo battery Line follower can't start with battery below 7.2V*/
		if (LineFollower->battery_voltage < 7.2)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff f819 	bl	80005b8 <__aeabi_f2d>
 8001586:	a314      	add	r3, pc, #80	@ (adr r3, 80015d8 <App_Controll+0x190>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff fade 	bl	8000b4c <__aeabi_dcmplt>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d036      	beq.n	8001604 <App_Controll+0x1bc>
		{
			sprintf((char*)buffer, "! Low Battery !\r\n");
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4918      	ldr	r1, [pc, #96]	@ (80015fc <App_Controll+0x1b4>)
 800159c:	4618      	mov	r0, r3
 800159e:	f00e ff5d 	bl	801045c <siprintf>
			HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe fe9a 	bl	80002e0 <strlen>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f107 010c 	add.w	r1, r7, #12
 80015b4:	2364      	movs	r3, #100	@ 0x64
 80015b6:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <App_Controll+0x1a0>)
 80015b8:	f008 f98c 	bl	80098d4 <HAL_UART_Transmit>
 80015bc:	e34a      	b.n	8001c54 <App_Controll+0x80c>
 80015be:	bf00      	nop
 80015c0:	9999999a 	.word	0x9999999a
 80015c4:	40209999 	.word	0x40209999
 80015c8:	00000000 	.word	0x00000000
 80015cc:	40adee00 	.word	0x40adee00
 80015d0:	47ae147b 	.word	0x47ae147b
 80015d4:	40207ae1 	.word	0x40207ae1
 80015d8:	cccccccd 	.word	0xcccccccd
 80015dc:	401ccccc 	.word	0x401ccccc
 80015e0:	48000800 	.word	0x48000800
 80015e4:	08013b94 	.word	0x08013b94
 80015e8:	20006a04 	.word	0x20006a04
 80015ec:	2000032c 	.word	0x2000032c
 80015f0:	20006358 	.word	0x20006358
 80015f4:	20006124 	.word	0x20006124
 80015f8:	40590000 	.word	0x40590000
 80015fc:	08013bc4 	.word	0x08013bc4
 8001600:	42c80000 	.word	0x42c80000
			return;
		}
		/*Motor speed*/
		LineFollower->Speed_level = ((100 - battery_percentage + 100) / 100) - LineFollower->Speed_offset;
 8001604:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 8001600 <App_Controll+0x1b8>
 8001608:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800160c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001610:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8001600 <App_Controll+0x1b8>
 8001614:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001618:	ed5f 6a07 	vldr	s13, [pc, #-28]	@ 8001600 <App_Controll+0x1b8>
 800161c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		if(LineFollower->Speed_level < 1)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800163a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	d503      	bpl.n	800164c <App_Controll+0x204>
		{
			LineFollower->Speed_level = 1;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800164a:	631a      	str	r2, [r3, #48]	@ 0x30
		}

		/*Send battery data*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff9f 	bl	8000594 <__aeabi_i2d>
 8001656:	a3b2      	add	r3, pc, #712	@ (adr r3, 8001920 <App_Controll+0x4d8>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7ff f804 	bl	8000668 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	a3af      	add	r3, pc, #700	@ (adr r3, 8001928 <App_Controll+0x4e0>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7ff f925 	bl	80008bc <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff faed 	bl	8000c58 <__aeabi_d2f>
 800167e:	4602      	mov	r2, r0
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	629a      	str	r2, [r3, #40]	@ 0x28
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001688:	461c      	mov	r4, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff92 	bl	80005b8 <__aeabi_f2d>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	f107 000c 	add.w	r0, r7, #12
 800169c:	e9cd 2300 	strd	r2, r3, [sp]
 80016a0:	4622      	mov	r2, r4
 80016a2:	4991      	ldr	r1, [pc, #580]	@ (80018e8 <App_Controll+0x4a0>)
 80016a4:	f00e feda 	bl	801045c <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fe17 	bl	80002e0 <strlen>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	f107 010c 	add.w	r1, r7, #12
 80016ba:	2364      	movs	r3, #100	@ 0x64
 80016bc:	488b      	ldr	r0, [pc, #556]	@ (80018ec <App_Controll+0x4a4>)
 80016be:	f008 f909 	bl	80098d4 <HAL_UART_Transmit>


		sprintf((char*)buffer, "Percentage = %0.2f \r\n Speed_level = %0.2f \r\n", battery_percentage, LineFollower->Speed_level);
 80016c2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80016c6:	f7fe ff77 	bl	80005b8 <__aeabi_f2d>
 80016ca:	4604      	mov	r4, r0
 80016cc:	460d      	mov	r5, r1
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff70 	bl	80005b8 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	f107 000c 	add.w	r0, r7, #12
 80016e0:	e9cd 2300 	strd	r2, r3, [sp]
 80016e4:	4622      	mov	r2, r4
 80016e6:	462b      	mov	r3, r5
 80016e8:	4981      	ldr	r1, [pc, #516]	@ (80018f0 <App_Controll+0x4a8>)
 80016ea:	f00e feb7 	bl	801045c <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), 100);
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fdf4 	bl	80002e0 <strlen>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f107 010c 	add.w	r1, r7, #12
 8001700:	2364      	movs	r3, #100	@ 0x64
 8001702:	487a      	ldr	r0, [pc, #488]	@ (80018ec <App_Controll+0x4a4>)
 8001704:	f008 f8e6 	bl	80098d4 <HAL_UART_Transmit>

		/*Stop LineFollower and turn on the LED*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	2140      	movs	r1, #64	@ 0x40
 800170c:	4879      	ldr	r0, [pc, #484]	@ (80018f4 <App_Controll+0x4ac>)
 800170e:	f004 fe43 	bl	8006398 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001712:	2201      	movs	r2, #1
 8001714:	2120      	movs	r1, #32
 8001716:	4877      	ldr	r0, [pc, #476]	@ (80018f4 <App_Controll+0x4ac>)
 8001718:	f004 fe3e 	bl	8006398 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	2140      	movs	r1, #64	@ 0x40
 8001720:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001724:	f004 fe38 	bl	8006398 <HAL_GPIO_WritePin>

		/*Start mapping the track*/
		FatFsResult = f_open(&SdCardFile, "GRUZIK.txt", FA_WRITE|FA_OPEN_APPEND);
 8001728:	2232      	movs	r2, #50	@ 0x32
 800172a:	4973      	ldr	r1, [pc, #460]	@ (80018f8 <App_Controll+0x4b0>)
 800172c:	4873      	ldr	r0, [pc, #460]	@ (80018fc <App_Controll+0x4b4>)
 800172e:	f00c fca3 	bl	800e078 <f_open>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b72      	ldr	r3, [pc, #456]	@ (8001900 <App_Controll+0x4b8>)
 8001738:	701a      	strb	r2, [r3, #0]
		map.Mapping = 1;
 800173a:	4b72      	ldr	r3, [pc, #456]	@ (8001904 <App_Controll+0x4bc>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
	}
	/*LOW mode*/
	if(RxData == 'a')
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b61      	cmp	r3, #97	@ 0x61
 8001744:	d11f      	bne.n	8001786 <App_Controll+0x33e>
	{
		LineFollower->Base_speed_R = 85;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2255      	movs	r2, #85	@ 0x55
 800174a:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 85;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2255      	movs	r2, #85	@ 0x55
 8001750:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 100;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2264      	movs	r2, #100	@ 0x64
 8001756:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 100;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	2264      	movs	r2, #100	@ 0x64
 800175c:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001764:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2246      	movs	r2, #70	@ 0x46
 800176a:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001772:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 80;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2250      	movs	r2, #80	@ 0x50
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	4a62      	ldr	r2, [pc, #392]	@ (8001908 <App_Controll+0x4c0>)
 800177e:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.07;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4a62      	ldr	r2, [pc, #392]	@ (800190c <App_Controll+0x4c4>)
 8001784:	605a      	str	r2, [r3, #4]
	}
	/*LOW+ mode*/
	if(RxData == 'd')
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b64      	cmp	r3, #100	@ 0x64
 800178a:	d11f      	bne.n	80017cc <App_Controll+0x384>
	{
		LineFollower->Base_speed_R = 105;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2269      	movs	r2, #105	@ 0x69
 8001790:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 105;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2269      	movs	r2, #105	@ 0x69
 8001796:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 152;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2298      	movs	r2, #152	@ 0x98
 800179c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 152;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2298      	movs	r2, #152	@ 0x98
 80017a2:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -30;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f06f 021d 	mvn.w	r2, #29
 80017aa:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 100;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2264      	movs	r2, #100	@ 0x64
 80017b0:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -40;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 80017b8:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 80;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2250      	movs	r2, #80	@ 0x50
 80017be:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	4a51      	ldr	r2, [pc, #324]	@ (8001908 <App_Controll+0x4c0>)
 80017c4:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.08;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	4a51      	ldr	r2, [pc, #324]	@ (8001910 <App_Controll+0x4c8>)
 80017ca:	605a      	str	r2, [r3, #4]
	}
	/*Medium mode*/
	if(RxData == 'b')
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b62      	cmp	r3, #98	@ 0x62
 80017d0:	d11f      	bne.n	8001812 <App_Controll+0x3ca>
	{
		LineFollower->Base_speed_R = 105;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2269      	movs	r2, #105	@ 0x69
 80017d6:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 105;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2269      	movs	r2, #105	@ 0x69
 80017dc:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 185;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	22b9      	movs	r2, #185	@ 0xb9
 80017e2:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 185;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	22b9      	movs	r2, #185	@ 0xb9
 80017e8:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -30;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f06f 021d 	mvn.w	r2, #29
 80017f0:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 90;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	225a      	movs	r2, #90	@ 0x5a
 80017f6:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -40;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 80017fe:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 80;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2250      	movs	r2, #80	@ 0x50
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	4a3f      	ldr	r2, [pc, #252]	@ (8001908 <App_Controll+0x4c0>)
 800180a:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.09;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4a41      	ldr	r2, [pc, #260]	@ (8001914 <App_Controll+0x4cc>)
 8001810:	605a      	str	r2, [r3, #4]
	}
	/*Medium+ mode*/
	if(RxData == 'e')
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	2b65      	cmp	r3, #101	@ 0x65
 8001816:	d11f      	bne.n	8001858 <App_Controll+0x410>
	{
		LineFollower->Base_speed_R = 120;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2278      	movs	r2, #120	@ 0x78
 800181c:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 120;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2278      	movs	r2, #120	@ 0x78
 8001822:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 120;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2278      	movs	r2, #120	@ 0x78
 8001828:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 120;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2278      	movs	r2, #120	@ 0x78
 800182e:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001836:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	225c      	movs	r2, #92	@ 0x5c
 800183c:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001844:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;//110
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	221e      	movs	r2, #30
 800184a:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4a2e      	ldr	r2, [pc, #184]	@ (8001908 <App_Controll+0x4c0>)
 8001850:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.2;//0.25
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	4a30      	ldr	r2, [pc, #192]	@ (8001918 <App_Controll+0x4d0>)
 8001856:	605a      	str	r2, [r3, #4]
	}
	/*HIGH mode*/
	if(RxData == 'c')
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b63      	cmp	r3, #99	@ 0x63
 800185c:	d11f      	bne.n	800189e <App_Controll+0x456>
	{
		LineFollower->Base_speed_R = 125;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	227d      	movs	r2, #125	@ 0x7d
 8001862:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 125;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	227d      	movs	r2, #125	@ 0x7d
 8001868:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 130;//125
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2282      	movs	r2, #130	@ 0x82
 800186e:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 130;//125
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2282      	movs	r2, #130	@ 0x82
 8001874:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 800187c:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92; //88
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	225c      	movs	r2, #92	@ 0x5c
 8001882:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 800188a:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	221e      	movs	r2, #30
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	4a1c      	ldr	r2, [pc, #112]	@ (8001908 <App_Controll+0x4c0>)
 8001896:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.175;//0.2
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4a20      	ldr	r2, [pc, #128]	@ (800191c <App_Controll+0x4d4>)
 800189c:	605a      	str	r2, [r3, #4]
	}
	/*HIGH+ mode*/ /*For now it's just HIGH*/
	if(RxData == 'f')
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	2b66      	cmp	r3, #102	@ 0x66
 80018a2:	d145      	bne.n	8001930 <App_Controll+0x4e8>
	{
		LineFollower->Base_speed_R = 130;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2282      	movs	r2, #130	@ 0x82
 80018a8:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 130;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2282      	movs	r2, #130	@ 0x82
 80018ae:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 130;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2282      	movs	r2, #130	@ 0x82
 80018b4:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 130;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2282      	movs	r2, #130	@ 0x82
 80018ba:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 80018c2:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92; //88
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	225c      	movs	r2, #92	@ 0x5c
 80018c8:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 80018d0:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	221e      	movs	r2, #30
 80018d6:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	4a0b      	ldr	r2, [pc, #44]	@ (8001908 <App_Controll+0x4c0>)
 80018dc:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.175;//0.2
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	4a0e      	ldr	r2, [pc, #56]	@ (800191c <App_Controll+0x4d4>)
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	e024      	b.n	8001930 <App_Controll+0x4e8>
 80018e6:	bf00      	nop
 80018e8:	08013b94 	.word	0x08013b94
 80018ec:	20006a04 	.word	0x20006a04
 80018f0:	08013bd8 	.word	0x08013bd8
 80018f4:	48000800 	.word	0x48000800
 80018f8:	08013c08 	.word	0x08013c08
 80018fc:	20006358 	.word	0x20006358
 8001900:	20006124 	.word	0x20006124
 8001904:	2000032c 	.word	0x2000032c
 8001908:	3c75c28f 	.word	0x3c75c28f
 800190c:	3d8f5c29 	.word	0x3d8f5c29
 8001910:	3da3d70a 	.word	0x3da3d70a
 8001914:	3db851ec 	.word	0x3db851ec
 8001918:	3e4ccccd 	.word	0x3e4ccccd
 800191c:	3e333333 	.word	0x3e333333
 8001920:	9999999a 	.word	0x9999999a
 8001924:	40209999 	.word	0x40209999
 8001928:	00000000 	.word	0x00000000
 800192c:	40adee00 	.word	0x40adee00
	}
	/*TRUBO mode*/
	if(RxData == 'i')
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2b69      	cmp	r3, #105	@ 0x69
 8001934:	d11f      	bne.n	8001976 <App_Controll+0x52e>
	{
		LineFollower->Base_speed_R = 135;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2287      	movs	r2, #135	@ 0x87
 800193a:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 135;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2287      	movs	r2, #135	@ 0x87
 8001940:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 135;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2287      	movs	r2, #135	@ 0x87
 8001946:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 135;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2287      	movs	r2, #135	@ 0x87
 800194c:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60; //-65
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 8001954:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2246      	movs	r2, #70	@ 0x46
 800195a:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 8001962:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	226e      	movs	r2, #110	@ 0x6e
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4a8e      	ldr	r2, [pc, #568]	@ (8001ba8 <App_Controll+0x760>)
 800196e:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.2;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4a8e      	ldr	r2, [pc, #568]	@ (8001bac <App_Controll+0x764>)
 8001974:	605a      	str	r2, [r3, #4]
	}
	/*TRUBO+ mode*/
	if(RxData == 'j')
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b6a      	cmp	r3, #106	@ 0x6a
 800197a:	d11f      	bne.n	80019bc <App_Controll+0x574>
	{
	   LineFollower->Base_speed_R = 140;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	228c      	movs	r2, #140	@ 0x8c
 8001980:	609a      	str	r2, [r3, #8]
	   LineFollower->Base_speed_L = 140;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	228c      	movs	r2, #140	@ 0x8c
 8001986:	60da      	str	r2, [r3, #12]
	   LineFollower->Max_speed_L = 140;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	228c      	movs	r2, #140	@ 0x8c
 800198c:	615a      	str	r2, [r3, #20]
	   LineFollower->Max_speed_R = 140;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	228c      	movs	r2, #140	@ 0x8c
 8001992:	611a      	str	r2, [r3, #16]
	   LineFollower->Sharp_bend_speed_right = -60;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 800199a:	619a      	str	r2, [r3, #24]
	   LineFollower->Sharp_bend_speed_left = 70;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2246      	movs	r2, #70	@ 0x46
 80019a0:	61da      	str	r2, [r3, #28]
	   LineFollower->Bend_speed_right = -60;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 80019a8:	621a      	str	r2, [r3, #32]
	   LineFollower->Bend_speed_left = 110;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	226e      	movs	r2, #110	@ 0x6e
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24
	   LineFollower->Kp = 0.015;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ba8 <App_Controll+0x760>)
 80019b4:	601a      	str	r2, [r3, #0]
	   LineFollower->Kd = 0.2;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	4a7c      	ldr	r2, [pc, #496]	@ (8001bac <App_Controll+0x764>)
 80019ba:	605a      	str	r2, [r3, #4]
	}
	/*ULTRA mode*/
	if(RxData == 'k')
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b6b      	cmp	r3, #107	@ 0x6b
 80019c0:	d11f      	bne.n	8001a02 <App_Controll+0x5ba>
	{
		LineFollower->Base_speed_R = 145;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2291      	movs	r2, #145	@ 0x91
 80019c6:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 145;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2291      	movs	r2, #145	@ 0x91
 80019cc:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 145;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2291      	movs	r2, #145	@ 0x91
 80019d2:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 145;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2291      	movs	r2, #145	@ 0x91
 80019d8:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60;//-70
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 80019e0:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;//88
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2246      	movs	r2, #70	@ 0x46
 80019e6:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 80019ee:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	226e      	movs	r2, #110	@ 0x6e
 80019f4:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	4a6b      	ldr	r2, [pc, #428]	@ (8001ba8 <App_Controll+0x760>)
 80019fa:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.22;     //Jeśli sie gubi wylaturje itd mozna zwiększyć jesli sobie radzi to mozna obniżyc i zwiększyc płynność
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4a6c      	ldr	r2, [pc, #432]	@ (8001bb0 <App_Controll+0x768>)
 8001a00:	605a      	str	r2, [r3, #4]
	 }
	 /*ULTRA+ mode*/
	 if(RxData == 'l')
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b6c      	cmp	r3, #108	@ 0x6c
 8001a06:	d11f      	bne.n	8001a48 <App_Controll+0x600>
	 {
		LineFollower->Base_speed_R = 150;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2296      	movs	r2, #150	@ 0x96
 8001a0c:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 150;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2296      	movs	r2, #150	@ 0x96
 8001a12:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 150;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	2296      	movs	r2, #150	@ 0x96
 8001a18:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 150;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2296      	movs	r2, #150	@ 0x96
 8001a1e:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -55;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f06f 0236 	mvn.w	r2, #54	@ 0x36
 8001a26:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 75;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	224b      	movs	r2, #75	@ 0x4b
 8001a2c:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 8001a34:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 120;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2278      	movs	r2, #120	@ 0x78
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24
		LineFollower->Kp = 0.015;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ba8 <App_Controll+0x760>)
 8001a40:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.23;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	4a5b      	ldr	r2, [pc, #364]	@ (8001bb4 <App_Controll+0x76c>)
 8001a46:	605a      	str	r2, [r3, #4]
	  }
	  /*EXTREME mode*/
	  if(RxData == 'm')
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b6d      	cmp	r3, #109	@ 0x6d
 8001a4c:	d11f      	bne.n	8001a8e <App_Controll+0x646>
	  {
		 LineFollower->Base_speed_R = 155;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	229b      	movs	r2, #155	@ 0x9b
 8001a52:	609a      	str	r2, [r3, #8]
		 LineFollower->Base_speed_L = 155;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	229b      	movs	r2, #155	@ 0x9b
 8001a58:	60da      	str	r2, [r3, #12]
		 LineFollower->Max_speed_L = 155;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	229b      	movs	r2, #155	@ 0x9b
 8001a5e:	615a      	str	r2, [r3, #20]
		 LineFollower->Max_speed_R = 155;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	229b      	movs	r2, #155	@ 0x9b
 8001a64:	611a      	str	r2, [r3, #16]
		 LineFollower->Sharp_bend_speed_right = -70;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001a6c:	619a      	str	r2, [r3, #24]
		 LineFollower->Sharp_bend_speed_left = 85;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2255      	movs	r2, #85	@ 0x55
 8001a72:	61da      	str	r2, [r3, #28]
		 LineFollower->Bend_speed_right = -50;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001a7a:	621a      	str	r2, [r3, #32]
		 LineFollower->Bend_speed_left = 30;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	221e      	movs	r2, #30
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24
		 LineFollower->Kp = 0.015;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	4a48      	ldr	r2, [pc, #288]	@ (8001ba8 <App_Controll+0x760>)
 8001a86:	601a      	str	r2, [r3, #0]
		 LineFollower->Kd = 0.265;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb8 <App_Controll+0x770>)
 8001a8c:	605a      	str	r2, [r3, #4]
	  }

 	  /*EXTREME+ mode*/
 	  if(RxData == 'n')
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b6e      	cmp	r3, #110	@ 0x6e
 8001a92:	d11f      	bne.n	8001ad4 <App_Controll+0x68c>
 	  {
 	    LineFollower->Base_speed_R = 160;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	22a0      	movs	r2, #160	@ 0xa0
 8001a98:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 160;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	22a0      	movs	r2, #160	@ 0xa0
 8001a9e:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 160;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	22a0      	movs	r2, #160	@ 0xa0
 8001aa4:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 160;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	22a0      	movs	r2, #160	@ 0xa0
 8001aaa:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -70;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001ab2:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 85;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	2255      	movs	r2, #85	@ 0x55
 8001ab8:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001ac0:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 30;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	221e      	movs	r2, #30
 8001ac6:	625a      	str	r2, [r3, #36]	@ 0x24
 		LineFollower->Kp = 0.015;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4a37      	ldr	r2, [pc, #220]	@ (8001ba8 <App_Controll+0x760>)
 8001acc:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 0.265;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	4a39      	ldr	r2, [pc, #228]	@ (8001bb8 <App_Controll+0x770>)
 8001ad2:	605a      	str	r2, [r3, #4]
 	  }
 	  /*SPECIAL mode*/
 	  if(RxData == 'h')
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2b68      	cmp	r3, #104	@ 0x68
 8001ad8:	d11f      	bne.n	8001b1a <App_Controll+0x6d2>
// 		LineFollower->Sharp_bend_speed_left = 92;
// 		LineFollower->Bend_speed_right = -50;
// 		LineFollower->Bend_speed_left = 30;
// 		LineFollower->Kp = 0.015;
// 		LineFollower->Kd = 0.2;
 			LineFollower->Base_speed_R = 55;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2237      	movs	r2, #55	@ 0x37
 8001ade:	609a      	str	r2, [r3, #8]
 			LineFollower->Base_speed_L = 55;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2237      	movs	r2, #55	@ 0x37
 8001ae4:	60da      	str	r2, [r3, #12]
 			LineFollower->Max_speed_L = 80;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2250      	movs	r2, #80	@ 0x50
 8001aea:	615a      	str	r2, [r3, #20]
 			LineFollower->Max_speed_R = 80;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2250      	movs	r2, #80	@ 0x50
 8001af0:	611a      	str	r2, [r3, #16]
 			LineFollower->Sharp_bend_speed_right = -70;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8001af8:	619a      	str	r2, [r3, #24]
 			LineFollower->Sharp_bend_speed_left = 70;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2246      	movs	r2, #70	@ 0x46
 8001afe:	61da      	str	r2, [r3, #28]
 			LineFollower->Bend_speed_right = -50;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001b06:	621a      	str	r2, [r3, #32]
 			LineFollower->Bend_speed_left = 80;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2250      	movs	r2, #80	@ 0x50
 8001b0c:	625a      	str	r2, [r3, #36]	@ 0x24
 			LineFollower->Kp = 0.015;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4a25      	ldr	r2, [pc, #148]	@ (8001ba8 <App_Controll+0x760>)
 8001b12:	601a      	str	r2, [r3, #0]
 			LineFollower->Kd = 0.07;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4a29      	ldr	r2, [pc, #164]	@ (8001bbc <App_Controll+0x774>)
 8001b18:	605a      	str	r2, [r3, #4]

 	  }
 	  /*RA-1-final-slower*/
 	  if(RxData == 'o')
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	2b6f      	cmp	r3, #111	@ 0x6f
 8001b1e:	d11f      	bne.n	8001b60 <App_Controll+0x718>
 	  {
 	    LineFollower->Base_speed_R = 143;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	228f      	movs	r2, #143	@ 0x8f
 8001b24:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 143;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	228f      	movs	r2, #143	@ 0x8f
 8001b2a:	60da      	str	r2, [r3, #12]
 	   	LineFollower->Max_speed_L = 182;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	22b6      	movs	r2, #182	@ 0xb6
 8001b30:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 182;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	22b6      	movs	r2, #182	@ 0xb6
 8001b36:	611a      	str	r2, [r3, #16]
 	  	LineFollower->Sharp_bend_speed_right = -76;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001b3e:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 90;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	225a      	movs	r2, #90	@ 0x5a
 8001b44:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001b4c:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2264      	movs	r2, #100	@ 0x64
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24
 		LineFollower->Kp = 0.02;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc0 <App_Controll+0x778>)
 8001b58:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	@ (8001bc4 <App_Controll+0x77c>)
 8001b5e:	605a      	str	r2, [r3, #4]
 	   }
 	   /*RA-2-eliminations-faster*/
 	   if(RxData == 'u')
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b75      	cmp	r3, #117	@ 0x75
 8001b64:	d130      	bne.n	8001bc8 <App_Controll+0x780>
 	   {
 	     LineFollower->Base_speed_R = 153;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2299      	movs	r2, #153	@ 0x99
 8001b6a:	609a      	str	r2, [r3, #8]
 	     LineFollower->Base_speed_L = 153;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2299      	movs	r2, #153	@ 0x99
 8001b70:	60da      	str	r2, [r3, #12]
 	     LineFollower->Max_speed_L = 187;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	22bb      	movs	r2, #187	@ 0xbb
 8001b76:	615a      	str	r2, [r3, #20]
 	   	 LineFollower->Max_speed_R = 187;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	22bb      	movs	r2, #187	@ 0xbb
 8001b7c:	611a      	str	r2, [r3, #16]
 	  	 LineFollower->Sharp_bend_speed_right = -76;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001b84:	619a      	str	r2, [r3, #24]
 	 	 LineFollower->Sharp_bend_speed_left = 90;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	225a      	movs	r2, #90	@ 0x5a
 8001b8a:	61da      	str	r2, [r3, #28]
 	 	 LineFollower->Bend_speed_right = -50;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001b92:	621a      	str	r2, [r3, #32]
 	 	 LineFollower->Bend_speed_left = 100;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2264      	movs	r2, #100	@ 0x64
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24
 	 	 LineFollower->Kp = 0.02;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <App_Controll+0x778>)
 8001b9e:	601a      	str	r2, [r3, #0]
 	 	 LineFollower->Kd = 350;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <App_Controll+0x77c>)
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	e00f      	b.n	8001bc8 <App_Controll+0x780>
 8001ba8:	3c75c28f 	.word	0x3c75c28f
 8001bac:	3e4ccccd 	.word	0x3e4ccccd
 8001bb0:	3e6147ae 	.word	0x3e6147ae
 8001bb4:	3e6b851f 	.word	0x3e6b851f
 8001bb8:	3e87ae14 	.word	0x3e87ae14
 8001bbc:	3d8f5c29 	.word	0x3d8f5c29
 8001bc0:	3ca3d70a 	.word	0x3ca3d70a
 8001bc4:	43af0000 	.word	0x43af0000
 	   }
 	  /*Gruzik2.1 Robo Comp 2024r 1*/
 	  if(RxData == 'p')
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	2b70      	cmp	r3, #112	@ 0x70
 8001bcc:	d11f      	bne.n	8001c0e <App_Controll+0x7c6>
 	  {
 		 LineFollower->Base_speed_R = 143;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	228f      	movs	r2, #143	@ 0x8f
 8001bd2:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 143;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	228f      	movs	r2, #143	@ 0x8f
 8001bd8:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 182;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	22b6      	movs	r2, #182	@ 0xb6
 8001bde:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 182;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	22b6      	movs	r2, #182	@ 0xb6
 8001be4:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001bec:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	225a      	movs	r2, #90	@ 0x5a
 8001bf2:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 8001bfa:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	226e      	movs	r2, #110	@ 0x6e
 8001c00:	625a      	str	r2, [r3, #36]	@ 0x24
 		 LineFollower->Kp = 0.02;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	4a15      	ldr	r2, [pc, #84]	@ (8001c5c <App_Controll+0x814>)
 8001c06:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4a15      	ldr	r2, [pc, #84]	@ (8001c60 <App_Controll+0x818>)
 8001c0c:	605a      	str	r2, [r3, #4]
 	  }
 	  /*Gruzik2.1 Robo Comp 2024 2*/
 	  if(RxData == 'r')
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b72      	cmp	r3, #114	@ 0x72
 8001c12:	d11f      	bne.n	8001c54 <App_Controll+0x80c>
 	  {
 		 LineFollower->Base_speed_R = 153;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2299      	movs	r2, #153	@ 0x99
 8001c18:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 153;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2299      	movs	r2, #153	@ 0x99
 8001c1e:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 187;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	22bb      	movs	r2, #187	@ 0xbb
 8001c24:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 187;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	22bb      	movs	r2, #187	@ 0xbb
 8001c2a:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001c32:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	225a      	movs	r2, #90	@ 0x5a
 8001c38:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 8001c40:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	226e      	movs	r2, #110	@ 0x6e
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24
 		 LineFollower->Kp = 0.02;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4a04      	ldr	r2, [pc, #16]	@ (8001c5c <App_Controll+0x814>)
 8001c4c:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	4a03      	ldr	r2, [pc, #12]	@ (8001c60 <App_Controll+0x818>)
 8001c52:	605a      	str	r2, [r3, #4]
 	   }
}
 8001c54:	3790      	adds	r7, #144	@ 0x90
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	3ca3d70a 	.word	0x3ca3d70a
 8001c60:	43af0000 	.word	0x43af0000

08001c64 <Mode_change>:

static void Mode_change(LineFollower_t *LF)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001c6c:	490c      	ldr	r1, [pc, #48]	@ (8001ca0 <Mode_change+0x3c>)
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f00e fc72 	bl	8010558 <strtok>
 8001c74:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 2)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <Mode_change+0x32>
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7fe fb2e 	bl	80002e0 <strlen>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d805      	bhi.n	8001c96 <Mode_change+0x32>
	{
		App_Controll(ParsePointer[0], LF);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fbd9 	bl	8001448 <App_Controll>
	}
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	08013b90 	.word	0x08013b90

08001ca4 <Parser_Parse>:
void Parser_Parse(uint8_t *ReceivedData, LineFollower_t *LineFollower)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
	char *ParsePointer = strtok((char*)ReceivedData, "=");
 8001cae:	4935      	ldr	r1, [pc, #212]	@ (8001d84 <Parser_Parse+0xe0>)
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f00e fc51 	bl	8010558 <strtok>
 8001cb6:	60f8      	str	r0, [r7, #12]

	if(!strcmp("Kp",ParsePointer))
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	4833      	ldr	r0, [pc, #204]	@ (8001d88 <Parser_Parse+0xe4>)
 8001cbc:	f7fe fab0 	bl	8000220 <strcmp>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <Parser_Parse+0x2a>
	{
		kp_change(LineFollower);
 8001cc6:	6838      	ldr	r0, [r7, #0]
 8001cc8:	f7ff fa76 	bl	80011b8 <kp_change>
	}
	else if(!strcmp("Mode",ParsePointer))
	{
		Mode_change(LineFollower);
	}
}
 8001ccc:	e056      	b.n	8001d7c <Parser_Parse+0xd8>
	else if(!strcmp("Kd",ParsePointer))
 8001cce:	68f9      	ldr	r1, [r7, #12]
 8001cd0:	482e      	ldr	r0, [pc, #184]	@ (8001d8c <Parser_Parse+0xe8>)
 8001cd2:	f7fe faa5 	bl	8000220 <strcmp>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d103      	bne.n	8001ce4 <Parser_Parse+0x40>
		kd_change(LineFollower);
 8001cdc:	6838      	ldr	r0, [r7, #0]
 8001cde:	f7ff fa91 	bl	8001204 <kd_change>
}
 8001ce2:	e04b      	b.n	8001d7c <Parser_Parse+0xd8>
	else if(!strcmp("Base_speed",ParsePointer))
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	482a      	ldr	r0, [pc, #168]	@ (8001d90 <Parser_Parse+0xec>)
 8001ce8:	f7fe fa9a 	bl	8000220 <strcmp>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <Parser_Parse+0x56>
		Base_speed_change(LineFollower);
 8001cf2:	6838      	ldr	r0, [r7, #0]
 8001cf4:	f7ff faac 	bl	8001250 <Base_speed_change>
}
 8001cf8:	e040      	b.n	8001d7c <Parser_Parse+0xd8>
	else if(!strcmp("Max_speed",ParsePointer))
 8001cfa:	68f9      	ldr	r1, [r7, #12]
 8001cfc:	4825      	ldr	r0, [pc, #148]	@ (8001d94 <Parser_Parse+0xf0>)
 8001cfe:	f7fe fa8f 	bl	8000220 <strcmp>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d103      	bne.n	8001d10 <Parser_Parse+0x6c>
		Max_speed_change(LineFollower);
 8001d08:	6838      	ldr	r0, [r7, #0]
 8001d0a:	f7ff fad3 	bl	80012b4 <Max_speed_change>
}
 8001d0e:	e035      	b.n	8001d7c <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_right",ParsePointer))
 8001d10:	68f9      	ldr	r1, [r7, #12]
 8001d12:	4821      	ldr	r0, [pc, #132]	@ (8001d98 <Parser_Parse+0xf4>)
 8001d14:	f7fe fa84 	bl	8000220 <strcmp>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <Parser_Parse+0x82>
		Sharp_bend_speed_right_change(LineFollower);
 8001d1e:	6838      	ldr	r0, [r7, #0]
 8001d20:	f7ff fafa 	bl	8001318 <Sharp_bend_speed_right_change>
}
 8001d24:	e02a      	b.n	8001d7c <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_left",ParsePointer))
 8001d26:	68f9      	ldr	r1, [r7, #12]
 8001d28:	481c      	ldr	r0, [pc, #112]	@ (8001d9c <Parser_Parse+0xf8>)
 8001d2a:	f7fe fa79 	bl	8000220 <strcmp>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <Parser_Parse+0x98>
		Sharp_bend_speed_left_change(LineFollower);
 8001d34:	6838      	ldr	r0, [r7, #0]
 8001d36:	f7ff fb15 	bl	8001364 <Sharp_bend_speed_left_change>
}
 8001d3a:	e01f      	b.n	8001d7c <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_right",ParsePointer))
 8001d3c:	68f9      	ldr	r1, [r7, #12]
 8001d3e:	4818      	ldr	r0, [pc, #96]	@ (8001da0 <Parser_Parse+0xfc>)
 8001d40:	f7fe fa6e 	bl	8000220 <strcmp>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <Parser_Parse+0xae>
		Bend_speed_right_change(LineFollower);
 8001d4a:	6838      	ldr	r0, [r7, #0]
 8001d4c:	f7ff fb30 	bl	80013b0 <Bend_speed_right_change>
}
 8001d50:	e014      	b.n	8001d7c <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_left",ParsePointer))
 8001d52:	68f9      	ldr	r1, [r7, #12]
 8001d54:	4813      	ldr	r0, [pc, #76]	@ (8001da4 <Parser_Parse+0x100>)
 8001d56:	f7fe fa63 	bl	8000220 <strcmp>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <Parser_Parse+0xc4>
		Bend_speed_left_change(LineFollower);
 8001d60:	6838      	ldr	r0, [r7, #0]
 8001d62:	f7ff fb4b 	bl	80013fc <Bend_speed_left_change>
}
 8001d66:	e009      	b.n	8001d7c <Parser_Parse+0xd8>
	else if(!strcmp("Mode",ParsePointer))
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	480f      	ldr	r0, [pc, #60]	@ (8001da8 <Parser_Parse+0x104>)
 8001d6c:	f7fe fa58 	bl	8000220 <strcmp>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <Parser_Parse+0xd8>
		Mode_change(LineFollower);
 8001d76:	6838      	ldr	r0, [r7, #0]
 8001d78:	f7ff ff74 	bl	8001c64 <Mode_change>
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	08013c14 	.word	0x08013c14
 8001d88:	08013c18 	.word	0x08013c18
 8001d8c:	08013c1c 	.word	0x08013c1c
 8001d90:	08013c20 	.word	0x08013c20
 8001d94:	08013c2c 	.word	0x08013c2c
 8001d98:	08013c38 	.word	0x08013c38
 8001d9c:	08013c50 	.word	0x08013c50
 8001da0:	08013c68 	.word	0x08013c68
 8001da4:	08013c7c 	.word	0x08013c7c
 8001da8:	08013c8c 	.word	0x08013c8c

08001dac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08c      	sub	sp, #48	@ 0x30
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f00e fbac 	bl	8010522 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001dca:	4b32      	ldr	r3, [pc, #200]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001dcc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001dd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001dd2:	4b30      	ldr	r3, [pc, #192]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001dd4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001dd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dda:	4b2e      	ldr	r3, [pc, #184]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001de0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001de6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dec:	4b29      	ldr	r3, [pc, #164]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001df2:	4b28      	ldr	r3, [pc, #160]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001df4:	2204      	movs	r2, #4
 8001df6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001df8:	4b26      	ldr	r3, [pc, #152]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001dfe:	4b25      	ldr	r3, [pc, #148]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001e04:	4b23      	ldr	r3, [pc, #140]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e0a:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e12:	4b20      	ldr	r3, [pc, #128]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e18:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e26:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e34:	4817      	ldr	r0, [pc, #92]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001e36:	f002 fb8d 	bl	8004554 <HAL_ADC_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001e40:	f001 f902 	bl	8003048 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4811      	ldr	r0, [pc, #68]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001e50:	f003 fbbe 	bl	80055d0 <HAL_ADCEx_MultiModeConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001e5a:	f001 f8f5 	bl	8003048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <MX_ADC1_Init+0xec>)
 8001e60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e62:	2306      	movs	r3, #6
 8001e64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001e66:	2307      	movs	r3, #7
 8001e68:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e6a:	237f      	movs	r3, #127	@ 0x7f
 8001e6c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4806      	ldr	r0, [pc, #24]	@ (8001e94 <MX_ADC1_Init+0xe8>)
 8001e7c:	f002 fe18 	bl	8004ab0 <HAL_ADC_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001e86:	f001 f8df 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	3730      	adds	r7, #48	@ 0x30
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000020c 	.word	0x2000020c
 8001e98:	08600004 	.word	0x08600004

08001e9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b09e      	sub	sp, #120	@ 0x78
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	2254      	movs	r2, #84	@ 0x54
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f00e fb30 	bl	8010522 <memset>
  if(adcHandle->Instance==ADC1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eca:	d15f      	bne.n	8001f8c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ecc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ed0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001ed2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ed6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	4618      	mov	r0, r3
 8001ede:	f005 f997 	bl	8007210 <HAL_RCCEx_PeriphCLKConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001ee8:	f001 f8ae 	bl	8003048 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001eec:	4b29      	ldr	r3, [pc, #164]	@ (8001f94 <HAL_ADC_MspInit+0xf8>)
 8001eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef0:	4a28      	ldr	r2, [pc, #160]	@ (8001f94 <HAL_ADC_MspInit+0xf8>)
 8001ef2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ef6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef8:	4b26      	ldr	r3, [pc, #152]	@ (8001f94 <HAL_ADC_MspInit+0xf8>)
 8001efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f04:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_ADC_MspInit+0xf8>)
 8001f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f08:	4a22      	ldr	r2, [pc, #136]	@ (8001f94 <HAL_ADC_MspInit+0xf8>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f10:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <HAL_ADC_MspInit+0xf8>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f20:	2303      	movs	r3, #3
 8001f22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f32:	f004 f897 	bl	8006064 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f36:	4b18      	ldr	r3, [pc, #96]	@ (8001f98 <HAL_ADC_MspInit+0xfc>)
 8001f38:	4a18      	ldr	r2, [pc, #96]	@ (8001f9c <HAL_ADC_MspInit+0x100>)
 8001f3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <HAL_ADC_MspInit+0xfc>)
 8001f3e:	2205      	movs	r2, #5
 8001f40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <HAL_ADC_MspInit+0xfc>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <HAL_ADC_MspInit+0xfc>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f4e:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <HAL_ADC_MspInit+0xfc>)
 8001f50:	2280      	movs	r2, #128	@ 0x80
 8001f52:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f54:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <HAL_ADC_MspInit+0xfc>)
 8001f56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f5a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <HAL_ADC_MspInit+0xfc>)
 8001f5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f62:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <HAL_ADC_MspInit+0xfc>)
 8001f66:	2220      	movs	r2, #32
 8001f68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f98 <HAL_ADC_MspInit+0xfc>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f70:	4809      	ldr	r0, [pc, #36]	@ (8001f98 <HAL_ADC_MspInit+0xfc>)
 8001f72:	f003 fd45 	bl	8005a00 <HAL_DMA_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001f7c:	f001 f864 	bl	8003048 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <HAL_ADC_MspInit+0xfc>)
 8001f84:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f86:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <HAL_ADC_MspInit+0xfc>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3778      	adds	r7, #120	@ 0x78
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	20000278 	.word	0x20000278
 8001f9c:	40020008 	.word	0x40020008

08001fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fa6:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <MX_DMA_Init+0x60>)
 8001fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001faa:	4a15      	ldr	r2, [pc, #84]	@ (8002000 <MX_DMA_Init+0x60>)
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001fb2:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <MX_DMA_Init+0x60>)
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <MX_DMA_Init+0x60>)
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	@ (8002000 <MX_DMA_Init+0x60>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001fca:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <MX_DMA_Init+0x60>)
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	200b      	movs	r0, #11
 8001fdc:	f003 fcdb 	bl	8005996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fe0:	200b      	movs	r0, #11
 8001fe2:	f003 fcf2 	bl	80059ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	200c      	movs	r0, #12
 8001fec:	f003 fcd3 	bl	8005996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ff0:	200c      	movs	r0, #12
 8001ff2:	f003 fcea 	bl	80059ca <HAL_NVIC_EnableIRQ>

}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000

08002004 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	@ 0x28
 8002008:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201a:	4b5a      	ldr	r3, [pc, #360]	@ (8002184 <MX_GPIO_Init+0x180>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	4a59      	ldr	r2, [pc, #356]	@ (8002184 <MX_GPIO_Init+0x180>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002026:	4b57      	ldr	r3, [pc, #348]	@ (8002184 <MX_GPIO_Init+0x180>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002032:	4b54      	ldr	r3, [pc, #336]	@ (8002184 <MX_GPIO_Init+0x180>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	4a53      	ldr	r2, [pc, #332]	@ (8002184 <MX_GPIO_Init+0x180>)
 8002038:	f043 0320 	orr.w	r3, r3, #32
 800203c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800203e:	4b51      	ldr	r3, [pc, #324]	@ (8002184 <MX_GPIO_Init+0x180>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	4b4e      	ldr	r3, [pc, #312]	@ (8002184 <MX_GPIO_Init+0x180>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204e:	4a4d      	ldr	r2, [pc, #308]	@ (8002184 <MX_GPIO_Init+0x180>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002056:	4b4b      	ldr	r3, [pc, #300]	@ (8002184 <MX_GPIO_Init+0x180>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	4b48      	ldr	r3, [pc, #288]	@ (8002184 <MX_GPIO_Init+0x180>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002066:	4a47      	ldr	r2, [pc, #284]	@ (8002184 <MX_GPIO_Init+0x180>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206e:	4b45      	ldr	r3, [pc, #276]	@ (8002184 <MX_GPIO_Init+0x180>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800207a:	4b42      	ldr	r3, [pc, #264]	@ (8002184 <MX_GPIO_Init+0x180>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207e:	4a41      	ldr	r2, [pc, #260]	@ (8002184 <MX_GPIO_Init+0x180>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002086:	4b3f      	ldr	r3, [pc, #252]	@ (8002184 <MX_GPIO_Init+0x180>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDON_Pin|Motor_R_A_Pin|Motor_R_B_Pin|LED_2_Pin
 8002092:	2200      	movs	r2, #0
 8002094:	f242 017c 	movw	r1, #8316	@ 0x207c
 8002098:	483b      	ldr	r0, [pc, #236]	@ (8002188 <MX_GPIO_Init+0x184>)
 800209a:	f004 f97d 	bl	8006398 <HAL_GPIO_WritePin>
                          |LED_1_Pin|Motor_STBY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_4_Pin|LED_3_Pin|Motor_L_A_Pin|Motor_L_B_Pin, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80020a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a8:	f004 f976 	bl	8006398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020b2:	4836      	ldr	r0, [pc, #216]	@ (800218c <MX_GPIO_Init+0x188>)
 80020b4:	f004 f970 	bl	8006398 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDON_Pin Motor_R_A_Pin Motor_R_B_Pin LED_2_Pin
                           LED_1_Pin Motor_STBY_Pin */
  GPIO_InitStruct.Pin = LEDON_Pin|Motor_R_A_Pin|Motor_R_B_Pin|LED_2_Pin
 80020b8:	f242 037c 	movw	r3, #8316	@ 0x207c
 80020bc:	617b      	str	r3, [r7, #20]
                          |LED_1_Pin|Motor_STBY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	482d      	ldr	r0, [pc, #180]	@ (8002188 <MX_GPIO_Init+0x184>)
 80020d2:	f003 ffc7 	bl	8006064 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR11_Pin SENSOR12_Pin SENSOR10_Pin */
  GPIO_InitStruct.Pin = SENSOR11_Pin|SENSOR12_Pin|SENSOR10_Pin;
 80020d6:	f248 0330 	movw	r3, #32816	@ 0x8030
 80020da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ee:	f003 ffb9 	bl	8006064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin Motor_L_A_Pin Motor_L_B_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|Motor_L_A_Pin|Motor_L_B_Pin;
 80020f2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80020f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4619      	mov	r1, r3
 800210a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800210e:	f003 ffa9 	bl	8006064 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002112:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002118:	2301      	movs	r3, #1
 800211a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	4818      	ldr	r0, [pc, #96]	@ (800218c <MX_GPIO_Init+0x188>)
 800212c:	f003 ff9a 	bl	8006064 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR9_Pin SENSOR8_Pin SENSOR7_Pin */
  GPIO_InitStruct.Pin = SENSOR9_Pin|SENSOR8_Pin|SENSOR7_Pin;
 8002130:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	4810      	ldr	r0, [pc, #64]	@ (8002188 <MX_GPIO_Init+0x184>)
 8002146:	f003 ff8d 	bl	8006064 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR6_Pin */
  GPIO_InitStruct.Pin = SENSOR6_Pin;
 800214a:	2304      	movs	r3, #4
 800214c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR6_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <MX_GPIO_Init+0x18c>)
 800215e:	f003 ff81 	bl	8006064 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR5_Pin SENSOR4_Pin SENSOR3_Pin SENSOR2_Pin
                           SENSOR1_Pin */
  GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin
 8002162:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 8002166:	617b      	str	r3, [r7, #20]
                          |SENSOR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4619      	mov	r1, r3
 8002176:	4805      	ldr	r0, [pc, #20]	@ (800218c <MX_GPIO_Init+0x188>)
 8002178:	f003 ff74 	bl	8006064 <HAL_GPIO_Init>

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	@ 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	48000800 	.word	0x48000800
 800218c:	48000400 	.word	0x48000400
 8002190:	48000c00 	.word	0x48000c00

08002194 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <MX_I2C3_Init+0x74>)
 800219a:	4a1c      	ldr	r2, [pc, #112]	@ (800220c <MX_I2C3_Init+0x78>)
 800219c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40621236;
 800219e:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <MX_I2C3_Init+0x74>)
 80021a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002210 <MX_I2C3_Init+0x7c>)
 80021a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80021a4:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <MX_I2C3_Init+0x74>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021aa:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <MX_I2C3_Init+0x74>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b0:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <MX_I2C3_Init+0x74>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80021b6:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <MX_I2C3_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <MX_I2C3_Init+0x74>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <MX_I2C3_Init+0x74>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <MX_I2C3_Init+0x74>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021ce:	480e      	ldr	r0, [pc, #56]	@ (8002208 <MX_I2C3_Init+0x74>)
 80021d0:	f004 f8fa 	bl	80063c8 <HAL_I2C_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80021da:	f000 ff35 	bl	8003048 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021de:	2100      	movs	r1, #0
 80021e0:	4809      	ldr	r0, [pc, #36]	@ (8002208 <MX_I2C3_Init+0x74>)
 80021e2:	f004 f98c 	bl	80064fe <HAL_I2CEx_ConfigAnalogFilter>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80021ec:	f000 ff2c 	bl	8003048 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80021f0:	2100      	movs	r1, #0
 80021f2:	4805      	ldr	r0, [pc, #20]	@ (8002208 <MX_I2C3_Init+0x74>)
 80021f4:	f004 f9ce 	bl	8006594 <HAL_I2CEx_ConfigDigitalFilter>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80021fe:	f000 ff23 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200002d8 	.word	0x200002d8
 800220c:	40007800 	.word	0x40007800
 8002210:	40621236 	.word	0x40621236

08002214 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b09e      	sub	sp, #120	@ 0x78
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	2254      	movs	r2, #84	@ 0x54
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f00e f974 	bl	8010522 <memset>
  if(i2cHandle->Instance==I2C3)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1f      	ldr	r2, [pc, #124]	@ (80022bc <HAL_I2C_MspInit+0xa8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d137      	bne.n	80022b4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002244:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002248:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800224a:	2300      	movs	r3, #0
 800224c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	4618      	mov	r0, r3
 8002254:	f004 ffdc 	bl	8007210 <HAL_RCCEx_PeriphCLKConfig>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800225e:	f000 fef3 	bl	8003048 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002262:	4b17      	ldr	r3, [pc, #92]	@ (80022c0 <HAL_I2C_MspInit+0xac>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	4a16      	ldr	r2, [pc, #88]	@ (80022c0 <HAL_I2C_MspInit+0xac>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800226e:	4b14      	ldr	r3, [pc, #80]	@ (80022c0 <HAL_I2C_MspInit+0xac>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800227a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800227e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002280:	2312      	movs	r3, #18
 8002282:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800228c:	2308      	movs	r3, #8
 800228e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002290:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002294:	4619      	mov	r1, r3
 8002296:	480b      	ldr	r0, [pc, #44]	@ (80022c4 <HAL_I2C_MspInit+0xb0>)
 8002298:	f003 fee4 	bl	8006064 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800229c:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <HAL_I2C_MspInit+0xac>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a0:	4a07      	ldr	r2, [pc, #28]	@ (80022c0 <HAL_I2C_MspInit+0xac>)
 80022a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80022a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <HAL_I2C_MspInit+0xac>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80022b4:	bf00      	nop
 80022b6:	3778      	adds	r7, #120	@ 0x78
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40007800 	.word	0x40007800
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48000800 	.word	0x48000800

080022c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022cc:	f001 feb3 	bl	8004036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022d0:	f000 f904 	bl	80024dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022d4:	f7ff fe96 	bl	8002004 <MX_GPIO_Init>
  MX_DMA_Init();
 80022d8:	f7ff fe62 	bl	8001fa0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80022dc:	f001 fdd8 	bl	8003e90 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80022e0:	f7ff fd64 	bl	8001dac <MX_ADC1_Init>
  MX_I2C3_Init();
 80022e4:	f7ff ff56 	bl	8002194 <MX_I2C3_Init>
  MX_SPI2_Init();
 80022e8:	f001 f8f8 	bl	80034dc <MX_SPI2_Init>
  MX_TIM1_Init();
 80022ec:	f001 facc 	bl	8003888 <MX_TIM1_Init>
  MX_TIM2_Init();
 80022f0:	f001 fb24 	bl	800393c <MX_TIM2_Init>
  MX_TIM4_Init();
 80022f4:	f001 fbf2 	bl	8003adc <MX_TIM4_Init>
  MX_TIM3_Init();
 80022f8:	f001 fba2 	bl	8003a40 <MX_TIM3_Init>
  MX_TIM5_Init();
 80022fc:	f001 fc44 	bl	8003b88 <MX_TIM5_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002300:	f009 fbe2 	bl	800bac8 <MX_FATFS_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <main+0x46>
    Error_Handler();
 800230a:	f000 fe9d 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN 2 */
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&GRUZIK.Adc_Value, 1);
 800230e:	2201      	movs	r2, #1
 8002310:	4952      	ldr	r1, [pc, #328]	@ (800245c <main+0x194>)
 8002312:	4853      	ldr	r0, [pc, #332]	@ (8002460 <main+0x198>)
 8002314:	f002 fada 	bl	80048cc <HAL_ADC_Start_DMA>

  	/*Set initial values for PID*/
    GRUZIK.Kp = 0.02;
 8002318:	4b52      	ldr	r3, [pc, #328]	@ (8002464 <main+0x19c>)
 800231a:	4a53      	ldr	r2, [pc, #332]	@ (8002468 <main+0x1a0>)
 800231c:	601a      	str	r2, [r3, #0]
  	GRUZIK.Kd = 0.1;
 800231e:	4b51      	ldr	r3, [pc, #324]	@ (8002464 <main+0x19c>)
 8002320:	4a52      	ldr	r2, [pc, #328]	@ (800246c <main+0x1a4>)
 8002322:	605a      	str	r2, [r3, #4]
  	GRUZIK.Speed_offset = 0.014;
 8002324:	4b4f      	ldr	r3, [pc, #316]	@ (8002464 <main+0x19c>)
 8002326:	4a52      	ldr	r2, [pc, #328]	@ (8002470 <main+0x1a8>)
 8002328:	635a      	str	r2, [r3, #52]	@ 0x34

  	GRUZIK.Base_speed_R = 120;
 800232a:	4b4e      	ldr	r3, [pc, #312]	@ (8002464 <main+0x19c>)
 800232c:	2278      	movs	r2, #120	@ 0x78
 800232e:	609a      	str	r2, [r3, #8]
  	GRUZIK.Base_speed_L = 120;
 8002330:	4b4c      	ldr	r3, [pc, #304]	@ (8002464 <main+0x19c>)
 8002332:	2278      	movs	r2, #120	@ 0x78
 8002334:	60da      	str	r2, [r3, #12]
  	GRUZIK.Max_speed_R = 120;
 8002336:	4b4b      	ldr	r3, [pc, #300]	@ (8002464 <main+0x19c>)
 8002338:	2278      	movs	r2, #120	@ 0x78
 800233a:	611a      	str	r2, [r3, #16]
  	GRUZIK.Max_speed_L = 120;
 800233c:	4b49      	ldr	r3, [pc, #292]	@ (8002464 <main+0x19c>)
 800233e:	2278      	movs	r2, #120	@ 0x78
 8002340:	615a      	str	r2, [r3, #20]

  	/*Sharp turn speed*/
  	GRUZIK.Sharp_bend_speed_right=-70;
 8002342:	4b48      	ldr	r3, [pc, #288]	@ (8002464 <main+0x19c>)
 8002344:	f06f 0245 	mvn.w	r2, #69	@ 0x45
 8002348:	619a      	str	r2, [r3, #24]
  	GRUZIK.Sharp_bend_speed_left=85;
 800234a:	4b46      	ldr	r3, [pc, #280]	@ (8002464 <main+0x19c>)
 800234c:	2255      	movs	r2, #85	@ 0x55
 800234e:	61da      	str	r2, [r3, #28]
  	GRUZIK.Bend_speed_right=-50;
 8002350:	4b44      	ldr	r3, [pc, #272]	@ (8002464 <main+0x19c>)
 8002352:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8002356:	621a      	str	r2, [r3, #32]
  	GRUZIK.Bend_speed_left=110;
 8002358:	4b42      	ldr	r3, [pc, #264]	@ (8002464 <main+0x19c>)
 800235a:	226e      	movs	r2, #110	@ 0x6e
 800235c:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Start receiving data from Blue tooth*/
    HAL_UART_Receive_IT(&hlpuart1, &RxData, 1);
 800235e:	2201      	movs	r2, #1
 8002360:	4944      	ldr	r1, [pc, #272]	@ (8002474 <main+0x1ac>)
 8002362:	4845      	ldr	r0, [pc, #276]	@ (8002478 <main+0x1b0>)
 8002364:	f007 fb44 	bl	80099f0 <HAL_UART_Receive_IT>

    /*encoders*/
    HAL_TIM_Base_Start_IT(&htim5);// 100
 8002368:	4844      	ldr	r0, [pc, #272]	@ (800247c <main+0x1b4>)
 800236a:	f005 fe25 	bl	8007fb8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Left Encoder
 800236e:	213c      	movs	r1, #60	@ 0x3c
 8002370:	4843      	ldr	r0, [pc, #268]	@ (8002480 <main+0x1b8>)
 8002372:	f006 f8b3 	bl	80084dc <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // Right Encoder
 8002376:	213c      	movs	r1, #60	@ 0x3c
 8002378:	4842      	ldr	r0, [pc, #264]	@ (8002484 <main+0x1bc>)
 800237a:	f006 f8af 	bl	80084dc <HAL_TIM_Encoder_Start>

    //         Motor     KP    KI
    Motor_Init(&Motor_R, 0.1, 0.2);//0.1 0.2
 800237e:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8002488 <main+0x1c0>
 8002382:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 800248c <main+0x1c4>
 8002386:	4842      	ldr	r0, [pc, #264]	@ (8002490 <main+0x1c8>)
 8002388:	f001 f812 	bl	80033b0 <Motor_Init>
    Motor_Init(&Motor_L, 0.1, 0.2);
 800238c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8002488 <main+0x1c0>
 8002390:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800248c <main+0x1c4>
 8002394:	483f      	ldr	r0, [pc, #252]	@ (8002494 <main+0x1cc>)
 8002396:	f001 f80b 	bl	80033b0 <Motor_Init>
    LowPassFilter_Init(&Motor_R.EncoderRpmFilter, LOW_PASS_FILTER_ALPHA);
 800239a:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8002498 <main+0x1d0>
 800239e:	483f      	ldr	r0, [pc, #252]	@ (800249c <main+0x1d4>)
 80023a0:	f7fe fe58 	bl	8001054 <LowPassFilter_Init>
    LowPassFilter_Init(&Motor_L.EncoderRpmFilter, LOW_PASS_FILTER_ALPHA);
 80023a4:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8002498 <main+0x1d0>
 80023a8:	483d      	ldr	r0, [pc, #244]	@ (80024a0 <main+0x1d8>)
 80023aa:	f7fe fe53 	bl	8001054 <LowPassFilter_Init>
    LowPassFilter_Init(&Motor_L.MetersPerSecondLPF, LOW_PASS_FILTER_ALPHA);
 80023ae:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8002498 <main+0x1d0>
 80023b2:	483c      	ldr	r0, [pc, #240]	@ (80024a4 <main+0x1dc>)
 80023b4:	f7fe fe4e 	bl	8001054 <LowPassFilter_Init>
    LowPassFilter_Init(&Motor_R.MetersPerSecondLPF, LOW_PASS_FILTER_ALPHA);
 80023b8:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8002498 <main+0x1d0>
 80023bc:	483a      	ldr	r0, [pc, #232]	@ (80024a8 <main+0x1e0>)
 80023be:	f7fe fe49 	bl	8001054 <LowPassFilter_Init>

    /*SD Card file initialization*/
    FatFsResult = f_mount(&SdFatFs, "", 1);
 80023c2:	2201      	movs	r2, #1
 80023c4:	4939      	ldr	r1, [pc, #228]	@ (80024ac <main+0x1e4>)
 80023c6:	483a      	ldr	r0, [pc, #232]	@ (80024b0 <main+0x1e8>)
 80023c8:	f00b fe10 	bl	800dfec <f_mount>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b38      	ldr	r3, [pc, #224]	@ (80024b4 <main+0x1ec>)
 80023d2:	701a      	strb	r2, [r3, #0]
    FatFsResult = f_open(&SdCardFile, "GRUZIK.txt", FA_WRITE|FA_OPEN_APPEND);
 80023d4:	2232      	movs	r2, #50	@ 0x32
 80023d6:	4938      	ldr	r1, [pc, #224]	@ (80024b8 <main+0x1f0>)
 80023d8:	4838      	ldr	r0, [pc, #224]	@ (80024bc <main+0x1f4>)
 80023da:	f00b fe4d 	bl	800e078 <f_open>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b34      	ldr	r3, [pc, #208]	@ (80024b4 <main+0x1ec>)
 80023e4:	701a      	strb	r2, [r3, #0]


	/*Start timers and PWM on channels*/
	HAL_TIM_Base_Start_IT(&htim3);
 80023e6:	4836      	ldr	r0, [pc, #216]	@ (80024c0 <main+0x1f8>)
 80023e8:	f005 fde6 	bl	8007fb8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//right pwm
 80023ec:	2100      	movs	r1, #0
 80023ee:	4835      	ldr	r0, [pc, #212]	@ (80024c4 <main+0x1fc>)
 80023f0:	f005 febc 	bl	800816c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);//left pwm
 80023f4:	210c      	movs	r1, #12
 80023f6:	4833      	ldr	r0, [pc, #204]	@ (80024c4 <main+0x1fc>)
 80023f8:	f005 feb8 	bl	800816c <HAL_TIM_PWM_Start>
//	myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
//	myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
//	MPU6050_Config(&myMpuConfig);

    /*LED diodes initial set*/
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80023fc:	2201      	movs	r2, #1
 80023fe:	2140      	movs	r1, #64	@ 0x40
 8002400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002404:	f003 ffc8 	bl	8006398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8002408:	2201      	movs	r2, #1
 800240a:	2180      	movs	r1, #128	@ 0x80
 800240c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002410:	f003 ffc2 	bl	8006398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8002414:	2201      	movs	r2, #1
 8002416:	2110      	movs	r1, #16
 8002418:	482b      	ldr	r0, [pc, #172]	@ (80024c8 <main+0x200>)
 800241a:	f003 ffbd 	bl	8006398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800241e:	2201      	movs	r2, #1
 8002420:	2120      	movs	r1, #32
 8002422:	4829      	ldr	r0, [pc, #164]	@ (80024c8 <main+0x200>)
 8002424:	f003 ffb8 	bl	8006398 <HAL_GPIO_WritePin>

    /*last sensor out of the tape timer*/
    LastEndTimer = HAL_GetTick();
 8002428:	f001 fe6a 	bl	8004100 <HAL_GetTick>
 800242c:	4603      	mov	r3, r0
 800242e:	4a27      	ldr	r2, [pc, #156]	@ (80024cc <main+0x204>)
 8002430:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 8002432:	f000 fd59 	bl	8002ee8 <PID_control>

	  /*If there is a message form Bluetooth Parser it*/
	  if(ReceivedLines > 0)
 8002436:	4b26      	ldr	r3, [pc, #152]	@ (80024d0 <main+0x208>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f9      	beq.n	8002432 <main+0x16a>
	  {
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 800243e:	4925      	ldr	r1, [pc, #148]	@ (80024d4 <main+0x20c>)
 8002440:	4825      	ldr	r0, [pc, #148]	@ (80024d8 <main+0x210>)
 8002442:	f7fe fe93 	bl	800116c <Parser_TakeLine>
		  Parser_Parse(ReceivedData,&GRUZIK);
 8002446:	4907      	ldr	r1, [pc, #28]	@ (8002464 <main+0x19c>)
 8002448:	4822      	ldr	r0, [pc, #136]	@ (80024d4 <main+0x20c>)
 800244a:	f7ff fc2b 	bl	8001ca4 <Parser_Parse>

		  ReceivedLines--;
 800244e:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <main+0x208>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	3b01      	subs	r3, #1
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <main+0x208>)
 8002458:	701a      	strb	r2, [r3, #0]
	  PID_control();
 800245a:	e7ea      	b.n	8002432 <main+0x16a>
 800245c:	200065b4 	.word	0x200065b4
 8002460:	2000020c 	.word	0x2000020c
 8002464:	20006588 	.word	0x20006588
 8002468:	3ca3d70a 	.word	0x3ca3d70a
 800246c:	3dcccccd 	.word	0x3dcccccd
 8002470:	3c656042 	.word	0x3c656042
 8002474:	20006754 	.word	0x20006754
 8002478:	20006a04 	.word	0x20006a04
 800247c:	20006958 	.word	0x20006958
 8002480:	2000690c 	.word	0x2000690c
 8002484:	20006828 	.word	0x20006828
 8002488:	3e4ccccd 	.word	0x3e4ccccd
 800248c:	3dcccccd 	.word	0x3dcccccd
 8002490:	2000665c 	.word	0x2000665c
 8002494:	200065c0 	.word	0x200065c0
 8002498:	3f333333 	.word	0x3f333333
 800249c:	20006690 	.word	0x20006690
 80024a0:	200065f4 	.word	0x200065f4
 80024a4:	200065fc 	.word	0x200065fc
 80024a8:	20006698 	.word	0x20006698
 80024ac:	08013c94 	.word	0x08013c94
 80024b0:	20006128 	.word	0x20006128
 80024b4:	20006124 	.word	0x20006124
 80024b8:	08013c98 	.word	0x08013c98
 80024bc:	20006358 	.word	0x20006358
 80024c0:	200068c0 	.word	0x200068c0
 80024c4:	20006874 	.word	0x20006874
 80024c8:	48000800 	.word	0x48000800
 80024cc:	20006750 	.word	0x20006750
 80024d0:	200067bc 	.word	0x200067bc
 80024d4:	2000679c 	.word	0x2000679c
 80024d8:	20006758 	.word	0x20006758

080024dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b094      	sub	sp, #80	@ 0x50
 80024e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e2:	f107 0318 	add.w	r3, r7, #24
 80024e6:	2238      	movs	r2, #56	@ 0x38
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00e f819 	bl	8010522 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80024fe:	2000      	movs	r0, #0
 8002500:	f004 f8a4 	bl	800664c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002504:	f004 f892 	bl	800662c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002508:	4b20      	ldr	r3, [pc, #128]	@ (800258c <SystemClock_Config+0xb0>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250e:	4a1f      	ldr	r2, [pc, #124]	@ (800258c <SystemClock_Config+0xb0>)
 8002510:	f023 0318 	bic.w	r3, r3, #24
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002518:	2306      	movs	r3, #6
 800251a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800251c:	2301      	movs	r3, #1
 800251e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002520:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002524:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002526:	2340      	movs	r3, #64	@ 0x40
 8002528:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800252a:	2302      	movs	r3, #2
 800252c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800252e:	2302      	movs	r3, #2
 8002530:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002532:	2304      	movs	r3, #4
 8002534:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002536:	2355      	movs	r3, #85	@ 0x55
 8002538:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800253a:	2302      	movs	r3, #2
 800253c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800253e:	2302      	movs	r3, #2
 8002540:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002542:	2302      	movs	r3, #2
 8002544:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002546:	f107 0318 	add.w	r3, r7, #24
 800254a:	4618      	mov	r0, r3
 800254c:	f004 f932 	bl	80067b4 <HAL_RCC_OscConfig>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002556:	f000 fd77 	bl	8003048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800255a:	230f      	movs	r3, #15
 800255c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800255e:	2303      	movs	r3, #3
 8002560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	2104      	movs	r1, #4
 8002572:	4618      	mov	r0, r3
 8002574:	f004 fc30 	bl	8006dd8 <HAL_RCC_ClockConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800257e:	f000 fd63 	bl	8003048 <Error_Handler>
  }
}
 8002582:	bf00      	nop
 8002584:	3750      	adds	r7, #80	@ 0x50
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000

08002590 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/*Interrupts*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0f      	ldr	r2, [pc, #60]	@ (80025dc <HAL_UART_RxCpltCallback+0x4c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d117      	bne.n	80025d2 <HAL_UART_RxCpltCallback+0x42>
	{
		if(RB_Write(&ReceiveBuffer, RxData) == RB_OK)
 80025a2:	4b0f      	ldr	r3, [pc, #60]	@ (80025e0 <HAL_UART_RxCpltCallback+0x50>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	480e      	ldr	r0, [pc, #56]	@ (80025e4 <HAL_UART_RxCpltCallback+0x54>)
 80025aa:	f7fe fd8b 	bl	80010c4 <RB_Write>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d109      	bne.n	80025c8 <HAL_UART_RxCpltCallback+0x38>
		{
			if(RxData == ENDLINE)
 80025b4:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <HAL_UART_RxCpltCallback+0x50>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b0a      	cmp	r3, #10
 80025ba:	d105      	bne.n	80025c8 <HAL_UART_RxCpltCallback+0x38>
			{
				ReceivedLines++;
 80025bc:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_UART_RxCpltCallback+0x58>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	4b08      	ldr	r3, [pc, #32]	@ (80025e8 <HAL_UART_RxCpltCallback+0x58>)
 80025c6:	701a      	strb	r2, [r3, #0]
			}
		}
    	HAL_UART_Receive_IT(&hlpuart1,&RxData, 1);
 80025c8:	2201      	movs	r2, #1
 80025ca:	4905      	ldr	r1, [pc, #20]	@ (80025e0 <HAL_UART_RxCpltCallback+0x50>)
 80025cc:	4807      	ldr	r0, [pc, #28]	@ (80025ec <HAL_UART_RxCpltCallback+0x5c>)
 80025ce:	f007 fa0f 	bl	80099f0 <HAL_UART_Receive_IT>
	}
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40008000 	.word	0x40008000
 80025e0:	20006754 	.word	0x20006754
 80025e4:	20006758 	.word	0x20006758
 80025e8:	200067bc 	.word	0x200067bc
 80025ec:	20006a04 	.word	0x20006a04

080025f0 <HAL_TIM_PeriodElapsedCallback>:
/*Encoders reading at 1KHz */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a11      	ldr	r2, [pc, #68]	@ (8002644 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d11c      	bne.n	800263c <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		/*Save last values*/
		Motor_L.EncoderPreviousValue = Motor_L.EncoderValue;
 8002602:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a10      	ldr	r2, [pc, #64]	@ (8002648 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002608:	6053      	str	r3, [r2, #4]
		Motor_R.EncoderPreviousValue = Motor_R.EncoderValue;
 800260a:	4b10      	ldr	r3, [pc, #64]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a0f      	ldr	r2, [pc, #60]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002610:	6053      	str	r3, [r2, #4]
		/*Get Encoder values*/
		Motor_L.EncoderValue = __HAL_TIM_GET_COUNTER(&htim4);
 8002612:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800261a:	6013      	str	r3, [r2, #0]
		Motor_R.EncoderValue = __HAL_TIM_GET_COUNTER(&htim1);
 800261c:	4b0d      	ldr	r3, [pc, #52]	@ (8002654 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	4a0a      	ldr	r2, [pc, #40]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002624:	6013      	str	r3, [r2, #0]

	    Motor_CalculateSpeed(&Motor_R);
 8002626:	4809      	ldr	r0, [pc, #36]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002628:	f000 fe06 	bl	8003238 <Motor_CalculateSpeed>
	    Motor_CalculateSpeed(&Motor_L);
 800262c:	4806      	ldr	r0, [pc, #24]	@ (8002648 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800262e:	f000 fe03 	bl	8003238 <Motor_CalculateSpeed>

	    /*integration of Gyroscope data for Z axis*/
//		MPU6050_Get_Accel_Scale(&myAccelScaled);
//		MPU6050_Get_Gyro_Scale(&myGyroScaled);

	   MapUpdate(&map, &Motor_L, &Motor_R);
 8002632:	4a06      	ldr	r2, [pc, #24]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002634:	4904      	ldr	r1, [pc, #16]	@ (8002648 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002636:	4808      	ldr	r0, [pc, #32]	@ (8002658 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002638:	f000 fd0c 	bl	8003054 <MapUpdate>
//	    if(Yaw < -180)
//	    {
//	    	Yaw = 180;
//	    }
	}
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40000c00 	.word	0x40000c00
 8002648:	200065c0 	.word	0x200065c0
 800264c:	2000665c 	.word	0x2000665c
 8002650:	2000690c 	.word	0x2000690c
 8002654:	20006828 	.word	0x20006828
 8002658:	2000032c 	.word	0x2000032c

0800265c <delay_us>:
/*Functions*/
void delay_us (uint16_t us) //Blocking function
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8002666:	4b09      	ldr	r3, [pc, #36]	@ (800268c <delay_us+0x30>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 800266e:	bf00      	nop
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <delay_us+0x30>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	429a      	cmp	r2, r3
 800267a:	d3f9      	bcc.n	8002670 <delay_us+0x14>
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200068c0 	.word	0x200068c0

08002690 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80026ac:	887b      	ldrh	r3, [r7, #2]
 80026ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b0:	2301      	movs	r3, #1
 80026b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f003 fcd0 	bl	8006064 <HAL_GPIO_Init>
}
 80026c4:	bf00      	nop
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f0:	2301      	movs	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f003 fcb2 	bl	8006064 <HAL_GPIO_Init>
}
 8002700:	bf00      	nop
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <motor_control>:


void motor_control (double pos_right, double pos_left)

{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002712:	ed87 1b00 	vstr	d1, [r7]
	#ifdef PI_MOTOR_SPEED_REGULATION
	{
		if (pos_left < 0 )
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002722:	f7fe fa13 	bl	8000b4c <__aeabi_dcmplt>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d034      	beq.n	8002796 <motor_control+0x8e>
		{
			Motor_L.set_speed = pos_left * -1;
 800272c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002730:	f7fe fa92 	bl	8000c58 <__aeabi_d2f>
 8002734:	4603      	mov	r3, r0
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef1 7a67 	vneg.f32	s15, s15
 800273e:	4b63      	ldr	r3, [pc, #396]	@ (80028cc <motor_control+0x1c4>)
 8002740:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
			PI_Loop(&Motor_L);
 8002744:	4861      	ldr	r0, [pc, #388]	@ (80028cc <motor_control+0x1c4>)
 8002746:	f000 fe4f 	bl	80033e8 <PI_Loop>

			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_4, (uint32_t)((ARR*Motor_L.speed) * GRUZIK.Speed_level));//PWM_L
 800274a:	4b61      	ldr	r3, [pc, #388]	@ (80028d0 <motor_control+0x1c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002756:	4b5d      	ldr	r3, [pc, #372]	@ (80028cc <motor_control+0x1c4>)
 8002758:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800275c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002760:	4b5c      	ldr	r3, [pc, #368]	@ (80028d4 <motor_control+0x1cc>)
 8002762:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276a:	4b5b      	ldr	r3, [pc, #364]	@ (80028d8 <motor_control+0x1d0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002772:	ee17 2a90 	vmov	r2, s15
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(Motor_L_A_GPIO_Port, Motor_L_B_Pin, GPIO_PIN_SET);
 8002778:	2201      	movs	r2, #1
 800277a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800277e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002782:	f003 fe09 	bl	8006398 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_L_B_GPIO_Port, Motor_L_A_Pin, GPIO_PIN_RESET);
 8002786:	2200      	movs	r2, #0
 8002788:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800278c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002790:	f003 fe02 	bl	8006398 <HAL_GPIO_WritePin>
 8002794:	e02e      	b.n	80027f4 <motor_control+0xec>

		}
		else
		{
			Motor_L.set_speed = pos_left;
 8002796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800279a:	f7fe fa5d 	bl	8000c58 <__aeabi_d2f>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a4a      	ldr	r2, [pc, #296]	@ (80028cc <motor_control+0x1c4>)
 80027a2:	6513      	str	r3, [r2, #80]	@ 0x50
			PI_Loop(&Motor_L);
 80027a4:	4849      	ldr	r0, [pc, #292]	@ (80028cc <motor_control+0x1c4>)
 80027a6:	f000 fe1f 	bl	80033e8 <PI_Loop>

			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_4, (uint32_t)((ARR*Motor_L.speed) * GRUZIK.Speed_level));//PWM_L
 80027aa:	4b49      	ldr	r3, [pc, #292]	@ (80028d0 <motor_control+0x1c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b6:	4b45      	ldr	r3, [pc, #276]	@ (80028cc <motor_control+0x1c4>)
 80027b8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80027bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c0:	4b44      	ldr	r3, [pc, #272]	@ (80028d4 <motor_control+0x1cc>)
 80027c2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80027c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ca:	4b43      	ldr	r3, [pc, #268]	@ (80028d8 <motor_control+0x1d0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d2:	ee17 2a90 	vmov	r2, s15
 80027d6:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(Motor_L_A_GPIO_Port, Motor_L_B_Pin, GPIO_PIN_RESET);
 80027d8:	2200      	movs	r2, #0
 80027da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e2:	f003 fdd9 	bl	8006398 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_L_B_GPIO_Port, Motor_L_A_Pin, GPIO_PIN_SET);
 80027e6:	2201      	movs	r2, #1
 80027e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027f0:	f003 fdd2 	bl	8006398 <HAL_GPIO_WritePin>
		}
		if (pos_right < 0 )
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002800:	f7fe f9a4 	bl	8000b4c <__aeabi_dcmplt>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d030      	beq.n	800286c <motor_control+0x164>
		{
			Motor_R.set_speed = pos_right * -1;
 800280a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800280e:	f7fe fa23 	bl	8000c58 <__aeabi_d2f>
 8002812:	4603      	mov	r3, r0
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eef1 7a67 	vneg.f32	s15, s15
 800281c:	4b2f      	ldr	r3, [pc, #188]	@ (80028dc <motor_control+0x1d4>)
 800281e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
			PI_Loop(&Motor_R);
 8002822:	482e      	ldr	r0, [pc, #184]	@ (80028dc <motor_control+0x1d4>)
 8002824:	f000 fde0 	bl	80033e8 <PI_Loop>

			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, (uint32_t)((ARR*Motor_R.speed) * GRUZIK.Speed_level));//PWM_R
 8002828:	4b29      	ldr	r3, [pc, #164]	@ (80028d0 <motor_control+0x1c8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002834:	4b29      	ldr	r3, [pc, #164]	@ (80028dc <motor_control+0x1d4>)
 8002836:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800283a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283e:	4b25      	ldr	r3, [pc, #148]	@ (80028d4 <motor_control+0x1cc>)
 8002840:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002848:	4b23      	ldr	r3, [pc, #140]	@ (80028d8 <motor_control+0x1d0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002850:	ee17 2a90 	vmov	r2, s15
 8002854:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(Motor_R_A_GPIO_Port, Motor_R_A_Pin, GPIO_PIN_SET);
 8002856:	2201      	movs	r2, #1
 8002858:	2104      	movs	r1, #4
 800285a:	4821      	ldr	r0, [pc, #132]	@ (80028e0 <motor_control+0x1d8>)
 800285c:	f003 fd9c 	bl	8006398 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_R_B_GPIO_Port, Motor_R_B_Pin, GPIO_PIN_RESET);
 8002860:	2200      	movs	r2, #0
 8002862:	2108      	movs	r1, #8
 8002864:	481e      	ldr	r0, [pc, #120]	@ (80028e0 <motor_control+0x1d8>)
 8002866:	f003 fd97 	bl	8006398 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_R_B_GPIO_Port, Motor_R_B_Pin, GPIO_PIN_SET);
		}
	}
	#endif

}
 800286a:	e02a      	b.n	80028c2 <motor_control+0x1ba>
			Motor_R.set_speed = pos_right;
 800286c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002870:	f7fe f9f2 	bl	8000c58 <__aeabi_d2f>
 8002874:	4603      	mov	r3, r0
 8002876:	4a19      	ldr	r2, [pc, #100]	@ (80028dc <motor_control+0x1d4>)
 8002878:	6513      	str	r3, [r2, #80]	@ 0x50
			PI_Loop(&Motor_R);
 800287a:	4818      	ldr	r0, [pc, #96]	@ (80028dc <motor_control+0x1d4>)
 800287c:	f000 fdb4 	bl	80033e8 <PI_Loop>
			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, (uint32_t)((ARR*Motor_R.speed) * GRUZIK.Speed_level));//PWM_R
 8002880:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <motor_control+0x1c8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800288c:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <motor_control+0x1d4>)
 800288e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002896:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <motor_control+0x1cc>)
 8002898:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800289c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a0:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <motor_control+0x1d0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a8:	ee17 2a90 	vmov	r2, s15
 80028ac:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(Motor_R_A_GPIO_Port, Motor_R_A_Pin, GPIO_PIN_RESET);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2104      	movs	r1, #4
 80028b2:	480b      	ldr	r0, [pc, #44]	@ (80028e0 <motor_control+0x1d8>)
 80028b4:	f003 fd70 	bl	8006398 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_R_B_GPIO_Port, Motor_R_B_Pin, GPIO_PIN_SET);
 80028b8:	2201      	movs	r2, #1
 80028ba:	2108      	movs	r1, #8
 80028bc:	4808      	ldr	r0, [pc, #32]	@ (80028e0 <motor_control+0x1d8>)
 80028be:	f003 fd6b 	bl	8006398 <HAL_GPIO_WritePin>
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200065c0 	.word	0x200065c0
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20006588 	.word	0x20006588
 80028d8:	20006874 	.word	0x20006874
 80028dc:	2000665c 	.word	0x2000665c
 80028e0:	48000800 	.word	0x48000800

080028e4 <sharp_turn>:


void sharp_turn ()
{
 80028e4:	b5b0      	push	{r4, r5, r7, lr}
 80028e6:	af00      	add	r7, sp, #0

	if (Last_idle < 25)
 80028e8:	4b30      	ldr	r3, [pc, #192]	@ (80029ac <sharp_turn+0xc8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b18      	cmp	r3, #24
 80028ee:	dc2d      	bgt.n	800294c <sharp_turn+0x68>
	{
		if (Last_end == 1)
 80028f0:	4b2f      	ldr	r3, [pc, #188]	@ (80029b0 <sharp_turn+0xcc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d114      	bne.n	8002922 <sharp_turn+0x3e>
			motor_control(GRUZIK.Sharp_bend_speed_right, GRUZIK.Sharp_bend_speed_left);
 80028f8:	4b2e      	ldr	r3, [pc, #184]	@ (80029b4 <sharp_turn+0xd0>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fd fe49 	bl	8000594 <__aeabi_i2d>
 8002902:	4604      	mov	r4, r0
 8002904:	460d      	mov	r5, r1
 8002906:	4b2b      	ldr	r3, [pc, #172]	@ (80029b4 <sharp_turn+0xd0>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fe42 	bl	8000594 <__aeabi_i2d>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	ec43 2b11 	vmov	d1, r2, r3
 8002918:	ec45 4b10 	vmov	d0, r4, r5
 800291c:	f7ff fef4 	bl	8002708 <motor_control>
		if (Last_end == 1)
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
		else
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
	}
}
 8002920:	e041      	b.n	80029a6 <sharp_turn+0xc2>
			motor_control(GRUZIK.Sharp_bend_speed_left, GRUZIK.Sharp_bend_speed_right);
 8002922:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <sharp_turn+0xd0>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fe34 	bl	8000594 <__aeabi_i2d>
 800292c:	4604      	mov	r4, r0
 800292e:	460d      	mov	r5, r1
 8002930:	4b20      	ldr	r3, [pc, #128]	@ (80029b4 <sharp_turn+0xd0>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fe2d 	bl	8000594 <__aeabi_i2d>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	ec43 2b11 	vmov	d1, r2, r3
 8002942:	ec45 4b10 	vmov	d0, r4, r5
 8002946:	f7ff fedf 	bl	8002708 <motor_control>
}
 800294a:	e02c      	b.n	80029a6 <sharp_turn+0xc2>
		if (Last_end == 1)
 800294c:	4b18      	ldr	r3, [pc, #96]	@ (80029b0 <sharp_turn+0xcc>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d114      	bne.n	800297e <sharp_turn+0x9a>
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
 8002954:	4b17      	ldr	r3, [pc, #92]	@ (80029b4 <sharp_turn+0xd0>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fe1b 	bl	8000594 <__aeabi_i2d>
 800295e:	4604      	mov	r4, r0
 8002960:	460d      	mov	r5, r1
 8002962:	4b14      	ldr	r3, [pc, #80]	@ (80029b4 <sharp_turn+0xd0>)
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fe14 	bl	8000594 <__aeabi_i2d>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	ec43 2b11 	vmov	d1, r2, r3
 8002974:	ec45 4b10 	vmov	d0, r4, r5
 8002978:	f7ff fec6 	bl	8002708 <motor_control>
}
 800297c:	e013      	b.n	80029a6 <sharp_turn+0xc2>
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
 800297e:	4b0d      	ldr	r3, [pc, #52]	@ (80029b4 <sharp_turn+0xd0>)
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fe06 	bl	8000594 <__aeabi_i2d>
 8002988:	4604      	mov	r4, r0
 800298a:	460d      	mov	r5, r1
 800298c:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <sharp_turn+0xd0>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fdff 	bl	8000594 <__aeabi_i2d>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	ec43 2b11 	vmov	d1, r2, r3
 800299e:	ec45 4b10 	vmov	d0, r4, r5
 80029a2:	f7ff feb1 	bl	8002708 <motor_control>
}
 80029a6:	bf00      	nop
 80029a8:	bdb0      	pop	{r4, r5, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20006748 	.word	0x20006748
 80029b0:	20006744 	.word	0x20006744
 80029b4:	20006588 	.word	0x20006588

080029b8 <QTR8_read>:
int QTR8_read ()
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 80029be:	2201      	movs	r2, #1
 80029c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029c4:	48bd      	ldr	r0, [pc, #756]	@ (8002cbc <QTR8_read+0x304>)
 80029c6:	f003 fce7 	bl	8006398 <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 80029ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029ce:	48bc      	ldr	r0, [pc, #752]	@ (8002cc0 <QTR8_read+0x308>)
 80029d0:	f7ff fe5e 	bl	8002690 <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 80029d4:	2180      	movs	r1, #128	@ 0x80
 80029d6:	48ba      	ldr	r0, [pc, #744]	@ (8002cc0 <QTR8_read+0x308>)
 80029d8:	f7ff fe5a 	bl	8002690 <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 80029dc:	2140      	movs	r1, #64	@ 0x40
 80029de:	48b8      	ldr	r0, [pc, #736]	@ (8002cc0 <QTR8_read+0x308>)
 80029e0:	f7ff fe56 	bl	8002690 <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80029e4:	2120      	movs	r1, #32
 80029e6:	48b6      	ldr	r0, [pc, #728]	@ (8002cc0 <QTR8_read+0x308>)
 80029e8:	f7ff fe52 	bl	8002690 <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80029ec:	2110      	movs	r1, #16
 80029ee:	48b4      	ldr	r0, [pc, #720]	@ (8002cc0 <QTR8_read+0x308>)
 80029f0:	f7ff fe4e 	bl	8002690 <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80029f4:	2104      	movs	r1, #4
 80029f6:	48b3      	ldr	r0, [pc, #716]	@ (8002cc4 <QTR8_read+0x30c>)
 80029f8:	f7ff fe4a 	bl	8002690 <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80029fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a00:	48ae      	ldr	r0, [pc, #696]	@ (8002cbc <QTR8_read+0x304>)
 8002a02:	f7ff fe45 	bl	8002690 <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8002a06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a0a:	48ac      	ldr	r0, [pc, #688]	@ (8002cbc <QTR8_read+0x304>)
 8002a0c:	f7ff fe40 	bl	8002690 <Set_Pin_Output>
	Set_Pin_Output(SENSOR9_GPIO_Port, SENSOR9_Pin);
 8002a10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a14:	48a9      	ldr	r0, [pc, #676]	@ (8002cbc <QTR8_read+0x304>)
 8002a16:	f7ff fe3b 	bl	8002690 <Set_Pin_Output>
	Set_Pin_Output(SENSOR10_GPIO_Port, SENSOR10_Pin);
 8002a1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a22:	f7ff fe35 	bl	8002690 <Set_Pin_Output>
	Set_Pin_Output(SENSOR11_GPIO_Port, SENSOR11_Pin);
 8002a26:	2110      	movs	r1, #16
 8002a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a2c:	f7ff fe30 	bl	8002690 <Set_Pin_Output>
	Set_Pin_Output(SENSOR12_GPIO_Port, SENSOR12_Pin);
 8002a30:	2120      	movs	r1, #32
 8002a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a36:	f7ff fe2b 	bl	8002690 <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a40:	489f      	ldr	r0, [pc, #636]	@ (8002cc0 <QTR8_read+0x308>)
 8002a42:	f003 fca9 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 8002a46:	2201      	movs	r2, #1
 8002a48:	2180      	movs	r1, #128	@ 0x80
 8002a4a:	489d      	ldr	r0, [pc, #628]	@ (8002cc0 <QTR8_read+0x308>)
 8002a4c:	f003 fca4 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 8002a50:	2201      	movs	r2, #1
 8002a52:	2140      	movs	r1, #64	@ 0x40
 8002a54:	489a      	ldr	r0, [pc, #616]	@ (8002cc0 <QTR8_read+0x308>)
 8002a56:	f003 fc9f 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	2120      	movs	r1, #32
 8002a5e:	4898      	ldr	r0, [pc, #608]	@ (8002cc0 <QTR8_read+0x308>)
 8002a60:	f003 fc9a 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 8002a64:	2201      	movs	r2, #1
 8002a66:	2110      	movs	r1, #16
 8002a68:	4895      	ldr	r0, [pc, #596]	@ (8002cc0 <QTR8_read+0x308>)
 8002a6a:	f003 fc95 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 8002a6e:	2201      	movs	r2, #1
 8002a70:	2104      	movs	r1, #4
 8002a72:	4894      	ldr	r0, [pc, #592]	@ (8002cc4 <QTR8_read+0x30c>)
 8002a74:	f003 fc90 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a7e:	488f      	ldr	r0, [pc, #572]	@ (8002cbc <QTR8_read+0x304>)
 8002a80:	f003 fc8a 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 8002a84:	2201      	movs	r2, #1
 8002a86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a8a:	488c      	ldr	r0, [pc, #560]	@ (8002cbc <QTR8_read+0x304>)
 8002a8c:	f003 fc84 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR9_GPIO_Port, SENSOR9_Pin, 1);
 8002a90:	2201      	movs	r2, #1
 8002a92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a96:	4889      	ldr	r0, [pc, #548]	@ (8002cbc <QTR8_read+0x304>)
 8002a98:	f003 fc7e 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR10_GPIO_Port, SENSOR10_Pin, 1);
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002aa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aa6:	f003 fc77 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR11_GPIO_Port, SENSOR11_Pin, 1);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	2110      	movs	r1, #16
 8002aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ab2:	f003 fc71 	bl	8006398 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR12_GPIO_Port, SENSOR12_Pin, 1);
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	2120      	movs	r1, #32
 8002aba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002abe:	f003 fc6b 	bl	8006398 <HAL_GPIO_WritePin>

	delay_us(10);
 8002ac2:	200a      	movs	r0, #10
 8002ac4:	f7ff fdca 	bl	800265c <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8002ac8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002acc:	487c      	ldr	r0, [pc, #496]	@ (8002cc0 <QTR8_read+0x308>)
 8002ace:	f7ff fdfd 	bl	80026cc <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8002ad2:	2180      	movs	r1, #128	@ 0x80
 8002ad4:	487a      	ldr	r0, [pc, #488]	@ (8002cc0 <QTR8_read+0x308>)
 8002ad6:	f7ff fdf9 	bl	80026cc <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8002ada:	2140      	movs	r1, #64	@ 0x40
 8002adc:	4878      	ldr	r0, [pc, #480]	@ (8002cc0 <QTR8_read+0x308>)
 8002ade:	f7ff fdf5 	bl	80026cc <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8002ae2:	2120      	movs	r1, #32
 8002ae4:	4876      	ldr	r0, [pc, #472]	@ (8002cc0 <QTR8_read+0x308>)
 8002ae6:	f7ff fdf1 	bl	80026cc <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8002aea:	2110      	movs	r1, #16
 8002aec:	4874      	ldr	r0, [pc, #464]	@ (8002cc0 <QTR8_read+0x308>)
 8002aee:	f7ff fded 	bl	80026cc <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8002af2:	2104      	movs	r1, #4
 8002af4:	4873      	ldr	r0, [pc, #460]	@ (8002cc4 <QTR8_read+0x30c>)
 8002af6:	f7ff fde9 	bl	80026cc <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8002afa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002afe:	486f      	ldr	r0, [pc, #444]	@ (8002cbc <QTR8_read+0x304>)
 8002b00:	f7ff fde4 	bl	80026cc <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8002b04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b08:	486c      	ldr	r0, [pc, #432]	@ (8002cbc <QTR8_read+0x304>)
 8002b0a:	f7ff fddf 	bl	80026cc <Set_Pin_Input>
	Set_Pin_Input(SENSOR9_GPIO_Port, SENSOR9_Pin);
 8002b0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b12:	486a      	ldr	r0, [pc, #424]	@ (8002cbc <QTR8_read+0x304>)
 8002b14:	f7ff fdda 	bl	80026cc <Set_Pin_Input>
	Set_Pin_Input(SENSOR10_GPIO_Port, SENSOR10_Pin);
 8002b18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b20:	f7ff fdd4 	bl	80026cc <Set_Pin_Input>
	Set_Pin_Input(SENSOR11_GPIO_Port, SENSOR11_Pin);
 8002b24:	2110      	movs	r1, #16
 8002b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b2a:	f7ff fdcf 	bl	80026cc <Set_Pin_Input>
	Set_Pin_Input(SENSOR12_GPIO_Port, SENSOR12_Pin);
 8002b2e:	2120      	movs	r1, #32
 8002b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b34:	f7ff fdca 	bl	80026cc <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 8002b38:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002b3c:	f7ff fd8e 	bl	800265c <delay_us>
//	 uint8_t Message[124];
//	 sprintf((char*)Message,"S1: %d S2: %d S3: %d S4: %d S5: %d S6: %d S7: %d S8: %d S9: %d S10: %d S11: %d S12: %d \n\r", sensory[0],sensory[1],sensory[2],sensory[3],sensory[4],sensory[5],sensory[6],sensory[7],
//			 sensory[8],sensory[9],sensory[10],sensory[11]);
//	 HAL_UART_Transmit(&hlpuart1, Message, strlen((char*)Message), 100);

	Sensors_read = 0x00000000;
 8002b40:	4b61      	ldr	r3, [pc, #388]	@ (8002cc8 <QTR8_read+0x310>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
	int pos = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
  int active = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) { // LEFT SIDE
 8002b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b52:	485b      	ldr	r0, [pc, #364]	@ (8002cc0 <QTR8_read+0x308>)
 8002b54:	f003 fc08 	bl	8006368 <HAL_GPIO_ReadPin>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01c      	beq.n	8002b98 <QTR8_read+0x1e0>
		Sensors_read |= 0x000000000001;
 8002b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc8 <QTR8_read+0x310>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	4a58      	ldr	r2, [pc, #352]	@ (8002cc8 <QTR8_read+0x310>)
 8002b68:	6013      	str	r3, [r2, #0]
		pos += 1000 * SENSOR_SCALE;//1000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002b70:	607b      	str	r3, [r7, #4]
		active++;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	603b      	str	r3, [r7, #0]
		if(HAL_GetTick() > (LastEndTimer + 50))
 8002b78:	f001 fac2 	bl	8004100 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <QTR8_read+0x314>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3332      	adds	r3, #50	@ 0x32
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d907      	bls.n	8002b98 <QTR8_read+0x1e0>
		{
			LastEndTimer = HAL_GetTick();
 8002b88:	f001 faba 	bl	8004100 <HAL_GetTick>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4a4f      	ldr	r2, [pc, #316]	@ (8002ccc <QTR8_read+0x314>)
 8002b90:	6013      	str	r3, [r2, #0]
			Last_end = 1;
 8002b92:	4b4f      	ldr	r3, [pc, #316]	@ (8002cd0 <QTR8_read+0x318>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
		}
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8002b98:	2180      	movs	r1, #128	@ 0x80
 8002b9a:	4849      	ldr	r0, [pc, #292]	@ (8002cc0 <QTR8_read+0x308>)
 8002b9c:	f003 fbe4 	bl	8006368 <HAL_GPIO_ReadPin>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00c      	beq.n	8002bc0 <QTR8_read+0x208>
		Sensors_read |= 0x000000000010;
 8002ba6:	4b48      	ldr	r3, [pc, #288]	@ (8002cc8 <QTR8_read+0x310>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f043 0310 	orr.w	r3, r3, #16
 8002bae:	4a46      	ldr	r2, [pc, #280]	@ (8002cc8 <QTR8_read+0x310>)
 8002bb0:	6013      	str	r3, [r2, #0]
		pos += 2000 * SENSOR_SCALE;//2000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002bb8:	607b      	str	r3, [r7, #4]
    active++;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	603b      	str	r3, [r7, #0]
    	//Last_end = 1;//1
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8002bc0:	2140      	movs	r1, #64	@ 0x40
 8002bc2:	483f      	ldr	r0, [pc, #252]	@ (8002cc0 <QTR8_read+0x308>)
 8002bc4:	f003 fbd0 	bl	8006368 <HAL_GPIO_ReadPin>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00c      	beq.n	8002be8 <QTR8_read+0x230>
		Sensors_read |= 0x000000000100;
 8002bce:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc8 <QTR8_read+0x310>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc8 <QTR8_read+0x310>)
 8002bd8:	6013      	str	r3, [r2, #0]
		pos += 3000 * SENSOR_SCALE;//3000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8002be0:	607b      	str	r3, [r7, #4]
    active++;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	603b      	str	r3, [r7, #0]
    	//Last_end = 1;//1
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8002be8:	2120      	movs	r1, #32
 8002bea:	4835      	ldr	r0, [pc, #212]	@ (8002cc0 <QTR8_read+0x308>)
 8002bec:	f003 fbbc 	bl	8006368 <HAL_GPIO_ReadPin>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00c      	beq.n	8002c10 <QTR8_read+0x258>
		Sensors_read |= 0x000000001000;
 8002bf6:	4b34      	ldr	r3, [pc, #208]	@ (8002cc8 <QTR8_read+0x310>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bfe:	4a32      	ldr	r2, [pc, #200]	@ (8002cc8 <QTR8_read+0x310>)
 8002c00:	6013      	str	r3, [r2, #0]
		pos += 4000 * SENSOR_SCALE;//4000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f503 637a 	add.w	r3, r3, #4000	@ 0xfa0
 8002c08:	607b      	str	r3, [r7, #4]
    active++;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8002c10:	2110      	movs	r1, #16
 8002c12:	482b      	ldr	r0, [pc, #172]	@ (8002cc0 <QTR8_read+0x308>)
 8002c14:	f003 fba8 	bl	8006368 <HAL_GPIO_ReadPin>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00d      	beq.n	8002c3a <QTR8_read+0x282>
		Sensors_read |= 0x000000010000;
 8002c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc8 <QTR8_read+0x310>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c26:	4a28      	ldr	r2, [pc, #160]	@ (8002cc8 <QTR8_read+0x310>)
 8002c28:	6013      	str	r3, [r2, #0]
		pos += 5000 * SENSOR_SCALE;//5000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8002c30:	3308      	adds	r3, #8
 8002c32:	607b      	str	r3, [r7, #4]
    active++;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 8002c3a:	2104      	movs	r1, #4
 8002c3c:	4821      	ldr	r0, [pc, #132]	@ (8002cc4 <QTR8_read+0x30c>)
 8002c3e:	f003 fb93 	bl	8006368 <HAL_GPIO_ReadPin>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <QTR8_read+0x2ac>
		Sensors_read |= 0x000000100000;
 8002c48:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc8 <QTR8_read+0x310>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c50:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc8 <QTR8_read+0x310>)
 8002c52:	6013      	str	r3, [r2, #0]
		pos += 6000 * SENSOR_SCALE;//6000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8002c5a:	3310      	adds	r3, #16
 8002c5c:	607b      	str	r3, [r7, #4]
    active++;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 8002c64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c68:	4814      	ldr	r0, [pc, #80]	@ (8002cbc <QTR8_read+0x304>)
 8002c6a:	f003 fb7d 	bl	8006368 <HAL_GPIO_ReadPin>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00d      	beq.n	8002c90 <QTR8_read+0x2d8>
		Sensors_read |= 0x000001000000;
 8002c74:	4b14      	ldr	r3, [pc, #80]	@ (8002cc8 <QTR8_read+0x310>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c7c:	4a12      	ldr	r2, [pc, #72]	@ (8002cc8 <QTR8_read+0x310>)
 8002c7e:	6013      	str	r3, [r2, #0]
		pos += 7000 * SENSOR_SCALE;//7000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f503 53da 	add.w	r3, r3, #6976	@ 0x1b40
 8002c86:	3318      	adds	r3, #24
 8002c88:	607b      	str	r3, [r7, #4]
    active++;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 8002c90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c94:	4809      	ldr	r0, [pc, #36]	@ (8002cbc <QTR8_read+0x304>)
 8002c96:	f003 fb67 	bl	8006368 <HAL_GPIO_ReadPin>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d019      	beq.n	8002cd4 <QTR8_read+0x31c>
		Sensors_read |= 0x000010000000;
 8002ca0:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <QTR8_read+0x310>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca8:	4a07      	ldr	r2, [pc, #28]	@ (8002cc8 <QTR8_read+0x310>)
 8002caa:	6013      	str	r3, [r2, #0]
		pos += 8000 * SENSOR_SCALE;//8000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 8002cb2:	607b      	str	r3, [r7, #4]
    active++;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	e00b      	b.n	8002cd4 <QTR8_read+0x31c>
 8002cbc:	48000800 	.word	0x48000800
 8002cc0:	48000400 	.word	0x48000400
 8002cc4:	48000c00 	.word	0x48000c00
 8002cc8:	200066f8 	.word	0x200066f8
 8002ccc:	20006750 	.word	0x20006750
 8002cd0:	20006744 	.word	0x20006744
  }
  if (HAL_GPIO_ReadPin(SENSOR9_GPIO_Port, SENSOR9_Pin)) {
 8002cd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002cd8:	4841      	ldr	r0, [pc, #260]	@ (8002de0 <QTR8_read+0x428>)
 8002cda:	f003 fb45 	bl	8006368 <HAL_GPIO_ReadPin>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <QTR8_read+0x344>
	   Sensors_read |= 0x000100000000;
 8002ce4:	4b3f      	ldr	r3, [pc, #252]	@ (8002de4 <QTR8_read+0x42c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8002de4 <QTR8_read+0x42c>)
 8002cea:	6013      	str	r3, [r2, #0]
	   pos += 9000 * SENSOR_SCALE;//8000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8002cf2:	3328      	adds	r3, #40	@ 0x28
 8002cf4:	607b      	str	r3, [r7, #4]
	active++;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	603b      	str	r3, [r7, #0]

  }
  if (HAL_GPIO_ReadPin(SENSOR10_GPIO_Port, SENSOR10_Pin)) {
 8002cfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d04:	f003 fb30 	bl	8006368 <HAL_GPIO_ReadPin>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <QTR8_read+0x36e>
	   Sensors_read |= 0x001000000000;
 8002d0e:	4b35      	ldr	r3, [pc, #212]	@ (8002de4 <QTR8_read+0x42c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a34      	ldr	r2, [pc, #208]	@ (8002de4 <QTR8_read+0x42c>)
 8002d14:	6013      	str	r3, [r2, #0]
	   pos += 10000 * SENSOR_SCALE;//8000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8002d1c:	3310      	adds	r3, #16
 8002d1e:	607b      	str	r3, [r7, #4]
    active++;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	603b      	str	r3, [r7, #0]
	  // Last_end = 0;//0
  }
  if (HAL_GPIO_ReadPin(SENSOR11_GPIO_Port, SENSOR11_Pin)) {
 8002d26:	2110      	movs	r1, #16
 8002d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d2c:	f003 fb1c 	bl	8006368 <HAL_GPIO_ReadPin>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <QTR8_read+0x396>
	   Sensors_read |= 0x010000000000;
 8002d36:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <QTR8_read+0x42c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8002de4 <QTR8_read+0x42c>)
 8002d3c:	6013      	str	r3, [r2, #0]
	   pos += 11000 * SENSOR_SCALE;//8000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8002d44:	3338      	adds	r3, #56	@ 0x38
 8002d46:	607b      	str	r3, [r7, #4]
    active++;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	603b      	str	r3, [r7, #0]
	  // Last_end = 0;//0
  }
  if (HAL_GPIO_ReadPin(SENSOR12_GPIO_Port, SENSOR12_Pin)) { // RIGH SIDE
 8002d4e:	2120      	movs	r1, #32
 8002d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d54:	f003 fb08 	bl	8006368 <HAL_GPIO_ReadPin>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01b      	beq.n	8002d96 <QTR8_read+0x3de>
	   Sensors_read |= 0x100000000000;
 8002d5e:	4b21      	ldr	r3, [pc, #132]	@ (8002de4 <QTR8_read+0x42c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a20      	ldr	r2, [pc, #128]	@ (8002de4 <QTR8_read+0x42c>)
 8002d64:	6013      	str	r3, [r2, #0]
	   pos += 12000 * SENSOR_SCALE;//8000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8002d6c:	3320      	adds	r3, #32
 8002d6e:	607b      	str	r3, [r7, #4]
       active++;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	603b      	str	r3, [r7, #0]

        if(HAL_GetTick() > (LastEndTimer + 50))
 8002d76:	f001 f9c3 	bl	8004100 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <QTR8_read+0x430>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3332      	adds	r3, #50	@ 0x32
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d907      	bls.n	8002d96 <QTR8_read+0x3de>
		{
			LastEndTimer = HAL_GetTick();
 8002d86:	f001 f9bb 	bl	8004100 <HAL_GetTick>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <QTR8_read+0x430>)
 8002d8e:	6013      	str	r3, [r2, #0]
			Last_end = 0;
 8002d90:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <QTR8_read+0x434>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
		}
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d9c:	4810      	ldr	r0, [pc, #64]	@ (8002de0 <QTR8_read+0x428>)
 8002d9e:	f003 fafb 	bl	8006398 <HAL_GPIO_WritePin>

  actives = active;
 8002da2:	4a13      	ldr	r2, [pc, #76]	@ (8002df0 <QTR8_read+0x438>)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6013      	str	r3, [r2, #0]
	Position = pos/active;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	fb92 f3f3 	sdiv	r3, r2, r3
 8002db0:	4a10      	ldr	r2, [pc, #64]	@ (8002df4 <QTR8_read+0x43c>)
 8002db2:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 8002db4:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <QTR8_read+0x438>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <QTR8_read+0x410>
		Last_idle++;
 8002dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002df8 <QTR8_read+0x440>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8002df8 <QTR8_read+0x440>)
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e002      	b.n	8002dce <QTR8_read+0x416>
	else
		Last_idle = 0;
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <QTR8_read+0x440>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

	return pos/active;
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	48000800 	.word	0x48000800
 8002de4:	200066f8 	.word	0x200066f8
 8002de8:	20006750 	.word	0x20006750
 8002dec:	20006744 	.word	0x20006744
 8002df0:	2000674c 	.word	0x2000674c
 8002df4:	200066fc 	.word	0x200066fc
 8002df8:	20006748 	.word	0x20006748

08002dfc <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 8002dfc:	b5b0      	push	{r4, r5, r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 8002e06:	4b0d      	ldr	r3, [pc, #52]	@ (8002e3c <forward_brake+0x40>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <forward_brake+0x18>
		sharp_turn();
 8002e0e:	f7ff fd69 	bl	80028e4 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 8002e12:	e00f      	b.n	8002e34 <forward_brake+0x38>
	  motor_control(pos_right, pos_left);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7fd fbbd 	bl	8000594 <__aeabi_i2d>
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	460d      	mov	r5, r1
 8002e1e:	6838      	ldr	r0, [r7, #0]
 8002e20:	f7fd fbb8 	bl	8000594 <__aeabi_i2d>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	ec43 2b11 	vmov	d1, r2, r3
 8002e2c:	ec45 4b10 	vmov	d0, r4, r5
 8002e30:	f7ff fc6a 	bl	8002708 <motor_control>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e3c:	2000674c 	.word	0x2000674c

08002e40 <past_errors>:

void past_errors (int error)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 8002e48:	2309      	movs	r3, #9
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e00b      	b.n	8002e66 <past_errors+0x26>
      Errors[i] = Errors[i-1];
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	4a0b      	ldr	r2, [pc, #44]	@ (8002e80 <past_errors+0x40>)
 8002e54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e58:	4909      	ldr	r1, [pc, #36]	@ (8002e80 <past_errors+0x40>)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	dcf0      	bgt.n	8002e4e <past_errors+0xe>
  Errors[0] = error;
 8002e6c:	4a04      	ldr	r2, [pc, #16]	@ (8002e80 <past_errors+0x40>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6013      	str	r3, [r2, #0]
}
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	2000671c 	.word	0x2000671c

08002e84 <errors_sum>:

int errors_sum (int index, int abs)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  int sum = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	e01a      	b.n	8002ece <errors_sum+0x4a>
  {
    if (abs == 1 && Errors[i] < 0)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10d      	bne.n	8002eba <errors_sum+0x36>
 8002e9e:	4a11      	ldr	r2, [pc, #68]	@ (8002ee4 <errors_sum+0x60>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da07      	bge.n	8002eba <errors_sum+0x36>
      sum += -Errors[i];
 8002eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8002ee4 <errors_sum+0x60>)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e006      	b.n	8002ec8 <errors_sum+0x44>
    else
      sum += Errors[i];
 8002eba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee4 <errors_sum+0x60>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	dbe0      	blt.n	8002e98 <errors_sum+0x14>
  }
  return sum;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	2000671c 	.word	0x2000671c

08002ee8 <PID_control>:

void PID_control()
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 8002eee:	f7ff fd63 	bl	80029b8 <QTR8_read>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	81fb      	strh	r3, [r7, #14]
  int error = (6500 * SENSOR_SCALE) - position;
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	f5c3 53cb 	rsb	r3, r3, #6496	@ 0x1960
 8002efc:	3304      	adds	r3, #4
 8002efe:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8002f00:	68b8      	ldr	r0, [r7, #8]
 8002f02:	f7ff ff9d 	bl	8002e40 <past_errors>

  P = error;
 8002f06:	4a48      	ldr	r2, [pc, #288]	@ (8003028 <PID_control+0x140>)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	2005      	movs	r0, #5
 8002f10:	f7ff ffb8 	bl	8002e84 <errors_sum>
 8002f14:	4603      	mov	r3, r0
 8002f16:	4a45      	ldr	r2, [pc, #276]	@ (800302c <PID_control+0x144>)
 8002f18:	6013      	str	r3, [r2, #0]
  D = error - Last_error;
 8002f1a:	4b45      	ldr	r3, [pc, #276]	@ (8003030 <PID_control+0x148>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	4a44      	ldr	r2, [pc, #272]	@ (8003034 <PID_control+0x14c>)
 8002f24:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 8002f26:	2101      	movs	r1, #1
 8002f28:	2005      	movs	r0, #5
 8002f2a:	f7ff ffab 	bl	8002e84 <errors_sum>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4a41      	ldr	r2, [pc, #260]	@ (8003038 <PID_control+0x150>)
 8002f32:	6013      	str	r3, [r2, #0]
  Last_error = error;
 8002f34:	4a3e      	ldr	r2, [pc, #248]	@ (8003030 <PID_control+0x148>)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	6013      	str	r3, [r2, #0]

  int motorspeed = P*GRUZIK.Kp + I*Ki + D*GRUZIK.Kd;
 8002f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003028 <PID_control+0x140>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f46:	4b3d      	ldr	r3, [pc, #244]	@ (800303c <PID_control+0x154>)
 8002f48:	edd3 7a00 	vldr	s15, [r3]
 8002f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f50:	4b36      	ldr	r3, [pc, #216]	@ (800302c <PID_control+0x144>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	ee07 3a90 	vmov	s15, r3
 8002f58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f5c:	4b38      	ldr	r3, [pc, #224]	@ (8003040 <PID_control+0x158>)
 8002f5e:	edd3 7a00 	vldr	s15, [r3]
 8002f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f6a:	4b32      	ldr	r3, [pc, #200]	@ (8003034 <PID_control+0x14c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f76:	4b31      	ldr	r3, [pc, #196]	@ (800303c <PID_control+0x154>)
 8002f78:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f88:	ee17 3a90 	vmov	r3, s15
 8002f8c:	607b      	str	r3, [r7, #4]

  int motorspeedl = GRUZIK.Base_speed_L + motorspeed - R*Kr;
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800303c <PID_control+0x154>)
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f9e:	4b26      	ldr	r3, [pc, #152]	@ (8003038 <PID_control+0x150>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002faa:	4b26      	ldr	r3, [pc, #152]	@ (8003044 <PID_control+0x15c>)
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fbc:	ee17 3a90 	vmov	r3, s15
 8002fc0:	617b      	str	r3, [r7, #20]
  int motorspeedr = GRUZIK.Base_speed_R - motorspeed - R*Kr;
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800303c <PID_control+0x154>)
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fd2:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <PID_control+0x150>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002fde:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <PID_control+0x15c>)
 8002fe0:	edd3 7a00 	vldr	s15, [r3]
 8002fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ff0:	ee17 3a90 	vmov	r3, s15
 8002ff4:	613b      	str	r3, [r7, #16]

  if (motorspeedl > GRUZIK.Max_speed_L)
 8002ff6:	4b11      	ldr	r3, [pc, #68]	@ (800303c <PID_control+0x154>)
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	dd02      	ble.n	8003006 <PID_control+0x11e>
    motorspeedl = GRUZIK.Max_speed_L;
 8003000:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <PID_control+0x154>)
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	617b      	str	r3, [r7, #20]
  if (motorspeedr > GRUZIK.Max_speed_R)
 8003006:	4b0d      	ldr	r3, [pc, #52]	@ (800303c <PID_control+0x154>)
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	429a      	cmp	r2, r3
 800300e:	dd02      	ble.n	8003016 <PID_control+0x12e>
    motorspeedr = GRUZIK.Max_speed_R;
 8003010:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <PID_control+0x154>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	613b      	str	r3, [r7, #16]

	forward_brake(motorspeedr, motorspeedl);
 8003016:	6979      	ldr	r1, [r7, #20]
 8003018:	6938      	ldr	r0, [r7, #16]
 800301a:	f7ff feef 	bl	8002dfc <forward_brake>
}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20006708 	.word	0x20006708
 800302c:	2000670c 	.word	0x2000670c
 8003030:	20006718 	.word	0x20006718
 8003034:	20006710 	.word	0x20006710
 8003038:	20006714 	.word	0x20006714
 800303c:	20006588 	.word	0x20006588
 8003040:	20006700 	.word	0x20006700
 8003044:	20006704 	.word	0x20006704

08003048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800304c:	b672      	cpsid	i
}
 800304e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003050:	bf00      	nop
 8003052:	e7fd      	b.n	8003050 <Error_Handler+0x8>

08003054 <MapUpdate>:
extern FRESULT FatFsResult;
extern FATFS SdFatFs;
extern FIL SdCardFile;

void MapUpdate(Map_t *map, motor_t *MotorLeft, motor_t *MotorRight)
{
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	ed2d 8b02 	vpush	{d8}
 800305a:	b0a2      	sub	sp, #136	@ 0x88
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
	if(map->Mapping == 1)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	f040 80d7 	bne.w	800321c <MapUpdate+0x1c8>
	{
		uint8_t buffer[100];
		//static int i;
		//(2.11) -- Translation In Measurement
		float Ti = (MotorLeft->LpfDistanceInMeasurement + MotorRight->LpfDistanceInMeasurement) / 2;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800307a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800307e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003086:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
		//(2.12) -- Rotation In Measurement
		float Ri = (MotorRight->LpfDistanceInMeasurement - MotorLeft->LpfDistanceInMeasurement) / MAIN_PCB_LENGTH;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003096:	ee37 7a67 	vsub.f32	s14, s14, s15
 800309a:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8003228 <MapUpdate+0x1d4>
 800309e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030a2:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

		//(2.13) -- Main PCB Position
		map->Xri = map->Xri + (Ti * cosf(map->Ori));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80030ac:	f603 53cc 	addw	r3, r3, #3532	@ 0xdcc
 80030b0:	ed93 8a00 	vldr	s16, [r3]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80030ba:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	eeb0 0a67 	vmov.f32	s0, s15
 80030c6:	f00f ffd7 	bl	8013078 <cosf>
 80030ca:	eeb0 7a40 	vmov.f32	s14, s0
 80030ce:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80030d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80030e0:	f603 53cc 	addw	r3, r3, #3532	@ 0xdcc
 80030e4:	edc3 7a00 	vstr	s15, [r3]
		map->Yri = map->Yri + (Ti * sinf(map->Ori));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80030ee:	f603 53d4 	addw	r3, r3, #3540	@ 0xdd4
 80030f2:	ed93 8a00 	vldr	s16, [r3]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80030fc:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8003100:	edd3 7a00 	vldr	s15, [r3]
 8003104:	eeb0 0a67 	vmov.f32	s0, s15
 8003108:	f00f fffa 	bl	8013100 <sinf>
 800310c:	eeb0 7a40 	vmov.f32	s14, s0
 8003110:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003118:	ee78 7a27 	vadd.f32	s15, s16, s15
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003122:	f603 53d4 	addw	r3, r3, #3540	@ 0xdd4
 8003126:	edc3 7a00 	vstr	s15, [r3]
		map->Ori = map->Ori + Ri;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003130:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8003134:	ed93 7a00 	vldr	s14, [r3]
 8003138:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800313c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003146:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 800314a:	edc3 7a00 	vstr	s15, [r3]

		//(2.17) -- Sensor Position
		map->Pci[0] = map->Xri + (MAIN_TO_SENSOR_LENGTH * cosf(map->Ori));
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003154:	f603 53cc 	addw	r3, r3, #3532	@ 0xdcc
 8003158:	ed93 8a00 	vldr	s16, [r3]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003162:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8003166:	edd3 7a00 	vldr	s15, [r3]
 800316a:	eeb0 0a67 	vmov.f32	s0, s15
 800316e:	f00f ff83 	bl	8013078 <cosf>
 8003172:	eef0 7a40 	vmov.f32	s15, s0
 8003176:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800322c <MapUpdate+0x1d8>
 800317a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800317e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003188:	f503 635f 	add.w	r3, r3, #3568	@ 0xdf0
 800318c:	edc3 7a00 	vstr	s15, [r3]
		map->Pci[1] = map->Yri + (MAIN_TO_SENSOR_LENGTH * sinf(map->Ori));
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8003196:	f603 53d4 	addw	r3, r3, #3540	@ 0xdd4
 800319a:	ed93 8a00 	vldr	s16, [r3]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80031a4:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 80031a8:	edd3 7a00 	vldr	s15, [r3]
 80031ac:	eeb0 0a67 	vmov.f32	s0, s15
 80031b0:	f00f ffa6 	bl	8013100 <sinf>
 80031b4:	eef0 7a40 	vmov.f32	s15, s0
 80031b8:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800322c <MapUpdate+0x1d8>
 80031bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80031ca:	f603 53f4 	addw	r3, r3, #3572	@ 0xdf4
 80031ce:	edc3 7a00 	vstr	s15, [r3]


		sprintf((char*)buffer, " %0.3f	%0.3f \n", map->Xri, map->Yri);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80031d8:	f603 53cc 	addw	r3, r3, #3532	@ 0xdcc
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f9ea 	bl	80005b8 <__aeabi_f2d>
 80031e4:	4604      	mov	r4, r0
 80031e6:	460d      	mov	r5, r1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80031ee:	f603 53d4 	addw	r3, r3, #3540	@ 0xdd4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f9df 	bl	80005b8 <__aeabi_f2d>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	f107 0014 	add.w	r0, r7, #20
 8003202:	e9cd 2300 	strd	r2, r3, [sp]
 8003206:	4622      	mov	r2, r4
 8003208:	462b      	mov	r3, r5
 800320a:	4909      	ldr	r1, [pc, #36]	@ (8003230 <MapUpdate+0x1dc>)
 800320c:	f00d f926 	bl	801045c <siprintf>
		f_printf(&SdCardFile, (char*)buffer);
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	4619      	mov	r1, r3
 8003216:	4807      	ldr	r0, [pc, #28]	@ (8003234 <MapUpdate+0x1e0>)
 8003218:	f00b fb7c 	bl	800e914 <f_printf>
	}
}
 800321c:	bf00      	nop
 800321e:	3780      	adds	r7, #128	@ 0x80
 8003220:	46bd      	mov	sp, r7
 8003222:	ecbd 8b02 	vpop	{d8}
 8003226:	bdb0      	pop	{r4, r5, r7, pc}
 8003228:	3e1eb852 	.word	0x3e1eb852
 800322c:	3e23d70a 	.word	0x3e23d70a
 8003230:	08013ca4 	.word	0x08013ca4
 8003234:	20006358 	.word	0x20006358

08003238 <Motor_CalculateSpeed>:

#include "main.h"
#include "motor.h"
#include "LowPassFilter.h"
void Motor_CalculateSpeed(motor_t *motor)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	//How many impulses did we get ?
	int impulses;
	impulses = ((int32_t)motor->EncoderValue - (int32_t)motor->EncoderPreviousValue) * -1;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	461a      	mov	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	60fb      	str	r3, [r7, #12]

	/*Distance traveled in 0.001s (One cycle)*/
	if(impulses < 0)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	da01      	bge.n	8003258 <Motor_CalculateSpeed+0x20>
	{
		//impulses = impulses * -1;
		impulses = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
		//TODO: zastanow sie czy tu tez tego ci trzeba czy nie ogarniesz w dwie strony
	}
	motor->DistanceInMeasurement = ((float)impulses * WHEEL_CIRCUMFERENCE) / (IMPULSES_PER_ROTATION * GEAR_RATIO);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003262:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800338c <Motor_CalculateSpeed+0x154>
 8003266:	ee27 7a87 	vmul.f32	s14, s15, s14
 800326a:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8003390 <Motor_CalculateSpeed+0x158>
 800326e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	/*Whole distance wheel has traveled*/
	motor->DistanceTraveled = motor->DistanceTraveled + motor->DistanceInMeasurement;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	/*Get meters per second*/
	/* m/s = m/ms * 1000 */
	motor->MetersPerSecond = motor->DistanceInMeasurement * -1000.0f; // 1s = 1000ms
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003294:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003394 <Motor_CalculateSpeed+0x15c>
 8003298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	LowPassFilter_Update(&motor->MetersPerSecondLPF, motor->MetersPerSecond);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80032ae:	eeb0 0a67 	vmov.f32	s0, s15
 80032b2:	4610      	mov	r0, r2
 80032b4:	f7fd fedd 	bl	8001072 <LowPassFilter_Update>

	motor->LpfDistanceInMeasurement = motor->MetersPerSecondLPF.output / -1000.0f;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80032be:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8003394 <Motor_CalculateSpeed+0x15c>
 80032c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48


    //How many times motor has rotated ?
	motor->NumberOfRotations = (float)impulses / 20000.0f;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032d6:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8003390 <Motor_CalculateSpeed+0x158>
 80032da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	//Rotations per minute based on period and impulses
	motor->RPM = motor->NumberOfRotations * -60000.0f; //rotates per minute
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80032ea:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8003398 <Motor_CalculateSpeed+0x160>
 80032ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	edc3 7a02 	vstr	s15, [r3, #8]

	/*I know some of them are "magic values" other way it doesn't want to work*/

	if((motor->RPM >= 5000) || (motor->RPM <= -5000)) // |max| = 5000 Other readings are trash
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80032fe:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800339c <Motor_CalculateSpeed+0x164>
 8003302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330a:	da09      	bge.n	8003320 <Motor_CalculateSpeed+0xe8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003312:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80033a0 <Motor_CalculateSpeed+0x168>
 8003316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331e:	d803      	bhi.n	8003328 <Motor_CalculateSpeed+0xf0>
	{
		motor->RPM = motor->PreviousRPM;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]
	}
	//Motor_SavePreviousRPMs(motor, motor->RPM);
	LowPassFilter_Update(&motor->EncoderRpmFilter, motor->RPM);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	edd3 7a02 	vldr	s15, [r3, #8]
 8003334:	eeb0 0a67 	vmov.f32	s0, s15
 8003338:	4610      	mov	r0, r2
 800333a:	f7fd fe9a 	bl	8001072 <LowPassFilter_Update>
	motor->MetersPerHour = motor->EncoderRpmFilter.output / RPM_TO_MH;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003344:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80033a4 <Motor_CalculateSpeed+0x16c>
 8003348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	//motor->MetersPerHour = motor->RPM / RPM_TO_MH;
	motor->KilometersPerHour = motor->MetersPerHour / 1000;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003358:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80033a8 <Motor_CalculateSpeed+0x170>
 800335c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	motor->MetersPerSecond = motor->MetersPerHour / 3600;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800336c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80033ac <Motor_CalculateSpeed+0x174>
 8003370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	motor->PreviousRPM = motor->EncoderRpmFilter.output;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	60da      	str	r2, [r3, #12]
}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	3da3d70a 	.word	0x3da3d70a
 8003390:	469c4000 	.word	0x469c4000
 8003394:	c47a0000 	.word	0xc47a0000
 8003398:	c76a6000 	.word	0xc76a6000
 800339c:	459c4000 	.word	0x459c4000
 80033a0:	c59c4000 	.word	0xc59c4000
 80033a4:	3e555555 	.word	0x3e555555
 80033a8:	447a0000 	.word	0x447a0000
 80033ac:	45610000 	.word	0x45610000

080033b0 <Motor_Init>:

void Motor_Init(motor_t *motor, float Kp, float Ki)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80033bc:	edc7 0a01 	vstr	s1, [r7, #4]
	motor->kp = Kp;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	motor->ki = Ki;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	motor->MetersPerSecondLPF.alpha = 0.9;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a04      	ldr	r2, [pc, #16]	@ (80033e4 <Motor_Init+0x34>)
 80033d4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	3f666666 	.word	0x3f666666

080033e8 <PI_Loop>:

void PI_Loop(motor_t *motor)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	motor->current_speed = motor->MetersPerSecond * 23; // From m/s to bananas per second //65
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80033f6:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 80033fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

	//Get absolute speed
	if(motor->current_speed < 0)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800340a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800340e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003412:	d507      	bpl.n	8003424 <PI_Loop+0x3c>
	{
		motor->current_speed = motor->current_speed * -1;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800341a:	eef1 7a67 	vneg.f32	s15, s15
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		//Zastanów się czy faktycznie to jest potrzebne
	}

	//Get the difference between speed that we need and actual speed
	motor->error =  motor->set_speed - motor->current_speed;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

	//Add current error to previous errors
	motor->Error_sum = motor->Error_sum +motor->P;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8003446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
	if(motor->Error_sum > 100)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8003456:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80034cc <PI_Loop+0xe4>
 800345a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003462:	dd04      	ble.n	800346e <PI_Loop+0x86>
	{
		motor->Error_sum = 100;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a1a      	ldr	r2, [pc, #104]	@ (80034d0 <PI_Loop+0xe8>)
 8003468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800346c:	e00d      	b.n	800348a <PI_Loop+0xa2>
	}
	else if(motor->Error_sum < -100)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8003474:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80034d4 <PI_Loop+0xec>
 8003478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003480:	d503      	bpl.n	800348a <PI_Loop+0xa2>
	{
		motor->Error_sum = -100;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a14      	ldr	r2, [pc, #80]	@ (80034d8 <PI_Loop+0xf0>)
 8003486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	}

	//Calculate new speed with PI parameters
	motor->speed = motor->set_speed + (motor->error * motor->kp) + (motor->Error_sum *motor->ki);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800349c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	edd3 6a22 	vldr	s13, [r3, #136]	@ 0x88
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 80034b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	42c80000 	.word	0x42c80000
 80034d0:	42c80000 	.word	0x42c80000
 80034d4:	c2c80000 	.word	0xc2c80000
 80034d8:	c2c80000 	.word	0xc2c80000

080034dc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80034e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003550 <MX_SPI2_Init+0x74>)
 80034e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003554 <MX_SPI2_Init+0x78>)
 80034e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003550 <MX_SPI2_Init+0x74>)
 80034e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034ee:	4b18      	ldr	r3, [pc, #96]	@ (8003550 <MX_SPI2_Init+0x74>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80034f4:	4b16      	ldr	r3, [pc, #88]	@ (8003550 <MX_SPI2_Init+0x74>)
 80034f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80034fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034fc:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <MX_SPI2_Init+0x74>)
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003502:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <MX_SPI2_Init+0x74>)
 8003504:	2200      	movs	r2, #0
 8003506:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <MX_SPI2_Init+0x74>)
 800350a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800350e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003510:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <MX_SPI2_Init+0x74>)
 8003512:	2238      	movs	r2, #56	@ 0x38
 8003514:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003516:	4b0e      	ldr	r3, [pc, #56]	@ (8003550 <MX_SPI2_Init+0x74>)
 8003518:	2200      	movs	r2, #0
 800351a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800351c:	4b0c      	ldr	r3, [pc, #48]	@ (8003550 <MX_SPI2_Init+0x74>)
 800351e:	2200      	movs	r2, #0
 8003520:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003522:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <MX_SPI2_Init+0x74>)
 8003524:	2200      	movs	r2, #0
 8003526:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003528:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <MX_SPI2_Init+0x74>)
 800352a:	2207      	movs	r2, #7
 800352c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800352e:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <MX_SPI2_Init+0x74>)
 8003530:	2200      	movs	r2, #0
 8003532:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003534:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <MX_SPI2_Init+0x74>)
 8003536:	2208      	movs	r2, #8
 8003538:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800353a:	4805      	ldr	r0, [pc, #20]	@ (8003550 <MX_SPI2_Init+0x74>)
 800353c:	f004 f8b6 	bl	80076ac <HAL_SPI_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003546:	f7ff fd7f 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200067c0 	.word	0x200067c0
 8003554:	40003800 	.word	0x40003800

08003558 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	@ 0x28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a17      	ldr	r2, [pc, #92]	@ (80035d4 <HAL_SPI_MspInit+0x7c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d128      	bne.n	80035cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800357a:	4b17      	ldr	r3, [pc, #92]	@ (80035d8 <HAL_SPI_MspInit+0x80>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	4a16      	ldr	r2, [pc, #88]	@ (80035d8 <HAL_SPI_MspInit+0x80>)
 8003580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003584:	6593      	str	r3, [r2, #88]	@ 0x58
 8003586:	4b14      	ldr	r3, [pc, #80]	@ (80035d8 <HAL_SPI_MspInit+0x80>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003592:	4b11      	ldr	r3, [pc, #68]	@ (80035d8 <HAL_SPI_MspInit+0x80>)
 8003594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003596:	4a10      	ldr	r2, [pc, #64]	@ (80035d8 <HAL_SPI_MspInit+0x80>)
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800359e:	4b0e      	ldr	r3, [pc, #56]	@ (80035d8 <HAL_SPI_MspInit+0x80>)
 80035a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80035aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80035ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b0:	2302      	movs	r3, #2
 80035b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b8:	2300      	movs	r3, #0
 80035ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035bc:	2305      	movs	r3, #5
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	4619      	mov	r1, r3
 80035c6:	4805      	ldr	r0, [pc, #20]	@ (80035dc <HAL_SPI_MspInit+0x84>)
 80035c8:	f002 fd4c 	bl	8006064 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80035cc:	bf00      	nop
 80035ce:	3728      	adds	r7, #40	@ 0x28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40003800 	.word	0x40003800
 80035d8:	40021000 	.word	0x40021000
 80035dc:	48000400 	.word	0x48000400

080035e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003624 <HAL_MspInit+0x44>)
 80035e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003624 <HAL_MspInit+0x44>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80035f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003624 <HAL_MspInit+0x44>)
 80035f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <HAL_MspInit+0x44>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003602:	4a08      	ldr	r2, [pc, #32]	@ (8003624 <HAL_MspInit+0x44>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003608:	6593      	str	r3, [r2, #88]	@ 0x58
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <HAL_MspInit+0x44>)
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003616:	f003 f8bd 	bl	8006794 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40021000 	.word	0x40021000

08003628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800362c:	bf00      	nop
 800362e:	e7fd      	b.n	800362c <NMI_Handler+0x4>

08003630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <HardFault_Handler+0x4>

08003638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <MemManage_Handler+0x4>

08003640 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003644:	bf00      	nop
 8003646:	e7fd      	b.n	8003644 <BusFault_Handler+0x4>

08003648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800364c:	bf00      	nop
 800364e:	e7fd      	b.n	800364c <UsageFault_Handler+0x4>

08003650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800367e:	f000 fd2d 	bl	80040dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800368c:	4802      	ldr	r0, [pc, #8]	@ (8003698 <DMA1_Channel1_IRQHandler+0x10>)
 800368e:	f002 fb9a 	bl	8005dc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000278 	.word	0x20000278

0800369c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80036a0:	4802      	ldr	r0, [pc, #8]	@ (80036ac <DMA1_Channel2_IRQHandler+0x10>)
 80036a2:	f002 fb90 	bl	8005dc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	200069a4 	.word	0x200069a4

080036b0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80036b4:	4802      	ldr	r0, [pc, #8]	@ (80036c0 <TIM5_IRQHandler+0x10>)
 80036b6:	f004 ff9f 	bl	80085f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20006958 	.word	0x20006958

080036c4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80036c8:	4802      	ldr	r0, [pc, #8]	@ (80036d4 <LPUART1_IRQHandler+0x10>)
 80036ca:	f006 f9dd 	bl	8009a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20006a04 	.word	0x20006a04

080036d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return 1;
 80036dc:	2301      	movs	r3, #1
}
 80036de:	4618      	mov	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <_kill>:

int _kill(int pid, int sig)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036f2:	f00c ffd7 	bl	80106a4 <__errno>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2216      	movs	r2, #22
 80036fa:	601a      	str	r2, [r3, #0]
  return -1;
 80036fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <_exit>:

void _exit (int status)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003710:	f04f 31ff 	mov.w	r1, #4294967295
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ffe7 	bl	80036e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800371a:	bf00      	nop
 800371c:	e7fd      	b.n	800371a <_exit+0x12>

0800371e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	e00a      	b.n	8003746 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003730:	f3af 8000 	nop.w
 8003734:	4601      	mov	r1, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	60ba      	str	r2, [r7, #8]
 800373c:	b2ca      	uxtb	r2, r1
 800373e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3301      	adds	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	429a      	cmp	r2, r3
 800374c:	dbf0      	blt.n	8003730 <_read+0x12>
  }

  return len;
 800374e:	687b      	ldr	r3, [r7, #4]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e009      	b.n	800377e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	60ba      	str	r2, [r7, #8]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	3301      	adds	r3, #1
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	dbf1      	blt.n	800376a <_write+0x12>
  }
  return len;
 8003786:	687b      	ldr	r3, [r7, #4]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <_close>:

int _close(int file)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037b8:	605a      	str	r2, [r3, #4]
  return 0;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <_isatty>:

int _isatty(int file)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037d0:	2301      	movs	r3, #1
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003800:	4a14      	ldr	r2, [pc, #80]	@ (8003854 <_sbrk+0x5c>)
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <_sbrk+0x60>)
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800380c:	4b13      	ldr	r3, [pc, #76]	@ (800385c <_sbrk+0x64>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d102      	bne.n	800381a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003814:	4b11      	ldr	r3, [pc, #68]	@ (800385c <_sbrk+0x64>)
 8003816:	4a12      	ldr	r2, [pc, #72]	@ (8003860 <_sbrk+0x68>)
 8003818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800381a:	4b10      	ldr	r3, [pc, #64]	@ (800385c <_sbrk+0x64>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	429a      	cmp	r2, r3
 8003826:	d207      	bcs.n	8003838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003828:	f00c ff3c 	bl	80106a4 <__errno>
 800382c:	4603      	mov	r3, r0
 800382e:	220c      	movs	r2, #12
 8003830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	e009      	b.n	800384c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003838:	4b08      	ldr	r3, [pc, #32]	@ (800385c <_sbrk+0x64>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800383e:	4b07      	ldr	r3, [pc, #28]	@ (800385c <_sbrk+0x64>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	4a05      	ldr	r2, [pc, #20]	@ (800385c <_sbrk+0x64>)
 8003848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20020000 	.word	0x20020000
 8003858:	00000400 	.word	0x00000400
 800385c:	20006824 	.word	0x20006824
 8003860:	20006c30 	.word	0x20006c30

08003864 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003868:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <SystemInit+0x20>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386e:	4a05      	ldr	r2, [pc, #20]	@ (8003884 <SystemInit+0x20>)
 8003870:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003874:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim4_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08c      	sub	sp, #48	@ 0x30
 800388c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800388e:	f107 030c 	add.w	r3, r7, #12
 8003892:	2224      	movs	r2, #36	@ 0x24
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f00c fe43 	bl	8010522 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800389c:	463b      	mov	r3, r7
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038a6:	4b23      	ldr	r3, [pc, #140]	@ (8003934 <MX_TIM1_Init+0xac>)
 80038a8:	4a23      	ldr	r2, [pc, #140]	@ (8003938 <MX_TIM1_Init+0xb0>)
 80038aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80038ac:	4b21      	ldr	r3, [pc, #132]	@ (8003934 <MX_TIM1_Init+0xac>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b2:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <MX_TIM1_Init+0xac>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80038b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <MX_TIM1_Init+0xac>)
 80038ba:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80038be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003934 <MX_TIM1_Init+0xac>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80038c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003934 <MX_TIM1_Init+0xac>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038cc:	4b19      	ldr	r3, [pc, #100]	@ (8003934 <MX_TIM1_Init+0xac>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80038d2:	2303      	movs	r3, #3
 80038d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038da:	2301      	movs	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038e6:	2300      	movs	r3, #0
 80038e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038ea:	2301      	movs	r3, #1
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80038f6:	f107 030c 	add.w	r3, r7, #12
 80038fa:	4619      	mov	r1, r3
 80038fc:	480d      	ldr	r0, [pc, #52]	@ (8003934 <MX_TIM1_Init+0xac>)
 80038fe:	f004 fd47 	bl	8008390 <HAL_TIM_Encoder_Init>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003908:	f7ff fb9e 	bl	8003048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800390c:	2300      	movs	r3, #0
 800390e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003910:	2300      	movs	r3, #0
 8003912:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003914:	2300      	movs	r3, #0
 8003916:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003918:	463b      	mov	r3, r7
 800391a:	4619      	mov	r1, r3
 800391c:	4805      	ldr	r0, [pc, #20]	@ (8003934 <MX_TIM1_Init+0xac>)
 800391e:	f005 fead 	bl	800967c <HAL_TIMEx_MasterConfigSynchronization>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003928:	f7ff fb8e 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800392c:	bf00      	nop
 800392e:	3730      	adds	r7, #48	@ 0x30
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20006828 	.word	0x20006828
 8003938:	40012c00 	.word	0x40012c00

0800393c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08e      	sub	sp, #56	@ 0x38
 8003940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003942:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003950:	f107 031c 	add.w	r3, r7, #28
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800395c:	463b      	mov	r3, r7
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	611a      	str	r2, [r3, #16]
 800396a:	615a      	str	r2, [r3, #20]
 800396c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800396e:	4b33      	ldr	r3, [pc, #204]	@ (8003a3c <MX_TIM2_Init+0x100>)
 8003970:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003974:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003976:	4b31      	ldr	r3, [pc, #196]	@ (8003a3c <MX_TIM2_Init+0x100>)
 8003978:	22a9      	movs	r2, #169	@ 0xa9
 800397a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800397c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a3c <MX_TIM2_Init+0x100>)
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003982:	4b2e      	ldr	r3, [pc, #184]	@ (8003a3c <MX_TIM2_Init+0x100>)
 8003984:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003988:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800398a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a3c <MX_TIM2_Init+0x100>)
 800398c:	2200      	movs	r2, #0
 800398e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003990:	4b2a      	ldr	r3, [pc, #168]	@ (8003a3c <MX_TIM2_Init+0x100>)
 8003992:	2200      	movs	r2, #0
 8003994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003996:	4829      	ldr	r0, [pc, #164]	@ (8003a3c <MX_TIM2_Init+0x100>)
 8003998:	f004 fab6 	bl	8007f08 <HAL_TIM_Base_Init>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80039a2:	f7ff fb51 	bl	8003048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039b0:	4619      	mov	r1, r3
 80039b2:	4822      	ldr	r0, [pc, #136]	@ (8003a3c <MX_TIM2_Init+0x100>)
 80039b4:	f005 f884 	bl	8008ac0 <HAL_TIM_ConfigClockSource>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80039be:	f7ff fb43 	bl	8003048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80039c2:	481e      	ldr	r0, [pc, #120]	@ (8003a3c <MX_TIM2_Init+0x100>)
 80039c4:	f004 fb70 	bl	80080a8 <HAL_TIM_PWM_Init>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80039ce:	f7ff fb3b 	bl	8003048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039da:	f107 031c 	add.w	r3, r7, #28
 80039de:	4619      	mov	r1, r3
 80039e0:	4816      	ldr	r0, [pc, #88]	@ (8003a3c <MX_TIM2_Init+0x100>)
 80039e2:	f005 fe4b 	bl	800967c <HAL_TIMEx_MasterConfigSynchronization>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80039ec:	f7ff fb2c 	bl	8003048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039f0:	2360      	movs	r3, #96	@ 0x60
 80039f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a00:	463b      	mov	r3, r7
 8003a02:	2200      	movs	r2, #0
 8003a04:	4619      	mov	r1, r3
 8003a06:	480d      	ldr	r0, [pc, #52]	@ (8003a3c <MX_TIM2_Init+0x100>)
 8003a08:	f004 ff46 	bl	8008898 <HAL_TIM_PWM_ConfigChannel>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003a12:	f7ff fb19 	bl	8003048 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a16:	463b      	mov	r3, r7
 8003a18:	220c      	movs	r2, #12
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4807      	ldr	r0, [pc, #28]	@ (8003a3c <MX_TIM2_Init+0x100>)
 8003a1e:	f004 ff3b 	bl	8008898 <HAL_TIM_PWM_ConfigChannel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003a28:	f7ff fb0e 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003a2c:	4803      	ldr	r0, [pc, #12]	@ (8003a3c <MX_TIM2_Init+0x100>)
 8003a2e:	f000 f9e9 	bl	8003e04 <HAL_TIM_MspPostInit>

}
 8003a32:	bf00      	nop
 8003a34:	3738      	adds	r7, #56	@ 0x38
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20006874 	.word	0x20006874

08003a40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a46:	f107 0310 	add.w	r3, r7, #16
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a54:	1d3b      	adds	r3, r7, #4
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad4 <MX_TIM3_Init+0x94>)
 8003a60:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad8 <MX_TIM3_Init+0x98>)
 8003a62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8003a64:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <MX_TIM3_Init+0x94>)
 8003a66:	22a9      	movs	r2, #169	@ 0xa9
 8003a68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad4 <MX_TIM3_Init+0x94>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003a70:	4b18      	ldr	r3, [pc, #96]	@ (8003ad4 <MX_TIM3_Init+0x94>)
 8003a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a78:	4b16      	ldr	r3, [pc, #88]	@ (8003ad4 <MX_TIM3_Init+0x94>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a7e:	4b15      	ldr	r3, [pc, #84]	@ (8003ad4 <MX_TIM3_Init+0x94>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a84:	4813      	ldr	r0, [pc, #76]	@ (8003ad4 <MX_TIM3_Init+0x94>)
 8003a86:	f004 fa3f 	bl	8007f08 <HAL_TIM_Base_Init>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003a90:	f7ff fada 	bl	8003048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a9a:	f107 0310 	add.w	r3, r7, #16
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	480c      	ldr	r0, [pc, #48]	@ (8003ad4 <MX_TIM3_Init+0x94>)
 8003aa2:	f005 f80d 	bl	8008ac0 <HAL_TIM_ConfigClockSource>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003aac:	f7ff facc 	bl	8003048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ab8:	1d3b      	adds	r3, r7, #4
 8003aba:	4619      	mov	r1, r3
 8003abc:	4805      	ldr	r0, [pc, #20]	@ (8003ad4 <MX_TIM3_Init+0x94>)
 8003abe:	f005 fddd 	bl	800967c <HAL_TIMEx_MasterConfigSynchronization>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003ac8:	f7ff fabe 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003acc:	bf00      	nop
 8003ace:	3720      	adds	r7, #32
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	200068c0 	.word	0x200068c0
 8003ad8:	40000400 	.word	0x40000400

08003adc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08c      	sub	sp, #48	@ 0x30
 8003ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ae2:	f107 030c 	add.w	r3, r7, #12
 8003ae6:	2224      	movs	r2, #36	@ 0x24
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f00c fd19 	bl	8010522 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003af0:	463b      	mov	r3, r7
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003afa:	4b21      	ldr	r3, [pc, #132]	@ (8003b80 <MX_TIM4_Init+0xa4>)
 8003afc:	4a21      	ldr	r2, [pc, #132]	@ (8003b84 <MX_TIM4_Init+0xa8>)
 8003afe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003b00:	4b1f      	ldr	r3, [pc, #124]	@ (8003b80 <MX_TIM4_Init+0xa4>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b06:	4b1e      	ldr	r3, [pc, #120]	@ (8003b80 <MX_TIM4_Init+0xa4>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003b80 <MX_TIM4_Init+0xa4>)
 8003b0e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003b12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b14:	4b1a      	ldr	r3, [pc, #104]	@ (8003b80 <MX_TIM4_Init+0xa4>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b1a:	4b19      	ldr	r3, [pc, #100]	@ (8003b80 <MX_TIM4_Init+0xa4>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b20:	2303      	movs	r3, #3
 8003b22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b24:	2300      	movs	r3, #0
 8003b26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b34:	2300      	movs	r3, #0
 8003b36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003b44:	f107 030c 	add.w	r3, r7, #12
 8003b48:	4619      	mov	r1, r3
 8003b4a:	480d      	ldr	r0, [pc, #52]	@ (8003b80 <MX_TIM4_Init+0xa4>)
 8003b4c:	f004 fc20 	bl	8008390 <HAL_TIM_Encoder_Init>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003b56:	f7ff fa77 	bl	8003048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b62:	463b      	mov	r3, r7
 8003b64:	4619      	mov	r1, r3
 8003b66:	4806      	ldr	r0, [pc, #24]	@ (8003b80 <MX_TIM4_Init+0xa4>)
 8003b68:	f005 fd88 	bl	800967c <HAL_TIMEx_MasterConfigSynchronization>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003b72:	f7ff fa69 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b76:	bf00      	nop
 8003b78:	3730      	adds	r7, #48	@ 0x30
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	2000690c 	.word	0x2000690c
 8003b84:	40000800 	.word	0x40000800

08003b88 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b8e:	f107 0310 	add.w	r3, r7, #16
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	609a      	str	r2, [r3, #8]
 8003b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c1c <MX_TIM5_Init+0x94>)
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c20 <MX_TIM5_Init+0x98>)
 8003baa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003bac:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <MX_TIM5_Init+0x94>)
 8003bae:	22a9      	movs	r2, #169	@ 0xa9
 8003bb0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c1c <MX_TIM5_Init+0x94>)
 8003bb4:	2210      	movs	r2, #16
 8003bb6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8003bb8:	4b18      	ldr	r3, [pc, #96]	@ (8003c1c <MX_TIM5_Init+0x94>)
 8003bba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003bbe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bc0:	4b16      	ldr	r3, [pc, #88]	@ (8003c1c <MX_TIM5_Init+0x94>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc6:	4b15      	ldr	r3, [pc, #84]	@ (8003c1c <MX_TIM5_Init+0x94>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003bcc:	4813      	ldr	r0, [pc, #76]	@ (8003c1c <MX_TIM5_Init+0x94>)
 8003bce:	f004 f99b 	bl	8007f08 <HAL_TIM_Base_Init>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003bd8:	f7ff fa36 	bl	8003048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003be0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003be2:	f107 0310 	add.w	r3, r7, #16
 8003be6:	4619      	mov	r1, r3
 8003be8:	480c      	ldr	r0, [pc, #48]	@ (8003c1c <MX_TIM5_Init+0x94>)
 8003bea:	f004 ff69 	bl	8008ac0 <HAL_TIM_ConfigClockSource>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003bf4:	f7ff fa28 	bl	8003048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003c00:	1d3b      	adds	r3, r7, #4
 8003c02:	4619      	mov	r1, r3
 8003c04:	4805      	ldr	r0, [pc, #20]	@ (8003c1c <MX_TIM5_Init+0x94>)
 8003c06:	f005 fd39 	bl	800967c <HAL_TIMEx_MasterConfigSynchronization>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003c10:	f7ff fa1a 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003c14:	bf00      	nop
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20006958 	.word	0x20006958
 8003c20:	40000c00 	.word	0x40000c00

08003c24 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08c      	sub	sp, #48	@ 0x30
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c2c:	f107 031c 	add.w	r3, r7, #28
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	60da      	str	r2, [r3, #12]
 8003c3a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a44      	ldr	r2, [pc, #272]	@ (8003d54 <HAL_TIM_Encoder_MspInit+0x130>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d128      	bne.n	8003c98 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c46:	4b44      	ldr	r3, [pc, #272]	@ (8003d58 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4a:	4a43      	ldr	r2, [pc, #268]	@ (8003d58 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c50:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c52:	4b41      	ldr	r3, [pc, #260]	@ (8003d58 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d58 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c62:	4a3d      	ldr	r2, [pc, #244]	@ (8003d58 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d58 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R_1_Pin|ENCODER_R_2_Pin;
 8003c76:	2303      	movs	r3, #3
 8003c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c82:	2300      	movs	r3, #0
 8003c84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003c86:	2302      	movs	r3, #2
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c8a:	f107 031c 	add.w	r3, r7, #28
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4832      	ldr	r0, [pc, #200]	@ (8003d5c <HAL_TIM_Encoder_MspInit+0x138>)
 8003c92:	f002 f9e7 	bl	8006064 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003c96:	e059      	b.n	8003d4c <HAL_TIM_Encoder_MspInit+0x128>
  else if(tim_encoderHandle->Instance==TIM4)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a30      	ldr	r2, [pc, #192]	@ (8003d60 <HAL_TIM_Encoder_MspInit+0x13c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d154      	bne.n	8003d4c <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d58 <HAL_TIM_Encoder_MspInit+0x134>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8003d58 <HAL_TIM_Encoder_MspInit+0x134>)
 8003ca8:	f043 0304 	orr.w	r3, r3, #4
 8003cac:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cae:	4b2a      	ldr	r3, [pc, #168]	@ (8003d58 <HAL_TIM_Encoder_MspInit+0x134>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cba:	4b27      	ldr	r3, [pc, #156]	@ (8003d58 <HAL_TIM_Encoder_MspInit+0x134>)
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cbe:	4a26      	ldr	r2, [pc, #152]	@ (8003d58 <HAL_TIM_Encoder_MspInit+0x134>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cc6:	4b24      	ldr	r3, [pc, #144]	@ (8003d58 <HAL_TIM_Encoder_MspInit+0x134>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_L_1_Pin|ENCODER_L_2_Pin;
 8003cd2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003ce4:	230a      	movs	r3, #10
 8003ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce8:	f107 031c 	add.w	r3, r7, #28
 8003cec:	4619      	mov	r1, r3
 8003cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cf2:	f002 f9b7 	bl	8006064 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Channel2;
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d64 <HAL_TIM_Encoder_MspInit+0x140>)
 8003cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d68 <HAL_TIM_Encoder_MspInit+0x144>)
 8003cfa:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8003cfc:	4b19      	ldr	r3, [pc, #100]	@ (8003d64 <HAL_TIM_Encoder_MspInit+0x140>)
 8003cfe:	2247      	movs	r2, #71	@ 0x47
 8003d00:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d02:	4b18      	ldr	r3, [pc, #96]	@ (8003d64 <HAL_TIM_Encoder_MspInit+0x140>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d08:	4b16      	ldr	r3, [pc, #88]	@ (8003d64 <HAL_TIM_Encoder_MspInit+0x140>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 8003d0e:	4b15      	ldr	r3, [pc, #84]	@ (8003d64 <HAL_TIM_Encoder_MspInit+0x140>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d14:	4b13      	ldr	r3, [pc, #76]	@ (8003d64 <HAL_TIM_Encoder_MspInit+0x140>)
 8003d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d1a:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d1c:	4b11      	ldr	r3, [pc, #68]	@ (8003d64 <HAL_TIM_Encoder_MspInit+0x140>)
 8003d1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d22:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8003d24:	4b0f      	ldr	r3, [pc, #60]	@ (8003d64 <HAL_TIM_Encoder_MspInit+0x140>)
 8003d26:	2220      	movs	r2, #32
 8003d28:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d64 <HAL_TIM_Encoder_MspInit+0x140>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8003d30:	480c      	ldr	r0, [pc, #48]	@ (8003d64 <HAL_TIM_Encoder_MspInit+0x140>)
 8003d32:	f001 fe65 	bl	8005a00 <HAL_DMA_Init>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_TIM_Encoder_MspInit+0x11c>
      Error_Handler();
 8003d3c:	f7ff f984 	bl	8003048 <Error_Handler>
    __HAL_LINKDMA(tim_encoderHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a08      	ldr	r2, [pc, #32]	@ (8003d64 <HAL_TIM_Encoder_MspInit+0x140>)
 8003d44:	621a      	str	r2, [r3, #32]
 8003d46:	4a07      	ldr	r2, [pc, #28]	@ (8003d64 <HAL_TIM_Encoder_MspInit+0x140>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003d4c:	bf00      	nop
 8003d4e:	3730      	adds	r7, #48	@ 0x30
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	48000800 	.word	0x48000800
 8003d60:	40000800 	.word	0x40000800
 8003d64:	200069a4 	.word	0x200069a4
 8003d68:	4002001c 	.word	0x4002001c

08003d6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7c:	d10c      	bne.n	8003d98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003df8 <HAL_TIM_Base_MspInit+0x8c>)
 8003d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d82:	4a1d      	ldr	r2, [pc, #116]	@ (8003df8 <HAL_TIM_Base_MspInit+0x8c>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <HAL_TIM_Base_MspInit+0x8c>)
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003d96:	e02a      	b.n	8003dee <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a17      	ldr	r2, [pc, #92]	@ (8003dfc <HAL_TIM_Base_MspInit+0x90>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d10c      	bne.n	8003dbc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003da2:	4b15      	ldr	r3, [pc, #84]	@ (8003df8 <HAL_TIM_Base_MspInit+0x8c>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da6:	4a14      	ldr	r2, [pc, #80]	@ (8003df8 <HAL_TIM_Base_MspInit+0x8c>)
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dae:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <HAL_TIM_Base_MspInit+0x8c>)
 8003db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	693b      	ldr	r3, [r7, #16]
}
 8003dba:	e018      	b.n	8003dee <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM5)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0f      	ldr	r2, [pc, #60]	@ (8003e00 <HAL_TIM_Base_MspInit+0x94>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d113      	bne.n	8003dee <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003df8 <HAL_TIM_Base_MspInit+0x8c>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dca:	4a0b      	ldr	r2, [pc, #44]	@ (8003df8 <HAL_TIM_Base_MspInit+0x8c>)
 8003dcc:	f043 0308 	orr.w	r3, r3, #8
 8003dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd2:	4b09      	ldr	r3, [pc, #36]	@ (8003df8 <HAL_TIM_Base_MspInit+0x8c>)
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003dde:	2200      	movs	r2, #0
 8003de0:	2100      	movs	r1, #0
 8003de2:	2032      	movs	r0, #50	@ 0x32
 8003de4:	f001 fdd7 	bl	8005996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003de8:	2032      	movs	r0, #50	@ 0x32
 8003dea:	f001 fdee 	bl	80059ca <HAL_NVIC_EnableIRQ>
}
 8003dee:	bf00      	nop
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000c00 	.word	0x40000c00

08003e04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 030c 	add.w	r3, r7, #12
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e24:	d12e      	bne.n	8003e84 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e26:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <HAL_TIM_MspPostInit+0x88>)
 8003e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2a:	4a18      	ldr	r2, [pc, #96]	@ (8003e8c <HAL_TIM_MspPostInit+0x88>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e32:	4b16      	ldr	r3, [pc, #88]	@ (8003e8c <HAL_TIM_MspPostInit+0x88>)
 8003e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_R_Pin;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e42:	2302      	movs	r3, #2
 8003e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8003e52:	f107 030c 	add.w	r3, r7, #12
 8003e56:	4619      	mov	r1, r3
 8003e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e5c:	f002 f902 	bl	8006064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_L_Pin;
 8003e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8003e72:	230a      	movs	r3, #10
 8003e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8003e76:	f107 030c 	add.w	r3, r7, #12
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e80:	f002 f8f0 	bl	8006064 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003e84:	bf00      	nop
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000

08003e90 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003e94:	4b21      	ldr	r3, [pc, #132]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003e96:	4a22      	ldr	r2, [pc, #136]	@ (8003f20 <MX_LPUART1_UART_Init+0x90>)
 8003e98:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8003e9a:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003e9c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003ea0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003eae:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003eb4:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eba:	4b18      	ldr	r3, [pc, #96]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ec0:	4b16      	ldr	r3, [pc, #88]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ec6:	4b15      	ldr	r3, [pc, #84]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ecc:	4b13      	ldr	r3, [pc, #76]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003ed2:	4812      	ldr	r0, [pc, #72]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ed4:	f005 fcae 	bl	8009834 <HAL_UART_Init>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003ede:	f7ff f8b3 	bl	8003048 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	480d      	ldr	r0, [pc, #52]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ee6:	f007 fd24 	bl	800b932 <HAL_UARTEx_SetTxFifoThreshold>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003ef0:	f7ff f8aa 	bl	8003048 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4809      	ldr	r0, [pc, #36]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ef8:	f007 fd59 	bl	800b9ae <HAL_UARTEx_SetRxFifoThreshold>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003f02:	f7ff f8a1 	bl	8003048 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003f06:	4805      	ldr	r0, [pc, #20]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003f08:	f007 fcda 	bl	800b8c0 <HAL_UARTEx_DisableFifoMode>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003f12:	f7ff f899 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20006a04 	.word	0x20006a04
 8003f20:	40008000 	.word	0x40008000

08003f24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b09e      	sub	sp, #120	@ 0x78
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f3c:	f107 0310 	add.w	r3, r7, #16
 8003f40:	2254      	movs	r2, #84	@ 0x54
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f00c faec 	bl	8010522 <memset>
  if(uartHandle->Instance==LPUART1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a23      	ldr	r2, [pc, #140]	@ (8003fdc <HAL_UART_MspInit+0xb8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d13f      	bne.n	8003fd4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003f54:	2320      	movs	r3, #32
 8003f56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8003f58:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f5e:	f107 0310 	add.w	r3, r7, #16
 8003f62:	4618      	mov	r0, r3
 8003f64:	f003 f954 	bl	8007210 <HAL_RCCEx_PeriphCLKConfig>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003f6e:	f7ff f86b 	bl	8003048 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_UART_MspInit+0xbc>)
 8003f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f76:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe0 <HAL_UART_MspInit+0xbc>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003f7e:	4b18      	ldr	r3, [pc, #96]	@ (8003fe0 <HAL_UART_MspInit+0xbc>)
 8003f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8a:	4b15      	ldr	r3, [pc, #84]	@ (8003fe0 <HAL_UART_MspInit+0xbc>)
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8e:	4a14      	ldr	r2, [pc, #80]	@ (8003fe0 <HAL_UART_MspInit+0xbc>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f96:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <HAL_UART_MspInit+0xbc>)
 8003f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003fa2:	230c      	movs	r3, #12
 8003fa4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003fb2:	230c      	movs	r3, #12
 8003fb4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fc0:	f002 f850 	bl	8006064 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	205b      	movs	r0, #91	@ 0x5b
 8003fca:	f001 fce4 	bl	8005996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003fce:	205b      	movs	r0, #91	@ 0x5b
 8003fd0:	f001 fcfb 	bl	80059ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	3778      	adds	r7, #120	@ 0x78
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40008000 	.word	0x40008000
 8003fe0:	40021000 	.word	0x40021000

08003fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fe4:	480d      	ldr	r0, [pc, #52]	@ (800401c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fe6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003fe8:	f7ff fc3c 	bl	8003864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fec:	480c      	ldr	r0, [pc, #48]	@ (8004020 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fee:	490d      	ldr	r1, [pc, #52]	@ (8004024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8004028 <LoopForever+0xe>)
  movs r3, #0
 8003ff2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003ff4:	e002      	b.n	8003ffc <LoopCopyDataInit>

08003ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ffa:	3304      	adds	r3, #4

08003ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004000:	d3f9      	bcc.n	8003ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004002:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004004:	4c0a      	ldr	r4, [pc, #40]	@ (8004030 <LoopForever+0x16>)
  movs r3, #0
 8004006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004008:	e001      	b.n	800400e <LoopFillZerobss>

0800400a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800400a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800400c:	3204      	adds	r2, #4

0800400e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800400e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004010:	d3fb      	bcc.n	800400a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004012:	f00c fb4d 	bl	80106b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004016:	f7fe f957 	bl	80022c8 <main>

0800401a <LoopForever>:

LoopForever:
    b LoopForever
 800401a:	e7fe      	b.n	800401a <LoopForever>
  ldr   r0, =_estack
 800401c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004024:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004028:	0801461c 	.word	0x0801461c
  ldr r2, =_sbss
 800402c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004030:	20006c2c 	.word	0x20006c2c

08004034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004034:	e7fe      	b.n	8004034 <ADC1_2_IRQHandler>

08004036 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004040:	2003      	movs	r0, #3
 8004042:	f001 fc9d 	bl	8005980 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004046:	2000      	movs	r0, #0
 8004048:	f000 f80e 	bl	8004068 <HAL_InitTick>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	71fb      	strb	r3, [r7, #7]
 8004056:	e001      	b.n	800405c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004058:	f7ff fac2 	bl	80035e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800405c:	79fb      	ldrb	r3, [r7, #7]

}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004074:	4b16      	ldr	r3, [pc, #88]	@ (80040d0 <HAL_InitTick+0x68>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d022      	beq.n	80040c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800407c:	4b15      	ldr	r3, [pc, #84]	@ (80040d4 <HAL_InitTick+0x6c>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b13      	ldr	r3, [pc, #76]	@ (80040d0 <HAL_InitTick+0x68>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004088:	fbb1 f3f3 	udiv	r3, r1, r3
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	4618      	mov	r0, r3
 8004092:	f001 fca8 	bl	80059e6 <HAL_SYSTICK_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10f      	bne.n	80040bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b0f      	cmp	r3, #15
 80040a0:	d809      	bhi.n	80040b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040a2:	2200      	movs	r2, #0
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	f04f 30ff 	mov.w	r0, #4294967295
 80040aa:	f001 fc74 	bl	8005996 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040ae:	4a0a      	ldr	r2, [pc, #40]	@ (80040d8 <HAL_InitTick+0x70>)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	e007      	b.n	80040c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	73fb      	strb	r3, [r7, #15]
 80040ba:	e004      	b.n	80040c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
 80040c0:	e001      	b.n	80040c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	2000000c 	.word	0x2000000c
 80040d4:	20000004 	.word	0x20000004
 80040d8:	20000008 	.word	0x20000008

080040dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040e0:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <HAL_IncTick+0x1c>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b05      	ldr	r3, [pc, #20]	@ (80040fc <HAL_IncTick+0x20>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4413      	add	r3, r2
 80040ea:	4a03      	ldr	r2, [pc, #12]	@ (80040f8 <HAL_IncTick+0x1c>)
 80040ec:	6013      	str	r3, [r2, #0]
}
 80040ee:	bf00      	nop
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	20006a98 	.word	0x20006a98
 80040fc:	2000000c 	.word	0x2000000c

08004100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return uwTick;
 8004104:	4b03      	ldr	r3, [pc, #12]	@ (8004114 <HAL_GetTick+0x14>)
 8004106:	681b      	ldr	r3, [r3, #0]
}
 8004108:	4618      	mov	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20006a98 	.word	0x20006a98

08004118 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	609a      	str	r2, [r3, #8]
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3360      	adds	r3, #96	@ 0x60
 8004192:	461a      	mov	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <LL_ADC_SetOffset+0x44>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	03fff000 	.word	0x03fff000

080041c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3360      	adds	r3, #96	@ 0x60
 80041d6:	461a      	mov	r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3360      	adds	r3, #96	@ 0x60
 8004204:	461a      	mov	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	431a      	orrs	r2, r3
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800422a:	b480      	push	{r7}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3360      	adds	r3, #96	@ 0x60
 800423a:	461a      	mov	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	431a      	orrs	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004254:	bf00      	nop
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3360      	adds	r3, #96	@ 0x60
 8004270:	461a      	mov	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	431a      	orrs	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	615a      	str	r2, [r3, #20]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b087      	sub	sp, #28
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3330      	adds	r3, #48	@ 0x30
 80042f2:	461a      	mov	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	0a1b      	lsrs	r3, r3, #8
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	4413      	add	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	211f      	movs	r1, #31
 800430e:	fa01 f303 	lsl.w	r3, r1, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	401a      	ands	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	0e9b      	lsrs	r3, r3, #26
 800431a:	f003 011f 	and.w	r1, r3, #31
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	431a      	orrs	r2, r3
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800433a:	b480      	push	{r7}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3314      	adds	r3, #20
 800434a:	461a      	mov	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	0e5b      	lsrs	r3, r3, #25
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	4413      	add	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	0d1b      	lsrs	r3, r3, #20
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	2107      	movs	r1, #7
 8004368:	fa01 f303 	lsl.w	r3, r1, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	401a      	ands	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	0d1b      	lsrs	r3, r3, #20
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	fa01 f303 	lsl.w	r3, r1, r3
 800437e:	431a      	orrs	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004384:	bf00      	nop
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a8:	43db      	mvns	r3, r3
 80043aa:	401a      	ands	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f003 0318 	and.w	r3, r3, #24
 80043b2:	4908      	ldr	r1, [pc, #32]	@ (80043d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043b4:	40d9      	lsrs	r1, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	400b      	ands	r3, r1
 80043ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043be:	431a      	orrs	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	0007ffff 	.word	0x0007ffff

080043d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 031f 	and.w	r3, r3, #31
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004404:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6093      	str	r3, [r2, #8]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800442c:	d101      	bne.n	8004432 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004454:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800447c:	d101      	bne.n	8004482 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044a4:	f043 0201 	orr.w	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <LL_ADC_IsEnabled+0x18>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <LL_ADC_IsEnabled+0x1a>
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044f2:	f043 0204 	orr.w	r2, r3, #4
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b04      	cmp	r3, #4
 8004518:	d101      	bne.n	800451e <LL_ADC_REG_IsConversionOngoing+0x18>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b08      	cmp	r3, #8
 800453e:	d101      	bne.n	8004544 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004554:	b590      	push	{r4, r7, lr}
 8004556:	b089      	sub	sp, #36	@ 0x24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e1a9      	b.n	80048c2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fd fc8d 	bl	8001e9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff ff3f 	bl	8004418 <LL_ADC_IsDeepPowerDownEnabled>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d004      	beq.n	80045aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff ff25 	bl	80043f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff ff5a 	bl	8004468 <LL_ADC_IsInternalRegulatorEnabled>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d115      	bne.n	80045e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff ff3e 	bl	8004440 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045c4:	4b9c      	ldr	r3, [pc, #624]	@ (8004838 <HAL_ADC_Init+0x2e4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	099b      	lsrs	r3, r3, #6
 80045ca:	4a9c      	ldr	r2, [pc, #624]	@ (800483c <HAL_ADC_Init+0x2e8>)
 80045cc:	fba2 2303 	umull	r2, r3, r2, r3
 80045d0:	099b      	lsrs	r3, r3, #6
 80045d2:	3301      	adds	r3, #1
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80045d8:	e002      	b.n	80045e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3b01      	subs	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f9      	bne.n	80045da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff ff3c 	bl	8004468 <LL_ADC_IsInternalRegulatorEnabled>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10d      	bne.n	8004612 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fa:	f043 0210 	orr.w	r2, r3, #16
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004606:	f043 0201 	orr.w	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff ff75 	bl	8004506 <LL_ADC_REG_IsConversionOngoing>
 800461c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 8142 	bne.w	80048b0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f040 813e 	bne.w	80048b0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004638:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800463c:	f043 0202 	orr.w	r2, r3, #2
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff ff35 	bl	80044b8 <LL_ADC_IsEnabled>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d141      	bne.n	80046d8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800465c:	d004      	beq.n	8004668 <HAL_ADC_Init+0x114>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a77      	ldr	r2, [pc, #476]	@ (8004840 <HAL_ADC_Init+0x2ec>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d10f      	bne.n	8004688 <HAL_ADC_Init+0x134>
 8004668:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800466c:	f7ff ff24 	bl	80044b8 <LL_ADC_IsEnabled>
 8004670:	4604      	mov	r4, r0
 8004672:	4873      	ldr	r0, [pc, #460]	@ (8004840 <HAL_ADC_Init+0x2ec>)
 8004674:	f7ff ff20 	bl	80044b8 <LL_ADC_IsEnabled>
 8004678:	4603      	mov	r3, r0
 800467a:	4323      	orrs	r3, r4
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e012      	b.n	80046ae <HAL_ADC_Init+0x15a>
 8004688:	486e      	ldr	r0, [pc, #440]	@ (8004844 <HAL_ADC_Init+0x2f0>)
 800468a:	f7ff ff15 	bl	80044b8 <LL_ADC_IsEnabled>
 800468e:	4604      	mov	r4, r0
 8004690:	486d      	ldr	r0, [pc, #436]	@ (8004848 <HAL_ADC_Init+0x2f4>)
 8004692:	f7ff ff11 	bl	80044b8 <LL_ADC_IsEnabled>
 8004696:	4603      	mov	r3, r0
 8004698:	431c      	orrs	r4, r3
 800469a:	486c      	ldr	r0, [pc, #432]	@ (800484c <HAL_ADC_Init+0x2f8>)
 800469c:	f7ff ff0c 	bl	80044b8 <LL_ADC_IsEnabled>
 80046a0:	4603      	mov	r3, r0
 80046a2:	4323      	orrs	r3, r4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d012      	beq.n	80046d8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ba:	d004      	beq.n	80046c6 <HAL_ADC_Init+0x172>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5f      	ldr	r2, [pc, #380]	@ (8004840 <HAL_ADC_Init+0x2ec>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_Init+0x176>
 80046c6:	4a62      	ldr	r2, [pc, #392]	@ (8004850 <HAL_ADC_Init+0x2fc>)
 80046c8:	e000      	b.n	80046cc <HAL_ADC_Init+0x178>
 80046ca:	4a62      	ldr	r2, [pc, #392]	@ (8004854 <HAL_ADC_Init+0x300>)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f7ff fd20 	bl	8004118 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	7f5b      	ldrb	r3, [r3, #29]
 80046dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80046e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80046ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004702:	2b01      	cmp	r3, #1
 8004704:	d106      	bne.n	8004714 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470a:	3b01      	subs	r3, #1
 800470c:	045b      	lsls	r3, r3, #17
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004720:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004728:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4313      	orrs	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	4b48      	ldr	r3, [pc, #288]	@ (8004858 <HAL_ADC_Init+0x304>)
 8004738:	4013      	ands	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	69b9      	ldr	r1, [r7, #24]
 8004740:	430b      	orrs	r3, r1
 8004742:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fee4 	bl	800452c <LL_ADC_INJ_IsConversionOngoing>
 8004764:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d17f      	bne.n	800486c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d17c      	bne.n	800486c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004776:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800477e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004780:	4313      	orrs	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800478e:	f023 0302 	bic.w	r3, r3, #2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	69b9      	ldr	r1, [r7, #24]
 8004798:	430b      	orrs	r3, r1
 800479a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d017      	beq.n	80047d4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80047b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80047bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80047c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6911      	ldr	r1, [r2, #16]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80047d2:	e013      	b.n	80047fc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80047e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80047f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004802:	2b01      	cmp	r3, #1
 8004804:	d12a      	bne.n	800485c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004810:	f023 0304 	bic.w	r3, r3, #4
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800481c:	4311      	orrs	r1, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004828:	430a      	orrs	r2, r1
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0201 	orr.w	r2, r2, #1
 8004834:	611a      	str	r2, [r3, #16]
 8004836:	e019      	b.n	800486c <HAL_ADC_Init+0x318>
 8004838:	20000004 	.word	0x20000004
 800483c:	053e2d63 	.word	0x053e2d63
 8004840:	50000100 	.word	0x50000100
 8004844:	50000400 	.word	0x50000400
 8004848:	50000500 	.word	0x50000500
 800484c:	50000600 	.word	0x50000600
 8004850:	50000300 	.word	0x50000300
 8004854:	50000700 	.word	0x50000700
 8004858:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d10c      	bne.n	800488e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487a:	f023 010f 	bic.w	r1, r3, #15
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	1e5a      	subs	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	631a      	str	r2, [r3, #48]	@ 0x30
 800488c:	e007      	b.n	800489e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 020f 	bic.w	r2, r2, #15
 800489c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a2:	f023 0303 	bic.w	r3, r3, #3
 80048a6:	f043 0201 	orr.w	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048ae:	e007      	b.n	80048c0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b4:	f043 0210 	orr.w	r2, r3, #16
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80048c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3724      	adds	r7, #36	@ 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd90      	pop	{r4, r7, pc}
 80048ca:	bf00      	nop

080048cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048e0:	d004      	beq.n	80048ec <HAL_ADC_Start_DMA+0x20>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a5a      	ldr	r2, [pc, #360]	@ (8004a50 <HAL_ADC_Start_DMA+0x184>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d101      	bne.n	80048f0 <HAL_ADC_Start_DMA+0x24>
 80048ec:	4b59      	ldr	r3, [pc, #356]	@ (8004a54 <HAL_ADC_Start_DMA+0x188>)
 80048ee:	e000      	b.n	80048f2 <HAL_ADC_Start_DMA+0x26>
 80048f0:	4b59      	ldr	r3, [pc, #356]	@ (8004a58 <HAL_ADC_Start_DMA+0x18c>)
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fd70 	bl	80043d8 <LL_ADC_GetMultimode>
 80048f8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff fe01 	bl	8004506 <LL_ADC_REG_IsConversionOngoing>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	f040 809b 	bne.w	8004a42 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_ADC_Start_DMA+0x4e>
 8004916:	2302      	movs	r3, #2
 8004918:	e096      	b.n	8004a48 <HAL_ADC_Start_DMA+0x17c>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a4d      	ldr	r2, [pc, #308]	@ (8004a5c <HAL_ADC_Start_DMA+0x190>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d008      	beq.n	800493e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b05      	cmp	r3, #5
 8004936:	d002      	beq.n	800493e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b09      	cmp	r3, #9
 800493c:	d17a      	bne.n	8004a34 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fcf6 	bl	8005330 <ADC_Enable>
 8004944:	4603      	mov	r3, r0
 8004946:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d16d      	bne.n	8004a2a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004952:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a3a      	ldr	r2, [pc, #232]	@ (8004a50 <HAL_ADC_Start_DMA+0x184>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d009      	beq.n	8004980 <HAL_ADC_Start_DMA+0xb4>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a3b      	ldr	r2, [pc, #236]	@ (8004a60 <HAL_ADC_Start_DMA+0x194>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d002      	beq.n	800497c <HAL_ADC_Start_DMA+0xb0>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	e003      	b.n	8004984 <HAL_ADC_Start_DMA+0xb8>
 800497c:	4b39      	ldr	r3, [pc, #228]	@ (8004a64 <HAL_ADC_Start_DMA+0x198>)
 800497e:	e001      	b.n	8004984 <HAL_ADC_Start_DMA+0xb8>
 8004980:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	4293      	cmp	r3, r2
 800498a:	d002      	beq.n	8004992 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d105      	bne.n	800499e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004996:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d006      	beq.n	80049b8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ae:	f023 0206 	bic.w	r2, r3, #6
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80049b6:	e002      	b.n	80049be <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c2:	4a29      	ldr	r2, [pc, #164]	@ (8004a68 <HAL_ADC_Start_DMA+0x19c>)
 80049c4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ca:	4a28      	ldr	r2, [pc, #160]	@ (8004a6c <HAL_ADC_Start_DMA+0x1a0>)
 80049cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d2:	4a27      	ldr	r2, [pc, #156]	@ (8004a70 <HAL_ADC_Start_DMA+0x1a4>)
 80049d4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	221c      	movs	r2, #28
 80049dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0210 	orr.w	r2, r2, #16
 80049f4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3340      	adds	r3, #64	@ 0x40
 8004a10:	4619      	mov	r1, r3
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f001 f89b 	bl	8005b50 <HAL_DMA_Start_IT>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fd5b 	bl	80044de <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a28:	e00d      	b.n	8004a46 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004a32:	e008      	b.n	8004a46 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004a40:	e001      	b.n	8004a46 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
 8004a44:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	50000100 	.word	0x50000100
 8004a54:	50000300 	.word	0x50000300
 8004a58:	50000700 	.word	0x50000700
 8004a5c:	50000600 	.word	0x50000600
 8004a60:	50000500 	.word	0x50000500
 8004a64:	50000400 	.word	0x50000400
 8004a68:	0800545d 	.word	0x0800545d
 8004a6c:	08005535 	.word	0x08005535
 8004a70:	08005551 	.word	0x08005551

08004a74 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b0b6      	sub	sp, #216	@ 0xd8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d102      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x24>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	f000 bc13 	b.w	80052fa <HAL_ADC_ConfigChannel+0x84a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fd10 	bl	8004506 <LL_ADC_REG_IsConversionOngoing>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f040 83f3 	bne.w	80052d4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f7ff fbf1 	bl	80042e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff fcfe 	bl	8004506 <LL_ADC_REG_IsConversionOngoing>
 8004b0a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fd0a 	bl	800452c <LL_ADC_INJ_IsConversionOngoing>
 8004b18:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f040 81d9 	bne.w	8004ed8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 81d4 	bne.w	8004ed8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b38:	d10f      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	4619      	mov	r1, r3
 8004b46:	f7ff fbf8 	bl	800433a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff fb9f 	bl	8004296 <LL_ADC_SetSamplingTimeCommonConfig>
 8004b58:	e00e      	b.n	8004b78 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6819      	ldr	r1, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f7ff fbe7 	bl	800433a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff fb8f 	bl	8004296 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	08db      	lsrs	r3, r3, #3
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d022      	beq.n	8004be0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6919      	ldr	r1, [r3, #16]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004baa:	f7ff fae9 	bl	8004180 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6919      	ldr	r1, [r3, #16]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f7ff fb35 	bl	800422a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d102      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x126>
 8004bd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bd4:	e000      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x128>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f7ff fb41 	bl	8004260 <LL_ADC_SetOffsetSaturation>
 8004bde:	e17b      	b.n	8004ed8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2100      	movs	r1, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff faee 	bl	80041c8 <LL_ADC_GetOffsetChannel>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x15c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fae3 	bl	80041c8 <LL_ADC_GetOffsetChannel>
 8004c02:	4603      	mov	r3, r0
 8004c04:	0e9b      	lsrs	r3, r3, #26
 8004c06:	f003 021f 	and.w	r2, r3, #31
 8004c0a:	e01e      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x19a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fad8 	bl	80041c8 <LL_ADC_GetOffsetChannel>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004c3a:	2320      	movs	r3, #32
 8004c3c:	e004      	b.n	8004c48 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004c3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c42:	fab3 f383 	clz	r3, r3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d105      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x1b2>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	0e9b      	lsrs	r3, r3, #26
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	e018      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x1e4>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004c6e:	fa93 f3a3 	rbit	r3, r3
 8004c72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004c7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004c86:	2320      	movs	r3, #32
 8004c88:	e004      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004c8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c8e:	fab3 f383 	clz	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d106      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff faa7 	bl	80041f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2101      	movs	r1, #1
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fa8b 	bl	80041c8 <LL_ADC_GetOffsetChannel>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x222>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fa80 	bl	80041c8 <LL_ADC_GetOffsetChannel>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	0e9b      	lsrs	r3, r3, #26
 8004ccc:	f003 021f 	and.w	r2, r3, #31
 8004cd0:	e01e      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x260>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fa75 	bl	80041c8 <LL_ADC_GetOffsetChannel>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004ce8:	fa93 f3a3 	rbit	r3, r3
 8004cec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004cf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004cf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004d00:	2320      	movs	r3, #32
 8004d02:	e004      	b.n	8004d0e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d08:	fab3 f383 	clz	r3, r3
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x278>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	0e9b      	lsrs	r3, r3, #26
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	e018      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x2aa>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d34:	fa93 f3a3 	rbit	r3, r3
 8004d38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004d3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	e004      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d54:	fab3 f383 	clz	r3, r3
 8004d58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d106      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	2101      	movs	r1, #1
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fa44 	bl	80041f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2102      	movs	r1, #2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fa28 	bl	80041c8 <LL_ADC_GetOffsetChannel>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x2e8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2102      	movs	r1, #2
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fa1d 	bl	80041c8 <LL_ADC_GetOffsetChannel>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	0e9b      	lsrs	r3, r3, #26
 8004d92:	f003 021f 	and.w	r2, r3, #31
 8004d96:	e01e      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x326>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fa12 	bl	80041c8 <LL_ADC_GetOffsetChannel>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dae:	fa93 f3a3 	rbit	r3, r3
 8004db2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004dbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	e004      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004dce:	fab3 f383 	clz	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x33e>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	0e9b      	lsrs	r3, r3, #26
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	e016      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x36c>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004e00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004e0e:	2320      	movs	r3, #32
 8004e10:	e004      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d106      	bne.n	8004e2e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2200      	movs	r2, #0
 8004e26:	2102      	movs	r1, #2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff f9e3 	bl	80041f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2103      	movs	r1, #3
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff f9c7 	bl	80041c8 <LL_ADC_GetOffsetChannel>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x3aa>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2103      	movs	r1, #3
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff f9bc 	bl	80041c8 <LL_ADC_GetOffsetChannel>
 8004e50:	4603      	mov	r3, r0
 8004e52:	0e9b      	lsrs	r3, r3, #26
 8004e54:	f003 021f 	and.w	r2, r3, #31
 8004e58:	e017      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x3da>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2103      	movs	r1, #3
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff f9b1 	bl	80041c8 <LL_ADC_GetOffsetChannel>
 8004e66:	4603      	mov	r3, r0
 8004e68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e6c:	fa93 f3a3 	rbit	r3, r3
 8004e70:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004e72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e74:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004e76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	e003      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x3f2>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	0e9b      	lsrs	r3, r3, #26
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	e011      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x416>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004eaa:	fa93 f3a3 	rbit	r3, r3
 8004eae:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004eba:	2320      	movs	r3, #32
 8004ebc:	e003      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d106      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2103      	movs	r1, #3
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff f98e 	bl	80041f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff faeb 	bl	80044b8 <LL_ADC_IsEnabled>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f040 813d 	bne.w	8005164 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6819      	ldr	r1, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f7ff fa4a 	bl	8004390 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4aa2      	ldr	r2, [pc, #648]	@ (800518c <HAL_ADC_ConfigChannel+0x6dc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	f040 812e 	bne.w	8005164 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10b      	bne.n	8004f30 <HAL_ADC_ConfigChannel+0x480>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	0e9b      	lsrs	r3, r3, #26
 8004f1e:	3301      	adds	r3, #1
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	2b09      	cmp	r3, #9
 8004f26:	bf94      	ite	ls
 8004f28:	2301      	movls	r3, #1
 8004f2a:	2300      	movhi	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	e019      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x4b4>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f38:	fa93 f3a3 	rbit	r3, r3
 8004f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004f3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f40:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004f48:	2320      	movs	r3, #32
 8004f4a:	e003      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004f4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f4e:	fab3 f383 	clz	r3, r3
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	3301      	adds	r3, #1
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	2b09      	cmp	r3, #9
 8004f5c:	bf94      	ite	ls
 8004f5e:	2301      	movls	r3, #1
 8004f60:	2300      	movhi	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d079      	beq.n	800505c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d107      	bne.n	8004f84 <HAL_ADC_ConfigChannel+0x4d4>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	0e9b      	lsrs	r3, r3, #26
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	069b      	lsls	r3, r3, #26
 8004f7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f82:	e015      	b.n	8004fb0 <HAL_ADC_ConfigChannel+0x500>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f8c:	fa93 f3a3 	rbit	r3, r3
 8004f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f94:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	e003      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa2:	fab3 f383 	clz	r3, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	3301      	adds	r3, #1
 8004faa:	069b      	lsls	r3, r3, #26
 8004fac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x520>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	0e9b      	lsrs	r3, r3, #26
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	2101      	movs	r1, #1
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	e017      	b.n	8005000 <HAL_ADC_ConfigChannel+0x550>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd8:	fa93 f3a3 	rbit	r3, r3
 8004fdc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004fe8:	2320      	movs	r3, #32
 8004fea:	e003      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004fec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fee:	fab3 f383 	clz	r3, r3
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	ea42 0103 	orr.w	r1, r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x576>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	0e9b      	lsrs	r3, r3, #26
 8005016:	3301      	adds	r3, #1
 8005018:	f003 021f 	and.w	r2, r3, #31
 800501c:	4613      	mov	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4413      	add	r3, r2
 8005022:	051b      	lsls	r3, r3, #20
 8005024:	e018      	b.n	8005058 <HAL_ADC_ConfigChannel+0x5a8>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502e:	fa93 f3a3 	rbit	r3, r3
 8005032:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800503e:	2320      	movs	r3, #32
 8005040:	e003      	b.n	800504a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005044:	fab3 f383 	clz	r3, r3
 8005048:	b2db      	uxtb	r3, r3
 800504a:	3301      	adds	r3, #1
 800504c:	f003 021f 	and.w	r2, r3, #31
 8005050:	4613      	mov	r3, r2
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	4413      	add	r3, r2
 8005056:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005058:	430b      	orrs	r3, r1
 800505a:	e07e      	b.n	800515a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005064:	2b00      	cmp	r3, #0
 8005066:	d107      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x5c8>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	0e9b      	lsrs	r3, r3, #26
 800506e:	3301      	adds	r3, #1
 8005070:	069b      	lsls	r3, r3, #26
 8005072:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005076:	e015      	b.n	80050a4 <HAL_ADC_ConfigChannel+0x5f4>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005080:	fa93 f3a3 	rbit	r3, r3
 8005084:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005088:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800508a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005090:	2320      	movs	r3, #32
 8005092:	e003      	b.n	800509c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005096:	fab3 f383 	clz	r3, r3
 800509a:	b2db      	uxtb	r3, r3
 800509c:	3301      	adds	r3, #1
 800509e:	069b      	lsls	r3, r3, #26
 80050a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d109      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x614>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	0e9b      	lsrs	r3, r3, #26
 80050b6:	3301      	adds	r3, #1
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f303 	lsl.w	r3, r1, r3
 80050c2:	e017      	b.n	80050f4 <HAL_ADC_ConfigChannel+0x644>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	fa93 f3a3 	rbit	r3, r3
 80050d0:	61fb      	str	r3, [r7, #28]
  return result;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80050dc:	2320      	movs	r3, #32
 80050de:	e003      	b.n	80050e8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80050e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e2:	fab3 f383 	clz	r3, r3
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	3301      	adds	r3, #1
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2101      	movs	r1, #1
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	ea42 0103 	orr.w	r1, r2, r3
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10d      	bne.n	8005120 <HAL_ADC_ConfigChannel+0x670>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	0e9b      	lsrs	r3, r3, #26
 800510a:	3301      	adds	r3, #1
 800510c:	f003 021f 	and.w	r2, r3, #31
 8005110:	4613      	mov	r3, r2
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	4413      	add	r3, r2
 8005116:	3b1e      	subs	r3, #30
 8005118:	051b      	lsls	r3, r3, #20
 800511a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800511e:	e01b      	b.n	8005158 <HAL_ADC_ConfigChannel+0x6a8>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	fa93 f3a3 	rbit	r3, r3
 800512c:	613b      	str	r3, [r7, #16]
  return result;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005138:	2320      	movs	r3, #32
 800513a:	e003      	b.n	8005144 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	fab3 f383 	clz	r3, r3
 8005142:	b2db      	uxtb	r3, r3
 8005144:	3301      	adds	r3, #1
 8005146:	f003 021f 	and.w	r2, r3, #31
 800514a:	4613      	mov	r3, r2
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	4413      	add	r3, r2
 8005150:	3b1e      	subs	r3, #30
 8005152:	051b      	lsls	r3, r3, #20
 8005154:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005158:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800515e:	4619      	mov	r1, r3
 8005160:	f7ff f8eb 	bl	800433a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b09      	ldr	r3, [pc, #36]	@ (8005190 <HAL_ADC_ConfigChannel+0x6e0>)
 800516a:	4013      	ands	r3, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80be 	beq.w	80052ee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800517a:	d004      	beq.n	8005186 <HAL_ADC_ConfigChannel+0x6d6>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a04      	ldr	r2, [pc, #16]	@ (8005194 <HAL_ADC_ConfigChannel+0x6e4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d10a      	bne.n	800519c <HAL_ADC_ConfigChannel+0x6ec>
 8005186:	4b04      	ldr	r3, [pc, #16]	@ (8005198 <HAL_ADC_ConfigChannel+0x6e8>)
 8005188:	e009      	b.n	800519e <HAL_ADC_ConfigChannel+0x6ee>
 800518a:	bf00      	nop
 800518c:	407f0000 	.word	0x407f0000
 8005190:	80080000 	.word	0x80080000
 8005194:	50000100 	.word	0x50000100
 8005198:	50000300 	.word	0x50000300
 800519c:	4b59      	ldr	r3, [pc, #356]	@ (8005304 <HAL_ADC_ConfigChannel+0x854>)
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe ffe0 	bl	8004164 <LL_ADC_GetCommonPathInternalCh>
 80051a4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a56      	ldr	r2, [pc, #344]	@ (8005308 <HAL_ADC_ConfigChannel+0x858>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_ADC_ConfigChannel+0x70c>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a55      	ldr	r2, [pc, #340]	@ (800530c <HAL_ADC_ConfigChannel+0x85c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d13a      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d134      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051d0:	d005      	beq.n	80051de <HAL_ADC_ConfigChannel+0x72e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a4e      	ldr	r2, [pc, #312]	@ (8005310 <HAL_ADC_ConfigChannel+0x860>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	f040 8085 	bne.w	80052e8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051e6:	d004      	beq.n	80051f2 <HAL_ADC_ConfigChannel+0x742>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a49      	ldr	r2, [pc, #292]	@ (8005314 <HAL_ADC_ConfigChannel+0x864>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d101      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x746>
 80051f2:	4a49      	ldr	r2, [pc, #292]	@ (8005318 <HAL_ADC_ConfigChannel+0x868>)
 80051f4:	e000      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x748>
 80051f6:	4a43      	ldr	r2, [pc, #268]	@ (8005304 <HAL_ADC_ConfigChannel+0x854>)
 80051f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f7fe ff9b 	bl	800413e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005208:	4b44      	ldr	r3, [pc, #272]	@ (800531c <HAL_ADC_ConfigChannel+0x86c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	099b      	lsrs	r3, r3, #6
 800520e:	4a44      	ldr	r2, [pc, #272]	@ (8005320 <HAL_ADC_ConfigChannel+0x870>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	099b      	lsrs	r3, r3, #6
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	4613      	mov	r3, r2
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005222:	e002      	b.n	800522a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3b01      	subs	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f9      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005230:	e05a      	b.n	80052e8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a3b      	ldr	r2, [pc, #236]	@ (8005324 <HAL_ADC_ConfigChannel+0x874>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d125      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800523c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005240:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11f      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a31      	ldr	r2, [pc, #196]	@ (8005314 <HAL_ADC_ConfigChannel+0x864>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d104      	bne.n	800525c <HAL_ADC_ConfigChannel+0x7ac>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a34      	ldr	r2, [pc, #208]	@ (8005328 <HAL_ADC_ConfigChannel+0x878>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d047      	beq.n	80052ec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005264:	d004      	beq.n	8005270 <HAL_ADC_ConfigChannel+0x7c0>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a2a      	ldr	r2, [pc, #168]	@ (8005314 <HAL_ADC_ConfigChannel+0x864>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d101      	bne.n	8005274 <HAL_ADC_ConfigChannel+0x7c4>
 8005270:	4a29      	ldr	r2, [pc, #164]	@ (8005318 <HAL_ADC_ConfigChannel+0x868>)
 8005272:	e000      	b.n	8005276 <HAL_ADC_ConfigChannel+0x7c6>
 8005274:	4a23      	ldr	r2, [pc, #140]	@ (8005304 <HAL_ADC_ConfigChannel+0x854>)
 8005276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800527a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f7fe ff5c 	bl	800413e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005286:	e031      	b.n	80052ec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a27      	ldr	r2, [pc, #156]	@ (800532c <HAL_ADC_ConfigChannel+0x87c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d12d      	bne.n	80052ee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005292:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d127      	bne.n	80052ee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005314 <HAL_ADC_ConfigChannel+0x864>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d022      	beq.n	80052ee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052b0:	d004      	beq.n	80052bc <HAL_ADC_ConfigChannel+0x80c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a17      	ldr	r2, [pc, #92]	@ (8005314 <HAL_ADC_ConfigChannel+0x864>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d101      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x810>
 80052bc:	4a16      	ldr	r2, [pc, #88]	@ (8005318 <HAL_ADC_ConfigChannel+0x868>)
 80052be:	e000      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x812>
 80052c0:	4a10      	ldr	r2, [pc, #64]	@ (8005304 <HAL_ADC_ConfigChannel+0x854>)
 80052c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052ca:	4619      	mov	r1, r3
 80052cc:	4610      	mov	r0, r2
 80052ce:	f7fe ff36 	bl	800413e <LL_ADC_SetCommonPathInternalCh>
 80052d2:	e00c      	b.n	80052ee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d8:	f043 0220 	orr.w	r2, r3, #32
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80052e6:	e002      	b.n	80052ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052e8:	bf00      	nop
 80052ea:	e000      	b.n	80052ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80052f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	37d8      	adds	r7, #216	@ 0xd8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	50000700 	.word	0x50000700
 8005308:	c3210000 	.word	0xc3210000
 800530c:	90c00010 	.word	0x90c00010
 8005310:	50000600 	.word	0x50000600
 8005314:	50000100 	.word	0x50000100
 8005318:	50000300 	.word	0x50000300
 800531c:	20000004 	.word	0x20000004
 8005320:	053e2d63 	.word	0x053e2d63
 8005324:	c7520000 	.word	0xc7520000
 8005328:	50000500 	.word	0x50000500
 800532c:	cb840000 	.word	0xcb840000

08005330 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005338:	2300      	movs	r3, #0
 800533a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff f8b9 	bl	80044b8 <LL_ADC_IsEnabled>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d176      	bne.n	800543a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	4b3c      	ldr	r3, [pc, #240]	@ (8005444 <ADC_Enable+0x114>)
 8005354:	4013      	ands	r3, r2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00d      	beq.n	8005376 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535e:	f043 0210 	orr.w	r2, r3, #16
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800536a:	f043 0201 	orr.w	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e062      	b.n	800543c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff f888 	bl	8004490 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005388:	d004      	beq.n	8005394 <ADC_Enable+0x64>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a2e      	ldr	r2, [pc, #184]	@ (8005448 <ADC_Enable+0x118>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d101      	bne.n	8005398 <ADC_Enable+0x68>
 8005394:	4b2d      	ldr	r3, [pc, #180]	@ (800544c <ADC_Enable+0x11c>)
 8005396:	e000      	b.n	800539a <ADC_Enable+0x6a>
 8005398:	4b2d      	ldr	r3, [pc, #180]	@ (8005450 <ADC_Enable+0x120>)
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fee2 	bl	8004164 <LL_ADC_GetCommonPathInternalCh>
 80053a0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80053a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d013      	beq.n	80053d2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005454 <ADC_Enable+0x124>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	099b      	lsrs	r3, r3, #6
 80053b0:	4a29      	ldr	r2, [pc, #164]	@ (8005458 <ADC_Enable+0x128>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	099b      	lsrs	r3, r3, #6
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	4613      	mov	r3, r2
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053c4:	e002      	b.n	80053cc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f9      	bne.n	80053c6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80053d2:	f7fe fe95 	bl	8004100 <HAL_GetTick>
 80053d6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053d8:	e028      	b.n	800542c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff f86a 	bl	80044b8 <LL_ADC_IsEnabled>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d104      	bne.n	80053f4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff f84e 	bl	8004490 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053f4:	f7fe fe84 	bl	8004100 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d914      	bls.n	800542c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b01      	cmp	r3, #1
 800540e:	d00d      	beq.n	800542c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005414:	f043 0210 	orr.w	r2, r3, #16
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005420:	f043 0201 	orr.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e007      	b.n	800543c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b01      	cmp	r3, #1
 8005438:	d1cf      	bne.n	80053da <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	8000003f 	.word	0x8000003f
 8005448:	50000100 	.word	0x50000100
 800544c:	50000300 	.word	0x50000300
 8005450:	50000700 	.word	0x50000700
 8005454:	20000004 	.word	0x20000004
 8005458:	053e2d63 	.word	0x053e2d63

0800545c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005472:	2b00      	cmp	r3, #0
 8005474:	d14b      	bne.n	800550e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800547a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d021      	beq.n	80054d4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe ff11 	bl	80042bc <LL_ADC_REG_IsTriggerSourceSWStart>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d032      	beq.n	8005506 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d12b      	bne.n	8005506 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d11f      	bne.n	8005506 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ca:	f043 0201 	orr.w	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054d2:	e018      	b.n	8005506 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d111      	bne.n	8005506 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d105      	bne.n	8005506 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054fe:	f043 0201 	orr.w	r2, r3, #1
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7ff fab4 	bl	8004a74 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800550c:	e00e      	b.n	800552c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f7ff fabe 	bl	8004a9c <HAL_ADC_ErrorCallback>
}
 8005520:	e004      	b.n	800552c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005540:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7ff faa0 	bl	8004a88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005562:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556e:	f043 0204 	orr.w	r2, r3, #4
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7ff fa90 	bl	8004a9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <LL_ADC_IsEnabled>:
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <LL_ADC_IsEnabled+0x18>
 8005598:	2301      	movs	r3, #1
 800559a:	e000      	b.n	800559e <LL_ADC_IsEnabled+0x1a>
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <LL_ADC_REG_IsConversionOngoing>:
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d101      	bne.n	80055c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80055d0:	b590      	push	{r4, r7, lr}
 80055d2:	b0a1      	sub	sp, #132	@ 0x84
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e0e7      	b.n	80057be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80055f6:	2300      	movs	r3, #0
 80055f8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80055fa:	2300      	movs	r3, #0
 80055fc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005606:	d102      	bne.n	800560e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005608:	4b6f      	ldr	r3, [pc, #444]	@ (80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	e009      	b.n	8005622 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a6e      	ldr	r2, [pc, #440]	@ (80057cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d102      	bne.n	800561e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005618:	4b6d      	ldr	r3, [pc, #436]	@ (80057d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800561a:	60bb      	str	r3, [r7, #8]
 800561c:	e001      	b.n	8005622 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10b      	bne.n	8005640 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800562c:	f043 0220 	orr.w	r2, r3, #32
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0be      	b.n	80057be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff ffb1 	bl	80055aa <LL_ADC_REG_IsConversionOngoing>
 8005648:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff ffab 	bl	80055aa <LL_ADC_REG_IsConversionOngoing>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	f040 80a0 	bne.w	800579c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800565c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800565e:	2b00      	cmp	r3, #0
 8005660:	f040 809c 	bne.w	800579c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800566c:	d004      	beq.n	8005678 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a55      	ldr	r2, [pc, #340]	@ (80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d101      	bne.n	800567c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005678:	4b56      	ldr	r3, [pc, #344]	@ (80057d4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800567a:	e000      	b.n	800567e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800567c:	4b56      	ldr	r3, [pc, #344]	@ (80057d8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800567e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d04b      	beq.n	8005720 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005688:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6859      	ldr	r1, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800569a:	035b      	lsls	r3, r3, #13
 800569c:	430b      	orrs	r3, r1
 800569e:	431a      	orrs	r2, r3
 80056a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056ac:	d004      	beq.n	80056b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a45      	ldr	r2, [pc, #276]	@ (80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d10f      	bne.n	80056d8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80056b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80056bc:	f7ff ff62 	bl	8005584 <LL_ADC_IsEnabled>
 80056c0:	4604      	mov	r4, r0
 80056c2:	4841      	ldr	r0, [pc, #260]	@ (80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056c4:	f7ff ff5e 	bl	8005584 <LL_ADC_IsEnabled>
 80056c8:	4603      	mov	r3, r0
 80056ca:	4323      	orrs	r3, r4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	e012      	b.n	80056fe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80056d8:	483c      	ldr	r0, [pc, #240]	@ (80057cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80056da:	f7ff ff53 	bl	8005584 <LL_ADC_IsEnabled>
 80056de:	4604      	mov	r4, r0
 80056e0:	483b      	ldr	r0, [pc, #236]	@ (80057d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80056e2:	f7ff ff4f 	bl	8005584 <LL_ADC_IsEnabled>
 80056e6:	4603      	mov	r3, r0
 80056e8:	431c      	orrs	r4, r3
 80056ea:	483c      	ldr	r0, [pc, #240]	@ (80057dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80056ec:	f7ff ff4a 	bl	8005584 <LL_ADC_IsEnabled>
 80056f0:	4603      	mov	r3, r0
 80056f2:	4323      	orrs	r3, r4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf0c      	ite	eq
 80056f8:	2301      	moveq	r3, #1
 80056fa:	2300      	movne	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d056      	beq.n	80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800570a:	f023 030f 	bic.w	r3, r3, #15
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	6811      	ldr	r1, [r2, #0]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	6892      	ldr	r2, [r2, #8]
 8005716:	430a      	orrs	r2, r1
 8005718:	431a      	orrs	r2, r3
 800571a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800571c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800571e:	e047      	b.n	80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005720:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800572a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005734:	d004      	beq.n	8005740 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a23      	ldr	r2, [pc, #140]	@ (80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d10f      	bne.n	8005760 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005740:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005744:	f7ff ff1e 	bl	8005584 <LL_ADC_IsEnabled>
 8005748:	4604      	mov	r4, r0
 800574a:	481f      	ldr	r0, [pc, #124]	@ (80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800574c:	f7ff ff1a 	bl	8005584 <LL_ADC_IsEnabled>
 8005750:	4603      	mov	r3, r0
 8005752:	4323      	orrs	r3, r4
 8005754:	2b00      	cmp	r3, #0
 8005756:	bf0c      	ite	eq
 8005758:	2301      	moveq	r3, #1
 800575a:	2300      	movne	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e012      	b.n	8005786 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005760:	481a      	ldr	r0, [pc, #104]	@ (80057cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005762:	f7ff ff0f 	bl	8005584 <LL_ADC_IsEnabled>
 8005766:	4604      	mov	r4, r0
 8005768:	4819      	ldr	r0, [pc, #100]	@ (80057d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800576a:	f7ff ff0b 	bl	8005584 <LL_ADC_IsEnabled>
 800576e:	4603      	mov	r3, r0
 8005770:	431c      	orrs	r4, r3
 8005772:	481a      	ldr	r0, [pc, #104]	@ (80057dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005774:	f7ff ff06 	bl	8005584 <LL_ADC_IsEnabled>
 8005778:	4603      	mov	r3, r0
 800577a:	4323      	orrs	r3, r4
 800577c:	2b00      	cmp	r3, #0
 800577e:	bf0c      	ite	eq
 8005780:	2301      	moveq	r3, #1
 8005782:	2300      	movne	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d012      	beq.n	80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800578a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005792:	f023 030f 	bic.w	r3, r3, #15
 8005796:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005798:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800579a:	e009      	b.n	80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80057ae:	e000      	b.n	80057b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80057b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80057ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3784      	adds	r7, #132	@ 0x84
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd90      	pop	{r4, r7, pc}
 80057c6:	bf00      	nop
 80057c8:	50000100 	.word	0x50000100
 80057cc:	50000400 	.word	0x50000400
 80057d0:	50000500 	.word	0x50000500
 80057d4:	50000300 	.word	0x50000300
 80057d8:	50000700 	.word	0x50000700
 80057dc:	50000600 	.word	0x50000600

080057e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <__NVIC_SetPriorityGrouping+0x44>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057fc:	4013      	ands	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005808:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800580c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005812:	4a04      	ldr	r2, [pc, #16]	@ (8005824 <__NVIC_SetPriorityGrouping+0x44>)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	60d3      	str	r3, [r2, #12]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	e000ed00 	.word	0xe000ed00

08005828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800582c:	4b04      	ldr	r3, [pc, #16]	@ (8005840 <__NVIC_GetPriorityGrouping+0x18>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	0a1b      	lsrs	r3, r3, #8
 8005832:	f003 0307 	and.w	r3, r3, #7
}
 8005836:	4618      	mov	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	e000ed00 	.word	0xe000ed00

08005844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800584e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005852:	2b00      	cmp	r3, #0
 8005854:	db0b      	blt.n	800586e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	f003 021f 	and.w	r2, r3, #31
 800585c:	4907      	ldr	r1, [pc, #28]	@ (800587c <__NVIC_EnableIRQ+0x38>)
 800585e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	2001      	movs	r0, #1
 8005866:	fa00 f202 	lsl.w	r2, r0, r2
 800586a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	e000e100 	.word	0xe000e100

08005880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	6039      	str	r1, [r7, #0]
 800588a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800588c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005890:	2b00      	cmp	r3, #0
 8005892:	db0a      	blt.n	80058aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	490c      	ldr	r1, [pc, #48]	@ (80058cc <__NVIC_SetPriority+0x4c>)
 800589a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589e:	0112      	lsls	r2, r2, #4
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	440b      	add	r3, r1
 80058a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058a8:	e00a      	b.n	80058c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	4908      	ldr	r1, [pc, #32]	@ (80058d0 <__NVIC_SetPriority+0x50>)
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	3b04      	subs	r3, #4
 80058b8:	0112      	lsls	r2, r2, #4
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	440b      	add	r3, r1
 80058be:	761a      	strb	r2, [r3, #24]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	e000e100 	.word	0xe000e100
 80058d0:	e000ed00 	.word	0xe000ed00

080058d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b089      	sub	sp, #36	@ 0x24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f1c3 0307 	rsb	r3, r3, #7
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	bf28      	it	cs
 80058f2:	2304      	movcs	r3, #4
 80058f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3304      	adds	r3, #4
 80058fa:	2b06      	cmp	r3, #6
 80058fc:	d902      	bls.n	8005904 <NVIC_EncodePriority+0x30>
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	3b03      	subs	r3, #3
 8005902:	e000      	b.n	8005906 <NVIC_EncodePriority+0x32>
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005908:	f04f 32ff 	mov.w	r2, #4294967295
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43da      	mvns	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	401a      	ands	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800591c:	f04f 31ff 	mov.w	r1, #4294967295
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	43d9      	mvns	r1, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800592c:	4313      	orrs	r3, r2
         );
}
 800592e:	4618      	mov	r0, r3
 8005930:	3724      	adds	r7, #36	@ 0x24
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3b01      	subs	r3, #1
 8005948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800594c:	d301      	bcc.n	8005952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800594e:	2301      	movs	r3, #1
 8005950:	e00f      	b.n	8005972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005952:	4a0a      	ldr	r2, [pc, #40]	@ (800597c <SysTick_Config+0x40>)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3b01      	subs	r3, #1
 8005958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800595a:	210f      	movs	r1, #15
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	f7ff ff8e 	bl	8005880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005964:	4b05      	ldr	r3, [pc, #20]	@ (800597c <SysTick_Config+0x40>)
 8005966:	2200      	movs	r2, #0
 8005968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800596a:	4b04      	ldr	r3, [pc, #16]	@ (800597c <SysTick_Config+0x40>)
 800596c:	2207      	movs	r2, #7
 800596e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	e000e010 	.word	0xe000e010

08005980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff ff29 	bl	80057e0 <__NVIC_SetPriorityGrouping>
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b086      	sub	sp, #24
 800599a:	af00      	add	r7, sp, #0
 800599c:	4603      	mov	r3, r0
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059a4:	f7ff ff40 	bl	8005828 <__NVIC_GetPriorityGrouping>
 80059a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	6978      	ldr	r0, [r7, #20]
 80059b0:	f7ff ff90 	bl	80058d4 <NVIC_EncodePriority>
 80059b4:	4602      	mov	r2, r0
 80059b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ba:	4611      	mov	r1, r2
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff ff5f 	bl	8005880 <__NVIC_SetPriority>
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	4603      	mov	r3, r0
 80059d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff ff33 	bl	8005844 <__NVIC_EnableIRQ>
}
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff ffa4 	bl	800593c <SysTick_Config>
 80059f4:	4603      	mov	r3, r0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e08d      	b.n	8005b2e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	4b47      	ldr	r3, [pc, #284]	@ (8005b38 <HAL_DMA_Init+0x138>)
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d80f      	bhi.n	8005a3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	4b45      	ldr	r3, [pc, #276]	@ (8005b3c <HAL_DMA_Init+0x13c>)
 8005a26:	4413      	add	r3, r2
 8005a28:	4a45      	ldr	r2, [pc, #276]	@ (8005b40 <HAL_DMA_Init+0x140>)
 8005a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2e:	091b      	lsrs	r3, r3, #4
 8005a30:	009a      	lsls	r2, r3, #2
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a42      	ldr	r2, [pc, #264]	@ (8005b44 <HAL_DMA_Init+0x144>)
 8005a3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a3c:	e00e      	b.n	8005a5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	4b40      	ldr	r3, [pc, #256]	@ (8005b48 <HAL_DMA_Init+0x148>)
 8005a46:	4413      	add	r3, r2
 8005a48:	4a3d      	ldr	r2, [pc, #244]	@ (8005b40 <HAL_DMA_Init+0x140>)
 8005a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4e:	091b      	lsrs	r3, r3, #4
 8005a50:	009a      	lsls	r2, r3, #2
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a3c      	ldr	r2, [pc, #240]	@ (8005b4c <HAL_DMA_Init+0x14c>)
 8005a5a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa76 	bl	8005fa0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005abc:	d102      	bne.n	8005ac4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ad8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <HAL_DMA_Init+0x104>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d80c      	bhi.n	8005b04 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fa96 	bl	800601c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b00:	605a      	str	r2, [r3, #4]
 8005b02:	e008      	b.n	8005b16 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40020407 	.word	0x40020407
 8005b3c:	bffdfff8 	.word	0xbffdfff8
 8005b40:	cccccccd 	.word	0xcccccccd
 8005b44:	40020000 	.word	0x40020000
 8005b48:	bffdfbf8 	.word	0xbffdfbf8
 8005b4c:	40020400 	.word	0x40020400

08005b50 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_DMA_Start_IT+0x20>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e066      	b.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d155      	bne.n	8005c30 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f9bb 	bl	8005f24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 020e 	orr.w	r2, r2, #14
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e00f      	b.n	8005be8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0204 	bic.w	r2, r2, #4
 8005bd6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 020a 	orr.w	r2, r2, #10
 8005be6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c04:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d007      	beq.n	8005c1e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c1c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0201 	orr.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	e005      	b.n	8005c3c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d005      	beq.n	8005c6a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2204      	movs	r2, #4
 8005c62:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
 8005c68:	e037      	b.n	8005cda <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 020e 	bic.w	r2, r2, #14
 8005c78:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c88:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0201 	bic.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9e:	f003 021f 	and.w	r2, r3, #31
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8005cac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005cb6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00c      	beq.n	8005cda <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005cd8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d00d      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2204      	movs	r2, #4
 8005d14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	73fb      	strb	r3, [r7, #15]
 8005d2a:	e047      	b.n	8005dbc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 020e 	bic.w	r2, r2, #14
 8005d3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0201 	bic.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d60:	f003 021f 	and.w	r2, r3, #31
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d68:	2101      	movs	r1, #1
 8005d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8005d6e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d78:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00c      	beq.n	8005d9c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d90:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d9a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	4798      	blx	r3
    }
  }
  return status;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2204      	movs	r2, #4
 8005de8:	409a      	lsls	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d026      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x7a>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d021      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d107      	bne.n	8005e1a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0204 	bic.w	r2, r2, #4
 8005e18:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1e:	f003 021f 	and.w	r2, r3, #31
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e26:	2104      	movs	r1, #4
 8005e28:	fa01 f202 	lsl.w	r2, r1, r2
 8005e2c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d071      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005e3e:	e06c      	b.n	8005f1a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e44:	f003 031f 	and.w	r3, r3, #31
 8005e48:	2202      	movs	r2, #2
 8005e4a:	409a      	lsls	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d02e      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d029      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10b      	bne.n	8005e84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 020a 	bic.w	r2, r2, #10
 8005e7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e88:	f003 021f 	and.w	r2, r3, #31
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e90:	2102      	movs	r1, #2
 8005e92:	fa01 f202 	lsl.w	r2, r1, r2
 8005e96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d038      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005eb0:	e033      	b.n	8005f1a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb6:	f003 031f 	and.w	r3, r3, #31
 8005eba:	2208      	movs	r2, #8
 8005ebc:	409a      	lsls	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d02a      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d025      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 020e 	bic.w	r2, r2, #14
 8005ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee4:	f003 021f 	and.w	r2, r3, #31
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eec:	2101      	movs	r1, #1
 8005eee:	fa01 f202 	lsl.w	r2, r1, r2
 8005ef2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f1a:	bf00      	nop
 8005f1c:	bf00      	nop
}
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f3a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f4c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f52:	f003 021f 	and.w	r2, r3, #31
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b10      	cmp	r3, #16
 8005f70:	d108      	bne.n	8005f84 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f82:	e007      	b.n	8005f94 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	60da      	str	r2, [r3, #12]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	461a      	mov	r2, r3
 8005fae:	4b16      	ldr	r3, [pc, #88]	@ (8006008 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d802      	bhi.n	8005fba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005fb4:	4b15      	ldr	r3, [pc, #84]	@ (800600c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	e001      	b.n	8005fbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005fba:	4b15      	ldr	r3, [pc, #84]	@ (8006010 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005fbc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	3b08      	subs	r3, #8
 8005fca:	4a12      	ldr	r2, [pc, #72]	@ (8006014 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd0:	091b      	lsrs	r3, r3, #4
 8005fd2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd8:	089b      	lsrs	r3, r3, #2
 8005fda:	009a      	lsls	r2, r3, #2
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4413      	add	r3, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8006018 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005fea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40020407 	.word	0x40020407
 800600c:	40020800 	.word	0x40020800
 8006010:	40020820 	.word	0x40020820
 8006014:	cccccccd 	.word	0xcccccccd
 8006018:	40020880 	.word	0x40020880

0800601c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4b0b      	ldr	r3, [pc, #44]	@ (800605c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	461a      	mov	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a08      	ldr	r2, [pc, #32]	@ (8006060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800603e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3b01      	subs	r3, #1
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	2201      	movs	r2, #1
 800604a:	409a      	lsls	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006050:	bf00      	nop
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	1000823f 	.word	0x1000823f
 8006060:	40020940 	.word	0x40020940

08006064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006072:	e15a      	b.n	800632a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	2101      	movs	r1, #1
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	fa01 f303 	lsl.w	r3, r1, r3
 8006080:	4013      	ands	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 814c 	beq.w	8006324 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	2b01      	cmp	r3, #1
 8006096:	d005      	beq.n	80060a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d130      	bne.n	8006106 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	2203      	movs	r2, #3
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4013      	ands	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060da:	2201      	movs	r2, #1
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	fa02 f303 	lsl.w	r3, r2, r3
 80060e2:	43db      	mvns	r3, r3
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4013      	ands	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	091b      	lsrs	r3, r3, #4
 80060f0:	f003 0201 	and.w	r2, r3, #1
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b03      	cmp	r3, #3
 8006110:	d017      	beq.n	8006142 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	2203      	movs	r2, #3
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	43db      	mvns	r3, r3
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4013      	ands	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d123      	bne.n	8006196 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	08da      	lsrs	r2, r3, #3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3208      	adds	r2, #8
 8006156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	220f      	movs	r2, #15
 8006166:	fa02 f303 	lsl.w	r3, r2, r3
 800616a:	43db      	mvns	r3, r3
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4013      	ands	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	08da      	lsrs	r2, r3, #3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3208      	adds	r2, #8
 8006190:	6939      	ldr	r1, [r7, #16]
 8006192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	2203      	movs	r2, #3
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	43db      	mvns	r3, r3
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4013      	ands	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f003 0203 	and.w	r2, r3, #3
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 80a6 	beq.w	8006324 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061d8:	4b5b      	ldr	r3, [pc, #364]	@ (8006348 <HAL_GPIO_Init+0x2e4>)
 80061da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061dc:	4a5a      	ldr	r2, [pc, #360]	@ (8006348 <HAL_GPIO_Init+0x2e4>)
 80061de:	f043 0301 	orr.w	r3, r3, #1
 80061e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80061e4:	4b58      	ldr	r3, [pc, #352]	@ (8006348 <HAL_GPIO_Init+0x2e4>)
 80061e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061f0:	4a56      	ldr	r2, [pc, #344]	@ (800634c <HAL_GPIO_Init+0x2e8>)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	089b      	lsrs	r3, r3, #2
 80061f6:	3302      	adds	r3, #2
 80061f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f003 0303 	and.w	r3, r3, #3
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	220f      	movs	r2, #15
 8006208:	fa02 f303 	lsl.w	r3, r2, r3
 800620c:	43db      	mvns	r3, r3
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4013      	ands	r3, r2
 8006212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800621a:	d01f      	beq.n	800625c <HAL_GPIO_Init+0x1f8>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a4c      	ldr	r2, [pc, #304]	@ (8006350 <HAL_GPIO_Init+0x2ec>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d019      	beq.n	8006258 <HAL_GPIO_Init+0x1f4>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a4b      	ldr	r2, [pc, #300]	@ (8006354 <HAL_GPIO_Init+0x2f0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d013      	beq.n	8006254 <HAL_GPIO_Init+0x1f0>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a4a      	ldr	r2, [pc, #296]	@ (8006358 <HAL_GPIO_Init+0x2f4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00d      	beq.n	8006250 <HAL_GPIO_Init+0x1ec>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a49      	ldr	r2, [pc, #292]	@ (800635c <HAL_GPIO_Init+0x2f8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d007      	beq.n	800624c <HAL_GPIO_Init+0x1e8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a48      	ldr	r2, [pc, #288]	@ (8006360 <HAL_GPIO_Init+0x2fc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d101      	bne.n	8006248 <HAL_GPIO_Init+0x1e4>
 8006244:	2305      	movs	r3, #5
 8006246:	e00a      	b.n	800625e <HAL_GPIO_Init+0x1fa>
 8006248:	2306      	movs	r3, #6
 800624a:	e008      	b.n	800625e <HAL_GPIO_Init+0x1fa>
 800624c:	2304      	movs	r3, #4
 800624e:	e006      	b.n	800625e <HAL_GPIO_Init+0x1fa>
 8006250:	2303      	movs	r3, #3
 8006252:	e004      	b.n	800625e <HAL_GPIO_Init+0x1fa>
 8006254:	2302      	movs	r3, #2
 8006256:	e002      	b.n	800625e <HAL_GPIO_Init+0x1fa>
 8006258:	2301      	movs	r3, #1
 800625a:	e000      	b.n	800625e <HAL_GPIO_Init+0x1fa>
 800625c:	2300      	movs	r3, #0
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	f002 0203 	and.w	r2, r2, #3
 8006264:	0092      	lsls	r2, r2, #2
 8006266:	4093      	lsls	r3, r2
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800626e:	4937      	ldr	r1, [pc, #220]	@ (800634c <HAL_GPIO_Init+0x2e8>)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	089b      	lsrs	r3, r3, #2
 8006274:	3302      	adds	r3, #2
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800627c:	4b39      	ldr	r3, [pc, #228]	@ (8006364 <HAL_GPIO_Init+0x300>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	43db      	mvns	r3, r3
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4013      	ands	r3, r2
 800628a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80062a0:	4a30      	ldr	r2, [pc, #192]	@ (8006364 <HAL_GPIO_Init+0x300>)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80062a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006364 <HAL_GPIO_Init+0x300>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	43db      	mvns	r3, r3
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	4013      	ands	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062ca:	4a26      	ldr	r2, [pc, #152]	@ (8006364 <HAL_GPIO_Init+0x300>)
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80062d0:	4b24      	ldr	r3, [pc, #144]	@ (8006364 <HAL_GPIO_Init+0x300>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	43db      	mvns	r3, r3
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4013      	ands	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006364 <HAL_GPIO_Init+0x300>)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80062fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006364 <HAL_GPIO_Init+0x300>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	43db      	mvns	r3, r3
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4013      	ands	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800631e:	4a11      	ldr	r2, [pc, #68]	@ (8006364 <HAL_GPIO_Init+0x300>)
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	3301      	adds	r3, #1
 8006328:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	fa22 f303 	lsr.w	r3, r2, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	f47f ae9d 	bne.w	8006074 <HAL_GPIO_Init+0x10>
  }
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	40021000 	.word	0x40021000
 800634c:	40010000 	.word	0x40010000
 8006350:	48000400 	.word	0x48000400
 8006354:	48000800 	.word	0x48000800
 8006358:	48000c00 	.word	0x48000c00
 800635c:	48001000 	.word	0x48001000
 8006360:	48001400 	.word	0x48001400
 8006364:	40010400 	.word	0x40010400

08006368 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	887b      	ldrh	r3, [r7, #2]
 800637a:	4013      	ands	r3, r2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006380:	2301      	movs	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
 8006384:	e001      	b.n	800638a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800638a:	7bfb      	ldrb	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	807b      	strh	r3, [r7, #2]
 80063a4:	4613      	mov	r3, r2
 80063a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063a8:	787b      	ldrb	r3, [r7, #1]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063ae:	887a      	ldrh	r2, [r7, #2]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80063b4:	e002      	b.n	80063bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80063b6:	887a      	ldrh	r2, [r7, #2]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e08d      	b.n	80064f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fb ff10 	bl	8002214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2224      	movs	r2, #36	@ 0x24
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0201 	bic.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006418:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006428:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d107      	bne.n	8006442 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800643e:	609a      	str	r2, [r3, #8]
 8006440:	e006      	b.n	8006450 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800644e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d108      	bne.n	800646a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006466:	605a      	str	r2, [r3, #4]
 8006468:	e007      	b.n	800647a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800648c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800649c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69d9      	ldr	r1, [r3, #28]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1a      	ldr	r2, [r3, #32]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b20      	cmp	r3, #32
 8006512:	d138      	bne.n	8006586 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800651a:	2b01      	cmp	r3, #1
 800651c:	d101      	bne.n	8006522 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800651e:	2302      	movs	r3, #2
 8006520:	e032      	b.n	8006588 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2224      	movs	r2, #36	@ 0x24
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0201 	bic.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006550:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6819      	ldr	r1, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0201 	orr.w	r2, r2, #1
 8006570:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	e000      	b.n	8006588 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006586:	2302      	movs	r3, #2
  }
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d139      	bne.n	800661e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e033      	b.n	8006620 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2224      	movs	r2, #36	@ 0x24
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80065e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2220      	movs	r2, #32
 800660e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e000      	b.n	8006620 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800661e:	2302      	movs	r3, #2
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006630:	4b05      	ldr	r3, [pc, #20]	@ (8006648 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a04      	ldr	r2, [pc, #16]	@ (8006648 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800663a:	6013      	str	r3, [r2, #0]
}
 800663c:	bf00      	nop
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40007000 	.word	0x40007000

0800664c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d141      	bne.n	80066de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800665a:	4b4b      	ldr	r3, [pc, #300]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006666:	d131      	bne.n	80066cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006668:	4b47      	ldr	r3, [pc, #284]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800666a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800666e:	4a46      	ldr	r2, [pc, #280]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006674:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006678:	4b43      	ldr	r3, [pc, #268]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006680:	4a41      	ldr	r2, [pc, #260]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006686:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006688:	4b40      	ldr	r3, [pc, #256]	@ (800678c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2232      	movs	r2, #50	@ 0x32
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	4a3f      	ldr	r2, [pc, #252]	@ (8006790 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006694:	fba2 2303 	umull	r2, r3, r2, r3
 8006698:	0c9b      	lsrs	r3, r3, #18
 800669a:	3301      	adds	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800669e:	e002      	b.n	80066a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066a6:	4b38      	ldr	r3, [pc, #224]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066b2:	d102      	bne.n	80066ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f2      	bne.n	80066a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066ba:	4b33      	ldr	r3, [pc, #204]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066c6:	d158      	bne.n	800677a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e057      	b.n	800677c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d2:	4a2d      	ldr	r2, [pc, #180]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80066dc:	e04d      	b.n	800677a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066e4:	d141      	bne.n	800676a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066e6:	4b28      	ldr	r3, [pc, #160]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80066ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f2:	d131      	bne.n	8006758 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066f4:	4b24      	ldr	r3, [pc, #144]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066fa:	4a23      	ldr	r2, [pc, #140]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006700:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006704:	4b20      	ldr	r3, [pc, #128]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800670c:	4a1e      	ldr	r2, [pc, #120]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800670e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006712:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006714:	4b1d      	ldr	r3, [pc, #116]	@ (800678c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2232      	movs	r2, #50	@ 0x32
 800671a:	fb02 f303 	mul.w	r3, r2, r3
 800671e:	4a1c      	ldr	r2, [pc, #112]	@ (8006790 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006720:	fba2 2303 	umull	r2, r3, r2, r3
 8006724:	0c9b      	lsrs	r3, r3, #18
 8006726:	3301      	adds	r3, #1
 8006728:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800672a:	e002      	b.n	8006732 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3b01      	subs	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006732:	4b15      	ldr	r3, [pc, #84]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800673a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800673e:	d102      	bne.n	8006746 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1f2      	bne.n	800672c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006746:	4b10      	ldr	r3, [pc, #64]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800674e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006752:	d112      	bne.n	800677a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e011      	b.n	800677c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006758:	4b0b      	ldr	r3, [pc, #44]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800675a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800675e:	4a0a      	ldr	r2, [pc, #40]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006764:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006768:	e007      	b.n	800677a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800676a:	4b07      	ldr	r3, [pc, #28]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006772:	4a05      	ldr	r2, [pc, #20]	@ (8006788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006774:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006778:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	40007000 	.word	0x40007000
 800678c:	20000004 	.word	0x20000004
 8006790:	431bde83 	.word	0x431bde83

08006794 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006798:	4b05      	ldr	r3, [pc, #20]	@ (80067b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	4a04      	ldr	r2, [pc, #16]	@ (80067b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800679e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067a2:	6093      	str	r3, [r2, #8]
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40007000 	.word	0x40007000

080067b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e2fe      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d075      	beq.n	80068be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d2:	4b97      	ldr	r3, [pc, #604]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 030c 	and.w	r3, r3, #12
 80067da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067dc:	4b94      	ldr	r3, [pc, #592]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f003 0303 	and.w	r3, r3, #3
 80067e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b0c      	cmp	r3, #12
 80067ea:	d102      	bne.n	80067f2 <HAL_RCC_OscConfig+0x3e>
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d002      	beq.n	80067f8 <HAL_RCC_OscConfig+0x44>
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d10b      	bne.n	8006810 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f8:	4b8d      	ldr	r3, [pc, #564]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d05b      	beq.n	80068bc <HAL_RCC_OscConfig+0x108>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d157      	bne.n	80068bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e2d9      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006818:	d106      	bne.n	8006828 <HAL_RCC_OscConfig+0x74>
 800681a:	4b85      	ldr	r3, [pc, #532]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a84      	ldr	r2, [pc, #528]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	e01d      	b.n	8006864 <HAL_RCC_OscConfig+0xb0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006830:	d10c      	bne.n	800684c <HAL_RCC_OscConfig+0x98>
 8006832:	4b7f      	ldr	r3, [pc, #508]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a7e      	ldr	r2, [pc, #504]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7b      	ldr	r2, [pc, #492]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	e00b      	b.n	8006864 <HAL_RCC_OscConfig+0xb0>
 800684c:	4b78      	ldr	r3, [pc, #480]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a77      	ldr	r2, [pc, #476]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	4b75      	ldr	r3, [pc, #468]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a74      	ldr	r2, [pc, #464]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 800685e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d013      	beq.n	8006894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686c:	f7fd fc48 	bl	8004100 <HAL_GetTick>
 8006870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006874:	f7fd fc44 	bl	8004100 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b64      	cmp	r3, #100	@ 0x64
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e29e      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006886:	4b6a      	ldr	r3, [pc, #424]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0f0      	beq.n	8006874 <HAL_RCC_OscConfig+0xc0>
 8006892:	e014      	b.n	80068be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006894:	f7fd fc34 	bl	8004100 <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800689a:	e008      	b.n	80068ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800689c:	f7fd fc30 	bl	8004100 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b64      	cmp	r3, #100	@ 0x64
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e28a      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068ae:	4b60      	ldr	r3, [pc, #384]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1f0      	bne.n	800689c <HAL_RCC_OscConfig+0xe8>
 80068ba:	e000      	b.n	80068be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d075      	beq.n	80069b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ca:	4b59      	ldr	r3, [pc, #356]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 030c 	and.w	r3, r3, #12
 80068d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068d4:	4b56      	ldr	r3, [pc, #344]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b0c      	cmp	r3, #12
 80068e2:	d102      	bne.n	80068ea <HAL_RCC_OscConfig+0x136>
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d002      	beq.n	80068f0 <HAL_RCC_OscConfig+0x13c>
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d11f      	bne.n	8006930 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068f0:	4b4f      	ldr	r3, [pc, #316]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <HAL_RCC_OscConfig+0x154>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e25d      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006908:	4b49      	ldr	r3, [pc, #292]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	061b      	lsls	r3, r3, #24
 8006916:	4946      	ldr	r1, [pc, #280]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006918:	4313      	orrs	r3, r2
 800691a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800691c:	4b45      	ldr	r3, [pc, #276]	@ (8006a34 <HAL_RCC_OscConfig+0x280>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4618      	mov	r0, r3
 8006922:	f7fd fba1 	bl	8004068 <HAL_InitTick>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d043      	beq.n	80069b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e249      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d023      	beq.n	8006980 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006938:	4b3d      	ldr	r3, [pc, #244]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a3c      	ldr	r2, [pc, #240]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 800693e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006944:	f7fd fbdc 	bl	8004100 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800694c:	f7fd fbd8 	bl	8004100 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e232      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800695e:	4b34      	ldr	r3, [pc, #208]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696a:	4b31      	ldr	r3, [pc, #196]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	061b      	lsls	r3, r3, #24
 8006978:	492d      	ldr	r1, [pc, #180]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 800697a:	4313      	orrs	r3, r2
 800697c:	604b      	str	r3, [r1, #4]
 800697e:	e01a      	b.n	80069b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006980:	4b2b      	ldr	r3, [pc, #172]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a2a      	ldr	r2, [pc, #168]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006986:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800698a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698c:	f7fd fbb8 	bl	8004100 <HAL_GetTick>
 8006990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006994:	f7fd fbb4 	bl	8004100 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e20e      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069a6:	4b22      	ldr	r3, [pc, #136]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1f0      	bne.n	8006994 <HAL_RCC_OscConfig+0x1e0>
 80069b2:	e000      	b.n	80069b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d041      	beq.n	8006a46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d01c      	beq.n	8006a04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ca:	4b19      	ldr	r3, [pc, #100]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 80069cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069d0:	4a17      	ldr	r2, [pc, #92]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 80069d2:	f043 0301 	orr.w	r3, r3, #1
 80069d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069da:	f7fd fb91 	bl	8004100 <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069e0:	e008      	b.n	80069f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e2:	f7fd fb8d 	bl	8004100 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e1e7      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 80069f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0ef      	beq.n	80069e2 <HAL_RCC_OscConfig+0x22e>
 8006a02:	e020      	b.n	8006a46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a04:	4b0a      	ldr	r3, [pc, #40]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a0a:	4a09      	ldr	r2, [pc, #36]	@ (8006a30 <HAL_RCC_OscConfig+0x27c>)
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a14:	f7fd fb74 	bl	8004100 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a1a:	e00d      	b.n	8006a38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a1c:	f7fd fb70 	bl	8004100 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d906      	bls.n	8006a38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e1ca      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
 8006a2e:	bf00      	nop
 8006a30:	40021000 	.word	0x40021000
 8006a34:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a38:	4b8c      	ldr	r3, [pc, #560]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1ea      	bne.n	8006a1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 80a6 	beq.w	8006ba0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a54:	2300      	movs	r3, #0
 8006a56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a58:	4b84      	ldr	r3, [pc, #528]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_RCC_OscConfig+0x2b4>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <HAL_RCC_OscConfig+0x2b6>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00d      	beq.n	8006a8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a72:	4a7e      	ldr	r2, [pc, #504]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006a86:	2301      	movs	r3, #1
 8006a88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a8a:	4b79      	ldr	r3, [pc, #484]	@ (8006c70 <HAL_RCC_OscConfig+0x4bc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d118      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a96:	4b76      	ldr	r3, [pc, #472]	@ (8006c70 <HAL_RCC_OscConfig+0x4bc>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a75      	ldr	r2, [pc, #468]	@ (8006c70 <HAL_RCC_OscConfig+0x4bc>)
 8006a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aa2:	f7fd fb2d 	bl	8004100 <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aa8:	e008      	b.n	8006abc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aaa:	f7fd fb29 	bl	8004100 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e183      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006abc:	4b6c      	ldr	r3, [pc, #432]	@ (8006c70 <HAL_RCC_OscConfig+0x4bc>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0f0      	beq.n	8006aaa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d108      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x32e>
 8006ad0:	4b66      	ldr	r3, [pc, #408]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad6:	4a65      	ldr	r2, [pc, #404]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006ad8:	f043 0301 	orr.w	r3, r3, #1
 8006adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ae0:	e024      	b.n	8006b2c <HAL_RCC_OscConfig+0x378>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d110      	bne.n	8006b0c <HAL_RCC_OscConfig+0x358>
 8006aea:	4b60      	ldr	r3, [pc, #384]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af0:	4a5e      	ldr	r2, [pc, #376]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006af2:	f043 0304 	orr.w	r3, r3, #4
 8006af6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006afa:	4b5c      	ldr	r3, [pc, #368]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b00:	4a5a      	ldr	r2, [pc, #360]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b0a:	e00f      	b.n	8006b2c <HAL_RCC_OscConfig+0x378>
 8006b0c:	4b57      	ldr	r3, [pc, #348]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b12:	4a56      	ldr	r2, [pc, #344]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006b14:	f023 0301 	bic.w	r3, r3, #1
 8006b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b1c:	4b53      	ldr	r3, [pc, #332]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b22:	4a52      	ldr	r2, [pc, #328]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006b24:	f023 0304 	bic.w	r3, r3, #4
 8006b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d016      	beq.n	8006b62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b34:	f7fd fae4 	bl	8004100 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b3a:	e00a      	b.n	8006b52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b3c:	f7fd fae0 	bl	8004100 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e138      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b52:	4b46      	ldr	r3, [pc, #280]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0ed      	beq.n	8006b3c <HAL_RCC_OscConfig+0x388>
 8006b60:	e015      	b.n	8006b8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b62:	f7fd facd 	bl	8004100 <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b68:	e00a      	b.n	8006b80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b6a:	f7fd fac9 	bl	8004100 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e121      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b80:	4b3a      	ldr	r3, [pc, #232]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1ed      	bne.n	8006b6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b8e:	7ffb      	ldrb	r3, [r7, #31]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d105      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b94:	4b35      	ldr	r3, [pc, #212]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b98:	4a34      	ldr	r2, [pc, #208]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d03c      	beq.n	8006c26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01c      	beq.n	8006bee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bba:	4a2c      	ldr	r2, [pc, #176]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006bbc:	f043 0301 	orr.w	r3, r3, #1
 8006bc0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc4:	f7fd fa9c 	bl	8004100 <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bcc:	f7fd fa98 	bl	8004100 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e0f2      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bde:	4b23      	ldr	r3, [pc, #140]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0ef      	beq.n	8006bcc <HAL_RCC_OscConfig+0x418>
 8006bec:	e01b      	b.n	8006c26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bee:	4b1f      	ldr	r3, [pc, #124]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006bf6:	f023 0301 	bic.w	r3, r3, #1
 8006bfa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfe:	f7fd fa7f 	bl	8004100 <HAL_GetTick>
 8006c02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c04:	e008      	b.n	8006c18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c06:	f7fd fa7b 	bl	8004100 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e0d5      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c18:	4b14      	ldr	r3, [pc, #80]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1ef      	bne.n	8006c06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 80c9 	beq.w	8006dc2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c30:	4b0e      	ldr	r3, [pc, #56]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f003 030c 	and.w	r3, r3, #12
 8006c38:	2b0c      	cmp	r3, #12
 8006c3a:	f000 8083 	beq.w	8006d44 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d15e      	bne.n	8006d04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c46:	4b09      	ldr	r3, [pc, #36]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a08      	ldr	r2, [pc, #32]	@ (8006c6c <HAL_RCC_OscConfig+0x4b8>)
 8006c4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c52:	f7fd fa55 	bl	8004100 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c58:	e00c      	b.n	8006c74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c5a:	f7fd fa51 	bl	8004100 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d905      	bls.n	8006c74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e0ab      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c74:	4b55      	ldr	r3, [pc, #340]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1ec      	bne.n	8006c5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c80:	4b52      	ldr	r3, [pc, #328]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	4b52      	ldr	r3, [pc, #328]	@ (8006dd0 <HAL_RCC_OscConfig+0x61c>)
 8006c86:	4013      	ands	r3, r2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6a11      	ldr	r1, [r2, #32]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c90:	3a01      	subs	r2, #1
 8006c92:	0112      	lsls	r2, r2, #4
 8006c94:	4311      	orrs	r1, r2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006c9a:	0212      	lsls	r2, r2, #8
 8006c9c:	4311      	orrs	r1, r2
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006ca2:	0852      	lsrs	r2, r2, #1
 8006ca4:	3a01      	subs	r2, #1
 8006ca6:	0552      	lsls	r2, r2, #21
 8006ca8:	4311      	orrs	r1, r2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006cae:	0852      	lsrs	r2, r2, #1
 8006cb0:	3a01      	subs	r2, #1
 8006cb2:	0652      	lsls	r2, r2, #25
 8006cb4:	4311      	orrs	r1, r2
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006cba:	06d2      	lsls	r2, r2, #27
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	4943      	ldr	r1, [pc, #268]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cc4:	4b41      	ldr	r3, [pc, #260]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a40      	ldr	r2, [pc, #256]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006cca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006cd0:	4b3e      	ldr	r3, [pc, #248]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	4a3d      	ldr	r2, [pc, #244]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cdc:	f7fd fa10 	bl	8004100 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ce4:	f7fd fa0c 	bl	8004100 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e066      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cf6:	4b35      	ldr	r3, [pc, #212]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0f0      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x530>
 8006d02:	e05e      	b.n	8006dc2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d04:	4b31      	ldr	r3, [pc, #196]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a30      	ldr	r2, [pc, #192]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d10:	f7fd f9f6 	bl	8004100 <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d18:	f7fd f9f2 	bl	8004100 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e04c      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d2a:	4b28      	ldr	r3, [pc, #160]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f0      	bne.n	8006d18 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006d36:	4b25      	ldr	r3, [pc, #148]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	4924      	ldr	r1, [pc, #144]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006d3c:	4b25      	ldr	r3, [pc, #148]	@ (8006dd4 <HAL_RCC_OscConfig+0x620>)
 8006d3e:	4013      	ands	r3, r2
 8006d40:	60cb      	str	r3, [r1, #12]
 8006d42:	e03e      	b.n	8006dc2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e039      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006d50:	4b1e      	ldr	r3, [pc, #120]	@ (8006dcc <HAL_RCC_OscConfig+0x618>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f003 0203 	and.w	r2, r3, #3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d12c      	bne.n	8006dbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d123      	bne.n	8006dbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d11b      	bne.n	8006dbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d113      	bne.n	8006dbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da0:	085b      	lsrs	r3, r3, #1
 8006da2:	3b01      	subs	r3, #1
 8006da4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d109      	bne.n	8006dbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006db4:	085b      	lsrs	r3, r3, #1
 8006db6:	3b01      	subs	r3, #1
 8006db8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d001      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3720      	adds	r7, #32
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	019f800c 	.word	0x019f800c
 8006dd4:	feeefffc 	.word	0xfeeefffc

08006dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e11e      	b.n	800702e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006df0:	4b91      	ldr	r3, [pc, #580]	@ (8007038 <HAL_RCC_ClockConfig+0x260>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d910      	bls.n	8006e20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dfe:	4b8e      	ldr	r3, [pc, #568]	@ (8007038 <HAL_RCC_ClockConfig+0x260>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f023 020f 	bic.w	r2, r3, #15
 8006e06:	498c      	ldr	r1, [pc, #560]	@ (8007038 <HAL_RCC_ClockConfig+0x260>)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e0e:	4b8a      	ldr	r3, [pc, #552]	@ (8007038 <HAL_RCC_ClockConfig+0x260>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d001      	beq.n	8006e20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e106      	b.n	800702e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d073      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d129      	bne.n	8006e88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e34:	4b81      	ldr	r3, [pc, #516]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e0f4      	b.n	800702e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006e44:	f000 f99e 	bl	8007184 <RCC_GetSysClockFreqFromPLLSource>
 8006e48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	4a7c      	ldr	r2, [pc, #496]	@ (8007040 <HAL_RCC_ClockConfig+0x268>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d93f      	bls.n	8006ed2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e52:	4b7a      	ldr	r3, [pc, #488]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d033      	beq.n	8006ed2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d12f      	bne.n	8006ed2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e72:	4b72      	ldr	r3, [pc, #456]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e7a:	4a70      	ldr	r2, [pc, #448]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006e82:	2380      	movs	r3, #128	@ 0x80
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	e024      	b.n	8006ed2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d107      	bne.n	8006ea0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e90:	4b6a      	ldr	r3, [pc, #424]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e0c6      	b.n	800702e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ea0:	4b66      	ldr	r3, [pc, #408]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e0be      	b.n	800702e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006eb0:	f000 f8ce 	bl	8007050 <HAL_RCC_GetSysClockFreq>
 8006eb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	4a61      	ldr	r2, [pc, #388]	@ (8007040 <HAL_RCC_ClockConfig+0x268>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d909      	bls.n	8006ed2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ec6:	4a5d      	ldr	r2, [pc, #372]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ecc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006ece:	2380      	movs	r3, #128	@ 0x80
 8006ed0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f023 0203 	bic.w	r2, r3, #3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	4957      	ldr	r1, [pc, #348]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ee4:	f7fd f90c 	bl	8004100 <HAL_GetTick>
 8006ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eea:	e00a      	b.n	8006f02 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eec:	f7fd f908 	bl	8004100 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e095      	b.n	800702e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f02:	4b4e      	ldr	r3, [pc, #312]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 020c 	and.w	r2, r3, #12
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d1eb      	bne.n	8006eec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d023      	beq.n	8006f68 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f2c:	4b43      	ldr	r3, [pc, #268]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	4a42      	ldr	r2, [pc, #264]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006f32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f36:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006f44:	4b3d      	ldr	r3, [pc, #244]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006f4c:	4a3b      	ldr	r2, [pc, #236]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006f4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f54:	4b39      	ldr	r3, [pc, #228]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	4936      	ldr	r1, [pc, #216]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	608b      	str	r3, [r1, #8]
 8006f66:	e008      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2b80      	cmp	r3, #128	@ 0x80
 8006f6c:	d105      	bne.n	8006f7a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006f6e:	4b33      	ldr	r3, [pc, #204]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	4a32      	ldr	r2, [pc, #200]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006f74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f78:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8007038 <HAL_RCC_ClockConfig+0x260>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d21d      	bcs.n	8006fc4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f88:	4b2b      	ldr	r3, [pc, #172]	@ (8007038 <HAL_RCC_ClockConfig+0x260>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f023 020f 	bic.w	r2, r3, #15
 8006f90:	4929      	ldr	r1, [pc, #164]	@ (8007038 <HAL_RCC_ClockConfig+0x260>)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f98:	f7fd f8b2 	bl	8004100 <HAL_GetTick>
 8006f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f9e:	e00a      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fa0:	f7fd f8ae 	bl	8004100 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e03b      	b.n	800702e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fb6:	4b20      	ldr	r3, [pc, #128]	@ (8007038 <HAL_RCC_ClockConfig+0x260>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d1ed      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d008      	beq.n	8006fe2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	4917      	ldr	r1, [pc, #92]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0308 	and.w	r3, r3, #8
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fee:	4b13      	ldr	r3, [pc, #76]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	490f      	ldr	r1, [pc, #60]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007002:	f000 f825 	bl	8007050 <HAL_RCC_GetSysClockFreq>
 8007006:	4602      	mov	r2, r0
 8007008:	4b0c      	ldr	r3, [pc, #48]	@ (800703c <HAL_RCC_ClockConfig+0x264>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	091b      	lsrs	r3, r3, #4
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	490c      	ldr	r1, [pc, #48]	@ (8007044 <HAL_RCC_ClockConfig+0x26c>)
 8007014:	5ccb      	ldrb	r3, [r1, r3]
 8007016:	f003 031f 	and.w	r3, r3, #31
 800701a:	fa22 f303 	lsr.w	r3, r2, r3
 800701e:	4a0a      	ldr	r2, [pc, #40]	@ (8007048 <HAL_RCC_ClockConfig+0x270>)
 8007020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007022:	4b0a      	ldr	r3, [pc, #40]	@ (800704c <HAL_RCC_ClockConfig+0x274>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4618      	mov	r0, r3
 8007028:	f7fd f81e 	bl	8004068 <HAL_InitTick>
 800702c:	4603      	mov	r3, r0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	40022000 	.word	0x40022000
 800703c:	40021000 	.word	0x40021000
 8007040:	04c4b400 	.word	0x04c4b400
 8007044:	08013cf8 	.word	0x08013cf8
 8007048:	20000004 	.word	0x20000004
 800704c:	20000008 	.word	0x20000008

08007050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007056:	4b2c      	ldr	r3, [pc, #176]	@ (8007108 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 030c 	and.w	r3, r3, #12
 800705e:	2b04      	cmp	r3, #4
 8007060:	d102      	bne.n	8007068 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007062:	4b2a      	ldr	r3, [pc, #168]	@ (800710c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007064:	613b      	str	r3, [r7, #16]
 8007066:	e047      	b.n	80070f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007068:	4b27      	ldr	r3, [pc, #156]	@ (8007108 <HAL_RCC_GetSysClockFreq+0xb8>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f003 030c 	and.w	r3, r3, #12
 8007070:	2b08      	cmp	r3, #8
 8007072:	d102      	bne.n	800707a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007074:	4b26      	ldr	r3, [pc, #152]	@ (8007110 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	e03e      	b.n	80070f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800707a:	4b23      	ldr	r3, [pc, #140]	@ (8007108 <HAL_RCC_GetSysClockFreq+0xb8>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f003 030c 	and.w	r3, r3, #12
 8007082:	2b0c      	cmp	r3, #12
 8007084:	d136      	bne.n	80070f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007086:	4b20      	ldr	r3, [pc, #128]	@ (8007108 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007090:	4b1d      	ldr	r3, [pc, #116]	@ (8007108 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	091b      	lsrs	r3, r3, #4
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	3301      	adds	r3, #1
 800709c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d10c      	bne.n	80070be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007110 <HAL_RCC_GetSysClockFreq+0xc0>)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ac:	4a16      	ldr	r2, [pc, #88]	@ (8007108 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070ae:	68d2      	ldr	r2, [r2, #12]
 80070b0:	0a12      	lsrs	r2, r2, #8
 80070b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	617b      	str	r3, [r7, #20]
      break;
 80070bc:	e00c      	b.n	80070d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070be:	4a13      	ldr	r2, [pc, #76]	@ (800710c <HAL_RCC_GetSysClockFreq+0xbc>)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c6:	4a10      	ldr	r2, [pc, #64]	@ (8007108 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070c8:	68d2      	ldr	r2, [r2, #12]
 80070ca:	0a12      	lsrs	r2, r2, #8
 80070cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80070d0:	fb02 f303 	mul.w	r3, r2, r3
 80070d4:	617b      	str	r3, [r7, #20]
      break;
 80070d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007108 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	0e5b      	lsrs	r3, r3, #25
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	3301      	adds	r3, #1
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	e001      	b.n	80070f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80070f8:	693b      	ldr	r3, [r7, #16]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40021000 	.word	0x40021000
 800710c:	00f42400 	.word	0x00f42400
 8007110:	016e3600 	.word	0x016e3600

08007114 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007118:	4b03      	ldr	r3, [pc, #12]	@ (8007128 <HAL_RCC_GetHCLKFreq+0x14>)
 800711a:	681b      	ldr	r3, [r3, #0]
}
 800711c:	4618      	mov	r0, r3
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20000004 	.word	0x20000004

0800712c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007130:	f7ff fff0 	bl	8007114 <HAL_RCC_GetHCLKFreq>
 8007134:	4602      	mov	r2, r0
 8007136:	4b06      	ldr	r3, [pc, #24]	@ (8007150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	0a1b      	lsrs	r3, r3, #8
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	4904      	ldr	r1, [pc, #16]	@ (8007154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007142:	5ccb      	ldrb	r3, [r1, r3]
 8007144:	f003 031f 	and.w	r3, r3, #31
 8007148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800714c:	4618      	mov	r0, r3
 800714e:	bd80      	pop	{r7, pc}
 8007150:	40021000 	.word	0x40021000
 8007154:	08013d08 	.word	0x08013d08

08007158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800715c:	f7ff ffda 	bl	8007114 <HAL_RCC_GetHCLKFreq>
 8007160:	4602      	mov	r2, r0
 8007162:	4b06      	ldr	r3, [pc, #24]	@ (800717c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	0adb      	lsrs	r3, r3, #11
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	4904      	ldr	r1, [pc, #16]	@ (8007180 <HAL_RCC_GetPCLK2Freq+0x28>)
 800716e:	5ccb      	ldrb	r3, [r1, r3]
 8007170:	f003 031f 	and.w	r3, r3, #31
 8007174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007178:	4618      	mov	r0, r3
 800717a:	bd80      	pop	{r7, pc}
 800717c:	40021000 	.word	0x40021000
 8007180:	08013d08 	.word	0x08013d08

08007184 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800718a:	4b1e      	ldr	r3, [pc, #120]	@ (8007204 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f003 0303 	and.w	r3, r3, #3
 8007192:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007194:	4b1b      	ldr	r3, [pc, #108]	@ (8007204 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	091b      	lsrs	r3, r3, #4
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	3301      	adds	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d10c      	bne.n	80071c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071a8:	4a17      	ldr	r2, [pc, #92]	@ (8007208 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b0:	4a14      	ldr	r2, [pc, #80]	@ (8007204 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071b2:	68d2      	ldr	r2, [r2, #12]
 80071b4:	0a12      	lsrs	r2, r2, #8
 80071b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071ba:	fb02 f303 	mul.w	r3, r2, r3
 80071be:	617b      	str	r3, [r7, #20]
    break;
 80071c0:	e00c      	b.n	80071dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071c2:	4a12      	ldr	r2, [pc, #72]	@ (800720c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007204 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071cc:	68d2      	ldr	r2, [r2, #12]
 80071ce:	0a12      	lsrs	r2, r2, #8
 80071d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071d4:	fb02 f303 	mul.w	r3, r2, r3
 80071d8:	617b      	str	r3, [r7, #20]
    break;
 80071da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071dc:	4b09      	ldr	r3, [pc, #36]	@ (8007204 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	0e5b      	lsrs	r3, r3, #25
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	3301      	adds	r3, #1
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80071f6:	687b      	ldr	r3, [r7, #4]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	371c      	adds	r7, #28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	40021000 	.word	0x40021000
 8007208:	016e3600 	.word	0x016e3600
 800720c:	00f42400 	.word	0x00f42400

08007210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007218:	2300      	movs	r3, #0
 800721a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800721c:	2300      	movs	r3, #0
 800721e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8098 	beq.w	800735e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800722e:	2300      	movs	r3, #0
 8007230:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007232:	4b43      	ldr	r3, [pc, #268]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10d      	bne.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800723e:	4b40      	ldr	r3, [pc, #256]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007242:	4a3f      	ldr	r2, [pc, #252]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007248:	6593      	str	r3, [r2, #88]	@ 0x58
 800724a:	4b3d      	ldr	r3, [pc, #244]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800724c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800724e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007252:	60bb      	str	r3, [r7, #8]
 8007254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007256:	2301      	movs	r3, #1
 8007258:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800725a:	4b3a      	ldr	r3, [pc, #232]	@ (8007344 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a39      	ldr	r2, [pc, #228]	@ (8007344 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007264:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007266:	f7fc ff4b 	bl	8004100 <HAL_GetTick>
 800726a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800726c:	e009      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800726e:	f7fc ff47 	bl	8004100 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d902      	bls.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	74fb      	strb	r3, [r7, #19]
        break;
 8007280:	e005      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007282:	4b30      	ldr	r3, [pc, #192]	@ (8007344 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0ef      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800728e:	7cfb      	ldrb	r3, [r7, #19]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d159      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007294:	4b2a      	ldr	r3, [pc, #168]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800729a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800729e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01e      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d019      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80072b0:	4b23      	ldr	r3, [pc, #140]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072bc:	4b20      	ldr	r3, [pc, #128]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80072dc:	4a18      	ldr	r2, [pc, #96]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d016      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ee:	f7fc ff07 	bl	8004100 <HAL_GetTick>
 80072f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072f4:	e00b      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f6:	f7fc ff03 	bl	8004100 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007304:	4293      	cmp	r3, r2
 8007306:	d902      	bls.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	74fb      	strb	r3, [r7, #19]
            break;
 800730c:	e006      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800730e:	4b0c      	ldr	r3, [pc, #48]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0ec      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800731c:	7cfb      	ldrb	r3, [r7, #19]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10b      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007322:	4b07      	ldr	r3, [pc, #28]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007328:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007330:	4903      	ldr	r1, [pc, #12]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007338:	e008      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800733a:	7cfb      	ldrb	r3, [r7, #19]
 800733c:	74bb      	strb	r3, [r7, #18]
 800733e:	e005      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007340:	40021000 	.word	0x40021000
 8007344:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007348:	7cfb      	ldrb	r3, [r7, #19]
 800734a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800734c:	7c7b      	ldrb	r3, [r7, #17]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d105      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007352:	4ba7      	ldr	r3, [pc, #668]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007356:	4aa6      	ldr	r2, [pc, #664]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007358:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800735c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800736a:	4ba1      	ldr	r3, [pc, #644]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800736c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007370:	f023 0203 	bic.w	r2, r3, #3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	499d      	ldr	r1, [pc, #628]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00a      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800738c:	4b98      	ldr	r3, [pc, #608]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800738e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007392:	f023 020c 	bic.w	r2, r3, #12
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	4995      	ldr	r1, [pc, #596]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800739c:	4313      	orrs	r3, r2
 800739e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073ae:	4b90      	ldr	r3, [pc, #576]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	498c      	ldr	r1, [pc, #560]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0308 	and.w	r3, r3, #8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073d0:	4b87      	ldr	r3, [pc, #540]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	4984      	ldr	r1, [pc, #528]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0310 	and.w	r3, r3, #16
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073f2:	4b7f      	ldr	r3, [pc, #508]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	497b      	ldr	r1, [pc, #492]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007402:	4313      	orrs	r3, r2
 8007404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0320 	and.w	r3, r3, #32
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00a      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007414:	4b76      	ldr	r3, [pc, #472]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800741a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	4973      	ldr	r1, [pc, #460]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007424:	4313      	orrs	r3, r2
 8007426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007436:	4b6e      	ldr	r3, [pc, #440]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	496a      	ldr	r1, [pc, #424]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007446:	4313      	orrs	r3, r2
 8007448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007458:	4b65      	ldr	r3, [pc, #404]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800745a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800745e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	4962      	ldr	r1, [pc, #392]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007468:	4313      	orrs	r3, r2
 800746a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800747a:	4b5d      	ldr	r3, [pc, #372]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800747c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007480:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007488:	4959      	ldr	r1, [pc, #356]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800748a:	4313      	orrs	r3, r2
 800748c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800749c:	4b54      	ldr	r3, [pc, #336]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800749e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074a2:	f023 0203 	bic.w	r2, r3, #3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074aa:	4951      	ldr	r1, [pc, #324]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074be:	4b4c      	ldr	r3, [pc, #304]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074cc:	4948      	ldr	r1, [pc, #288]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d015      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074e0:	4b43      	ldr	r3, [pc, #268]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ee:	4940      	ldr	r1, [pc, #256]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074fe:	d105      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007500:	4b3b      	ldr	r3, [pc, #236]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	4a3a      	ldr	r2, [pc, #232]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800750a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007514:	2b00      	cmp	r3, #0
 8007516:	d015      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007518:	4b35      	ldr	r3, [pc, #212]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800751a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800751e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007526:	4932      	ldr	r1, [pc, #200]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007528:	4313      	orrs	r3, r2
 800752a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007532:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007536:	d105      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007538:	4b2d      	ldr	r3, [pc, #180]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	4a2c      	ldr	r2, [pc, #176]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800753e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007542:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d015      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007550:	4b27      	ldr	r3, [pc, #156]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007556:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	4924      	ldr	r1, [pc, #144]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007560:	4313      	orrs	r3, r2
 8007562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800756e:	d105      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007570:	4b1f      	ldr	r3, [pc, #124]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	4a1e      	ldr	r2, [pc, #120]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800757a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d015      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007588:	4b19      	ldr	r3, [pc, #100]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800758a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007596:	4916      	ldr	r1, [pc, #88]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007598:	4313      	orrs	r3, r2
 800759a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075a6:	d105      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075a8:	4b11      	ldr	r3, [pc, #68]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	4a10      	ldr	r2, [pc, #64]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d019      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075c0:	4b0b      	ldr	r3, [pc, #44]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ce:	4908      	ldr	r1, [pc, #32]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075de:	d109      	bne.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075e0:	4b03      	ldr	r3, [pc, #12]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	4a02      	ldr	r2, [pc, #8]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075ea:	60d3      	str	r3, [r2, #12]
 80075ec:	e002      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80075ee:	bf00      	nop
 80075f0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d015      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007600:	4b29      	ldr	r3, [pc, #164]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007606:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800760e:	4926      	ldr	r1, [pc, #152]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007610:	4313      	orrs	r3, r2
 8007612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800761a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800761e:	d105      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007620:	4b21      	ldr	r3, [pc, #132]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	4a20      	ldr	r2, [pc, #128]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800762a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d015      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007638:	4b1b      	ldr	r3, [pc, #108]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800763a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800763e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007646:	4918      	ldr	r1, [pc, #96]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007648:	4313      	orrs	r3, r2
 800764a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007656:	d105      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007658:	4b13      	ldr	r3, [pc, #76]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	4a12      	ldr	r2, [pc, #72]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800765e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007662:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d015      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007670:	4b0d      	ldr	r3, [pc, #52]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007672:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007676:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800767e:	490a      	ldr	r1, [pc, #40]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007680:	4313      	orrs	r3, r2
 8007682:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800768a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800768e:	d105      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007690:	4b05      	ldr	r3, [pc, #20]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	4a04      	ldr	r2, [pc, #16]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800769a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800769c:	7cbb      	ldrb	r3, [r7, #18]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	40021000 	.word	0x40021000

080076ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e09d      	b.n	80077fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d108      	bne.n	80076d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076ce:	d009      	beq.n	80076e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	61da      	str	r2, [r3, #28]
 80076d6:	e005      	b.n	80076e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7fb ff2a 	bl	8003558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800771a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007724:	d902      	bls.n	800772c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	e002      	b.n	8007732 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800772c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007730:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800773a:	d007      	beq.n	800774c <HAL_SPI_Init+0xa0>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007744:	d002      	beq.n	800774c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	431a      	orrs	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800777a:	431a      	orrs	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007784:	431a      	orrs	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800778e:	ea42 0103 	orr.w	r1, r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007796:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	0c1b      	lsrs	r3, r3, #16
 80077a8:	f003 0204 	and.w	r2, r3, #4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	431a      	orrs	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ba:	f003 0308 	and.w	r3, r3, #8
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80077c8:	ea42 0103 	orr.w	r1, r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b08a      	sub	sp, #40	@ 0x28
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
 800780e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007810:	2301      	movs	r3, #1
 8007812:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007814:	f7fc fc74 	bl	8004100 <HAL_GetTick>
 8007818:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007820:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007828:	887b      	ldrh	r3, [r7, #2]
 800782a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800782c:	887b      	ldrh	r3, [r7, #2]
 800782e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007830:	7ffb      	ldrb	r3, [r7, #31]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d00c      	beq.n	8007850 <HAL_SPI_TransmitReceive+0x4e>
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800783c:	d106      	bne.n	800784c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d102      	bne.n	800784c <HAL_SPI_TransmitReceive+0x4a>
 8007846:	7ffb      	ldrb	r3, [r7, #31]
 8007848:	2b04      	cmp	r3, #4
 800784a:	d001      	beq.n	8007850 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800784c:	2302      	movs	r3, #2
 800784e:	e1f3      	b.n	8007c38 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d005      	beq.n	8007862 <HAL_SPI_TransmitReceive+0x60>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <HAL_SPI_TransmitReceive+0x60>
 800785c:	887b      	ldrh	r3, [r7, #2]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e1e8      	b.n	8007c38 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800786c:	2b01      	cmp	r3, #1
 800786e:	d101      	bne.n	8007874 <HAL_SPI_TransmitReceive+0x72>
 8007870:	2302      	movs	r3, #2
 8007872:	e1e1      	b.n	8007c38 <HAL_SPI_TransmitReceive+0x436>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b04      	cmp	r3, #4
 8007886:	d003      	beq.n	8007890 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2205      	movs	r2, #5
 800788c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	887a      	ldrh	r2, [r7, #2]
 80078a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	887a      	ldrh	r2, [r7, #2]
 80078a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	887a      	ldrh	r2, [r7, #2]
 80078b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	887a      	ldrh	r2, [r7, #2]
 80078bc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078d2:	d802      	bhi.n	80078da <HAL_SPI_TransmitReceive+0xd8>
 80078d4:	8abb      	ldrh	r3, [r7, #20]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d908      	bls.n	80078ec <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	e007      	b.n	80078fc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80078fa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007906:	2b40      	cmp	r3, #64	@ 0x40
 8007908:	d007      	beq.n	800791a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007918:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007922:	f240 8083 	bls.w	8007a2c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_SPI_TransmitReceive+0x132>
 800792e:	8afb      	ldrh	r3, [r7, #22]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d16f      	bne.n	8007a14 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007938:	881a      	ldrh	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007944:	1c9a      	adds	r2, r3, #2
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800794e:	b29b      	uxth	r3, r3
 8007950:	3b01      	subs	r3, #1
 8007952:	b29a      	uxth	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007958:	e05c      	b.n	8007a14 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b02      	cmp	r3, #2
 8007966:	d11b      	bne.n	80079a0 <HAL_SPI_TransmitReceive+0x19e>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d016      	beq.n	80079a0 <HAL_SPI_TransmitReceive+0x19e>
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007974:	2b01      	cmp	r3, #1
 8007976:	d113      	bne.n	80079a0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797c:	881a      	ldrh	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007988:	1c9a      	adds	r2, r3, #2
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d11c      	bne.n	80079e8 <HAL_SPI_TransmitReceive+0x1e6>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d016      	beq.n	80079e8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c4:	b292      	uxth	r2, r2
 80079c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079cc:	1c9a      	adds	r2, r3, #2
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079e4:	2301      	movs	r3, #1
 80079e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079e8:	f7fc fb8a 	bl	8004100 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d80d      	bhi.n	8007a14 <HAL_SPI_TransmitReceive+0x212>
 80079f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fe:	d009      	beq.n	8007a14 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e111      	b.n	8007c38 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d19d      	bne.n	800795a <HAL_SPI_TransmitReceive+0x158>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d197      	bne.n	800795a <HAL_SPI_TransmitReceive+0x158>
 8007a2a:	e0e5      	b.n	8007bf8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <HAL_SPI_TransmitReceive+0x23a>
 8007a34:	8afb      	ldrh	r3, [r7, #22]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	f040 80d1 	bne.w	8007bde <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d912      	bls.n	8007a6c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4a:	881a      	ldrh	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a56:	1c9a      	adds	r2, r3, #2
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b02      	subs	r3, #2
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a6a:	e0b8      	b.n	8007bde <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	330c      	adds	r3, #12
 8007a76:	7812      	ldrb	r2, [r2, #0]
 8007a78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a92:	e0a4      	b.n	8007bde <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d134      	bne.n	8007b0c <HAL_SPI_TransmitReceive+0x30a>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d02f      	beq.n	8007b0c <HAL_SPI_TransmitReceive+0x30a>
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d12c      	bne.n	8007b0c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d912      	bls.n	8007ae2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac0:	881a      	ldrh	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007acc:	1c9a      	adds	r2, r3, #2
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b02      	subs	r3, #2
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ae0:	e012      	b.n	8007b08 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	330c      	adds	r3, #12
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	3b01      	subs	r3, #1
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d148      	bne.n	8007bac <HAL_SPI_TransmitReceive+0x3aa>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d042      	beq.n	8007bac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d923      	bls.n	8007b7a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68da      	ldr	r2, [r3, #12]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3c:	b292      	uxth	r2, r2
 8007b3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b44:	1c9a      	adds	r2, r3, #2
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b02      	subs	r3, #2
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d81f      	bhi.n	8007ba8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b76:	605a      	str	r2, [r3, #4]
 8007b78:	e016      	b.n	8007ba8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f103 020c 	add.w	r2, r3, #12
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b86:	7812      	ldrb	r2, [r2, #0]
 8007b88:	b2d2      	uxtb	r2, r2
 8007b8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bac:	f7fc faa8 	bl	8004100 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d803      	bhi.n	8007bc4 <HAL_SPI_TransmitReceive+0x3c2>
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc2:	d102      	bne.n	8007bca <HAL_SPI_TransmitReceive+0x3c8>
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e02c      	b.n	8007c38 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f47f af55 	bne.w	8007a94 <HAL_SPI_TransmitReceive+0x292>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f47f af4e 	bne.w	8007a94 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bf8:	6a3a      	ldr	r2, [r7, #32]
 8007bfa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f93d 	bl	8007e7c <SPI_EndRxTxTransaction>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d008      	beq.n	8007c1a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e00e      	b.n	8007c38 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e000      	b.n	8007c38 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007c36:	2300      	movs	r3, #0
  }
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3728      	adds	r7, #40	@ 0x28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	603b      	str	r3, [r7, #0]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c50:	f7fc fa56 	bl	8004100 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	1a9b      	subs	r3, r3, r2
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c60:	f7fc fa4e 	bl	8004100 <HAL_GetTick>
 8007c64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c66:	4b39      	ldr	r3, [pc, #228]	@ (8007d4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	015b      	lsls	r3, r3, #5
 8007c6c:	0d1b      	lsrs	r3, r3, #20
 8007c6e:	69fa      	ldr	r2, [r7, #28]
 8007c70:	fb02 f303 	mul.w	r3, r2, r3
 8007c74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c76:	e054      	b.n	8007d22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7e:	d050      	beq.n	8007d22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c80:	f7fc fa3e 	bl	8004100 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d902      	bls.n	8007c96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d13d      	bne.n	8007d12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ca4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cae:	d111      	bne.n	8007cd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cb8:	d004      	beq.n	8007cc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cc2:	d107      	bne.n	8007cd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cdc:	d10f      	bne.n	8007cfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e017      	b.n	8007d42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	bf0c      	ite	eq
 8007d32:	2301      	moveq	r3, #1
 8007d34:	2300      	movne	r3, #0
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d19b      	bne.n	8007c78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3720      	adds	r7, #32
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20000004 	.word	0x20000004

08007d50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	@ 0x28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d62:	f7fc f9cd 	bl	8004100 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6a:	1a9b      	subs	r3, r3, r2
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	4413      	add	r3, r2
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007d72:	f7fc f9c5 	bl	8004100 <HAL_GetTick>
 8007d76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d80:	4b3d      	ldr	r3, [pc, #244]	@ (8007e78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	00da      	lsls	r2, r3, #3
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	0d1b      	lsrs	r3, r3, #20
 8007d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d92:	fb02 f303 	mul.w	r3, r2, r3
 8007d96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007d98:	e060      	b.n	8007e5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007da0:	d107      	bne.n	8007db2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d104      	bne.n	8007db2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db8:	d050      	beq.n	8007e5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dba:	f7fc f9a1 	bl	8004100 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d902      	bls.n	8007dd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d13d      	bne.n	8007e4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007dde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007de8:	d111      	bne.n	8007e0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007df2:	d004      	beq.n	8007dfe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dfc:	d107      	bne.n	8007e0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e16:	d10f      	bne.n	8007e38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e010      	b.n	8007e6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	4013      	ands	r3, r2
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d196      	bne.n	8007d9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3728      	adds	r7, #40	@ 0x28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000004 	.word	0x20000004

08007e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af02      	add	r7, sp, #8
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7ff ff5b 	bl	8007d50 <SPI_WaitFifoStateUntilTimeout>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ea4:	f043 0220 	orr.w	r2, r3, #32
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e027      	b.n	8007f00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2180      	movs	r1, #128	@ 0x80
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff fec0 	bl	8007c40 <SPI_WaitFlagStateUntilTimeout>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d007      	beq.n	8007ed6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eca:	f043 0220 	orr.w	r2, r3, #32
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e014      	b.n	8007f00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7ff ff34 	bl	8007d50 <SPI_WaitFifoStateUntilTimeout>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d007      	beq.n	8007efe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ef2:	f043 0220 	orr.w	r2, r3, #32
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e000      	b.n	8007f00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e049      	b.n	8007fae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7fb ff1c 	bl	8003d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f000 fef8 	bl	8008d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d001      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e054      	b.n	800807a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0201 	orr.w	r2, r2, #1
 8007fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a26      	ldr	r2, [pc, #152]	@ (8008088 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d022      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ffa:	d01d      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a22      	ldr	r2, [pc, #136]	@ (800808c <HAL_TIM_Base_Start_IT+0xd4>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d018      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a21      	ldr	r2, [pc, #132]	@ (8008090 <HAL_TIM_Base_Start_IT+0xd8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d013      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a1f      	ldr	r2, [pc, #124]	@ (8008094 <HAL_TIM_Base_Start_IT+0xdc>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00e      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1e      	ldr	r2, [pc, #120]	@ (8008098 <HAL_TIM_Base_Start_IT+0xe0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d009      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a1c      	ldr	r2, [pc, #112]	@ (800809c <HAL_TIM_Base_Start_IT+0xe4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d004      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a1b      	ldr	r2, [pc, #108]	@ (80080a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d115      	bne.n	8008064 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	4b19      	ldr	r3, [pc, #100]	@ (80080a4 <HAL_TIM_Base_Start_IT+0xec>)
 8008040:	4013      	ands	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b06      	cmp	r3, #6
 8008048:	d015      	beq.n	8008076 <HAL_TIM_Base_Start_IT+0xbe>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008050:	d011      	beq.n	8008076 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f042 0201 	orr.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008062:	e008      	b.n	8008076 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 0201 	orr.w	r2, r2, #1
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	e000      	b.n	8008078 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008076:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	40012c00 	.word	0x40012c00
 800808c:	40000400 	.word	0x40000400
 8008090:	40000800 	.word	0x40000800
 8008094:	40000c00 	.word	0x40000c00
 8008098:	40013400 	.word	0x40013400
 800809c:	40014000 	.word	0x40014000
 80080a0:	40015000 	.word	0x40015000
 80080a4:	00010007 	.word	0x00010007

080080a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e049      	b.n	800814e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f841 	bl	8008156 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3304      	adds	r3, #4
 80080e4:	4619      	mov	r1, r3
 80080e6:	4610      	mov	r0, r2
 80080e8:	f000 fe28 	bl	8008d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800815e:	bf00      	nop
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d109      	bne.n	8008190 <HAL_TIM_PWM_Start+0x24>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b01      	cmp	r3, #1
 8008186:	bf14      	ite	ne
 8008188:	2301      	movne	r3, #1
 800818a:	2300      	moveq	r3, #0
 800818c:	b2db      	uxtb	r3, r3
 800818e:	e03c      	b.n	800820a <HAL_TIM_PWM_Start+0x9e>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b04      	cmp	r3, #4
 8008194:	d109      	bne.n	80081aa <HAL_TIM_PWM_Start+0x3e>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b01      	cmp	r3, #1
 80081a0:	bf14      	ite	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	2300      	moveq	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	e02f      	b.n	800820a <HAL_TIM_PWM_Start+0x9e>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d109      	bne.n	80081c4 <HAL_TIM_PWM_Start+0x58>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	bf14      	ite	ne
 80081bc:	2301      	movne	r3, #1
 80081be:	2300      	moveq	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	e022      	b.n	800820a <HAL_TIM_PWM_Start+0x9e>
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2b0c      	cmp	r3, #12
 80081c8:	d109      	bne.n	80081de <HAL_TIM_PWM_Start+0x72>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	bf14      	ite	ne
 80081d6:	2301      	movne	r3, #1
 80081d8:	2300      	moveq	r3, #0
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	e015      	b.n	800820a <HAL_TIM_PWM_Start+0x9e>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b10      	cmp	r3, #16
 80081e2:	d109      	bne.n	80081f8 <HAL_TIM_PWM_Start+0x8c>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	bf14      	ite	ne
 80081f0:	2301      	movne	r3, #1
 80081f2:	2300      	moveq	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	e008      	b.n	800820a <HAL_TIM_PWM_Start+0x9e>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b01      	cmp	r3, #1
 8008202:	bf14      	ite	ne
 8008204:	2301      	movne	r3, #1
 8008206:	2300      	moveq	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e0a6      	b.n	8008360 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <HAL_TIM_PWM_Start+0xb6>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008220:	e023      	b.n	800826a <HAL_TIM_PWM_Start+0xfe>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b04      	cmp	r3, #4
 8008226:	d104      	bne.n	8008232 <HAL_TIM_PWM_Start+0xc6>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008230:	e01b      	b.n	800826a <HAL_TIM_PWM_Start+0xfe>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b08      	cmp	r3, #8
 8008236:	d104      	bne.n	8008242 <HAL_TIM_PWM_Start+0xd6>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008240:	e013      	b.n	800826a <HAL_TIM_PWM_Start+0xfe>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b0c      	cmp	r3, #12
 8008246:	d104      	bne.n	8008252 <HAL_TIM_PWM_Start+0xe6>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008250:	e00b      	b.n	800826a <HAL_TIM_PWM_Start+0xfe>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b10      	cmp	r3, #16
 8008256:	d104      	bne.n	8008262 <HAL_TIM_PWM_Start+0xf6>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008260:	e003      	b.n	800826a <HAL_TIM_PWM_Start+0xfe>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2201      	movs	r2, #1
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	4618      	mov	r0, r3
 8008274:	f001 f9dc 	bl	8009630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a3a      	ldr	r2, [pc, #232]	@ (8008368 <HAL_TIM_PWM_Start+0x1fc>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d018      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x148>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a39      	ldr	r2, [pc, #228]	@ (800836c <HAL_TIM_PWM_Start+0x200>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d013      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x148>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a37      	ldr	r2, [pc, #220]	@ (8008370 <HAL_TIM_PWM_Start+0x204>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00e      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x148>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a36      	ldr	r2, [pc, #216]	@ (8008374 <HAL_TIM_PWM_Start+0x208>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d009      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x148>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a34      	ldr	r2, [pc, #208]	@ (8008378 <HAL_TIM_PWM_Start+0x20c>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d004      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x148>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a33      	ldr	r2, [pc, #204]	@ (800837c <HAL_TIM_PWM_Start+0x210>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d101      	bne.n	80082b8 <HAL_TIM_PWM_Start+0x14c>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e000      	b.n	80082ba <HAL_TIM_PWM_Start+0x14e>
 80082b8:	2300      	movs	r3, #0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d007      	beq.n	80082ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a25      	ldr	r2, [pc, #148]	@ (8008368 <HAL_TIM_PWM_Start+0x1fc>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d022      	beq.n	800831e <HAL_TIM_PWM_Start+0x1b2>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e0:	d01d      	beq.n	800831e <HAL_TIM_PWM_Start+0x1b2>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a26      	ldr	r2, [pc, #152]	@ (8008380 <HAL_TIM_PWM_Start+0x214>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d018      	beq.n	800831e <HAL_TIM_PWM_Start+0x1b2>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a24      	ldr	r2, [pc, #144]	@ (8008384 <HAL_TIM_PWM_Start+0x218>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d013      	beq.n	800831e <HAL_TIM_PWM_Start+0x1b2>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a23      	ldr	r2, [pc, #140]	@ (8008388 <HAL_TIM_PWM_Start+0x21c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00e      	beq.n	800831e <HAL_TIM_PWM_Start+0x1b2>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a19      	ldr	r2, [pc, #100]	@ (800836c <HAL_TIM_PWM_Start+0x200>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d009      	beq.n	800831e <HAL_TIM_PWM_Start+0x1b2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a18      	ldr	r2, [pc, #96]	@ (8008370 <HAL_TIM_PWM_Start+0x204>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d004      	beq.n	800831e <HAL_TIM_PWM_Start+0x1b2>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a18      	ldr	r2, [pc, #96]	@ (800837c <HAL_TIM_PWM_Start+0x210>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d115      	bne.n	800834a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	4b19      	ldr	r3, [pc, #100]	@ (800838c <HAL_TIM_PWM_Start+0x220>)
 8008326:	4013      	ands	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b06      	cmp	r3, #6
 800832e:	d015      	beq.n	800835c <HAL_TIM_PWM_Start+0x1f0>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008336:	d011      	beq.n	800835c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0201 	orr.w	r2, r2, #1
 8008346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008348:	e008      	b.n	800835c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f042 0201 	orr.w	r2, r2, #1
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e000      	b.n	800835e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	40012c00 	.word	0x40012c00
 800836c:	40013400 	.word	0x40013400
 8008370:	40014000 	.word	0x40014000
 8008374:	40014400 	.word	0x40014400
 8008378:	40014800 	.word	0x40014800
 800837c:	40015000 	.word	0x40015000
 8008380:	40000400 	.word	0x40000400
 8008384:	40000800 	.word	0x40000800
 8008388:	40000c00 	.word	0x40000c00
 800838c:	00010007 	.word	0x00010007

08008390 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e097      	b.n	80084d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d106      	bne.n	80083be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7fb fc33 	bl	8003c24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2202      	movs	r2, #2
 80083c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	6812      	ldr	r2, [r2, #0]
 80083d0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80083d4:	f023 0307 	bic.w	r3, r3, #7
 80083d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3304      	adds	r3, #4
 80083e2:	4619      	mov	r1, r3
 80083e4:	4610      	mov	r0, r2
 80083e6:	f000 fca9 	bl	8008d3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	4313      	orrs	r3, r2
 800840a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008412:	f023 0303 	bic.w	r3, r3, #3
 8008416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	021b      	lsls	r3, r3, #8
 8008422:	4313      	orrs	r3, r2
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	4313      	orrs	r3, r2
 8008428:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008430:	f023 030c 	bic.w	r3, r3, #12
 8008434:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800843c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	021b      	lsls	r3, r3, #8
 800844c:	4313      	orrs	r3, r2
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	4313      	orrs	r3, r2
 8008452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	011a      	lsls	r2, r3, #4
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	031b      	lsls	r3, r3, #12
 8008460:	4313      	orrs	r3, r2
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	4313      	orrs	r3, r2
 8008466:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800846e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008476:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	011b      	lsls	r3, r3, #4
 8008482:	4313      	orrs	r3, r2
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008504:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d110      	bne.n	800852e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d102      	bne.n	8008518 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008512:	7b7b      	ldrb	r3, [r7, #13]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d001      	beq.n	800851c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e069      	b.n	80085f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2202      	movs	r2, #2
 8008520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800852c:	e031      	b.n	8008592 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b04      	cmp	r3, #4
 8008532:	d110      	bne.n	8008556 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008534:	7bbb      	ldrb	r3, [r7, #14]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d102      	bne.n	8008540 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800853a:	7b3b      	ldrb	r3, [r7, #12]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d001      	beq.n	8008544 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e055      	b.n	80085f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2202      	movs	r2, #2
 8008550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008554:	e01d      	b.n	8008592 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d108      	bne.n	800856e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d105      	bne.n	800856e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008562:	7b7b      	ldrb	r3, [r7, #13]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d102      	bne.n	800856e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008568:	7b3b      	ldrb	r3, [r7, #12]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d001      	beq.n	8008572 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e03e      	b.n	80085f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2202      	movs	r2, #2
 8008576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2202      	movs	r2, #2
 800858e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <HAL_TIM_Encoder_Start+0xc4>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2b04      	cmp	r3, #4
 800859c:	d008      	beq.n	80085b0 <HAL_TIM_Encoder_Start+0xd4>
 800859e:	e00f      	b.n	80085c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2201      	movs	r2, #1
 80085a6:	2100      	movs	r1, #0
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 f841 	bl	8009630 <TIM_CCxChannelCmd>
      break;
 80085ae:	e016      	b.n	80085de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2201      	movs	r2, #1
 80085b6:	2104      	movs	r1, #4
 80085b8:	4618      	mov	r0, r3
 80085ba:	f001 f839 	bl	8009630 <TIM_CCxChannelCmd>
      break;
 80085be:	e00e      	b.n	80085de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2201      	movs	r2, #1
 80085c6:	2100      	movs	r1, #0
 80085c8:	4618      	mov	r0, r3
 80085ca:	f001 f831 	bl	8009630 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2201      	movs	r2, #1
 80085d4:	2104      	movs	r1, #4
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 f82a 	bl	8009630 <TIM_CCxChannelCmd>
      break;
 80085dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f042 0201 	orr.w	r2, r2, #1
 80085ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d020      	beq.n	800865c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d01b      	beq.n	800865c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f06f 0202 	mvn.w	r2, #2
 800862c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f003 0303 	and.w	r3, r3, #3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fb5c 	bl	8008d00 <HAL_TIM_IC_CaptureCallback>
 8008648:	e005      	b.n	8008656 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fb4e 	bl	8008cec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fb5f 	bl	8008d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d020      	beq.n	80086a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01b      	beq.n	80086a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0204 	mvn.w	r2, #4
 8008678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fb36 	bl	8008d00 <HAL_TIM_IC_CaptureCallback>
 8008694:	e005      	b.n	80086a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fb28 	bl	8008cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fb39 	bl	8008d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f003 0308 	and.w	r3, r3, #8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d020      	beq.n	80086f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f003 0308 	and.w	r3, r3, #8
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01b      	beq.n	80086f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f06f 0208 	mvn.w	r2, #8
 80086c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2204      	movs	r2, #4
 80086ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fb10 	bl	8008d00 <HAL_TIM_IC_CaptureCallback>
 80086e0:	e005      	b.n	80086ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fb02 	bl	8008cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fb13 	bl	8008d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f003 0310 	and.w	r3, r3, #16
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d020      	beq.n	8008740 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f003 0310 	and.w	r3, r3, #16
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01b      	beq.n	8008740 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f06f 0210 	mvn.w	r2, #16
 8008710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2208      	movs	r2, #8
 8008716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 faea 	bl	8008d00 <HAL_TIM_IC_CaptureCallback>
 800872c:	e005      	b.n	800873a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fadc 	bl	8008cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 faed 	bl	8008d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00c      	beq.n	8008764 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d007      	beq.n	8008764 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f06f 0201 	mvn.w	r2, #1
 800875c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7f9 ff46 	bl	80025f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800876a:	2b00      	cmp	r3, #0
 800876c:	d104      	bne.n	8008778 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00c      	beq.n	8008792 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800877e:	2b00      	cmp	r3, #0
 8008780:	d007      	beq.n	8008792 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800878a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 f815 	bl	80097bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00c      	beq.n	80087b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d007      	beq.n	80087b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80087ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f001 f80d 	bl	80097d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00c      	beq.n	80087da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d007      	beq.n	80087da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80087d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 faa7 	bl	8008d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f003 0320 	and.w	r3, r3, #32
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00c      	beq.n	80087fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f06f 0220 	mvn.w	r2, #32
 80087f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 ffd5 	bl	80097a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00c      	beq.n	8008822 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800881a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 ffe1 	bl	80097e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00c      	beq.n	8008846 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d007      	beq.n	8008846 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800883e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 ffd9 	bl	80097f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00c      	beq.n	800886a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 ffd1 	bl	800980c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00c      	beq.n	800888e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 ffc9 	bl	8009820 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d101      	bne.n	80088b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088b2:	2302      	movs	r3, #2
 80088b4:	e0ff      	b.n	8008ab6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b14      	cmp	r3, #20
 80088c2:	f200 80f0 	bhi.w	8008aa6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80088c6:	a201      	add	r2, pc, #4	@ (adr r2, 80088cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	08008921 	.word	0x08008921
 80088d0:	08008aa7 	.word	0x08008aa7
 80088d4:	08008aa7 	.word	0x08008aa7
 80088d8:	08008aa7 	.word	0x08008aa7
 80088dc:	08008961 	.word	0x08008961
 80088e0:	08008aa7 	.word	0x08008aa7
 80088e4:	08008aa7 	.word	0x08008aa7
 80088e8:	08008aa7 	.word	0x08008aa7
 80088ec:	080089a3 	.word	0x080089a3
 80088f0:	08008aa7 	.word	0x08008aa7
 80088f4:	08008aa7 	.word	0x08008aa7
 80088f8:	08008aa7 	.word	0x08008aa7
 80088fc:	080089e3 	.word	0x080089e3
 8008900:	08008aa7 	.word	0x08008aa7
 8008904:	08008aa7 	.word	0x08008aa7
 8008908:	08008aa7 	.word	0x08008aa7
 800890c:	08008a25 	.word	0x08008a25
 8008910:	08008aa7 	.word	0x08008aa7
 8008914:	08008aa7 	.word	0x08008aa7
 8008918:	08008aa7 	.word	0x08008aa7
 800891c:	08008a65 	.word	0x08008a65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68b9      	ldr	r1, [r7, #8]
 8008926:	4618      	mov	r0, r3
 8008928:	f000 fabc 	bl	8008ea4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699a      	ldr	r2, [r3, #24]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 0208 	orr.w	r2, r2, #8
 800893a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	699a      	ldr	r2, [r3, #24]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0204 	bic.w	r2, r2, #4
 800894a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6999      	ldr	r1, [r3, #24]
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	691a      	ldr	r2, [r3, #16]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	430a      	orrs	r2, r1
 800895c:	619a      	str	r2, [r3, #24]
      break;
 800895e:	e0a5      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fb36 	bl	8008fd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699a      	ldr	r2, [r3, #24]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800897a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	699a      	ldr	r2, [r3, #24]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800898a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6999      	ldr	r1, [r3, #24]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	021a      	lsls	r2, r3, #8
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	430a      	orrs	r2, r1
 800899e:	619a      	str	r2, [r3, #24]
      break;
 80089a0:	e084      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68b9      	ldr	r1, [r7, #8]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fba9 	bl	8009100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69da      	ldr	r2, [r3, #28]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f042 0208 	orr.w	r2, r2, #8
 80089bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69da      	ldr	r2, [r3, #28]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 0204 	bic.w	r2, r2, #4
 80089cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69d9      	ldr	r1, [r3, #28]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	691a      	ldr	r2, [r3, #16]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	61da      	str	r2, [r3, #28]
      break;
 80089e0:	e064      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 fc1b 	bl	8009224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69da      	ldr	r2, [r3, #28]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69da      	ldr	r2, [r3, #28]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	69d9      	ldr	r1, [r3, #28]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	021a      	lsls	r2, r3, #8
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	61da      	str	r2, [r3, #28]
      break;
 8008a22:	e043      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68b9      	ldr	r1, [r7, #8]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fc8e 	bl	800934c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f042 0208 	orr.w	r2, r2, #8
 8008a3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f022 0204 	bic.w	r2, r2, #4
 8008a4e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	691a      	ldr	r2, [r3, #16]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008a62:	e023      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68b9      	ldr	r1, [r7, #8]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 fcd8 	bl	8009420 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	021a      	lsls	r2, r3, #8
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008aa4:	e002      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8008aaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop

08008ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <HAL_TIM_ConfigClockSource+0x1c>
 8008ad8:	2302      	movs	r3, #2
 8008ada:	e0f6      	b.n	8008cca <HAL_TIM_ConfigClockSource+0x20a>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008afa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a6f      	ldr	r2, [pc, #444]	@ (8008cd4 <HAL_TIM_ConfigClockSource+0x214>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	f000 80c1 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b1c:	4a6d      	ldr	r2, [pc, #436]	@ (8008cd4 <HAL_TIM_ConfigClockSource+0x214>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	f200 80c6 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b24:	4a6c      	ldr	r2, [pc, #432]	@ (8008cd8 <HAL_TIM_ConfigClockSource+0x218>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	f000 80b9 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b2c:	4a6a      	ldr	r2, [pc, #424]	@ (8008cd8 <HAL_TIM_ConfigClockSource+0x218>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	f200 80be 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b34:	4a69      	ldr	r2, [pc, #420]	@ (8008cdc <HAL_TIM_ConfigClockSource+0x21c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	f000 80b1 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b3c:	4a67      	ldr	r2, [pc, #412]	@ (8008cdc <HAL_TIM_ConfigClockSource+0x21c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	f200 80b6 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b44:	4a66      	ldr	r2, [pc, #408]	@ (8008ce0 <HAL_TIM_ConfigClockSource+0x220>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	f000 80a9 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b4c:	4a64      	ldr	r2, [pc, #400]	@ (8008ce0 <HAL_TIM_ConfigClockSource+0x220>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	f200 80ae 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b54:	4a63      	ldr	r2, [pc, #396]	@ (8008ce4 <HAL_TIM_ConfigClockSource+0x224>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	f000 80a1 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b5c:	4a61      	ldr	r2, [pc, #388]	@ (8008ce4 <HAL_TIM_ConfigClockSource+0x224>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	f200 80a6 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b64:	4a60      	ldr	r2, [pc, #384]	@ (8008ce8 <HAL_TIM_ConfigClockSource+0x228>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	f000 8099 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b6c:	4a5e      	ldr	r2, [pc, #376]	@ (8008ce8 <HAL_TIM_ConfigClockSource+0x228>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	f200 809e 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008b78:	f000 8091 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008b80:	f200 8096 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b88:	f000 8089 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b90:	f200 808e 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b98:	d03e      	beq.n	8008c18 <HAL_TIM_ConfigClockSource+0x158>
 8008b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b9e:	f200 8087 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ba6:	f000 8086 	beq.w	8008cb6 <HAL_TIM_ConfigClockSource+0x1f6>
 8008baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bae:	d87f      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bb0:	2b70      	cmp	r3, #112	@ 0x70
 8008bb2:	d01a      	beq.n	8008bea <HAL_TIM_ConfigClockSource+0x12a>
 8008bb4:	2b70      	cmp	r3, #112	@ 0x70
 8008bb6:	d87b      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bb8:	2b60      	cmp	r3, #96	@ 0x60
 8008bba:	d050      	beq.n	8008c5e <HAL_TIM_ConfigClockSource+0x19e>
 8008bbc:	2b60      	cmp	r3, #96	@ 0x60
 8008bbe:	d877      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bc0:	2b50      	cmp	r3, #80	@ 0x50
 8008bc2:	d03c      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x17e>
 8008bc4:	2b50      	cmp	r3, #80	@ 0x50
 8008bc6:	d873      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bc8:	2b40      	cmp	r3, #64	@ 0x40
 8008bca:	d058      	beq.n	8008c7e <HAL_TIM_ConfigClockSource+0x1be>
 8008bcc:	2b40      	cmp	r3, #64	@ 0x40
 8008bce:	d86f      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bd0:	2b30      	cmp	r3, #48	@ 0x30
 8008bd2:	d064      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008bd4:	2b30      	cmp	r3, #48	@ 0x30
 8008bd6:	d86b      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bd8:	2b20      	cmp	r3, #32
 8008bda:	d060      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008bdc:	2b20      	cmp	r3, #32
 8008bde:	d867      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d05c      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008be4:	2b10      	cmp	r3, #16
 8008be6:	d05a      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008be8:	e062      	b.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bfa:	f000 fcf9 	bl	80095f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	609a      	str	r2, [r3, #8]
      break;
 8008c16:	e04f      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c28:	f000 fce2 	bl	80095f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c3a:	609a      	str	r2, [r3, #8]
      break;
 8008c3c:	e03c      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	f000 fc54 	bl	80094f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2150      	movs	r1, #80	@ 0x50
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fcad 	bl	80095b6 <TIM_ITRx_SetConfig>
      break;
 8008c5c:	e02c      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f000 fc73 	bl	8009556 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2160      	movs	r1, #96	@ 0x60
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 fc9d 	bl	80095b6 <TIM_ITRx_SetConfig>
      break;
 8008c7c:	e01c      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f000 fc34 	bl	80094f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2140      	movs	r1, #64	@ 0x40
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fc8d 	bl	80095b6 <TIM_ITRx_SetConfig>
      break;
 8008c9c:	e00c      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4610      	mov	r0, r2
 8008caa:	f000 fc84 	bl	80095b6 <TIM_ITRx_SetConfig>
      break;
 8008cae:	e003      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb4:	e000      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	00100070 	.word	0x00100070
 8008cd8:	00100060 	.word	0x00100060
 8008cdc:	00100050 	.word	0x00100050
 8008ce0:	00100040 	.word	0x00100040
 8008ce4:	00100030 	.word	0x00100030
 8008ce8:	00100020 	.word	0x00100020

08008cec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8008e80 <TIM_Base_SetConfig+0x144>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d017      	beq.n	8008d84 <TIM_Base_SetConfig+0x48>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d5a:	d013      	beq.n	8008d84 <TIM_Base_SetConfig+0x48>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a49      	ldr	r2, [pc, #292]	@ (8008e84 <TIM_Base_SetConfig+0x148>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00f      	beq.n	8008d84 <TIM_Base_SetConfig+0x48>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a48      	ldr	r2, [pc, #288]	@ (8008e88 <TIM_Base_SetConfig+0x14c>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d00b      	beq.n	8008d84 <TIM_Base_SetConfig+0x48>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a47      	ldr	r2, [pc, #284]	@ (8008e8c <TIM_Base_SetConfig+0x150>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d007      	beq.n	8008d84 <TIM_Base_SetConfig+0x48>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a46      	ldr	r2, [pc, #280]	@ (8008e90 <TIM_Base_SetConfig+0x154>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d003      	beq.n	8008d84 <TIM_Base_SetConfig+0x48>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a45      	ldr	r2, [pc, #276]	@ (8008e94 <TIM_Base_SetConfig+0x158>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d108      	bne.n	8008d96 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a39      	ldr	r2, [pc, #228]	@ (8008e80 <TIM_Base_SetConfig+0x144>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d023      	beq.n	8008de6 <TIM_Base_SetConfig+0xaa>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008da4:	d01f      	beq.n	8008de6 <TIM_Base_SetConfig+0xaa>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a36      	ldr	r2, [pc, #216]	@ (8008e84 <TIM_Base_SetConfig+0x148>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d01b      	beq.n	8008de6 <TIM_Base_SetConfig+0xaa>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a35      	ldr	r2, [pc, #212]	@ (8008e88 <TIM_Base_SetConfig+0x14c>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d017      	beq.n	8008de6 <TIM_Base_SetConfig+0xaa>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a34      	ldr	r2, [pc, #208]	@ (8008e8c <TIM_Base_SetConfig+0x150>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d013      	beq.n	8008de6 <TIM_Base_SetConfig+0xaa>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a33      	ldr	r2, [pc, #204]	@ (8008e90 <TIM_Base_SetConfig+0x154>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d00f      	beq.n	8008de6 <TIM_Base_SetConfig+0xaa>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a33      	ldr	r2, [pc, #204]	@ (8008e98 <TIM_Base_SetConfig+0x15c>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00b      	beq.n	8008de6 <TIM_Base_SetConfig+0xaa>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a32      	ldr	r2, [pc, #200]	@ (8008e9c <TIM_Base_SetConfig+0x160>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d007      	beq.n	8008de6 <TIM_Base_SetConfig+0xaa>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a31      	ldr	r2, [pc, #196]	@ (8008ea0 <TIM_Base_SetConfig+0x164>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d003      	beq.n	8008de6 <TIM_Base_SetConfig+0xaa>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a2c      	ldr	r2, [pc, #176]	@ (8008e94 <TIM_Base_SetConfig+0x158>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d108      	bne.n	8008df8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a18      	ldr	r2, [pc, #96]	@ (8008e80 <TIM_Base_SetConfig+0x144>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d013      	beq.n	8008e4c <TIM_Base_SetConfig+0x110>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a1a      	ldr	r2, [pc, #104]	@ (8008e90 <TIM_Base_SetConfig+0x154>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d00f      	beq.n	8008e4c <TIM_Base_SetConfig+0x110>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8008e98 <TIM_Base_SetConfig+0x15c>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d00b      	beq.n	8008e4c <TIM_Base_SetConfig+0x110>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a19      	ldr	r2, [pc, #100]	@ (8008e9c <TIM_Base_SetConfig+0x160>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d007      	beq.n	8008e4c <TIM_Base_SetConfig+0x110>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a18      	ldr	r2, [pc, #96]	@ (8008ea0 <TIM_Base_SetConfig+0x164>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d003      	beq.n	8008e4c <TIM_Base_SetConfig+0x110>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a13      	ldr	r2, [pc, #76]	@ (8008e94 <TIM_Base_SetConfig+0x158>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d103      	bne.n	8008e54 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d105      	bne.n	8008e72 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f023 0201 	bic.w	r2, r3, #1
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	611a      	str	r2, [r3, #16]
  }
}
 8008e72:	bf00      	nop
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40012c00 	.word	0x40012c00
 8008e84:	40000400 	.word	0x40000400
 8008e88:	40000800 	.word	0x40000800
 8008e8c:	40000c00 	.word	0x40000c00
 8008e90:	40013400 	.word	0x40013400
 8008e94:	40015000 	.word	0x40015000
 8008e98:	40014000 	.word	0x40014000
 8008e9c:	40014400 	.word	0x40014400
 8008ea0:	40014800 	.word	0x40014800

08008ea4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	f023 0201 	bic.w	r2, r3, #1
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f023 0303 	bic.w	r3, r3, #3
 8008ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f023 0302 	bic.w	r3, r3, #2
 8008ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a30      	ldr	r2, [pc, #192]	@ (8008fc0 <TIM_OC1_SetConfig+0x11c>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d013      	beq.n	8008f2c <TIM_OC1_SetConfig+0x88>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a2f      	ldr	r2, [pc, #188]	@ (8008fc4 <TIM_OC1_SetConfig+0x120>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d00f      	beq.n	8008f2c <TIM_OC1_SetConfig+0x88>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a2e      	ldr	r2, [pc, #184]	@ (8008fc8 <TIM_OC1_SetConfig+0x124>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d00b      	beq.n	8008f2c <TIM_OC1_SetConfig+0x88>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a2d      	ldr	r2, [pc, #180]	@ (8008fcc <TIM_OC1_SetConfig+0x128>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d007      	beq.n	8008f2c <TIM_OC1_SetConfig+0x88>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8008fd0 <TIM_OC1_SetConfig+0x12c>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d003      	beq.n	8008f2c <TIM_OC1_SetConfig+0x88>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a2b      	ldr	r2, [pc, #172]	@ (8008fd4 <TIM_OC1_SetConfig+0x130>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d10c      	bne.n	8008f46 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f023 0308 	bic.w	r3, r3, #8
 8008f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f023 0304 	bic.w	r3, r3, #4
 8008f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a1d      	ldr	r2, [pc, #116]	@ (8008fc0 <TIM_OC1_SetConfig+0x11c>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d013      	beq.n	8008f76 <TIM_OC1_SetConfig+0xd2>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a1c      	ldr	r2, [pc, #112]	@ (8008fc4 <TIM_OC1_SetConfig+0x120>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00f      	beq.n	8008f76 <TIM_OC1_SetConfig+0xd2>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a1b      	ldr	r2, [pc, #108]	@ (8008fc8 <TIM_OC1_SetConfig+0x124>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00b      	beq.n	8008f76 <TIM_OC1_SetConfig+0xd2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a1a      	ldr	r2, [pc, #104]	@ (8008fcc <TIM_OC1_SetConfig+0x128>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d007      	beq.n	8008f76 <TIM_OC1_SetConfig+0xd2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a19      	ldr	r2, [pc, #100]	@ (8008fd0 <TIM_OC1_SetConfig+0x12c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d003      	beq.n	8008f76 <TIM_OC1_SetConfig+0xd2>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a18      	ldr	r2, [pc, #96]	@ (8008fd4 <TIM_OC1_SetConfig+0x130>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d111      	bne.n	8008f9a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	621a      	str	r2, [r3, #32]
}
 8008fb4:	bf00      	nop
 8008fb6:	371c      	adds	r7, #28
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	40012c00 	.word	0x40012c00
 8008fc4:	40013400 	.word	0x40013400
 8008fc8:	40014000 	.word	0x40014000
 8008fcc:	40014400 	.word	0x40014400
 8008fd0:	40014800 	.word	0x40014800
 8008fd4:	40015000 	.word	0x40015000

08008fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	f023 0210 	bic.w	r2, r3, #16
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800900a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	021b      	lsls	r3, r3, #8
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	4313      	orrs	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f023 0320 	bic.w	r3, r3, #32
 8009026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	4313      	orrs	r3, r2
 8009032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a2c      	ldr	r2, [pc, #176]	@ (80090e8 <TIM_OC2_SetConfig+0x110>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d007      	beq.n	800904c <TIM_OC2_SetConfig+0x74>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a2b      	ldr	r2, [pc, #172]	@ (80090ec <TIM_OC2_SetConfig+0x114>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d003      	beq.n	800904c <TIM_OC2_SetConfig+0x74>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a2a      	ldr	r2, [pc, #168]	@ (80090f0 <TIM_OC2_SetConfig+0x118>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d10d      	bne.n	8009068 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	011b      	lsls	r3, r3, #4
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	4313      	orrs	r3, r2
 800905e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009066:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a1f      	ldr	r2, [pc, #124]	@ (80090e8 <TIM_OC2_SetConfig+0x110>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d013      	beq.n	8009098 <TIM_OC2_SetConfig+0xc0>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a1e      	ldr	r2, [pc, #120]	@ (80090ec <TIM_OC2_SetConfig+0x114>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d00f      	beq.n	8009098 <TIM_OC2_SetConfig+0xc0>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a1e      	ldr	r2, [pc, #120]	@ (80090f4 <TIM_OC2_SetConfig+0x11c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d00b      	beq.n	8009098 <TIM_OC2_SetConfig+0xc0>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a1d      	ldr	r2, [pc, #116]	@ (80090f8 <TIM_OC2_SetConfig+0x120>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d007      	beq.n	8009098 <TIM_OC2_SetConfig+0xc0>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a1c      	ldr	r2, [pc, #112]	@ (80090fc <TIM_OC2_SetConfig+0x124>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d003      	beq.n	8009098 <TIM_OC2_SetConfig+0xc0>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a17      	ldr	r2, [pc, #92]	@ (80090f0 <TIM_OC2_SetConfig+0x118>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d113      	bne.n	80090c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800909e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80090a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	4313      	orrs	r3, r2
 80090be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	621a      	str	r2, [r3, #32]
}
 80090da:	bf00      	nop
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	40012c00 	.word	0x40012c00
 80090ec:	40013400 	.word	0x40013400
 80090f0:	40015000 	.word	0x40015000
 80090f4:	40014000 	.word	0x40014000
 80090f8:	40014400 	.word	0x40014400
 80090fc:	40014800 	.word	0x40014800

08009100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009100:	b480      	push	{r7}
 8009102:	b087      	sub	sp, #28
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800912e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f023 0303 	bic.w	r3, r3, #3
 800913a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800914c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	021b      	lsls	r3, r3, #8
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	4313      	orrs	r3, r2
 8009158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a2b      	ldr	r2, [pc, #172]	@ (800920c <TIM_OC3_SetConfig+0x10c>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d007      	beq.n	8009172 <TIM_OC3_SetConfig+0x72>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a2a      	ldr	r2, [pc, #168]	@ (8009210 <TIM_OC3_SetConfig+0x110>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d003      	beq.n	8009172 <TIM_OC3_SetConfig+0x72>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a29      	ldr	r2, [pc, #164]	@ (8009214 <TIM_OC3_SetConfig+0x114>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d10d      	bne.n	800918e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	021b      	lsls	r3, r3, #8
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	4313      	orrs	r3, r2
 8009184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800918c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a1e      	ldr	r2, [pc, #120]	@ (800920c <TIM_OC3_SetConfig+0x10c>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d013      	beq.n	80091be <TIM_OC3_SetConfig+0xbe>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a1d      	ldr	r2, [pc, #116]	@ (8009210 <TIM_OC3_SetConfig+0x110>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d00f      	beq.n	80091be <TIM_OC3_SetConfig+0xbe>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009218 <TIM_OC3_SetConfig+0x118>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d00b      	beq.n	80091be <TIM_OC3_SetConfig+0xbe>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a1c      	ldr	r2, [pc, #112]	@ (800921c <TIM_OC3_SetConfig+0x11c>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d007      	beq.n	80091be <TIM_OC3_SetConfig+0xbe>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a1b      	ldr	r2, [pc, #108]	@ (8009220 <TIM_OC3_SetConfig+0x120>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d003      	beq.n	80091be <TIM_OC3_SetConfig+0xbe>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a16      	ldr	r2, [pc, #88]	@ (8009214 <TIM_OC3_SetConfig+0x114>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d113      	bne.n	80091e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	011b      	lsls	r3, r3, #4
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	011b      	lsls	r3, r3, #4
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	621a      	str	r2, [r3, #32]
}
 8009200:	bf00      	nop
 8009202:	371c      	adds	r7, #28
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	40012c00 	.word	0x40012c00
 8009210:	40013400 	.word	0x40013400
 8009214:	40015000 	.word	0x40015000
 8009218:	40014000 	.word	0x40014000
 800921c:	40014400 	.word	0x40014400
 8009220:	40014800 	.word	0x40014800

08009224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800925e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	021b      	lsls	r3, r3, #8
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	4313      	orrs	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	031b      	lsls	r3, r3, #12
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	4313      	orrs	r3, r2
 800927e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a2c      	ldr	r2, [pc, #176]	@ (8009334 <TIM_OC4_SetConfig+0x110>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d007      	beq.n	8009298 <TIM_OC4_SetConfig+0x74>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a2b      	ldr	r2, [pc, #172]	@ (8009338 <TIM_OC4_SetConfig+0x114>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d003      	beq.n	8009298 <TIM_OC4_SetConfig+0x74>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a2a      	ldr	r2, [pc, #168]	@ (800933c <TIM_OC4_SetConfig+0x118>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d10d      	bne.n	80092b4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800929e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	031b      	lsls	r3, r3, #12
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a1f      	ldr	r2, [pc, #124]	@ (8009334 <TIM_OC4_SetConfig+0x110>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d013      	beq.n	80092e4 <TIM_OC4_SetConfig+0xc0>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a1e      	ldr	r2, [pc, #120]	@ (8009338 <TIM_OC4_SetConfig+0x114>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00f      	beq.n	80092e4 <TIM_OC4_SetConfig+0xc0>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009340 <TIM_OC4_SetConfig+0x11c>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d00b      	beq.n	80092e4 <TIM_OC4_SetConfig+0xc0>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a1d      	ldr	r2, [pc, #116]	@ (8009344 <TIM_OC4_SetConfig+0x120>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d007      	beq.n	80092e4 <TIM_OC4_SetConfig+0xc0>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a1c      	ldr	r2, [pc, #112]	@ (8009348 <TIM_OC4_SetConfig+0x124>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d003      	beq.n	80092e4 <TIM_OC4_SetConfig+0xc0>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a17      	ldr	r2, [pc, #92]	@ (800933c <TIM_OC4_SetConfig+0x118>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d113      	bne.n	800930c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80092f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	695b      	ldr	r3, [r3, #20]
 80092f8:	019b      	lsls	r3, r3, #6
 80092fa:	693a      	ldr	r2, [r7, #16]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	019b      	lsls	r3, r3, #6
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	4313      	orrs	r3, r2
 800930a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	621a      	str	r2, [r3, #32]
}
 8009326:	bf00      	nop
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	40012c00 	.word	0x40012c00
 8009338:	40013400 	.word	0x40013400
 800933c:	40015000 	.word	0x40015000
 8009340:	40014000 	.word	0x40014000
 8009344:	40014400 	.word	0x40014400
 8009348:	40014800 	.word	0x40014800

0800934c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a1b      	ldr	r3, [r3, #32]
 8009360:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800937a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800937e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009390:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	041b      	lsls	r3, r3, #16
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	4313      	orrs	r3, r2
 800939c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a19      	ldr	r2, [pc, #100]	@ (8009408 <TIM_OC5_SetConfig+0xbc>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d013      	beq.n	80093ce <TIM_OC5_SetConfig+0x82>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a18      	ldr	r2, [pc, #96]	@ (800940c <TIM_OC5_SetConfig+0xc0>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d00f      	beq.n	80093ce <TIM_OC5_SetConfig+0x82>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a17      	ldr	r2, [pc, #92]	@ (8009410 <TIM_OC5_SetConfig+0xc4>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d00b      	beq.n	80093ce <TIM_OC5_SetConfig+0x82>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a16      	ldr	r2, [pc, #88]	@ (8009414 <TIM_OC5_SetConfig+0xc8>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d007      	beq.n	80093ce <TIM_OC5_SetConfig+0x82>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a15      	ldr	r2, [pc, #84]	@ (8009418 <TIM_OC5_SetConfig+0xcc>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d003      	beq.n	80093ce <TIM_OC5_SetConfig+0x82>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a14      	ldr	r2, [pc, #80]	@ (800941c <TIM_OC5_SetConfig+0xd0>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d109      	bne.n	80093e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	021b      	lsls	r3, r3, #8
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	4313      	orrs	r3, r2
 80093e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	693a      	ldr	r2, [r7, #16]
 80093fa:	621a      	str	r2, [r3, #32]
}
 80093fc:	bf00      	nop
 80093fe:	371c      	adds	r7, #28
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	40012c00 	.word	0x40012c00
 800940c:	40013400 	.word	0x40013400
 8009410:	40014000 	.word	0x40014000
 8009414:	40014400 	.word	0x40014400
 8009418:	40014800 	.word	0x40014800
 800941c:	40015000 	.word	0x40015000

08009420 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800944e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	021b      	lsls	r3, r3, #8
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	4313      	orrs	r3, r2
 800945e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	051b      	lsls	r3, r3, #20
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	4313      	orrs	r3, r2
 8009472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a1a      	ldr	r2, [pc, #104]	@ (80094e0 <TIM_OC6_SetConfig+0xc0>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d013      	beq.n	80094a4 <TIM_OC6_SetConfig+0x84>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a19      	ldr	r2, [pc, #100]	@ (80094e4 <TIM_OC6_SetConfig+0xc4>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d00f      	beq.n	80094a4 <TIM_OC6_SetConfig+0x84>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a18      	ldr	r2, [pc, #96]	@ (80094e8 <TIM_OC6_SetConfig+0xc8>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d00b      	beq.n	80094a4 <TIM_OC6_SetConfig+0x84>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a17      	ldr	r2, [pc, #92]	@ (80094ec <TIM_OC6_SetConfig+0xcc>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d007      	beq.n	80094a4 <TIM_OC6_SetConfig+0x84>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a16      	ldr	r2, [pc, #88]	@ (80094f0 <TIM_OC6_SetConfig+0xd0>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d003      	beq.n	80094a4 <TIM_OC6_SetConfig+0x84>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a15      	ldr	r2, [pc, #84]	@ (80094f4 <TIM_OC6_SetConfig+0xd4>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d109      	bne.n	80094b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	029b      	lsls	r3, r3, #10
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	621a      	str	r2, [r3, #32]
}
 80094d2:	bf00      	nop
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	40012c00 	.word	0x40012c00
 80094e4:	40013400 	.word	0x40013400
 80094e8:	40014000 	.word	0x40014000
 80094ec:	40014400 	.word	0x40014400
 80094f0:	40014800 	.word	0x40014800
 80094f4:	40015000 	.word	0x40015000

080094f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b087      	sub	sp, #28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	f023 0201 	bic.w	r2, r3, #1
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	011b      	lsls	r3, r3, #4
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	4313      	orrs	r3, r2
 800952c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f023 030a 	bic.w	r3, r3, #10
 8009534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	4313      	orrs	r3, r2
 800953c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	621a      	str	r2, [r3, #32]
}
 800954a:	bf00      	nop
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009556:	b480      	push	{r7}
 8009558:	b087      	sub	sp, #28
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	60b9      	str	r1, [r7, #8]
 8009560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a1b      	ldr	r3, [r3, #32]
 800956c:	f023 0210 	bic.w	r2, r3, #16
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	031b      	lsls	r3, r3, #12
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	4313      	orrs	r3, r2
 800958a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009592:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	011b      	lsls	r3, r3, #4
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	4313      	orrs	r3, r2
 800959c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	621a      	str	r2, [r3, #32]
}
 80095aa:	bf00      	nop
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b085      	sub	sp, #20
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80095cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	f043 0307 	orr.w	r3, r3, #7
 80095dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	609a      	str	r2, [r3, #8]
}
 80095e4:	bf00      	nop
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800960a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	021a      	lsls	r2, r3, #8
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	431a      	orrs	r2, r3
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4313      	orrs	r3, r2
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	4313      	orrs	r3, r2
 800961c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	609a      	str	r2, [r3, #8]
}
 8009624:	bf00      	nop
 8009626:	371c      	adds	r7, #28
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	f003 031f 	and.w	r3, r3, #31
 8009642:	2201      	movs	r2, #1
 8009644:	fa02 f303 	lsl.w	r3, r2, r3
 8009648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6a1a      	ldr	r2, [r3, #32]
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	43db      	mvns	r3, r3
 8009652:	401a      	ands	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a1a      	ldr	r2, [r3, #32]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f003 031f 	and.w	r3, r3, #31
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	fa01 f303 	lsl.w	r3, r1, r3
 8009668:	431a      	orrs	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	621a      	str	r2, [r3, #32]
}
 800966e:	bf00      	nop
 8009670:	371c      	adds	r7, #28
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
	...

0800967c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800968c:	2b01      	cmp	r3, #1
 800968e:	d101      	bne.n	8009694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009690:	2302      	movs	r3, #2
 8009692:	e074      	b.n	800977e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2202      	movs	r2, #2
 80096a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a34      	ldr	r2, [pc, #208]	@ (800978c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d009      	beq.n	80096d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a33      	ldr	r2, [pc, #204]	@ (8009790 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d004      	beq.n	80096d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a31      	ldr	r2, [pc, #196]	@ (8009794 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d108      	bne.n	80096e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80096d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80096ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a21      	ldr	r2, [pc, #132]	@ (800978c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d022      	beq.n	8009752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009714:	d01d      	beq.n	8009752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a1f      	ldr	r2, [pc, #124]	@ (8009798 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d018      	beq.n	8009752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a1d      	ldr	r2, [pc, #116]	@ (800979c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d013      	beq.n	8009752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a1c      	ldr	r2, [pc, #112]	@ (80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d00e      	beq.n	8009752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a15      	ldr	r2, [pc, #84]	@ (8009790 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d009      	beq.n	8009752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a18      	ldr	r2, [pc, #96]	@ (80097a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d004      	beq.n	8009752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a11      	ldr	r2, [pc, #68]	@ (8009794 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d10c      	bne.n	800976c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	4313      	orrs	r3, r2
 8009762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	40012c00 	.word	0x40012c00
 8009790:	40013400 	.word	0x40013400
 8009794:	40015000 	.word	0x40015000
 8009798:	40000400 	.word	0x40000400
 800979c:	40000800 	.word	0x40000800
 80097a0:	40000c00 	.word	0x40000c00
 80097a4:	40014000 	.word	0x40014000

080097a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e042      	b.n	80098cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800984c:	2b00      	cmp	r3, #0
 800984e:	d106      	bne.n	800985e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7fa fb63 	bl	8003f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2224      	movs	r2, #36	@ 0x24
 8009862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f022 0201 	bic.w	r2, r2, #1
 8009874:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987a:	2b00      	cmp	r3, #0
 800987c:	d002      	beq.n	8009884 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 ff60 	bl	800a744 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fc61 	bl	800a14c <UART_SetConfig>
 800988a:	4603      	mov	r3, r0
 800988c:	2b01      	cmp	r3, #1
 800988e:	d101      	bne.n	8009894 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e01b      	b.n	80098cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685a      	ldr	r2, [r3, #4]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80098a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689a      	ldr	r2, [r3, #8]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80098b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f042 0201 	orr.w	r2, r2, #1
 80098c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 ffdf 	bl	800a888 <UART_CheckIdleState>
 80098ca:	4603      	mov	r3, r0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08a      	sub	sp, #40	@ 0x28
 80098d8:	af02      	add	r7, sp, #8
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	4613      	mov	r3, r2
 80098e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	d17b      	bne.n	80099e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <HAL_UART_Transmit+0x26>
 80098f4:	88fb      	ldrh	r3, [r7, #6]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e074      	b.n	80099e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2221      	movs	r2, #33	@ 0x21
 800990a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800990e:	f7fa fbf7 	bl	8004100 <HAL_GetTick>
 8009912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	88fa      	ldrh	r2, [r7, #6]
 8009918:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	88fa      	ldrh	r2, [r7, #6]
 8009920:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800992c:	d108      	bne.n	8009940 <HAL_UART_Transmit+0x6c>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d104      	bne.n	8009940 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009936:	2300      	movs	r3, #0
 8009938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	61bb      	str	r3, [r7, #24]
 800993e:	e003      	b.n	8009948 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009944:	2300      	movs	r3, #0
 8009946:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009948:	e030      	b.n	80099ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2200      	movs	r2, #0
 8009952:	2180      	movs	r1, #128	@ 0x80
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f001 f841 	bl	800a9dc <UART_WaitOnFlagUntilTimeout>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d005      	beq.n	800996c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2220      	movs	r2, #32
 8009964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009968:	2303      	movs	r3, #3
 800996a:	e03d      	b.n	80099e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10b      	bne.n	800998a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	461a      	mov	r2, r3
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009980:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	3302      	adds	r3, #2
 8009986:	61bb      	str	r3, [r7, #24]
 8009988:	e007      	b.n	800999a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	781a      	ldrb	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	3301      	adds	r3, #1
 8009998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	3b01      	subs	r3, #1
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1c8      	bne.n	800994a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2200      	movs	r2, #0
 80099c0:	2140      	movs	r1, #64	@ 0x40
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f001 f80a 	bl	800a9dc <UART_WaitOnFlagUntilTimeout>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d005      	beq.n	80099da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2220      	movs	r2, #32
 80099d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e006      	b.n	80099e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2220      	movs	r2, #32
 80099de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	e000      	b.n	80099e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80099e6:	2302      	movs	r3, #2
  }
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3720      	adds	r7, #32
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08a      	sub	sp, #40	@ 0x28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	4613      	mov	r3, r2
 80099fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a04:	2b20      	cmp	r3, #32
 8009a06:	d137      	bne.n	8009a78 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <HAL_UART_Receive_IT+0x24>
 8009a0e:	88fb      	ldrh	r3, [r7, #6]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	e030      	b.n	8009a7a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a18      	ldr	r2, [pc, #96]	@ (8009a84 <HAL_UART_Receive_IT+0x94>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d01f      	beq.n	8009a68 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d018      	beq.n	8009a68 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	e853 3f00 	ldrex	r3, [r3]
 8009a42:	613b      	str	r3, [r7, #16]
   return(result);
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	461a      	mov	r2, r3
 8009a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a54:	623b      	str	r3, [r7, #32]
 8009a56:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a58:	69f9      	ldr	r1, [r7, #28]
 8009a5a:	6a3a      	ldr	r2, [r7, #32]
 8009a5c:	e841 2300 	strex	r3, r2, [r1]
 8009a60:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1e6      	bne.n	8009a36 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009a68:	88fb      	ldrh	r3, [r7, #6]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	68b9      	ldr	r1, [r7, #8]
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f001 f822 	bl	800aab8 <UART_Start_Receive_IT>
 8009a74:	4603      	mov	r3, r0
 8009a76:	e000      	b.n	8009a7a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009a78:	2302      	movs	r3, #2
  }
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3728      	adds	r7, #40	@ 0x28
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	40008000 	.word	0x40008000

08009a88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b0ba      	sub	sp, #232	@ 0xe8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009aae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009ab2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009abc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d11b      	bne.n	8009afc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ac8:	f003 0320 	and.w	r3, r3, #32
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d015      	beq.n	8009afc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ad4:	f003 0320 	and.w	r3, r3, #32
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d105      	bne.n	8009ae8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d009      	beq.n	8009afc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 8300 	beq.w	800a0f2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	4798      	blx	r3
      }
      return;
 8009afa:	e2fa      	b.n	800a0f2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 8123 	beq.w	8009d4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b0a:	4b8d      	ldr	r3, [pc, #564]	@ (8009d40 <HAL_UART_IRQHandler+0x2b8>)
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d106      	bne.n	8009b20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009b16:	4b8b      	ldr	r3, [pc, #556]	@ (8009d44 <HAL_UART_IRQHandler+0x2bc>)
 8009b18:	4013      	ands	r3, r2
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f000 8116 	beq.w	8009d4c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b24:	f003 0301 	and.w	r3, r3, #1
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d011      	beq.n	8009b50 <HAL_UART_IRQHandler+0xc8>
 8009b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00b      	beq.n	8009b50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b46:	f043 0201 	orr.w	r2, r3, #1
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d011      	beq.n	8009b80 <HAL_UART_IRQHandler+0xf8>
 8009b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00b      	beq.n	8009b80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b76:	f043 0204 	orr.w	r2, r3, #4
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b84:	f003 0304 	and.w	r3, r3, #4
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d011      	beq.n	8009bb0 <HAL_UART_IRQHandler+0x128>
 8009b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00b      	beq.n	8009bb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2204      	movs	r2, #4
 8009b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ba6:	f043 0202 	orr.w	r2, r3, #2
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bb4:	f003 0308 	and.w	r3, r3, #8
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d017      	beq.n	8009bec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bc0:	f003 0320 	and.w	r3, r3, #32
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d105      	bne.n	8009bd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009bc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009bcc:	4b5c      	ldr	r3, [pc, #368]	@ (8009d40 <HAL_UART_IRQHandler+0x2b8>)
 8009bce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00b      	beq.n	8009bec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2208      	movs	r2, #8
 8009bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009be2:	f043 0208 	orr.w	r2, r3, #8
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d012      	beq.n	8009c1e <HAL_UART_IRQHandler+0x196>
 8009bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00c      	beq.n	8009c1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c14:	f043 0220 	orr.w	r2, r3, #32
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 8266 	beq.w	800a0f6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2e:	f003 0320 	and.w	r3, r3, #32
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d013      	beq.n	8009c5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c3a:	f003 0320 	and.w	r3, r3, #32
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d105      	bne.n	8009c4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d007      	beq.n	8009c5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c72:	2b40      	cmp	r3, #64	@ 0x40
 8009c74:	d005      	beq.n	8009c82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d054      	beq.n	8009d2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f001 f83a 	bl	800acfc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c92:	2b40      	cmp	r3, #64	@ 0x40
 8009c94:	d146      	bne.n	8009d24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3308      	adds	r3, #8
 8009c9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ca4:	e853 3f00 	ldrex	r3, [r3]
 8009ca8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009cc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009cce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009cd2:	e841 2300 	strex	r3, r2, [r1]
 8009cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1d9      	bne.n	8009c96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d017      	beq.n	8009d1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf2:	4a15      	ldr	r2, [pc, #84]	@ (8009d48 <HAL_UART_IRQHandler+0x2c0>)
 8009cf4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fb fffb 	bl	8005cf8 <HAL_DMA_Abort_IT>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d019      	beq.n	8009d3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009d16:	4610      	mov	r0, r2
 8009d18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d1a:	e00f      	b.n	8009d3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f9ff 	bl	800a120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d22:	e00b      	b.n	8009d3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f9fb 	bl	800a120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d2a:	e007      	b.n	8009d3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f9f7 	bl	800a120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009d3a:	e1dc      	b.n	800a0f6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d3c:	bf00      	nop
    return;
 8009d3e:	e1da      	b.n	800a0f6 <HAL_UART_IRQHandler+0x66e>
 8009d40:	10000001 	.word	0x10000001
 8009d44:	04000120 	.word	0x04000120
 8009d48:	0800adc9 	.word	0x0800adc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	f040 8170 	bne.w	800a036 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d5a:	f003 0310 	and.w	r3, r3, #16
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 8169 	beq.w	800a036 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d68:	f003 0310 	and.w	r3, r3, #16
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 8162 	beq.w	800a036 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2210      	movs	r2, #16
 8009d78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d84:	2b40      	cmp	r3, #64	@ 0x40
 8009d86:	f040 80d8 	bne.w	8009f3a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f000 80af 	beq.w	8009f00 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009da8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009dac:	429a      	cmp	r2, r3
 8009dae:	f080 80a7 	bcs.w	8009f00 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009db8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0320 	and.w	r3, r3, #32
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f040 8087 	bne.w	8009ede <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ddc:	e853 3f00 	ldrex	r3, [r3]
 8009de0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	461a      	mov	r2, r3
 8009df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009dfe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e0a:	e841 2300 	strex	r3, r2, [r1]
 8009e0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1da      	bne.n	8009dd0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3308      	adds	r3, #8
 8009e20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e24:	e853 3f00 	ldrex	r3, [r3]
 8009e28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e2c:	f023 0301 	bic.w	r3, r3, #1
 8009e30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	3308      	adds	r3, #8
 8009e3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e4a:	e841 2300 	strex	r3, r2, [r1]
 8009e4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1e1      	bne.n	8009e1a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3308      	adds	r3, #8
 8009e5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e60:	e853 3f00 	ldrex	r3, [r3]
 8009e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	3308      	adds	r3, #8
 8009e76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e82:	e841 2300 	strex	r3, r2, [r1]
 8009e86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1e3      	bne.n	8009e56 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2220      	movs	r2, #32
 8009e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ea4:	e853 3f00 	ldrex	r3, [r3]
 8009ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009eac:	f023 0310 	bic.w	r3, r3, #16
 8009eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ebe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ec0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ec4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e4      	bne.n	8009e9c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fb feb4 	bl	8005c46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f91b 	bl	800a134 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009efe:	e0fc      	b.n	800a0fa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	f040 80f5 	bne.w	800a0fa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0320 	and.w	r3, r3, #32
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	f040 80eb 	bne.w	800a0fa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2202      	movs	r2, #2
 8009f28:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f8fe 	bl	800a134 <HAL_UARTEx_RxEventCallback>
      return;
 8009f38:	e0df      	b.n	800a0fa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 80d1 	beq.w	800a0fe <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 80cc 	beq.w	800a0fe <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f6e:	e853 3f00 	ldrex	r3, [r3]
 8009f72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	461a      	mov	r2, r3
 8009f84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e4      	bne.n	8009f66 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3308      	adds	r3, #8
 8009fa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa6:	e853 3f00 	ldrex	r3, [r3]
 8009faa:	623b      	str	r3, [r7, #32]
   return(result);
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009fb2:	f023 0301 	bic.w	r3, r3, #1
 8009fb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3308      	adds	r3, #8
 8009fc0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009fc4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fcc:	e841 2300 	strex	r3, r2, [r1]
 8009fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1e1      	bne.n	8009f9c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2220      	movs	r2, #32
 8009fdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	e853 3f00 	ldrex	r3, [r3]
 8009ff8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f023 0310 	bic.w	r3, r3, #16
 800a000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	461a      	mov	r2, r3
 800a00a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a00e:	61fb      	str	r3, [r7, #28]
 800a010:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	69b9      	ldr	r1, [r7, #24]
 800a014:	69fa      	ldr	r2, [r7, #28]
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	617b      	str	r3, [r7, #20]
   return(result);
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e4      	bne.n	8009fec <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2202      	movs	r2, #2
 800a026:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f880 	bl	800a134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a034:	e063      	b.n	800a0fe <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a03a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00e      	beq.n	800a060 <HAL_UART_IRQHandler+0x5d8>
 800a042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d008      	beq.n	800a060 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a056:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 fc13 	bl	800b884 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a05e:	e051      	b.n	800a104 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d014      	beq.n	800a096 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a06c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a074:	2b00      	cmp	r3, #0
 800a076:	d105      	bne.n	800a084 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a07c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d008      	beq.n	800a096 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d03a      	beq.n	800a102 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	4798      	blx	r3
    }
    return;
 800a094:	e035      	b.n	800a102 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a09a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d009      	beq.n	800a0b6 <HAL_UART_IRQHandler+0x62e>
 800a0a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fe9c 	bl	800adec <UART_EndTransmit_IT>
    return;
 800a0b4:	e026      	b.n	800a104 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d009      	beq.n	800a0d6 <HAL_UART_IRQHandler+0x64e>
 800a0c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d003      	beq.n	800a0d6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f001 fbec 	bl	800b8ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0d4:	e016      	b.n	800a104 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a0d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d010      	beq.n	800a104 <HAL_UART_IRQHandler+0x67c>
 800a0e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	da0c      	bge.n	800a104 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f001 fbd4 	bl	800b898 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0f0:	e008      	b.n	800a104 <HAL_UART_IRQHandler+0x67c>
      return;
 800a0f2:	bf00      	nop
 800a0f4:	e006      	b.n	800a104 <HAL_UART_IRQHandler+0x67c>
    return;
 800a0f6:	bf00      	nop
 800a0f8:	e004      	b.n	800a104 <HAL_UART_IRQHandler+0x67c>
      return;
 800a0fa:	bf00      	nop
 800a0fc:	e002      	b.n	800a104 <HAL_UART_IRQHandler+0x67c>
      return;
 800a0fe:	bf00      	nop
 800a100:	e000      	b.n	800a104 <HAL_UART_IRQHandler+0x67c>
    return;
 800a102:	bf00      	nop
  }
}
 800a104:	37e8      	adds	r7, #232	@ 0xe8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop

0800a10c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a14c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a150:	b08c      	sub	sp, #48	@ 0x30
 800a152:	af00      	add	r7, sp, #0
 800a154:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	689a      	ldr	r2, [r3, #8]
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	431a      	orrs	r2, r3
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	431a      	orrs	r2, r3
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	4313      	orrs	r3, r2
 800a172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	4baa      	ldr	r3, [pc, #680]	@ (800a424 <UART_SetConfig+0x2d8>)
 800a17c:	4013      	ands	r3, r2
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	6812      	ldr	r2, [r2, #0]
 800a182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a184:	430b      	orrs	r3, r1
 800a186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	68da      	ldr	r2, [r3, #12]
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	430a      	orrs	r2, r1
 800a19c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a9f      	ldr	r2, [pc, #636]	@ (800a428 <UART_SetConfig+0x2dc>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d004      	beq.n	800a1b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a1c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	6812      	ldr	r2, [r2, #0]
 800a1ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1cc:	430b      	orrs	r3, r1
 800a1ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d6:	f023 010f 	bic.w	r1, r3, #15
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a90      	ldr	r2, [pc, #576]	@ (800a42c <UART_SetConfig+0x2e0>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d125      	bne.n	800a23c <UART_SetConfig+0xf0>
 800a1f0:	4b8f      	ldr	r3, [pc, #572]	@ (800a430 <UART_SetConfig+0x2e4>)
 800a1f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1f6:	f003 0303 	and.w	r3, r3, #3
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d81a      	bhi.n	800a234 <UART_SetConfig+0xe8>
 800a1fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a204 <UART_SetConfig+0xb8>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a215 	.word	0x0800a215
 800a208:	0800a225 	.word	0x0800a225
 800a20c:	0800a21d 	.word	0x0800a21d
 800a210:	0800a22d 	.word	0x0800a22d
 800a214:	2301      	movs	r3, #1
 800a216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a21a:	e116      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a21c:	2302      	movs	r3, #2
 800a21e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a222:	e112      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a224:	2304      	movs	r3, #4
 800a226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a22a:	e10e      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a22c:	2308      	movs	r3, #8
 800a22e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a232:	e10a      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a234:	2310      	movs	r3, #16
 800a236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a23a:	e106      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a7c      	ldr	r2, [pc, #496]	@ (800a434 <UART_SetConfig+0x2e8>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d138      	bne.n	800a2b8 <UART_SetConfig+0x16c>
 800a246:	4b7a      	ldr	r3, [pc, #488]	@ (800a430 <UART_SetConfig+0x2e4>)
 800a248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a24c:	f003 030c 	and.w	r3, r3, #12
 800a250:	2b0c      	cmp	r3, #12
 800a252:	d82d      	bhi.n	800a2b0 <UART_SetConfig+0x164>
 800a254:	a201      	add	r2, pc, #4	@ (adr r2, 800a25c <UART_SetConfig+0x110>)
 800a256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25a:	bf00      	nop
 800a25c:	0800a291 	.word	0x0800a291
 800a260:	0800a2b1 	.word	0x0800a2b1
 800a264:	0800a2b1 	.word	0x0800a2b1
 800a268:	0800a2b1 	.word	0x0800a2b1
 800a26c:	0800a2a1 	.word	0x0800a2a1
 800a270:	0800a2b1 	.word	0x0800a2b1
 800a274:	0800a2b1 	.word	0x0800a2b1
 800a278:	0800a2b1 	.word	0x0800a2b1
 800a27c:	0800a299 	.word	0x0800a299
 800a280:	0800a2b1 	.word	0x0800a2b1
 800a284:	0800a2b1 	.word	0x0800a2b1
 800a288:	0800a2b1 	.word	0x0800a2b1
 800a28c:	0800a2a9 	.word	0x0800a2a9
 800a290:	2300      	movs	r3, #0
 800a292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a296:	e0d8      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a298:	2302      	movs	r3, #2
 800a29a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a29e:	e0d4      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a2a0:	2304      	movs	r3, #4
 800a2a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2a6:	e0d0      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a2a8:	2308      	movs	r3, #8
 800a2aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ae:	e0cc      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2b6:	e0c8      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a5e      	ldr	r2, [pc, #376]	@ (800a438 <UART_SetConfig+0x2ec>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d125      	bne.n	800a30e <UART_SetConfig+0x1c2>
 800a2c2:	4b5b      	ldr	r3, [pc, #364]	@ (800a430 <UART_SetConfig+0x2e4>)
 800a2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a2cc:	2b30      	cmp	r3, #48	@ 0x30
 800a2ce:	d016      	beq.n	800a2fe <UART_SetConfig+0x1b2>
 800a2d0:	2b30      	cmp	r3, #48	@ 0x30
 800a2d2:	d818      	bhi.n	800a306 <UART_SetConfig+0x1ba>
 800a2d4:	2b20      	cmp	r3, #32
 800a2d6:	d00a      	beq.n	800a2ee <UART_SetConfig+0x1a2>
 800a2d8:	2b20      	cmp	r3, #32
 800a2da:	d814      	bhi.n	800a306 <UART_SetConfig+0x1ba>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d002      	beq.n	800a2e6 <UART_SetConfig+0x19a>
 800a2e0:	2b10      	cmp	r3, #16
 800a2e2:	d008      	beq.n	800a2f6 <UART_SetConfig+0x1aa>
 800a2e4:	e00f      	b.n	800a306 <UART_SetConfig+0x1ba>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ec:	e0ad      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2f4:	e0a9      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a2f6:	2304      	movs	r3, #4
 800a2f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2fc:	e0a5      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a2fe:	2308      	movs	r3, #8
 800a300:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a304:	e0a1      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a306:	2310      	movs	r3, #16
 800a308:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a30c:	e09d      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a4a      	ldr	r2, [pc, #296]	@ (800a43c <UART_SetConfig+0x2f0>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d125      	bne.n	800a364 <UART_SetConfig+0x218>
 800a318:	4b45      	ldr	r3, [pc, #276]	@ (800a430 <UART_SetConfig+0x2e4>)
 800a31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a31e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a322:	2bc0      	cmp	r3, #192	@ 0xc0
 800a324:	d016      	beq.n	800a354 <UART_SetConfig+0x208>
 800a326:	2bc0      	cmp	r3, #192	@ 0xc0
 800a328:	d818      	bhi.n	800a35c <UART_SetConfig+0x210>
 800a32a:	2b80      	cmp	r3, #128	@ 0x80
 800a32c:	d00a      	beq.n	800a344 <UART_SetConfig+0x1f8>
 800a32e:	2b80      	cmp	r3, #128	@ 0x80
 800a330:	d814      	bhi.n	800a35c <UART_SetConfig+0x210>
 800a332:	2b00      	cmp	r3, #0
 800a334:	d002      	beq.n	800a33c <UART_SetConfig+0x1f0>
 800a336:	2b40      	cmp	r3, #64	@ 0x40
 800a338:	d008      	beq.n	800a34c <UART_SetConfig+0x200>
 800a33a:	e00f      	b.n	800a35c <UART_SetConfig+0x210>
 800a33c:	2300      	movs	r3, #0
 800a33e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a342:	e082      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a344:	2302      	movs	r3, #2
 800a346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a34a:	e07e      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a34c:	2304      	movs	r3, #4
 800a34e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a352:	e07a      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a354:	2308      	movs	r3, #8
 800a356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a35a:	e076      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a35c:	2310      	movs	r3, #16
 800a35e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a362:	e072      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a35      	ldr	r2, [pc, #212]	@ (800a440 <UART_SetConfig+0x2f4>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d12a      	bne.n	800a3c4 <UART_SetConfig+0x278>
 800a36e:	4b30      	ldr	r3, [pc, #192]	@ (800a430 <UART_SetConfig+0x2e4>)
 800a370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a378:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a37c:	d01a      	beq.n	800a3b4 <UART_SetConfig+0x268>
 800a37e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a382:	d81b      	bhi.n	800a3bc <UART_SetConfig+0x270>
 800a384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a388:	d00c      	beq.n	800a3a4 <UART_SetConfig+0x258>
 800a38a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a38e:	d815      	bhi.n	800a3bc <UART_SetConfig+0x270>
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <UART_SetConfig+0x250>
 800a394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a398:	d008      	beq.n	800a3ac <UART_SetConfig+0x260>
 800a39a:	e00f      	b.n	800a3bc <UART_SetConfig+0x270>
 800a39c:	2300      	movs	r3, #0
 800a39e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3a2:	e052      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3aa:	e04e      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a3ac:	2304      	movs	r3, #4
 800a3ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3b2:	e04a      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a3b4:	2308      	movs	r3, #8
 800a3b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3ba:	e046      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a3bc:	2310      	movs	r3, #16
 800a3be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3c2:	e042      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a17      	ldr	r2, [pc, #92]	@ (800a428 <UART_SetConfig+0x2dc>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d13a      	bne.n	800a444 <UART_SetConfig+0x2f8>
 800a3ce:	4b18      	ldr	r3, [pc, #96]	@ (800a430 <UART_SetConfig+0x2e4>)
 800a3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a3d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3dc:	d01a      	beq.n	800a414 <UART_SetConfig+0x2c8>
 800a3de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3e2:	d81b      	bhi.n	800a41c <UART_SetConfig+0x2d0>
 800a3e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3e8:	d00c      	beq.n	800a404 <UART_SetConfig+0x2b8>
 800a3ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3ee:	d815      	bhi.n	800a41c <UART_SetConfig+0x2d0>
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d003      	beq.n	800a3fc <UART_SetConfig+0x2b0>
 800a3f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3f8:	d008      	beq.n	800a40c <UART_SetConfig+0x2c0>
 800a3fa:	e00f      	b.n	800a41c <UART_SetConfig+0x2d0>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a402:	e022      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a404:	2302      	movs	r3, #2
 800a406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a40a:	e01e      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a40c:	2304      	movs	r3, #4
 800a40e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a412:	e01a      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a414:	2308      	movs	r3, #8
 800a416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a41a:	e016      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a41c:	2310      	movs	r3, #16
 800a41e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a422:	e012      	b.n	800a44a <UART_SetConfig+0x2fe>
 800a424:	cfff69f3 	.word	0xcfff69f3
 800a428:	40008000 	.word	0x40008000
 800a42c:	40013800 	.word	0x40013800
 800a430:	40021000 	.word	0x40021000
 800a434:	40004400 	.word	0x40004400
 800a438:	40004800 	.word	0x40004800
 800a43c:	40004c00 	.word	0x40004c00
 800a440:	40005000 	.word	0x40005000
 800a444:	2310      	movs	r3, #16
 800a446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4aae      	ldr	r2, [pc, #696]	@ (800a708 <UART_SetConfig+0x5bc>)
 800a450:	4293      	cmp	r3, r2
 800a452:	f040 8097 	bne.w	800a584 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a456:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a45a:	2b08      	cmp	r3, #8
 800a45c:	d823      	bhi.n	800a4a6 <UART_SetConfig+0x35a>
 800a45e:	a201      	add	r2, pc, #4	@ (adr r2, 800a464 <UART_SetConfig+0x318>)
 800a460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a464:	0800a489 	.word	0x0800a489
 800a468:	0800a4a7 	.word	0x0800a4a7
 800a46c:	0800a491 	.word	0x0800a491
 800a470:	0800a4a7 	.word	0x0800a4a7
 800a474:	0800a497 	.word	0x0800a497
 800a478:	0800a4a7 	.word	0x0800a4a7
 800a47c:	0800a4a7 	.word	0x0800a4a7
 800a480:	0800a4a7 	.word	0x0800a4a7
 800a484:	0800a49f 	.word	0x0800a49f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a488:	f7fc fe50 	bl	800712c <HAL_RCC_GetPCLK1Freq>
 800a48c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a48e:	e010      	b.n	800a4b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a490:	4b9e      	ldr	r3, [pc, #632]	@ (800a70c <UART_SetConfig+0x5c0>)
 800a492:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a494:	e00d      	b.n	800a4b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a496:	f7fc fddb 	bl	8007050 <HAL_RCC_GetSysClockFreq>
 800a49a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a49c:	e009      	b.n	800a4b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a49e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4a4:	e005      	b.n	800a4b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a4b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 8130 	beq.w	800a71a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4be:	4a94      	ldr	r2, [pc, #592]	@ (800a710 <UART_SetConfig+0x5c4>)
 800a4c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	4413      	add	r3, r2
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d305      	bcc.n	800a4ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4e4:	69ba      	ldr	r2, [r7, #24]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d903      	bls.n	800a4f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a4f0:	e113      	b.n	800a71a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	60bb      	str	r3, [r7, #8]
 800a4f8:	60fa      	str	r2, [r7, #12]
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4fe:	4a84      	ldr	r2, [pc, #528]	@ (800a710 <UART_SetConfig+0x5c4>)
 800a500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a504:	b29b      	uxth	r3, r3
 800a506:	2200      	movs	r2, #0
 800a508:	603b      	str	r3, [r7, #0]
 800a50a:	607a      	str	r2, [r7, #4]
 800a50c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a510:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a514:	f7f6 fbf0 	bl	8000cf8 <__aeabi_uldivmod>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4610      	mov	r0, r2
 800a51e:	4619      	mov	r1, r3
 800a520:	f04f 0200 	mov.w	r2, #0
 800a524:	f04f 0300 	mov.w	r3, #0
 800a528:	020b      	lsls	r3, r1, #8
 800a52a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a52e:	0202      	lsls	r2, r0, #8
 800a530:	6979      	ldr	r1, [r7, #20]
 800a532:	6849      	ldr	r1, [r1, #4]
 800a534:	0849      	lsrs	r1, r1, #1
 800a536:	2000      	movs	r0, #0
 800a538:	460c      	mov	r4, r1
 800a53a:	4605      	mov	r5, r0
 800a53c:	eb12 0804 	adds.w	r8, r2, r4
 800a540:	eb43 0905 	adc.w	r9, r3, r5
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	469a      	mov	sl, r3
 800a54c:	4693      	mov	fp, r2
 800a54e:	4652      	mov	r2, sl
 800a550:	465b      	mov	r3, fp
 800a552:	4640      	mov	r0, r8
 800a554:	4649      	mov	r1, r9
 800a556:	f7f6 fbcf 	bl	8000cf8 <__aeabi_uldivmod>
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	4613      	mov	r3, r2
 800a560:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a562:	6a3b      	ldr	r3, [r7, #32]
 800a564:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a568:	d308      	bcc.n	800a57c <UART_SetConfig+0x430>
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a570:	d204      	bcs.n	800a57c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6a3a      	ldr	r2, [r7, #32]
 800a578:	60da      	str	r2, [r3, #12]
 800a57a:	e0ce      	b.n	800a71a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a582:	e0ca      	b.n	800a71a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	69db      	ldr	r3, [r3, #28]
 800a588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a58c:	d166      	bne.n	800a65c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a58e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a592:	2b08      	cmp	r3, #8
 800a594:	d827      	bhi.n	800a5e6 <UART_SetConfig+0x49a>
 800a596:	a201      	add	r2, pc, #4	@ (adr r2, 800a59c <UART_SetConfig+0x450>)
 800a598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59c:	0800a5c1 	.word	0x0800a5c1
 800a5a0:	0800a5c9 	.word	0x0800a5c9
 800a5a4:	0800a5d1 	.word	0x0800a5d1
 800a5a8:	0800a5e7 	.word	0x0800a5e7
 800a5ac:	0800a5d7 	.word	0x0800a5d7
 800a5b0:	0800a5e7 	.word	0x0800a5e7
 800a5b4:	0800a5e7 	.word	0x0800a5e7
 800a5b8:	0800a5e7 	.word	0x0800a5e7
 800a5bc:	0800a5df 	.word	0x0800a5df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5c0:	f7fc fdb4 	bl	800712c <HAL_RCC_GetPCLK1Freq>
 800a5c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5c6:	e014      	b.n	800a5f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5c8:	f7fc fdc6 	bl	8007158 <HAL_RCC_GetPCLK2Freq>
 800a5cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5ce:	e010      	b.n	800a5f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5d0:	4b4e      	ldr	r3, [pc, #312]	@ (800a70c <UART_SetConfig+0x5c0>)
 800a5d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5d4:	e00d      	b.n	800a5f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5d6:	f7fc fd3b 	bl	8007050 <HAL_RCC_GetSysClockFreq>
 800a5da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5dc:	e009      	b.n	800a5f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5e4:	e005      	b.n	800a5f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a5f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 8090 	beq.w	800a71a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fe:	4a44      	ldr	r2, [pc, #272]	@ (800a710 <UART_SetConfig+0x5c4>)
 800a600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a604:	461a      	mov	r2, r3
 800a606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a608:	fbb3 f3f2 	udiv	r3, r3, r2
 800a60c:	005a      	lsls	r2, r3, #1
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	085b      	lsrs	r3, r3, #1
 800a614:	441a      	add	r2, r3
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	2b0f      	cmp	r3, #15
 800a624:	d916      	bls.n	800a654 <UART_SetConfig+0x508>
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a62c:	d212      	bcs.n	800a654 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	b29b      	uxth	r3, r3
 800a632:	f023 030f 	bic.w	r3, r3, #15
 800a636:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a638:	6a3b      	ldr	r3, [r7, #32]
 800a63a:	085b      	lsrs	r3, r3, #1
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	f003 0307 	and.w	r3, r3, #7
 800a642:	b29a      	uxth	r2, r3
 800a644:	8bfb      	ldrh	r3, [r7, #30]
 800a646:	4313      	orrs	r3, r2
 800a648:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	8bfa      	ldrh	r2, [r7, #30]
 800a650:	60da      	str	r2, [r3, #12]
 800a652:	e062      	b.n	800a71a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a65a:	e05e      	b.n	800a71a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a65c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a660:	2b08      	cmp	r3, #8
 800a662:	d828      	bhi.n	800a6b6 <UART_SetConfig+0x56a>
 800a664:	a201      	add	r2, pc, #4	@ (adr r2, 800a66c <UART_SetConfig+0x520>)
 800a666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66a:	bf00      	nop
 800a66c:	0800a691 	.word	0x0800a691
 800a670:	0800a699 	.word	0x0800a699
 800a674:	0800a6a1 	.word	0x0800a6a1
 800a678:	0800a6b7 	.word	0x0800a6b7
 800a67c:	0800a6a7 	.word	0x0800a6a7
 800a680:	0800a6b7 	.word	0x0800a6b7
 800a684:	0800a6b7 	.word	0x0800a6b7
 800a688:	0800a6b7 	.word	0x0800a6b7
 800a68c:	0800a6af 	.word	0x0800a6af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a690:	f7fc fd4c 	bl	800712c <HAL_RCC_GetPCLK1Freq>
 800a694:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a696:	e014      	b.n	800a6c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a698:	f7fc fd5e 	bl	8007158 <HAL_RCC_GetPCLK2Freq>
 800a69c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a69e:	e010      	b.n	800a6c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a70c <UART_SetConfig+0x5c0>)
 800a6a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a6a4:	e00d      	b.n	800a6c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6a6:	f7fc fcd3 	bl	8007050 <HAL_RCC_GetSysClockFreq>
 800a6aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6ac:	e009      	b.n	800a6c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a6b4:	e005      	b.n	800a6c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a6c0:	bf00      	nop
    }

    if (pclk != 0U)
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d028      	beq.n	800a71a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6cc:	4a10      	ldr	r2, [pc, #64]	@ (800a710 <UART_SetConfig+0x5c4>)
 800a6ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	085b      	lsrs	r3, r3, #1
 800a6e0:	441a      	add	r2, r3
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	2b0f      	cmp	r3, #15
 800a6f0:	d910      	bls.n	800a714 <UART_SetConfig+0x5c8>
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6f8:	d20c      	bcs.n	800a714 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	60da      	str	r2, [r3, #12]
 800a704:	e009      	b.n	800a71a <UART_SetConfig+0x5ce>
 800a706:	bf00      	nop
 800a708:	40008000 	.word	0x40008000
 800a70c:	00f42400 	.word	0x00f42400
 800a710:	08013d10 	.word	0x08013d10
      }
      else
      {
        ret = HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	2201      	movs	r2, #1
 800a726:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2200      	movs	r2, #0
 800a72e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	2200      	movs	r2, #0
 800a734:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a736:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3730      	adds	r7, #48	@ 0x30
 800a73e:	46bd      	mov	sp, r7
 800a740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a750:	f003 0308 	and.w	r3, r3, #8
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00a      	beq.n	800a76e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	430a      	orrs	r2, r1
 800a76c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a772:	f003 0301 	and.w	r3, r3, #1
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00a      	beq.n	800a790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	430a      	orrs	r2, r1
 800a78e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a794:	f003 0302 	and.w	r3, r3, #2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00a      	beq.n	800a7b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7b6:	f003 0304 	and.w	r3, r3, #4
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00a      	beq.n	800a7d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d8:	f003 0310 	and.w	r3, r3, #16
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00a      	beq.n	800a7f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7fa:	f003 0320 	and.w	r3, r3, #32
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00a      	beq.n	800a818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	430a      	orrs	r2, r1
 800a816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a81c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a820:	2b00      	cmp	r3, #0
 800a822:	d01a      	beq.n	800a85a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	430a      	orrs	r2, r1
 800a838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a83e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a842:	d10a      	bne.n	800a85a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	430a      	orrs	r2, r1
 800a858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00a      	beq.n	800a87c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	430a      	orrs	r2, r1
 800a87a:	605a      	str	r2, [r3, #4]
  }
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b098      	sub	sp, #96	@ 0x60
 800a88c:	af02      	add	r7, sp, #8
 800a88e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a898:	f7f9 fc32 	bl	8004100 <HAL_GetTick>
 800a89c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 0308 	and.w	r3, r3, #8
 800a8a8:	2b08      	cmp	r3, #8
 800a8aa:	d12f      	bne.n	800a90c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f88e 	bl	800a9dc <UART_WaitOnFlagUntilTimeout>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d022      	beq.n	800a90c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ce:	e853 3f00 	ldrex	r3, [r3]
 800a8d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8da:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8ec:	e841 2300 	strex	r3, r2, [r1]
 800a8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e6      	bne.n	800a8c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e063      	b.n	800a9d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0304 	and.w	r3, r3, #4
 800a916:	2b04      	cmp	r3, #4
 800a918:	d149      	bne.n	800a9ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a91a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a922:	2200      	movs	r2, #0
 800a924:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f857 	bl	800a9dc <UART_WaitOnFlagUntilTimeout>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d03c      	beq.n	800a9ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	e853 3f00 	ldrex	r3, [r3]
 800a940:	623b      	str	r3, [r7, #32]
   return(result);
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a952:	633b      	str	r3, [r7, #48]	@ 0x30
 800a954:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a95a:	e841 2300 	strex	r3, r2, [r1]
 800a95e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1e6      	bne.n	800a934 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3308      	adds	r3, #8
 800a96c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	e853 3f00 	ldrex	r3, [r3]
 800a974:	60fb      	str	r3, [r7, #12]
   return(result);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f023 0301 	bic.w	r3, r3, #1
 800a97c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3308      	adds	r3, #8
 800a984:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a986:	61fa      	str	r2, [r7, #28]
 800a988:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98a:	69b9      	ldr	r1, [r7, #24]
 800a98c:	69fa      	ldr	r2, [r7, #28]
 800a98e:	e841 2300 	strex	r3, r2, [r1]
 800a992:	617b      	str	r3, [r7, #20]
   return(result);
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1e5      	bne.n	800a966 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2220      	movs	r2, #32
 800a99e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e012      	b.n	800a9d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2220      	movs	r2, #32
 800a9b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3758      	adds	r7, #88	@ 0x58
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	603b      	str	r3, [r7, #0]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9ec:	e04f      	b.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f4:	d04b      	beq.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9f6:	f7f9 fb83 	bl	8004100 <HAL_GetTick>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	69ba      	ldr	r2, [r7, #24]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d302      	bcc.n	800aa0c <UART_WaitOnFlagUntilTimeout+0x30>
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e04e      	b.n	800aaae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d037      	beq.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b80      	cmp	r3, #128	@ 0x80
 800aa22:	d034      	beq.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2b40      	cmp	r3, #64	@ 0x40
 800aa28:	d031      	beq.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	69db      	ldr	r3, [r3, #28]
 800aa30:	f003 0308 	and.w	r3, r3, #8
 800aa34:	2b08      	cmp	r3, #8
 800aa36:	d110      	bne.n	800aa5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2208      	movs	r2, #8
 800aa3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 f95b 	bl	800acfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2208      	movs	r2, #8
 800aa4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e029      	b.n	800aaae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa68:	d111      	bne.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f000 f941 	bl	800acfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e00f      	b.n	800aaae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	69da      	ldr	r2, [r3, #28]
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	4013      	ands	r3, r2
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	bf0c      	ite	eq
 800aa9e:	2301      	moveq	r3, #1
 800aaa0:	2300      	movne	r3, #0
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	79fb      	ldrb	r3, [r7, #7]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d0a0      	beq.n	800a9ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
	...

0800aab8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b0a3      	sub	sp, #140	@ 0x8c
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	4613      	mov	r3, r2
 800aac4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	88fa      	ldrh	r2, [r7, #6]
 800aad0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	88fa      	ldrh	r2, [r7, #6]
 800aad8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aaea:	d10e      	bne.n	800ab0a <UART_Start_Receive_IT+0x52>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d105      	bne.n	800ab00 <UART_Start_Receive_IT+0x48>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800aafa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aafe:	e02d      	b.n	800ab5c <UART_Start_Receive_IT+0xa4>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	22ff      	movs	r2, #255	@ 0xff
 800ab04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab08:	e028      	b.n	800ab5c <UART_Start_Receive_IT+0xa4>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10d      	bne.n	800ab2e <UART_Start_Receive_IT+0x76>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d104      	bne.n	800ab24 <UART_Start_Receive_IT+0x6c>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	22ff      	movs	r2, #255	@ 0xff
 800ab1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab22:	e01b      	b.n	800ab5c <UART_Start_Receive_IT+0xa4>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	227f      	movs	r2, #127	@ 0x7f
 800ab28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab2c:	e016      	b.n	800ab5c <UART_Start_Receive_IT+0xa4>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab36:	d10d      	bne.n	800ab54 <UART_Start_Receive_IT+0x9c>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d104      	bne.n	800ab4a <UART_Start_Receive_IT+0x92>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	227f      	movs	r2, #127	@ 0x7f
 800ab44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab48:	e008      	b.n	800ab5c <UART_Start_Receive_IT+0xa4>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	223f      	movs	r2, #63	@ 0x3f
 800ab4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab52:	e003      	b.n	800ab5c <UART_Start_Receive_IT+0xa4>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2222      	movs	r2, #34	@ 0x22
 800ab68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3308      	adds	r3, #8
 800ab72:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab76:	e853 3f00 	ldrex	r3, [r3]
 800ab7a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ab7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab7e:	f043 0301 	orr.w	r3, r3, #1
 800ab82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3308      	adds	r3, #8
 800ab8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ab90:	673a      	str	r2, [r7, #112]	@ 0x70
 800ab92:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab94:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ab96:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ab98:	e841 2300 	strex	r3, r2, [r1]
 800ab9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ab9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1e3      	bne.n	800ab6c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aba8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abac:	d14f      	bne.n	800ac4e <UART_Start_Receive_IT+0x196>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800abb4:	88fa      	ldrh	r2, [r7, #6]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d349      	bcc.n	800ac4e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abc2:	d107      	bne.n	800abd4 <UART_Start_Receive_IT+0x11c>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d103      	bne.n	800abd4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4a47      	ldr	r2, [pc, #284]	@ (800acec <UART_Start_Receive_IT+0x234>)
 800abd0:	675a      	str	r2, [r3, #116]	@ 0x74
 800abd2:	e002      	b.n	800abda <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	4a46      	ldr	r2, [pc, #280]	@ (800acf0 <UART_Start_Receive_IT+0x238>)
 800abd8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d01a      	beq.n	800ac18 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abea:	e853 3f00 	ldrex	r3, [r3]
 800abee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800abf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	461a      	mov	r2, r3
 800ac00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ac04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac06:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ac0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ac0c:	e841 2300 	strex	r3, r2, [r1]
 800ac10:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ac12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1e4      	bne.n	800abe2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac22:	e853 3f00 	ldrex	r3, [r3]
 800ac26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	3308      	adds	r3, #8
 800ac36:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ac38:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ac3a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ac3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac40:	e841 2300 	strex	r3, r2, [r1]
 800ac44:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ac46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1e5      	bne.n	800ac18 <UART_Start_Receive_IT+0x160>
 800ac4c:	e046      	b.n	800acdc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac56:	d107      	bne.n	800ac68 <UART_Start_Receive_IT+0x1b0>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d103      	bne.n	800ac68 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4a24      	ldr	r2, [pc, #144]	@ (800acf4 <UART_Start_Receive_IT+0x23c>)
 800ac64:	675a      	str	r2, [r3, #116]	@ 0x74
 800ac66:	e002      	b.n	800ac6e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	4a23      	ldr	r2, [pc, #140]	@ (800acf8 <UART_Start_Receive_IT+0x240>)
 800ac6c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d019      	beq.n	800acaa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7e:	e853 3f00 	ldrex	r3, [r3]
 800ac82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac86:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ac8a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	461a      	mov	r2, r3
 800ac92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac94:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac96:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac9c:	e841 2300 	strex	r3, r2, [r1]
 800aca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1e6      	bne.n	800ac76 <UART_Start_Receive_IT+0x1be>
 800aca8:	e018      	b.n	800acdc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	e853 3f00 	ldrex	r3, [r3]
 800acb6:	613b      	str	r3, [r7, #16]
   return(result);
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f043 0320 	orr.w	r3, r3, #32
 800acbe:	67bb      	str	r3, [r7, #120]	@ 0x78
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800acc8:	623b      	str	r3, [r7, #32]
 800acca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800accc:	69f9      	ldr	r1, [r7, #28]
 800acce:	6a3a      	ldr	r2, [r7, #32]
 800acd0:	e841 2300 	strex	r3, r2, [r1]
 800acd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e6      	bne.n	800acaa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	378c      	adds	r7, #140	@ 0x8c
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	0800b519 	.word	0x0800b519
 800acf0:	0800b1b5 	.word	0x0800b1b5
 800acf4:	0800affd 	.word	0x0800affd
 800acf8:	0800ae45 	.word	0x0800ae45

0800acfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b095      	sub	sp, #84	@ 0x54
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad0c:	e853 3f00 	ldrex	r3, [r3]
 800ad10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad22:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad2a:	e841 2300 	strex	r3, r2, [r1]
 800ad2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1e6      	bne.n	800ad04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3e:	6a3b      	ldr	r3, [r7, #32]
 800ad40:	e853 3f00 	ldrex	r3, [r3]
 800ad44:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad4c:	f023 0301 	bic.w	r3, r3, #1
 800ad50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3308      	adds	r3, #8
 800ad58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad62:	e841 2300 	strex	r3, r2, [r1]
 800ad66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1e3      	bne.n	800ad36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d118      	bne.n	800ada8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	e853 3f00 	ldrex	r3, [r3]
 800ad82:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f023 0310 	bic.w	r3, r3, #16
 800ad8a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	461a      	mov	r2, r3
 800ad92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad94:	61bb      	str	r3, [r7, #24]
 800ad96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad98:	6979      	ldr	r1, [r7, #20]
 800ad9a:	69ba      	ldr	r2, [r7, #24]
 800ad9c:	e841 2300 	strex	r3, r2, [r1]
 800ada0:	613b      	str	r3, [r7, #16]
   return(result);
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e6      	bne.n	800ad76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2220      	movs	r2, #32
 800adac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800adbc:	bf00      	nop
 800adbe:	3754      	adds	r7, #84	@ 0x54
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2200      	movs	r2, #0
 800adda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f7ff f99e 	bl	800a120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ade4:	bf00      	nop
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b088      	sub	sp, #32
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	e853 3f00 	ldrex	r3, [r3]
 800ae00:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae08:	61fb      	str	r3, [r7, #28]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	61bb      	str	r3, [r7, #24]
 800ae14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae16:	6979      	ldr	r1, [r7, #20]
 800ae18:	69ba      	ldr	r2, [r7, #24]
 800ae1a:	e841 2300 	strex	r3, r2, [r1]
 800ae1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1e6      	bne.n	800adf4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2220      	movs	r2, #32
 800ae2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff f969 	bl	800a10c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae3a:	bf00      	nop
 800ae3c:	3720      	adds	r7, #32
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
	...

0800ae44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b09c      	sub	sp, #112	@ 0x70
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae52:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae5c:	2b22      	cmp	r3, #34	@ 0x22
 800ae5e:	f040 80be 	bne.w	800afde <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ae6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ae70:	b2d9      	uxtb	r1, r3
 800ae72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae7c:	400a      	ands	r2, r1
 800ae7e:	b2d2      	uxtb	r2, r2
 800ae80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae86:	1c5a      	adds	r2, r3, #1
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	3b01      	subs	r3, #1
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f040 80a1 	bne.w	800afee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeb4:	e853 3f00 	ldrex	r3, [r3]
 800aeb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aeba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aebc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aec0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	461a      	mov	r2, r3
 800aec8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aeca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aecc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aece:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aed0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aed2:	e841 2300 	strex	r3, r2, [r1]
 800aed6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1e6      	bne.n	800aeac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	3308      	adds	r3, #8
 800aee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee8:	e853 3f00 	ldrex	r3, [r3]
 800aeec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aeee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aef0:	f023 0301 	bic.w	r3, r3, #1
 800aef4:	667b      	str	r3, [r7, #100]	@ 0x64
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3308      	adds	r3, #8
 800aefc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aefe:	647a      	str	r2, [r7, #68]	@ 0x44
 800af00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af06:	e841 2300 	strex	r3, r2, [r1]
 800af0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1e5      	bne.n	800aede <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2220      	movs	r2, #32
 800af16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a33      	ldr	r2, [pc, #204]	@ (800aff8 <UART_RxISR_8BIT+0x1b4>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d01f      	beq.n	800af70 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d018      	beq.n	800af70 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af46:	e853 3f00 	ldrex	r3, [r3]
 800af4a:	623b      	str	r3, [r7, #32]
   return(result);
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800af52:	663b      	str	r3, [r7, #96]	@ 0x60
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	461a      	mov	r2, r3
 800af5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af5c:	633b      	str	r3, [r7, #48]	@ 0x30
 800af5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af64:	e841 2300 	strex	r3, r2, [r1]
 800af68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1e6      	bne.n	800af3e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af74:	2b01      	cmp	r3, #1
 800af76:	d12e      	bne.n	800afd6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	e853 3f00 	ldrex	r3, [r3]
 800af8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f023 0310 	bic.w	r3, r3, #16
 800af92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	461a      	mov	r2, r3
 800af9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af9c:	61fb      	str	r3, [r7, #28]
 800af9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa0:	69b9      	ldr	r1, [r7, #24]
 800afa2:	69fa      	ldr	r2, [r7, #28]
 800afa4:	e841 2300 	strex	r3, r2, [r1]
 800afa8:	617b      	str	r3, [r7, #20]
   return(result);
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1e6      	bne.n	800af7e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	69db      	ldr	r3, [r3, #28]
 800afb6:	f003 0310 	and.w	r3, r3, #16
 800afba:	2b10      	cmp	r3, #16
 800afbc:	d103      	bne.n	800afc6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2210      	movs	r2, #16
 800afc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800afcc:	4619      	mov	r1, r3
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7ff f8b0 	bl	800a134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800afd4:	e00b      	b.n	800afee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7f7 fada 	bl	8002590 <HAL_UART_RxCpltCallback>
}
 800afdc:	e007      	b.n	800afee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	699a      	ldr	r2, [r3, #24]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f042 0208 	orr.w	r2, r2, #8
 800afec:	619a      	str	r2, [r3, #24]
}
 800afee:	bf00      	nop
 800aff0:	3770      	adds	r7, #112	@ 0x70
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	40008000 	.word	0x40008000

0800affc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b09c      	sub	sp, #112	@ 0x70
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b00a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b014:	2b22      	cmp	r3, #34	@ 0x22
 800b016:	f040 80be 	bne.w	800b196 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b020:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b028:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b02a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b02e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b032:	4013      	ands	r3, r2
 800b034:	b29a      	uxth	r2, r3
 800b036:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b038:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b03e:	1c9a      	adds	r2, r3, #2
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	3b01      	subs	r3, #1
 800b04e:	b29a      	uxth	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f040 80a1 	bne.w	800b1a6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b06c:	e853 3f00 	ldrex	r3, [r3]
 800b070:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b074:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b078:	667b      	str	r3, [r7, #100]	@ 0x64
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b082:	657b      	str	r3, [r7, #84]	@ 0x54
 800b084:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b088:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e6      	bne.n	800b064 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3308      	adds	r3, #8
 800b09c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a0:	e853 3f00 	ldrex	r3, [r3]
 800b0a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a8:	f023 0301 	bic.w	r3, r3, #1
 800b0ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3308      	adds	r3, #8
 800b0b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b0b6:	643a      	str	r2, [r7, #64]	@ 0x40
 800b0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0be:	e841 2300 	strex	r3, r2, [r1]
 800b0c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1e5      	bne.n	800b096 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2220      	movs	r2, #32
 800b0ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a33      	ldr	r2, [pc, #204]	@ (800b1b0 <UART_RxISR_16BIT+0x1b4>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d01f      	beq.n	800b128 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d018      	beq.n	800b128 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	e853 3f00 	ldrex	r3, [r3]
 800b102:	61fb      	str	r3, [r7, #28]
   return(result);
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b10a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	461a      	mov	r2, r3
 800b112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b116:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b11a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b11c:	e841 2300 	strex	r3, r2, [r1]
 800b120:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1e6      	bne.n	800b0f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d12e      	bne.n	800b18e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	e853 3f00 	ldrex	r3, [r3]
 800b142:	60bb      	str	r3, [r7, #8]
   return(result);
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	f023 0310 	bic.w	r3, r3, #16
 800b14a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	461a      	mov	r2, r3
 800b152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b154:	61bb      	str	r3, [r7, #24]
 800b156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b158:	6979      	ldr	r1, [r7, #20]
 800b15a:	69ba      	ldr	r2, [r7, #24]
 800b15c:	e841 2300 	strex	r3, r2, [r1]
 800b160:	613b      	str	r3, [r7, #16]
   return(result);
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1e6      	bne.n	800b136 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	f003 0310 	and.w	r3, r3, #16
 800b172:	2b10      	cmp	r3, #16
 800b174:	d103      	bne.n	800b17e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2210      	movs	r2, #16
 800b17c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7fe ffd4 	bl	800a134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b18c:	e00b      	b.n	800b1a6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7f7 f9fe 	bl	8002590 <HAL_UART_RxCpltCallback>
}
 800b194:	e007      	b.n	800b1a6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	699a      	ldr	r2, [r3, #24]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f042 0208 	orr.w	r2, r2, #8
 800b1a4:	619a      	str	r2, [r3, #24]
}
 800b1a6:	bf00      	nop
 800b1a8:	3770      	adds	r7, #112	@ 0x70
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	40008000 	.word	0x40008000

0800b1b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b0ac      	sub	sp, #176	@ 0xb0
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b1c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1ea:	2b22      	cmp	r3, #34	@ 0x22
 800b1ec:	f040 8183 	bne.w	800b4f6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b1f6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b1fa:	e126      	b.n	800b44a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b202:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b206:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b20a:	b2d9      	uxtb	r1, r3
 800b20c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b210:	b2da      	uxtb	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b216:	400a      	ands	r2, r1
 800b218:	b2d2      	uxtb	r2, r2
 800b21a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b220:	1c5a      	adds	r2, r3, #1
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	3b01      	subs	r3, #1
 800b230:	b29a      	uxth	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b246:	f003 0307 	and.w	r3, r3, #7
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d053      	beq.n	800b2f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b24e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b252:	f003 0301 	and.w	r3, r3, #1
 800b256:	2b00      	cmp	r3, #0
 800b258:	d011      	beq.n	800b27e <UART_RxISR_8BIT_FIFOEN+0xca>
 800b25a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b25e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00b      	beq.n	800b27e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2201      	movs	r2, #1
 800b26c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b274:	f043 0201 	orr.w	r2, r3, #1
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b27e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b282:	f003 0302 	and.w	r3, r3, #2
 800b286:	2b00      	cmp	r3, #0
 800b288:	d011      	beq.n	800b2ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b28a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00b      	beq.n	800b2ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2202      	movs	r2, #2
 800b29c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2a4:	f043 0204 	orr.w	r2, r3, #4
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2b2:	f003 0304 	and.w	r3, r3, #4
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d011      	beq.n	800b2de <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b2ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00b      	beq.n	800b2de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2204      	movs	r2, #4
 800b2cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2d4:	f043 0202 	orr.w	r2, r3, #2
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d006      	beq.n	800b2f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f7fe ff19 	bl	800a120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f040 80a3 	bne.w	800b44a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b30c:	e853 3f00 	ldrex	r3, [r3]
 800b310:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	461a      	mov	r2, r3
 800b322:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b326:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b328:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b32c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b32e:	e841 2300 	strex	r3, r2, [r1]
 800b332:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b334:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1e4      	bne.n	800b304 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3308      	adds	r3, #8
 800b340:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b34a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b34c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b350:	f023 0301 	bic.w	r3, r3, #1
 800b354:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3308      	adds	r3, #8
 800b35e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b362:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b364:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b366:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b368:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b36a:	e841 2300 	strex	r3, r2, [r1]
 800b36e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b370:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1e1      	bne.n	800b33a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2220      	movs	r2, #32
 800b37a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a60      	ldr	r2, [pc, #384]	@ (800b510 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d021      	beq.n	800b3d8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d01a      	beq.n	800b3d8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3aa:	e853 3f00 	ldrex	r3, [r3]
 800b3ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b3b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b3b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b3c4:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3c6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b3ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3cc:	e841 2300 	strex	r3, r2, [r1]
 800b3d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b3d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1e4      	bne.n	800b3a2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d130      	bne.n	800b442 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ee:	e853 3f00 	ldrex	r3, [r3]
 800b3f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f6:	f023 0310 	bic.w	r3, r3, #16
 800b3fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	461a      	mov	r2, r3
 800b404:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b408:	643b      	str	r3, [r7, #64]	@ 0x40
 800b40a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b40e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b410:	e841 2300 	strex	r3, r2, [r1]
 800b414:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1e4      	bne.n	800b3e6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	69db      	ldr	r3, [r3, #28]
 800b422:	f003 0310 	and.w	r3, r3, #16
 800b426:	2b10      	cmp	r3, #16
 800b428:	d103      	bne.n	800b432 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2210      	movs	r2, #16
 800b430:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7fe fe7a 	bl	800a134 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b440:	e00e      	b.n	800b460 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7f7 f8a4 	bl	8002590 <HAL_UART_RxCpltCallback>
        break;
 800b448:	e00a      	b.n	800b460 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b44a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d006      	beq.n	800b460 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800b452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b456:	f003 0320 	and.w	r3, r3, #32
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f47f aece 	bne.w	800b1fc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b466:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b46a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d049      	beq.n	800b506 <UART_RxISR_8BIT_FIFOEN+0x352>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b478:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d242      	bcs.n	800b506 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3308      	adds	r3, #8
 800b486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	e853 3f00 	ldrex	r3, [r3]
 800b48e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b496:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	3308      	adds	r3, #8
 800b4a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b4a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4ac:	e841 2300 	strex	r3, r2, [r1]
 800b4b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1e3      	bne.n	800b480 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a16      	ldr	r2, [pc, #88]	@ (800b514 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800b4bc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	e853 3f00 	ldrex	r3, [r3]
 800b4ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	f043 0320 	orr.w	r3, r3, #32
 800b4d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b4e0:	61bb      	str	r3, [r7, #24]
 800b4e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e4:	6979      	ldr	r1, [r7, #20]
 800b4e6:	69ba      	ldr	r2, [r7, #24]
 800b4e8:	e841 2300 	strex	r3, r2, [r1]
 800b4ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1e4      	bne.n	800b4be <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b4f4:	e007      	b.n	800b506 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	699a      	ldr	r2, [r3, #24]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f042 0208 	orr.w	r2, r2, #8
 800b504:	619a      	str	r2, [r3, #24]
}
 800b506:	bf00      	nop
 800b508:	37b0      	adds	r7, #176	@ 0xb0
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	40008000 	.word	0x40008000
 800b514:	0800ae45 	.word	0x0800ae45

0800b518 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b0ae      	sub	sp, #184	@ 0xb8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b526:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	69db      	ldr	r3, [r3, #28]
 800b530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b54e:	2b22      	cmp	r3, #34	@ 0x22
 800b550:	f040 8187 	bne.w	800b862 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b55a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b55e:	e12a      	b.n	800b7b6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b566:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b56e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b572:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b576:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b57a:	4013      	ands	r3, r2
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b582:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b588:	1c9a      	adds	r2, r3, #2
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b594:	b29b      	uxth	r3, r3
 800b596:	3b01      	subs	r3, #1
 800b598:	b29a      	uxth	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b5aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5ae:	f003 0307 	and.w	r3, r3, #7
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d053      	beq.n	800b65e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5ba:	f003 0301 	and.w	r3, r3, #1
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d011      	beq.n	800b5e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b5c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00b      	beq.n	800b5e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5dc:	f043 0201 	orr.w	r2, r3, #1
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5ea:	f003 0302 	and.w	r3, r3, #2
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d011      	beq.n	800b616 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b5f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5f6:	f003 0301 	and.w	r3, r3, #1
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00b      	beq.n	800b616 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2202      	movs	r2, #2
 800b604:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b60c:	f043 0204 	orr.w	r2, r3, #4
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b616:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b61a:	f003 0304 	and.w	r3, r3, #4
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d011      	beq.n	800b646 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b622:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b626:	f003 0301 	and.w	r3, r3, #1
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00b      	beq.n	800b646 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2204      	movs	r2, #4
 800b634:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b63c:	f043 0202 	orr.w	r2, r3, #2
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d006      	beq.n	800b65e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f7fe fd65 	bl	800a120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b664:	b29b      	uxth	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	f040 80a5 	bne.w	800b7b6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b674:	e853 3f00 	ldrex	r3, [r3]
 800b678:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b67a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b67c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	461a      	mov	r2, r3
 800b68a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b68e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b692:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b694:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b696:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b69a:	e841 2300 	strex	r3, r2, [r1]
 800b69e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b6a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1e2      	bne.n	800b66c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	3308      	adds	r3, #8
 800b6ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6b0:	e853 3f00 	ldrex	r3, [r3]
 800b6b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b6b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6bc:	f023 0301 	bic.w	r3, r3, #1
 800b6c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3308      	adds	r3, #8
 800b6ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b6ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b6d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b6d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b6d6:	e841 2300 	strex	r3, r2, [r1]
 800b6da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b6dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1e1      	bne.n	800b6a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a60      	ldr	r2, [pc, #384]	@ (800b87c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d021      	beq.n	800b744 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d01a      	beq.n	800b744 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b716:	e853 3f00 	ldrex	r3, [r3]
 800b71a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b71c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b71e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b722:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b730:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b732:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b734:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b736:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b738:	e841 2300 	strex	r3, r2, [r1]
 800b73c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b73e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1e4      	bne.n	800b70e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d130      	bne.n	800b7ae <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75a:	e853 3f00 	ldrex	r3, [r3]
 800b75e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b762:	f023 0310 	bic.w	r3, r3, #16
 800b766:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b774:	647b      	str	r3, [r7, #68]	@ 0x44
 800b776:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b77a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b77c:	e841 2300 	strex	r3, r2, [r1]
 800b780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1e4      	bne.n	800b752 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	69db      	ldr	r3, [r3, #28]
 800b78e:	f003 0310 	and.w	r3, r3, #16
 800b792:	2b10      	cmp	r3, #16
 800b794:	d103      	bne.n	800b79e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2210      	movs	r2, #16
 800b79c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7fe fcc4 	bl	800a134 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b7ac:	e00e      	b.n	800b7cc <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7f6 feee 	bl	8002590 <HAL_UART_RxCpltCallback>
        break;
 800b7b4:	e00a      	b.n	800b7cc <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b7b6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d006      	beq.n	800b7cc <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800b7be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b7c2:	f003 0320 	and.w	r3, r3, #32
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f47f aeca 	bne.w	800b560 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7d2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b7d6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d049      	beq.n	800b872 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b7e4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d242      	bcs.n	800b872 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f6:	e853 3f00 	ldrex	r3, [r3]
 800b7fa:	623b      	str	r3, [r7, #32]
   return(result);
 800b7fc:	6a3b      	ldr	r3, [r7, #32]
 800b7fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b802:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	3308      	adds	r3, #8
 800b80c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b810:	633a      	str	r2, [r7, #48]	@ 0x30
 800b812:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b814:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b818:	e841 2300 	strex	r3, r2, [r1]
 800b81c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1e3      	bne.n	800b7ec <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a16      	ldr	r2, [pc, #88]	@ (800b880 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b828:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	e853 3f00 	ldrex	r3, [r3]
 800b836:	60fb      	str	r3, [r7, #12]
   return(result);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f043 0320 	orr.w	r3, r3, #32
 800b83e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b84c:	61fb      	str	r3, [r7, #28]
 800b84e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b850:	69b9      	ldr	r1, [r7, #24]
 800b852:	69fa      	ldr	r2, [r7, #28]
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	617b      	str	r3, [r7, #20]
   return(result);
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e4      	bne.n	800b82a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b860:	e007      	b.n	800b872 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	699a      	ldr	r2, [r3, #24]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f042 0208 	orr.w	r2, r2, #8
 800b870:	619a      	str	r2, [r3, #24]
}
 800b872:	bf00      	nop
 800b874:	37b8      	adds	r7, #184	@ 0xb8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	40008000 	.word	0x40008000
 800b880:	0800affd 	.word	0x0800affd

0800b884 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b88c:	bf00      	nop
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b8a0:	bf00      	nop
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d101      	bne.n	800b8d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b8d2:	2302      	movs	r3, #2
 800b8d4:	e027      	b.n	800b926 <HAL_UARTEx_DisableFifoMode+0x66>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2224      	movs	r2, #36	@ 0x24
 800b8e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f022 0201 	bic.w	r2, r2, #1
 800b8fc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b904:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2220      	movs	r2, #32
 800b918:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b942:	2b01      	cmp	r3, #1
 800b944:	d101      	bne.n	800b94a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b946:	2302      	movs	r3, #2
 800b948:	e02d      	b.n	800b9a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2224      	movs	r2, #36	@ 0x24
 800b956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f022 0201 	bic.w	r2, r2, #1
 800b970:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	430a      	orrs	r2, r1
 800b984:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 f850 	bl	800ba2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2220      	movs	r2, #32
 800b998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d101      	bne.n	800b9c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b9c2:	2302      	movs	r3, #2
 800b9c4:	e02d      	b.n	800ba22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2224      	movs	r2, #36	@ 0x24
 800b9d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f022 0201 	bic.w	r2, r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	683a      	ldr	r2, [r7, #0]
 800b9fe:	430a      	orrs	r2, r1
 800ba00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f812 	bl	800ba2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2220      	movs	r2, #32
 800ba14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d108      	bne.n	800ba4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba4c:	e031      	b.n	800bab2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba4e:	2308      	movs	r3, #8
 800ba50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba52:	2308      	movs	r3, #8
 800ba54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	0e5b      	lsrs	r3, r3, #25
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	f003 0307 	and.w	r3, r3, #7
 800ba64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	0f5b      	lsrs	r3, r3, #29
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	f003 0307 	and.w	r3, r3, #7
 800ba74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
 800ba78:	7b3a      	ldrb	r2, [r7, #12]
 800ba7a:	4911      	ldr	r1, [pc, #68]	@ (800bac0 <UARTEx_SetNbDataToProcess+0x94>)
 800ba7c:	5c8a      	ldrb	r2, [r1, r2]
 800ba7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba82:	7b3a      	ldrb	r2, [r7, #12]
 800ba84:	490f      	ldr	r1, [pc, #60]	@ (800bac4 <UARTEx_SetNbDataToProcess+0x98>)
 800ba86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba88:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba8c:	b29a      	uxth	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
 800ba96:	7b7a      	ldrb	r2, [r7, #13]
 800ba98:	4909      	ldr	r1, [pc, #36]	@ (800bac0 <UARTEx_SetNbDataToProcess+0x94>)
 800ba9a:	5c8a      	ldrb	r2, [r1, r2]
 800ba9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800baa0:	7b7a      	ldrb	r2, [r7, #13]
 800baa2:	4908      	ldr	r1, [pc, #32]	@ (800bac4 <UARTEx_SetNbDataToProcess+0x98>)
 800baa4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800baa6:	fb93 f3f2 	sdiv	r3, r3, r2
 800baaa:	b29a      	uxth	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bab2:	bf00      	nop
 800bab4:	3714      	adds	r7, #20
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	08013d28 	.word	0x08013d28
 800bac4:	08013d30 	.word	0x08013d30

0800bac8 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800bacc:	4907      	ldr	r1, [pc, #28]	@ (800baec <MX_FATFS_Init+0x24>)
 800bace:	4808      	ldr	r0, [pc, #32]	@ (800baf0 <MX_FATFS_Init+0x28>)
 800bad0:	f003 f98a 	bl	800ede8 <FATFS_LinkDriver>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800bada:	f04f 33ff 	mov.w	r3, #4294967295
 800bade:	e003      	b.n	800bae8 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800bae0:	4b04      	ldr	r3, [pc, #16]	@ (800baf4 <MX_FATFS_Init+0x2c>)
 800bae2:	2201      	movs	r2, #1
 800bae4:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800bae6:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800bae8:	4618      	mov	r0, r3
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20006a9c 	.word	0x20006a9c
 800baf0:	20000010 	.word	0x20000010
 800baf4:	20006aa0 	.word	0x20006aa0

0800baf8 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800baf8:	b480      	push	{r7}
 800bafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bafc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800bb12:	79fb      	ldrb	r3, [r7, #7]
 800bb14:	4618      	mov	r0, r3
 800bb16:	f000 f9dd 	bl	800bed4 <USER_SPI_initialize>
 800bb1a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800bb2e:	79fb      	ldrb	r3, [r7, #7]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 fab9 	bl	800c0a8 <USER_SPI_status>
 800bb36:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60b9      	str	r1, [r7, #8]
 800bb48:	607a      	str	r2, [r7, #4]
 800bb4a:	603b      	str	r3, [r7, #0]
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800bb50:	7bf8      	ldrb	r0, [r7, #15]
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	68b9      	ldr	r1, [r7, #8]
 800bb58:	f000 fabc 	bl	800c0d4 <USER_SPI_read>
 800bb5c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	603b      	str	r3, [r7, #0]
 800bb72:	4603      	mov	r3, r0
 800bb74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800bb76:	7bf8      	ldrb	r0, [r7, #15]
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	68b9      	ldr	r1, [r7, #8]
 800bb7e:	f000 fb0f 	bl	800c1a0 <USER_SPI_write>
 800bb82:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	603a      	str	r2, [r7, #0]
 800bb96:	71fb      	strb	r3, [r7, #7]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800bb9c:	79b9      	ldrb	r1, [r7, #6]
 800bb9e:	79fb      	ldrb	r3, [r7, #7]
 800bba0:	683a      	ldr	r2, [r7, #0]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 fb78 	bl	800c298 <USER_SPI_ioctl>
 800bba8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
	...

0800bbb4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800bbbc:	f7f8 faa0 	bl	8004100 <HAL_GetTick>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	4a04      	ldr	r2, [pc, #16]	@ (800bbd4 <SPI_Timer_On+0x20>)
 800bbc4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800bbc6:	4a04      	ldr	r2, [pc, #16]	@ (800bbd8 <SPI_Timer_On+0x24>)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6013      	str	r3, [r2, #0]
}
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	20006aa4 	.word	0x20006aa4
 800bbd8:	20006aa8 	.word	0x20006aa8

0800bbdc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800bbe0:	f7f8 fa8e 	bl	8004100 <HAL_GetTick>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	4b06      	ldr	r3, [pc, #24]	@ (800bc00 <SPI_Timer_Status+0x24>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	1ad2      	subs	r2, r2, r3
 800bbec:	4b05      	ldr	r3, [pc, #20]	@ (800bc04 <SPI_Timer_Status+0x28>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	bf34      	ite	cc
 800bbf4:	2301      	movcc	r3, #1
 800bbf6:	2300      	movcs	r3, #0
 800bbf8:	b2db      	uxtb	r3, r3
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20006aa4 	.word	0x20006aa4
 800bc04:	20006aa8 	.word	0x20006aa8

0800bc08 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af02      	add	r7, sp, #8
 800bc0e:	4603      	mov	r3, r0
 800bc10:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 50);
 800bc12:	f107 020f 	add.w	r2, r7, #15
 800bc16:	1df9      	adds	r1, r7, #7
 800bc18:	2332      	movs	r3, #50	@ 0x32
 800bc1a:	9300      	str	r3, [sp, #0]
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	4804      	ldr	r0, [pc, #16]	@ (800bc30 <xchg_spi+0x28>)
 800bc20:	f7fb fdef 	bl	8007802 <HAL_SPI_TransmitReceive>
    return rxDat;
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	200067c0 	.word	0x200067c0

0800bc34 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800bc34:	b590      	push	{r4, r7, lr}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60fb      	str	r3, [r7, #12]
 800bc42:	e00a      	b.n	800bc5a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	18d4      	adds	r4, r2, r3
 800bc4a:	20ff      	movs	r0, #255	@ 0xff
 800bc4c:	f7ff ffdc 	bl	800bc08 <xchg_spi>
 800bc50:	4603      	mov	r3, r0
 800bc52:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	3301      	adds	r3, #1
 800bc58:	60fb      	str	r3, [r7, #12]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d3f0      	bcc.n	800bc44 <rcvr_spi_multi+0x10>
	}
}
 800bc62:	bf00      	nop
 800bc64:	bf00      	nop
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd90      	pop	{r4, r7, pc}

0800bc6c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800bc76:	2300      	movs	r3, #0
 800bc78:	60fb      	str	r3, [r7, #12]
 800bc7a:	e009      	b.n	800bc90 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	4413      	add	r3, r2
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7ff ffbf 	bl	800bc08 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	60fb      	str	r3, [r7, #12]
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d3f1      	bcc.n	800bc7c <xmit_spi_multi+0x10>
	}
}
 800bc98:	bf00      	nop
 800bc9a:	bf00      	nop
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b086      	sub	sp, #24
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800bcaa:	f7f8 fa29 	bl	8004100 <HAL_GetTick>
 800bcae:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800bcb4:	20ff      	movs	r0, #255	@ 0xff
 800bcb6:	f7ff ffa7 	bl	800bc08 <xchg_spi>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800bcbe:	7bfb      	ldrb	r3, [r7, #15]
 800bcc0:	2bff      	cmp	r3, #255	@ 0xff
 800bcc2:	d007      	beq.n	800bcd4 <wait_ready+0x32>
 800bcc4:	f7f8 fa1c 	bl	8004100 <HAL_GetTick>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	1ad3      	subs	r3, r2, r3
 800bcce:	693a      	ldr	r2, [r7, #16]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d8ef      	bhi.n	800bcb4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	2bff      	cmp	r3, #255	@ 0xff
 800bcd8:	bf0c      	ite	eq
 800bcda:	2301      	moveq	r3, #1
 800bcdc:	2300      	movne	r3, #0
 800bcde:	b2db      	uxtb	r3, r3
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3718      	adds	r7, #24
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800bcec:	2201      	movs	r2, #1
 800bcee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bcf2:	4804      	ldr	r0, [pc, #16]	@ (800bd04 <despiselect+0x1c>)
 800bcf4:	f7fa fb50 	bl	8006398 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800bcf8:	20ff      	movs	r0, #255	@ 0xff
 800bcfa:	f7ff ff85 	bl	800bc08 <xchg_spi>

}
 800bcfe:	bf00      	nop
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	48000400 	.word	0x48000400

0800bd08 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bd12:	480a      	ldr	r0, [pc, #40]	@ (800bd3c <spiselect+0x34>)
 800bd14:	f7fa fb40 	bl	8006398 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800bd18:	20ff      	movs	r0, #255	@ 0xff
 800bd1a:	f7ff ff75 	bl	800bc08 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800bd1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bd22:	f7ff ffbe 	bl	800bca2 <wait_ready>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d001      	beq.n	800bd30 <spiselect+0x28>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e002      	b.n	800bd36 <spiselect+0x2e>

	despiselect();
 800bd30:	f7ff ffda 	bl	800bce8 <despiselect>
	return 0;	/* Timeout */
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	48000400 	.word	0x48000400

0800bd40 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800bd4a:	20c8      	movs	r0, #200	@ 0xc8
 800bd4c:	f7ff ff32 	bl	800bbb4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800bd50:	20ff      	movs	r0, #255	@ 0xff
 800bd52:	f7ff ff59 	bl	800bc08 <xchg_spi>
 800bd56:	4603      	mov	r3, r0
 800bd58:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800bd5a:	7bfb      	ldrb	r3, [r7, #15]
 800bd5c:	2bff      	cmp	r3, #255	@ 0xff
 800bd5e:	d104      	bne.n	800bd6a <rcvr_datablock+0x2a>
 800bd60:	f7ff ff3c 	bl	800bbdc <SPI_Timer_Status>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1f2      	bne.n	800bd50 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800bd6a:	7bfb      	ldrb	r3, [r7, #15]
 800bd6c:	2bfe      	cmp	r3, #254	@ 0xfe
 800bd6e:	d001      	beq.n	800bd74 <rcvr_datablock+0x34>
 800bd70:	2300      	movs	r3, #0
 800bd72:	e00a      	b.n	800bd8a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7ff ff5c 	bl	800bc34 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800bd7c:	20ff      	movs	r0, #255	@ 0xff
 800bd7e:	f7ff ff43 	bl	800bc08 <xchg_spi>
 800bd82:	20ff      	movs	r0, #255	@ 0xff
 800bd84:	f7ff ff40 	bl	800bc08 <xchg_spi>

	return 1;						/* Function succeeded */
 800bd88:	2301      	movs	r3, #1
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800bd9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bda2:	f7ff ff7e 	bl	800bca2 <wait_ready>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d101      	bne.n	800bdb0 <xmit_datablock+0x1e>
 800bdac:	2300      	movs	r3, #0
 800bdae:	e01e      	b.n	800bdee <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800bdb0:	78fb      	ldrb	r3, [r7, #3]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff ff28 	bl	800bc08 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800bdb8:	78fb      	ldrb	r3, [r7, #3]
 800bdba:	2bfd      	cmp	r3, #253	@ 0xfd
 800bdbc:	d016      	beq.n	800bdec <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800bdbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7ff ff52 	bl	800bc6c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800bdc8:	20ff      	movs	r0, #255	@ 0xff
 800bdca:	f7ff ff1d 	bl	800bc08 <xchg_spi>
 800bdce:	20ff      	movs	r0, #255	@ 0xff
 800bdd0:	f7ff ff1a 	bl	800bc08 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800bdd4:	20ff      	movs	r0, #255	@ 0xff
 800bdd6:	f7ff ff17 	bl	800bc08 <xchg_spi>
 800bdda:	4603      	mov	r3, r0
 800bddc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800bdde:	7bfb      	ldrb	r3, [r7, #15]
 800bde0:	f003 031f 	and.w	r3, r3, #31
 800bde4:	2b05      	cmp	r3, #5
 800bde6:	d001      	beq.n	800bdec <xmit_datablock+0x5a>
 800bde8:	2300      	movs	r3, #0
 800bdea:	e000      	b.n	800bdee <xmit_datablock+0x5c>
	}
	return 1;
 800bdec:	2301      	movs	r3, #1
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b084      	sub	sp, #16
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	6039      	str	r1, [r7, #0]
 800be00:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800be02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be06:	2b00      	cmp	r3, #0
 800be08:	da0e      	bge.n	800be28 <send_cmd+0x32>
		cmd &= 0x7F;
 800be0a:	79fb      	ldrb	r3, [r7, #7]
 800be0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be10:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800be12:	2100      	movs	r1, #0
 800be14:	2037      	movs	r0, #55	@ 0x37
 800be16:	f7ff ffee 	bl	800bdf6 <send_cmd>
 800be1a:	4603      	mov	r3, r0
 800be1c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800be1e:	7bbb      	ldrb	r3, [r7, #14]
 800be20:	2b01      	cmp	r3, #1
 800be22:	d901      	bls.n	800be28 <send_cmd+0x32>
 800be24:	7bbb      	ldrb	r3, [r7, #14]
 800be26:	e051      	b.n	800becc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800be28:	79fb      	ldrb	r3, [r7, #7]
 800be2a:	2b0c      	cmp	r3, #12
 800be2c:	d008      	beq.n	800be40 <send_cmd+0x4a>
		despiselect();
 800be2e:	f7ff ff5b 	bl	800bce8 <despiselect>
		if (!spiselect()) return 0xFF;
 800be32:	f7ff ff69 	bl	800bd08 <spiselect>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d101      	bne.n	800be40 <send_cmd+0x4a>
 800be3c:	23ff      	movs	r3, #255	@ 0xff
 800be3e:	e045      	b.n	800becc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800be40:	79fb      	ldrb	r3, [r7, #7]
 800be42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be46:	b2db      	uxtb	r3, r3
 800be48:	4618      	mov	r0, r3
 800be4a:	f7ff fedd 	bl	800bc08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	0e1b      	lsrs	r3, r3, #24
 800be52:	b2db      	uxtb	r3, r3
 800be54:	4618      	mov	r0, r3
 800be56:	f7ff fed7 	bl	800bc08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	0c1b      	lsrs	r3, r3, #16
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	4618      	mov	r0, r3
 800be62:	f7ff fed1 	bl	800bc08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	0a1b      	lsrs	r3, r3, #8
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7ff fecb 	bl	800bc08 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	b2db      	uxtb	r3, r3
 800be76:	4618      	mov	r0, r3
 800be78:	f7ff fec6 	bl	800bc08 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800be7c:	2301      	movs	r3, #1
 800be7e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800be80:	79fb      	ldrb	r3, [r7, #7]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d101      	bne.n	800be8a <send_cmd+0x94>
 800be86:	2395      	movs	r3, #149	@ 0x95
 800be88:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800be8a:	79fb      	ldrb	r3, [r7, #7]
 800be8c:	2b08      	cmp	r3, #8
 800be8e:	d101      	bne.n	800be94 <send_cmd+0x9e>
 800be90:	2387      	movs	r3, #135	@ 0x87
 800be92:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800be94:	7bfb      	ldrb	r3, [r7, #15]
 800be96:	4618      	mov	r0, r3
 800be98:	f7ff feb6 	bl	800bc08 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800be9c:	79fb      	ldrb	r3, [r7, #7]
 800be9e:	2b0c      	cmp	r3, #12
 800bea0:	d102      	bne.n	800bea8 <send_cmd+0xb2>
 800bea2:	20ff      	movs	r0, #255	@ 0xff
 800bea4:	f7ff feb0 	bl	800bc08 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800bea8:	230a      	movs	r3, #10
 800beaa:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800beac:	20ff      	movs	r0, #255	@ 0xff
 800beae:	f7ff feab 	bl	800bc08 <xchg_spi>
 800beb2:	4603      	mov	r3, r0
 800beb4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800beb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	da05      	bge.n	800beca <send_cmd+0xd4>
 800bebe:	7bfb      	ldrb	r3, [r7, #15]
 800bec0:	3b01      	subs	r3, #1
 800bec2:	73fb      	strb	r3, [r7, #15]
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1f0      	bne.n	800beac <send_cmd+0xb6>

	return res;							/* Return received response */
 800beca:	7bbb      	ldrb	r3, [r7, #14]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800bed4:	b590      	push	{r4, r7, lr}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	4603      	mov	r3, r0
 800bedc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800bede:	79fb      	ldrb	r3, [r7, #7]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d001      	beq.n	800bee8 <USER_SPI_initialize+0x14>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e0d4      	b.n	800c092 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800bee8:	4b6c      	ldr	r3, [pc, #432]	@ (800c09c <USER_SPI_initialize+0x1c8>)
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	b2db      	uxtb	r3, r3
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <USER_SPI_initialize+0x2a>
 800bef6:	4b69      	ldr	r3, [pc, #420]	@ (800c09c <USER_SPI_initialize+0x1c8>)
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	b2db      	uxtb	r3, r3
 800befc:	e0c9      	b.n	800c092 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800befe:	4b68      	ldr	r3, [pc, #416]	@ (800c0a0 <USER_SPI_initialize+0x1cc>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	4b66      	ldr	r3, [pc, #408]	@ (800c0a0 <USER_SPI_initialize+0x1cc>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 800bf0c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800bf0e:	230a      	movs	r3, #10
 800bf10:	73fb      	strb	r3, [r7, #15]
 800bf12:	e005      	b.n	800bf20 <USER_SPI_initialize+0x4c>
 800bf14:	20ff      	movs	r0, #255	@ 0xff
 800bf16:	f7ff fe77 	bl	800bc08 <xchg_spi>
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	73fb      	strb	r3, [r7, #15]
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1f6      	bne.n	800bf14 <USER_SPI_initialize+0x40>

	ty = 0;
 800bf26:	2300      	movs	r3, #0
 800bf28:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	f7ff ff62 	bl	800bdf6 <send_cmd>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	f040 808b 	bne.w	800c050 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800bf3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bf3e:	f7ff fe39 	bl	800bbb4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800bf42:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800bf46:	2008      	movs	r0, #8
 800bf48:	f7ff ff55 	bl	800bdf6 <send_cmd>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d151      	bne.n	800bff6 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800bf52:	2300      	movs	r3, #0
 800bf54:	73fb      	strb	r3, [r7, #15]
 800bf56:	e00d      	b.n	800bf74 <USER_SPI_initialize+0xa0>
 800bf58:	7bfc      	ldrb	r4, [r7, #15]
 800bf5a:	20ff      	movs	r0, #255	@ 0xff
 800bf5c:	f7ff fe54 	bl	800bc08 <xchg_spi>
 800bf60:	4603      	mov	r3, r0
 800bf62:	461a      	mov	r2, r3
 800bf64:	f104 0310 	add.w	r3, r4, #16
 800bf68:	443b      	add	r3, r7
 800bf6a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	3301      	adds	r3, #1
 800bf72:	73fb      	strb	r3, [r7, #15]
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	2b03      	cmp	r3, #3
 800bf78:	d9ee      	bls.n	800bf58 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800bf7a:	7abb      	ldrb	r3, [r7, #10]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d167      	bne.n	800c050 <USER_SPI_initialize+0x17c>
 800bf80:	7afb      	ldrb	r3, [r7, #11]
 800bf82:	2baa      	cmp	r3, #170	@ 0xaa
 800bf84:	d164      	bne.n	800c050 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800bf86:	bf00      	nop
 800bf88:	f7ff fe28 	bl	800bbdc <SPI_Timer_Status>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d007      	beq.n	800bfa2 <USER_SPI_initialize+0xce>
 800bf92:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bf96:	20a9      	movs	r0, #169	@ 0xa9
 800bf98:	f7ff ff2d 	bl	800bdf6 <send_cmd>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1f2      	bne.n	800bf88 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800bfa2:	f7ff fe1b 	bl	800bbdc <SPI_Timer_Status>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d051      	beq.n	800c050 <USER_SPI_initialize+0x17c>
 800bfac:	2100      	movs	r1, #0
 800bfae:	203a      	movs	r0, #58	@ 0x3a
 800bfb0:	f7ff ff21 	bl	800bdf6 <send_cmd>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d14a      	bne.n	800c050 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800bfba:	2300      	movs	r3, #0
 800bfbc:	73fb      	strb	r3, [r7, #15]
 800bfbe:	e00d      	b.n	800bfdc <USER_SPI_initialize+0x108>
 800bfc0:	7bfc      	ldrb	r4, [r7, #15]
 800bfc2:	20ff      	movs	r0, #255	@ 0xff
 800bfc4:	f7ff fe20 	bl	800bc08 <xchg_spi>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	461a      	mov	r2, r3
 800bfcc:	f104 0310 	add.w	r3, r4, #16
 800bfd0:	443b      	add	r3, r7
 800bfd2:	f803 2c08 	strb.w	r2, [r3, #-8]
 800bfd6:	7bfb      	ldrb	r3, [r7, #15]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	73fb      	strb	r3, [r7, #15]
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d9ee      	bls.n	800bfc0 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800bfe2:	7a3b      	ldrb	r3, [r7, #8]
 800bfe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <USER_SPI_initialize+0x11c>
 800bfec:	230c      	movs	r3, #12
 800bfee:	e000      	b.n	800bff2 <USER_SPI_initialize+0x11e>
 800bff0:	2304      	movs	r3, #4
 800bff2:	737b      	strb	r3, [r7, #13]
 800bff4:	e02c      	b.n	800c050 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800bff6:	2100      	movs	r1, #0
 800bff8:	20a9      	movs	r0, #169	@ 0xa9
 800bffa:	f7ff fefc 	bl	800bdf6 <send_cmd>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b01      	cmp	r3, #1
 800c002:	d804      	bhi.n	800c00e <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800c004:	2302      	movs	r3, #2
 800c006:	737b      	strb	r3, [r7, #13]
 800c008:	23a9      	movs	r3, #169	@ 0xa9
 800c00a:	73bb      	strb	r3, [r7, #14]
 800c00c:	e003      	b.n	800c016 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800c00e:	2301      	movs	r3, #1
 800c010:	737b      	strb	r3, [r7, #13]
 800c012:	2301      	movs	r3, #1
 800c014:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800c016:	bf00      	nop
 800c018:	f7ff fde0 	bl	800bbdc <SPI_Timer_Status>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d007      	beq.n	800c032 <USER_SPI_initialize+0x15e>
 800c022:	7bbb      	ldrb	r3, [r7, #14]
 800c024:	2100      	movs	r1, #0
 800c026:	4618      	mov	r0, r3
 800c028:	f7ff fee5 	bl	800bdf6 <send_cmd>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1f2      	bne.n	800c018 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800c032:	f7ff fdd3 	bl	800bbdc <SPI_Timer_Status>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d007      	beq.n	800c04c <USER_SPI_initialize+0x178>
 800c03c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c040:	2010      	movs	r0, #16
 800c042:	f7ff fed8 	bl	800bdf6 <send_cmd>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d001      	beq.n	800c050 <USER_SPI_initialize+0x17c>
				ty = 0;
 800c04c:	2300      	movs	r3, #0
 800c04e:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 800c050:	4a14      	ldr	r2, [pc, #80]	@ (800c0a4 <USER_SPI_initialize+0x1d0>)
 800c052:	7b7b      	ldrb	r3, [r7, #13]
 800c054:	7013      	strb	r3, [r2, #0]
	despiselect();
 800c056:	f7ff fe47 	bl	800bce8 <despiselect>

	if (ty) {			/* OK */
 800c05a:	7b7b      	ldrb	r3, [r7, #13]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d012      	beq.n	800c086 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800c060:	4b0f      	ldr	r3, [pc, #60]	@ (800c0a0 <USER_SPI_initialize+0x1cc>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800c06a:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a0 <USER_SPI_initialize+0x1cc>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f042 0220 	orr.w	r2, r2, #32
 800c072:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800c074:	4b09      	ldr	r3, [pc, #36]	@ (800c09c <USER_SPI_initialize+0x1c8>)
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	f023 0301 	bic.w	r3, r3, #1
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	4b06      	ldr	r3, [pc, #24]	@ (800c09c <USER_SPI_initialize+0x1c8>)
 800c082:	701a      	strb	r2, [r3, #0]
 800c084:	e002      	b.n	800c08c <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800c086:	4b05      	ldr	r3, [pc, #20]	@ (800c09c <USER_SPI_initialize+0x1c8>)
 800c088:	2201      	movs	r2, #1
 800c08a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800c08c:	4b03      	ldr	r3, [pc, #12]	@ (800c09c <USER_SPI_initialize+0x1c8>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	b2db      	uxtb	r3, r3
}
 800c092:	4618      	mov	r0, r3
 800c094:	3714      	adds	r7, #20
 800c096:	46bd      	mov	sp, r7
 800c098:	bd90      	pop	{r4, r7, pc}
 800c09a:	bf00      	nop
 800c09c:	20000024 	.word	0x20000024
 800c0a0:	200067c0 	.word	0x200067c0
 800c0a4:	20006aa1 	.word	0x20006aa1

0800c0a8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800c0b2:	79fb      	ldrb	r3, [r7, #7]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d001      	beq.n	800c0bc <USER_SPI_status+0x14>
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e002      	b.n	800c0c2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800c0bc:	4b04      	ldr	r3, [pc, #16]	@ (800c0d0 <USER_SPI_status+0x28>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	b2db      	uxtb	r3, r3
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop
 800c0d0:	20000024 	.word	0x20000024

0800c0d4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60b9      	str	r1, [r7, #8]
 800c0dc:	607a      	str	r2, [r7, #4]
 800c0de:	603b      	str	r3, [r7, #0]
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c0e4:	7bfb      	ldrb	r3, [r7, #15]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d102      	bne.n	800c0f0 <USER_SPI_read+0x1c>
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d101      	bne.n	800c0f4 <USER_SPI_read+0x20>
 800c0f0:	2304      	movs	r3, #4
 800c0f2:	e04d      	b.n	800c190 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c0f4:	4b28      	ldr	r3, [pc, #160]	@ (800c198 <USER_SPI_read+0xc4>)
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d001      	beq.n	800c106 <USER_SPI_read+0x32>
 800c102:	2303      	movs	r3, #3
 800c104:	e044      	b.n	800c190 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800c106:	4b25      	ldr	r3, [pc, #148]	@ (800c19c <USER_SPI_read+0xc8>)
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	f003 0308 	and.w	r3, r3, #8
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d102      	bne.n	800c118 <USER_SPI_read+0x44>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	025b      	lsls	r3, r3, #9
 800c116:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d111      	bne.n	800c142 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800c11e:	6879      	ldr	r1, [r7, #4]
 800c120:	2011      	movs	r0, #17
 800c122:	f7ff fe68 	bl	800bdf6 <send_cmd>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d129      	bne.n	800c180 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800c12c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c130:	68b8      	ldr	r0, [r7, #8]
 800c132:	f7ff fe05 	bl	800bd40 <rcvr_datablock>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d021      	beq.n	800c180 <USER_SPI_read+0xac>
			count = 0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	603b      	str	r3, [r7, #0]
 800c140:	e01e      	b.n	800c180 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	2012      	movs	r0, #18
 800c146:	f7ff fe56 	bl	800bdf6 <send_cmd>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d117      	bne.n	800c180 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800c150:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c154:	68b8      	ldr	r0, [r7, #8]
 800c156:	f7ff fdf3 	bl	800bd40 <rcvr_datablock>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00a      	beq.n	800c176 <USER_SPI_read+0xa2>
				buff += 512;
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c166:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	603b      	str	r3, [r7, #0]
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1ed      	bne.n	800c150 <USER_SPI_read+0x7c>
 800c174:	e000      	b.n	800c178 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800c176:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800c178:	2100      	movs	r1, #0
 800c17a:	200c      	movs	r0, #12
 800c17c:	f7ff fe3b 	bl	800bdf6 <send_cmd>
		}
	}
	despiselect();
 800c180:	f7ff fdb2 	bl	800bce8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	bf14      	ite	ne
 800c18a:	2301      	movne	r3, #1
 800c18c:	2300      	moveq	r3, #0
 800c18e:	b2db      	uxtb	r3, r3
}
 800c190:	4618      	mov	r0, r3
 800c192:	3710      	adds	r7, #16
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	20000024 	.word	0x20000024
 800c19c:	20006aa1 	.word	0x20006aa1

0800c1a0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60b9      	str	r1, [r7, #8]
 800c1a8:	607a      	str	r2, [r7, #4]
 800c1aa:	603b      	str	r3, [r7, #0]
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c1b0:	7bfb      	ldrb	r3, [r7, #15]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d102      	bne.n	800c1bc <USER_SPI_write+0x1c>
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d101      	bne.n	800c1c0 <USER_SPI_write+0x20>
 800c1bc:	2304      	movs	r3, #4
 800c1be:	e063      	b.n	800c288 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800c1c0:	4b33      	ldr	r3, [pc, #204]	@ (800c290 <USER_SPI_write+0xf0>)
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	f003 0301 	and.w	r3, r3, #1
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d001      	beq.n	800c1d2 <USER_SPI_write+0x32>
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	e05a      	b.n	800c288 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800c1d2:	4b2f      	ldr	r3, [pc, #188]	@ (800c290 <USER_SPI_write+0xf0>)
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	f003 0304 	and.w	r3, r3, #4
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d001      	beq.n	800c1e4 <USER_SPI_write+0x44>
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	e051      	b.n	800c288 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800c1e4:	4b2b      	ldr	r3, [pc, #172]	@ (800c294 <USER_SPI_write+0xf4>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	f003 0308 	and.w	r3, r3, #8
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d102      	bne.n	800c1f6 <USER_SPI_write+0x56>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	025b      	lsls	r3, r3, #9
 800c1f4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d110      	bne.n	800c21e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800c1fc:	6879      	ldr	r1, [r7, #4]
 800c1fe:	2018      	movs	r0, #24
 800c200:	f7ff fdf9 	bl	800bdf6 <send_cmd>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d136      	bne.n	800c278 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800c20a:	21fe      	movs	r1, #254	@ 0xfe
 800c20c:	68b8      	ldr	r0, [r7, #8]
 800c20e:	f7ff fdc0 	bl	800bd92 <xmit_datablock>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d02f      	beq.n	800c278 <USER_SPI_write+0xd8>
			count = 0;
 800c218:	2300      	movs	r3, #0
 800c21a:	603b      	str	r3, [r7, #0]
 800c21c:	e02c      	b.n	800c278 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800c21e:	4b1d      	ldr	r3, [pc, #116]	@ (800c294 <USER_SPI_write+0xf4>)
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	f003 0306 	and.w	r3, r3, #6
 800c226:	2b00      	cmp	r3, #0
 800c228:	d003      	beq.n	800c232 <USER_SPI_write+0x92>
 800c22a:	6839      	ldr	r1, [r7, #0]
 800c22c:	2097      	movs	r0, #151	@ 0x97
 800c22e:	f7ff fde2 	bl	800bdf6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800c232:	6879      	ldr	r1, [r7, #4]
 800c234:	2019      	movs	r0, #25
 800c236:	f7ff fdde 	bl	800bdf6 <send_cmd>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d11b      	bne.n	800c278 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800c240:	21fc      	movs	r1, #252	@ 0xfc
 800c242:	68b8      	ldr	r0, [r7, #8]
 800c244:	f7ff fda5 	bl	800bd92 <xmit_datablock>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00a      	beq.n	800c264 <USER_SPI_write+0xc4>
				buff += 512;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c254:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	3b01      	subs	r3, #1
 800c25a:	603b      	str	r3, [r7, #0]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1ee      	bne.n	800c240 <USER_SPI_write+0xa0>
 800c262:	e000      	b.n	800c266 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800c264:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800c266:	21fd      	movs	r1, #253	@ 0xfd
 800c268:	2000      	movs	r0, #0
 800c26a:	f7ff fd92 	bl	800bd92 <xmit_datablock>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <USER_SPI_write+0xd8>
 800c274:	2301      	movs	r3, #1
 800c276:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800c278:	f7ff fd36 	bl	800bce8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	bf14      	ite	ne
 800c282:	2301      	movne	r3, #1
 800c284:	2300      	moveq	r3, #0
 800c286:	b2db      	uxtb	r3, r3
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	20000024 	.word	0x20000024
 800c294:	20006aa1 	.word	0x20006aa1

0800c298 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b08c      	sub	sp, #48	@ 0x30
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	4603      	mov	r3, r0
 800c2a0:	603a      	str	r2, [r7, #0]
 800c2a2:	71fb      	strb	r3, [r7, #7]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800c2a8:	79fb      	ldrb	r3, [r7, #7]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <USER_SPI_ioctl+0x1a>
 800c2ae:	2304      	movs	r3, #4
 800c2b0:	e15a      	b.n	800c568 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c2b2:	4baf      	ldr	r3, [pc, #700]	@ (800c570 <USER_SPI_ioctl+0x2d8>)
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	f003 0301 	and.w	r3, r3, #1
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d001      	beq.n	800c2c4 <USER_SPI_ioctl+0x2c>
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	e151      	b.n	800c568 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800c2ca:	79bb      	ldrb	r3, [r7, #6]
 800c2cc:	2b04      	cmp	r3, #4
 800c2ce:	f200 8136 	bhi.w	800c53e <USER_SPI_ioctl+0x2a6>
 800c2d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d8 <USER_SPI_ioctl+0x40>)
 800c2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d8:	0800c2ed 	.word	0x0800c2ed
 800c2dc:	0800c301 	.word	0x0800c301
 800c2e0:	0800c53f 	.word	0x0800c53f
 800c2e4:	0800c3ad 	.word	0x0800c3ad
 800c2e8:	0800c4a3 	.word	0x0800c4a3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800c2ec:	f7ff fd0c 	bl	800bd08 <spiselect>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f000 8127 	beq.w	800c546 <USER_SPI_ioctl+0x2ae>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800c2fe:	e122      	b.n	800c546 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800c300:	2100      	movs	r1, #0
 800c302:	2009      	movs	r0, #9
 800c304:	f7ff fd77 	bl	800bdf6 <send_cmd>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f040 811d 	bne.w	800c54a <USER_SPI_ioctl+0x2b2>
 800c310:	f107 030c 	add.w	r3, r7, #12
 800c314:	2110      	movs	r1, #16
 800c316:	4618      	mov	r0, r3
 800c318:	f7ff fd12 	bl	800bd40 <rcvr_datablock>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 8113 	beq.w	800c54a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800c324:	7b3b      	ldrb	r3, [r7, #12]
 800c326:	099b      	lsrs	r3, r3, #6
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d111      	bne.n	800c352 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800c32e:	7d7b      	ldrb	r3, [r7, #21]
 800c330:	461a      	mov	r2, r3
 800c332:	7d3b      	ldrb	r3, [r7, #20]
 800c334:	021b      	lsls	r3, r3, #8
 800c336:	4413      	add	r3, r2
 800c338:	461a      	mov	r2, r3
 800c33a:	7cfb      	ldrb	r3, [r7, #19]
 800c33c:	041b      	lsls	r3, r3, #16
 800c33e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800c342:	4413      	add	r3, r2
 800c344:	3301      	adds	r3, #1
 800c346:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	029a      	lsls	r2, r3, #10
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	601a      	str	r2, [r3, #0]
 800c350:	e028      	b.n	800c3a4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800c352:	7c7b      	ldrb	r3, [r7, #17]
 800c354:	f003 030f 	and.w	r3, r3, #15
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	7dbb      	ldrb	r3, [r7, #22]
 800c35c:	09db      	lsrs	r3, r3, #7
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	4413      	add	r3, r2
 800c362:	b2da      	uxtb	r2, r3
 800c364:	7d7b      	ldrb	r3, [r7, #21]
 800c366:	005b      	lsls	r3, r3, #1
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	f003 0306 	and.w	r3, r3, #6
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	4413      	add	r3, r2
 800c372:	b2db      	uxtb	r3, r3
 800c374:	3302      	adds	r3, #2
 800c376:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800c37a:	7d3b      	ldrb	r3, [r7, #20]
 800c37c:	099b      	lsrs	r3, r3, #6
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	461a      	mov	r2, r3
 800c382:	7cfb      	ldrb	r3, [r7, #19]
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	441a      	add	r2, r3
 800c388:	7cbb      	ldrb	r3, [r7, #18]
 800c38a:	029b      	lsls	r3, r3, #10
 800c38c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c390:	4413      	add	r3, r2
 800c392:	3301      	adds	r3, #1
 800c394:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800c396:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c39a:	3b09      	subs	r3, #9
 800c39c:	69fa      	ldr	r2, [r7, #28]
 800c39e:	409a      	lsls	r2, r3
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800c3aa:	e0ce      	b.n	800c54a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800c3ac:	4b71      	ldr	r3, [pc, #452]	@ (800c574 <USER_SPI_ioctl+0x2dc>)
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d031      	beq.n	800c41c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	208d      	movs	r0, #141	@ 0x8d
 800c3bc:	f7ff fd1b 	bl	800bdf6 <send_cmd>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f040 80c3 	bne.w	800c54e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800c3c8:	20ff      	movs	r0, #255	@ 0xff
 800c3ca:	f7ff fc1d 	bl	800bc08 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800c3ce:	f107 030c 	add.w	r3, r7, #12
 800c3d2:	2110      	movs	r1, #16
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7ff fcb3 	bl	800bd40 <rcvr_datablock>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f000 80b6 	beq.w	800c54e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800c3e2:	2330      	movs	r3, #48	@ 0x30
 800c3e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c3e8:	e007      	b.n	800c3fa <USER_SPI_ioctl+0x162>
 800c3ea:	20ff      	movs	r0, #255	@ 0xff
 800c3ec:	f7ff fc0c 	bl	800bc08 <xchg_spi>
 800c3f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c3fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1f3      	bne.n	800c3ea <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800c402:	7dbb      	ldrb	r3, [r7, #22]
 800c404:	091b      	lsrs	r3, r3, #4
 800c406:	b2db      	uxtb	r3, r3
 800c408:	461a      	mov	r2, r3
 800c40a:	2310      	movs	r3, #16
 800c40c:	fa03 f202 	lsl.w	r2, r3, r2
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800c414:	2300      	movs	r3, #0
 800c416:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800c41a:	e098      	b.n	800c54e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800c41c:	2100      	movs	r1, #0
 800c41e:	2009      	movs	r0, #9
 800c420:	f7ff fce9 	bl	800bdf6 <send_cmd>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	f040 8091 	bne.w	800c54e <USER_SPI_ioctl+0x2b6>
 800c42c:	f107 030c 	add.w	r3, r7, #12
 800c430:	2110      	movs	r1, #16
 800c432:	4618      	mov	r0, r3
 800c434:	f7ff fc84 	bl	800bd40 <rcvr_datablock>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f000 8087 	beq.w	800c54e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800c440:	4b4c      	ldr	r3, [pc, #304]	@ (800c574 <USER_SPI_ioctl+0x2dc>)
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	f003 0302 	and.w	r3, r3, #2
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d012      	beq.n	800c472 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800c44c:	7dbb      	ldrb	r3, [r7, #22]
 800c44e:	005b      	lsls	r3, r3, #1
 800c450:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800c454:	7dfa      	ldrb	r2, [r7, #23]
 800c456:	09d2      	lsrs	r2, r2, #7
 800c458:	b2d2      	uxtb	r2, r2
 800c45a:	4413      	add	r3, r2
 800c45c:	1c5a      	adds	r2, r3, #1
 800c45e:	7e7b      	ldrb	r3, [r7, #25]
 800c460:	099b      	lsrs	r3, r3, #6
 800c462:	b2db      	uxtb	r3, r3
 800c464:	3b01      	subs	r3, #1
 800c466:	fa02 f303 	lsl.w	r3, r2, r3
 800c46a:	461a      	mov	r2, r3
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	601a      	str	r2, [r3, #0]
 800c470:	e013      	b.n	800c49a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800c472:	7dbb      	ldrb	r3, [r7, #22]
 800c474:	109b      	asrs	r3, r3, #2
 800c476:	b29b      	uxth	r3, r3
 800c478:	f003 031f 	and.w	r3, r3, #31
 800c47c:	3301      	adds	r3, #1
 800c47e:	7dfa      	ldrb	r2, [r7, #23]
 800c480:	00d2      	lsls	r2, r2, #3
 800c482:	f002 0218 	and.w	r2, r2, #24
 800c486:	7df9      	ldrb	r1, [r7, #23]
 800c488:	0949      	lsrs	r1, r1, #5
 800c48a:	b2c9      	uxtb	r1, r1
 800c48c:	440a      	add	r2, r1
 800c48e:	3201      	adds	r2, #1
 800c490:	fb02 f303 	mul.w	r3, r2, r3
 800c494:	461a      	mov	r2, r3
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800c49a:	2300      	movs	r3, #0
 800c49c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800c4a0:	e055      	b.n	800c54e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c4a2:	4b34      	ldr	r3, [pc, #208]	@ (800c574 <USER_SPI_ioctl+0x2dc>)
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	f003 0306 	and.w	r3, r3, #6
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d051      	beq.n	800c552 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c4ae:	f107 020c 	add.w	r2, r7, #12
 800c4b2:	79fb      	ldrb	r3, [r7, #7]
 800c4b4:	210b      	movs	r1, #11
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7ff feee 	bl	800c298 <USER_SPI_ioctl>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d149      	bne.n	800c556 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c4c2:	7b3b      	ldrb	r3, [r7, #12]
 800c4c4:	099b      	lsrs	r3, r3, #6
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d104      	bne.n	800c4d6 <USER_SPI_ioctl+0x23e>
 800c4cc:	7dbb      	ldrb	r3, [r7, #22]
 800c4ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d041      	beq.n	800c55a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	623b      	str	r3, [r7, #32]
 800c4da:	6a3b      	ldr	r3, [r7, #32]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4e0:	6a3b      	ldr	r3, [r7, #32]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800c4e6:	4b23      	ldr	r3, [pc, #140]	@ (800c574 <USER_SPI_ioctl+0x2dc>)
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	f003 0308 	and.w	r3, r3, #8
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d105      	bne.n	800c4fe <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800c4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f4:	025b      	lsls	r3, r3, #9
 800c4f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fa:	025b      	lsls	r3, r3, #9
 800c4fc:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800c4fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c500:	2020      	movs	r0, #32
 800c502:	f7ff fc78 	bl	800bdf6 <send_cmd>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d128      	bne.n	800c55e <USER_SPI_ioctl+0x2c6>
 800c50c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c50e:	2021      	movs	r0, #33	@ 0x21
 800c510:	f7ff fc71 	bl	800bdf6 <send_cmd>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d121      	bne.n	800c55e <USER_SPI_ioctl+0x2c6>
 800c51a:	2100      	movs	r1, #0
 800c51c:	2026      	movs	r0, #38	@ 0x26
 800c51e:	f7ff fc6a 	bl	800bdf6 <send_cmd>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d11a      	bne.n	800c55e <USER_SPI_ioctl+0x2c6>
 800c528:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c52c:	f7ff fbb9 	bl	800bca2 <wait_ready>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d013      	beq.n	800c55e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800c536:	2300      	movs	r3, #0
 800c538:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800c53c:	e00f      	b.n	800c55e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800c53e:	2304      	movs	r3, #4
 800c540:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c544:	e00c      	b.n	800c560 <USER_SPI_ioctl+0x2c8>
		break;
 800c546:	bf00      	nop
 800c548:	e00a      	b.n	800c560 <USER_SPI_ioctl+0x2c8>
		break;
 800c54a:	bf00      	nop
 800c54c:	e008      	b.n	800c560 <USER_SPI_ioctl+0x2c8>
		break;
 800c54e:	bf00      	nop
 800c550:	e006      	b.n	800c560 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c552:	bf00      	nop
 800c554:	e004      	b.n	800c560 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c556:	bf00      	nop
 800c558:	e002      	b.n	800c560 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c55a:	bf00      	nop
 800c55c:	e000      	b.n	800c560 <USER_SPI_ioctl+0x2c8>
		break;
 800c55e:	bf00      	nop
	}

	despiselect();
 800c560:	f7ff fbc2 	bl	800bce8 <despiselect>

	return res;
 800c564:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3730      	adds	r7, #48	@ 0x30
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	20000024 	.word	0x20000024
 800c574:	20006aa1 	.word	0x20006aa1

0800c578 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	4603      	mov	r3, r0
 800c580:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c582:	79fb      	ldrb	r3, [r7, #7]
 800c584:	4a08      	ldr	r2, [pc, #32]	@ (800c5a8 <disk_status+0x30>)
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	79fa      	ldrb	r2, [r7, #7]
 800c590:	4905      	ldr	r1, [pc, #20]	@ (800c5a8 <disk_status+0x30>)
 800c592:	440a      	add	r2, r1
 800c594:	7a12      	ldrb	r2, [r2, #8]
 800c596:	4610      	mov	r0, r2
 800c598:	4798      	blx	r3
 800c59a:	4603      	mov	r3, r0
 800c59c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	20006ad4 	.word	0x20006ad4

0800c5ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c5ba:	79fb      	ldrb	r3, [r7, #7]
 800c5bc:	4a0d      	ldr	r2, [pc, #52]	@ (800c5f4 <disk_initialize+0x48>)
 800c5be:	5cd3      	ldrb	r3, [r2, r3]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d111      	bne.n	800c5e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c5c4:	79fb      	ldrb	r3, [r7, #7]
 800c5c6:	4a0b      	ldr	r2, [pc, #44]	@ (800c5f4 <disk_initialize+0x48>)
 800c5c8:	2101      	movs	r1, #1
 800c5ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c5cc:	79fb      	ldrb	r3, [r7, #7]
 800c5ce:	4a09      	ldr	r2, [pc, #36]	@ (800c5f4 <disk_initialize+0x48>)
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4413      	add	r3, r2
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	79fa      	ldrb	r2, [r7, #7]
 800c5da:	4906      	ldr	r1, [pc, #24]	@ (800c5f4 <disk_initialize+0x48>)
 800c5dc:	440a      	add	r2, r1
 800c5de:	7a12      	ldrb	r2, [r2, #8]
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	4798      	blx	r3
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	20006ad4 	.word	0x20006ad4

0800c5f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c5f8:	b590      	push	{r4, r7, lr}
 800c5fa:	b087      	sub	sp, #28
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60b9      	str	r1, [r7, #8]
 800c600:	607a      	str	r2, [r7, #4]
 800c602:	603b      	str	r3, [r7, #0]
 800c604:	4603      	mov	r3, r0
 800c606:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	4a0a      	ldr	r2, [pc, #40]	@ (800c634 <disk_read+0x3c>)
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	689c      	ldr	r4, [r3, #8]
 800c614:	7bfb      	ldrb	r3, [r7, #15]
 800c616:	4a07      	ldr	r2, [pc, #28]	@ (800c634 <disk_read+0x3c>)
 800c618:	4413      	add	r3, r2
 800c61a:	7a18      	ldrb	r0, [r3, #8]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	68b9      	ldr	r1, [r7, #8]
 800c622:	47a0      	blx	r4
 800c624:	4603      	mov	r3, r0
 800c626:	75fb      	strb	r3, [r7, #23]
  return res;
 800c628:	7dfb      	ldrb	r3, [r7, #23]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	371c      	adds	r7, #28
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd90      	pop	{r4, r7, pc}
 800c632:	bf00      	nop
 800c634:	20006ad4 	.word	0x20006ad4

0800c638 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c638:	b590      	push	{r4, r7, lr}
 800c63a:	b087      	sub	sp, #28
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60b9      	str	r1, [r7, #8]
 800c640:	607a      	str	r2, [r7, #4]
 800c642:	603b      	str	r3, [r7, #0]
 800c644:	4603      	mov	r3, r0
 800c646:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c648:	7bfb      	ldrb	r3, [r7, #15]
 800c64a:	4a0a      	ldr	r2, [pc, #40]	@ (800c674 <disk_write+0x3c>)
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4413      	add	r3, r2
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	68dc      	ldr	r4, [r3, #12]
 800c654:	7bfb      	ldrb	r3, [r7, #15]
 800c656:	4a07      	ldr	r2, [pc, #28]	@ (800c674 <disk_write+0x3c>)
 800c658:	4413      	add	r3, r2
 800c65a:	7a18      	ldrb	r0, [r3, #8]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	68b9      	ldr	r1, [r7, #8]
 800c662:	47a0      	blx	r4
 800c664:	4603      	mov	r3, r0
 800c666:	75fb      	strb	r3, [r7, #23]
  return res;
 800c668:	7dfb      	ldrb	r3, [r7, #23]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	371c      	adds	r7, #28
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd90      	pop	{r4, r7, pc}
 800c672:	bf00      	nop
 800c674:	20006ad4 	.word	0x20006ad4

0800c678 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	603a      	str	r2, [r7, #0]
 800c682:	71fb      	strb	r3, [r7, #7]
 800c684:	460b      	mov	r3, r1
 800c686:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c688:	79fb      	ldrb	r3, [r7, #7]
 800c68a:	4a09      	ldr	r2, [pc, #36]	@ (800c6b0 <disk_ioctl+0x38>)
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	4413      	add	r3, r2
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	79fa      	ldrb	r2, [r7, #7]
 800c696:	4906      	ldr	r1, [pc, #24]	@ (800c6b0 <disk_ioctl+0x38>)
 800c698:	440a      	add	r2, r1
 800c69a:	7a10      	ldrb	r0, [r2, #8]
 800c69c:	79b9      	ldrb	r1, [r7, #6]
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	4798      	blx	r3
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	73fb      	strb	r3, [r7, #15]
  return res;
 800c6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	20006ad4 	.word	0x20006ad4

0800c6b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c6c4:	89fb      	ldrh	r3, [r7, #14]
 800c6c6:	021b      	lsls	r3, r3, #8
 800c6c8:	b21a      	sxth	r2, r3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	b21b      	sxth	r3, r3
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	b21b      	sxth	r3, r3
 800c6d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c6d6:	89fb      	ldrh	r3, [r7, #14]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	3303      	adds	r3, #3
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	021b      	lsls	r3, r3, #8
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	3202      	adds	r2, #2
 800c6fc:	7812      	ldrb	r2, [r2, #0]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	021b      	lsls	r3, r3, #8
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	3201      	adds	r2, #1
 800c70a:	7812      	ldrb	r2, [r2, #0]
 800c70c:	4313      	orrs	r3, r2
 800c70e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	021b      	lsls	r3, r3, #8
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	7812      	ldrb	r2, [r2, #0]
 800c718:	4313      	orrs	r3, r2
 800c71a:	60fb      	str	r3, [r7, #12]
	return rv;
 800c71c:	68fb      	ldr	r3, [r7, #12]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c72a:	b480      	push	{r7}
 800c72c:	b083      	sub	sp, #12
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	460b      	mov	r3, r1
 800c734:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	1c5a      	adds	r2, r3, #1
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	887a      	ldrh	r2, [r7, #2]
 800c73e:	b2d2      	uxtb	r2, r2
 800c740:	701a      	strb	r2, [r3, #0]
 800c742:	887b      	ldrh	r3, [r7, #2]
 800c744:	0a1b      	lsrs	r3, r3, #8
 800c746:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	1c5a      	adds	r2, r3, #1
 800c74c:	607a      	str	r2, [r7, #4]
 800c74e:	887a      	ldrh	r2, [r7, #2]
 800c750:	b2d2      	uxtb	r2, r2
 800c752:	701a      	strb	r2, [r3, #0]
}
 800c754:	bf00      	nop
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	1c5a      	adds	r2, r3, #1
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	683a      	ldr	r2, [r7, #0]
 800c772:	b2d2      	uxtb	r2, r2
 800c774:	701a      	strb	r2, [r3, #0]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	0a1b      	lsrs	r3, r3, #8
 800c77a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	607a      	str	r2, [r7, #4]
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	b2d2      	uxtb	r2, r2
 800c786:	701a      	strb	r2, [r3, #0]
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	0a1b      	lsrs	r3, r3, #8
 800c78c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	1c5a      	adds	r2, r3, #1
 800c792:	607a      	str	r2, [r7, #4]
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	b2d2      	uxtb	r2, r2
 800c798:	701a      	strb	r2, [r3, #0]
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	0a1b      	lsrs	r3, r3, #8
 800c79e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	1c5a      	adds	r2, r3, #1
 800c7a4:	607a      	str	r2, [r7, #4]
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	b2d2      	uxtb	r2, r2
 800c7aa:	701a      	strb	r2, [r3, #0]
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c7b8:	b480      	push	{r7}
 800c7ba:	b087      	sub	sp, #28
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00d      	beq.n	800c7ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	1c53      	adds	r3, r2, #1
 800c7d6:	613b      	str	r3, [r7, #16]
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	1c59      	adds	r1, r3, #1
 800c7dc:	6179      	str	r1, [r7, #20]
 800c7de:	7812      	ldrb	r2, [r2, #0]
 800c7e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	3b01      	subs	r3, #1
 800c7e6:	607b      	str	r3, [r7, #4]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1f1      	bne.n	800c7d2 <mem_cpy+0x1a>
	}
}
 800c7ee:	bf00      	nop
 800c7f0:	371c      	adds	r7, #28
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr

0800c7fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c7fa:	b480      	push	{r7}
 800c7fc:	b087      	sub	sp, #28
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	60f8      	str	r0, [r7, #12]
 800c802:	60b9      	str	r1, [r7, #8]
 800c804:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	1c5a      	adds	r2, r3, #1
 800c80e:	617a      	str	r2, [r7, #20]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	b2d2      	uxtb	r2, r2
 800c814:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	3b01      	subs	r3, #1
 800c81a:	607b      	str	r3, [r7, #4]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1f3      	bne.n	800c80a <mem_set+0x10>
}
 800c822:	bf00      	nop
 800c824:	bf00      	nop
 800c826:	371c      	adds	r7, #28
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c830:	b480      	push	{r7}
 800c832:	b089      	sub	sp, #36	@ 0x24
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	61fb      	str	r3, [r7, #28]
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c844:	2300      	movs	r3, #0
 800c846:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	1c5a      	adds	r2, r3, #1
 800c84c:	61fa      	str	r2, [r7, #28]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	4619      	mov	r1, r3
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	1c5a      	adds	r2, r3, #1
 800c856:	61ba      	str	r2, [r7, #24]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	1acb      	subs	r3, r1, r3
 800c85c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	3b01      	subs	r3, #1
 800c862:	607b      	str	r3, [r7, #4]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <mem_cmp+0x40>
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d0eb      	beq.n	800c848 <mem_cmp+0x18>

	return r;
 800c870:	697b      	ldr	r3, [r7, #20]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3724      	adds	r7, #36	@ 0x24
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr

0800c87e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c87e:	b480      	push	{r7}
 800c880:	b083      	sub	sp, #12
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
 800c886:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c888:	e002      	b.n	800c890 <chk_chr+0x12>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	3301      	adds	r3, #1
 800c88e:	607b      	str	r3, [r7, #4]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d005      	beq.n	800c8a4 <chk_chr+0x26>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	461a      	mov	r2, r3
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d1f2      	bne.n	800c88a <chk_chr+0xc>
	return *str;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c8be:	2300      	movs	r3, #0
 800c8c0:	60bb      	str	r3, [r7, #8]
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	60fb      	str	r3, [r7, #12]
 800c8c6:	e029      	b.n	800c91c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c8c8:	4a27      	ldr	r2, [pc, #156]	@ (800c968 <chk_lock+0xb4>)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	011b      	lsls	r3, r3, #4
 800c8ce:	4413      	add	r3, r2
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d01d      	beq.n	800c912 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c8d6:	4a24      	ldr	r2, [pc, #144]	@ (800c968 <chk_lock+0xb4>)
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	011b      	lsls	r3, r3, #4
 800c8dc:	4413      	add	r3, r2
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d116      	bne.n	800c916 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c8e8:	4a1f      	ldr	r2, [pc, #124]	@ (800c968 <chk_lock+0xb4>)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	011b      	lsls	r3, r3, #4
 800c8ee:	4413      	add	r3, r2
 800c8f0:	3304      	adds	r3, #4
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d10c      	bne.n	800c916 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c8fc:	4a1a      	ldr	r2, [pc, #104]	@ (800c968 <chk_lock+0xb4>)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	011b      	lsls	r3, r3, #4
 800c902:	4413      	add	r3, r2
 800c904:	3308      	adds	r3, #8
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d102      	bne.n	800c916 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c910:	e007      	b.n	800c922 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c912:	2301      	movs	r3, #1
 800c914:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3301      	adds	r3, #1
 800c91a:	60fb      	str	r3, [r7, #12]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d9d2      	bls.n	800c8c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2b02      	cmp	r3, #2
 800c926:	d109      	bne.n	800c93c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d102      	bne.n	800c934 <chk_lock+0x80>
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	2b02      	cmp	r3, #2
 800c932:	d101      	bne.n	800c938 <chk_lock+0x84>
 800c934:	2300      	movs	r3, #0
 800c936:	e010      	b.n	800c95a <chk_lock+0xa6>
 800c938:	2312      	movs	r3, #18
 800c93a:	e00e      	b.n	800c95a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d108      	bne.n	800c954 <chk_lock+0xa0>
 800c942:	4a09      	ldr	r2, [pc, #36]	@ (800c968 <chk_lock+0xb4>)
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	011b      	lsls	r3, r3, #4
 800c948:	4413      	add	r3, r2
 800c94a:	330c      	adds	r3, #12
 800c94c:	881b      	ldrh	r3, [r3, #0]
 800c94e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c952:	d101      	bne.n	800c958 <chk_lock+0xa4>
 800c954:	2310      	movs	r3, #16
 800c956:	e000      	b.n	800c95a <chk_lock+0xa6>
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3714      	adds	r7, #20
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	20006ab4 	.word	0x20006ab4

0800c96c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c972:	2300      	movs	r3, #0
 800c974:	607b      	str	r3, [r7, #4]
 800c976:	e002      	b.n	800c97e <enq_lock+0x12>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	3301      	adds	r3, #1
 800c97c:	607b      	str	r3, [r7, #4]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2b01      	cmp	r3, #1
 800c982:	d806      	bhi.n	800c992 <enq_lock+0x26>
 800c984:	4a09      	ldr	r2, [pc, #36]	@ (800c9ac <enq_lock+0x40>)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	011b      	lsls	r3, r3, #4
 800c98a:	4413      	add	r3, r2
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1f2      	bne.n	800c978 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b02      	cmp	r3, #2
 800c996:	bf14      	ite	ne
 800c998:	2301      	movne	r3, #1
 800c99a:	2300      	moveq	r3, #0
 800c99c:	b2db      	uxtb	r3, r3
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	370c      	adds	r7, #12
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	20006ab4 	.word	0x20006ab4

0800c9b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60fb      	str	r3, [r7, #12]
 800c9be:	e01f      	b.n	800ca00 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c9c0:	4a41      	ldr	r2, [pc, #260]	@ (800cac8 <inc_lock+0x118>)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	011b      	lsls	r3, r3, #4
 800c9c6:	4413      	add	r3, r2
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d113      	bne.n	800c9fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c9d2:	4a3d      	ldr	r2, [pc, #244]	@ (800cac8 <inc_lock+0x118>)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	011b      	lsls	r3, r3, #4
 800c9d8:	4413      	add	r3, r2
 800c9da:	3304      	adds	r3, #4
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d109      	bne.n	800c9fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c9e6:	4a38      	ldr	r2, [pc, #224]	@ (800cac8 <inc_lock+0x118>)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	011b      	lsls	r3, r3, #4
 800c9ec:	4413      	add	r3, r2
 800c9ee:	3308      	adds	r3, #8
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d006      	beq.n	800ca08 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	60fb      	str	r3, [r7, #12]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d9dc      	bls.n	800c9c0 <inc_lock+0x10>
 800ca06:	e000      	b.n	800ca0a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ca08:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	d132      	bne.n	800ca76 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ca10:	2300      	movs	r3, #0
 800ca12:	60fb      	str	r3, [r7, #12]
 800ca14:	e002      	b.n	800ca1c <inc_lock+0x6c>
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	60fb      	str	r3, [r7, #12]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d806      	bhi.n	800ca30 <inc_lock+0x80>
 800ca22:	4a29      	ldr	r2, [pc, #164]	@ (800cac8 <inc_lock+0x118>)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	011b      	lsls	r3, r3, #4
 800ca28:	4413      	add	r3, r2
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1f2      	bne.n	800ca16 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b02      	cmp	r3, #2
 800ca34:	d101      	bne.n	800ca3a <inc_lock+0x8a>
 800ca36:	2300      	movs	r3, #0
 800ca38:	e040      	b.n	800cabc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	4922      	ldr	r1, [pc, #136]	@ (800cac8 <inc_lock+0x118>)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	011b      	lsls	r3, r3, #4
 800ca44:	440b      	add	r3, r1
 800ca46:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	689a      	ldr	r2, [r3, #8]
 800ca4c:	491e      	ldr	r1, [pc, #120]	@ (800cac8 <inc_lock+0x118>)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	011b      	lsls	r3, r3, #4
 800ca52:	440b      	add	r3, r1
 800ca54:	3304      	adds	r3, #4
 800ca56:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	695a      	ldr	r2, [r3, #20]
 800ca5c:	491a      	ldr	r1, [pc, #104]	@ (800cac8 <inc_lock+0x118>)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	011b      	lsls	r3, r3, #4
 800ca62:	440b      	add	r3, r1
 800ca64:	3308      	adds	r3, #8
 800ca66:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ca68:	4a17      	ldr	r2, [pc, #92]	@ (800cac8 <inc_lock+0x118>)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	011b      	lsls	r3, r3, #4
 800ca6e:	4413      	add	r3, r2
 800ca70:	330c      	adds	r3, #12
 800ca72:	2200      	movs	r2, #0
 800ca74:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d009      	beq.n	800ca90 <inc_lock+0xe0>
 800ca7c:	4a12      	ldr	r2, [pc, #72]	@ (800cac8 <inc_lock+0x118>)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	011b      	lsls	r3, r3, #4
 800ca82:	4413      	add	r3, r2
 800ca84:	330c      	adds	r3, #12
 800ca86:	881b      	ldrh	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <inc_lock+0xe0>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	e015      	b.n	800cabc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d108      	bne.n	800caa8 <inc_lock+0xf8>
 800ca96:	4a0c      	ldr	r2, [pc, #48]	@ (800cac8 <inc_lock+0x118>)
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	011b      	lsls	r3, r3, #4
 800ca9c:	4413      	add	r3, r2
 800ca9e:	330c      	adds	r3, #12
 800caa0:	881b      	ldrh	r3, [r3, #0]
 800caa2:	3301      	adds	r3, #1
 800caa4:	b29a      	uxth	r2, r3
 800caa6:	e001      	b.n	800caac <inc_lock+0xfc>
 800caa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800caac:	4906      	ldr	r1, [pc, #24]	@ (800cac8 <inc_lock+0x118>)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	011b      	lsls	r3, r3, #4
 800cab2:	440b      	add	r3, r1
 800cab4:	330c      	adds	r3, #12
 800cab6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	3301      	adds	r3, #1
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3714      	adds	r7, #20
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	20006ab4 	.word	0x20006ab4

0800cacc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	3b01      	subs	r3, #1
 800cad8:	607b      	str	r3, [r7, #4]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d825      	bhi.n	800cb2c <dec_lock+0x60>
		n = Files[i].ctr;
 800cae0:	4a17      	ldr	r2, [pc, #92]	@ (800cb40 <dec_lock+0x74>)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	011b      	lsls	r3, r3, #4
 800cae6:	4413      	add	r3, r2
 800cae8:	330c      	adds	r3, #12
 800caea:	881b      	ldrh	r3, [r3, #0]
 800caec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800caee:	89fb      	ldrh	r3, [r7, #14]
 800caf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800caf4:	d101      	bne.n	800cafa <dec_lock+0x2e>
 800caf6:	2300      	movs	r3, #0
 800caf8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cafa:	89fb      	ldrh	r3, [r7, #14]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <dec_lock+0x3a>
 800cb00:	89fb      	ldrh	r3, [r7, #14]
 800cb02:	3b01      	subs	r3, #1
 800cb04:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cb06:	4a0e      	ldr	r2, [pc, #56]	@ (800cb40 <dec_lock+0x74>)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	011b      	lsls	r3, r3, #4
 800cb0c:	4413      	add	r3, r2
 800cb0e:	330c      	adds	r3, #12
 800cb10:	89fa      	ldrh	r2, [r7, #14]
 800cb12:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cb14:	89fb      	ldrh	r3, [r7, #14]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d105      	bne.n	800cb26 <dec_lock+0x5a>
 800cb1a:	4a09      	ldr	r2, [pc, #36]	@ (800cb40 <dec_lock+0x74>)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	011b      	lsls	r3, r3, #4
 800cb20:	4413      	add	r3, r2
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	737b      	strb	r3, [r7, #13]
 800cb2a:	e001      	b.n	800cb30 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cb2c:	2302      	movs	r3, #2
 800cb2e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cb30:	7b7b      	ldrb	r3, [r7, #13]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	20006ab4 	.word	0x20006ab4

0800cb44 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b085      	sub	sp, #20
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	60fb      	str	r3, [r7, #12]
 800cb50:	e010      	b.n	800cb74 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cb52:	4a0d      	ldr	r2, [pc, #52]	@ (800cb88 <clear_lock+0x44>)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	011b      	lsls	r3, r3, #4
 800cb58:	4413      	add	r3, r2
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d105      	bne.n	800cb6e <clear_lock+0x2a>
 800cb62:	4a09      	ldr	r2, [pc, #36]	@ (800cb88 <clear_lock+0x44>)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	011b      	lsls	r3, r3, #4
 800cb68:	4413      	add	r3, r2
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3301      	adds	r3, #1
 800cb72:	60fb      	str	r3, [r7, #12]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d9eb      	bls.n	800cb52 <clear_lock+0xe>
	}
}
 800cb7a:	bf00      	nop
 800cb7c:	bf00      	nop
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr
 800cb88:	20006ab4 	.word	0x20006ab4

0800cb8c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	78db      	ldrb	r3, [r3, #3]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d034      	beq.n	800cc0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cba4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	7858      	ldrb	r0, [r3, #1]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	697a      	ldr	r2, [r7, #20]
 800cbb4:	f7ff fd40 	bl	800c638 <disk_write>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d002      	beq.n	800cbc4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	73fb      	strb	r3, [r7, #15]
 800cbc2:	e022      	b.n	800cc0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	697a      	ldr	r2, [r7, #20]
 800cbd0:	1ad2      	subs	r2, r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d217      	bcs.n	800cc0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	789b      	ldrb	r3, [r3, #2]
 800cbde:	613b      	str	r3, [r7, #16]
 800cbe0:	e010      	b.n	800cc04 <sync_window+0x78>
					wsect += fs->fsize;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	699b      	ldr	r3, [r3, #24]
 800cbe6:	697a      	ldr	r2, [r7, #20]
 800cbe8:	4413      	add	r3, r2
 800cbea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	7858      	ldrb	r0, [r3, #1]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	697a      	ldr	r2, [r7, #20]
 800cbfa:	f7ff fd1d 	bl	800c638 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	613b      	str	r3, [r7, #16]
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d8eb      	bhi.n	800cbe2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3718      	adds	r7, #24
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d01b      	beq.n	800cc64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7ff ffad 	bl	800cb8c <sync_window>
 800cc32:	4603      	mov	r3, r0
 800cc34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d113      	bne.n	800cc64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	7858      	ldrb	r0, [r3, #1]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc46:	2301      	movs	r3, #1
 800cc48:	683a      	ldr	r2, [r7, #0]
 800cc4a:	f7ff fcd5 	bl	800c5f8 <disk_read>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d004      	beq.n	800cc5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cc54:	f04f 33ff 	mov.w	r3, #4294967295
 800cc58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	683a      	ldr	r2, [r7, #0]
 800cc62:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f7ff ff87 	bl	800cb8c <sync_window>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d158      	bne.n	800cd3a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b03      	cmp	r3, #3
 800cc8e:	d148      	bne.n	800cd22 <sync_fs+0xb2>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	791b      	ldrb	r3, [r3, #4]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d144      	bne.n	800cd22 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	3330      	adds	r3, #48	@ 0x30
 800cc9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cca0:	2100      	movs	r1, #0
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7ff fda9 	bl	800c7fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	3330      	adds	r3, #48	@ 0x30
 800ccac:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ccb0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7ff fd38 	bl	800c72a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	3330      	adds	r3, #48	@ 0x30
 800ccbe:	4921      	ldr	r1, [pc, #132]	@ (800cd44 <sync_fs+0xd4>)
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7ff fd4d 	bl	800c760 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	3330      	adds	r3, #48	@ 0x30
 800ccca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ccce:	491e      	ldr	r1, [pc, #120]	@ (800cd48 <sync_fs+0xd8>)
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7ff fd45 	bl	800c760 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	3330      	adds	r3, #48	@ 0x30
 800ccda:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	4619      	mov	r1, r3
 800cce4:	4610      	mov	r0, r2
 800cce6:	f7ff fd3b 	bl	800c760 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	3330      	adds	r3, #48	@ 0x30
 800ccee:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	f7ff fd31 	bl	800c760 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	1c5a      	adds	r2, r3, #1
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	7858      	ldrb	r0, [r3, #1]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd16:	2301      	movs	r3, #1
 800cd18:	f7ff fc8e 	bl	800c638 <disk_write>
			fs->fsi_flag = 0;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	785b      	ldrb	r3, [r3, #1]
 800cd26:	2200      	movs	r2, #0
 800cd28:	2100      	movs	r1, #0
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7ff fca4 	bl	800c678 <disk_ioctl>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d001      	beq.n	800cd3a <sync_fs+0xca>
 800cd36:	2301      	movs	r3, #1
 800cd38:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	41615252 	.word	0x41615252
 800cd48:	61417272 	.word	0x61417272

0800cd4c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	3b02      	subs	r3, #2
 800cd5a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	695b      	ldr	r3, [r3, #20]
 800cd60:	3b02      	subs	r3, #2
 800cd62:	683a      	ldr	r2, [r7, #0]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d301      	bcc.n	800cd6c <clust2sect+0x20>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	e008      	b.n	800cd7e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	895b      	ldrh	r3, [r3, #10]
 800cd70:	461a      	mov	r2, r3
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	fb03 f202 	mul.w	r2, r3, r2
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd7c:	4413      	add	r3, r2
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	370c      	adds	r7, #12
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b086      	sub	sp, #24
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d904      	bls.n	800cdaa <get_fat+0x20>
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	695b      	ldr	r3, [r3, #20]
 800cda4:	683a      	ldr	r2, [r7, #0]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d302      	bcc.n	800cdb0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cdaa:	2301      	movs	r3, #1
 800cdac:	617b      	str	r3, [r7, #20]
 800cdae:	e08e      	b.n	800cece <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cdb0:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	2b03      	cmp	r3, #3
 800cdbc:	d061      	beq.n	800ce82 <get_fat+0xf8>
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	dc7b      	bgt.n	800ceba <get_fat+0x130>
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d002      	beq.n	800cdcc <get_fat+0x42>
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	d041      	beq.n	800ce4e <get_fat+0xc4>
 800cdca:	e076      	b.n	800ceba <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	60fb      	str	r3, [r7, #12]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	085b      	lsrs	r3, r3, #1
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	6a1a      	ldr	r2, [r3, #32]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	0a5b      	lsrs	r3, r3, #9
 800cde2:	4413      	add	r3, r2
 800cde4:	4619      	mov	r1, r3
 800cde6:	6938      	ldr	r0, [r7, #16]
 800cde8:	f7ff ff14 	bl	800cc14 <move_window>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d166      	bne.n	800cec0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	1c5a      	adds	r2, r3, #1
 800cdf6:	60fa      	str	r2, [r7, #12]
 800cdf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdfc:	693a      	ldr	r2, [r7, #16]
 800cdfe:	4413      	add	r3, r2
 800ce00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce04:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	6a1a      	ldr	r2, [r3, #32]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	0a5b      	lsrs	r3, r3, #9
 800ce0e:	4413      	add	r3, r2
 800ce10:	4619      	mov	r1, r3
 800ce12:	6938      	ldr	r0, [r7, #16]
 800ce14:	f7ff fefe 	bl	800cc14 <move_window>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d152      	bne.n	800cec4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce24:	693a      	ldr	r2, [r7, #16]
 800ce26:	4413      	add	r3, r2
 800ce28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce2c:	021b      	lsls	r3, r3, #8
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	4313      	orrs	r3, r2
 800ce32:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	f003 0301 	and.w	r3, r3, #1
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d002      	beq.n	800ce44 <get_fat+0xba>
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	091b      	lsrs	r3, r3, #4
 800ce42:	e002      	b.n	800ce4a <get_fat+0xc0>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce4a:	617b      	str	r3, [r7, #20]
			break;
 800ce4c:	e03f      	b.n	800cece <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	6a1a      	ldr	r2, [r3, #32]
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	0a1b      	lsrs	r3, r3, #8
 800ce56:	4413      	add	r3, r2
 800ce58:	4619      	mov	r1, r3
 800ce5a:	6938      	ldr	r0, [r7, #16]
 800ce5c:	f7ff feda 	bl	800cc14 <move_window>
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d130      	bne.n	800cec8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	005b      	lsls	r3, r3, #1
 800ce70:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ce74:	4413      	add	r3, r2
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7ff fc1c 	bl	800c6b4 <ld_word>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	617b      	str	r3, [r7, #20]
			break;
 800ce80:	e025      	b.n	800cece <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	6a1a      	ldr	r2, [r3, #32]
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	09db      	lsrs	r3, r3, #7
 800ce8a:	4413      	add	r3, r2
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	6938      	ldr	r0, [r7, #16]
 800ce90:	f7ff fec0 	bl	800cc14 <move_window>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d118      	bne.n	800cecc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cea8:	4413      	add	r3, r2
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7ff fc1a 	bl	800c6e4 <ld_dword>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ceb6:	617b      	str	r3, [r7, #20]
			break;
 800ceb8:	e009      	b.n	800cece <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ceba:	2301      	movs	r3, #1
 800cebc:	617b      	str	r3, [r7, #20]
 800cebe:	e006      	b.n	800cece <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cec0:	bf00      	nop
 800cec2:	e004      	b.n	800cece <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cec4:	bf00      	nop
 800cec6:	e002      	b.n	800cece <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cec8:	bf00      	nop
 800ceca:	e000      	b.n	800cece <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cecc:	bf00      	nop
		}
	}

	return val;
 800cece:	697b      	ldr	r3, [r7, #20]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3718      	adds	r7, #24
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ced8:	b590      	push	{r4, r7, lr}
 800ceda:	b089      	sub	sp, #36	@ 0x24
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cee4:	2302      	movs	r3, #2
 800cee6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	f240 80d9 	bls.w	800d0a2 <put_fat+0x1ca>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	695b      	ldr	r3, [r3, #20]
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	f080 80d3 	bcs.w	800d0a2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	2b03      	cmp	r3, #3
 800cf02:	f000 8096 	beq.w	800d032 <put_fat+0x15a>
 800cf06:	2b03      	cmp	r3, #3
 800cf08:	f300 80cb 	bgt.w	800d0a2 <put_fat+0x1ca>
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d002      	beq.n	800cf16 <put_fat+0x3e>
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d06e      	beq.n	800cff2 <put_fat+0x11a>
 800cf14:	e0c5      	b.n	800d0a2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	61bb      	str	r3, [r7, #24]
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	085b      	lsrs	r3, r3, #1
 800cf1e:	69ba      	ldr	r2, [r7, #24]
 800cf20:	4413      	add	r3, r2
 800cf22:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6a1a      	ldr	r2, [r3, #32]
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	0a5b      	lsrs	r3, r3, #9
 800cf2c:	4413      	add	r3, r2
 800cf2e:	4619      	mov	r1, r3
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f7ff fe6f 	bl	800cc14 <move_window>
 800cf36:	4603      	mov	r3, r0
 800cf38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf3a:	7ffb      	ldrb	r3, [r7, #31]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f040 80a9 	bne.w	800d094 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	1c59      	adds	r1, r3, #1
 800cf4c:	61b9      	str	r1, [r7, #24]
 800cf4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf52:	4413      	add	r3, r2
 800cf54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	f003 0301 	and.w	r3, r3, #1
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00d      	beq.n	800cf7c <put_fat+0xa4>
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	b25b      	sxtb	r3, r3
 800cf66:	f003 030f 	and.w	r3, r3, #15
 800cf6a:	b25a      	sxtb	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	011b      	lsls	r3, r3, #4
 800cf72:	b25b      	sxtb	r3, r3
 800cf74:	4313      	orrs	r3, r2
 800cf76:	b25b      	sxtb	r3, r3
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	e001      	b.n	800cf80 <put_fat+0xa8>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	697a      	ldr	r2, [r7, #20]
 800cf82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2201      	movs	r2, #1
 800cf88:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6a1a      	ldr	r2, [r3, #32]
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	0a5b      	lsrs	r3, r3, #9
 800cf92:	4413      	add	r3, r2
 800cf94:	4619      	mov	r1, r3
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	f7ff fe3c 	bl	800cc14 <move_window>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cfa0:	7ffb      	ldrb	r3, [r7, #31]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d178      	bne.n	800d098 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb2:	4413      	add	r3, r2
 800cfb4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	f003 0301 	and.w	r3, r3, #1
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d003      	beq.n	800cfc8 <put_fat+0xf0>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	091b      	lsrs	r3, r3, #4
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	e00e      	b.n	800cfe6 <put_fat+0x10e>
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	b25b      	sxtb	r3, r3
 800cfce:	f023 030f 	bic.w	r3, r3, #15
 800cfd2:	b25a      	sxtb	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	0a1b      	lsrs	r3, r3, #8
 800cfd8:	b25b      	sxtb	r3, r3
 800cfda:	f003 030f 	and.w	r3, r3, #15
 800cfde:	b25b      	sxtb	r3, r3
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	b25b      	sxtb	r3, r3
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	697a      	ldr	r2, [r7, #20]
 800cfe8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2201      	movs	r2, #1
 800cfee:	70da      	strb	r2, [r3, #3]
			break;
 800cff0:	e057      	b.n	800d0a2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6a1a      	ldr	r2, [r3, #32]
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	0a1b      	lsrs	r3, r3, #8
 800cffa:	4413      	add	r3, r2
 800cffc:	4619      	mov	r1, r3
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f7ff fe08 	bl	800cc14 <move_window>
 800d004:	4603      	mov	r3, r0
 800d006:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d008:	7ffb      	ldrb	r3, [r7, #31]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d146      	bne.n	800d09c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d01c:	4413      	add	r3, r2
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	b292      	uxth	r2, r2
 800d022:	4611      	mov	r1, r2
 800d024:	4618      	mov	r0, r3
 800d026:	f7ff fb80 	bl	800c72a <st_word>
			fs->wflag = 1;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2201      	movs	r2, #1
 800d02e:	70da      	strb	r2, [r3, #3]
			break;
 800d030:	e037      	b.n	800d0a2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6a1a      	ldr	r2, [r3, #32]
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	09db      	lsrs	r3, r3, #7
 800d03a:	4413      	add	r3, r2
 800d03c:	4619      	mov	r1, r3
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f7ff fde8 	bl	800cc14 <move_window>
 800d044:	4603      	mov	r3, r0
 800d046:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d048:	7ffb      	ldrb	r3, [r7, #31]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d128      	bne.n	800d0a0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d062:	4413      	add	r3, r2
 800d064:	4618      	mov	r0, r3
 800d066:	f7ff fb3d 	bl	800c6e4 <ld_dword>
 800d06a:	4603      	mov	r3, r0
 800d06c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d070:	4323      	orrs	r3, r4
 800d072:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d082:	4413      	add	r3, r2
 800d084:	6879      	ldr	r1, [r7, #4]
 800d086:	4618      	mov	r0, r3
 800d088:	f7ff fb6a 	bl	800c760 <st_dword>
			fs->wflag = 1;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2201      	movs	r2, #1
 800d090:	70da      	strb	r2, [r3, #3]
			break;
 800d092:	e006      	b.n	800d0a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d094:	bf00      	nop
 800d096:	e004      	b.n	800d0a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d098:	bf00      	nop
 800d09a:	e002      	b.n	800d0a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d09c:	bf00      	nop
 800d09e:	e000      	b.n	800d0a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d0a0:	bf00      	nop
		}
	}
	return res;
 800d0a2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3724      	adds	r7, #36	@ 0x24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd90      	pop	{r4, r7, pc}

0800d0ac <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b088      	sub	sp, #32
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d904      	bls.n	800d0d2 <remove_chain+0x26>
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	695b      	ldr	r3, [r3, #20]
 800d0cc:	68ba      	ldr	r2, [r7, #8]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d301      	bcc.n	800d0d6 <remove_chain+0x2a>
 800d0d2:	2302      	movs	r3, #2
 800d0d4:	e04b      	b.n	800d16e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00c      	beq.n	800d0f6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d0e0:	6879      	ldr	r1, [r7, #4]
 800d0e2:	69b8      	ldr	r0, [r7, #24]
 800d0e4:	f7ff fef8 	bl	800ced8 <put_fat>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d0ec:	7ffb      	ldrb	r3, [r7, #31]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d001      	beq.n	800d0f6 <remove_chain+0x4a>
 800d0f2:	7ffb      	ldrb	r3, [r7, #31]
 800d0f4:	e03b      	b.n	800d16e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d0f6:	68b9      	ldr	r1, [r7, #8]
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f7ff fe46 	bl	800cd8a <get_fat>
 800d0fe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d031      	beq.n	800d16a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d101      	bne.n	800d110 <remove_chain+0x64>
 800d10c:	2302      	movs	r3, #2
 800d10e:	e02e      	b.n	800d16e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d116:	d101      	bne.n	800d11c <remove_chain+0x70>
 800d118:	2301      	movs	r3, #1
 800d11a:	e028      	b.n	800d16e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d11c:	2200      	movs	r2, #0
 800d11e:	68b9      	ldr	r1, [r7, #8]
 800d120:	69b8      	ldr	r0, [r7, #24]
 800d122:	f7ff fed9 	bl	800ced8 <put_fat>
 800d126:	4603      	mov	r3, r0
 800d128:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d12a:	7ffb      	ldrb	r3, [r7, #31]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d001      	beq.n	800d134 <remove_chain+0x88>
 800d130:	7ffb      	ldrb	r3, [r7, #31]
 800d132:	e01c      	b.n	800d16e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	691a      	ldr	r2, [r3, #16]
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	695b      	ldr	r3, [r3, #20]
 800d13c:	3b02      	subs	r3, #2
 800d13e:	429a      	cmp	r2, r3
 800d140:	d20b      	bcs.n	800d15a <remove_chain+0xae>
			fs->free_clst++;
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	1c5a      	adds	r2, r3, #1
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	791b      	ldrb	r3, [r3, #4]
 800d150:	f043 0301 	orr.w	r3, r3, #1
 800d154:	b2da      	uxtb	r2, r3
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	695b      	ldr	r3, [r3, #20]
 800d162:	68ba      	ldr	r2, [r7, #8]
 800d164:	429a      	cmp	r2, r3
 800d166:	d3c6      	bcc.n	800d0f6 <remove_chain+0x4a>
 800d168:	e000      	b.n	800d16c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d16a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3720      	adds	r7, #32
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b088      	sub	sp, #32
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
 800d17e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10d      	bne.n	800d1a8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d004      	beq.n	800d1a2 <create_chain+0x2c>
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	695b      	ldr	r3, [r3, #20]
 800d19c:	69ba      	ldr	r2, [r7, #24]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d31b      	bcc.n	800d1da <create_chain+0x64>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	61bb      	str	r3, [r7, #24]
 800d1a6:	e018      	b.n	800d1da <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d1a8:	6839      	ldr	r1, [r7, #0]
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff fded 	bl	800cd8a <get_fat>
 800d1b0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d801      	bhi.n	800d1bc <create_chain+0x46>
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e070      	b.n	800d29e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c2:	d101      	bne.n	800d1c8 <create_chain+0x52>
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	e06a      	b.n	800d29e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	695b      	ldr	r3, [r3, #20]
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d201      	bcs.n	800d1d6 <create_chain+0x60>
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	e063      	b.n	800d29e <create_chain+0x128>
		scl = clst;
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	695b      	ldr	r3, [r3, #20]
 800d1e8:	69fa      	ldr	r2, [r7, #28]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d307      	bcc.n	800d1fe <create_chain+0x88>
				ncl = 2;
 800d1ee:	2302      	movs	r3, #2
 800d1f0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d1f2:	69fa      	ldr	r2, [r7, #28]
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d901      	bls.n	800d1fe <create_chain+0x88>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	e04f      	b.n	800d29e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d1fe:	69f9      	ldr	r1, [r7, #28]
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f7ff fdc2 	bl	800cd8a <get_fat>
 800d206:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00e      	beq.n	800d22c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d003      	beq.n	800d21c <create_chain+0xa6>
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d21a:	d101      	bne.n	800d220 <create_chain+0xaa>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	e03e      	b.n	800d29e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d220:	69fa      	ldr	r2, [r7, #28]
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	429a      	cmp	r2, r3
 800d226:	d1da      	bne.n	800d1de <create_chain+0x68>
 800d228:	2300      	movs	r3, #0
 800d22a:	e038      	b.n	800d29e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d22c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d22e:	f04f 32ff 	mov.w	r2, #4294967295
 800d232:	69f9      	ldr	r1, [r7, #28]
 800d234:	6938      	ldr	r0, [r7, #16]
 800d236:	f7ff fe4f 	bl	800ced8 <put_fat>
 800d23a:	4603      	mov	r3, r0
 800d23c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d23e:	7dfb      	ldrb	r3, [r7, #23]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d109      	bne.n	800d258 <create_chain+0xe2>
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d006      	beq.n	800d258 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d24a:	69fa      	ldr	r2, [r7, #28]
 800d24c:	6839      	ldr	r1, [r7, #0]
 800d24e:	6938      	ldr	r0, [r7, #16]
 800d250:	f7ff fe42 	bl	800ced8 <put_fat>
 800d254:	4603      	mov	r3, r0
 800d256:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d258:	7dfb      	ldrb	r3, [r7, #23]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d116      	bne.n	800d28c <create_chain+0x116>
		fs->last_clst = ncl;
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	69fa      	ldr	r2, [r7, #28]
 800d262:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	691a      	ldr	r2, [r3, #16]
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	695b      	ldr	r3, [r3, #20]
 800d26c:	3b02      	subs	r3, #2
 800d26e:	429a      	cmp	r2, r3
 800d270:	d804      	bhi.n	800d27c <create_chain+0x106>
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	1e5a      	subs	r2, r3, #1
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	791b      	ldrb	r3, [r3, #4]
 800d280:	f043 0301 	orr.w	r3, r3, #1
 800d284:	b2da      	uxtb	r2, r3
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	711a      	strb	r2, [r3, #4]
 800d28a:	e007      	b.n	800d29c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d28c:	7dfb      	ldrb	r3, [r7, #23]
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d102      	bne.n	800d298 <create_chain+0x122>
 800d292:	f04f 33ff 	mov.w	r3, #4294967295
 800d296:	e000      	b.n	800d29a <create_chain+0x124>
 800d298:	2301      	movs	r3, #1
 800d29a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d29c:	69fb      	ldr	r3, [r7, #28]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3720      	adds	r7, #32
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d2a6:	b480      	push	{r7}
 800d2a8:	b087      	sub	sp, #28
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
 800d2ae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ba:	3304      	adds	r3, #4
 800d2bc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	0a5b      	lsrs	r3, r3, #9
 800d2c2:	68fa      	ldr	r2, [r7, #12]
 800d2c4:	8952      	ldrh	r2, [r2, #10]
 800d2c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	1d1a      	adds	r2, r3, #4
 800d2d0:	613a      	str	r2, [r7, #16]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d101      	bne.n	800d2e0 <clmt_clust+0x3a>
 800d2dc:	2300      	movs	r3, #0
 800d2de:	e010      	b.n	800d302 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d2e0:	697a      	ldr	r2, [r7, #20]
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d307      	bcc.n	800d2f8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d2e8:	697a      	ldr	r2, [r7, #20]
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	617b      	str	r3, [r7, #20]
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d2f6:	e7e9      	b.n	800d2cc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d2f8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	4413      	add	r3, r2
}
 800d302:	4618      	mov	r0, r3
 800d304:	371c      	adds	r7, #28
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr

0800d30e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b086      	sub	sp, #24
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
 800d316:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d324:	d204      	bcs.n	800d330 <dir_sdi+0x22>
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	f003 031f 	and.w	r3, r3, #31
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d001      	beq.n	800d334 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d330:	2302      	movs	r3, #2
 800d332:	e063      	b.n	800d3fc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	683a      	ldr	r2, [r7, #0]
 800d338:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <dir_sdi+0x46>
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d902      	bls.n	800d354 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d352:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10c      	bne.n	800d374 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	095b      	lsrs	r3, r3, #5
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	8912      	ldrh	r2, [r2, #8]
 800d362:	4293      	cmp	r3, r2
 800d364:	d301      	bcc.n	800d36a <dir_sdi+0x5c>
 800d366:	2302      	movs	r3, #2
 800d368:	e048      	b.n	800d3fc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	61da      	str	r2, [r3, #28]
 800d372:	e029      	b.n	800d3c8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	895b      	ldrh	r3, [r3, #10]
 800d378:	025b      	lsls	r3, r3, #9
 800d37a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d37c:	e019      	b.n	800d3b2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6979      	ldr	r1, [r7, #20]
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff fd01 	bl	800cd8a <get_fat>
 800d388:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d390:	d101      	bne.n	800d396 <dir_sdi+0x88>
 800d392:	2301      	movs	r3, #1
 800d394:	e032      	b.n	800d3fc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d904      	bls.n	800d3a6 <dir_sdi+0x98>
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	695b      	ldr	r3, [r3, #20]
 800d3a0:	697a      	ldr	r2, [r7, #20]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d301      	bcc.n	800d3aa <dir_sdi+0x9c>
 800d3a6:	2302      	movs	r3, #2
 800d3a8:	e028      	b.n	800d3fc <dir_sdi+0xee>
			ofs -= csz;
 800d3aa:	683a      	ldr	r2, [r7, #0]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d2e1      	bcs.n	800d37e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d3ba:	6979      	ldr	r1, [r7, #20]
 800d3bc:	6938      	ldr	r0, [r7, #16]
 800d3be:	f7ff fcc5 	bl	800cd4c <clust2sect>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	697a      	ldr	r2, [r7, #20]
 800d3cc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	69db      	ldr	r3, [r3, #28]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <dir_sdi+0xcc>
 800d3d6:	2302      	movs	r3, #2
 800d3d8:	e010      	b.n	800d3fc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	69da      	ldr	r2, [r3, #28]
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	0a5b      	lsrs	r3, r3, #9
 800d3e2:	441a      	add	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3f4:	441a      	add	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d3fa:	2300      	movs	r3, #0
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3718      	adds	r7, #24
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	695b      	ldr	r3, [r3, #20]
 800d418:	3320      	adds	r3, #32
 800d41a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	69db      	ldr	r3, [r3, #28]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d003      	beq.n	800d42c <dir_next+0x28>
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d42a:	d301      	bcc.n	800d430 <dir_next+0x2c>
 800d42c:	2304      	movs	r3, #4
 800d42e:	e0aa      	b.n	800d586 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d436:	2b00      	cmp	r3, #0
 800d438:	f040 8098 	bne.w	800d56c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	69db      	ldr	r3, [r3, #28]
 800d440:	1c5a      	adds	r2, r3, #1
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	699b      	ldr	r3, [r3, #24]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d10b      	bne.n	800d466 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	095b      	lsrs	r3, r3, #5
 800d452:	68fa      	ldr	r2, [r7, #12]
 800d454:	8912      	ldrh	r2, [r2, #8]
 800d456:	4293      	cmp	r3, r2
 800d458:	f0c0 8088 	bcc.w	800d56c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	61da      	str	r2, [r3, #28]
 800d462:	2304      	movs	r3, #4
 800d464:	e08f      	b.n	800d586 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	0a5b      	lsrs	r3, r3, #9
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	8952      	ldrh	r2, [r2, #10]
 800d46e:	3a01      	subs	r2, #1
 800d470:	4013      	ands	r3, r2
 800d472:	2b00      	cmp	r3, #0
 800d474:	d17a      	bne.n	800d56c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	699b      	ldr	r3, [r3, #24]
 800d47c:	4619      	mov	r1, r3
 800d47e:	4610      	mov	r0, r2
 800d480:	f7ff fc83 	bl	800cd8a <get_fat>
 800d484:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d801      	bhi.n	800d490 <dir_next+0x8c>
 800d48c:	2302      	movs	r3, #2
 800d48e:	e07a      	b.n	800d586 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d496:	d101      	bne.n	800d49c <dir_next+0x98>
 800d498:	2301      	movs	r3, #1
 800d49a:	e074      	b.n	800d586 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	695b      	ldr	r3, [r3, #20]
 800d4a0:	697a      	ldr	r2, [r7, #20]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d358      	bcc.n	800d558 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d104      	bne.n	800d4b6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	61da      	str	r2, [r3, #28]
 800d4b2:	2304      	movs	r3, #4
 800d4b4:	e067      	b.n	800d586 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	699b      	ldr	r3, [r3, #24]
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4610      	mov	r0, r2
 800d4c0:	f7ff fe59 	bl	800d176 <create_chain>
 800d4c4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d101      	bne.n	800d4d0 <dir_next+0xcc>
 800d4cc:	2307      	movs	r3, #7
 800d4ce:	e05a      	b.n	800d586 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d101      	bne.n	800d4da <dir_next+0xd6>
 800d4d6:	2302      	movs	r3, #2
 800d4d8:	e055      	b.n	800d586 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e0:	d101      	bne.n	800d4e6 <dir_next+0xe2>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e04f      	b.n	800d586 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f7ff fb50 	bl	800cb8c <sync_window>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d001      	beq.n	800d4f6 <dir_next+0xf2>
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e047      	b.n	800d586 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	3330      	adds	r3, #48	@ 0x30
 800d4fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4fe:	2100      	movs	r1, #0
 800d500:	4618      	mov	r0, r3
 800d502:	f7ff f97a 	bl	800c7fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d506:	2300      	movs	r3, #0
 800d508:	613b      	str	r3, [r7, #16]
 800d50a:	6979      	ldr	r1, [r7, #20]
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f7ff fc1d 	bl	800cd4c <clust2sect>
 800d512:	4602      	mov	r2, r0
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d518:	e012      	b.n	800d540 <dir_next+0x13c>
						fs->wflag = 1;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2201      	movs	r2, #1
 800d51e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f7ff fb33 	bl	800cb8c <sync_window>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d001      	beq.n	800d530 <dir_next+0x12c>
 800d52c:	2301      	movs	r3, #1
 800d52e:	e02a      	b.n	800d586 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	3301      	adds	r3, #1
 800d534:	613b      	str	r3, [r7, #16]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d53a:	1c5a      	adds	r2, r3, #1
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	895b      	ldrh	r3, [r3, #10]
 800d544:	461a      	mov	r2, r3
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	4293      	cmp	r3, r2
 800d54a:	d3e6      	bcc.n	800d51a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	1ad2      	subs	r2, r2, r3
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	697a      	ldr	r2, [r7, #20]
 800d55c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d55e:	6979      	ldr	r1, [r7, #20]
 800d560:	68f8      	ldr	r0, [r7, #12]
 800d562:	f7ff fbf3 	bl	800cd4c <clust2sect>
 800d566:	4602      	mov	r2, r0
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	68ba      	ldr	r2, [r7, #8]
 800d570:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d57e:	441a      	add	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d584:	2300      	movs	r3, #0
}
 800d586:	4618      	mov	r0, r3
 800d588:	3718      	adds	r7, #24
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d58e:	b580      	push	{r7, lr}
 800d590:	b086      	sub	sp, #24
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
 800d596:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d59e:	2100      	movs	r1, #0
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7ff feb4 	bl	800d30e <dir_sdi>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d5aa:	7dfb      	ldrb	r3, [r7, #23]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d12b      	bne.n	800d608 <dir_alloc+0x7a>
		n = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	69db      	ldr	r3, [r3, #28]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	68f8      	ldr	r0, [r7, #12]
 800d5bc:	f7ff fb2a 	bl	800cc14 <move_window>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d5c4:	7dfb      	ldrb	r3, [r7, #23]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d11d      	bne.n	800d606 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	2be5      	cmp	r3, #229	@ 0xe5
 800d5d2:	d004      	beq.n	800d5de <dir_alloc+0x50>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a1b      	ldr	r3, [r3, #32]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d107      	bne.n	800d5ee <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	613b      	str	r3, [r7, #16]
 800d5e4:	693a      	ldr	r2, [r7, #16]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d102      	bne.n	800d5f2 <dir_alloc+0x64>
 800d5ec:	e00c      	b.n	800d608 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d5f2:	2101      	movs	r1, #1
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7ff ff05 	bl	800d404 <dir_next>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d5fe:	7dfb      	ldrb	r3, [r7, #23]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d0d7      	beq.n	800d5b4 <dir_alloc+0x26>
 800d604:	e000      	b.n	800d608 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d606:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d608:	7dfb      	ldrb	r3, [r7, #23]
 800d60a:	2b04      	cmp	r3, #4
 800d60c:	d101      	bne.n	800d612 <dir_alloc+0x84>
 800d60e:	2307      	movs	r3, #7
 800d610:	75fb      	strb	r3, [r7, #23]
	return res;
 800d612:	7dfb      	ldrb	r3, [r7, #23]
}
 800d614:	4618      	mov	r0, r3
 800d616:	3718      	adds	r7, #24
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	331a      	adds	r3, #26
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7ff f842 	bl	800c6b4 <ld_word>
 800d630:	4603      	mov	r3, r0
 800d632:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	2b03      	cmp	r3, #3
 800d63a:	d109      	bne.n	800d650 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	3314      	adds	r3, #20
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff f837 	bl	800c6b4 <ld_word>
 800d646:	4603      	mov	r3, r0
 800d648:	041b      	lsls	r3, r3, #16
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	4313      	orrs	r3, r2
 800d64e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d650:	68fb      	ldr	r3, [r7, #12]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b084      	sub	sp, #16
 800d65e:	af00      	add	r7, sp, #0
 800d660:	60f8      	str	r0, [r7, #12]
 800d662:	60b9      	str	r1, [r7, #8]
 800d664:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	331a      	adds	r3, #26
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	b292      	uxth	r2, r2
 800d66e:	4611      	mov	r1, r2
 800d670:	4618      	mov	r0, r3
 800d672:	f7ff f85a 	bl	800c72a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	2b03      	cmp	r3, #3
 800d67c:	d109      	bne.n	800d692 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	f103 0214 	add.w	r2, r3, #20
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	0c1b      	lsrs	r3, r3, #16
 800d688:	b29b      	uxth	r3, r3
 800d68a:	4619      	mov	r1, r3
 800d68c:	4610      	mov	r0, r2
 800d68e:	f7ff f84c 	bl	800c72a <st_word>
	}
}
 800d692:	bf00      	nop
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b086      	sub	sp, #24
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7ff fe2f 	bl	800d30e <dir_sdi>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d6b4:	7dfb      	ldrb	r3, [r7, #23]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <dir_find+0x24>
 800d6ba:	7dfb      	ldrb	r3, [r7, #23]
 800d6bc:	e03e      	b.n	800d73c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	69db      	ldr	r3, [r3, #28]
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6938      	ldr	r0, [r7, #16]
 800d6c6:	f7ff faa5 	bl	800cc14 <move_window>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d6ce:	7dfb      	ldrb	r3, [r7, #23]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d12f      	bne.n	800d734 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6a1b      	ldr	r3, [r3, #32]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d6dc:	7bfb      	ldrb	r3, [r7, #15]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d102      	bne.n	800d6e8 <dir_find+0x4e>
 800d6e2:	2304      	movs	r3, #4
 800d6e4:	75fb      	strb	r3, [r7, #23]
 800d6e6:	e028      	b.n	800d73a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6a1b      	ldr	r3, [r3, #32]
 800d6ec:	330b      	adds	r3, #11
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d6f4:	b2da      	uxtb	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6a1b      	ldr	r3, [r3, #32]
 800d6fe:	330b      	adds	r3, #11
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	f003 0308 	and.w	r3, r3, #8
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10a      	bne.n	800d720 <dir_find+0x86>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a18      	ldr	r0, [r3, #32]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	3324      	adds	r3, #36	@ 0x24
 800d712:	220b      	movs	r2, #11
 800d714:	4619      	mov	r1, r3
 800d716:	f7ff f88b 	bl	800c830 <mem_cmp>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00b      	beq.n	800d738 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d720:	2100      	movs	r1, #0
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f7ff fe6e 	bl	800d404 <dir_next>
 800d728:	4603      	mov	r3, r0
 800d72a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d72c:	7dfb      	ldrb	r3, [r7, #23]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d0c5      	beq.n	800d6be <dir_find+0x24>
 800d732:	e002      	b.n	800d73a <dir_find+0xa0>
		if (res != FR_OK) break;
 800d734:	bf00      	nop
 800d736:	e000      	b.n	800d73a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d738:	bf00      	nop

	return res;
 800d73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3718      	adds	r7, #24
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d752:	2101      	movs	r1, #1
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7ff ff1a 	bl	800d58e <dir_alloc>
 800d75a:	4603      	mov	r3, r0
 800d75c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d11c      	bne.n	800d79e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	69db      	ldr	r3, [r3, #28]
 800d768:	4619      	mov	r1, r3
 800d76a:	68b8      	ldr	r0, [r7, #8]
 800d76c:	f7ff fa52 	bl	800cc14 <move_window>
 800d770:	4603      	mov	r3, r0
 800d772:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d774:	7bfb      	ldrb	r3, [r7, #15]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d111      	bne.n	800d79e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6a1b      	ldr	r3, [r3, #32]
 800d77e:	2220      	movs	r2, #32
 800d780:	2100      	movs	r1, #0
 800d782:	4618      	mov	r0, r3
 800d784:	f7ff f839 	bl	800c7fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6a18      	ldr	r0, [r3, #32]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	3324      	adds	r3, #36	@ 0x24
 800d790:	220b      	movs	r2, #11
 800d792:	4619      	mov	r1, r3
 800d794:	f7ff f810 	bl	800c7b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	2201      	movs	r2, #1
 800d79c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3710      	adds	r7, #16
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b088      	sub	sp, #32
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	60fb      	str	r3, [r7, #12]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	3324      	adds	r3, #36	@ 0x24
 800d7bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d7be:	220b      	movs	r2, #11
 800d7c0:	2120      	movs	r1, #32
 800d7c2:	68b8      	ldr	r0, [r7, #8]
 800d7c4:	f7ff f819 	bl	800c7fa <mem_set>
	si = i = 0; ni = 8;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	613b      	str	r3, [r7, #16]
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	61fb      	str	r3, [r7, #28]
 800d7d0:	2308      	movs	r3, #8
 800d7d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	1c5a      	adds	r2, r3, #1
 800d7d8:	61fa      	str	r2, [r7, #28]
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	4413      	add	r3, r2
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d7e2:	7efb      	ldrb	r3, [r7, #27]
 800d7e4:	2b20      	cmp	r3, #32
 800d7e6:	d94e      	bls.n	800d886 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d7e8:	7efb      	ldrb	r3, [r7, #27]
 800d7ea:	2b2f      	cmp	r3, #47	@ 0x2f
 800d7ec:	d006      	beq.n	800d7fc <create_name+0x54>
 800d7ee:	7efb      	ldrb	r3, [r7, #27]
 800d7f0:	2b5c      	cmp	r3, #92	@ 0x5c
 800d7f2:	d110      	bne.n	800d816 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d7f4:	e002      	b.n	800d7fc <create_name+0x54>
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	61fb      	str	r3, [r7, #28]
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	4413      	add	r3, r2
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	2b2f      	cmp	r3, #47	@ 0x2f
 800d806:	d0f6      	beq.n	800d7f6 <create_name+0x4e>
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	4413      	add	r3, r2
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	2b5c      	cmp	r3, #92	@ 0x5c
 800d812:	d0f0      	beq.n	800d7f6 <create_name+0x4e>
			break;
 800d814:	e038      	b.n	800d888 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d816:	7efb      	ldrb	r3, [r7, #27]
 800d818:	2b2e      	cmp	r3, #46	@ 0x2e
 800d81a:	d003      	beq.n	800d824 <create_name+0x7c>
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	429a      	cmp	r2, r3
 800d822:	d30c      	bcc.n	800d83e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	2b0b      	cmp	r3, #11
 800d828:	d002      	beq.n	800d830 <create_name+0x88>
 800d82a:	7efb      	ldrb	r3, [r7, #27]
 800d82c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d82e:	d001      	beq.n	800d834 <create_name+0x8c>
 800d830:	2306      	movs	r3, #6
 800d832:	e044      	b.n	800d8be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d834:	2308      	movs	r3, #8
 800d836:	613b      	str	r3, [r7, #16]
 800d838:	230b      	movs	r3, #11
 800d83a:	617b      	str	r3, [r7, #20]
			continue;
 800d83c:	e022      	b.n	800d884 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d83e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d842:	2b00      	cmp	r3, #0
 800d844:	da04      	bge.n	800d850 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d846:	7efb      	ldrb	r3, [r7, #27]
 800d848:	3b80      	subs	r3, #128	@ 0x80
 800d84a:	4a1f      	ldr	r2, [pc, #124]	@ (800d8c8 <create_name+0x120>)
 800d84c:	5cd3      	ldrb	r3, [r2, r3]
 800d84e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d850:	7efb      	ldrb	r3, [r7, #27]
 800d852:	4619      	mov	r1, r3
 800d854:	481d      	ldr	r0, [pc, #116]	@ (800d8cc <create_name+0x124>)
 800d856:	f7ff f812 	bl	800c87e <chk_chr>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <create_name+0xbc>
 800d860:	2306      	movs	r3, #6
 800d862:	e02c      	b.n	800d8be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d864:	7efb      	ldrb	r3, [r7, #27]
 800d866:	2b60      	cmp	r3, #96	@ 0x60
 800d868:	d905      	bls.n	800d876 <create_name+0xce>
 800d86a:	7efb      	ldrb	r3, [r7, #27]
 800d86c:	2b7a      	cmp	r3, #122	@ 0x7a
 800d86e:	d802      	bhi.n	800d876 <create_name+0xce>
 800d870:	7efb      	ldrb	r3, [r7, #27]
 800d872:	3b20      	subs	r3, #32
 800d874:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	1c5a      	adds	r2, r3, #1
 800d87a:	613a      	str	r2, [r7, #16]
 800d87c:	68ba      	ldr	r2, [r7, #8]
 800d87e:	4413      	add	r3, r2
 800d880:	7efa      	ldrb	r2, [r7, #27]
 800d882:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d884:	e7a6      	b.n	800d7d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d886:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	441a      	add	r2, r3
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d101      	bne.n	800d89c <create_name+0xf4>
 800d898:	2306      	movs	r3, #6
 800d89a:	e010      	b.n	800d8be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	2be5      	cmp	r3, #229	@ 0xe5
 800d8a2:	d102      	bne.n	800d8aa <create_name+0x102>
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	2205      	movs	r2, #5
 800d8a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d8aa:	7efb      	ldrb	r3, [r7, #27]
 800d8ac:	2b20      	cmp	r3, #32
 800d8ae:	d801      	bhi.n	800d8b4 <create_name+0x10c>
 800d8b0:	2204      	movs	r2, #4
 800d8b2:	e000      	b.n	800d8b6 <create_name+0x10e>
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	330b      	adds	r3, #11
 800d8ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d8bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3720      	adds	r7, #32
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	08013d38 	.word	0x08013d38
 800d8cc:	08013cb4 	.word	0x08013cb4

0800d8d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d8e4:	e002      	b.n	800d8ec <follow_path+0x1c>
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	603b      	str	r3, [r7, #0]
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d8f2:	d0f8      	beq.n	800d8e6 <follow_path+0x16>
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d8fa:	d0f4      	beq.n	800d8e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	2200      	movs	r2, #0
 800d900:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	2b1f      	cmp	r3, #31
 800d908:	d80a      	bhi.n	800d920 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2280      	movs	r2, #128	@ 0x80
 800d90e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d912:	2100      	movs	r1, #0
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f7ff fcfa 	bl	800d30e <dir_sdi>
 800d91a:	4603      	mov	r3, r0
 800d91c:	75fb      	strb	r3, [r7, #23]
 800d91e:	e043      	b.n	800d9a8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d920:	463b      	mov	r3, r7
 800d922:	4619      	mov	r1, r3
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7ff ff3f 	bl	800d7a8 <create_name>
 800d92a:	4603      	mov	r3, r0
 800d92c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d92e:	7dfb      	ldrb	r3, [r7, #23]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d134      	bne.n	800d99e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7ff feb0 	bl	800d69a <dir_find>
 800d93a:	4603      	mov	r3, r0
 800d93c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d944:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d946:	7dfb      	ldrb	r3, [r7, #23]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00a      	beq.n	800d962 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d94c:	7dfb      	ldrb	r3, [r7, #23]
 800d94e:	2b04      	cmp	r3, #4
 800d950:	d127      	bne.n	800d9a2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d952:	7afb      	ldrb	r3, [r7, #11]
 800d954:	f003 0304 	and.w	r3, r3, #4
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d122      	bne.n	800d9a2 <follow_path+0xd2>
 800d95c:	2305      	movs	r3, #5
 800d95e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d960:	e01f      	b.n	800d9a2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d962:	7afb      	ldrb	r3, [r7, #11]
 800d964:	f003 0304 	and.w	r3, r3, #4
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d11c      	bne.n	800d9a6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	799b      	ldrb	r3, [r3, #6]
 800d970:	f003 0310 	and.w	r3, r3, #16
 800d974:	2b00      	cmp	r3, #0
 800d976:	d102      	bne.n	800d97e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d978:	2305      	movs	r3, #5
 800d97a:	75fb      	strb	r3, [r7, #23]
 800d97c:	e014      	b.n	800d9a8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	695b      	ldr	r3, [r3, #20]
 800d988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d98c:	4413      	add	r3, r2
 800d98e:	4619      	mov	r1, r3
 800d990:	68f8      	ldr	r0, [r7, #12]
 800d992:	f7ff fe43 	bl	800d61c <ld_clust>
 800d996:	4602      	mov	r2, r0
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d99c:	e7c0      	b.n	800d920 <follow_path+0x50>
			if (res != FR_OK) break;
 800d99e:	bf00      	nop
 800d9a0:	e002      	b.n	800d9a8 <follow_path+0xd8>
				break;
 800d9a2:	bf00      	nop
 800d9a4:	e000      	b.n	800d9a8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d9a6:	bf00      	nop
			}
		}
	}

	return res;
 800d9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3718      	adds	r7, #24
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d9b2:	b480      	push	{r7}
 800d9b4:	b087      	sub	sp, #28
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d9be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d031      	beq.n	800da2c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	617b      	str	r3, [r7, #20]
 800d9ce:	e002      	b.n	800d9d6 <get_ldnumber+0x24>
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	617b      	str	r3, [r7, #20]
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	2b20      	cmp	r3, #32
 800d9dc:	d903      	bls.n	800d9e6 <get_ldnumber+0x34>
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	2b3a      	cmp	r3, #58	@ 0x3a
 800d9e4:	d1f4      	bne.n	800d9d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	2b3a      	cmp	r3, #58	@ 0x3a
 800d9ec:	d11c      	bne.n	800da28 <get_ldnumber+0x76>
			tp = *path;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	1c5a      	adds	r2, r3, #1
 800d9f8:	60fa      	str	r2, [r7, #12]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	3b30      	subs	r3, #48	@ 0x30
 800d9fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2b09      	cmp	r3, #9
 800da04:	d80e      	bhi.n	800da24 <get_ldnumber+0x72>
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d10a      	bne.n	800da24 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d107      	bne.n	800da24 <get_ldnumber+0x72>
					vol = (int)i;
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	3301      	adds	r3, #1
 800da1c:	617b      	str	r3, [r7, #20]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	697a      	ldr	r2, [r7, #20]
 800da22:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	e002      	b.n	800da2e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800da28:	2300      	movs	r3, #0
 800da2a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800da2c:	693b      	ldr	r3, [r7, #16]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	371c      	adds	r7, #28
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
	...

0800da3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	70da      	strb	r2, [r3, #3]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f04f 32ff 	mov.w	r2, #4294967295
 800da52:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800da54:	6839      	ldr	r1, [r7, #0]
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f7ff f8dc 	bl	800cc14 <move_window>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d001      	beq.n	800da66 <check_fs+0x2a>
 800da62:	2304      	movs	r3, #4
 800da64:	e038      	b.n	800dad8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	3330      	adds	r3, #48	@ 0x30
 800da6a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fe fe20 	bl	800c6b4 <ld_word>
 800da74:	4603      	mov	r3, r0
 800da76:	461a      	mov	r2, r3
 800da78:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d001      	beq.n	800da84 <check_fs+0x48>
 800da80:	2303      	movs	r3, #3
 800da82:	e029      	b.n	800dad8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da8a:	2be9      	cmp	r3, #233	@ 0xe9
 800da8c:	d009      	beq.n	800daa2 <check_fs+0x66>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da94:	2beb      	cmp	r3, #235	@ 0xeb
 800da96:	d11e      	bne.n	800dad6 <check_fs+0x9a>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800da9e:	2b90      	cmp	r3, #144	@ 0x90
 800daa0:	d119      	bne.n	800dad6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	3330      	adds	r3, #48	@ 0x30
 800daa6:	3336      	adds	r3, #54	@ 0x36
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7fe fe1b 	bl	800c6e4 <ld_dword>
 800daae:	4603      	mov	r3, r0
 800dab0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dab4:	4a0a      	ldr	r2, [pc, #40]	@ (800dae0 <check_fs+0xa4>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d101      	bne.n	800dabe <check_fs+0x82>
 800daba:	2300      	movs	r3, #0
 800dabc:	e00c      	b.n	800dad8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3330      	adds	r3, #48	@ 0x30
 800dac2:	3352      	adds	r3, #82	@ 0x52
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fe fe0d 	bl	800c6e4 <ld_dword>
 800daca:	4603      	mov	r3, r0
 800dacc:	4a05      	ldr	r2, [pc, #20]	@ (800dae4 <check_fs+0xa8>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d101      	bne.n	800dad6 <check_fs+0x9a>
 800dad2:	2300      	movs	r3, #0
 800dad4:	e000      	b.n	800dad8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dad6:	2302      	movs	r3, #2
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	00544146 	.word	0x00544146
 800dae4:	33544146 	.word	0x33544146

0800dae8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b096      	sub	sp, #88	@ 0x58
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	4613      	mov	r3, r2
 800daf4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	2200      	movs	r2, #0
 800dafa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f7ff ff58 	bl	800d9b2 <get_ldnumber>
 800db02:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800db04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db06:	2b00      	cmp	r3, #0
 800db08:	da01      	bge.n	800db0e <find_volume+0x26>
 800db0a:	230b      	movs	r3, #11
 800db0c:	e22d      	b.n	800df6a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800db0e:	4aa1      	ldr	r2, [pc, #644]	@ (800dd94 <find_volume+0x2ac>)
 800db10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db16:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800db18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d101      	bne.n	800db22 <find_volume+0x3a>
 800db1e:	230c      	movs	r3, #12
 800db20:	e223      	b.n	800df6a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db26:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800db28:	79fb      	ldrb	r3, [r7, #7]
 800db2a:	f023 0301 	bic.w	r3, r3, #1
 800db2e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800db30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d01a      	beq.n	800db6e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800db38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db3a:	785b      	ldrb	r3, [r3, #1]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fe fd1b 	bl	800c578 <disk_status>
 800db42:	4603      	mov	r3, r0
 800db44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800db48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10c      	bne.n	800db6e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800db54:	79fb      	ldrb	r3, [r7, #7]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d007      	beq.n	800db6a <find_volume+0x82>
 800db5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800db5e:	f003 0304 	and.w	r3, r3, #4
 800db62:	2b00      	cmp	r3, #0
 800db64:	d001      	beq.n	800db6a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800db66:	230a      	movs	r3, #10
 800db68:	e1ff      	b.n	800df6a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800db6a:	2300      	movs	r3, #0
 800db6c:	e1fd      	b.n	800df6a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800db6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db70:	2200      	movs	r2, #0
 800db72:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800db74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db76:	b2da      	uxtb	r2, r3
 800db78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db7a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800db7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db7e:	785b      	ldrb	r3, [r3, #1]
 800db80:	4618      	mov	r0, r3
 800db82:	f7fe fd13 	bl	800c5ac <disk_initialize>
 800db86:	4603      	mov	r3, r0
 800db88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800db8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800db90:	f003 0301 	and.w	r3, r3, #1
 800db94:	2b00      	cmp	r3, #0
 800db96:	d001      	beq.n	800db9c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800db98:	2303      	movs	r3, #3
 800db9a:	e1e6      	b.n	800df6a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800db9c:	79fb      	ldrb	r3, [r7, #7]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d007      	beq.n	800dbb2 <find_volume+0xca>
 800dba2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dba6:	f003 0304 	and.w	r3, r3, #4
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d001      	beq.n	800dbb2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dbae:	230a      	movs	r3, #10
 800dbb0:	e1db      	b.n	800df6a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dbb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dbb8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dbba:	f7ff ff3f 	bl	800da3c <check_fs>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dbc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d149      	bne.n	800dc60 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dbcc:	2300      	movs	r3, #0
 800dbce:	643b      	str	r3, [r7, #64]	@ 0x40
 800dbd0:	e01e      	b.n	800dc10 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dbd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbda:	011b      	lsls	r3, r3, #4
 800dbdc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800dbe0:	4413      	add	r3, r2
 800dbe2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe6:	3304      	adds	r3, #4
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d006      	beq.n	800dbfc <find_volume+0x114>
 800dbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf0:	3308      	adds	r3, #8
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fe fd76 	bl	800c6e4 <ld_dword>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	e000      	b.n	800dbfe <find_volume+0x116>
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	3358      	adds	r3, #88	@ 0x58
 800dc04:	443b      	add	r3, r7
 800dc06:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc12:	2b03      	cmp	r3, #3
 800dc14:	d9dd      	bls.n	800dbd2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dc16:	2300      	movs	r3, #0
 800dc18:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800dc1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <find_volume+0x13e>
 800dc20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc22:	3b01      	subs	r3, #1
 800dc24:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dc26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	3358      	adds	r3, #88	@ 0x58
 800dc2c:	443b      	add	r3, r7
 800dc2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dc32:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dc34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d005      	beq.n	800dc46 <find_volume+0x15e>
 800dc3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dc3c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dc3e:	f7ff fefd 	bl	800da3c <check_fs>
 800dc42:	4603      	mov	r3, r0
 800dc44:	e000      	b.n	800dc48 <find_volume+0x160>
 800dc46:	2303      	movs	r3, #3
 800dc48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dc4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d905      	bls.n	800dc60 <find_volume+0x178>
 800dc54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc56:	3301      	adds	r3, #1
 800dc58:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc5c:	2b03      	cmp	r3, #3
 800dc5e:	d9e2      	bls.n	800dc26 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dc60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dc64:	2b04      	cmp	r3, #4
 800dc66:	d101      	bne.n	800dc6c <find_volume+0x184>
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e17e      	b.n	800df6a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dc6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d901      	bls.n	800dc78 <find_volume+0x190>
 800dc74:	230d      	movs	r3, #13
 800dc76:	e178      	b.n	800df6a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc7a:	3330      	adds	r3, #48	@ 0x30
 800dc7c:	330b      	adds	r3, #11
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fe fd18 	bl	800c6b4 <ld_word>
 800dc84:	4603      	mov	r3, r0
 800dc86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc8a:	d001      	beq.n	800dc90 <find_volume+0x1a8>
 800dc8c:	230d      	movs	r3, #13
 800dc8e:	e16c      	b.n	800df6a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc92:	3330      	adds	r3, #48	@ 0x30
 800dc94:	3316      	adds	r3, #22
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fe fd0c 	bl	800c6b4 <ld_word>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d106      	bne.n	800dcb4 <find_volume+0x1cc>
 800dca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dca8:	3330      	adds	r3, #48	@ 0x30
 800dcaa:	3324      	adds	r3, #36	@ 0x24
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fe fd19 	bl	800c6e4 <ld_dword>
 800dcb2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800dcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dcb8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dcba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcbc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800dcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dcc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc6:	789b      	ldrb	r3, [r3, #2]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d005      	beq.n	800dcd8 <find_volume+0x1f0>
 800dccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcce:	789b      	ldrb	r3, [r3, #2]
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	d001      	beq.n	800dcd8 <find_volume+0x1f0>
 800dcd4:	230d      	movs	r3, #13
 800dcd6:	e148      	b.n	800df6a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcda:	789b      	ldrb	r3, [r3, #2]
 800dcdc:	461a      	mov	r2, r3
 800dcde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dce0:	fb02 f303 	mul.w	r3, r2, r3
 800dce4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dcec:	461a      	mov	r2, r3
 800dcee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dcf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf4:	895b      	ldrh	r3, [r3, #10]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d008      	beq.n	800dd0c <find_volume+0x224>
 800dcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcfc:	895b      	ldrh	r3, [r3, #10]
 800dcfe:	461a      	mov	r2, r3
 800dd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd02:	895b      	ldrh	r3, [r3, #10]
 800dd04:	3b01      	subs	r3, #1
 800dd06:	4013      	ands	r3, r2
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d001      	beq.n	800dd10 <find_volume+0x228>
 800dd0c:	230d      	movs	r3, #13
 800dd0e:	e12c      	b.n	800df6a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd12:	3330      	adds	r3, #48	@ 0x30
 800dd14:	3311      	adds	r3, #17
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fe fccc 	bl	800c6b4 <ld_word>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	461a      	mov	r2, r3
 800dd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd26:	891b      	ldrh	r3, [r3, #8]
 800dd28:	f003 030f 	and.w	r3, r3, #15
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d001      	beq.n	800dd36 <find_volume+0x24e>
 800dd32:	230d      	movs	r3, #13
 800dd34:	e119      	b.n	800df6a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd38:	3330      	adds	r3, #48	@ 0x30
 800dd3a:	3313      	adds	r3, #19
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7fe fcb9 	bl	800c6b4 <ld_word>
 800dd42:	4603      	mov	r3, r0
 800dd44:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dd46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d106      	bne.n	800dd5a <find_volume+0x272>
 800dd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd4e:	3330      	adds	r3, #48	@ 0x30
 800dd50:	3320      	adds	r3, #32
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe fcc6 	bl	800c6e4 <ld_dword>
 800dd58:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd5c:	3330      	adds	r3, #48	@ 0x30
 800dd5e:	330e      	adds	r3, #14
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7fe fca7 	bl	800c6b4 <ld_word>
 800dd66:	4603      	mov	r3, r0
 800dd68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dd6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d101      	bne.n	800dd74 <find_volume+0x28c>
 800dd70:	230d      	movs	r3, #13
 800dd72:	e0fa      	b.n	800df6a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dd74:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800dd76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd78:	4413      	add	r3, r2
 800dd7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd7c:	8912      	ldrh	r2, [r2, #8]
 800dd7e:	0912      	lsrs	r2, r2, #4
 800dd80:	b292      	uxth	r2, r2
 800dd82:	4413      	add	r3, r2
 800dd84:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dd86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d204      	bcs.n	800dd98 <find_volume+0x2b0>
 800dd8e:	230d      	movs	r3, #13
 800dd90:	e0eb      	b.n	800df6a <find_volume+0x482>
 800dd92:	bf00      	nop
 800dd94:	20006aac 	.word	0x20006aac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dd98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd9c:	1ad3      	subs	r3, r2, r3
 800dd9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dda0:	8952      	ldrh	r2, [r2, #10]
 800dda2:	fbb3 f3f2 	udiv	r3, r3, r2
 800dda6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d101      	bne.n	800ddb2 <find_volume+0x2ca>
 800ddae:	230d      	movs	r3, #13
 800ddb0:	e0db      	b.n	800df6a <find_volume+0x482>
		fmt = FS_FAT32;
 800ddb2:	2303      	movs	r3, #3
 800ddb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddba:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d802      	bhi.n	800ddc8 <find_volume+0x2e0>
 800ddc2:	2302      	movs	r3, #2
 800ddc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddca:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d802      	bhi.n	800ddd8 <find_volume+0x2f0>
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ddd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddda:	1c9a      	adds	r2, r3, #2
 800dddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddde:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800dde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dde4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dde6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800dde8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddea:	441a      	add	r2, r3
 800ddec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddee:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ddf0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ddf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddf4:	441a      	add	r2, r3
 800ddf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddf8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800ddfa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ddfe:	2b03      	cmp	r3, #3
 800de00:	d11e      	bne.n	800de40 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800de02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de04:	3330      	adds	r3, #48	@ 0x30
 800de06:	332a      	adds	r3, #42	@ 0x2a
 800de08:	4618      	mov	r0, r3
 800de0a:	f7fe fc53 	bl	800c6b4 <ld_word>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d001      	beq.n	800de18 <find_volume+0x330>
 800de14:	230d      	movs	r3, #13
 800de16:	e0a8      	b.n	800df6a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800de18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de1a:	891b      	ldrh	r3, [r3, #8]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d001      	beq.n	800de24 <find_volume+0x33c>
 800de20:	230d      	movs	r3, #13
 800de22:	e0a2      	b.n	800df6a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800de24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de26:	3330      	adds	r3, #48	@ 0x30
 800de28:	332c      	adds	r3, #44	@ 0x2c
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fe fc5a 	bl	800c6e4 <ld_dword>
 800de30:	4602      	mov	r2, r0
 800de32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de34:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800de36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de38:	695b      	ldr	r3, [r3, #20]
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800de3e:	e01f      	b.n	800de80 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800de40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de42:	891b      	ldrh	r3, [r3, #8]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d101      	bne.n	800de4c <find_volume+0x364>
 800de48:	230d      	movs	r3, #13
 800de4a:	e08e      	b.n	800df6a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800de4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de4e:	6a1a      	ldr	r2, [r3, #32]
 800de50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de52:	441a      	add	r2, r3
 800de54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de56:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800de58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d103      	bne.n	800de68 <find_volume+0x380>
 800de60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de62:	695b      	ldr	r3, [r3, #20]
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	e00a      	b.n	800de7e <find_volume+0x396>
 800de68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de6a:	695a      	ldr	r2, [r3, #20]
 800de6c:	4613      	mov	r3, r2
 800de6e:	005b      	lsls	r3, r3, #1
 800de70:	4413      	add	r3, r2
 800de72:	085a      	lsrs	r2, r3, #1
 800de74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	f003 0301 	and.w	r3, r3, #1
 800de7c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800de7e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800de80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de82:	699a      	ldr	r2, [r3, #24]
 800de84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de86:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800de8a:	0a5b      	lsrs	r3, r3, #9
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d201      	bcs.n	800de94 <find_volume+0x3ac>
 800de90:	230d      	movs	r3, #13
 800de92:	e06a      	b.n	800df6a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800de94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de96:	f04f 32ff 	mov.w	r2, #4294967295
 800de9a:	611a      	str	r2, [r3, #16]
 800de9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de9e:	691a      	ldr	r2, [r3, #16]
 800dea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dea2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800dea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dea6:	2280      	movs	r2, #128	@ 0x80
 800dea8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800deaa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800deae:	2b03      	cmp	r3, #3
 800deb0:	d149      	bne.n	800df46 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800deb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deb4:	3330      	adds	r3, #48	@ 0x30
 800deb6:	3330      	adds	r3, #48	@ 0x30
 800deb8:	4618      	mov	r0, r3
 800deba:	f7fe fbfb 	bl	800c6b4 <ld_word>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d140      	bne.n	800df46 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dec6:	3301      	adds	r3, #1
 800dec8:	4619      	mov	r1, r3
 800deca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800decc:	f7fe fea2 	bl	800cc14 <move_window>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d137      	bne.n	800df46 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ded6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded8:	2200      	movs	r2, #0
 800deda:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dede:	3330      	adds	r3, #48	@ 0x30
 800dee0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fe fbe5 	bl	800c6b4 <ld_word>
 800deea:	4603      	mov	r3, r0
 800deec:	461a      	mov	r2, r3
 800deee:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800def2:	429a      	cmp	r2, r3
 800def4:	d127      	bne.n	800df46 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800def6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def8:	3330      	adds	r3, #48	@ 0x30
 800defa:	4618      	mov	r0, r3
 800defc:	f7fe fbf2 	bl	800c6e4 <ld_dword>
 800df00:	4603      	mov	r3, r0
 800df02:	4a1c      	ldr	r2, [pc, #112]	@ (800df74 <find_volume+0x48c>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d11e      	bne.n	800df46 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800df08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df0a:	3330      	adds	r3, #48	@ 0x30
 800df0c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800df10:	4618      	mov	r0, r3
 800df12:	f7fe fbe7 	bl	800c6e4 <ld_dword>
 800df16:	4603      	mov	r3, r0
 800df18:	4a17      	ldr	r2, [pc, #92]	@ (800df78 <find_volume+0x490>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d113      	bne.n	800df46 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800df1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df20:	3330      	adds	r3, #48	@ 0x30
 800df22:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800df26:	4618      	mov	r0, r3
 800df28:	f7fe fbdc 	bl	800c6e4 <ld_dword>
 800df2c:	4602      	mov	r2, r0
 800df2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df30:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800df32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df34:	3330      	adds	r3, #48	@ 0x30
 800df36:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fe fbd2 	bl	800c6e4 <ld_dword>
 800df40:	4602      	mov	r2, r0
 800df42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df44:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800df46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df48:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800df4c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800df4e:	4b0b      	ldr	r3, [pc, #44]	@ (800df7c <find_volume+0x494>)
 800df50:	881b      	ldrh	r3, [r3, #0]
 800df52:	3301      	adds	r3, #1
 800df54:	b29a      	uxth	r2, r3
 800df56:	4b09      	ldr	r3, [pc, #36]	@ (800df7c <find_volume+0x494>)
 800df58:	801a      	strh	r2, [r3, #0]
 800df5a:	4b08      	ldr	r3, [pc, #32]	@ (800df7c <find_volume+0x494>)
 800df5c:	881a      	ldrh	r2, [r3, #0]
 800df5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df60:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800df62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800df64:	f7fe fdee 	bl	800cb44 <clear_lock>
#endif
	return FR_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3758      	adds	r7, #88	@ 0x58
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	41615252 	.word	0x41615252
 800df78:	61417272 	.word	0x61417272
 800df7c:	20006ab0 	.word	0x20006ab0

0800df80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800df8a:	2309      	movs	r3, #9
 800df8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d01c      	beq.n	800dfce <validate+0x4e>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d018      	beq.n	800dfce <validate+0x4e>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d013      	beq.n	800dfce <validate+0x4e>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	889a      	ldrh	r2, [r3, #4]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	88db      	ldrh	r3, [r3, #6]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d10c      	bne.n	800dfce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	785b      	ldrb	r3, [r3, #1]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fe fadc 	bl	800c578 <disk_status>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	f003 0301 	and.w	r3, r3, #1
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d101      	bne.n	800dfce <validate+0x4e>
			res = FR_OK;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dfce:	7bfb      	ldrb	r3, [r7, #15]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d102      	bne.n	800dfda <validate+0x5a>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	e000      	b.n	800dfdc <validate+0x5c>
 800dfda:	2300      	movs	r3, #0
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	6013      	str	r3, [r2, #0]
	return res;
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
	...

0800dfec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b088      	sub	sp, #32
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	4613      	mov	r3, r2
 800dff8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dffe:	f107 0310 	add.w	r3, r7, #16
 800e002:	4618      	mov	r0, r3
 800e004:	f7ff fcd5 	bl	800d9b2 <get_ldnumber>
 800e008:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	da01      	bge.n	800e014 <f_mount+0x28>
 800e010:	230b      	movs	r3, #11
 800e012:	e02b      	b.n	800e06c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e014:	4a17      	ldr	r2, [pc, #92]	@ (800e074 <f_mount+0x88>)
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e01c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d005      	beq.n	800e030 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e024:	69b8      	ldr	r0, [r7, #24]
 800e026:	f7fe fd8d 	bl	800cb44 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	2200      	movs	r2, #0
 800e02e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d002      	beq.n	800e03c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2200      	movs	r2, #0
 800e03a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	490d      	ldr	r1, [pc, #52]	@ (800e074 <f_mount+0x88>)
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d002      	beq.n	800e052 <f_mount+0x66>
 800e04c:	79fb      	ldrb	r3, [r7, #7]
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d001      	beq.n	800e056 <f_mount+0x6a>
 800e052:	2300      	movs	r3, #0
 800e054:	e00a      	b.n	800e06c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e056:	f107 010c 	add.w	r1, r7, #12
 800e05a:	f107 0308 	add.w	r3, r7, #8
 800e05e:	2200      	movs	r2, #0
 800e060:	4618      	mov	r0, r3
 800e062:	f7ff fd41 	bl	800dae8 <find_volume>
 800e066:	4603      	mov	r3, r0
 800e068:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3720      	adds	r7, #32
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	20006aac 	.word	0x20006aac

0800e078 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b098      	sub	sp, #96	@ 0x60
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	4613      	mov	r3, r2
 800e084:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d101      	bne.n	800e090 <f_open+0x18>
 800e08c:	2309      	movs	r3, #9
 800e08e:	e1a9      	b.n	800e3e4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e090:	79fb      	ldrb	r3, [r7, #7]
 800e092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e096:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e098:	79fa      	ldrb	r2, [r7, #7]
 800e09a:	f107 0110 	add.w	r1, r7, #16
 800e09e:	f107 0308 	add.w	r3, r7, #8
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7ff fd20 	bl	800dae8 <find_volume>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e0ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f040 818d 	bne.w	800e3d2 <f_open+0x35a>
		dj.obj.fs = fs;
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e0bc:	68ba      	ldr	r2, [r7, #8]
 800e0be:	f107 0314 	add.w	r3, r7, #20
 800e0c2:	4611      	mov	r1, r2
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7ff fc03 	bl	800d8d0 <follow_path>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e0d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d118      	bne.n	800e10a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e0d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e0dc:	b25b      	sxtb	r3, r3
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	da03      	bge.n	800e0ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800e0e2:	2306      	movs	r3, #6
 800e0e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e0e8:	e00f      	b.n	800e10a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e0ea:	79fb      	ldrb	r3, [r7, #7]
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	bf8c      	ite	hi
 800e0f0:	2301      	movhi	r3, #1
 800e0f2:	2300      	movls	r3, #0
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	f107 0314 	add.w	r3, r7, #20
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fe fbd8 	bl	800c8b4 <chk_lock>
 800e104:	4603      	mov	r3, r0
 800e106:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e10a:	79fb      	ldrb	r3, [r7, #7]
 800e10c:	f003 031c 	and.w	r3, r3, #28
 800e110:	2b00      	cmp	r3, #0
 800e112:	d07f      	beq.n	800e214 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e114:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d017      	beq.n	800e14c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e11c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e120:	2b04      	cmp	r3, #4
 800e122:	d10e      	bne.n	800e142 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e124:	f7fe fc22 	bl	800c96c <enq_lock>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d006      	beq.n	800e13c <f_open+0xc4>
 800e12e:	f107 0314 	add.w	r3, r7, #20
 800e132:	4618      	mov	r0, r3
 800e134:	f7ff fb06 	bl	800d744 <dir_register>
 800e138:	4603      	mov	r3, r0
 800e13a:	e000      	b.n	800e13e <f_open+0xc6>
 800e13c:	2312      	movs	r3, #18
 800e13e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e142:	79fb      	ldrb	r3, [r7, #7]
 800e144:	f043 0308 	orr.w	r3, r3, #8
 800e148:	71fb      	strb	r3, [r7, #7]
 800e14a:	e010      	b.n	800e16e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e14c:	7ebb      	ldrb	r3, [r7, #26]
 800e14e:	f003 0311 	and.w	r3, r3, #17
 800e152:	2b00      	cmp	r3, #0
 800e154:	d003      	beq.n	800e15e <f_open+0xe6>
					res = FR_DENIED;
 800e156:	2307      	movs	r3, #7
 800e158:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e15c:	e007      	b.n	800e16e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e15e:	79fb      	ldrb	r3, [r7, #7]
 800e160:	f003 0304 	and.w	r3, r3, #4
 800e164:	2b00      	cmp	r3, #0
 800e166:	d002      	beq.n	800e16e <f_open+0xf6>
 800e168:	2308      	movs	r3, #8
 800e16a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e16e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e172:	2b00      	cmp	r3, #0
 800e174:	d168      	bne.n	800e248 <f_open+0x1d0>
 800e176:	79fb      	ldrb	r3, [r7, #7]
 800e178:	f003 0308 	and.w	r3, r3, #8
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d063      	beq.n	800e248 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e180:	f7fd fcba 	bl	800baf8 <get_fattime>
 800e184:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e188:	330e      	adds	r3, #14
 800e18a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7fe fae7 	bl	800c760 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e194:	3316      	adds	r3, #22
 800e196:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fe fae1 	bl	800c760 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e19e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1a0:	330b      	adds	r3, #11
 800e1a2:	2220      	movs	r2, #32
 800e1a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1aa:	4611      	mov	r1, r2
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7ff fa35 	bl	800d61c <ld_clust>
 800e1b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7ff fa4d 	bl	800d65a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1c2:	331c      	adds	r3, #28
 800e1c4:	2100      	movs	r1, #0
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe faca 	bl	800c760 <st_dword>
					fs->wflag = 1;
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e1d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d037      	beq.n	800e248 <f_open+0x1d0>
						dw = fs->winsect;
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1dc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e1de:	f107 0314 	add.w	r3, r7, #20
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7fe ff60 	bl	800d0ac <remove_chain>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e1f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d126      	bne.n	800e248 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7fe fd08 	bl	800cc14 <move_window>
 800e204:	4603      	mov	r3, r0
 800e206:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e20e:	3a01      	subs	r2, #1
 800e210:	60da      	str	r2, [r3, #12]
 800e212:	e019      	b.n	800e248 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e214:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d115      	bne.n	800e248 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e21c:	7ebb      	ldrb	r3, [r7, #26]
 800e21e:	f003 0310 	and.w	r3, r3, #16
 800e222:	2b00      	cmp	r3, #0
 800e224:	d003      	beq.n	800e22e <f_open+0x1b6>
					res = FR_NO_FILE;
 800e226:	2304      	movs	r3, #4
 800e228:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e22c:	e00c      	b.n	800e248 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e22e:	79fb      	ldrb	r3, [r7, #7]
 800e230:	f003 0302 	and.w	r3, r3, #2
 800e234:	2b00      	cmp	r3, #0
 800e236:	d007      	beq.n	800e248 <f_open+0x1d0>
 800e238:	7ebb      	ldrb	r3, [r7, #26]
 800e23a:	f003 0301 	and.w	r3, r3, #1
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d002      	beq.n	800e248 <f_open+0x1d0>
						res = FR_DENIED;
 800e242:	2307      	movs	r3, #7
 800e244:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e248:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d126      	bne.n	800e29e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e250:	79fb      	ldrb	r3, [r7, #7]
 800e252:	f003 0308 	and.w	r3, r3, #8
 800e256:	2b00      	cmp	r3, #0
 800e258:	d003      	beq.n	800e262 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e25a:	79fb      	ldrb	r3, [r7, #7]
 800e25c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e260:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e26a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e270:	79fb      	ldrb	r3, [r7, #7]
 800e272:	2b01      	cmp	r3, #1
 800e274:	bf8c      	ite	hi
 800e276:	2301      	movhi	r3, #1
 800e278:	2300      	movls	r3, #0
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	461a      	mov	r2, r3
 800e27e:	f107 0314 	add.w	r3, r7, #20
 800e282:	4611      	mov	r1, r2
 800e284:	4618      	mov	r0, r3
 800e286:	f7fe fb93 	bl	800c9b0 <inc_lock>
 800e28a:	4602      	mov	r2, r0
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	691b      	ldr	r3, [r3, #16]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d102      	bne.n	800e29e <f_open+0x226>
 800e298:	2302      	movs	r3, #2
 800e29a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e29e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f040 8095 	bne.w	800e3d2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2ac:	4611      	mov	r1, r2
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7ff f9b4 	bl	800d61c <ld_clust>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e2ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2bc:	331c      	adds	r3, #28
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7fe fa10 	bl	800c6e4 <ld_dword>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e2d0:	693a      	ldr	r2, [r7, #16]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	88da      	ldrh	r2, [r3, #6]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	79fa      	ldrb	r2, [r7, #7]
 800e2e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	3330      	adds	r3, #48	@ 0x30
 800e2fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e2fe:	2100      	movs	r1, #0
 800e300:	4618      	mov	r0, r3
 800e302:	f7fe fa7a 	bl	800c7fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e306:	79fb      	ldrb	r3, [r7, #7]
 800e308:	f003 0320 	and.w	r3, r3, #32
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d060      	beq.n	800e3d2 <f_open+0x35a>
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d05c      	beq.n	800e3d2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	68da      	ldr	r2, [r3, #12]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	895b      	ldrh	r3, [r3, #10]
 800e324:	025b      	lsls	r3, r3, #9
 800e326:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	657b      	str	r3, [r7, #84]	@ 0x54
 800e334:	e016      	b.n	800e364 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7fe fd25 	bl	800cd8a <get_fat>
 800e340:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e344:	2b01      	cmp	r3, #1
 800e346:	d802      	bhi.n	800e34e <f_open+0x2d6>
 800e348:	2302      	movs	r3, #2
 800e34a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e34e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e354:	d102      	bne.n	800e35c <f_open+0x2e4>
 800e356:	2301      	movs	r3, #1
 800e358:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e35c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e35e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e360:	1ad3      	subs	r3, r2, r3
 800e362:	657b      	str	r3, [r7, #84]	@ 0x54
 800e364:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d103      	bne.n	800e374 <f_open+0x2fc>
 800e36c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e36e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e370:	429a      	cmp	r2, r3
 800e372:	d8e0      	bhi.n	800e336 <f_open+0x2be>
				}
				fp->clust = clst;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e378:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e37a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d127      	bne.n	800e3d2 <f_open+0x35a>
 800e382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d022      	beq.n	800e3d2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e390:	4618      	mov	r0, r3
 800e392:	f7fe fcdb 	bl	800cd4c <clust2sect>
 800e396:	6478      	str	r0, [r7, #68]	@ 0x44
 800e398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d103      	bne.n	800e3a6 <f_open+0x32e>
						res = FR_INT_ERR;
 800e39e:	2302      	movs	r3, #2
 800e3a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e3a4:	e015      	b.n	800e3d2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e3a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3a8:	0a5a      	lsrs	r2, r3, #9
 800e3aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3ac:	441a      	add	r2, r3
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	7858      	ldrb	r0, [r3, #1]
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	6a1a      	ldr	r2, [r3, #32]
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	f7fe f919 	bl	800c5f8 <disk_read>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d002      	beq.n	800e3d2 <f_open+0x35a>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e3d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <f_open+0x368>
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e3e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3760      	adds	r7, #96	@ 0x60
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b08c      	sub	sp, #48	@ 0x30
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
 800e3f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	2200      	movs	r2, #0
 800e402:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f107 0210 	add.w	r2, r7, #16
 800e40a:	4611      	mov	r1, r2
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7ff fdb7 	bl	800df80 <validate>
 800e412:	4603      	mov	r3, r0
 800e414:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e418:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d107      	bne.n	800e430 <f_write+0x44>
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	7d5b      	ldrb	r3, [r3, #21]
 800e424:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e428:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d002      	beq.n	800e436 <f_write+0x4a>
 800e430:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e434:	e14b      	b.n	800e6ce <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	7d1b      	ldrb	r3, [r3, #20]
 800e43a:	f003 0302 	and.w	r3, r3, #2
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d101      	bne.n	800e446 <f_write+0x5a>
 800e442:	2307      	movs	r3, #7
 800e444:	e143      	b.n	800e6ce <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	699a      	ldr	r2, [r3, #24]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	441a      	add	r2, r3
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	699b      	ldr	r3, [r3, #24]
 800e452:	429a      	cmp	r2, r3
 800e454:	f080 812d 	bcs.w	800e6b2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	699b      	ldr	r3, [r3, #24]
 800e45c:	43db      	mvns	r3, r3
 800e45e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e460:	e127      	b.n	800e6b2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	699b      	ldr	r3, [r3, #24]
 800e466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f040 80e3 	bne.w	800e636 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	699b      	ldr	r3, [r3, #24]
 800e474:	0a5b      	lsrs	r3, r3, #9
 800e476:	693a      	ldr	r2, [r7, #16]
 800e478:	8952      	ldrh	r2, [r2, #10]
 800e47a:	3a01      	subs	r2, #1
 800e47c:	4013      	ands	r3, r2
 800e47e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d143      	bne.n	800e50e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	699b      	ldr	r3, [r3, #24]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d10c      	bne.n	800e4a8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e496:	2b00      	cmp	r3, #0
 800e498:	d11a      	bne.n	800e4d0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2100      	movs	r1, #0
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fe fe69 	bl	800d176 <create_chain>
 800e4a4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e4a6:	e013      	b.n	800e4d0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d007      	beq.n	800e4c0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	699b      	ldr	r3, [r3, #24]
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f7fe fef5 	bl	800d2a6 <clmt_clust>
 800e4bc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e4be:	e007      	b.n	800e4d0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e4c0:	68fa      	ldr	r2, [r7, #12]
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	69db      	ldr	r3, [r3, #28]
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	4610      	mov	r0, r2
 800e4ca:	f7fe fe54 	bl	800d176 <create_chain>
 800e4ce:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	f000 80f2 	beq.w	800e6bc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d104      	bne.n	800e4e8 <f_write+0xfc>
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	755a      	strb	r2, [r3, #21]
 800e4e4:	2302      	movs	r3, #2
 800e4e6:	e0f2      	b.n	800e6ce <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ee:	d104      	bne.n	800e4fa <f_write+0x10e>
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	755a      	strb	r2, [r3, #21]
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e0e9      	b.n	800e6ce <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e4fe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d102      	bne.n	800e50e <f_write+0x122>
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e50c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	7d1b      	ldrb	r3, [r3, #20]
 800e512:	b25b      	sxtb	r3, r3
 800e514:	2b00      	cmp	r3, #0
 800e516:	da18      	bge.n	800e54a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	7858      	ldrb	r0, [r3, #1]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	6a1a      	ldr	r2, [r3, #32]
 800e526:	2301      	movs	r3, #1
 800e528:	f7fe f886 	bl	800c638 <disk_write>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d004      	beq.n	800e53c <f_write+0x150>
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2201      	movs	r2, #1
 800e536:	755a      	strb	r2, [r3, #21]
 800e538:	2301      	movs	r3, #1
 800e53a:	e0c8      	b.n	800e6ce <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	7d1b      	ldrb	r3, [r3, #20]
 800e540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e544:	b2da      	uxtb	r2, r3
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e54a:	693a      	ldr	r2, [r7, #16]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	69db      	ldr	r3, [r3, #28]
 800e550:	4619      	mov	r1, r3
 800e552:	4610      	mov	r0, r2
 800e554:	f7fe fbfa 	bl	800cd4c <clust2sect>
 800e558:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d104      	bne.n	800e56a <f_write+0x17e>
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2202      	movs	r2, #2
 800e564:	755a      	strb	r2, [r3, #21]
 800e566:	2302      	movs	r3, #2
 800e568:	e0b1      	b.n	800e6ce <f_write+0x2e2>
			sect += csect;
 800e56a:	697a      	ldr	r2, [r7, #20]
 800e56c:	69bb      	ldr	r3, [r7, #24]
 800e56e:	4413      	add	r3, r2
 800e570:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	0a5b      	lsrs	r3, r3, #9
 800e576:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e578:	6a3b      	ldr	r3, [r7, #32]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d03c      	beq.n	800e5f8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e57e:	69ba      	ldr	r2, [r7, #24]
 800e580:	6a3b      	ldr	r3, [r7, #32]
 800e582:	4413      	add	r3, r2
 800e584:	693a      	ldr	r2, [r7, #16]
 800e586:	8952      	ldrh	r2, [r2, #10]
 800e588:	4293      	cmp	r3, r2
 800e58a:	d905      	bls.n	800e598 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	895b      	ldrh	r3, [r3, #10]
 800e590:	461a      	mov	r2, r3
 800e592:	69bb      	ldr	r3, [r7, #24]
 800e594:	1ad3      	subs	r3, r2, r3
 800e596:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	7858      	ldrb	r0, [r3, #1]
 800e59c:	6a3b      	ldr	r3, [r7, #32]
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	69f9      	ldr	r1, [r7, #28]
 800e5a2:	f7fe f849 	bl	800c638 <disk_write>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d004      	beq.n	800e5b6 <f_write+0x1ca>
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	755a      	strb	r2, [r3, #21]
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e08b      	b.n	800e6ce <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6a1a      	ldr	r2, [r3, #32]
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	1ad3      	subs	r3, r2, r3
 800e5be:	6a3a      	ldr	r2, [r7, #32]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d915      	bls.n	800e5f0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	6a1a      	ldr	r2, [r3, #32]
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	025b      	lsls	r3, r3, #9
 800e5d4:	69fa      	ldr	r2, [r7, #28]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5dc:	4619      	mov	r1, r3
 800e5de:	f7fe f8eb 	bl	800c7b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	7d1b      	ldrb	r3, [r3, #20]
 800e5e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5ea:	b2da      	uxtb	r2, r3
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e5f0:	6a3b      	ldr	r3, [r7, #32]
 800e5f2:	025b      	lsls	r3, r3, #9
 800e5f4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e5f6:	e03f      	b.n	800e678 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6a1b      	ldr	r3, [r3, #32]
 800e5fc:	697a      	ldr	r2, [r7, #20]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d016      	beq.n	800e630 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	699a      	ldr	r2, [r3, #24]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d210      	bcs.n	800e630 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	7858      	ldrb	r0, [r3, #1]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e618:	2301      	movs	r3, #1
 800e61a:	697a      	ldr	r2, [r7, #20]
 800e61c:	f7fd ffec 	bl	800c5f8 <disk_read>
 800e620:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e622:	2b00      	cmp	r3, #0
 800e624:	d004      	beq.n	800e630 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2201      	movs	r2, #1
 800e62a:	755a      	strb	r2, [r3, #21]
 800e62c:	2301      	movs	r3, #1
 800e62e:	e04e      	b.n	800e6ce <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	697a      	ldr	r2, [r7, #20]
 800e634:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	699b      	ldr	r3, [r3, #24]
 800e63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e63e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e642:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d901      	bls.n	800e650 <f_write+0x264>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	699b      	ldr	r3, [r3, #24]
 800e65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e65e:	4413      	add	r3, r2
 800e660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e662:	69f9      	ldr	r1, [r7, #28]
 800e664:	4618      	mov	r0, r3
 800e666:	f7fe f8a7 	bl	800c7b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	7d1b      	ldrb	r3, [r3, #20]
 800e66e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e672:	b2da      	uxtb	r2, r3
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e678:	69fa      	ldr	r2, [r7, #28]
 800e67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67c:	4413      	add	r3, r2
 800e67e:	61fb      	str	r3, [r7, #28]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	699a      	ldr	r2, [r3, #24]
 800e684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e686:	441a      	add	r2, r3
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	619a      	str	r2, [r3, #24]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	68da      	ldr	r2, [r3, #12]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	699b      	ldr	r3, [r3, #24]
 800e694:	429a      	cmp	r2, r3
 800e696:	bf38      	it	cc
 800e698:	461a      	movcc	r2, r3
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	60da      	str	r2, [r3, #12]
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a4:	441a      	add	r2, r3
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	601a      	str	r2, [r3, #0]
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ae:	1ad3      	subs	r3, r2, r3
 800e6b0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f47f aed4 	bne.w	800e462 <f_write+0x76>
 800e6ba:	e000      	b.n	800e6be <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e6bc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	7d1b      	ldrb	r3, [r3, #20]
 800e6c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6c6:	b2da      	uxtb	r2, r3
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e6cc:	2300      	movs	r3, #0
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3730      	adds	r7, #48	@ 0x30
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b086      	sub	sp, #24
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f107 0208 	add.w	r2, r7, #8
 800e6e4:	4611      	mov	r1, r2
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7ff fc4a 	bl	800df80 <validate>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e6f0:	7dfb      	ldrb	r3, [r7, #23]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d168      	bne.n	800e7c8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	7d1b      	ldrb	r3, [r3, #20]
 800e6fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d062      	beq.n	800e7c8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	7d1b      	ldrb	r3, [r3, #20]
 800e706:	b25b      	sxtb	r3, r3
 800e708:	2b00      	cmp	r3, #0
 800e70a:	da15      	bge.n	800e738 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	7858      	ldrb	r0, [r3, #1]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6a1a      	ldr	r2, [r3, #32]
 800e71a:	2301      	movs	r3, #1
 800e71c:	f7fd ff8c 	bl	800c638 <disk_write>
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <f_sync+0x54>
 800e726:	2301      	movs	r3, #1
 800e728:	e04f      	b.n	800e7ca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	7d1b      	ldrb	r3, [r3, #20]
 800e72e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e732:	b2da      	uxtb	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e738:	f7fd f9de 	bl	800baf8 <get_fattime>
 800e73c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e744:	4619      	mov	r1, r3
 800e746:	4610      	mov	r0, r2
 800e748:	f7fe fa64 	bl	800cc14 <move_window>
 800e74c:	4603      	mov	r3, r0
 800e74e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e750:	7dfb      	ldrb	r3, [r7, #23]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d138      	bne.n	800e7c8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e75a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	330b      	adds	r3, #11
 800e760:	781a      	ldrb	r2, [r3, #0]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	330b      	adds	r3, #11
 800e766:	f042 0220 	orr.w	r2, r2, #32
 800e76a:	b2d2      	uxtb	r2, r2
 800e76c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6818      	ldr	r0, [r3, #0]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	689b      	ldr	r3, [r3, #8]
 800e776:	461a      	mov	r2, r3
 800e778:	68f9      	ldr	r1, [r7, #12]
 800e77a:	f7fe ff6e 	bl	800d65a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f103 021c 	add.w	r2, r3, #28
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	4619      	mov	r1, r3
 800e78a:	4610      	mov	r0, r2
 800e78c:	f7fd ffe8 	bl	800c760 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	3316      	adds	r3, #22
 800e794:	6939      	ldr	r1, [r7, #16]
 800e796:	4618      	mov	r0, r3
 800e798:	f7fd ffe2 	bl	800c760 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	3312      	adds	r3, #18
 800e7a0:	2100      	movs	r1, #0
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7fd ffc1 	bl	800c72a <st_word>
					fs->wflag = 1;
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fe fa5d 	bl	800cc70 <sync_fs>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	7d1b      	ldrb	r3, [r3, #20]
 800e7be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7c2:	b2da      	uxtb	r2, r3
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3718      	adds	r7, #24
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}

0800e7d2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e7d2:	b580      	push	{r7, lr}
 800e7d4:	b084      	sub	sp, #16
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7ff ff7b 	bl	800e6d6 <f_sync>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e7e4:	7bfb      	ldrb	r3, [r7, #15]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d118      	bne.n	800e81c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f107 0208 	add.w	r2, r7, #8
 800e7f0:	4611      	mov	r1, r2
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7ff fbc4 	bl	800df80 <validate>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e7fc:	7bfb      	ldrb	r3, [r7, #15]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d10c      	bne.n	800e81c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	691b      	ldr	r3, [r3, #16]
 800e806:	4618      	mov	r0, r3
 800e808:	f7fe f960 	bl	800cacc <dec_lock>
 800e80c:	4603      	mov	r3, r0
 800e80e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e810:	7bfb      	ldrb	r3, [r7, #15]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d102      	bne.n	800e81c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b084      	sub	sp, #16
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
 800e82e:	460b      	mov	r3, r1
 800e830:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800e832:	78fb      	ldrb	r3, [r7, #3]
 800e834:	2b0a      	cmp	r3, #10
 800e836:	d103      	bne.n	800e840 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800e838:	210d      	movs	r1, #13
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f7ff fff3 	bl	800e826 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	db25      	blt.n	800e898 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	60fa      	str	r2, [r7, #12]
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	4413      	add	r3, r2
 800e856:	78fa      	ldrb	r2, [r7, #3]
 800e858:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2b3c      	cmp	r3, #60	@ 0x3c
 800e85e:	dd12      	ble.n	800e886 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6818      	ldr	r0, [r3, #0]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f103 010c 	add.w	r1, r3, #12
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	f107 0308 	add.w	r3, r7, #8
 800e870:	f7ff fdbc 	bl	800e3ec <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d101      	bne.n	800e880 <putc_bfd+0x5a>
 800e87c:	2300      	movs	r3, #0
 800e87e:	e001      	b.n	800e884 <putc_bfd+0x5e>
 800e880:	f04f 33ff 	mov.w	r3, #4294967295
 800e884:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	1c5a      	adds	r2, r3, #1
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	609a      	str	r2, [r3, #8]
 800e896:	e000      	b.n	800e89a <putc_bfd+0x74>
	if (i < 0) return;
 800e898:	bf00      	nop
}
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	db16      	blt.n	800e8de <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6818      	ldr	r0, [r3, #0]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f103 010c 	add.w	r1, r3, #12
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	461a      	mov	r2, r3
 800e8c0:	f107 030c 	add.w	r3, r7, #12
 800e8c4:	f7ff fd92 	bl	800e3ec <f_write>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d107      	bne.n	800e8de <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	68fa      	ldr	r2, [r7, #12]
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d102      	bne.n	800e8de <putc_flush+0x3e>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	689b      	ldr	r3, [r3, #8]
 800e8dc:	e001      	b.n	800e8e2 <putc_flush+0x42>
	return EOF;
 800e8de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800e8ea:	b480      	push	{r7}
 800e8ec:	b083      	sub	sp, #12
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	683a      	ldr	r2, [r7, #0]
 800e8f8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	605a      	str	r2, [r3, #4]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685a      	ldr	r2, [r3, #4]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	609a      	str	r2, [r3, #8]
}
 800e908:	bf00      	nop
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800e914:	b40e      	push	{r1, r2, r3}
 800e916:	b580      	push	{r7, lr}
 800e918:	b0a7      	sub	sp, #156	@ 0x9c
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800e91e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e922:	6879      	ldr	r1, [r7, #4]
 800e924:	4618      	mov	r0, r3
 800e926:	f7ff ffe0 	bl	800e8ea <putc_init>

	va_start(arp, fmt);
 800e92a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800e92e:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 800e930:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e934:	1c5a      	adds	r2, r3, #1
 800e936:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 800e940:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800e944:	2b00      	cmp	r3, #0
 800e946:	f000 81f2 	beq.w	800ed2e <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800e94a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800e94e:	2b25      	cmp	r3, #37	@ 0x25
 800e950:	d008      	beq.n	800e964 <f_printf+0x50>
			putc_bfd(&pb, c);
 800e952:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800e956:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e95a:	4611      	mov	r1, r2
 800e95c:	4618      	mov	r0, r3
 800e95e:	f7ff ff62 	bl	800e826 <putc_bfd>
			continue;
 800e962:	e1e3      	b.n	800ed2c <f_printf+0x418>
		}
		w = f = 0;
 800e964:	2300      	movs	r3, #0
 800e966:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e96a:	2300      	movs	r3, #0
 800e96c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 800e970:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e974:	1c5a      	adds	r2, r3, #1
 800e976:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800e980:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800e984:	2b30      	cmp	r3, #48	@ 0x30
 800e986:	d10b      	bne.n	800e9a0 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800e988:	2301      	movs	r3, #1
 800e98a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e98e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e992:	1c5a      	adds	r2, r3, #1
 800e994:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800e99e:	e024      	b.n	800e9ea <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800e9a0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800e9a4:	2b2d      	cmp	r3, #45	@ 0x2d
 800e9a6:	d120      	bne.n	800e9ea <f_printf+0xd6>
				f = 2; c = *fmt++;
 800e9a8:	2302      	movs	r3, #2
 800e9aa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e9ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9b2:	1c5a      	adds	r2, r3, #1
 800e9b4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800e9be:	e014      	b.n	800e9ea <f_printf+0xd6>
			w = w * 10 + c - '0';
 800e9c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	009b      	lsls	r3, r3, #2
 800e9c8:	4413      	add	r3, r2
 800e9ca:	005b      	lsls	r3, r3, #1
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800e9d2:	4413      	add	r3, r2
 800e9d4:	3b30      	subs	r3, #48	@ 0x30
 800e9d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 800e9da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9de:	1c5a      	adds	r2, r3, #1
 800e9e0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 800e9ea:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800e9ee:	2b2f      	cmp	r3, #47	@ 0x2f
 800e9f0:	d903      	bls.n	800e9fa <f_printf+0xe6>
 800e9f2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800e9f6:	2b39      	cmp	r3, #57	@ 0x39
 800e9f8:	d9e2      	bls.n	800e9c0 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800e9fa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800e9fe:	2b6c      	cmp	r3, #108	@ 0x6c
 800ea00:	d003      	beq.n	800ea0a <f_printf+0xf6>
 800ea02:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ea06:	2b4c      	cmp	r3, #76	@ 0x4c
 800ea08:	d10d      	bne.n	800ea26 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800ea0a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ea0e:	f043 0304 	orr.w	r3, r3, #4
 800ea12:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800ea16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea1a:	1c5a      	adds	r2, r3, #1
 800ea1c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 800ea26:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f000 8181 	beq.w	800ed32 <f_printf+0x41e>
		d = c;
 800ea30:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ea34:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 800ea38:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ea3c:	2b60      	cmp	r3, #96	@ 0x60
 800ea3e:	d908      	bls.n	800ea52 <f_printf+0x13e>
 800ea40:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ea44:	2b7a      	cmp	r3, #122	@ 0x7a
 800ea46:	d804      	bhi.n	800ea52 <f_printf+0x13e>
 800ea48:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ea4c:	3b20      	subs	r3, #32
 800ea4e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800ea52:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ea56:	3b42      	subs	r3, #66	@ 0x42
 800ea58:	2b16      	cmp	r3, #22
 800ea5a:	f200 8098 	bhi.w	800eb8e <f_printf+0x27a>
 800ea5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ea64 <f_printf+0x150>)
 800ea60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea64:	0800eb6f 	.word	0x0800eb6f
 800ea68:	0800eb57 	.word	0x0800eb57
 800ea6c:	0800eb7f 	.word	0x0800eb7f
 800ea70:	0800eb8f 	.word	0x0800eb8f
 800ea74:	0800eb8f 	.word	0x0800eb8f
 800ea78:	0800eb8f 	.word	0x0800eb8f
 800ea7c:	0800eb8f 	.word	0x0800eb8f
 800ea80:	0800eb8f 	.word	0x0800eb8f
 800ea84:	0800eb8f 	.word	0x0800eb8f
 800ea88:	0800eb8f 	.word	0x0800eb8f
 800ea8c:	0800eb8f 	.word	0x0800eb8f
 800ea90:	0800eb8f 	.word	0x0800eb8f
 800ea94:	0800eb8f 	.word	0x0800eb8f
 800ea98:	0800eb77 	.word	0x0800eb77
 800ea9c:	0800eb8f 	.word	0x0800eb8f
 800eaa0:	0800eb8f 	.word	0x0800eb8f
 800eaa4:	0800eb8f 	.word	0x0800eb8f
 800eaa8:	0800eac1 	.word	0x0800eac1
 800eaac:	0800eb8f 	.word	0x0800eb8f
 800eab0:	0800eb7f 	.word	0x0800eb7f
 800eab4:	0800eb8f 	.word	0x0800eb8f
 800eab8:	0800eb8f 	.word	0x0800eb8f
 800eabc:	0800eb87 	.word	0x0800eb87
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800eac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eac2:	1d1a      	adds	r2, r3, #4
 800eac4:	67ba      	str	r2, [r7, #120]	@ 0x78
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 800eaca:	2300      	movs	r3, #0
 800eacc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ead0:	e004      	b.n	800eadc <f_printf+0x1c8>
 800ead2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ead6:	3301      	adds	r3, #1
 800ead8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800eadc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800eade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eae2:	4413      	add	r3, r2
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d1f3      	bne.n	800ead2 <f_printf+0x1be>
			if (!(f & 2)) {
 800eaea:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800eaee:	f003 0302 	and.w	r3, r3, #2
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d11a      	bne.n	800eb2c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800eaf6:	e005      	b.n	800eb04 <f_printf+0x1f0>
 800eaf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eafc:	2120      	movs	r1, #32
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7ff fe91 	bl	800e826 <putc_bfd>
 800eb04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eb08:	1c5a      	adds	r2, r3, #1
 800eb0a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800eb0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d8f0      	bhi.n	800eaf8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800eb16:	e009      	b.n	800eb2c <f_printf+0x218>
 800eb18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800eb1a:	1c5a      	adds	r2, r3, #1
 800eb1c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800eb1e:	781a      	ldrb	r2, [r3, #0]
 800eb20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eb24:	4611      	mov	r1, r2
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7ff fe7d 	bl	800e826 <putc_bfd>
 800eb2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d1f1      	bne.n	800eb18 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800eb34:	e005      	b.n	800eb42 <f_printf+0x22e>
 800eb36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eb3a:	2120      	movs	r1, #32
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7ff fe72 	bl	800e826 <putc_bfd>
 800eb42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eb46:	1c5a      	adds	r2, r3, #1
 800eb48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800eb4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d8f0      	bhi.n	800eb36 <f_printf+0x222>
			continue;
 800eb54:	e0ea      	b.n	800ed2c <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800eb56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eb58:	1d1a      	adds	r2, r3, #4
 800eb5a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	b2da      	uxtb	r2, r3
 800eb60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eb64:	4611      	mov	r1, r2
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff fe5d 	bl	800e826 <putc_bfd>
 800eb6c:	e0de      	b.n	800ed2c <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800eb6e:	2302      	movs	r3, #2
 800eb70:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800eb74:	e014      	b.n	800eba0 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800eb76:	2308      	movs	r3, #8
 800eb78:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800eb7c:	e010      	b.n	800eba0 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800eb7e:	230a      	movs	r3, #10
 800eb80:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800eb84:	e00c      	b.n	800eba0 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800eb86:	2310      	movs	r3, #16
 800eb88:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800eb8c:	e008      	b.n	800eba0 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800eb8e:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800eb92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eb96:	4611      	mov	r1, r2
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7ff fe44 	bl	800e826 <putc_bfd>
 800eb9e:	e0c5      	b.n	800ed2c <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800eba0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800eba4:	f003 0304 	and.w	r3, r3, #4
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d004      	beq.n	800ebb6 <f_printf+0x2a2>
 800ebac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ebae:	1d1a      	adds	r2, r3, #4
 800ebb0:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	e00c      	b.n	800ebd0 <f_printf+0x2bc>
 800ebb6:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ebba:	2b44      	cmp	r3, #68	@ 0x44
 800ebbc:	d104      	bne.n	800ebc8 <f_printf+0x2b4>
 800ebbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ebc0:	1d1a      	adds	r2, r3, #4
 800ebc2:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	e003      	b.n	800ebd0 <f_printf+0x2bc>
 800ebc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ebca:	1d1a      	adds	r2, r3, #4
 800ebcc:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800ebd4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ebd8:	2b44      	cmp	r3, #68	@ 0x44
 800ebda:	d10e      	bne.n	800ebfa <f_printf+0x2e6>
 800ebdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	da0a      	bge.n	800ebfa <f_printf+0x2e6>
			v = 0 - v;
 800ebe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ebe8:	425b      	negs	r3, r3
 800ebea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 800ebee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ebf2:	f043 0308 	orr.w	r3, r3, #8
 800ebf6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800ec00:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800ec04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ec08:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec0c:	fb01 f202 	mul.w	r2, r1, r2
 800ec10:	1a9b      	subs	r3, r3, r2
 800ec12:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800ec16:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800ec1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ec1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800ec26:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ec2a:	2b09      	cmp	r3, #9
 800ec2c:	d90b      	bls.n	800ec46 <f_printf+0x332>
 800ec2e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ec32:	2b78      	cmp	r3, #120	@ 0x78
 800ec34:	d101      	bne.n	800ec3a <f_printf+0x326>
 800ec36:	2227      	movs	r2, #39	@ 0x27
 800ec38:	e000      	b.n	800ec3c <f_printf+0x328>
 800ec3a:	2207      	movs	r2, #7
 800ec3c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ec40:	4413      	add	r3, r2
 800ec42:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 800ec46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ec4a:	1c5a      	adds	r2, r3, #1
 800ec4c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800ec50:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800ec54:	3230      	adds	r2, #48	@ 0x30
 800ec56:	b2d2      	uxtb	r2, r2
 800ec58:	3398      	adds	r3, #152	@ 0x98
 800ec5a:	443b      	add	r3, r7
 800ec5c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800ec60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d003      	beq.n	800ec70 <f_printf+0x35c>
 800ec68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ec6c:	2b1f      	cmp	r3, #31
 800ec6e:	d9c7      	bls.n	800ec00 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800ec70:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ec74:	f003 0308 	and.w	r3, r3, #8
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d009      	beq.n	800ec90 <f_printf+0x37c>
 800ec7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ec80:	1c5a      	adds	r2, r3, #1
 800ec82:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800ec86:	3398      	adds	r3, #152	@ 0x98
 800ec88:	443b      	add	r3, r7
 800ec8a:	222d      	movs	r2, #45	@ 0x2d
 800ec8c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800ec90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ec94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ec98:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ec9c:	f003 0301 	and.w	r3, r3, #1
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d001      	beq.n	800eca8 <f_printf+0x394>
 800eca4:	2330      	movs	r3, #48	@ 0x30
 800eca6:	e000      	b.n	800ecaa <f_printf+0x396>
 800eca8:	2320      	movs	r3, #32
 800ecaa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800ecae:	e007      	b.n	800ecc0 <f_printf+0x3ac>
 800ecb0:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800ecb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ecb8:	4611      	mov	r1, r2
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7ff fdb3 	bl	800e826 <putc_bfd>
 800ecc0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ecc4:	f003 0302 	and.w	r3, r3, #2
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d108      	bne.n	800ecde <f_printf+0x3ca>
 800eccc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ecd0:	1c5a      	adds	r2, r3, #1
 800ecd2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ecd6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d8e8      	bhi.n	800ecb0 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800ecde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ece2:	3b01      	subs	r3, #1
 800ece4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ece8:	f107 020c 	add.w	r2, r7, #12
 800ecec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ecf0:	4413      	add	r3, r2
 800ecf2:	781a      	ldrb	r2, [r3, #0]
 800ecf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ecf8:	4611      	mov	r1, r2
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7ff fd93 	bl	800e826 <putc_bfd>
		} while (i);
 800ed00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d1ea      	bne.n	800ecde <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800ed08:	e007      	b.n	800ed1a <f_printf+0x406>
 800ed0a:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800ed0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ed12:	4611      	mov	r1, r2
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7ff fd86 	bl	800e826 <putc_bfd>
 800ed1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ed1e:	1c5a      	adds	r2, r3, #1
 800ed20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ed24:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d8ee      	bhi.n	800ed0a <f_printf+0x3f6>
		c = *fmt++;
 800ed2c:	e600      	b.n	800e930 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800ed2e:	bf00      	nop
 800ed30:	e000      	b.n	800ed34 <f_printf+0x420>
		if (!c) break;
 800ed32:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800ed34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7ff fdb1 	bl	800e8a0 <putc_flush>
 800ed3e:	4603      	mov	r3, r0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	379c      	adds	r7, #156	@ 0x9c
 800ed44:	46bd      	mov	sp, r7
 800ed46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ed4a:	b003      	add	sp, #12
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop

0800ed50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b087      	sub	sp, #28
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ed62:	2300      	movs	r3, #0
 800ed64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ed66:	4b1f      	ldr	r3, [pc, #124]	@ (800ede4 <FATFS_LinkDriverEx+0x94>)
 800ed68:	7a5b      	ldrb	r3, [r3, #9]
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d131      	bne.n	800edd4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ed70:	4b1c      	ldr	r3, [pc, #112]	@ (800ede4 <FATFS_LinkDriverEx+0x94>)
 800ed72:	7a5b      	ldrb	r3, [r3, #9]
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	461a      	mov	r2, r3
 800ed78:	4b1a      	ldr	r3, [pc, #104]	@ (800ede4 <FATFS_LinkDriverEx+0x94>)
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ed7e:	4b19      	ldr	r3, [pc, #100]	@ (800ede4 <FATFS_LinkDriverEx+0x94>)
 800ed80:	7a5b      	ldrb	r3, [r3, #9]
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	4a17      	ldr	r2, [pc, #92]	@ (800ede4 <FATFS_LinkDriverEx+0x94>)
 800ed86:	009b      	lsls	r3, r3, #2
 800ed88:	4413      	add	r3, r2
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ed8e:	4b15      	ldr	r3, [pc, #84]	@ (800ede4 <FATFS_LinkDriverEx+0x94>)
 800ed90:	7a5b      	ldrb	r3, [r3, #9]
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	461a      	mov	r2, r3
 800ed96:	4b13      	ldr	r3, [pc, #76]	@ (800ede4 <FATFS_LinkDriverEx+0x94>)
 800ed98:	4413      	add	r3, r2
 800ed9a:	79fa      	ldrb	r2, [r7, #7]
 800ed9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ed9e:	4b11      	ldr	r3, [pc, #68]	@ (800ede4 <FATFS_LinkDriverEx+0x94>)
 800eda0:	7a5b      	ldrb	r3, [r3, #9]
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	1c5a      	adds	r2, r3, #1
 800eda6:	b2d1      	uxtb	r1, r2
 800eda8:	4a0e      	ldr	r2, [pc, #56]	@ (800ede4 <FATFS_LinkDriverEx+0x94>)
 800edaa:	7251      	strb	r1, [r2, #9]
 800edac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800edae:	7dbb      	ldrb	r3, [r7, #22]
 800edb0:	3330      	adds	r3, #48	@ 0x30
 800edb2:	b2da      	uxtb	r2, r3
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	3301      	adds	r3, #1
 800edbc:	223a      	movs	r2, #58	@ 0x3a
 800edbe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	3302      	adds	r3, #2
 800edc4:	222f      	movs	r2, #47	@ 0x2f
 800edc6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	3303      	adds	r3, #3
 800edcc:	2200      	movs	r2, #0
 800edce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800edd0:	2300      	movs	r3, #0
 800edd2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800edd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	371c      	adds	r7, #28
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop
 800ede4:	20006ad4 	.word	0x20006ad4

0800ede8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800edf2:	2200      	movs	r2, #0
 800edf4:	6839      	ldr	r1, [r7, #0]
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7ff ffaa 	bl	800ed50 <FATFS_LinkDriverEx>
 800edfc:	4603      	mov	r3, r0
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}

0800ee06 <atof>:
 800ee06:	2100      	movs	r1, #0
 800ee08:	f000 be02 	b.w	800fa10 <strtod>

0800ee0c <sulp>:
 800ee0c:	b570      	push	{r4, r5, r6, lr}
 800ee0e:	4604      	mov	r4, r0
 800ee10:	460d      	mov	r5, r1
 800ee12:	ec45 4b10 	vmov	d0, r4, r5
 800ee16:	4616      	mov	r6, r2
 800ee18:	f003 fab6 	bl	8012388 <__ulp>
 800ee1c:	ec51 0b10 	vmov	r0, r1, d0
 800ee20:	b17e      	cbz	r6, 800ee42 <sulp+0x36>
 800ee22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ee26:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	dd09      	ble.n	800ee42 <sulp+0x36>
 800ee2e:	051b      	lsls	r3, r3, #20
 800ee30:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ee34:	2400      	movs	r4, #0
 800ee36:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ee3a:	4622      	mov	r2, r4
 800ee3c:	462b      	mov	r3, r5
 800ee3e:	f7f1 fc13 	bl	8000668 <__aeabi_dmul>
 800ee42:	ec41 0b10 	vmov	d0, r0, r1
 800ee46:	bd70      	pop	{r4, r5, r6, pc}

0800ee48 <_strtod_l>:
 800ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee4c:	b09f      	sub	sp, #124	@ 0x7c
 800ee4e:	460c      	mov	r4, r1
 800ee50:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ee52:	2200      	movs	r2, #0
 800ee54:	921a      	str	r2, [sp, #104]	@ 0x68
 800ee56:	9005      	str	r0, [sp, #20]
 800ee58:	f04f 0a00 	mov.w	sl, #0
 800ee5c:	f04f 0b00 	mov.w	fp, #0
 800ee60:	460a      	mov	r2, r1
 800ee62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee64:	7811      	ldrb	r1, [r2, #0]
 800ee66:	292b      	cmp	r1, #43	@ 0x2b
 800ee68:	d04a      	beq.n	800ef00 <_strtod_l+0xb8>
 800ee6a:	d838      	bhi.n	800eede <_strtod_l+0x96>
 800ee6c:	290d      	cmp	r1, #13
 800ee6e:	d832      	bhi.n	800eed6 <_strtod_l+0x8e>
 800ee70:	2908      	cmp	r1, #8
 800ee72:	d832      	bhi.n	800eeda <_strtod_l+0x92>
 800ee74:	2900      	cmp	r1, #0
 800ee76:	d03b      	beq.n	800eef0 <_strtod_l+0xa8>
 800ee78:	2200      	movs	r2, #0
 800ee7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ee7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ee7e:	782a      	ldrb	r2, [r5, #0]
 800ee80:	2a30      	cmp	r2, #48	@ 0x30
 800ee82:	f040 80b3 	bne.w	800efec <_strtod_l+0x1a4>
 800ee86:	786a      	ldrb	r2, [r5, #1]
 800ee88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ee8c:	2a58      	cmp	r2, #88	@ 0x58
 800ee8e:	d16e      	bne.n	800ef6e <_strtod_l+0x126>
 800ee90:	9302      	str	r3, [sp, #8]
 800ee92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee94:	9301      	str	r3, [sp, #4]
 800ee96:	ab1a      	add	r3, sp, #104	@ 0x68
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	4a8e      	ldr	r2, [pc, #568]	@ (800f0d4 <_strtod_l+0x28c>)
 800ee9c:	9805      	ldr	r0, [sp, #20]
 800ee9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800eea0:	a919      	add	r1, sp, #100	@ 0x64
 800eea2:	f002 fb63 	bl	801156c <__gethex>
 800eea6:	f010 060f 	ands.w	r6, r0, #15
 800eeaa:	4604      	mov	r4, r0
 800eeac:	d005      	beq.n	800eeba <_strtod_l+0x72>
 800eeae:	2e06      	cmp	r6, #6
 800eeb0:	d128      	bne.n	800ef04 <_strtod_l+0xbc>
 800eeb2:	3501      	adds	r5, #1
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	9519      	str	r5, [sp, #100]	@ 0x64
 800eeb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eeba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f040 858e 	bne.w	800f9de <_strtod_l+0xb96>
 800eec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eec4:	b1cb      	cbz	r3, 800eefa <_strtod_l+0xb2>
 800eec6:	4652      	mov	r2, sl
 800eec8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800eecc:	ec43 2b10 	vmov	d0, r2, r3
 800eed0:	b01f      	add	sp, #124	@ 0x7c
 800eed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed6:	2920      	cmp	r1, #32
 800eed8:	d1ce      	bne.n	800ee78 <_strtod_l+0x30>
 800eeda:	3201      	adds	r2, #1
 800eedc:	e7c1      	b.n	800ee62 <_strtod_l+0x1a>
 800eede:	292d      	cmp	r1, #45	@ 0x2d
 800eee0:	d1ca      	bne.n	800ee78 <_strtod_l+0x30>
 800eee2:	2101      	movs	r1, #1
 800eee4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800eee6:	1c51      	adds	r1, r2, #1
 800eee8:	9119      	str	r1, [sp, #100]	@ 0x64
 800eeea:	7852      	ldrb	r2, [r2, #1]
 800eeec:	2a00      	cmp	r2, #0
 800eeee:	d1c5      	bne.n	800ee7c <_strtod_l+0x34>
 800eef0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eef2:	9419      	str	r4, [sp, #100]	@ 0x64
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	f040 8570 	bne.w	800f9da <_strtod_l+0xb92>
 800eefa:	4652      	mov	r2, sl
 800eefc:	465b      	mov	r3, fp
 800eefe:	e7e5      	b.n	800eecc <_strtod_l+0x84>
 800ef00:	2100      	movs	r1, #0
 800ef02:	e7ef      	b.n	800eee4 <_strtod_l+0x9c>
 800ef04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ef06:	b13a      	cbz	r2, 800ef18 <_strtod_l+0xd0>
 800ef08:	2135      	movs	r1, #53	@ 0x35
 800ef0a:	a81c      	add	r0, sp, #112	@ 0x70
 800ef0c:	f003 fb36 	bl	801257c <__copybits>
 800ef10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef12:	9805      	ldr	r0, [sp, #20]
 800ef14:	f002 ff04 	bl	8011d20 <_Bfree>
 800ef18:	3e01      	subs	r6, #1
 800ef1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ef1c:	2e04      	cmp	r6, #4
 800ef1e:	d806      	bhi.n	800ef2e <_strtod_l+0xe6>
 800ef20:	e8df f006 	tbb	[pc, r6]
 800ef24:	201d0314 	.word	0x201d0314
 800ef28:	14          	.byte	0x14
 800ef29:	00          	.byte	0x00
 800ef2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ef2e:	05e1      	lsls	r1, r4, #23
 800ef30:	bf48      	it	mi
 800ef32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ef36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef3a:	0d1b      	lsrs	r3, r3, #20
 800ef3c:	051b      	lsls	r3, r3, #20
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d1bb      	bne.n	800eeba <_strtod_l+0x72>
 800ef42:	f001 fbaf 	bl	80106a4 <__errno>
 800ef46:	2322      	movs	r3, #34	@ 0x22
 800ef48:	6003      	str	r3, [r0, #0]
 800ef4a:	e7b6      	b.n	800eeba <_strtod_l+0x72>
 800ef4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ef50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ef54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ef58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ef5c:	e7e7      	b.n	800ef2e <_strtod_l+0xe6>
 800ef5e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f0dc <_strtod_l+0x294>
 800ef62:	e7e4      	b.n	800ef2e <_strtod_l+0xe6>
 800ef64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ef68:	f04f 3aff 	mov.w	sl, #4294967295
 800ef6c:	e7df      	b.n	800ef2e <_strtod_l+0xe6>
 800ef6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef70:	1c5a      	adds	r2, r3, #1
 800ef72:	9219      	str	r2, [sp, #100]	@ 0x64
 800ef74:	785b      	ldrb	r3, [r3, #1]
 800ef76:	2b30      	cmp	r3, #48	@ 0x30
 800ef78:	d0f9      	beq.n	800ef6e <_strtod_l+0x126>
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d09d      	beq.n	800eeba <_strtod_l+0x72>
 800ef7e:	2301      	movs	r3, #1
 800ef80:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef84:	930c      	str	r3, [sp, #48]	@ 0x30
 800ef86:	2300      	movs	r3, #0
 800ef88:	9308      	str	r3, [sp, #32]
 800ef8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef8c:	461f      	mov	r7, r3
 800ef8e:	220a      	movs	r2, #10
 800ef90:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ef92:	7805      	ldrb	r5, [r0, #0]
 800ef94:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ef98:	b2d9      	uxtb	r1, r3
 800ef9a:	2909      	cmp	r1, #9
 800ef9c:	d928      	bls.n	800eff0 <_strtod_l+0x1a8>
 800ef9e:	494e      	ldr	r1, [pc, #312]	@ (800f0d8 <_strtod_l+0x290>)
 800efa0:	2201      	movs	r2, #1
 800efa2:	f001 fac6 	bl	8010532 <strncmp>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	d032      	beq.n	800f010 <_strtod_l+0x1c8>
 800efaa:	2000      	movs	r0, #0
 800efac:	462a      	mov	r2, r5
 800efae:	4681      	mov	r9, r0
 800efb0:	463d      	mov	r5, r7
 800efb2:	4603      	mov	r3, r0
 800efb4:	2a65      	cmp	r2, #101	@ 0x65
 800efb6:	d001      	beq.n	800efbc <_strtod_l+0x174>
 800efb8:	2a45      	cmp	r2, #69	@ 0x45
 800efba:	d114      	bne.n	800efe6 <_strtod_l+0x19e>
 800efbc:	b91d      	cbnz	r5, 800efc6 <_strtod_l+0x17e>
 800efbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efc0:	4302      	orrs	r2, r0
 800efc2:	d095      	beq.n	800eef0 <_strtod_l+0xa8>
 800efc4:	2500      	movs	r5, #0
 800efc6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800efc8:	1c62      	adds	r2, r4, #1
 800efca:	9219      	str	r2, [sp, #100]	@ 0x64
 800efcc:	7862      	ldrb	r2, [r4, #1]
 800efce:	2a2b      	cmp	r2, #43	@ 0x2b
 800efd0:	d077      	beq.n	800f0c2 <_strtod_l+0x27a>
 800efd2:	2a2d      	cmp	r2, #45	@ 0x2d
 800efd4:	d07b      	beq.n	800f0ce <_strtod_l+0x286>
 800efd6:	f04f 0c00 	mov.w	ip, #0
 800efda:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800efde:	2909      	cmp	r1, #9
 800efe0:	f240 8082 	bls.w	800f0e8 <_strtod_l+0x2a0>
 800efe4:	9419      	str	r4, [sp, #100]	@ 0x64
 800efe6:	f04f 0800 	mov.w	r8, #0
 800efea:	e0a2      	b.n	800f132 <_strtod_l+0x2ea>
 800efec:	2300      	movs	r3, #0
 800efee:	e7c7      	b.n	800ef80 <_strtod_l+0x138>
 800eff0:	2f08      	cmp	r7, #8
 800eff2:	bfd5      	itete	le
 800eff4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800eff6:	9908      	ldrgt	r1, [sp, #32]
 800eff8:	fb02 3301 	mlale	r3, r2, r1, r3
 800effc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f000:	f100 0001 	add.w	r0, r0, #1
 800f004:	bfd4      	ite	le
 800f006:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f008:	9308      	strgt	r3, [sp, #32]
 800f00a:	3701      	adds	r7, #1
 800f00c:	9019      	str	r0, [sp, #100]	@ 0x64
 800f00e:	e7bf      	b.n	800ef90 <_strtod_l+0x148>
 800f010:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f012:	1c5a      	adds	r2, r3, #1
 800f014:	9219      	str	r2, [sp, #100]	@ 0x64
 800f016:	785a      	ldrb	r2, [r3, #1]
 800f018:	b37f      	cbz	r7, 800f07a <_strtod_l+0x232>
 800f01a:	4681      	mov	r9, r0
 800f01c:	463d      	mov	r5, r7
 800f01e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f022:	2b09      	cmp	r3, #9
 800f024:	d912      	bls.n	800f04c <_strtod_l+0x204>
 800f026:	2301      	movs	r3, #1
 800f028:	e7c4      	b.n	800efb4 <_strtod_l+0x16c>
 800f02a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f02c:	1c5a      	adds	r2, r3, #1
 800f02e:	9219      	str	r2, [sp, #100]	@ 0x64
 800f030:	785a      	ldrb	r2, [r3, #1]
 800f032:	3001      	adds	r0, #1
 800f034:	2a30      	cmp	r2, #48	@ 0x30
 800f036:	d0f8      	beq.n	800f02a <_strtod_l+0x1e2>
 800f038:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f03c:	2b08      	cmp	r3, #8
 800f03e:	f200 84d3 	bhi.w	800f9e8 <_strtod_l+0xba0>
 800f042:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f044:	930c      	str	r3, [sp, #48]	@ 0x30
 800f046:	4681      	mov	r9, r0
 800f048:	2000      	movs	r0, #0
 800f04a:	4605      	mov	r5, r0
 800f04c:	3a30      	subs	r2, #48	@ 0x30
 800f04e:	f100 0301 	add.w	r3, r0, #1
 800f052:	d02a      	beq.n	800f0aa <_strtod_l+0x262>
 800f054:	4499      	add	r9, r3
 800f056:	eb00 0c05 	add.w	ip, r0, r5
 800f05a:	462b      	mov	r3, r5
 800f05c:	210a      	movs	r1, #10
 800f05e:	4563      	cmp	r3, ip
 800f060:	d10d      	bne.n	800f07e <_strtod_l+0x236>
 800f062:	1c69      	adds	r1, r5, #1
 800f064:	4401      	add	r1, r0
 800f066:	4428      	add	r0, r5
 800f068:	2808      	cmp	r0, #8
 800f06a:	dc16      	bgt.n	800f09a <_strtod_l+0x252>
 800f06c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f06e:	230a      	movs	r3, #10
 800f070:	fb03 2300 	mla	r3, r3, r0, r2
 800f074:	930a      	str	r3, [sp, #40]	@ 0x28
 800f076:	2300      	movs	r3, #0
 800f078:	e018      	b.n	800f0ac <_strtod_l+0x264>
 800f07a:	4638      	mov	r0, r7
 800f07c:	e7da      	b.n	800f034 <_strtod_l+0x1ec>
 800f07e:	2b08      	cmp	r3, #8
 800f080:	f103 0301 	add.w	r3, r3, #1
 800f084:	dc03      	bgt.n	800f08e <_strtod_l+0x246>
 800f086:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f088:	434e      	muls	r6, r1
 800f08a:	960a      	str	r6, [sp, #40]	@ 0x28
 800f08c:	e7e7      	b.n	800f05e <_strtod_l+0x216>
 800f08e:	2b10      	cmp	r3, #16
 800f090:	bfde      	ittt	le
 800f092:	9e08      	ldrle	r6, [sp, #32]
 800f094:	434e      	mulle	r6, r1
 800f096:	9608      	strle	r6, [sp, #32]
 800f098:	e7e1      	b.n	800f05e <_strtod_l+0x216>
 800f09a:	280f      	cmp	r0, #15
 800f09c:	dceb      	bgt.n	800f076 <_strtod_l+0x22e>
 800f09e:	9808      	ldr	r0, [sp, #32]
 800f0a0:	230a      	movs	r3, #10
 800f0a2:	fb03 2300 	mla	r3, r3, r0, r2
 800f0a6:	9308      	str	r3, [sp, #32]
 800f0a8:	e7e5      	b.n	800f076 <_strtod_l+0x22e>
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f0ae:	1c50      	adds	r0, r2, #1
 800f0b0:	9019      	str	r0, [sp, #100]	@ 0x64
 800f0b2:	7852      	ldrb	r2, [r2, #1]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	460d      	mov	r5, r1
 800f0b8:	e7b1      	b.n	800f01e <_strtod_l+0x1d6>
 800f0ba:	f04f 0900 	mov.w	r9, #0
 800f0be:	2301      	movs	r3, #1
 800f0c0:	e77d      	b.n	800efbe <_strtod_l+0x176>
 800f0c2:	f04f 0c00 	mov.w	ip, #0
 800f0c6:	1ca2      	adds	r2, r4, #2
 800f0c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800f0ca:	78a2      	ldrb	r2, [r4, #2]
 800f0cc:	e785      	b.n	800efda <_strtod_l+0x192>
 800f0ce:	f04f 0c01 	mov.w	ip, #1
 800f0d2:	e7f8      	b.n	800f0c6 <_strtod_l+0x27e>
 800f0d4:	08013dd0 	.word	0x08013dd0
 800f0d8:	08013db8 	.word	0x08013db8
 800f0dc:	7ff00000 	.word	0x7ff00000
 800f0e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f0e2:	1c51      	adds	r1, r2, #1
 800f0e4:	9119      	str	r1, [sp, #100]	@ 0x64
 800f0e6:	7852      	ldrb	r2, [r2, #1]
 800f0e8:	2a30      	cmp	r2, #48	@ 0x30
 800f0ea:	d0f9      	beq.n	800f0e0 <_strtod_l+0x298>
 800f0ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f0f0:	2908      	cmp	r1, #8
 800f0f2:	f63f af78 	bhi.w	800efe6 <_strtod_l+0x19e>
 800f0f6:	3a30      	subs	r2, #48	@ 0x30
 800f0f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f0fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f0fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f0fe:	f04f 080a 	mov.w	r8, #10
 800f102:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f104:	1c56      	adds	r6, r2, #1
 800f106:	9619      	str	r6, [sp, #100]	@ 0x64
 800f108:	7852      	ldrb	r2, [r2, #1]
 800f10a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f10e:	f1be 0f09 	cmp.w	lr, #9
 800f112:	d939      	bls.n	800f188 <_strtod_l+0x340>
 800f114:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f116:	1a76      	subs	r6, r6, r1
 800f118:	2e08      	cmp	r6, #8
 800f11a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f11e:	dc03      	bgt.n	800f128 <_strtod_l+0x2e0>
 800f120:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f122:	4588      	cmp	r8, r1
 800f124:	bfa8      	it	ge
 800f126:	4688      	movge	r8, r1
 800f128:	f1bc 0f00 	cmp.w	ip, #0
 800f12c:	d001      	beq.n	800f132 <_strtod_l+0x2ea>
 800f12e:	f1c8 0800 	rsb	r8, r8, #0
 800f132:	2d00      	cmp	r5, #0
 800f134:	d14e      	bne.n	800f1d4 <_strtod_l+0x38c>
 800f136:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f138:	4308      	orrs	r0, r1
 800f13a:	f47f aebe 	bne.w	800eeba <_strtod_l+0x72>
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f47f aed6 	bne.w	800eef0 <_strtod_l+0xa8>
 800f144:	2a69      	cmp	r2, #105	@ 0x69
 800f146:	d028      	beq.n	800f19a <_strtod_l+0x352>
 800f148:	dc25      	bgt.n	800f196 <_strtod_l+0x34e>
 800f14a:	2a49      	cmp	r2, #73	@ 0x49
 800f14c:	d025      	beq.n	800f19a <_strtod_l+0x352>
 800f14e:	2a4e      	cmp	r2, #78	@ 0x4e
 800f150:	f47f aece 	bne.w	800eef0 <_strtod_l+0xa8>
 800f154:	499b      	ldr	r1, [pc, #620]	@ (800f3c4 <_strtod_l+0x57c>)
 800f156:	a819      	add	r0, sp, #100	@ 0x64
 800f158:	f002 fc2a 	bl	80119b0 <__match>
 800f15c:	2800      	cmp	r0, #0
 800f15e:	f43f aec7 	beq.w	800eef0 <_strtod_l+0xa8>
 800f162:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	2b28      	cmp	r3, #40	@ 0x28
 800f168:	d12e      	bne.n	800f1c8 <_strtod_l+0x380>
 800f16a:	4997      	ldr	r1, [pc, #604]	@ (800f3c8 <_strtod_l+0x580>)
 800f16c:	aa1c      	add	r2, sp, #112	@ 0x70
 800f16e:	a819      	add	r0, sp, #100	@ 0x64
 800f170:	f002 fc32 	bl	80119d8 <__hexnan>
 800f174:	2805      	cmp	r0, #5
 800f176:	d127      	bne.n	800f1c8 <_strtod_l+0x380>
 800f178:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f17a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f17e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f182:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f186:	e698      	b.n	800eeba <_strtod_l+0x72>
 800f188:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f18a:	fb08 2101 	mla	r1, r8, r1, r2
 800f18e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f192:	920e      	str	r2, [sp, #56]	@ 0x38
 800f194:	e7b5      	b.n	800f102 <_strtod_l+0x2ba>
 800f196:	2a6e      	cmp	r2, #110	@ 0x6e
 800f198:	e7da      	b.n	800f150 <_strtod_l+0x308>
 800f19a:	498c      	ldr	r1, [pc, #560]	@ (800f3cc <_strtod_l+0x584>)
 800f19c:	a819      	add	r0, sp, #100	@ 0x64
 800f19e:	f002 fc07 	bl	80119b0 <__match>
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	f43f aea4 	beq.w	800eef0 <_strtod_l+0xa8>
 800f1a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f1aa:	4989      	ldr	r1, [pc, #548]	@ (800f3d0 <_strtod_l+0x588>)
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	a819      	add	r0, sp, #100	@ 0x64
 800f1b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800f1b2:	f002 fbfd 	bl	80119b0 <__match>
 800f1b6:	b910      	cbnz	r0, 800f1be <_strtod_l+0x376>
 800f1b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800f1be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f3e0 <_strtod_l+0x598>
 800f1c2:	f04f 0a00 	mov.w	sl, #0
 800f1c6:	e678      	b.n	800eeba <_strtod_l+0x72>
 800f1c8:	4882      	ldr	r0, [pc, #520]	@ (800f3d4 <_strtod_l+0x58c>)
 800f1ca:	f001 faa9 	bl	8010720 <nan>
 800f1ce:	ec5b ab10 	vmov	sl, fp, d0
 800f1d2:	e672      	b.n	800eeba <_strtod_l+0x72>
 800f1d4:	eba8 0309 	sub.w	r3, r8, r9
 800f1d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f1da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1dc:	2f00      	cmp	r7, #0
 800f1de:	bf08      	it	eq
 800f1e0:	462f      	moveq	r7, r5
 800f1e2:	2d10      	cmp	r5, #16
 800f1e4:	462c      	mov	r4, r5
 800f1e6:	bfa8      	it	ge
 800f1e8:	2410      	movge	r4, #16
 800f1ea:	f7f1 f9c3 	bl	8000574 <__aeabi_ui2d>
 800f1ee:	2d09      	cmp	r5, #9
 800f1f0:	4682      	mov	sl, r0
 800f1f2:	468b      	mov	fp, r1
 800f1f4:	dc13      	bgt.n	800f21e <_strtod_l+0x3d6>
 800f1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f43f ae5e 	beq.w	800eeba <_strtod_l+0x72>
 800f1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f200:	dd78      	ble.n	800f2f4 <_strtod_l+0x4ac>
 800f202:	2b16      	cmp	r3, #22
 800f204:	dc5f      	bgt.n	800f2c6 <_strtod_l+0x47e>
 800f206:	4974      	ldr	r1, [pc, #464]	@ (800f3d8 <_strtod_l+0x590>)
 800f208:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f20c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f210:	4652      	mov	r2, sl
 800f212:	465b      	mov	r3, fp
 800f214:	f7f1 fa28 	bl	8000668 <__aeabi_dmul>
 800f218:	4682      	mov	sl, r0
 800f21a:	468b      	mov	fp, r1
 800f21c:	e64d      	b.n	800eeba <_strtod_l+0x72>
 800f21e:	4b6e      	ldr	r3, [pc, #440]	@ (800f3d8 <_strtod_l+0x590>)
 800f220:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f224:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f228:	f7f1 fa1e 	bl	8000668 <__aeabi_dmul>
 800f22c:	4682      	mov	sl, r0
 800f22e:	9808      	ldr	r0, [sp, #32]
 800f230:	468b      	mov	fp, r1
 800f232:	f7f1 f99f 	bl	8000574 <__aeabi_ui2d>
 800f236:	4602      	mov	r2, r0
 800f238:	460b      	mov	r3, r1
 800f23a:	4650      	mov	r0, sl
 800f23c:	4659      	mov	r1, fp
 800f23e:	f7f1 f85d 	bl	80002fc <__adddf3>
 800f242:	2d0f      	cmp	r5, #15
 800f244:	4682      	mov	sl, r0
 800f246:	468b      	mov	fp, r1
 800f248:	ddd5      	ble.n	800f1f6 <_strtod_l+0x3ae>
 800f24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f24c:	1b2c      	subs	r4, r5, r4
 800f24e:	441c      	add	r4, r3
 800f250:	2c00      	cmp	r4, #0
 800f252:	f340 8096 	ble.w	800f382 <_strtod_l+0x53a>
 800f256:	f014 030f 	ands.w	r3, r4, #15
 800f25a:	d00a      	beq.n	800f272 <_strtod_l+0x42a>
 800f25c:	495e      	ldr	r1, [pc, #376]	@ (800f3d8 <_strtod_l+0x590>)
 800f25e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f262:	4652      	mov	r2, sl
 800f264:	465b      	mov	r3, fp
 800f266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f26a:	f7f1 f9fd 	bl	8000668 <__aeabi_dmul>
 800f26e:	4682      	mov	sl, r0
 800f270:	468b      	mov	fp, r1
 800f272:	f034 040f 	bics.w	r4, r4, #15
 800f276:	d073      	beq.n	800f360 <_strtod_l+0x518>
 800f278:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f27c:	dd48      	ble.n	800f310 <_strtod_l+0x4c8>
 800f27e:	2400      	movs	r4, #0
 800f280:	46a0      	mov	r8, r4
 800f282:	940a      	str	r4, [sp, #40]	@ 0x28
 800f284:	46a1      	mov	r9, r4
 800f286:	9a05      	ldr	r2, [sp, #20]
 800f288:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f3e0 <_strtod_l+0x598>
 800f28c:	2322      	movs	r3, #34	@ 0x22
 800f28e:	6013      	str	r3, [r2, #0]
 800f290:	f04f 0a00 	mov.w	sl, #0
 800f294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f296:	2b00      	cmp	r3, #0
 800f298:	f43f ae0f 	beq.w	800eeba <_strtod_l+0x72>
 800f29c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f29e:	9805      	ldr	r0, [sp, #20]
 800f2a0:	f002 fd3e 	bl	8011d20 <_Bfree>
 800f2a4:	9805      	ldr	r0, [sp, #20]
 800f2a6:	4649      	mov	r1, r9
 800f2a8:	f002 fd3a 	bl	8011d20 <_Bfree>
 800f2ac:	9805      	ldr	r0, [sp, #20]
 800f2ae:	4641      	mov	r1, r8
 800f2b0:	f002 fd36 	bl	8011d20 <_Bfree>
 800f2b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f2b6:	9805      	ldr	r0, [sp, #20]
 800f2b8:	f002 fd32 	bl	8011d20 <_Bfree>
 800f2bc:	9805      	ldr	r0, [sp, #20]
 800f2be:	4621      	mov	r1, r4
 800f2c0:	f002 fd2e 	bl	8011d20 <_Bfree>
 800f2c4:	e5f9      	b.n	800eeba <_strtod_l+0x72>
 800f2c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	dbbc      	blt.n	800f24a <_strtod_l+0x402>
 800f2d0:	4c41      	ldr	r4, [pc, #260]	@ (800f3d8 <_strtod_l+0x590>)
 800f2d2:	f1c5 050f 	rsb	r5, r5, #15
 800f2d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f2da:	4652      	mov	r2, sl
 800f2dc:	465b      	mov	r3, fp
 800f2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2e2:	f7f1 f9c1 	bl	8000668 <__aeabi_dmul>
 800f2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2e8:	1b5d      	subs	r5, r3, r5
 800f2ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f2ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f2f2:	e78f      	b.n	800f214 <_strtod_l+0x3cc>
 800f2f4:	3316      	adds	r3, #22
 800f2f6:	dba8      	blt.n	800f24a <_strtod_l+0x402>
 800f2f8:	4b37      	ldr	r3, [pc, #220]	@ (800f3d8 <_strtod_l+0x590>)
 800f2fa:	eba9 0808 	sub.w	r8, r9, r8
 800f2fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f302:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f306:	4650      	mov	r0, sl
 800f308:	4659      	mov	r1, fp
 800f30a:	f7f1 fad7 	bl	80008bc <__aeabi_ddiv>
 800f30e:	e783      	b.n	800f218 <_strtod_l+0x3d0>
 800f310:	4b32      	ldr	r3, [pc, #200]	@ (800f3dc <_strtod_l+0x594>)
 800f312:	9308      	str	r3, [sp, #32]
 800f314:	2300      	movs	r3, #0
 800f316:	1124      	asrs	r4, r4, #4
 800f318:	4650      	mov	r0, sl
 800f31a:	4659      	mov	r1, fp
 800f31c:	461e      	mov	r6, r3
 800f31e:	2c01      	cmp	r4, #1
 800f320:	dc21      	bgt.n	800f366 <_strtod_l+0x51e>
 800f322:	b10b      	cbz	r3, 800f328 <_strtod_l+0x4e0>
 800f324:	4682      	mov	sl, r0
 800f326:	468b      	mov	fp, r1
 800f328:	492c      	ldr	r1, [pc, #176]	@ (800f3dc <_strtod_l+0x594>)
 800f32a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f32e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f332:	4652      	mov	r2, sl
 800f334:	465b      	mov	r3, fp
 800f336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f33a:	f7f1 f995 	bl	8000668 <__aeabi_dmul>
 800f33e:	4b28      	ldr	r3, [pc, #160]	@ (800f3e0 <_strtod_l+0x598>)
 800f340:	460a      	mov	r2, r1
 800f342:	400b      	ands	r3, r1
 800f344:	4927      	ldr	r1, [pc, #156]	@ (800f3e4 <_strtod_l+0x59c>)
 800f346:	428b      	cmp	r3, r1
 800f348:	4682      	mov	sl, r0
 800f34a:	d898      	bhi.n	800f27e <_strtod_l+0x436>
 800f34c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f350:	428b      	cmp	r3, r1
 800f352:	bf86      	itte	hi
 800f354:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f3e8 <_strtod_l+0x5a0>
 800f358:	f04f 3aff 	movhi.w	sl, #4294967295
 800f35c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f360:	2300      	movs	r3, #0
 800f362:	9308      	str	r3, [sp, #32]
 800f364:	e07a      	b.n	800f45c <_strtod_l+0x614>
 800f366:	07e2      	lsls	r2, r4, #31
 800f368:	d505      	bpl.n	800f376 <_strtod_l+0x52e>
 800f36a:	9b08      	ldr	r3, [sp, #32]
 800f36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f370:	f7f1 f97a 	bl	8000668 <__aeabi_dmul>
 800f374:	2301      	movs	r3, #1
 800f376:	9a08      	ldr	r2, [sp, #32]
 800f378:	3208      	adds	r2, #8
 800f37a:	3601      	adds	r6, #1
 800f37c:	1064      	asrs	r4, r4, #1
 800f37e:	9208      	str	r2, [sp, #32]
 800f380:	e7cd      	b.n	800f31e <_strtod_l+0x4d6>
 800f382:	d0ed      	beq.n	800f360 <_strtod_l+0x518>
 800f384:	4264      	negs	r4, r4
 800f386:	f014 020f 	ands.w	r2, r4, #15
 800f38a:	d00a      	beq.n	800f3a2 <_strtod_l+0x55a>
 800f38c:	4b12      	ldr	r3, [pc, #72]	@ (800f3d8 <_strtod_l+0x590>)
 800f38e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f392:	4650      	mov	r0, sl
 800f394:	4659      	mov	r1, fp
 800f396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39a:	f7f1 fa8f 	bl	80008bc <__aeabi_ddiv>
 800f39e:	4682      	mov	sl, r0
 800f3a0:	468b      	mov	fp, r1
 800f3a2:	1124      	asrs	r4, r4, #4
 800f3a4:	d0dc      	beq.n	800f360 <_strtod_l+0x518>
 800f3a6:	2c1f      	cmp	r4, #31
 800f3a8:	dd20      	ble.n	800f3ec <_strtod_l+0x5a4>
 800f3aa:	2400      	movs	r4, #0
 800f3ac:	46a0      	mov	r8, r4
 800f3ae:	940a      	str	r4, [sp, #40]	@ 0x28
 800f3b0:	46a1      	mov	r9, r4
 800f3b2:	9a05      	ldr	r2, [sp, #20]
 800f3b4:	2322      	movs	r3, #34	@ 0x22
 800f3b6:	f04f 0a00 	mov.w	sl, #0
 800f3ba:	f04f 0b00 	mov.w	fp, #0
 800f3be:	6013      	str	r3, [r2, #0]
 800f3c0:	e768      	b.n	800f294 <_strtod_l+0x44c>
 800f3c2:	bf00      	nop
 800f3c4:	08013e1d 	.word	0x08013e1d
 800f3c8:	08013dbc 	.word	0x08013dbc
 800f3cc:	08013e15 	.word	0x08013e15
 800f3d0:	08013efc 	.word	0x08013efc
 800f3d4:	08013ef8 	.word	0x08013ef8
 800f3d8:	08014060 	.word	0x08014060
 800f3dc:	08014038 	.word	0x08014038
 800f3e0:	7ff00000 	.word	0x7ff00000
 800f3e4:	7ca00000 	.word	0x7ca00000
 800f3e8:	7fefffff 	.word	0x7fefffff
 800f3ec:	f014 0310 	ands.w	r3, r4, #16
 800f3f0:	bf18      	it	ne
 800f3f2:	236a      	movne	r3, #106	@ 0x6a
 800f3f4:	4ea9      	ldr	r6, [pc, #676]	@ (800f69c <_strtod_l+0x854>)
 800f3f6:	9308      	str	r3, [sp, #32]
 800f3f8:	4650      	mov	r0, sl
 800f3fa:	4659      	mov	r1, fp
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	07e2      	lsls	r2, r4, #31
 800f400:	d504      	bpl.n	800f40c <_strtod_l+0x5c4>
 800f402:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f406:	f7f1 f92f 	bl	8000668 <__aeabi_dmul>
 800f40a:	2301      	movs	r3, #1
 800f40c:	1064      	asrs	r4, r4, #1
 800f40e:	f106 0608 	add.w	r6, r6, #8
 800f412:	d1f4      	bne.n	800f3fe <_strtod_l+0x5b6>
 800f414:	b10b      	cbz	r3, 800f41a <_strtod_l+0x5d2>
 800f416:	4682      	mov	sl, r0
 800f418:	468b      	mov	fp, r1
 800f41a:	9b08      	ldr	r3, [sp, #32]
 800f41c:	b1b3      	cbz	r3, 800f44c <_strtod_l+0x604>
 800f41e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f422:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f426:	2b00      	cmp	r3, #0
 800f428:	4659      	mov	r1, fp
 800f42a:	dd0f      	ble.n	800f44c <_strtod_l+0x604>
 800f42c:	2b1f      	cmp	r3, #31
 800f42e:	dd55      	ble.n	800f4dc <_strtod_l+0x694>
 800f430:	2b34      	cmp	r3, #52	@ 0x34
 800f432:	bfde      	ittt	le
 800f434:	f04f 33ff 	movle.w	r3, #4294967295
 800f438:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f43c:	4093      	lslle	r3, r2
 800f43e:	f04f 0a00 	mov.w	sl, #0
 800f442:	bfcc      	ite	gt
 800f444:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f448:	ea03 0b01 	andle.w	fp, r3, r1
 800f44c:	2200      	movs	r2, #0
 800f44e:	2300      	movs	r3, #0
 800f450:	4650      	mov	r0, sl
 800f452:	4659      	mov	r1, fp
 800f454:	f7f1 fb70 	bl	8000b38 <__aeabi_dcmpeq>
 800f458:	2800      	cmp	r0, #0
 800f45a:	d1a6      	bne.n	800f3aa <_strtod_l+0x562>
 800f45c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f45e:	9300      	str	r3, [sp, #0]
 800f460:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f462:	9805      	ldr	r0, [sp, #20]
 800f464:	462b      	mov	r3, r5
 800f466:	463a      	mov	r2, r7
 800f468:	f002 fcc2 	bl	8011df0 <__s2b>
 800f46c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f46e:	2800      	cmp	r0, #0
 800f470:	f43f af05 	beq.w	800f27e <_strtod_l+0x436>
 800f474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f476:	2a00      	cmp	r2, #0
 800f478:	eba9 0308 	sub.w	r3, r9, r8
 800f47c:	bfa8      	it	ge
 800f47e:	2300      	movge	r3, #0
 800f480:	9312      	str	r3, [sp, #72]	@ 0x48
 800f482:	2400      	movs	r4, #0
 800f484:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f488:	9316      	str	r3, [sp, #88]	@ 0x58
 800f48a:	46a0      	mov	r8, r4
 800f48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f48e:	9805      	ldr	r0, [sp, #20]
 800f490:	6859      	ldr	r1, [r3, #4]
 800f492:	f002 fc05 	bl	8011ca0 <_Balloc>
 800f496:	4681      	mov	r9, r0
 800f498:	2800      	cmp	r0, #0
 800f49a:	f43f aef4 	beq.w	800f286 <_strtod_l+0x43e>
 800f49e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4a0:	691a      	ldr	r2, [r3, #16]
 800f4a2:	3202      	adds	r2, #2
 800f4a4:	f103 010c 	add.w	r1, r3, #12
 800f4a8:	0092      	lsls	r2, r2, #2
 800f4aa:	300c      	adds	r0, #12
 800f4ac:	f001 f927 	bl	80106fe <memcpy>
 800f4b0:	ec4b ab10 	vmov	d0, sl, fp
 800f4b4:	9805      	ldr	r0, [sp, #20]
 800f4b6:	aa1c      	add	r2, sp, #112	@ 0x70
 800f4b8:	a91b      	add	r1, sp, #108	@ 0x6c
 800f4ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f4be:	f002 ffd3 	bl	8012468 <__d2b>
 800f4c2:	901a      	str	r0, [sp, #104]	@ 0x68
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	f43f aede 	beq.w	800f286 <_strtod_l+0x43e>
 800f4ca:	9805      	ldr	r0, [sp, #20]
 800f4cc:	2101      	movs	r1, #1
 800f4ce:	f002 fd25 	bl	8011f1c <__i2b>
 800f4d2:	4680      	mov	r8, r0
 800f4d4:	b948      	cbnz	r0, 800f4ea <_strtod_l+0x6a2>
 800f4d6:	f04f 0800 	mov.w	r8, #0
 800f4da:	e6d4      	b.n	800f286 <_strtod_l+0x43e>
 800f4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800f4e4:	ea03 0a0a 	and.w	sl, r3, sl
 800f4e8:	e7b0      	b.n	800f44c <_strtod_l+0x604>
 800f4ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f4ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f4ee:	2d00      	cmp	r5, #0
 800f4f0:	bfab      	itete	ge
 800f4f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f4f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f4f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f4f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f4fa:	bfac      	ite	ge
 800f4fc:	18ef      	addge	r7, r5, r3
 800f4fe:	1b5e      	sublt	r6, r3, r5
 800f500:	9b08      	ldr	r3, [sp, #32]
 800f502:	1aed      	subs	r5, r5, r3
 800f504:	4415      	add	r5, r2
 800f506:	4b66      	ldr	r3, [pc, #408]	@ (800f6a0 <_strtod_l+0x858>)
 800f508:	3d01      	subs	r5, #1
 800f50a:	429d      	cmp	r5, r3
 800f50c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f510:	da50      	bge.n	800f5b4 <_strtod_l+0x76c>
 800f512:	1b5b      	subs	r3, r3, r5
 800f514:	2b1f      	cmp	r3, #31
 800f516:	eba2 0203 	sub.w	r2, r2, r3
 800f51a:	f04f 0101 	mov.w	r1, #1
 800f51e:	dc3d      	bgt.n	800f59c <_strtod_l+0x754>
 800f520:	fa01 f303 	lsl.w	r3, r1, r3
 800f524:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f526:	2300      	movs	r3, #0
 800f528:	9310      	str	r3, [sp, #64]	@ 0x40
 800f52a:	18bd      	adds	r5, r7, r2
 800f52c:	9b08      	ldr	r3, [sp, #32]
 800f52e:	42af      	cmp	r7, r5
 800f530:	4416      	add	r6, r2
 800f532:	441e      	add	r6, r3
 800f534:	463b      	mov	r3, r7
 800f536:	bfa8      	it	ge
 800f538:	462b      	movge	r3, r5
 800f53a:	42b3      	cmp	r3, r6
 800f53c:	bfa8      	it	ge
 800f53e:	4633      	movge	r3, r6
 800f540:	2b00      	cmp	r3, #0
 800f542:	bfc2      	ittt	gt
 800f544:	1aed      	subgt	r5, r5, r3
 800f546:	1af6      	subgt	r6, r6, r3
 800f548:	1aff      	subgt	r7, r7, r3
 800f54a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	dd16      	ble.n	800f57e <_strtod_l+0x736>
 800f550:	4641      	mov	r1, r8
 800f552:	9805      	ldr	r0, [sp, #20]
 800f554:	461a      	mov	r2, r3
 800f556:	f002 fda1 	bl	801209c <__pow5mult>
 800f55a:	4680      	mov	r8, r0
 800f55c:	2800      	cmp	r0, #0
 800f55e:	d0ba      	beq.n	800f4d6 <_strtod_l+0x68e>
 800f560:	4601      	mov	r1, r0
 800f562:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f564:	9805      	ldr	r0, [sp, #20]
 800f566:	f002 fcef 	bl	8011f48 <__multiply>
 800f56a:	900e      	str	r0, [sp, #56]	@ 0x38
 800f56c:	2800      	cmp	r0, #0
 800f56e:	f43f ae8a 	beq.w	800f286 <_strtod_l+0x43e>
 800f572:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f574:	9805      	ldr	r0, [sp, #20]
 800f576:	f002 fbd3 	bl	8011d20 <_Bfree>
 800f57a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f57c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f57e:	2d00      	cmp	r5, #0
 800f580:	dc1d      	bgt.n	800f5be <_strtod_l+0x776>
 800f582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f584:	2b00      	cmp	r3, #0
 800f586:	dd23      	ble.n	800f5d0 <_strtod_l+0x788>
 800f588:	4649      	mov	r1, r9
 800f58a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f58c:	9805      	ldr	r0, [sp, #20]
 800f58e:	f002 fd85 	bl	801209c <__pow5mult>
 800f592:	4681      	mov	r9, r0
 800f594:	b9e0      	cbnz	r0, 800f5d0 <_strtod_l+0x788>
 800f596:	f04f 0900 	mov.w	r9, #0
 800f59a:	e674      	b.n	800f286 <_strtod_l+0x43e>
 800f59c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f5a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f5a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f5a8:	35e2      	adds	r5, #226	@ 0xe2
 800f5aa:	fa01 f305 	lsl.w	r3, r1, r5
 800f5ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800f5b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f5b2:	e7ba      	b.n	800f52a <_strtod_l+0x6e2>
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f5bc:	e7b5      	b.n	800f52a <_strtod_l+0x6e2>
 800f5be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f5c0:	9805      	ldr	r0, [sp, #20]
 800f5c2:	462a      	mov	r2, r5
 800f5c4:	f002 fdc4 	bl	8012150 <__lshift>
 800f5c8:	901a      	str	r0, [sp, #104]	@ 0x68
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	d1d9      	bne.n	800f582 <_strtod_l+0x73a>
 800f5ce:	e65a      	b.n	800f286 <_strtod_l+0x43e>
 800f5d0:	2e00      	cmp	r6, #0
 800f5d2:	dd07      	ble.n	800f5e4 <_strtod_l+0x79c>
 800f5d4:	4649      	mov	r1, r9
 800f5d6:	9805      	ldr	r0, [sp, #20]
 800f5d8:	4632      	mov	r2, r6
 800f5da:	f002 fdb9 	bl	8012150 <__lshift>
 800f5de:	4681      	mov	r9, r0
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	d0d8      	beq.n	800f596 <_strtod_l+0x74e>
 800f5e4:	2f00      	cmp	r7, #0
 800f5e6:	dd08      	ble.n	800f5fa <_strtod_l+0x7b2>
 800f5e8:	4641      	mov	r1, r8
 800f5ea:	9805      	ldr	r0, [sp, #20]
 800f5ec:	463a      	mov	r2, r7
 800f5ee:	f002 fdaf 	bl	8012150 <__lshift>
 800f5f2:	4680      	mov	r8, r0
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	f43f ae46 	beq.w	800f286 <_strtod_l+0x43e>
 800f5fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f5fc:	9805      	ldr	r0, [sp, #20]
 800f5fe:	464a      	mov	r2, r9
 800f600:	f002 fe2e 	bl	8012260 <__mdiff>
 800f604:	4604      	mov	r4, r0
 800f606:	2800      	cmp	r0, #0
 800f608:	f43f ae3d 	beq.w	800f286 <_strtod_l+0x43e>
 800f60c:	68c3      	ldr	r3, [r0, #12]
 800f60e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f610:	2300      	movs	r3, #0
 800f612:	60c3      	str	r3, [r0, #12]
 800f614:	4641      	mov	r1, r8
 800f616:	f002 fe07 	bl	8012228 <__mcmp>
 800f61a:	2800      	cmp	r0, #0
 800f61c:	da46      	bge.n	800f6ac <_strtod_l+0x864>
 800f61e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f620:	ea53 030a 	orrs.w	r3, r3, sl
 800f624:	d16c      	bne.n	800f700 <_strtod_l+0x8b8>
 800f626:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d168      	bne.n	800f700 <_strtod_l+0x8b8>
 800f62e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f632:	0d1b      	lsrs	r3, r3, #20
 800f634:	051b      	lsls	r3, r3, #20
 800f636:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f63a:	d961      	bls.n	800f700 <_strtod_l+0x8b8>
 800f63c:	6963      	ldr	r3, [r4, #20]
 800f63e:	b913      	cbnz	r3, 800f646 <_strtod_l+0x7fe>
 800f640:	6923      	ldr	r3, [r4, #16]
 800f642:	2b01      	cmp	r3, #1
 800f644:	dd5c      	ble.n	800f700 <_strtod_l+0x8b8>
 800f646:	4621      	mov	r1, r4
 800f648:	2201      	movs	r2, #1
 800f64a:	9805      	ldr	r0, [sp, #20]
 800f64c:	f002 fd80 	bl	8012150 <__lshift>
 800f650:	4641      	mov	r1, r8
 800f652:	4604      	mov	r4, r0
 800f654:	f002 fde8 	bl	8012228 <__mcmp>
 800f658:	2800      	cmp	r0, #0
 800f65a:	dd51      	ble.n	800f700 <_strtod_l+0x8b8>
 800f65c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f660:	9a08      	ldr	r2, [sp, #32]
 800f662:	0d1b      	lsrs	r3, r3, #20
 800f664:	051b      	lsls	r3, r3, #20
 800f666:	2a00      	cmp	r2, #0
 800f668:	d06b      	beq.n	800f742 <_strtod_l+0x8fa>
 800f66a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f66e:	d868      	bhi.n	800f742 <_strtod_l+0x8fa>
 800f670:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f674:	f67f ae9d 	bls.w	800f3b2 <_strtod_l+0x56a>
 800f678:	4b0a      	ldr	r3, [pc, #40]	@ (800f6a4 <_strtod_l+0x85c>)
 800f67a:	4650      	mov	r0, sl
 800f67c:	4659      	mov	r1, fp
 800f67e:	2200      	movs	r2, #0
 800f680:	f7f0 fff2 	bl	8000668 <__aeabi_dmul>
 800f684:	4b08      	ldr	r3, [pc, #32]	@ (800f6a8 <_strtod_l+0x860>)
 800f686:	400b      	ands	r3, r1
 800f688:	4682      	mov	sl, r0
 800f68a:	468b      	mov	fp, r1
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	f47f ae05 	bne.w	800f29c <_strtod_l+0x454>
 800f692:	9a05      	ldr	r2, [sp, #20]
 800f694:	2322      	movs	r3, #34	@ 0x22
 800f696:	6013      	str	r3, [r2, #0]
 800f698:	e600      	b.n	800f29c <_strtod_l+0x454>
 800f69a:	bf00      	nop
 800f69c:	08013de8 	.word	0x08013de8
 800f6a0:	fffffc02 	.word	0xfffffc02
 800f6a4:	39500000 	.word	0x39500000
 800f6a8:	7ff00000 	.word	0x7ff00000
 800f6ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f6b0:	d165      	bne.n	800f77e <_strtod_l+0x936>
 800f6b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f6b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6b8:	b35a      	cbz	r2, 800f712 <_strtod_l+0x8ca>
 800f6ba:	4a9f      	ldr	r2, [pc, #636]	@ (800f938 <_strtod_l+0xaf0>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d12b      	bne.n	800f718 <_strtod_l+0x8d0>
 800f6c0:	9b08      	ldr	r3, [sp, #32]
 800f6c2:	4651      	mov	r1, sl
 800f6c4:	b303      	cbz	r3, 800f708 <_strtod_l+0x8c0>
 800f6c6:	4b9d      	ldr	r3, [pc, #628]	@ (800f93c <_strtod_l+0xaf4>)
 800f6c8:	465a      	mov	r2, fp
 800f6ca:	4013      	ands	r3, r2
 800f6cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f6d4:	d81b      	bhi.n	800f70e <_strtod_l+0x8c6>
 800f6d6:	0d1b      	lsrs	r3, r3, #20
 800f6d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f6e0:	4299      	cmp	r1, r3
 800f6e2:	d119      	bne.n	800f718 <_strtod_l+0x8d0>
 800f6e4:	4b96      	ldr	r3, [pc, #600]	@ (800f940 <_strtod_l+0xaf8>)
 800f6e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d102      	bne.n	800f6f2 <_strtod_l+0x8aa>
 800f6ec:	3101      	adds	r1, #1
 800f6ee:	f43f adca 	beq.w	800f286 <_strtod_l+0x43e>
 800f6f2:	4b92      	ldr	r3, [pc, #584]	@ (800f93c <_strtod_l+0xaf4>)
 800f6f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6f6:	401a      	ands	r2, r3
 800f6f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f6fc:	f04f 0a00 	mov.w	sl, #0
 800f700:	9b08      	ldr	r3, [sp, #32]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d1b8      	bne.n	800f678 <_strtod_l+0x830>
 800f706:	e5c9      	b.n	800f29c <_strtod_l+0x454>
 800f708:	f04f 33ff 	mov.w	r3, #4294967295
 800f70c:	e7e8      	b.n	800f6e0 <_strtod_l+0x898>
 800f70e:	4613      	mov	r3, r2
 800f710:	e7e6      	b.n	800f6e0 <_strtod_l+0x898>
 800f712:	ea53 030a 	orrs.w	r3, r3, sl
 800f716:	d0a1      	beq.n	800f65c <_strtod_l+0x814>
 800f718:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f71a:	b1db      	cbz	r3, 800f754 <_strtod_l+0x90c>
 800f71c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f71e:	4213      	tst	r3, r2
 800f720:	d0ee      	beq.n	800f700 <_strtod_l+0x8b8>
 800f722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f724:	9a08      	ldr	r2, [sp, #32]
 800f726:	4650      	mov	r0, sl
 800f728:	4659      	mov	r1, fp
 800f72a:	b1bb      	cbz	r3, 800f75c <_strtod_l+0x914>
 800f72c:	f7ff fb6e 	bl	800ee0c <sulp>
 800f730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f734:	ec53 2b10 	vmov	r2, r3, d0
 800f738:	f7f0 fde0 	bl	80002fc <__adddf3>
 800f73c:	4682      	mov	sl, r0
 800f73e:	468b      	mov	fp, r1
 800f740:	e7de      	b.n	800f700 <_strtod_l+0x8b8>
 800f742:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f746:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f74a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f74e:	f04f 3aff 	mov.w	sl, #4294967295
 800f752:	e7d5      	b.n	800f700 <_strtod_l+0x8b8>
 800f754:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f756:	ea13 0f0a 	tst.w	r3, sl
 800f75a:	e7e1      	b.n	800f720 <_strtod_l+0x8d8>
 800f75c:	f7ff fb56 	bl	800ee0c <sulp>
 800f760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f764:	ec53 2b10 	vmov	r2, r3, d0
 800f768:	f7f0 fdc6 	bl	80002f8 <__aeabi_dsub>
 800f76c:	2200      	movs	r2, #0
 800f76e:	2300      	movs	r3, #0
 800f770:	4682      	mov	sl, r0
 800f772:	468b      	mov	fp, r1
 800f774:	f7f1 f9e0 	bl	8000b38 <__aeabi_dcmpeq>
 800f778:	2800      	cmp	r0, #0
 800f77a:	d0c1      	beq.n	800f700 <_strtod_l+0x8b8>
 800f77c:	e619      	b.n	800f3b2 <_strtod_l+0x56a>
 800f77e:	4641      	mov	r1, r8
 800f780:	4620      	mov	r0, r4
 800f782:	f002 fec9 	bl	8012518 <__ratio>
 800f786:	ec57 6b10 	vmov	r6, r7, d0
 800f78a:	2200      	movs	r2, #0
 800f78c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f790:	4630      	mov	r0, r6
 800f792:	4639      	mov	r1, r7
 800f794:	f7f1 f9e4 	bl	8000b60 <__aeabi_dcmple>
 800f798:	2800      	cmp	r0, #0
 800f79a:	d06f      	beq.n	800f87c <_strtod_l+0xa34>
 800f79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d17a      	bne.n	800f898 <_strtod_l+0xa50>
 800f7a2:	f1ba 0f00 	cmp.w	sl, #0
 800f7a6:	d158      	bne.n	800f85a <_strtod_l+0xa12>
 800f7a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d15a      	bne.n	800f868 <_strtod_l+0xa20>
 800f7b2:	4b64      	ldr	r3, [pc, #400]	@ (800f944 <_strtod_l+0xafc>)
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	4639      	mov	r1, r7
 800f7ba:	f7f1 f9c7 	bl	8000b4c <__aeabi_dcmplt>
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	d159      	bne.n	800f876 <_strtod_l+0xa2e>
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	4639      	mov	r1, r7
 800f7c6:	4b60      	ldr	r3, [pc, #384]	@ (800f948 <_strtod_l+0xb00>)
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f7f0 ff4d 	bl	8000668 <__aeabi_dmul>
 800f7ce:	4606      	mov	r6, r0
 800f7d0:	460f      	mov	r7, r1
 800f7d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f7d6:	9606      	str	r6, [sp, #24]
 800f7d8:	9307      	str	r3, [sp, #28]
 800f7da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7de:	4d57      	ldr	r5, [pc, #348]	@ (800f93c <_strtod_l+0xaf4>)
 800f7e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f7e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7e6:	401d      	ands	r5, r3
 800f7e8:	4b58      	ldr	r3, [pc, #352]	@ (800f94c <_strtod_l+0xb04>)
 800f7ea:	429d      	cmp	r5, r3
 800f7ec:	f040 80b2 	bne.w	800f954 <_strtod_l+0xb0c>
 800f7f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f7f6:	ec4b ab10 	vmov	d0, sl, fp
 800f7fa:	f002 fdc5 	bl	8012388 <__ulp>
 800f7fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f802:	ec51 0b10 	vmov	r0, r1, d0
 800f806:	f7f0 ff2f 	bl	8000668 <__aeabi_dmul>
 800f80a:	4652      	mov	r2, sl
 800f80c:	465b      	mov	r3, fp
 800f80e:	f7f0 fd75 	bl	80002fc <__adddf3>
 800f812:	460b      	mov	r3, r1
 800f814:	4949      	ldr	r1, [pc, #292]	@ (800f93c <_strtod_l+0xaf4>)
 800f816:	4a4e      	ldr	r2, [pc, #312]	@ (800f950 <_strtod_l+0xb08>)
 800f818:	4019      	ands	r1, r3
 800f81a:	4291      	cmp	r1, r2
 800f81c:	4682      	mov	sl, r0
 800f81e:	d942      	bls.n	800f8a6 <_strtod_l+0xa5e>
 800f820:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f822:	4b47      	ldr	r3, [pc, #284]	@ (800f940 <_strtod_l+0xaf8>)
 800f824:	429a      	cmp	r2, r3
 800f826:	d103      	bne.n	800f830 <_strtod_l+0x9e8>
 800f828:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f82a:	3301      	adds	r3, #1
 800f82c:	f43f ad2b 	beq.w	800f286 <_strtod_l+0x43e>
 800f830:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f940 <_strtod_l+0xaf8>
 800f834:	f04f 3aff 	mov.w	sl, #4294967295
 800f838:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f83a:	9805      	ldr	r0, [sp, #20]
 800f83c:	f002 fa70 	bl	8011d20 <_Bfree>
 800f840:	9805      	ldr	r0, [sp, #20]
 800f842:	4649      	mov	r1, r9
 800f844:	f002 fa6c 	bl	8011d20 <_Bfree>
 800f848:	9805      	ldr	r0, [sp, #20]
 800f84a:	4641      	mov	r1, r8
 800f84c:	f002 fa68 	bl	8011d20 <_Bfree>
 800f850:	9805      	ldr	r0, [sp, #20]
 800f852:	4621      	mov	r1, r4
 800f854:	f002 fa64 	bl	8011d20 <_Bfree>
 800f858:	e618      	b.n	800f48c <_strtod_l+0x644>
 800f85a:	f1ba 0f01 	cmp.w	sl, #1
 800f85e:	d103      	bne.n	800f868 <_strtod_l+0xa20>
 800f860:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f862:	2b00      	cmp	r3, #0
 800f864:	f43f ada5 	beq.w	800f3b2 <_strtod_l+0x56a>
 800f868:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f918 <_strtod_l+0xad0>
 800f86c:	4f35      	ldr	r7, [pc, #212]	@ (800f944 <_strtod_l+0xafc>)
 800f86e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f872:	2600      	movs	r6, #0
 800f874:	e7b1      	b.n	800f7da <_strtod_l+0x992>
 800f876:	4f34      	ldr	r7, [pc, #208]	@ (800f948 <_strtod_l+0xb00>)
 800f878:	2600      	movs	r6, #0
 800f87a:	e7aa      	b.n	800f7d2 <_strtod_l+0x98a>
 800f87c:	4b32      	ldr	r3, [pc, #200]	@ (800f948 <_strtod_l+0xb00>)
 800f87e:	4630      	mov	r0, r6
 800f880:	4639      	mov	r1, r7
 800f882:	2200      	movs	r2, #0
 800f884:	f7f0 fef0 	bl	8000668 <__aeabi_dmul>
 800f888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f88a:	4606      	mov	r6, r0
 800f88c:	460f      	mov	r7, r1
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d09f      	beq.n	800f7d2 <_strtod_l+0x98a>
 800f892:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f896:	e7a0      	b.n	800f7da <_strtod_l+0x992>
 800f898:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f920 <_strtod_l+0xad8>
 800f89c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f8a0:	ec57 6b17 	vmov	r6, r7, d7
 800f8a4:	e799      	b.n	800f7da <_strtod_l+0x992>
 800f8a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f8aa:	9b08      	ldr	r3, [sp, #32]
 800f8ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d1c1      	bne.n	800f838 <_strtod_l+0x9f0>
 800f8b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f8b8:	0d1b      	lsrs	r3, r3, #20
 800f8ba:	051b      	lsls	r3, r3, #20
 800f8bc:	429d      	cmp	r5, r3
 800f8be:	d1bb      	bne.n	800f838 <_strtod_l+0x9f0>
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	4639      	mov	r1, r7
 800f8c4:	f7f1 fa30 	bl	8000d28 <__aeabi_d2lz>
 800f8c8:	f7f0 fea0 	bl	800060c <__aeabi_l2d>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	4639      	mov	r1, r7
 800f8d4:	f7f0 fd10 	bl	80002f8 <__aeabi_dsub>
 800f8d8:	460b      	mov	r3, r1
 800f8da:	4602      	mov	r2, r0
 800f8dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f8e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8e6:	ea46 060a 	orr.w	r6, r6, sl
 800f8ea:	431e      	orrs	r6, r3
 800f8ec:	d06f      	beq.n	800f9ce <_strtod_l+0xb86>
 800f8ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800f928 <_strtod_l+0xae0>)
 800f8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f4:	f7f1 f92a 	bl	8000b4c <__aeabi_dcmplt>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	f47f accf 	bne.w	800f29c <_strtod_l+0x454>
 800f8fe:	a30c      	add	r3, pc, #48	@ (adr r3, 800f930 <_strtod_l+0xae8>)
 800f900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f904:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f908:	f7f1 f93e 	bl	8000b88 <__aeabi_dcmpgt>
 800f90c:	2800      	cmp	r0, #0
 800f90e:	d093      	beq.n	800f838 <_strtod_l+0x9f0>
 800f910:	e4c4      	b.n	800f29c <_strtod_l+0x454>
 800f912:	bf00      	nop
 800f914:	f3af 8000 	nop.w
 800f918:	00000000 	.word	0x00000000
 800f91c:	bff00000 	.word	0xbff00000
 800f920:	00000000 	.word	0x00000000
 800f924:	3ff00000 	.word	0x3ff00000
 800f928:	94a03595 	.word	0x94a03595
 800f92c:	3fdfffff 	.word	0x3fdfffff
 800f930:	35afe535 	.word	0x35afe535
 800f934:	3fe00000 	.word	0x3fe00000
 800f938:	000fffff 	.word	0x000fffff
 800f93c:	7ff00000 	.word	0x7ff00000
 800f940:	7fefffff 	.word	0x7fefffff
 800f944:	3ff00000 	.word	0x3ff00000
 800f948:	3fe00000 	.word	0x3fe00000
 800f94c:	7fe00000 	.word	0x7fe00000
 800f950:	7c9fffff 	.word	0x7c9fffff
 800f954:	9b08      	ldr	r3, [sp, #32]
 800f956:	b323      	cbz	r3, 800f9a2 <_strtod_l+0xb5a>
 800f958:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f95c:	d821      	bhi.n	800f9a2 <_strtod_l+0xb5a>
 800f95e:	a328      	add	r3, pc, #160	@ (adr r3, 800fa00 <_strtod_l+0xbb8>)
 800f960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f964:	4630      	mov	r0, r6
 800f966:	4639      	mov	r1, r7
 800f968:	f7f1 f8fa 	bl	8000b60 <__aeabi_dcmple>
 800f96c:	b1a0      	cbz	r0, 800f998 <_strtod_l+0xb50>
 800f96e:	4639      	mov	r1, r7
 800f970:	4630      	mov	r0, r6
 800f972:	f7f1 f951 	bl	8000c18 <__aeabi_d2uiz>
 800f976:	2801      	cmp	r0, #1
 800f978:	bf38      	it	cc
 800f97a:	2001      	movcc	r0, #1
 800f97c:	f7f0 fdfa 	bl	8000574 <__aeabi_ui2d>
 800f980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f982:	4606      	mov	r6, r0
 800f984:	460f      	mov	r7, r1
 800f986:	b9fb      	cbnz	r3, 800f9c8 <_strtod_l+0xb80>
 800f988:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f98c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f98e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f990:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f994:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f998:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f99a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f99e:	1b5b      	subs	r3, r3, r5
 800f9a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f9a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f9a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f9aa:	f002 fced 	bl	8012388 <__ulp>
 800f9ae:	4650      	mov	r0, sl
 800f9b0:	ec53 2b10 	vmov	r2, r3, d0
 800f9b4:	4659      	mov	r1, fp
 800f9b6:	f7f0 fe57 	bl	8000668 <__aeabi_dmul>
 800f9ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f9be:	f7f0 fc9d 	bl	80002fc <__adddf3>
 800f9c2:	4682      	mov	sl, r0
 800f9c4:	468b      	mov	fp, r1
 800f9c6:	e770      	b.n	800f8aa <_strtod_l+0xa62>
 800f9c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f9cc:	e7e0      	b.n	800f990 <_strtod_l+0xb48>
 800f9ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800fa08 <_strtod_l+0xbc0>)
 800f9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d4:	f7f1 f8ba 	bl	8000b4c <__aeabi_dcmplt>
 800f9d8:	e798      	b.n	800f90c <_strtod_l+0xac4>
 800f9da:	2300      	movs	r3, #0
 800f9dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f9e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f9e2:	6013      	str	r3, [r2, #0]
 800f9e4:	f7ff ba6d 	b.w	800eec2 <_strtod_l+0x7a>
 800f9e8:	2a65      	cmp	r2, #101	@ 0x65
 800f9ea:	f43f ab66 	beq.w	800f0ba <_strtod_l+0x272>
 800f9ee:	2a45      	cmp	r2, #69	@ 0x45
 800f9f0:	f43f ab63 	beq.w	800f0ba <_strtod_l+0x272>
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	f7ff bb9e 	b.w	800f136 <_strtod_l+0x2ee>
 800f9fa:	bf00      	nop
 800f9fc:	f3af 8000 	nop.w
 800fa00:	ffc00000 	.word	0xffc00000
 800fa04:	41dfffff 	.word	0x41dfffff
 800fa08:	94a03595 	.word	0x94a03595
 800fa0c:	3fcfffff 	.word	0x3fcfffff

0800fa10 <strtod>:
 800fa10:	460a      	mov	r2, r1
 800fa12:	4601      	mov	r1, r0
 800fa14:	4802      	ldr	r0, [pc, #8]	@ (800fa20 <strtod+0x10>)
 800fa16:	4b03      	ldr	r3, [pc, #12]	@ (800fa24 <strtod+0x14>)
 800fa18:	6800      	ldr	r0, [r0, #0]
 800fa1a:	f7ff ba15 	b.w	800ee48 <_strtod_l>
 800fa1e:	bf00      	nop
 800fa20:	200001a0 	.word	0x200001a0
 800fa24:	20000034 	.word	0x20000034

0800fa28 <__cvt>:
 800fa28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa2c:	ec57 6b10 	vmov	r6, r7, d0
 800fa30:	2f00      	cmp	r7, #0
 800fa32:	460c      	mov	r4, r1
 800fa34:	4619      	mov	r1, r3
 800fa36:	463b      	mov	r3, r7
 800fa38:	bfbb      	ittet	lt
 800fa3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fa3e:	461f      	movlt	r7, r3
 800fa40:	2300      	movge	r3, #0
 800fa42:	232d      	movlt	r3, #45	@ 0x2d
 800fa44:	700b      	strb	r3, [r1, #0]
 800fa46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fa4c:	4691      	mov	r9, r2
 800fa4e:	f023 0820 	bic.w	r8, r3, #32
 800fa52:	bfbc      	itt	lt
 800fa54:	4632      	movlt	r2, r6
 800fa56:	4616      	movlt	r6, r2
 800fa58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fa5c:	d005      	beq.n	800fa6a <__cvt+0x42>
 800fa5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fa62:	d100      	bne.n	800fa66 <__cvt+0x3e>
 800fa64:	3401      	adds	r4, #1
 800fa66:	2102      	movs	r1, #2
 800fa68:	e000      	b.n	800fa6c <__cvt+0x44>
 800fa6a:	2103      	movs	r1, #3
 800fa6c:	ab03      	add	r3, sp, #12
 800fa6e:	9301      	str	r3, [sp, #4]
 800fa70:	ab02      	add	r3, sp, #8
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	ec47 6b10 	vmov	d0, r6, r7
 800fa78:	4653      	mov	r3, sl
 800fa7a:	4622      	mov	r2, r4
 800fa7c:	f000 ff00 	bl	8010880 <_dtoa_r>
 800fa80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fa84:	4605      	mov	r5, r0
 800fa86:	d119      	bne.n	800fabc <__cvt+0x94>
 800fa88:	f019 0f01 	tst.w	r9, #1
 800fa8c:	d00e      	beq.n	800faac <__cvt+0x84>
 800fa8e:	eb00 0904 	add.w	r9, r0, r4
 800fa92:	2200      	movs	r2, #0
 800fa94:	2300      	movs	r3, #0
 800fa96:	4630      	mov	r0, r6
 800fa98:	4639      	mov	r1, r7
 800fa9a:	f7f1 f84d 	bl	8000b38 <__aeabi_dcmpeq>
 800fa9e:	b108      	cbz	r0, 800faa4 <__cvt+0x7c>
 800faa0:	f8cd 900c 	str.w	r9, [sp, #12]
 800faa4:	2230      	movs	r2, #48	@ 0x30
 800faa6:	9b03      	ldr	r3, [sp, #12]
 800faa8:	454b      	cmp	r3, r9
 800faaa:	d31e      	bcc.n	800faea <__cvt+0xc2>
 800faac:	9b03      	ldr	r3, [sp, #12]
 800faae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fab0:	1b5b      	subs	r3, r3, r5
 800fab2:	4628      	mov	r0, r5
 800fab4:	6013      	str	r3, [r2, #0]
 800fab6:	b004      	add	sp, #16
 800fab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fabc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fac0:	eb00 0904 	add.w	r9, r0, r4
 800fac4:	d1e5      	bne.n	800fa92 <__cvt+0x6a>
 800fac6:	7803      	ldrb	r3, [r0, #0]
 800fac8:	2b30      	cmp	r3, #48	@ 0x30
 800faca:	d10a      	bne.n	800fae2 <__cvt+0xba>
 800facc:	2200      	movs	r2, #0
 800face:	2300      	movs	r3, #0
 800fad0:	4630      	mov	r0, r6
 800fad2:	4639      	mov	r1, r7
 800fad4:	f7f1 f830 	bl	8000b38 <__aeabi_dcmpeq>
 800fad8:	b918      	cbnz	r0, 800fae2 <__cvt+0xba>
 800fada:	f1c4 0401 	rsb	r4, r4, #1
 800fade:	f8ca 4000 	str.w	r4, [sl]
 800fae2:	f8da 3000 	ldr.w	r3, [sl]
 800fae6:	4499      	add	r9, r3
 800fae8:	e7d3      	b.n	800fa92 <__cvt+0x6a>
 800faea:	1c59      	adds	r1, r3, #1
 800faec:	9103      	str	r1, [sp, #12]
 800faee:	701a      	strb	r2, [r3, #0]
 800faf0:	e7d9      	b.n	800faa6 <__cvt+0x7e>

0800faf2 <__exponent>:
 800faf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800faf4:	2900      	cmp	r1, #0
 800faf6:	bfba      	itte	lt
 800faf8:	4249      	neglt	r1, r1
 800fafa:	232d      	movlt	r3, #45	@ 0x2d
 800fafc:	232b      	movge	r3, #43	@ 0x2b
 800fafe:	2909      	cmp	r1, #9
 800fb00:	7002      	strb	r2, [r0, #0]
 800fb02:	7043      	strb	r3, [r0, #1]
 800fb04:	dd29      	ble.n	800fb5a <__exponent+0x68>
 800fb06:	f10d 0307 	add.w	r3, sp, #7
 800fb0a:	461d      	mov	r5, r3
 800fb0c:	270a      	movs	r7, #10
 800fb0e:	461a      	mov	r2, r3
 800fb10:	fbb1 f6f7 	udiv	r6, r1, r7
 800fb14:	fb07 1416 	mls	r4, r7, r6, r1
 800fb18:	3430      	adds	r4, #48	@ 0x30
 800fb1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fb1e:	460c      	mov	r4, r1
 800fb20:	2c63      	cmp	r4, #99	@ 0x63
 800fb22:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb26:	4631      	mov	r1, r6
 800fb28:	dcf1      	bgt.n	800fb0e <__exponent+0x1c>
 800fb2a:	3130      	adds	r1, #48	@ 0x30
 800fb2c:	1e94      	subs	r4, r2, #2
 800fb2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fb32:	1c41      	adds	r1, r0, #1
 800fb34:	4623      	mov	r3, r4
 800fb36:	42ab      	cmp	r3, r5
 800fb38:	d30a      	bcc.n	800fb50 <__exponent+0x5e>
 800fb3a:	f10d 0309 	add.w	r3, sp, #9
 800fb3e:	1a9b      	subs	r3, r3, r2
 800fb40:	42ac      	cmp	r4, r5
 800fb42:	bf88      	it	hi
 800fb44:	2300      	movhi	r3, #0
 800fb46:	3302      	adds	r3, #2
 800fb48:	4403      	add	r3, r0
 800fb4a:	1a18      	subs	r0, r3, r0
 800fb4c:	b003      	add	sp, #12
 800fb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb50:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fb54:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fb58:	e7ed      	b.n	800fb36 <__exponent+0x44>
 800fb5a:	2330      	movs	r3, #48	@ 0x30
 800fb5c:	3130      	adds	r1, #48	@ 0x30
 800fb5e:	7083      	strb	r3, [r0, #2]
 800fb60:	70c1      	strb	r1, [r0, #3]
 800fb62:	1d03      	adds	r3, r0, #4
 800fb64:	e7f1      	b.n	800fb4a <__exponent+0x58>
	...

0800fb68 <_printf_float>:
 800fb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb6c:	b08d      	sub	sp, #52	@ 0x34
 800fb6e:	460c      	mov	r4, r1
 800fb70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fb74:	4616      	mov	r6, r2
 800fb76:	461f      	mov	r7, r3
 800fb78:	4605      	mov	r5, r0
 800fb7a:	f000 fd49 	bl	8010610 <_localeconv_r>
 800fb7e:	6803      	ldr	r3, [r0, #0]
 800fb80:	9304      	str	r3, [sp, #16]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7f0 fbac 	bl	80002e0 <strlen>
 800fb88:	2300      	movs	r3, #0
 800fb8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb8c:	f8d8 3000 	ldr.w	r3, [r8]
 800fb90:	9005      	str	r0, [sp, #20]
 800fb92:	3307      	adds	r3, #7
 800fb94:	f023 0307 	bic.w	r3, r3, #7
 800fb98:	f103 0208 	add.w	r2, r3, #8
 800fb9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fba0:	f8d4 b000 	ldr.w	fp, [r4]
 800fba4:	f8c8 2000 	str.w	r2, [r8]
 800fba8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fbac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fbb0:	9307      	str	r3, [sp, #28]
 800fbb2:	f8cd 8018 	str.w	r8, [sp, #24]
 800fbb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fbba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fbbe:	4b9c      	ldr	r3, [pc, #624]	@ (800fe30 <_printf_float+0x2c8>)
 800fbc0:	f04f 32ff 	mov.w	r2, #4294967295
 800fbc4:	f7f0 ffea 	bl	8000b9c <__aeabi_dcmpun>
 800fbc8:	bb70      	cbnz	r0, 800fc28 <_printf_float+0xc0>
 800fbca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fbce:	4b98      	ldr	r3, [pc, #608]	@ (800fe30 <_printf_float+0x2c8>)
 800fbd0:	f04f 32ff 	mov.w	r2, #4294967295
 800fbd4:	f7f0 ffc4 	bl	8000b60 <__aeabi_dcmple>
 800fbd8:	bb30      	cbnz	r0, 800fc28 <_printf_float+0xc0>
 800fbda:	2200      	movs	r2, #0
 800fbdc:	2300      	movs	r3, #0
 800fbde:	4640      	mov	r0, r8
 800fbe0:	4649      	mov	r1, r9
 800fbe2:	f7f0 ffb3 	bl	8000b4c <__aeabi_dcmplt>
 800fbe6:	b110      	cbz	r0, 800fbee <_printf_float+0x86>
 800fbe8:	232d      	movs	r3, #45	@ 0x2d
 800fbea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fbee:	4a91      	ldr	r2, [pc, #580]	@ (800fe34 <_printf_float+0x2cc>)
 800fbf0:	4b91      	ldr	r3, [pc, #580]	@ (800fe38 <_printf_float+0x2d0>)
 800fbf2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fbf6:	bf94      	ite	ls
 800fbf8:	4690      	movls	r8, r2
 800fbfa:	4698      	movhi	r8, r3
 800fbfc:	2303      	movs	r3, #3
 800fbfe:	6123      	str	r3, [r4, #16]
 800fc00:	f02b 0304 	bic.w	r3, fp, #4
 800fc04:	6023      	str	r3, [r4, #0]
 800fc06:	f04f 0900 	mov.w	r9, #0
 800fc0a:	9700      	str	r7, [sp, #0]
 800fc0c:	4633      	mov	r3, r6
 800fc0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fc10:	4621      	mov	r1, r4
 800fc12:	4628      	mov	r0, r5
 800fc14:	f000 f9d2 	bl	800ffbc <_printf_common>
 800fc18:	3001      	adds	r0, #1
 800fc1a:	f040 808d 	bne.w	800fd38 <_printf_float+0x1d0>
 800fc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc22:	b00d      	add	sp, #52	@ 0x34
 800fc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc28:	4642      	mov	r2, r8
 800fc2a:	464b      	mov	r3, r9
 800fc2c:	4640      	mov	r0, r8
 800fc2e:	4649      	mov	r1, r9
 800fc30:	f7f0 ffb4 	bl	8000b9c <__aeabi_dcmpun>
 800fc34:	b140      	cbz	r0, 800fc48 <_printf_float+0xe0>
 800fc36:	464b      	mov	r3, r9
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	bfbc      	itt	lt
 800fc3c:	232d      	movlt	r3, #45	@ 0x2d
 800fc3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fc42:	4a7e      	ldr	r2, [pc, #504]	@ (800fe3c <_printf_float+0x2d4>)
 800fc44:	4b7e      	ldr	r3, [pc, #504]	@ (800fe40 <_printf_float+0x2d8>)
 800fc46:	e7d4      	b.n	800fbf2 <_printf_float+0x8a>
 800fc48:	6863      	ldr	r3, [r4, #4]
 800fc4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fc4e:	9206      	str	r2, [sp, #24]
 800fc50:	1c5a      	adds	r2, r3, #1
 800fc52:	d13b      	bne.n	800fccc <_printf_float+0x164>
 800fc54:	2306      	movs	r3, #6
 800fc56:	6063      	str	r3, [r4, #4]
 800fc58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	6022      	str	r2, [r4, #0]
 800fc60:	9303      	str	r3, [sp, #12]
 800fc62:	ab0a      	add	r3, sp, #40	@ 0x28
 800fc64:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fc68:	ab09      	add	r3, sp, #36	@ 0x24
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	6861      	ldr	r1, [r4, #4]
 800fc6e:	ec49 8b10 	vmov	d0, r8, r9
 800fc72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fc76:	4628      	mov	r0, r5
 800fc78:	f7ff fed6 	bl	800fa28 <__cvt>
 800fc7c:	9b06      	ldr	r3, [sp, #24]
 800fc7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc80:	2b47      	cmp	r3, #71	@ 0x47
 800fc82:	4680      	mov	r8, r0
 800fc84:	d129      	bne.n	800fcda <_printf_float+0x172>
 800fc86:	1cc8      	adds	r0, r1, #3
 800fc88:	db02      	blt.n	800fc90 <_printf_float+0x128>
 800fc8a:	6863      	ldr	r3, [r4, #4]
 800fc8c:	4299      	cmp	r1, r3
 800fc8e:	dd41      	ble.n	800fd14 <_printf_float+0x1ac>
 800fc90:	f1aa 0a02 	sub.w	sl, sl, #2
 800fc94:	fa5f fa8a 	uxtb.w	sl, sl
 800fc98:	3901      	subs	r1, #1
 800fc9a:	4652      	mov	r2, sl
 800fc9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fca0:	9109      	str	r1, [sp, #36]	@ 0x24
 800fca2:	f7ff ff26 	bl	800faf2 <__exponent>
 800fca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fca8:	1813      	adds	r3, r2, r0
 800fcaa:	2a01      	cmp	r2, #1
 800fcac:	4681      	mov	r9, r0
 800fcae:	6123      	str	r3, [r4, #16]
 800fcb0:	dc02      	bgt.n	800fcb8 <_printf_float+0x150>
 800fcb2:	6822      	ldr	r2, [r4, #0]
 800fcb4:	07d2      	lsls	r2, r2, #31
 800fcb6:	d501      	bpl.n	800fcbc <_printf_float+0x154>
 800fcb8:	3301      	adds	r3, #1
 800fcba:	6123      	str	r3, [r4, #16]
 800fcbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d0a2      	beq.n	800fc0a <_printf_float+0xa2>
 800fcc4:	232d      	movs	r3, #45	@ 0x2d
 800fcc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fcca:	e79e      	b.n	800fc0a <_printf_float+0xa2>
 800fccc:	9a06      	ldr	r2, [sp, #24]
 800fcce:	2a47      	cmp	r2, #71	@ 0x47
 800fcd0:	d1c2      	bne.n	800fc58 <_printf_float+0xf0>
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d1c0      	bne.n	800fc58 <_printf_float+0xf0>
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	e7bd      	b.n	800fc56 <_printf_float+0xee>
 800fcda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fcde:	d9db      	bls.n	800fc98 <_printf_float+0x130>
 800fce0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fce4:	d118      	bne.n	800fd18 <_printf_float+0x1b0>
 800fce6:	2900      	cmp	r1, #0
 800fce8:	6863      	ldr	r3, [r4, #4]
 800fcea:	dd0b      	ble.n	800fd04 <_printf_float+0x19c>
 800fcec:	6121      	str	r1, [r4, #16]
 800fcee:	b913      	cbnz	r3, 800fcf6 <_printf_float+0x18e>
 800fcf0:	6822      	ldr	r2, [r4, #0]
 800fcf2:	07d0      	lsls	r0, r2, #31
 800fcf4:	d502      	bpl.n	800fcfc <_printf_float+0x194>
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	440b      	add	r3, r1
 800fcfa:	6123      	str	r3, [r4, #16]
 800fcfc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fcfe:	f04f 0900 	mov.w	r9, #0
 800fd02:	e7db      	b.n	800fcbc <_printf_float+0x154>
 800fd04:	b913      	cbnz	r3, 800fd0c <_printf_float+0x1a4>
 800fd06:	6822      	ldr	r2, [r4, #0]
 800fd08:	07d2      	lsls	r2, r2, #31
 800fd0a:	d501      	bpl.n	800fd10 <_printf_float+0x1a8>
 800fd0c:	3302      	adds	r3, #2
 800fd0e:	e7f4      	b.n	800fcfa <_printf_float+0x192>
 800fd10:	2301      	movs	r3, #1
 800fd12:	e7f2      	b.n	800fcfa <_printf_float+0x192>
 800fd14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fd18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd1a:	4299      	cmp	r1, r3
 800fd1c:	db05      	blt.n	800fd2a <_printf_float+0x1c2>
 800fd1e:	6823      	ldr	r3, [r4, #0]
 800fd20:	6121      	str	r1, [r4, #16]
 800fd22:	07d8      	lsls	r0, r3, #31
 800fd24:	d5ea      	bpl.n	800fcfc <_printf_float+0x194>
 800fd26:	1c4b      	adds	r3, r1, #1
 800fd28:	e7e7      	b.n	800fcfa <_printf_float+0x192>
 800fd2a:	2900      	cmp	r1, #0
 800fd2c:	bfd4      	ite	le
 800fd2e:	f1c1 0202 	rsble	r2, r1, #2
 800fd32:	2201      	movgt	r2, #1
 800fd34:	4413      	add	r3, r2
 800fd36:	e7e0      	b.n	800fcfa <_printf_float+0x192>
 800fd38:	6823      	ldr	r3, [r4, #0]
 800fd3a:	055a      	lsls	r2, r3, #21
 800fd3c:	d407      	bmi.n	800fd4e <_printf_float+0x1e6>
 800fd3e:	6923      	ldr	r3, [r4, #16]
 800fd40:	4642      	mov	r2, r8
 800fd42:	4631      	mov	r1, r6
 800fd44:	4628      	mov	r0, r5
 800fd46:	47b8      	blx	r7
 800fd48:	3001      	adds	r0, #1
 800fd4a:	d12b      	bne.n	800fda4 <_printf_float+0x23c>
 800fd4c:	e767      	b.n	800fc1e <_printf_float+0xb6>
 800fd4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fd52:	f240 80dd 	bls.w	800ff10 <_printf_float+0x3a8>
 800fd56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	f7f0 feeb 	bl	8000b38 <__aeabi_dcmpeq>
 800fd62:	2800      	cmp	r0, #0
 800fd64:	d033      	beq.n	800fdce <_printf_float+0x266>
 800fd66:	4a37      	ldr	r2, [pc, #220]	@ (800fe44 <_printf_float+0x2dc>)
 800fd68:	2301      	movs	r3, #1
 800fd6a:	4631      	mov	r1, r6
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	47b8      	blx	r7
 800fd70:	3001      	adds	r0, #1
 800fd72:	f43f af54 	beq.w	800fc1e <_printf_float+0xb6>
 800fd76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fd7a:	4543      	cmp	r3, r8
 800fd7c:	db02      	blt.n	800fd84 <_printf_float+0x21c>
 800fd7e:	6823      	ldr	r3, [r4, #0]
 800fd80:	07d8      	lsls	r0, r3, #31
 800fd82:	d50f      	bpl.n	800fda4 <_printf_float+0x23c>
 800fd84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd88:	4631      	mov	r1, r6
 800fd8a:	4628      	mov	r0, r5
 800fd8c:	47b8      	blx	r7
 800fd8e:	3001      	adds	r0, #1
 800fd90:	f43f af45 	beq.w	800fc1e <_printf_float+0xb6>
 800fd94:	f04f 0900 	mov.w	r9, #0
 800fd98:	f108 38ff 	add.w	r8, r8, #4294967295
 800fd9c:	f104 0a1a 	add.w	sl, r4, #26
 800fda0:	45c8      	cmp	r8, r9
 800fda2:	dc09      	bgt.n	800fdb8 <_printf_float+0x250>
 800fda4:	6823      	ldr	r3, [r4, #0]
 800fda6:	079b      	lsls	r3, r3, #30
 800fda8:	f100 8103 	bmi.w	800ffb2 <_printf_float+0x44a>
 800fdac:	68e0      	ldr	r0, [r4, #12]
 800fdae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdb0:	4298      	cmp	r0, r3
 800fdb2:	bfb8      	it	lt
 800fdb4:	4618      	movlt	r0, r3
 800fdb6:	e734      	b.n	800fc22 <_printf_float+0xba>
 800fdb8:	2301      	movs	r3, #1
 800fdba:	4652      	mov	r2, sl
 800fdbc:	4631      	mov	r1, r6
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	47b8      	blx	r7
 800fdc2:	3001      	adds	r0, #1
 800fdc4:	f43f af2b 	beq.w	800fc1e <_printf_float+0xb6>
 800fdc8:	f109 0901 	add.w	r9, r9, #1
 800fdcc:	e7e8      	b.n	800fda0 <_printf_float+0x238>
 800fdce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	dc39      	bgt.n	800fe48 <_printf_float+0x2e0>
 800fdd4:	4a1b      	ldr	r2, [pc, #108]	@ (800fe44 <_printf_float+0x2dc>)
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	4631      	mov	r1, r6
 800fdda:	4628      	mov	r0, r5
 800fddc:	47b8      	blx	r7
 800fdde:	3001      	adds	r0, #1
 800fde0:	f43f af1d 	beq.w	800fc1e <_printf_float+0xb6>
 800fde4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fde8:	ea59 0303 	orrs.w	r3, r9, r3
 800fdec:	d102      	bne.n	800fdf4 <_printf_float+0x28c>
 800fdee:	6823      	ldr	r3, [r4, #0]
 800fdf0:	07d9      	lsls	r1, r3, #31
 800fdf2:	d5d7      	bpl.n	800fda4 <_printf_float+0x23c>
 800fdf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdf8:	4631      	mov	r1, r6
 800fdfa:	4628      	mov	r0, r5
 800fdfc:	47b8      	blx	r7
 800fdfe:	3001      	adds	r0, #1
 800fe00:	f43f af0d 	beq.w	800fc1e <_printf_float+0xb6>
 800fe04:	f04f 0a00 	mov.w	sl, #0
 800fe08:	f104 0b1a 	add.w	fp, r4, #26
 800fe0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe0e:	425b      	negs	r3, r3
 800fe10:	4553      	cmp	r3, sl
 800fe12:	dc01      	bgt.n	800fe18 <_printf_float+0x2b0>
 800fe14:	464b      	mov	r3, r9
 800fe16:	e793      	b.n	800fd40 <_printf_float+0x1d8>
 800fe18:	2301      	movs	r3, #1
 800fe1a:	465a      	mov	r2, fp
 800fe1c:	4631      	mov	r1, r6
 800fe1e:	4628      	mov	r0, r5
 800fe20:	47b8      	blx	r7
 800fe22:	3001      	adds	r0, #1
 800fe24:	f43f aefb 	beq.w	800fc1e <_printf_float+0xb6>
 800fe28:	f10a 0a01 	add.w	sl, sl, #1
 800fe2c:	e7ee      	b.n	800fe0c <_printf_float+0x2a4>
 800fe2e:	bf00      	nop
 800fe30:	7fefffff 	.word	0x7fefffff
 800fe34:	08013e10 	.word	0x08013e10
 800fe38:	08013e14 	.word	0x08013e14
 800fe3c:	08013e18 	.word	0x08013e18
 800fe40:	08013e1c 	.word	0x08013e1c
 800fe44:	08013e20 	.word	0x08013e20
 800fe48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fe4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fe4e:	4553      	cmp	r3, sl
 800fe50:	bfa8      	it	ge
 800fe52:	4653      	movge	r3, sl
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	4699      	mov	r9, r3
 800fe58:	dc36      	bgt.n	800fec8 <_printf_float+0x360>
 800fe5a:	f04f 0b00 	mov.w	fp, #0
 800fe5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fe62:	f104 021a 	add.w	r2, r4, #26
 800fe66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fe68:	9306      	str	r3, [sp, #24]
 800fe6a:	eba3 0309 	sub.w	r3, r3, r9
 800fe6e:	455b      	cmp	r3, fp
 800fe70:	dc31      	bgt.n	800fed6 <_printf_float+0x36e>
 800fe72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe74:	459a      	cmp	sl, r3
 800fe76:	dc3a      	bgt.n	800feee <_printf_float+0x386>
 800fe78:	6823      	ldr	r3, [r4, #0]
 800fe7a:	07da      	lsls	r2, r3, #31
 800fe7c:	d437      	bmi.n	800feee <_printf_float+0x386>
 800fe7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe80:	ebaa 0903 	sub.w	r9, sl, r3
 800fe84:	9b06      	ldr	r3, [sp, #24]
 800fe86:	ebaa 0303 	sub.w	r3, sl, r3
 800fe8a:	4599      	cmp	r9, r3
 800fe8c:	bfa8      	it	ge
 800fe8e:	4699      	movge	r9, r3
 800fe90:	f1b9 0f00 	cmp.w	r9, #0
 800fe94:	dc33      	bgt.n	800fefe <_printf_float+0x396>
 800fe96:	f04f 0800 	mov.w	r8, #0
 800fe9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fe9e:	f104 0b1a 	add.w	fp, r4, #26
 800fea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fea4:	ebaa 0303 	sub.w	r3, sl, r3
 800fea8:	eba3 0309 	sub.w	r3, r3, r9
 800feac:	4543      	cmp	r3, r8
 800feae:	f77f af79 	ble.w	800fda4 <_printf_float+0x23c>
 800feb2:	2301      	movs	r3, #1
 800feb4:	465a      	mov	r2, fp
 800feb6:	4631      	mov	r1, r6
 800feb8:	4628      	mov	r0, r5
 800feba:	47b8      	blx	r7
 800febc:	3001      	adds	r0, #1
 800febe:	f43f aeae 	beq.w	800fc1e <_printf_float+0xb6>
 800fec2:	f108 0801 	add.w	r8, r8, #1
 800fec6:	e7ec      	b.n	800fea2 <_printf_float+0x33a>
 800fec8:	4642      	mov	r2, r8
 800feca:	4631      	mov	r1, r6
 800fecc:	4628      	mov	r0, r5
 800fece:	47b8      	blx	r7
 800fed0:	3001      	adds	r0, #1
 800fed2:	d1c2      	bne.n	800fe5a <_printf_float+0x2f2>
 800fed4:	e6a3      	b.n	800fc1e <_printf_float+0xb6>
 800fed6:	2301      	movs	r3, #1
 800fed8:	4631      	mov	r1, r6
 800feda:	4628      	mov	r0, r5
 800fedc:	9206      	str	r2, [sp, #24]
 800fede:	47b8      	blx	r7
 800fee0:	3001      	adds	r0, #1
 800fee2:	f43f ae9c 	beq.w	800fc1e <_printf_float+0xb6>
 800fee6:	9a06      	ldr	r2, [sp, #24]
 800fee8:	f10b 0b01 	add.w	fp, fp, #1
 800feec:	e7bb      	b.n	800fe66 <_printf_float+0x2fe>
 800feee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fef2:	4631      	mov	r1, r6
 800fef4:	4628      	mov	r0, r5
 800fef6:	47b8      	blx	r7
 800fef8:	3001      	adds	r0, #1
 800fefa:	d1c0      	bne.n	800fe7e <_printf_float+0x316>
 800fefc:	e68f      	b.n	800fc1e <_printf_float+0xb6>
 800fefe:	9a06      	ldr	r2, [sp, #24]
 800ff00:	464b      	mov	r3, r9
 800ff02:	4442      	add	r2, r8
 800ff04:	4631      	mov	r1, r6
 800ff06:	4628      	mov	r0, r5
 800ff08:	47b8      	blx	r7
 800ff0a:	3001      	adds	r0, #1
 800ff0c:	d1c3      	bne.n	800fe96 <_printf_float+0x32e>
 800ff0e:	e686      	b.n	800fc1e <_printf_float+0xb6>
 800ff10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ff14:	f1ba 0f01 	cmp.w	sl, #1
 800ff18:	dc01      	bgt.n	800ff1e <_printf_float+0x3b6>
 800ff1a:	07db      	lsls	r3, r3, #31
 800ff1c:	d536      	bpl.n	800ff8c <_printf_float+0x424>
 800ff1e:	2301      	movs	r3, #1
 800ff20:	4642      	mov	r2, r8
 800ff22:	4631      	mov	r1, r6
 800ff24:	4628      	mov	r0, r5
 800ff26:	47b8      	blx	r7
 800ff28:	3001      	adds	r0, #1
 800ff2a:	f43f ae78 	beq.w	800fc1e <_printf_float+0xb6>
 800ff2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff32:	4631      	mov	r1, r6
 800ff34:	4628      	mov	r0, r5
 800ff36:	47b8      	blx	r7
 800ff38:	3001      	adds	r0, #1
 800ff3a:	f43f ae70 	beq.w	800fc1e <_printf_float+0xb6>
 800ff3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ff42:	2200      	movs	r2, #0
 800ff44:	2300      	movs	r3, #0
 800ff46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff4a:	f7f0 fdf5 	bl	8000b38 <__aeabi_dcmpeq>
 800ff4e:	b9c0      	cbnz	r0, 800ff82 <_printf_float+0x41a>
 800ff50:	4653      	mov	r3, sl
 800ff52:	f108 0201 	add.w	r2, r8, #1
 800ff56:	4631      	mov	r1, r6
 800ff58:	4628      	mov	r0, r5
 800ff5a:	47b8      	blx	r7
 800ff5c:	3001      	adds	r0, #1
 800ff5e:	d10c      	bne.n	800ff7a <_printf_float+0x412>
 800ff60:	e65d      	b.n	800fc1e <_printf_float+0xb6>
 800ff62:	2301      	movs	r3, #1
 800ff64:	465a      	mov	r2, fp
 800ff66:	4631      	mov	r1, r6
 800ff68:	4628      	mov	r0, r5
 800ff6a:	47b8      	blx	r7
 800ff6c:	3001      	adds	r0, #1
 800ff6e:	f43f ae56 	beq.w	800fc1e <_printf_float+0xb6>
 800ff72:	f108 0801 	add.w	r8, r8, #1
 800ff76:	45d0      	cmp	r8, sl
 800ff78:	dbf3      	blt.n	800ff62 <_printf_float+0x3fa>
 800ff7a:	464b      	mov	r3, r9
 800ff7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ff80:	e6df      	b.n	800fd42 <_printf_float+0x1da>
 800ff82:	f04f 0800 	mov.w	r8, #0
 800ff86:	f104 0b1a 	add.w	fp, r4, #26
 800ff8a:	e7f4      	b.n	800ff76 <_printf_float+0x40e>
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	4642      	mov	r2, r8
 800ff90:	e7e1      	b.n	800ff56 <_printf_float+0x3ee>
 800ff92:	2301      	movs	r3, #1
 800ff94:	464a      	mov	r2, r9
 800ff96:	4631      	mov	r1, r6
 800ff98:	4628      	mov	r0, r5
 800ff9a:	47b8      	blx	r7
 800ff9c:	3001      	adds	r0, #1
 800ff9e:	f43f ae3e 	beq.w	800fc1e <_printf_float+0xb6>
 800ffa2:	f108 0801 	add.w	r8, r8, #1
 800ffa6:	68e3      	ldr	r3, [r4, #12]
 800ffa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ffaa:	1a5b      	subs	r3, r3, r1
 800ffac:	4543      	cmp	r3, r8
 800ffae:	dcf0      	bgt.n	800ff92 <_printf_float+0x42a>
 800ffb0:	e6fc      	b.n	800fdac <_printf_float+0x244>
 800ffb2:	f04f 0800 	mov.w	r8, #0
 800ffb6:	f104 0919 	add.w	r9, r4, #25
 800ffba:	e7f4      	b.n	800ffa6 <_printf_float+0x43e>

0800ffbc <_printf_common>:
 800ffbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffc0:	4616      	mov	r6, r2
 800ffc2:	4698      	mov	r8, r3
 800ffc4:	688a      	ldr	r2, [r1, #8]
 800ffc6:	690b      	ldr	r3, [r1, #16]
 800ffc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	bfb8      	it	lt
 800ffd0:	4613      	movlt	r3, r2
 800ffd2:	6033      	str	r3, [r6, #0]
 800ffd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ffd8:	4607      	mov	r7, r0
 800ffda:	460c      	mov	r4, r1
 800ffdc:	b10a      	cbz	r2, 800ffe2 <_printf_common+0x26>
 800ffde:	3301      	adds	r3, #1
 800ffe0:	6033      	str	r3, [r6, #0]
 800ffe2:	6823      	ldr	r3, [r4, #0]
 800ffe4:	0699      	lsls	r1, r3, #26
 800ffe6:	bf42      	ittt	mi
 800ffe8:	6833      	ldrmi	r3, [r6, #0]
 800ffea:	3302      	addmi	r3, #2
 800ffec:	6033      	strmi	r3, [r6, #0]
 800ffee:	6825      	ldr	r5, [r4, #0]
 800fff0:	f015 0506 	ands.w	r5, r5, #6
 800fff4:	d106      	bne.n	8010004 <_printf_common+0x48>
 800fff6:	f104 0a19 	add.w	sl, r4, #25
 800fffa:	68e3      	ldr	r3, [r4, #12]
 800fffc:	6832      	ldr	r2, [r6, #0]
 800fffe:	1a9b      	subs	r3, r3, r2
 8010000:	42ab      	cmp	r3, r5
 8010002:	dc26      	bgt.n	8010052 <_printf_common+0x96>
 8010004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010008:	6822      	ldr	r2, [r4, #0]
 801000a:	3b00      	subs	r3, #0
 801000c:	bf18      	it	ne
 801000e:	2301      	movne	r3, #1
 8010010:	0692      	lsls	r2, r2, #26
 8010012:	d42b      	bmi.n	801006c <_printf_common+0xb0>
 8010014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010018:	4641      	mov	r1, r8
 801001a:	4638      	mov	r0, r7
 801001c:	47c8      	blx	r9
 801001e:	3001      	adds	r0, #1
 8010020:	d01e      	beq.n	8010060 <_printf_common+0xa4>
 8010022:	6823      	ldr	r3, [r4, #0]
 8010024:	6922      	ldr	r2, [r4, #16]
 8010026:	f003 0306 	and.w	r3, r3, #6
 801002a:	2b04      	cmp	r3, #4
 801002c:	bf02      	ittt	eq
 801002e:	68e5      	ldreq	r5, [r4, #12]
 8010030:	6833      	ldreq	r3, [r6, #0]
 8010032:	1aed      	subeq	r5, r5, r3
 8010034:	68a3      	ldr	r3, [r4, #8]
 8010036:	bf0c      	ite	eq
 8010038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801003c:	2500      	movne	r5, #0
 801003e:	4293      	cmp	r3, r2
 8010040:	bfc4      	itt	gt
 8010042:	1a9b      	subgt	r3, r3, r2
 8010044:	18ed      	addgt	r5, r5, r3
 8010046:	2600      	movs	r6, #0
 8010048:	341a      	adds	r4, #26
 801004a:	42b5      	cmp	r5, r6
 801004c:	d11a      	bne.n	8010084 <_printf_common+0xc8>
 801004e:	2000      	movs	r0, #0
 8010050:	e008      	b.n	8010064 <_printf_common+0xa8>
 8010052:	2301      	movs	r3, #1
 8010054:	4652      	mov	r2, sl
 8010056:	4641      	mov	r1, r8
 8010058:	4638      	mov	r0, r7
 801005a:	47c8      	blx	r9
 801005c:	3001      	adds	r0, #1
 801005e:	d103      	bne.n	8010068 <_printf_common+0xac>
 8010060:	f04f 30ff 	mov.w	r0, #4294967295
 8010064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010068:	3501      	adds	r5, #1
 801006a:	e7c6      	b.n	800fffa <_printf_common+0x3e>
 801006c:	18e1      	adds	r1, r4, r3
 801006e:	1c5a      	adds	r2, r3, #1
 8010070:	2030      	movs	r0, #48	@ 0x30
 8010072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010076:	4422      	add	r2, r4
 8010078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801007c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010080:	3302      	adds	r3, #2
 8010082:	e7c7      	b.n	8010014 <_printf_common+0x58>
 8010084:	2301      	movs	r3, #1
 8010086:	4622      	mov	r2, r4
 8010088:	4641      	mov	r1, r8
 801008a:	4638      	mov	r0, r7
 801008c:	47c8      	blx	r9
 801008e:	3001      	adds	r0, #1
 8010090:	d0e6      	beq.n	8010060 <_printf_common+0xa4>
 8010092:	3601      	adds	r6, #1
 8010094:	e7d9      	b.n	801004a <_printf_common+0x8e>
	...

08010098 <_printf_i>:
 8010098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801009c:	7e0f      	ldrb	r7, [r1, #24]
 801009e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80100a0:	2f78      	cmp	r7, #120	@ 0x78
 80100a2:	4691      	mov	r9, r2
 80100a4:	4680      	mov	r8, r0
 80100a6:	460c      	mov	r4, r1
 80100a8:	469a      	mov	sl, r3
 80100aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80100ae:	d807      	bhi.n	80100c0 <_printf_i+0x28>
 80100b0:	2f62      	cmp	r7, #98	@ 0x62
 80100b2:	d80a      	bhi.n	80100ca <_printf_i+0x32>
 80100b4:	2f00      	cmp	r7, #0
 80100b6:	f000 80d2 	beq.w	801025e <_printf_i+0x1c6>
 80100ba:	2f58      	cmp	r7, #88	@ 0x58
 80100bc:	f000 80b9 	beq.w	8010232 <_printf_i+0x19a>
 80100c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80100c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80100c8:	e03a      	b.n	8010140 <_printf_i+0xa8>
 80100ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80100ce:	2b15      	cmp	r3, #21
 80100d0:	d8f6      	bhi.n	80100c0 <_printf_i+0x28>
 80100d2:	a101      	add	r1, pc, #4	@ (adr r1, 80100d8 <_printf_i+0x40>)
 80100d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80100d8:	08010131 	.word	0x08010131
 80100dc:	08010145 	.word	0x08010145
 80100e0:	080100c1 	.word	0x080100c1
 80100e4:	080100c1 	.word	0x080100c1
 80100e8:	080100c1 	.word	0x080100c1
 80100ec:	080100c1 	.word	0x080100c1
 80100f0:	08010145 	.word	0x08010145
 80100f4:	080100c1 	.word	0x080100c1
 80100f8:	080100c1 	.word	0x080100c1
 80100fc:	080100c1 	.word	0x080100c1
 8010100:	080100c1 	.word	0x080100c1
 8010104:	08010245 	.word	0x08010245
 8010108:	0801016f 	.word	0x0801016f
 801010c:	080101ff 	.word	0x080101ff
 8010110:	080100c1 	.word	0x080100c1
 8010114:	080100c1 	.word	0x080100c1
 8010118:	08010267 	.word	0x08010267
 801011c:	080100c1 	.word	0x080100c1
 8010120:	0801016f 	.word	0x0801016f
 8010124:	080100c1 	.word	0x080100c1
 8010128:	080100c1 	.word	0x080100c1
 801012c:	08010207 	.word	0x08010207
 8010130:	6833      	ldr	r3, [r6, #0]
 8010132:	1d1a      	adds	r2, r3, #4
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	6032      	str	r2, [r6, #0]
 8010138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801013c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010140:	2301      	movs	r3, #1
 8010142:	e09d      	b.n	8010280 <_printf_i+0x1e8>
 8010144:	6833      	ldr	r3, [r6, #0]
 8010146:	6820      	ldr	r0, [r4, #0]
 8010148:	1d19      	adds	r1, r3, #4
 801014a:	6031      	str	r1, [r6, #0]
 801014c:	0606      	lsls	r6, r0, #24
 801014e:	d501      	bpl.n	8010154 <_printf_i+0xbc>
 8010150:	681d      	ldr	r5, [r3, #0]
 8010152:	e003      	b.n	801015c <_printf_i+0xc4>
 8010154:	0645      	lsls	r5, r0, #25
 8010156:	d5fb      	bpl.n	8010150 <_printf_i+0xb8>
 8010158:	f9b3 5000 	ldrsh.w	r5, [r3]
 801015c:	2d00      	cmp	r5, #0
 801015e:	da03      	bge.n	8010168 <_printf_i+0xd0>
 8010160:	232d      	movs	r3, #45	@ 0x2d
 8010162:	426d      	negs	r5, r5
 8010164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010168:	4859      	ldr	r0, [pc, #356]	@ (80102d0 <_printf_i+0x238>)
 801016a:	230a      	movs	r3, #10
 801016c:	e011      	b.n	8010192 <_printf_i+0xfa>
 801016e:	6821      	ldr	r1, [r4, #0]
 8010170:	6833      	ldr	r3, [r6, #0]
 8010172:	0608      	lsls	r0, r1, #24
 8010174:	f853 5b04 	ldr.w	r5, [r3], #4
 8010178:	d402      	bmi.n	8010180 <_printf_i+0xe8>
 801017a:	0649      	lsls	r1, r1, #25
 801017c:	bf48      	it	mi
 801017e:	b2ad      	uxthmi	r5, r5
 8010180:	2f6f      	cmp	r7, #111	@ 0x6f
 8010182:	4853      	ldr	r0, [pc, #332]	@ (80102d0 <_printf_i+0x238>)
 8010184:	6033      	str	r3, [r6, #0]
 8010186:	bf14      	ite	ne
 8010188:	230a      	movne	r3, #10
 801018a:	2308      	moveq	r3, #8
 801018c:	2100      	movs	r1, #0
 801018e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010192:	6866      	ldr	r6, [r4, #4]
 8010194:	60a6      	str	r6, [r4, #8]
 8010196:	2e00      	cmp	r6, #0
 8010198:	bfa2      	ittt	ge
 801019a:	6821      	ldrge	r1, [r4, #0]
 801019c:	f021 0104 	bicge.w	r1, r1, #4
 80101a0:	6021      	strge	r1, [r4, #0]
 80101a2:	b90d      	cbnz	r5, 80101a8 <_printf_i+0x110>
 80101a4:	2e00      	cmp	r6, #0
 80101a6:	d04b      	beq.n	8010240 <_printf_i+0x1a8>
 80101a8:	4616      	mov	r6, r2
 80101aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80101ae:	fb03 5711 	mls	r7, r3, r1, r5
 80101b2:	5dc7      	ldrb	r7, [r0, r7]
 80101b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80101b8:	462f      	mov	r7, r5
 80101ba:	42bb      	cmp	r3, r7
 80101bc:	460d      	mov	r5, r1
 80101be:	d9f4      	bls.n	80101aa <_printf_i+0x112>
 80101c0:	2b08      	cmp	r3, #8
 80101c2:	d10b      	bne.n	80101dc <_printf_i+0x144>
 80101c4:	6823      	ldr	r3, [r4, #0]
 80101c6:	07df      	lsls	r7, r3, #31
 80101c8:	d508      	bpl.n	80101dc <_printf_i+0x144>
 80101ca:	6923      	ldr	r3, [r4, #16]
 80101cc:	6861      	ldr	r1, [r4, #4]
 80101ce:	4299      	cmp	r1, r3
 80101d0:	bfde      	ittt	le
 80101d2:	2330      	movle	r3, #48	@ 0x30
 80101d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80101d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80101dc:	1b92      	subs	r2, r2, r6
 80101de:	6122      	str	r2, [r4, #16]
 80101e0:	f8cd a000 	str.w	sl, [sp]
 80101e4:	464b      	mov	r3, r9
 80101e6:	aa03      	add	r2, sp, #12
 80101e8:	4621      	mov	r1, r4
 80101ea:	4640      	mov	r0, r8
 80101ec:	f7ff fee6 	bl	800ffbc <_printf_common>
 80101f0:	3001      	adds	r0, #1
 80101f2:	d14a      	bne.n	801028a <_printf_i+0x1f2>
 80101f4:	f04f 30ff 	mov.w	r0, #4294967295
 80101f8:	b004      	add	sp, #16
 80101fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101fe:	6823      	ldr	r3, [r4, #0]
 8010200:	f043 0320 	orr.w	r3, r3, #32
 8010204:	6023      	str	r3, [r4, #0]
 8010206:	4833      	ldr	r0, [pc, #204]	@ (80102d4 <_printf_i+0x23c>)
 8010208:	2778      	movs	r7, #120	@ 0x78
 801020a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801020e:	6823      	ldr	r3, [r4, #0]
 8010210:	6831      	ldr	r1, [r6, #0]
 8010212:	061f      	lsls	r7, r3, #24
 8010214:	f851 5b04 	ldr.w	r5, [r1], #4
 8010218:	d402      	bmi.n	8010220 <_printf_i+0x188>
 801021a:	065f      	lsls	r7, r3, #25
 801021c:	bf48      	it	mi
 801021e:	b2ad      	uxthmi	r5, r5
 8010220:	6031      	str	r1, [r6, #0]
 8010222:	07d9      	lsls	r1, r3, #31
 8010224:	bf44      	itt	mi
 8010226:	f043 0320 	orrmi.w	r3, r3, #32
 801022a:	6023      	strmi	r3, [r4, #0]
 801022c:	b11d      	cbz	r5, 8010236 <_printf_i+0x19e>
 801022e:	2310      	movs	r3, #16
 8010230:	e7ac      	b.n	801018c <_printf_i+0xf4>
 8010232:	4827      	ldr	r0, [pc, #156]	@ (80102d0 <_printf_i+0x238>)
 8010234:	e7e9      	b.n	801020a <_printf_i+0x172>
 8010236:	6823      	ldr	r3, [r4, #0]
 8010238:	f023 0320 	bic.w	r3, r3, #32
 801023c:	6023      	str	r3, [r4, #0]
 801023e:	e7f6      	b.n	801022e <_printf_i+0x196>
 8010240:	4616      	mov	r6, r2
 8010242:	e7bd      	b.n	80101c0 <_printf_i+0x128>
 8010244:	6833      	ldr	r3, [r6, #0]
 8010246:	6825      	ldr	r5, [r4, #0]
 8010248:	6961      	ldr	r1, [r4, #20]
 801024a:	1d18      	adds	r0, r3, #4
 801024c:	6030      	str	r0, [r6, #0]
 801024e:	062e      	lsls	r6, r5, #24
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	d501      	bpl.n	8010258 <_printf_i+0x1c0>
 8010254:	6019      	str	r1, [r3, #0]
 8010256:	e002      	b.n	801025e <_printf_i+0x1c6>
 8010258:	0668      	lsls	r0, r5, #25
 801025a:	d5fb      	bpl.n	8010254 <_printf_i+0x1bc>
 801025c:	8019      	strh	r1, [r3, #0]
 801025e:	2300      	movs	r3, #0
 8010260:	6123      	str	r3, [r4, #16]
 8010262:	4616      	mov	r6, r2
 8010264:	e7bc      	b.n	80101e0 <_printf_i+0x148>
 8010266:	6833      	ldr	r3, [r6, #0]
 8010268:	1d1a      	adds	r2, r3, #4
 801026a:	6032      	str	r2, [r6, #0]
 801026c:	681e      	ldr	r6, [r3, #0]
 801026e:	6862      	ldr	r2, [r4, #4]
 8010270:	2100      	movs	r1, #0
 8010272:	4630      	mov	r0, r6
 8010274:	f7ef ffe4 	bl	8000240 <memchr>
 8010278:	b108      	cbz	r0, 801027e <_printf_i+0x1e6>
 801027a:	1b80      	subs	r0, r0, r6
 801027c:	6060      	str	r0, [r4, #4]
 801027e:	6863      	ldr	r3, [r4, #4]
 8010280:	6123      	str	r3, [r4, #16]
 8010282:	2300      	movs	r3, #0
 8010284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010288:	e7aa      	b.n	80101e0 <_printf_i+0x148>
 801028a:	6923      	ldr	r3, [r4, #16]
 801028c:	4632      	mov	r2, r6
 801028e:	4649      	mov	r1, r9
 8010290:	4640      	mov	r0, r8
 8010292:	47d0      	blx	sl
 8010294:	3001      	adds	r0, #1
 8010296:	d0ad      	beq.n	80101f4 <_printf_i+0x15c>
 8010298:	6823      	ldr	r3, [r4, #0]
 801029a:	079b      	lsls	r3, r3, #30
 801029c:	d413      	bmi.n	80102c6 <_printf_i+0x22e>
 801029e:	68e0      	ldr	r0, [r4, #12]
 80102a0:	9b03      	ldr	r3, [sp, #12]
 80102a2:	4298      	cmp	r0, r3
 80102a4:	bfb8      	it	lt
 80102a6:	4618      	movlt	r0, r3
 80102a8:	e7a6      	b.n	80101f8 <_printf_i+0x160>
 80102aa:	2301      	movs	r3, #1
 80102ac:	4632      	mov	r2, r6
 80102ae:	4649      	mov	r1, r9
 80102b0:	4640      	mov	r0, r8
 80102b2:	47d0      	blx	sl
 80102b4:	3001      	adds	r0, #1
 80102b6:	d09d      	beq.n	80101f4 <_printf_i+0x15c>
 80102b8:	3501      	adds	r5, #1
 80102ba:	68e3      	ldr	r3, [r4, #12]
 80102bc:	9903      	ldr	r1, [sp, #12]
 80102be:	1a5b      	subs	r3, r3, r1
 80102c0:	42ab      	cmp	r3, r5
 80102c2:	dcf2      	bgt.n	80102aa <_printf_i+0x212>
 80102c4:	e7eb      	b.n	801029e <_printf_i+0x206>
 80102c6:	2500      	movs	r5, #0
 80102c8:	f104 0619 	add.w	r6, r4, #25
 80102cc:	e7f5      	b.n	80102ba <_printf_i+0x222>
 80102ce:	bf00      	nop
 80102d0:	08013e22 	.word	0x08013e22
 80102d4:	08013e33 	.word	0x08013e33

080102d8 <std>:
 80102d8:	2300      	movs	r3, #0
 80102da:	b510      	push	{r4, lr}
 80102dc:	4604      	mov	r4, r0
 80102de:	e9c0 3300 	strd	r3, r3, [r0]
 80102e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80102e6:	6083      	str	r3, [r0, #8]
 80102e8:	8181      	strh	r1, [r0, #12]
 80102ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80102ec:	81c2      	strh	r2, [r0, #14]
 80102ee:	6183      	str	r3, [r0, #24]
 80102f0:	4619      	mov	r1, r3
 80102f2:	2208      	movs	r2, #8
 80102f4:	305c      	adds	r0, #92	@ 0x5c
 80102f6:	f000 f914 	bl	8010522 <memset>
 80102fa:	4b0d      	ldr	r3, [pc, #52]	@ (8010330 <std+0x58>)
 80102fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80102fe:	4b0d      	ldr	r3, [pc, #52]	@ (8010334 <std+0x5c>)
 8010300:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010302:	4b0d      	ldr	r3, [pc, #52]	@ (8010338 <std+0x60>)
 8010304:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010306:	4b0d      	ldr	r3, [pc, #52]	@ (801033c <std+0x64>)
 8010308:	6323      	str	r3, [r4, #48]	@ 0x30
 801030a:	4b0d      	ldr	r3, [pc, #52]	@ (8010340 <std+0x68>)
 801030c:	6224      	str	r4, [r4, #32]
 801030e:	429c      	cmp	r4, r3
 8010310:	d006      	beq.n	8010320 <std+0x48>
 8010312:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010316:	4294      	cmp	r4, r2
 8010318:	d002      	beq.n	8010320 <std+0x48>
 801031a:	33d0      	adds	r3, #208	@ 0xd0
 801031c:	429c      	cmp	r4, r3
 801031e:	d105      	bne.n	801032c <std+0x54>
 8010320:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010328:	f000 b9e6 	b.w	80106f8 <__retarget_lock_init_recursive>
 801032c:	bd10      	pop	{r4, pc}
 801032e:	bf00      	nop
 8010330:	0801049d 	.word	0x0801049d
 8010334:	080104bf 	.word	0x080104bf
 8010338:	080104f7 	.word	0x080104f7
 801033c:	0801051b 	.word	0x0801051b
 8010340:	20006ae0 	.word	0x20006ae0

08010344 <stdio_exit_handler>:
 8010344:	4a02      	ldr	r2, [pc, #8]	@ (8010350 <stdio_exit_handler+0xc>)
 8010346:	4903      	ldr	r1, [pc, #12]	@ (8010354 <stdio_exit_handler+0x10>)
 8010348:	4803      	ldr	r0, [pc, #12]	@ (8010358 <stdio_exit_handler+0x14>)
 801034a:	f000 b869 	b.w	8010420 <_fwalk_sglue>
 801034e:	bf00      	nop
 8010350:	20000028 	.word	0x20000028
 8010354:	080129d5 	.word	0x080129d5
 8010358:	200001a4 	.word	0x200001a4

0801035c <cleanup_stdio>:
 801035c:	6841      	ldr	r1, [r0, #4]
 801035e:	4b0c      	ldr	r3, [pc, #48]	@ (8010390 <cleanup_stdio+0x34>)
 8010360:	4299      	cmp	r1, r3
 8010362:	b510      	push	{r4, lr}
 8010364:	4604      	mov	r4, r0
 8010366:	d001      	beq.n	801036c <cleanup_stdio+0x10>
 8010368:	f002 fb34 	bl	80129d4 <_fflush_r>
 801036c:	68a1      	ldr	r1, [r4, #8]
 801036e:	4b09      	ldr	r3, [pc, #36]	@ (8010394 <cleanup_stdio+0x38>)
 8010370:	4299      	cmp	r1, r3
 8010372:	d002      	beq.n	801037a <cleanup_stdio+0x1e>
 8010374:	4620      	mov	r0, r4
 8010376:	f002 fb2d 	bl	80129d4 <_fflush_r>
 801037a:	68e1      	ldr	r1, [r4, #12]
 801037c:	4b06      	ldr	r3, [pc, #24]	@ (8010398 <cleanup_stdio+0x3c>)
 801037e:	4299      	cmp	r1, r3
 8010380:	d004      	beq.n	801038c <cleanup_stdio+0x30>
 8010382:	4620      	mov	r0, r4
 8010384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010388:	f002 bb24 	b.w	80129d4 <_fflush_r>
 801038c:	bd10      	pop	{r4, pc}
 801038e:	bf00      	nop
 8010390:	20006ae0 	.word	0x20006ae0
 8010394:	20006b48 	.word	0x20006b48
 8010398:	20006bb0 	.word	0x20006bb0

0801039c <global_stdio_init.part.0>:
 801039c:	b510      	push	{r4, lr}
 801039e:	4b0b      	ldr	r3, [pc, #44]	@ (80103cc <global_stdio_init.part.0+0x30>)
 80103a0:	4c0b      	ldr	r4, [pc, #44]	@ (80103d0 <global_stdio_init.part.0+0x34>)
 80103a2:	4a0c      	ldr	r2, [pc, #48]	@ (80103d4 <global_stdio_init.part.0+0x38>)
 80103a4:	601a      	str	r2, [r3, #0]
 80103a6:	4620      	mov	r0, r4
 80103a8:	2200      	movs	r2, #0
 80103aa:	2104      	movs	r1, #4
 80103ac:	f7ff ff94 	bl	80102d8 <std>
 80103b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80103b4:	2201      	movs	r2, #1
 80103b6:	2109      	movs	r1, #9
 80103b8:	f7ff ff8e 	bl	80102d8 <std>
 80103bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80103c0:	2202      	movs	r2, #2
 80103c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103c6:	2112      	movs	r1, #18
 80103c8:	f7ff bf86 	b.w	80102d8 <std>
 80103cc:	20006c18 	.word	0x20006c18
 80103d0:	20006ae0 	.word	0x20006ae0
 80103d4:	08010345 	.word	0x08010345

080103d8 <__sfp_lock_acquire>:
 80103d8:	4801      	ldr	r0, [pc, #4]	@ (80103e0 <__sfp_lock_acquire+0x8>)
 80103da:	f000 b98e 	b.w	80106fa <__retarget_lock_acquire_recursive>
 80103de:	bf00      	nop
 80103e0:	20006c21 	.word	0x20006c21

080103e4 <__sfp_lock_release>:
 80103e4:	4801      	ldr	r0, [pc, #4]	@ (80103ec <__sfp_lock_release+0x8>)
 80103e6:	f000 b989 	b.w	80106fc <__retarget_lock_release_recursive>
 80103ea:	bf00      	nop
 80103ec:	20006c21 	.word	0x20006c21

080103f0 <__sinit>:
 80103f0:	b510      	push	{r4, lr}
 80103f2:	4604      	mov	r4, r0
 80103f4:	f7ff fff0 	bl	80103d8 <__sfp_lock_acquire>
 80103f8:	6a23      	ldr	r3, [r4, #32]
 80103fa:	b11b      	cbz	r3, 8010404 <__sinit+0x14>
 80103fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010400:	f7ff bff0 	b.w	80103e4 <__sfp_lock_release>
 8010404:	4b04      	ldr	r3, [pc, #16]	@ (8010418 <__sinit+0x28>)
 8010406:	6223      	str	r3, [r4, #32]
 8010408:	4b04      	ldr	r3, [pc, #16]	@ (801041c <__sinit+0x2c>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d1f5      	bne.n	80103fc <__sinit+0xc>
 8010410:	f7ff ffc4 	bl	801039c <global_stdio_init.part.0>
 8010414:	e7f2      	b.n	80103fc <__sinit+0xc>
 8010416:	bf00      	nop
 8010418:	0801035d 	.word	0x0801035d
 801041c:	20006c18 	.word	0x20006c18

08010420 <_fwalk_sglue>:
 8010420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010424:	4607      	mov	r7, r0
 8010426:	4688      	mov	r8, r1
 8010428:	4614      	mov	r4, r2
 801042a:	2600      	movs	r6, #0
 801042c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010430:	f1b9 0901 	subs.w	r9, r9, #1
 8010434:	d505      	bpl.n	8010442 <_fwalk_sglue+0x22>
 8010436:	6824      	ldr	r4, [r4, #0]
 8010438:	2c00      	cmp	r4, #0
 801043a:	d1f7      	bne.n	801042c <_fwalk_sglue+0xc>
 801043c:	4630      	mov	r0, r6
 801043e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010442:	89ab      	ldrh	r3, [r5, #12]
 8010444:	2b01      	cmp	r3, #1
 8010446:	d907      	bls.n	8010458 <_fwalk_sglue+0x38>
 8010448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801044c:	3301      	adds	r3, #1
 801044e:	d003      	beq.n	8010458 <_fwalk_sglue+0x38>
 8010450:	4629      	mov	r1, r5
 8010452:	4638      	mov	r0, r7
 8010454:	47c0      	blx	r8
 8010456:	4306      	orrs	r6, r0
 8010458:	3568      	adds	r5, #104	@ 0x68
 801045a:	e7e9      	b.n	8010430 <_fwalk_sglue+0x10>

0801045c <siprintf>:
 801045c:	b40e      	push	{r1, r2, r3}
 801045e:	b500      	push	{lr}
 8010460:	b09c      	sub	sp, #112	@ 0x70
 8010462:	ab1d      	add	r3, sp, #116	@ 0x74
 8010464:	9002      	str	r0, [sp, #8]
 8010466:	9006      	str	r0, [sp, #24]
 8010468:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801046c:	4809      	ldr	r0, [pc, #36]	@ (8010494 <siprintf+0x38>)
 801046e:	9107      	str	r1, [sp, #28]
 8010470:	9104      	str	r1, [sp, #16]
 8010472:	4909      	ldr	r1, [pc, #36]	@ (8010498 <siprintf+0x3c>)
 8010474:	f853 2b04 	ldr.w	r2, [r3], #4
 8010478:	9105      	str	r1, [sp, #20]
 801047a:	6800      	ldr	r0, [r0, #0]
 801047c:	9301      	str	r3, [sp, #4]
 801047e:	a902      	add	r1, sp, #8
 8010480:	f002 f928 	bl	80126d4 <_svfiprintf_r>
 8010484:	9b02      	ldr	r3, [sp, #8]
 8010486:	2200      	movs	r2, #0
 8010488:	701a      	strb	r2, [r3, #0]
 801048a:	b01c      	add	sp, #112	@ 0x70
 801048c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010490:	b003      	add	sp, #12
 8010492:	4770      	bx	lr
 8010494:	200001a0 	.word	0x200001a0
 8010498:	ffff0208 	.word	0xffff0208

0801049c <__sread>:
 801049c:	b510      	push	{r4, lr}
 801049e:	460c      	mov	r4, r1
 80104a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104a4:	f000 f8da 	bl	801065c <_read_r>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	bfab      	itete	ge
 80104ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80104ae:	89a3      	ldrhlt	r3, [r4, #12]
 80104b0:	181b      	addge	r3, r3, r0
 80104b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80104b6:	bfac      	ite	ge
 80104b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80104ba:	81a3      	strhlt	r3, [r4, #12]
 80104bc:	bd10      	pop	{r4, pc}

080104be <__swrite>:
 80104be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c2:	461f      	mov	r7, r3
 80104c4:	898b      	ldrh	r3, [r1, #12]
 80104c6:	05db      	lsls	r3, r3, #23
 80104c8:	4605      	mov	r5, r0
 80104ca:	460c      	mov	r4, r1
 80104cc:	4616      	mov	r6, r2
 80104ce:	d505      	bpl.n	80104dc <__swrite+0x1e>
 80104d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104d4:	2302      	movs	r3, #2
 80104d6:	2200      	movs	r2, #0
 80104d8:	f000 f8ae 	bl	8010638 <_lseek_r>
 80104dc:	89a3      	ldrh	r3, [r4, #12]
 80104de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80104e6:	81a3      	strh	r3, [r4, #12]
 80104e8:	4632      	mov	r2, r6
 80104ea:	463b      	mov	r3, r7
 80104ec:	4628      	mov	r0, r5
 80104ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104f2:	f000 b8c5 	b.w	8010680 <_write_r>

080104f6 <__sseek>:
 80104f6:	b510      	push	{r4, lr}
 80104f8:	460c      	mov	r4, r1
 80104fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104fe:	f000 f89b 	bl	8010638 <_lseek_r>
 8010502:	1c43      	adds	r3, r0, #1
 8010504:	89a3      	ldrh	r3, [r4, #12]
 8010506:	bf15      	itete	ne
 8010508:	6560      	strne	r0, [r4, #84]	@ 0x54
 801050a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801050e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010512:	81a3      	strheq	r3, [r4, #12]
 8010514:	bf18      	it	ne
 8010516:	81a3      	strhne	r3, [r4, #12]
 8010518:	bd10      	pop	{r4, pc}

0801051a <__sclose>:
 801051a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801051e:	f000 b87b 	b.w	8010618 <_close_r>

08010522 <memset>:
 8010522:	4402      	add	r2, r0
 8010524:	4603      	mov	r3, r0
 8010526:	4293      	cmp	r3, r2
 8010528:	d100      	bne.n	801052c <memset+0xa>
 801052a:	4770      	bx	lr
 801052c:	f803 1b01 	strb.w	r1, [r3], #1
 8010530:	e7f9      	b.n	8010526 <memset+0x4>

08010532 <strncmp>:
 8010532:	b510      	push	{r4, lr}
 8010534:	b16a      	cbz	r2, 8010552 <strncmp+0x20>
 8010536:	3901      	subs	r1, #1
 8010538:	1884      	adds	r4, r0, r2
 801053a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801053e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010542:	429a      	cmp	r2, r3
 8010544:	d103      	bne.n	801054e <strncmp+0x1c>
 8010546:	42a0      	cmp	r0, r4
 8010548:	d001      	beq.n	801054e <strncmp+0x1c>
 801054a:	2a00      	cmp	r2, #0
 801054c:	d1f5      	bne.n	801053a <strncmp+0x8>
 801054e:	1ad0      	subs	r0, r2, r3
 8010550:	bd10      	pop	{r4, pc}
 8010552:	4610      	mov	r0, r2
 8010554:	e7fc      	b.n	8010550 <strncmp+0x1e>
	...

08010558 <strtok>:
 8010558:	4b16      	ldr	r3, [pc, #88]	@ (80105b4 <strtok+0x5c>)
 801055a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801055e:	681f      	ldr	r7, [r3, #0]
 8010560:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8010562:	4605      	mov	r5, r0
 8010564:	460e      	mov	r6, r1
 8010566:	b9ec      	cbnz	r4, 80105a4 <strtok+0x4c>
 8010568:	2050      	movs	r0, #80	@ 0x50
 801056a:	f001 fad1 	bl	8011b10 <malloc>
 801056e:	4602      	mov	r2, r0
 8010570:	6478      	str	r0, [r7, #68]	@ 0x44
 8010572:	b920      	cbnz	r0, 801057e <strtok+0x26>
 8010574:	4b10      	ldr	r3, [pc, #64]	@ (80105b8 <strtok+0x60>)
 8010576:	4811      	ldr	r0, [pc, #68]	@ (80105bc <strtok+0x64>)
 8010578:	215b      	movs	r1, #91	@ 0x5b
 801057a:	f000 f8d9 	bl	8010730 <__assert_func>
 801057e:	e9c0 4400 	strd	r4, r4, [r0]
 8010582:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010586:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801058a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801058e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8010592:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8010596:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801059a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801059e:	6184      	str	r4, [r0, #24]
 80105a0:	7704      	strb	r4, [r0, #28]
 80105a2:	6244      	str	r4, [r0, #36]	@ 0x24
 80105a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80105a6:	4631      	mov	r1, r6
 80105a8:	4628      	mov	r0, r5
 80105aa:	2301      	movs	r3, #1
 80105ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105b0:	f000 b806 	b.w	80105c0 <__strtok_r>
 80105b4:	200001a0 	.word	0x200001a0
 80105b8:	08013e44 	.word	0x08013e44
 80105bc:	08013e5b 	.word	0x08013e5b

080105c0 <__strtok_r>:
 80105c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105c2:	4604      	mov	r4, r0
 80105c4:	b908      	cbnz	r0, 80105ca <__strtok_r+0xa>
 80105c6:	6814      	ldr	r4, [r2, #0]
 80105c8:	b144      	cbz	r4, 80105dc <__strtok_r+0x1c>
 80105ca:	4620      	mov	r0, r4
 80105cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80105d0:	460f      	mov	r7, r1
 80105d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80105d6:	b91e      	cbnz	r6, 80105e0 <__strtok_r+0x20>
 80105d8:	b965      	cbnz	r5, 80105f4 <__strtok_r+0x34>
 80105da:	6015      	str	r5, [r2, #0]
 80105dc:	2000      	movs	r0, #0
 80105de:	e005      	b.n	80105ec <__strtok_r+0x2c>
 80105e0:	42b5      	cmp	r5, r6
 80105e2:	d1f6      	bne.n	80105d2 <__strtok_r+0x12>
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1f0      	bne.n	80105ca <__strtok_r+0xa>
 80105e8:	6014      	str	r4, [r2, #0]
 80105ea:	7003      	strb	r3, [r0, #0]
 80105ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105ee:	461c      	mov	r4, r3
 80105f0:	e00c      	b.n	801060c <__strtok_r+0x4c>
 80105f2:	b915      	cbnz	r5, 80105fa <__strtok_r+0x3a>
 80105f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80105f8:	460e      	mov	r6, r1
 80105fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80105fe:	42ab      	cmp	r3, r5
 8010600:	d1f7      	bne.n	80105f2 <__strtok_r+0x32>
 8010602:	2b00      	cmp	r3, #0
 8010604:	d0f3      	beq.n	80105ee <__strtok_r+0x2e>
 8010606:	2300      	movs	r3, #0
 8010608:	f804 3c01 	strb.w	r3, [r4, #-1]
 801060c:	6014      	str	r4, [r2, #0]
 801060e:	e7ed      	b.n	80105ec <__strtok_r+0x2c>

08010610 <_localeconv_r>:
 8010610:	4800      	ldr	r0, [pc, #0]	@ (8010614 <_localeconv_r+0x4>)
 8010612:	4770      	bx	lr
 8010614:	20000124 	.word	0x20000124

08010618 <_close_r>:
 8010618:	b538      	push	{r3, r4, r5, lr}
 801061a:	4d06      	ldr	r5, [pc, #24]	@ (8010634 <_close_r+0x1c>)
 801061c:	2300      	movs	r3, #0
 801061e:	4604      	mov	r4, r0
 8010620:	4608      	mov	r0, r1
 8010622:	602b      	str	r3, [r5, #0]
 8010624:	f7f3 f8b4 	bl	8003790 <_close>
 8010628:	1c43      	adds	r3, r0, #1
 801062a:	d102      	bne.n	8010632 <_close_r+0x1a>
 801062c:	682b      	ldr	r3, [r5, #0]
 801062e:	b103      	cbz	r3, 8010632 <_close_r+0x1a>
 8010630:	6023      	str	r3, [r4, #0]
 8010632:	bd38      	pop	{r3, r4, r5, pc}
 8010634:	20006c1c 	.word	0x20006c1c

08010638 <_lseek_r>:
 8010638:	b538      	push	{r3, r4, r5, lr}
 801063a:	4d07      	ldr	r5, [pc, #28]	@ (8010658 <_lseek_r+0x20>)
 801063c:	4604      	mov	r4, r0
 801063e:	4608      	mov	r0, r1
 8010640:	4611      	mov	r1, r2
 8010642:	2200      	movs	r2, #0
 8010644:	602a      	str	r2, [r5, #0]
 8010646:	461a      	mov	r2, r3
 8010648:	f7f3 f8c9 	bl	80037de <_lseek>
 801064c:	1c43      	adds	r3, r0, #1
 801064e:	d102      	bne.n	8010656 <_lseek_r+0x1e>
 8010650:	682b      	ldr	r3, [r5, #0]
 8010652:	b103      	cbz	r3, 8010656 <_lseek_r+0x1e>
 8010654:	6023      	str	r3, [r4, #0]
 8010656:	bd38      	pop	{r3, r4, r5, pc}
 8010658:	20006c1c 	.word	0x20006c1c

0801065c <_read_r>:
 801065c:	b538      	push	{r3, r4, r5, lr}
 801065e:	4d07      	ldr	r5, [pc, #28]	@ (801067c <_read_r+0x20>)
 8010660:	4604      	mov	r4, r0
 8010662:	4608      	mov	r0, r1
 8010664:	4611      	mov	r1, r2
 8010666:	2200      	movs	r2, #0
 8010668:	602a      	str	r2, [r5, #0]
 801066a:	461a      	mov	r2, r3
 801066c:	f7f3 f857 	bl	800371e <_read>
 8010670:	1c43      	adds	r3, r0, #1
 8010672:	d102      	bne.n	801067a <_read_r+0x1e>
 8010674:	682b      	ldr	r3, [r5, #0]
 8010676:	b103      	cbz	r3, 801067a <_read_r+0x1e>
 8010678:	6023      	str	r3, [r4, #0]
 801067a:	bd38      	pop	{r3, r4, r5, pc}
 801067c:	20006c1c 	.word	0x20006c1c

08010680 <_write_r>:
 8010680:	b538      	push	{r3, r4, r5, lr}
 8010682:	4d07      	ldr	r5, [pc, #28]	@ (80106a0 <_write_r+0x20>)
 8010684:	4604      	mov	r4, r0
 8010686:	4608      	mov	r0, r1
 8010688:	4611      	mov	r1, r2
 801068a:	2200      	movs	r2, #0
 801068c:	602a      	str	r2, [r5, #0]
 801068e:	461a      	mov	r2, r3
 8010690:	f7f3 f862 	bl	8003758 <_write>
 8010694:	1c43      	adds	r3, r0, #1
 8010696:	d102      	bne.n	801069e <_write_r+0x1e>
 8010698:	682b      	ldr	r3, [r5, #0]
 801069a:	b103      	cbz	r3, 801069e <_write_r+0x1e>
 801069c:	6023      	str	r3, [r4, #0]
 801069e:	bd38      	pop	{r3, r4, r5, pc}
 80106a0:	20006c1c 	.word	0x20006c1c

080106a4 <__errno>:
 80106a4:	4b01      	ldr	r3, [pc, #4]	@ (80106ac <__errno+0x8>)
 80106a6:	6818      	ldr	r0, [r3, #0]
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop
 80106ac:	200001a0 	.word	0x200001a0

080106b0 <__libc_init_array>:
 80106b0:	b570      	push	{r4, r5, r6, lr}
 80106b2:	4d0d      	ldr	r5, [pc, #52]	@ (80106e8 <__libc_init_array+0x38>)
 80106b4:	4c0d      	ldr	r4, [pc, #52]	@ (80106ec <__libc_init_array+0x3c>)
 80106b6:	1b64      	subs	r4, r4, r5
 80106b8:	10a4      	asrs	r4, r4, #2
 80106ba:	2600      	movs	r6, #0
 80106bc:	42a6      	cmp	r6, r4
 80106be:	d109      	bne.n	80106d4 <__libc_init_array+0x24>
 80106c0:	4d0b      	ldr	r5, [pc, #44]	@ (80106f0 <__libc_init_array+0x40>)
 80106c2:	4c0c      	ldr	r4, [pc, #48]	@ (80106f4 <__libc_init_array+0x44>)
 80106c4:	f003 fa56 	bl	8013b74 <_init>
 80106c8:	1b64      	subs	r4, r4, r5
 80106ca:	10a4      	asrs	r4, r4, #2
 80106cc:	2600      	movs	r6, #0
 80106ce:	42a6      	cmp	r6, r4
 80106d0:	d105      	bne.n	80106de <__libc_init_array+0x2e>
 80106d2:	bd70      	pop	{r4, r5, r6, pc}
 80106d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80106d8:	4798      	blx	r3
 80106da:	3601      	adds	r6, #1
 80106dc:	e7ee      	b.n	80106bc <__libc_init_array+0xc>
 80106de:	f855 3b04 	ldr.w	r3, [r5], #4
 80106e2:	4798      	blx	r3
 80106e4:	3601      	adds	r6, #1
 80106e6:	e7f2      	b.n	80106ce <__libc_init_array+0x1e>
 80106e8:	08014614 	.word	0x08014614
 80106ec:	08014614 	.word	0x08014614
 80106f0:	08014614 	.word	0x08014614
 80106f4:	08014618 	.word	0x08014618

080106f8 <__retarget_lock_init_recursive>:
 80106f8:	4770      	bx	lr

080106fa <__retarget_lock_acquire_recursive>:
 80106fa:	4770      	bx	lr

080106fc <__retarget_lock_release_recursive>:
 80106fc:	4770      	bx	lr

080106fe <memcpy>:
 80106fe:	440a      	add	r2, r1
 8010700:	4291      	cmp	r1, r2
 8010702:	f100 33ff 	add.w	r3, r0, #4294967295
 8010706:	d100      	bne.n	801070a <memcpy+0xc>
 8010708:	4770      	bx	lr
 801070a:	b510      	push	{r4, lr}
 801070c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010710:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010714:	4291      	cmp	r1, r2
 8010716:	d1f9      	bne.n	801070c <memcpy+0xe>
 8010718:	bd10      	pop	{r4, pc}
 801071a:	0000      	movs	r0, r0
 801071c:	0000      	movs	r0, r0
	...

08010720 <nan>:
 8010720:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010728 <nan+0x8>
 8010724:	4770      	bx	lr
 8010726:	bf00      	nop
 8010728:	00000000 	.word	0x00000000
 801072c:	7ff80000 	.word	0x7ff80000

08010730 <__assert_func>:
 8010730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010732:	4614      	mov	r4, r2
 8010734:	461a      	mov	r2, r3
 8010736:	4b09      	ldr	r3, [pc, #36]	@ (801075c <__assert_func+0x2c>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	4605      	mov	r5, r0
 801073c:	68d8      	ldr	r0, [r3, #12]
 801073e:	b954      	cbnz	r4, 8010756 <__assert_func+0x26>
 8010740:	4b07      	ldr	r3, [pc, #28]	@ (8010760 <__assert_func+0x30>)
 8010742:	461c      	mov	r4, r3
 8010744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010748:	9100      	str	r1, [sp, #0]
 801074a:	462b      	mov	r3, r5
 801074c:	4905      	ldr	r1, [pc, #20]	@ (8010764 <__assert_func+0x34>)
 801074e:	f002 f969 	bl	8012a24 <fiprintf>
 8010752:	f002 f9a3 	bl	8012a9c <abort>
 8010756:	4b04      	ldr	r3, [pc, #16]	@ (8010768 <__assert_func+0x38>)
 8010758:	e7f4      	b.n	8010744 <__assert_func+0x14>
 801075a:	bf00      	nop
 801075c:	200001a0 	.word	0x200001a0
 8010760:	08013ef8 	.word	0x08013ef8
 8010764:	08013eca 	.word	0x08013eca
 8010768:	08013ebd 	.word	0x08013ebd

0801076c <quorem>:
 801076c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010770:	6903      	ldr	r3, [r0, #16]
 8010772:	690c      	ldr	r4, [r1, #16]
 8010774:	42a3      	cmp	r3, r4
 8010776:	4607      	mov	r7, r0
 8010778:	db7e      	blt.n	8010878 <quorem+0x10c>
 801077a:	3c01      	subs	r4, #1
 801077c:	f101 0814 	add.w	r8, r1, #20
 8010780:	00a3      	lsls	r3, r4, #2
 8010782:	f100 0514 	add.w	r5, r0, #20
 8010786:	9300      	str	r3, [sp, #0]
 8010788:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801078c:	9301      	str	r3, [sp, #4]
 801078e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010792:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010796:	3301      	adds	r3, #1
 8010798:	429a      	cmp	r2, r3
 801079a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801079e:	fbb2 f6f3 	udiv	r6, r2, r3
 80107a2:	d32e      	bcc.n	8010802 <quorem+0x96>
 80107a4:	f04f 0a00 	mov.w	sl, #0
 80107a8:	46c4      	mov	ip, r8
 80107aa:	46ae      	mov	lr, r5
 80107ac:	46d3      	mov	fp, sl
 80107ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 80107b2:	b298      	uxth	r0, r3
 80107b4:	fb06 a000 	mla	r0, r6, r0, sl
 80107b8:	0c02      	lsrs	r2, r0, #16
 80107ba:	0c1b      	lsrs	r3, r3, #16
 80107bc:	fb06 2303 	mla	r3, r6, r3, r2
 80107c0:	f8de 2000 	ldr.w	r2, [lr]
 80107c4:	b280      	uxth	r0, r0
 80107c6:	b292      	uxth	r2, r2
 80107c8:	1a12      	subs	r2, r2, r0
 80107ca:	445a      	add	r2, fp
 80107cc:	f8de 0000 	ldr.w	r0, [lr]
 80107d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80107da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80107de:	b292      	uxth	r2, r2
 80107e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80107e4:	45e1      	cmp	r9, ip
 80107e6:	f84e 2b04 	str.w	r2, [lr], #4
 80107ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80107ee:	d2de      	bcs.n	80107ae <quorem+0x42>
 80107f0:	9b00      	ldr	r3, [sp, #0]
 80107f2:	58eb      	ldr	r3, [r5, r3]
 80107f4:	b92b      	cbnz	r3, 8010802 <quorem+0x96>
 80107f6:	9b01      	ldr	r3, [sp, #4]
 80107f8:	3b04      	subs	r3, #4
 80107fa:	429d      	cmp	r5, r3
 80107fc:	461a      	mov	r2, r3
 80107fe:	d32f      	bcc.n	8010860 <quorem+0xf4>
 8010800:	613c      	str	r4, [r7, #16]
 8010802:	4638      	mov	r0, r7
 8010804:	f001 fd10 	bl	8012228 <__mcmp>
 8010808:	2800      	cmp	r0, #0
 801080a:	db25      	blt.n	8010858 <quorem+0xec>
 801080c:	4629      	mov	r1, r5
 801080e:	2000      	movs	r0, #0
 8010810:	f858 2b04 	ldr.w	r2, [r8], #4
 8010814:	f8d1 c000 	ldr.w	ip, [r1]
 8010818:	fa1f fe82 	uxth.w	lr, r2
 801081c:	fa1f f38c 	uxth.w	r3, ip
 8010820:	eba3 030e 	sub.w	r3, r3, lr
 8010824:	4403      	add	r3, r0
 8010826:	0c12      	lsrs	r2, r2, #16
 8010828:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801082c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010830:	b29b      	uxth	r3, r3
 8010832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010836:	45c1      	cmp	r9, r8
 8010838:	f841 3b04 	str.w	r3, [r1], #4
 801083c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010840:	d2e6      	bcs.n	8010810 <quorem+0xa4>
 8010842:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801084a:	b922      	cbnz	r2, 8010856 <quorem+0xea>
 801084c:	3b04      	subs	r3, #4
 801084e:	429d      	cmp	r5, r3
 8010850:	461a      	mov	r2, r3
 8010852:	d30b      	bcc.n	801086c <quorem+0x100>
 8010854:	613c      	str	r4, [r7, #16]
 8010856:	3601      	adds	r6, #1
 8010858:	4630      	mov	r0, r6
 801085a:	b003      	add	sp, #12
 801085c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010860:	6812      	ldr	r2, [r2, #0]
 8010862:	3b04      	subs	r3, #4
 8010864:	2a00      	cmp	r2, #0
 8010866:	d1cb      	bne.n	8010800 <quorem+0x94>
 8010868:	3c01      	subs	r4, #1
 801086a:	e7c6      	b.n	80107fa <quorem+0x8e>
 801086c:	6812      	ldr	r2, [r2, #0]
 801086e:	3b04      	subs	r3, #4
 8010870:	2a00      	cmp	r2, #0
 8010872:	d1ef      	bne.n	8010854 <quorem+0xe8>
 8010874:	3c01      	subs	r4, #1
 8010876:	e7ea      	b.n	801084e <quorem+0xe2>
 8010878:	2000      	movs	r0, #0
 801087a:	e7ee      	b.n	801085a <quorem+0xee>
 801087c:	0000      	movs	r0, r0
	...

08010880 <_dtoa_r>:
 8010880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010884:	69c7      	ldr	r7, [r0, #28]
 8010886:	b099      	sub	sp, #100	@ 0x64
 8010888:	ed8d 0b02 	vstr	d0, [sp, #8]
 801088c:	ec55 4b10 	vmov	r4, r5, d0
 8010890:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010892:	9109      	str	r1, [sp, #36]	@ 0x24
 8010894:	4683      	mov	fp, r0
 8010896:	920e      	str	r2, [sp, #56]	@ 0x38
 8010898:	9313      	str	r3, [sp, #76]	@ 0x4c
 801089a:	b97f      	cbnz	r7, 80108bc <_dtoa_r+0x3c>
 801089c:	2010      	movs	r0, #16
 801089e:	f001 f937 	bl	8011b10 <malloc>
 80108a2:	4602      	mov	r2, r0
 80108a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80108a8:	b920      	cbnz	r0, 80108b4 <_dtoa_r+0x34>
 80108aa:	4ba7      	ldr	r3, [pc, #668]	@ (8010b48 <_dtoa_r+0x2c8>)
 80108ac:	21ef      	movs	r1, #239	@ 0xef
 80108ae:	48a7      	ldr	r0, [pc, #668]	@ (8010b4c <_dtoa_r+0x2cc>)
 80108b0:	f7ff ff3e 	bl	8010730 <__assert_func>
 80108b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80108b8:	6007      	str	r7, [r0, #0]
 80108ba:	60c7      	str	r7, [r0, #12]
 80108bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80108c0:	6819      	ldr	r1, [r3, #0]
 80108c2:	b159      	cbz	r1, 80108dc <_dtoa_r+0x5c>
 80108c4:	685a      	ldr	r2, [r3, #4]
 80108c6:	604a      	str	r2, [r1, #4]
 80108c8:	2301      	movs	r3, #1
 80108ca:	4093      	lsls	r3, r2
 80108cc:	608b      	str	r3, [r1, #8]
 80108ce:	4658      	mov	r0, fp
 80108d0:	f001 fa26 	bl	8011d20 <_Bfree>
 80108d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80108d8:	2200      	movs	r2, #0
 80108da:	601a      	str	r2, [r3, #0]
 80108dc:	1e2b      	subs	r3, r5, #0
 80108de:	bfb9      	ittee	lt
 80108e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80108e4:	9303      	strlt	r3, [sp, #12]
 80108e6:	2300      	movge	r3, #0
 80108e8:	6033      	strge	r3, [r6, #0]
 80108ea:	9f03      	ldr	r7, [sp, #12]
 80108ec:	4b98      	ldr	r3, [pc, #608]	@ (8010b50 <_dtoa_r+0x2d0>)
 80108ee:	bfbc      	itt	lt
 80108f0:	2201      	movlt	r2, #1
 80108f2:	6032      	strlt	r2, [r6, #0]
 80108f4:	43bb      	bics	r3, r7
 80108f6:	d112      	bne.n	801091e <_dtoa_r+0x9e>
 80108f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80108fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80108fe:	6013      	str	r3, [r2, #0]
 8010900:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010904:	4323      	orrs	r3, r4
 8010906:	f000 854d 	beq.w	80113a4 <_dtoa_r+0xb24>
 801090a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801090c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010b64 <_dtoa_r+0x2e4>
 8010910:	2b00      	cmp	r3, #0
 8010912:	f000 854f 	beq.w	80113b4 <_dtoa_r+0xb34>
 8010916:	f10a 0303 	add.w	r3, sl, #3
 801091a:	f000 bd49 	b.w	80113b0 <_dtoa_r+0xb30>
 801091e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010922:	2200      	movs	r2, #0
 8010924:	ec51 0b17 	vmov	r0, r1, d7
 8010928:	2300      	movs	r3, #0
 801092a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801092e:	f7f0 f903 	bl	8000b38 <__aeabi_dcmpeq>
 8010932:	4680      	mov	r8, r0
 8010934:	b158      	cbz	r0, 801094e <_dtoa_r+0xce>
 8010936:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010938:	2301      	movs	r3, #1
 801093a:	6013      	str	r3, [r2, #0]
 801093c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801093e:	b113      	cbz	r3, 8010946 <_dtoa_r+0xc6>
 8010940:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010942:	4b84      	ldr	r3, [pc, #528]	@ (8010b54 <_dtoa_r+0x2d4>)
 8010944:	6013      	str	r3, [r2, #0]
 8010946:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010b68 <_dtoa_r+0x2e8>
 801094a:	f000 bd33 	b.w	80113b4 <_dtoa_r+0xb34>
 801094e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010952:	aa16      	add	r2, sp, #88	@ 0x58
 8010954:	a917      	add	r1, sp, #92	@ 0x5c
 8010956:	4658      	mov	r0, fp
 8010958:	f001 fd86 	bl	8012468 <__d2b>
 801095c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010960:	4681      	mov	r9, r0
 8010962:	2e00      	cmp	r6, #0
 8010964:	d077      	beq.n	8010a56 <_dtoa_r+0x1d6>
 8010966:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010968:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801096c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010974:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010978:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801097c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010980:	4619      	mov	r1, r3
 8010982:	2200      	movs	r2, #0
 8010984:	4b74      	ldr	r3, [pc, #464]	@ (8010b58 <_dtoa_r+0x2d8>)
 8010986:	f7ef fcb7 	bl	80002f8 <__aeabi_dsub>
 801098a:	a369      	add	r3, pc, #420	@ (adr r3, 8010b30 <_dtoa_r+0x2b0>)
 801098c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010990:	f7ef fe6a 	bl	8000668 <__aeabi_dmul>
 8010994:	a368      	add	r3, pc, #416	@ (adr r3, 8010b38 <_dtoa_r+0x2b8>)
 8010996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099a:	f7ef fcaf 	bl	80002fc <__adddf3>
 801099e:	4604      	mov	r4, r0
 80109a0:	4630      	mov	r0, r6
 80109a2:	460d      	mov	r5, r1
 80109a4:	f7ef fdf6 	bl	8000594 <__aeabi_i2d>
 80109a8:	a365      	add	r3, pc, #404	@ (adr r3, 8010b40 <_dtoa_r+0x2c0>)
 80109aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ae:	f7ef fe5b 	bl	8000668 <__aeabi_dmul>
 80109b2:	4602      	mov	r2, r0
 80109b4:	460b      	mov	r3, r1
 80109b6:	4620      	mov	r0, r4
 80109b8:	4629      	mov	r1, r5
 80109ba:	f7ef fc9f 	bl	80002fc <__adddf3>
 80109be:	4604      	mov	r4, r0
 80109c0:	460d      	mov	r5, r1
 80109c2:	f7f0 f901 	bl	8000bc8 <__aeabi_d2iz>
 80109c6:	2200      	movs	r2, #0
 80109c8:	4607      	mov	r7, r0
 80109ca:	2300      	movs	r3, #0
 80109cc:	4620      	mov	r0, r4
 80109ce:	4629      	mov	r1, r5
 80109d0:	f7f0 f8bc 	bl	8000b4c <__aeabi_dcmplt>
 80109d4:	b140      	cbz	r0, 80109e8 <_dtoa_r+0x168>
 80109d6:	4638      	mov	r0, r7
 80109d8:	f7ef fddc 	bl	8000594 <__aeabi_i2d>
 80109dc:	4622      	mov	r2, r4
 80109de:	462b      	mov	r3, r5
 80109e0:	f7f0 f8aa 	bl	8000b38 <__aeabi_dcmpeq>
 80109e4:	b900      	cbnz	r0, 80109e8 <_dtoa_r+0x168>
 80109e6:	3f01      	subs	r7, #1
 80109e8:	2f16      	cmp	r7, #22
 80109ea:	d851      	bhi.n	8010a90 <_dtoa_r+0x210>
 80109ec:	4b5b      	ldr	r3, [pc, #364]	@ (8010b5c <_dtoa_r+0x2dc>)
 80109ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80109f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80109fa:	f7f0 f8a7 	bl	8000b4c <__aeabi_dcmplt>
 80109fe:	2800      	cmp	r0, #0
 8010a00:	d048      	beq.n	8010a94 <_dtoa_r+0x214>
 8010a02:	3f01      	subs	r7, #1
 8010a04:	2300      	movs	r3, #0
 8010a06:	9312      	str	r3, [sp, #72]	@ 0x48
 8010a08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010a0a:	1b9b      	subs	r3, r3, r6
 8010a0c:	1e5a      	subs	r2, r3, #1
 8010a0e:	bf44      	itt	mi
 8010a10:	f1c3 0801 	rsbmi	r8, r3, #1
 8010a14:	2300      	movmi	r3, #0
 8010a16:	9208      	str	r2, [sp, #32]
 8010a18:	bf54      	ite	pl
 8010a1a:	f04f 0800 	movpl.w	r8, #0
 8010a1e:	9308      	strmi	r3, [sp, #32]
 8010a20:	2f00      	cmp	r7, #0
 8010a22:	db39      	blt.n	8010a98 <_dtoa_r+0x218>
 8010a24:	9b08      	ldr	r3, [sp, #32]
 8010a26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010a28:	443b      	add	r3, r7
 8010a2a:	9308      	str	r3, [sp, #32]
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a32:	2b09      	cmp	r3, #9
 8010a34:	d864      	bhi.n	8010b00 <_dtoa_r+0x280>
 8010a36:	2b05      	cmp	r3, #5
 8010a38:	bfc4      	itt	gt
 8010a3a:	3b04      	subgt	r3, #4
 8010a3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a40:	f1a3 0302 	sub.w	r3, r3, #2
 8010a44:	bfcc      	ite	gt
 8010a46:	2400      	movgt	r4, #0
 8010a48:	2401      	movle	r4, #1
 8010a4a:	2b03      	cmp	r3, #3
 8010a4c:	d863      	bhi.n	8010b16 <_dtoa_r+0x296>
 8010a4e:	e8df f003 	tbb	[pc, r3]
 8010a52:	372a      	.short	0x372a
 8010a54:	5535      	.short	0x5535
 8010a56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010a5a:	441e      	add	r6, r3
 8010a5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010a60:	2b20      	cmp	r3, #32
 8010a62:	bfc1      	itttt	gt
 8010a64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010a68:	409f      	lslgt	r7, r3
 8010a6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010a6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010a72:	bfd6      	itet	le
 8010a74:	f1c3 0320 	rsble	r3, r3, #32
 8010a78:	ea47 0003 	orrgt.w	r0, r7, r3
 8010a7c:	fa04 f003 	lslle.w	r0, r4, r3
 8010a80:	f7ef fd78 	bl	8000574 <__aeabi_ui2d>
 8010a84:	2201      	movs	r2, #1
 8010a86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010a8a:	3e01      	subs	r6, #1
 8010a8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8010a8e:	e777      	b.n	8010980 <_dtoa_r+0x100>
 8010a90:	2301      	movs	r3, #1
 8010a92:	e7b8      	b.n	8010a06 <_dtoa_r+0x186>
 8010a94:	9012      	str	r0, [sp, #72]	@ 0x48
 8010a96:	e7b7      	b.n	8010a08 <_dtoa_r+0x188>
 8010a98:	427b      	negs	r3, r7
 8010a9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	eba8 0807 	sub.w	r8, r8, r7
 8010aa2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010aa4:	e7c4      	b.n	8010a30 <_dtoa_r+0x1b0>
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010aaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	dc35      	bgt.n	8010b1c <_dtoa_r+0x29c>
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	9300      	str	r3, [sp, #0]
 8010ab4:	9307      	str	r3, [sp, #28]
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	920e      	str	r2, [sp, #56]	@ 0x38
 8010aba:	e00b      	b.n	8010ad4 <_dtoa_r+0x254>
 8010abc:	2301      	movs	r3, #1
 8010abe:	e7f3      	b.n	8010aa8 <_dtoa_r+0x228>
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ac6:	18fb      	adds	r3, r7, r3
 8010ac8:	9300      	str	r3, [sp, #0]
 8010aca:	3301      	adds	r3, #1
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	9307      	str	r3, [sp, #28]
 8010ad0:	bfb8      	it	lt
 8010ad2:	2301      	movlt	r3, #1
 8010ad4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010ad8:	2100      	movs	r1, #0
 8010ada:	2204      	movs	r2, #4
 8010adc:	f102 0514 	add.w	r5, r2, #20
 8010ae0:	429d      	cmp	r5, r3
 8010ae2:	d91f      	bls.n	8010b24 <_dtoa_r+0x2a4>
 8010ae4:	6041      	str	r1, [r0, #4]
 8010ae6:	4658      	mov	r0, fp
 8010ae8:	f001 f8da 	bl	8011ca0 <_Balloc>
 8010aec:	4682      	mov	sl, r0
 8010aee:	2800      	cmp	r0, #0
 8010af0:	d13c      	bne.n	8010b6c <_dtoa_r+0x2ec>
 8010af2:	4b1b      	ldr	r3, [pc, #108]	@ (8010b60 <_dtoa_r+0x2e0>)
 8010af4:	4602      	mov	r2, r0
 8010af6:	f240 11af 	movw	r1, #431	@ 0x1af
 8010afa:	e6d8      	b.n	80108ae <_dtoa_r+0x2e>
 8010afc:	2301      	movs	r3, #1
 8010afe:	e7e0      	b.n	8010ac2 <_dtoa_r+0x242>
 8010b00:	2401      	movs	r4, #1
 8010b02:	2300      	movs	r3, #0
 8010b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010b08:	f04f 33ff 	mov.w	r3, #4294967295
 8010b0c:	9300      	str	r3, [sp, #0]
 8010b0e:	9307      	str	r3, [sp, #28]
 8010b10:	2200      	movs	r2, #0
 8010b12:	2312      	movs	r3, #18
 8010b14:	e7d0      	b.n	8010ab8 <_dtoa_r+0x238>
 8010b16:	2301      	movs	r3, #1
 8010b18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b1a:	e7f5      	b.n	8010b08 <_dtoa_r+0x288>
 8010b1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b1e:	9300      	str	r3, [sp, #0]
 8010b20:	9307      	str	r3, [sp, #28]
 8010b22:	e7d7      	b.n	8010ad4 <_dtoa_r+0x254>
 8010b24:	3101      	adds	r1, #1
 8010b26:	0052      	lsls	r2, r2, #1
 8010b28:	e7d8      	b.n	8010adc <_dtoa_r+0x25c>
 8010b2a:	bf00      	nop
 8010b2c:	f3af 8000 	nop.w
 8010b30:	636f4361 	.word	0x636f4361
 8010b34:	3fd287a7 	.word	0x3fd287a7
 8010b38:	8b60c8b3 	.word	0x8b60c8b3
 8010b3c:	3fc68a28 	.word	0x3fc68a28
 8010b40:	509f79fb 	.word	0x509f79fb
 8010b44:	3fd34413 	.word	0x3fd34413
 8010b48:	08013e44 	.word	0x08013e44
 8010b4c:	08013f06 	.word	0x08013f06
 8010b50:	7ff00000 	.word	0x7ff00000
 8010b54:	08013e21 	.word	0x08013e21
 8010b58:	3ff80000 	.word	0x3ff80000
 8010b5c:	08014060 	.word	0x08014060
 8010b60:	08013f5e 	.word	0x08013f5e
 8010b64:	08013f02 	.word	0x08013f02
 8010b68:	08013e20 	.word	0x08013e20
 8010b6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010b70:	6018      	str	r0, [r3, #0]
 8010b72:	9b07      	ldr	r3, [sp, #28]
 8010b74:	2b0e      	cmp	r3, #14
 8010b76:	f200 80a4 	bhi.w	8010cc2 <_dtoa_r+0x442>
 8010b7a:	2c00      	cmp	r4, #0
 8010b7c:	f000 80a1 	beq.w	8010cc2 <_dtoa_r+0x442>
 8010b80:	2f00      	cmp	r7, #0
 8010b82:	dd33      	ble.n	8010bec <_dtoa_r+0x36c>
 8010b84:	4bad      	ldr	r3, [pc, #692]	@ (8010e3c <_dtoa_r+0x5bc>)
 8010b86:	f007 020f 	and.w	r2, r7, #15
 8010b8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b8e:	ed93 7b00 	vldr	d7, [r3]
 8010b92:	05f8      	lsls	r0, r7, #23
 8010b94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010b98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010b9c:	d516      	bpl.n	8010bcc <_dtoa_r+0x34c>
 8010b9e:	4ba8      	ldr	r3, [pc, #672]	@ (8010e40 <_dtoa_r+0x5c0>)
 8010ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010ba4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010ba8:	f7ef fe88 	bl	80008bc <__aeabi_ddiv>
 8010bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bb0:	f004 040f 	and.w	r4, r4, #15
 8010bb4:	2603      	movs	r6, #3
 8010bb6:	4da2      	ldr	r5, [pc, #648]	@ (8010e40 <_dtoa_r+0x5c0>)
 8010bb8:	b954      	cbnz	r4, 8010bd0 <_dtoa_r+0x350>
 8010bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bc2:	f7ef fe7b 	bl	80008bc <__aeabi_ddiv>
 8010bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bca:	e028      	b.n	8010c1e <_dtoa_r+0x39e>
 8010bcc:	2602      	movs	r6, #2
 8010bce:	e7f2      	b.n	8010bb6 <_dtoa_r+0x336>
 8010bd0:	07e1      	lsls	r1, r4, #31
 8010bd2:	d508      	bpl.n	8010be6 <_dtoa_r+0x366>
 8010bd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010bdc:	f7ef fd44 	bl	8000668 <__aeabi_dmul>
 8010be0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010be4:	3601      	adds	r6, #1
 8010be6:	1064      	asrs	r4, r4, #1
 8010be8:	3508      	adds	r5, #8
 8010bea:	e7e5      	b.n	8010bb8 <_dtoa_r+0x338>
 8010bec:	f000 80d2 	beq.w	8010d94 <_dtoa_r+0x514>
 8010bf0:	427c      	negs	r4, r7
 8010bf2:	4b92      	ldr	r3, [pc, #584]	@ (8010e3c <_dtoa_r+0x5bc>)
 8010bf4:	4d92      	ldr	r5, [pc, #584]	@ (8010e40 <_dtoa_r+0x5c0>)
 8010bf6:	f004 020f 	and.w	r2, r4, #15
 8010bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c06:	f7ef fd2f 	bl	8000668 <__aeabi_dmul>
 8010c0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c0e:	1124      	asrs	r4, r4, #4
 8010c10:	2300      	movs	r3, #0
 8010c12:	2602      	movs	r6, #2
 8010c14:	2c00      	cmp	r4, #0
 8010c16:	f040 80b2 	bne.w	8010d7e <_dtoa_r+0x4fe>
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d1d3      	bne.n	8010bc6 <_dtoa_r+0x346>
 8010c1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010c20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f000 80b7 	beq.w	8010d98 <_dtoa_r+0x518>
 8010c2a:	4b86      	ldr	r3, [pc, #536]	@ (8010e44 <_dtoa_r+0x5c4>)
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	4620      	mov	r0, r4
 8010c30:	4629      	mov	r1, r5
 8010c32:	f7ef ff8b 	bl	8000b4c <__aeabi_dcmplt>
 8010c36:	2800      	cmp	r0, #0
 8010c38:	f000 80ae 	beq.w	8010d98 <_dtoa_r+0x518>
 8010c3c:	9b07      	ldr	r3, [sp, #28]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	f000 80aa 	beq.w	8010d98 <_dtoa_r+0x518>
 8010c44:	9b00      	ldr	r3, [sp, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	dd37      	ble.n	8010cba <_dtoa_r+0x43a>
 8010c4a:	1e7b      	subs	r3, r7, #1
 8010c4c:	9304      	str	r3, [sp, #16]
 8010c4e:	4620      	mov	r0, r4
 8010c50:	4b7d      	ldr	r3, [pc, #500]	@ (8010e48 <_dtoa_r+0x5c8>)
 8010c52:	2200      	movs	r2, #0
 8010c54:	4629      	mov	r1, r5
 8010c56:	f7ef fd07 	bl	8000668 <__aeabi_dmul>
 8010c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c5e:	9c00      	ldr	r4, [sp, #0]
 8010c60:	3601      	adds	r6, #1
 8010c62:	4630      	mov	r0, r6
 8010c64:	f7ef fc96 	bl	8000594 <__aeabi_i2d>
 8010c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c6c:	f7ef fcfc 	bl	8000668 <__aeabi_dmul>
 8010c70:	4b76      	ldr	r3, [pc, #472]	@ (8010e4c <_dtoa_r+0x5cc>)
 8010c72:	2200      	movs	r2, #0
 8010c74:	f7ef fb42 	bl	80002fc <__adddf3>
 8010c78:	4605      	mov	r5, r0
 8010c7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010c7e:	2c00      	cmp	r4, #0
 8010c80:	f040 808d 	bne.w	8010d9e <_dtoa_r+0x51e>
 8010c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c88:	4b71      	ldr	r3, [pc, #452]	@ (8010e50 <_dtoa_r+0x5d0>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f7ef fb34 	bl	80002f8 <__aeabi_dsub>
 8010c90:	4602      	mov	r2, r0
 8010c92:	460b      	mov	r3, r1
 8010c94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c98:	462a      	mov	r2, r5
 8010c9a:	4633      	mov	r3, r6
 8010c9c:	f7ef ff74 	bl	8000b88 <__aeabi_dcmpgt>
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	f040 828b 	bne.w	80111bc <_dtoa_r+0x93c>
 8010ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010caa:	462a      	mov	r2, r5
 8010cac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010cb0:	f7ef ff4c 	bl	8000b4c <__aeabi_dcmplt>
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	f040 8128 	bne.w	8010f0a <_dtoa_r+0x68a>
 8010cba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010cbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010cc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f2c0 815a 	blt.w	8010f7e <_dtoa_r+0x6fe>
 8010cca:	2f0e      	cmp	r7, #14
 8010ccc:	f300 8157 	bgt.w	8010f7e <_dtoa_r+0x6fe>
 8010cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8010e3c <_dtoa_r+0x5bc>)
 8010cd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010cd6:	ed93 7b00 	vldr	d7, [r3]
 8010cda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	ed8d 7b00 	vstr	d7, [sp]
 8010ce2:	da03      	bge.n	8010cec <_dtoa_r+0x46c>
 8010ce4:	9b07      	ldr	r3, [sp, #28]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	f340 8101 	ble.w	8010eee <_dtoa_r+0x66e>
 8010cec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010cf0:	4656      	mov	r6, sl
 8010cf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	4629      	mov	r1, r5
 8010cfa:	f7ef fddf 	bl	80008bc <__aeabi_ddiv>
 8010cfe:	f7ef ff63 	bl	8000bc8 <__aeabi_d2iz>
 8010d02:	4680      	mov	r8, r0
 8010d04:	f7ef fc46 	bl	8000594 <__aeabi_i2d>
 8010d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d0c:	f7ef fcac 	bl	8000668 <__aeabi_dmul>
 8010d10:	4602      	mov	r2, r0
 8010d12:	460b      	mov	r3, r1
 8010d14:	4620      	mov	r0, r4
 8010d16:	4629      	mov	r1, r5
 8010d18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010d1c:	f7ef faec 	bl	80002f8 <__aeabi_dsub>
 8010d20:	f806 4b01 	strb.w	r4, [r6], #1
 8010d24:	9d07      	ldr	r5, [sp, #28]
 8010d26:	eba6 040a 	sub.w	r4, r6, sl
 8010d2a:	42a5      	cmp	r5, r4
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	460b      	mov	r3, r1
 8010d30:	f040 8117 	bne.w	8010f62 <_dtoa_r+0x6e2>
 8010d34:	f7ef fae2 	bl	80002fc <__adddf3>
 8010d38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d3c:	4604      	mov	r4, r0
 8010d3e:	460d      	mov	r5, r1
 8010d40:	f7ef ff22 	bl	8000b88 <__aeabi_dcmpgt>
 8010d44:	2800      	cmp	r0, #0
 8010d46:	f040 80f9 	bne.w	8010f3c <_dtoa_r+0x6bc>
 8010d4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d4e:	4620      	mov	r0, r4
 8010d50:	4629      	mov	r1, r5
 8010d52:	f7ef fef1 	bl	8000b38 <__aeabi_dcmpeq>
 8010d56:	b118      	cbz	r0, 8010d60 <_dtoa_r+0x4e0>
 8010d58:	f018 0f01 	tst.w	r8, #1
 8010d5c:	f040 80ee 	bne.w	8010f3c <_dtoa_r+0x6bc>
 8010d60:	4649      	mov	r1, r9
 8010d62:	4658      	mov	r0, fp
 8010d64:	f000 ffdc 	bl	8011d20 <_Bfree>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	7033      	strb	r3, [r6, #0]
 8010d6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010d6e:	3701      	adds	r7, #1
 8010d70:	601f      	str	r7, [r3, #0]
 8010d72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f000 831d 	beq.w	80113b4 <_dtoa_r+0xb34>
 8010d7a:	601e      	str	r6, [r3, #0]
 8010d7c:	e31a      	b.n	80113b4 <_dtoa_r+0xb34>
 8010d7e:	07e2      	lsls	r2, r4, #31
 8010d80:	d505      	bpl.n	8010d8e <_dtoa_r+0x50e>
 8010d82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010d86:	f7ef fc6f 	bl	8000668 <__aeabi_dmul>
 8010d8a:	3601      	adds	r6, #1
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	1064      	asrs	r4, r4, #1
 8010d90:	3508      	adds	r5, #8
 8010d92:	e73f      	b.n	8010c14 <_dtoa_r+0x394>
 8010d94:	2602      	movs	r6, #2
 8010d96:	e742      	b.n	8010c1e <_dtoa_r+0x39e>
 8010d98:	9c07      	ldr	r4, [sp, #28]
 8010d9a:	9704      	str	r7, [sp, #16]
 8010d9c:	e761      	b.n	8010c62 <_dtoa_r+0x3e2>
 8010d9e:	4b27      	ldr	r3, [pc, #156]	@ (8010e3c <_dtoa_r+0x5bc>)
 8010da0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010da2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010da6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010daa:	4454      	add	r4, sl
 8010dac:	2900      	cmp	r1, #0
 8010dae:	d053      	beq.n	8010e58 <_dtoa_r+0x5d8>
 8010db0:	4928      	ldr	r1, [pc, #160]	@ (8010e54 <_dtoa_r+0x5d4>)
 8010db2:	2000      	movs	r0, #0
 8010db4:	f7ef fd82 	bl	80008bc <__aeabi_ddiv>
 8010db8:	4633      	mov	r3, r6
 8010dba:	462a      	mov	r2, r5
 8010dbc:	f7ef fa9c 	bl	80002f8 <__aeabi_dsub>
 8010dc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010dc4:	4656      	mov	r6, sl
 8010dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dca:	f7ef fefd 	bl	8000bc8 <__aeabi_d2iz>
 8010dce:	4605      	mov	r5, r0
 8010dd0:	f7ef fbe0 	bl	8000594 <__aeabi_i2d>
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	460b      	mov	r3, r1
 8010dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ddc:	f7ef fa8c 	bl	80002f8 <__aeabi_dsub>
 8010de0:	3530      	adds	r5, #48	@ 0x30
 8010de2:	4602      	mov	r2, r0
 8010de4:	460b      	mov	r3, r1
 8010de6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010dea:	f806 5b01 	strb.w	r5, [r6], #1
 8010dee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010df2:	f7ef feab 	bl	8000b4c <__aeabi_dcmplt>
 8010df6:	2800      	cmp	r0, #0
 8010df8:	d171      	bne.n	8010ede <_dtoa_r+0x65e>
 8010dfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010dfe:	4911      	ldr	r1, [pc, #68]	@ (8010e44 <_dtoa_r+0x5c4>)
 8010e00:	2000      	movs	r0, #0
 8010e02:	f7ef fa79 	bl	80002f8 <__aeabi_dsub>
 8010e06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010e0a:	f7ef fe9f 	bl	8000b4c <__aeabi_dcmplt>
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	f040 8095 	bne.w	8010f3e <_dtoa_r+0x6be>
 8010e14:	42a6      	cmp	r6, r4
 8010e16:	f43f af50 	beq.w	8010cba <_dtoa_r+0x43a>
 8010e1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8010e48 <_dtoa_r+0x5c8>)
 8010e20:	2200      	movs	r2, #0
 8010e22:	f7ef fc21 	bl	8000668 <__aeabi_dmul>
 8010e26:	4b08      	ldr	r3, [pc, #32]	@ (8010e48 <_dtoa_r+0x5c8>)
 8010e28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e32:	f7ef fc19 	bl	8000668 <__aeabi_dmul>
 8010e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e3a:	e7c4      	b.n	8010dc6 <_dtoa_r+0x546>
 8010e3c:	08014060 	.word	0x08014060
 8010e40:	08014038 	.word	0x08014038
 8010e44:	3ff00000 	.word	0x3ff00000
 8010e48:	40240000 	.word	0x40240000
 8010e4c:	401c0000 	.word	0x401c0000
 8010e50:	40140000 	.word	0x40140000
 8010e54:	3fe00000 	.word	0x3fe00000
 8010e58:	4631      	mov	r1, r6
 8010e5a:	4628      	mov	r0, r5
 8010e5c:	f7ef fc04 	bl	8000668 <__aeabi_dmul>
 8010e60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010e64:	9415      	str	r4, [sp, #84]	@ 0x54
 8010e66:	4656      	mov	r6, sl
 8010e68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e6c:	f7ef feac 	bl	8000bc8 <__aeabi_d2iz>
 8010e70:	4605      	mov	r5, r0
 8010e72:	f7ef fb8f 	bl	8000594 <__aeabi_i2d>
 8010e76:	4602      	mov	r2, r0
 8010e78:	460b      	mov	r3, r1
 8010e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e7e:	f7ef fa3b 	bl	80002f8 <__aeabi_dsub>
 8010e82:	3530      	adds	r5, #48	@ 0x30
 8010e84:	f806 5b01 	strb.w	r5, [r6], #1
 8010e88:	4602      	mov	r2, r0
 8010e8a:	460b      	mov	r3, r1
 8010e8c:	42a6      	cmp	r6, r4
 8010e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010e92:	f04f 0200 	mov.w	r2, #0
 8010e96:	d124      	bne.n	8010ee2 <_dtoa_r+0x662>
 8010e98:	4bac      	ldr	r3, [pc, #688]	@ (801114c <_dtoa_r+0x8cc>)
 8010e9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010e9e:	f7ef fa2d 	bl	80002fc <__adddf3>
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010eaa:	f7ef fe6d 	bl	8000b88 <__aeabi_dcmpgt>
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d145      	bne.n	8010f3e <_dtoa_r+0x6be>
 8010eb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010eb6:	49a5      	ldr	r1, [pc, #660]	@ (801114c <_dtoa_r+0x8cc>)
 8010eb8:	2000      	movs	r0, #0
 8010eba:	f7ef fa1d 	bl	80002f8 <__aeabi_dsub>
 8010ebe:	4602      	mov	r2, r0
 8010ec0:	460b      	mov	r3, r1
 8010ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ec6:	f7ef fe41 	bl	8000b4c <__aeabi_dcmplt>
 8010eca:	2800      	cmp	r0, #0
 8010ecc:	f43f aef5 	beq.w	8010cba <_dtoa_r+0x43a>
 8010ed0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010ed2:	1e73      	subs	r3, r6, #1
 8010ed4:	9315      	str	r3, [sp, #84]	@ 0x54
 8010ed6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010eda:	2b30      	cmp	r3, #48	@ 0x30
 8010edc:	d0f8      	beq.n	8010ed0 <_dtoa_r+0x650>
 8010ede:	9f04      	ldr	r7, [sp, #16]
 8010ee0:	e73e      	b.n	8010d60 <_dtoa_r+0x4e0>
 8010ee2:	4b9b      	ldr	r3, [pc, #620]	@ (8011150 <_dtoa_r+0x8d0>)
 8010ee4:	f7ef fbc0 	bl	8000668 <__aeabi_dmul>
 8010ee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010eec:	e7bc      	b.n	8010e68 <_dtoa_r+0x5e8>
 8010eee:	d10c      	bne.n	8010f0a <_dtoa_r+0x68a>
 8010ef0:	4b98      	ldr	r3, [pc, #608]	@ (8011154 <_dtoa_r+0x8d4>)
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ef8:	f7ef fbb6 	bl	8000668 <__aeabi_dmul>
 8010efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f00:	f7ef fe38 	bl	8000b74 <__aeabi_dcmpge>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	f000 8157 	beq.w	80111b8 <_dtoa_r+0x938>
 8010f0a:	2400      	movs	r4, #0
 8010f0c:	4625      	mov	r5, r4
 8010f0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f10:	43db      	mvns	r3, r3
 8010f12:	9304      	str	r3, [sp, #16]
 8010f14:	4656      	mov	r6, sl
 8010f16:	2700      	movs	r7, #0
 8010f18:	4621      	mov	r1, r4
 8010f1a:	4658      	mov	r0, fp
 8010f1c:	f000 ff00 	bl	8011d20 <_Bfree>
 8010f20:	2d00      	cmp	r5, #0
 8010f22:	d0dc      	beq.n	8010ede <_dtoa_r+0x65e>
 8010f24:	b12f      	cbz	r7, 8010f32 <_dtoa_r+0x6b2>
 8010f26:	42af      	cmp	r7, r5
 8010f28:	d003      	beq.n	8010f32 <_dtoa_r+0x6b2>
 8010f2a:	4639      	mov	r1, r7
 8010f2c:	4658      	mov	r0, fp
 8010f2e:	f000 fef7 	bl	8011d20 <_Bfree>
 8010f32:	4629      	mov	r1, r5
 8010f34:	4658      	mov	r0, fp
 8010f36:	f000 fef3 	bl	8011d20 <_Bfree>
 8010f3a:	e7d0      	b.n	8010ede <_dtoa_r+0x65e>
 8010f3c:	9704      	str	r7, [sp, #16]
 8010f3e:	4633      	mov	r3, r6
 8010f40:	461e      	mov	r6, r3
 8010f42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f46:	2a39      	cmp	r2, #57	@ 0x39
 8010f48:	d107      	bne.n	8010f5a <_dtoa_r+0x6da>
 8010f4a:	459a      	cmp	sl, r3
 8010f4c:	d1f8      	bne.n	8010f40 <_dtoa_r+0x6c0>
 8010f4e:	9a04      	ldr	r2, [sp, #16]
 8010f50:	3201      	adds	r2, #1
 8010f52:	9204      	str	r2, [sp, #16]
 8010f54:	2230      	movs	r2, #48	@ 0x30
 8010f56:	f88a 2000 	strb.w	r2, [sl]
 8010f5a:	781a      	ldrb	r2, [r3, #0]
 8010f5c:	3201      	adds	r2, #1
 8010f5e:	701a      	strb	r2, [r3, #0]
 8010f60:	e7bd      	b.n	8010ede <_dtoa_r+0x65e>
 8010f62:	4b7b      	ldr	r3, [pc, #492]	@ (8011150 <_dtoa_r+0x8d0>)
 8010f64:	2200      	movs	r2, #0
 8010f66:	f7ef fb7f 	bl	8000668 <__aeabi_dmul>
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	4604      	mov	r4, r0
 8010f70:	460d      	mov	r5, r1
 8010f72:	f7ef fde1 	bl	8000b38 <__aeabi_dcmpeq>
 8010f76:	2800      	cmp	r0, #0
 8010f78:	f43f aebb 	beq.w	8010cf2 <_dtoa_r+0x472>
 8010f7c:	e6f0      	b.n	8010d60 <_dtoa_r+0x4e0>
 8010f7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f80:	2a00      	cmp	r2, #0
 8010f82:	f000 80db 	beq.w	801113c <_dtoa_r+0x8bc>
 8010f86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f88:	2a01      	cmp	r2, #1
 8010f8a:	f300 80bf 	bgt.w	801110c <_dtoa_r+0x88c>
 8010f8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010f90:	2a00      	cmp	r2, #0
 8010f92:	f000 80b7 	beq.w	8011104 <_dtoa_r+0x884>
 8010f96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010f9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010f9c:	4646      	mov	r6, r8
 8010f9e:	9a08      	ldr	r2, [sp, #32]
 8010fa0:	2101      	movs	r1, #1
 8010fa2:	441a      	add	r2, r3
 8010fa4:	4658      	mov	r0, fp
 8010fa6:	4498      	add	r8, r3
 8010fa8:	9208      	str	r2, [sp, #32]
 8010faa:	f000 ffb7 	bl	8011f1c <__i2b>
 8010fae:	4605      	mov	r5, r0
 8010fb0:	b15e      	cbz	r6, 8010fca <_dtoa_r+0x74a>
 8010fb2:	9b08      	ldr	r3, [sp, #32]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	dd08      	ble.n	8010fca <_dtoa_r+0x74a>
 8010fb8:	42b3      	cmp	r3, r6
 8010fba:	9a08      	ldr	r2, [sp, #32]
 8010fbc:	bfa8      	it	ge
 8010fbe:	4633      	movge	r3, r6
 8010fc0:	eba8 0803 	sub.w	r8, r8, r3
 8010fc4:	1af6      	subs	r6, r6, r3
 8010fc6:	1ad3      	subs	r3, r2, r3
 8010fc8:	9308      	str	r3, [sp, #32]
 8010fca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fcc:	b1f3      	cbz	r3, 801100c <_dtoa_r+0x78c>
 8010fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	f000 80b7 	beq.w	8011144 <_dtoa_r+0x8c4>
 8010fd6:	b18c      	cbz	r4, 8010ffc <_dtoa_r+0x77c>
 8010fd8:	4629      	mov	r1, r5
 8010fda:	4622      	mov	r2, r4
 8010fdc:	4658      	mov	r0, fp
 8010fde:	f001 f85d 	bl	801209c <__pow5mult>
 8010fe2:	464a      	mov	r2, r9
 8010fe4:	4601      	mov	r1, r0
 8010fe6:	4605      	mov	r5, r0
 8010fe8:	4658      	mov	r0, fp
 8010fea:	f000 ffad 	bl	8011f48 <__multiply>
 8010fee:	4649      	mov	r1, r9
 8010ff0:	9004      	str	r0, [sp, #16]
 8010ff2:	4658      	mov	r0, fp
 8010ff4:	f000 fe94 	bl	8011d20 <_Bfree>
 8010ff8:	9b04      	ldr	r3, [sp, #16]
 8010ffa:	4699      	mov	r9, r3
 8010ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ffe:	1b1a      	subs	r2, r3, r4
 8011000:	d004      	beq.n	801100c <_dtoa_r+0x78c>
 8011002:	4649      	mov	r1, r9
 8011004:	4658      	mov	r0, fp
 8011006:	f001 f849 	bl	801209c <__pow5mult>
 801100a:	4681      	mov	r9, r0
 801100c:	2101      	movs	r1, #1
 801100e:	4658      	mov	r0, fp
 8011010:	f000 ff84 	bl	8011f1c <__i2b>
 8011014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011016:	4604      	mov	r4, r0
 8011018:	2b00      	cmp	r3, #0
 801101a:	f000 81cf 	beq.w	80113bc <_dtoa_r+0xb3c>
 801101e:	461a      	mov	r2, r3
 8011020:	4601      	mov	r1, r0
 8011022:	4658      	mov	r0, fp
 8011024:	f001 f83a 	bl	801209c <__pow5mult>
 8011028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801102a:	2b01      	cmp	r3, #1
 801102c:	4604      	mov	r4, r0
 801102e:	f300 8095 	bgt.w	801115c <_dtoa_r+0x8dc>
 8011032:	9b02      	ldr	r3, [sp, #8]
 8011034:	2b00      	cmp	r3, #0
 8011036:	f040 8087 	bne.w	8011148 <_dtoa_r+0x8c8>
 801103a:	9b03      	ldr	r3, [sp, #12]
 801103c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011040:	2b00      	cmp	r3, #0
 8011042:	f040 8089 	bne.w	8011158 <_dtoa_r+0x8d8>
 8011046:	9b03      	ldr	r3, [sp, #12]
 8011048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801104c:	0d1b      	lsrs	r3, r3, #20
 801104e:	051b      	lsls	r3, r3, #20
 8011050:	b12b      	cbz	r3, 801105e <_dtoa_r+0x7de>
 8011052:	9b08      	ldr	r3, [sp, #32]
 8011054:	3301      	adds	r3, #1
 8011056:	9308      	str	r3, [sp, #32]
 8011058:	f108 0801 	add.w	r8, r8, #1
 801105c:	2301      	movs	r3, #1
 801105e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011062:	2b00      	cmp	r3, #0
 8011064:	f000 81b0 	beq.w	80113c8 <_dtoa_r+0xb48>
 8011068:	6923      	ldr	r3, [r4, #16]
 801106a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801106e:	6918      	ldr	r0, [r3, #16]
 8011070:	f000 ff08 	bl	8011e84 <__hi0bits>
 8011074:	f1c0 0020 	rsb	r0, r0, #32
 8011078:	9b08      	ldr	r3, [sp, #32]
 801107a:	4418      	add	r0, r3
 801107c:	f010 001f 	ands.w	r0, r0, #31
 8011080:	d077      	beq.n	8011172 <_dtoa_r+0x8f2>
 8011082:	f1c0 0320 	rsb	r3, r0, #32
 8011086:	2b04      	cmp	r3, #4
 8011088:	dd6b      	ble.n	8011162 <_dtoa_r+0x8e2>
 801108a:	9b08      	ldr	r3, [sp, #32]
 801108c:	f1c0 001c 	rsb	r0, r0, #28
 8011090:	4403      	add	r3, r0
 8011092:	4480      	add	r8, r0
 8011094:	4406      	add	r6, r0
 8011096:	9308      	str	r3, [sp, #32]
 8011098:	f1b8 0f00 	cmp.w	r8, #0
 801109c:	dd05      	ble.n	80110aa <_dtoa_r+0x82a>
 801109e:	4649      	mov	r1, r9
 80110a0:	4642      	mov	r2, r8
 80110a2:	4658      	mov	r0, fp
 80110a4:	f001 f854 	bl	8012150 <__lshift>
 80110a8:	4681      	mov	r9, r0
 80110aa:	9b08      	ldr	r3, [sp, #32]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	dd05      	ble.n	80110bc <_dtoa_r+0x83c>
 80110b0:	4621      	mov	r1, r4
 80110b2:	461a      	mov	r2, r3
 80110b4:	4658      	mov	r0, fp
 80110b6:	f001 f84b 	bl	8012150 <__lshift>
 80110ba:	4604      	mov	r4, r0
 80110bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d059      	beq.n	8011176 <_dtoa_r+0x8f6>
 80110c2:	4621      	mov	r1, r4
 80110c4:	4648      	mov	r0, r9
 80110c6:	f001 f8af 	bl	8012228 <__mcmp>
 80110ca:	2800      	cmp	r0, #0
 80110cc:	da53      	bge.n	8011176 <_dtoa_r+0x8f6>
 80110ce:	1e7b      	subs	r3, r7, #1
 80110d0:	9304      	str	r3, [sp, #16]
 80110d2:	4649      	mov	r1, r9
 80110d4:	2300      	movs	r3, #0
 80110d6:	220a      	movs	r2, #10
 80110d8:	4658      	mov	r0, fp
 80110da:	f000 fe43 	bl	8011d64 <__multadd>
 80110de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80110e0:	4681      	mov	r9, r0
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f000 8172 	beq.w	80113cc <_dtoa_r+0xb4c>
 80110e8:	2300      	movs	r3, #0
 80110ea:	4629      	mov	r1, r5
 80110ec:	220a      	movs	r2, #10
 80110ee:	4658      	mov	r0, fp
 80110f0:	f000 fe38 	bl	8011d64 <__multadd>
 80110f4:	9b00      	ldr	r3, [sp, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	4605      	mov	r5, r0
 80110fa:	dc67      	bgt.n	80111cc <_dtoa_r+0x94c>
 80110fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110fe:	2b02      	cmp	r3, #2
 8011100:	dc41      	bgt.n	8011186 <_dtoa_r+0x906>
 8011102:	e063      	b.n	80111cc <_dtoa_r+0x94c>
 8011104:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011106:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801110a:	e746      	b.n	8010f9a <_dtoa_r+0x71a>
 801110c:	9b07      	ldr	r3, [sp, #28]
 801110e:	1e5c      	subs	r4, r3, #1
 8011110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011112:	42a3      	cmp	r3, r4
 8011114:	bfbf      	itttt	lt
 8011116:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011118:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801111a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801111c:	1ae3      	sublt	r3, r4, r3
 801111e:	bfb4      	ite	lt
 8011120:	18d2      	addlt	r2, r2, r3
 8011122:	1b1c      	subge	r4, r3, r4
 8011124:	9b07      	ldr	r3, [sp, #28]
 8011126:	bfbc      	itt	lt
 8011128:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801112a:	2400      	movlt	r4, #0
 801112c:	2b00      	cmp	r3, #0
 801112e:	bfb5      	itete	lt
 8011130:	eba8 0603 	sublt.w	r6, r8, r3
 8011134:	9b07      	ldrge	r3, [sp, #28]
 8011136:	2300      	movlt	r3, #0
 8011138:	4646      	movge	r6, r8
 801113a:	e730      	b.n	8010f9e <_dtoa_r+0x71e>
 801113c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801113e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011140:	4646      	mov	r6, r8
 8011142:	e735      	b.n	8010fb0 <_dtoa_r+0x730>
 8011144:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011146:	e75c      	b.n	8011002 <_dtoa_r+0x782>
 8011148:	2300      	movs	r3, #0
 801114a:	e788      	b.n	801105e <_dtoa_r+0x7de>
 801114c:	3fe00000 	.word	0x3fe00000
 8011150:	40240000 	.word	0x40240000
 8011154:	40140000 	.word	0x40140000
 8011158:	9b02      	ldr	r3, [sp, #8]
 801115a:	e780      	b.n	801105e <_dtoa_r+0x7de>
 801115c:	2300      	movs	r3, #0
 801115e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011160:	e782      	b.n	8011068 <_dtoa_r+0x7e8>
 8011162:	d099      	beq.n	8011098 <_dtoa_r+0x818>
 8011164:	9a08      	ldr	r2, [sp, #32]
 8011166:	331c      	adds	r3, #28
 8011168:	441a      	add	r2, r3
 801116a:	4498      	add	r8, r3
 801116c:	441e      	add	r6, r3
 801116e:	9208      	str	r2, [sp, #32]
 8011170:	e792      	b.n	8011098 <_dtoa_r+0x818>
 8011172:	4603      	mov	r3, r0
 8011174:	e7f6      	b.n	8011164 <_dtoa_r+0x8e4>
 8011176:	9b07      	ldr	r3, [sp, #28]
 8011178:	9704      	str	r7, [sp, #16]
 801117a:	2b00      	cmp	r3, #0
 801117c:	dc20      	bgt.n	80111c0 <_dtoa_r+0x940>
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011182:	2b02      	cmp	r3, #2
 8011184:	dd1e      	ble.n	80111c4 <_dtoa_r+0x944>
 8011186:	9b00      	ldr	r3, [sp, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	f47f aec0 	bne.w	8010f0e <_dtoa_r+0x68e>
 801118e:	4621      	mov	r1, r4
 8011190:	2205      	movs	r2, #5
 8011192:	4658      	mov	r0, fp
 8011194:	f000 fde6 	bl	8011d64 <__multadd>
 8011198:	4601      	mov	r1, r0
 801119a:	4604      	mov	r4, r0
 801119c:	4648      	mov	r0, r9
 801119e:	f001 f843 	bl	8012228 <__mcmp>
 80111a2:	2800      	cmp	r0, #0
 80111a4:	f77f aeb3 	ble.w	8010f0e <_dtoa_r+0x68e>
 80111a8:	4656      	mov	r6, sl
 80111aa:	2331      	movs	r3, #49	@ 0x31
 80111ac:	f806 3b01 	strb.w	r3, [r6], #1
 80111b0:	9b04      	ldr	r3, [sp, #16]
 80111b2:	3301      	adds	r3, #1
 80111b4:	9304      	str	r3, [sp, #16]
 80111b6:	e6ae      	b.n	8010f16 <_dtoa_r+0x696>
 80111b8:	9c07      	ldr	r4, [sp, #28]
 80111ba:	9704      	str	r7, [sp, #16]
 80111bc:	4625      	mov	r5, r4
 80111be:	e7f3      	b.n	80111a8 <_dtoa_r+0x928>
 80111c0:	9b07      	ldr	r3, [sp, #28]
 80111c2:	9300      	str	r3, [sp, #0]
 80111c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	f000 8104 	beq.w	80113d4 <_dtoa_r+0xb54>
 80111cc:	2e00      	cmp	r6, #0
 80111ce:	dd05      	ble.n	80111dc <_dtoa_r+0x95c>
 80111d0:	4629      	mov	r1, r5
 80111d2:	4632      	mov	r2, r6
 80111d4:	4658      	mov	r0, fp
 80111d6:	f000 ffbb 	bl	8012150 <__lshift>
 80111da:	4605      	mov	r5, r0
 80111dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d05a      	beq.n	8011298 <_dtoa_r+0xa18>
 80111e2:	6869      	ldr	r1, [r5, #4]
 80111e4:	4658      	mov	r0, fp
 80111e6:	f000 fd5b 	bl	8011ca0 <_Balloc>
 80111ea:	4606      	mov	r6, r0
 80111ec:	b928      	cbnz	r0, 80111fa <_dtoa_r+0x97a>
 80111ee:	4b84      	ldr	r3, [pc, #528]	@ (8011400 <_dtoa_r+0xb80>)
 80111f0:	4602      	mov	r2, r0
 80111f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80111f6:	f7ff bb5a 	b.w	80108ae <_dtoa_r+0x2e>
 80111fa:	692a      	ldr	r2, [r5, #16]
 80111fc:	3202      	adds	r2, #2
 80111fe:	0092      	lsls	r2, r2, #2
 8011200:	f105 010c 	add.w	r1, r5, #12
 8011204:	300c      	adds	r0, #12
 8011206:	f7ff fa7a 	bl	80106fe <memcpy>
 801120a:	2201      	movs	r2, #1
 801120c:	4631      	mov	r1, r6
 801120e:	4658      	mov	r0, fp
 8011210:	f000 ff9e 	bl	8012150 <__lshift>
 8011214:	f10a 0301 	add.w	r3, sl, #1
 8011218:	9307      	str	r3, [sp, #28]
 801121a:	9b00      	ldr	r3, [sp, #0]
 801121c:	4453      	add	r3, sl
 801121e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011220:	9b02      	ldr	r3, [sp, #8]
 8011222:	f003 0301 	and.w	r3, r3, #1
 8011226:	462f      	mov	r7, r5
 8011228:	930a      	str	r3, [sp, #40]	@ 0x28
 801122a:	4605      	mov	r5, r0
 801122c:	9b07      	ldr	r3, [sp, #28]
 801122e:	4621      	mov	r1, r4
 8011230:	3b01      	subs	r3, #1
 8011232:	4648      	mov	r0, r9
 8011234:	9300      	str	r3, [sp, #0]
 8011236:	f7ff fa99 	bl	801076c <quorem>
 801123a:	4639      	mov	r1, r7
 801123c:	9002      	str	r0, [sp, #8]
 801123e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011242:	4648      	mov	r0, r9
 8011244:	f000 fff0 	bl	8012228 <__mcmp>
 8011248:	462a      	mov	r2, r5
 801124a:	9008      	str	r0, [sp, #32]
 801124c:	4621      	mov	r1, r4
 801124e:	4658      	mov	r0, fp
 8011250:	f001 f806 	bl	8012260 <__mdiff>
 8011254:	68c2      	ldr	r2, [r0, #12]
 8011256:	4606      	mov	r6, r0
 8011258:	bb02      	cbnz	r2, 801129c <_dtoa_r+0xa1c>
 801125a:	4601      	mov	r1, r0
 801125c:	4648      	mov	r0, r9
 801125e:	f000 ffe3 	bl	8012228 <__mcmp>
 8011262:	4602      	mov	r2, r0
 8011264:	4631      	mov	r1, r6
 8011266:	4658      	mov	r0, fp
 8011268:	920e      	str	r2, [sp, #56]	@ 0x38
 801126a:	f000 fd59 	bl	8011d20 <_Bfree>
 801126e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011270:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011272:	9e07      	ldr	r6, [sp, #28]
 8011274:	ea43 0102 	orr.w	r1, r3, r2
 8011278:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801127a:	4319      	orrs	r1, r3
 801127c:	d110      	bne.n	80112a0 <_dtoa_r+0xa20>
 801127e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011282:	d029      	beq.n	80112d8 <_dtoa_r+0xa58>
 8011284:	9b08      	ldr	r3, [sp, #32]
 8011286:	2b00      	cmp	r3, #0
 8011288:	dd02      	ble.n	8011290 <_dtoa_r+0xa10>
 801128a:	9b02      	ldr	r3, [sp, #8]
 801128c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011290:	9b00      	ldr	r3, [sp, #0]
 8011292:	f883 8000 	strb.w	r8, [r3]
 8011296:	e63f      	b.n	8010f18 <_dtoa_r+0x698>
 8011298:	4628      	mov	r0, r5
 801129a:	e7bb      	b.n	8011214 <_dtoa_r+0x994>
 801129c:	2201      	movs	r2, #1
 801129e:	e7e1      	b.n	8011264 <_dtoa_r+0x9e4>
 80112a0:	9b08      	ldr	r3, [sp, #32]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	db04      	blt.n	80112b0 <_dtoa_r+0xa30>
 80112a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80112a8:	430b      	orrs	r3, r1
 80112aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80112ac:	430b      	orrs	r3, r1
 80112ae:	d120      	bne.n	80112f2 <_dtoa_r+0xa72>
 80112b0:	2a00      	cmp	r2, #0
 80112b2:	dded      	ble.n	8011290 <_dtoa_r+0xa10>
 80112b4:	4649      	mov	r1, r9
 80112b6:	2201      	movs	r2, #1
 80112b8:	4658      	mov	r0, fp
 80112ba:	f000 ff49 	bl	8012150 <__lshift>
 80112be:	4621      	mov	r1, r4
 80112c0:	4681      	mov	r9, r0
 80112c2:	f000 ffb1 	bl	8012228 <__mcmp>
 80112c6:	2800      	cmp	r0, #0
 80112c8:	dc03      	bgt.n	80112d2 <_dtoa_r+0xa52>
 80112ca:	d1e1      	bne.n	8011290 <_dtoa_r+0xa10>
 80112cc:	f018 0f01 	tst.w	r8, #1
 80112d0:	d0de      	beq.n	8011290 <_dtoa_r+0xa10>
 80112d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80112d6:	d1d8      	bne.n	801128a <_dtoa_r+0xa0a>
 80112d8:	9a00      	ldr	r2, [sp, #0]
 80112da:	2339      	movs	r3, #57	@ 0x39
 80112dc:	7013      	strb	r3, [r2, #0]
 80112de:	4633      	mov	r3, r6
 80112e0:	461e      	mov	r6, r3
 80112e2:	3b01      	subs	r3, #1
 80112e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80112e8:	2a39      	cmp	r2, #57	@ 0x39
 80112ea:	d052      	beq.n	8011392 <_dtoa_r+0xb12>
 80112ec:	3201      	adds	r2, #1
 80112ee:	701a      	strb	r2, [r3, #0]
 80112f0:	e612      	b.n	8010f18 <_dtoa_r+0x698>
 80112f2:	2a00      	cmp	r2, #0
 80112f4:	dd07      	ble.n	8011306 <_dtoa_r+0xa86>
 80112f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80112fa:	d0ed      	beq.n	80112d8 <_dtoa_r+0xa58>
 80112fc:	9a00      	ldr	r2, [sp, #0]
 80112fe:	f108 0301 	add.w	r3, r8, #1
 8011302:	7013      	strb	r3, [r2, #0]
 8011304:	e608      	b.n	8010f18 <_dtoa_r+0x698>
 8011306:	9b07      	ldr	r3, [sp, #28]
 8011308:	9a07      	ldr	r2, [sp, #28]
 801130a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801130e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011310:	4293      	cmp	r3, r2
 8011312:	d028      	beq.n	8011366 <_dtoa_r+0xae6>
 8011314:	4649      	mov	r1, r9
 8011316:	2300      	movs	r3, #0
 8011318:	220a      	movs	r2, #10
 801131a:	4658      	mov	r0, fp
 801131c:	f000 fd22 	bl	8011d64 <__multadd>
 8011320:	42af      	cmp	r7, r5
 8011322:	4681      	mov	r9, r0
 8011324:	f04f 0300 	mov.w	r3, #0
 8011328:	f04f 020a 	mov.w	r2, #10
 801132c:	4639      	mov	r1, r7
 801132e:	4658      	mov	r0, fp
 8011330:	d107      	bne.n	8011342 <_dtoa_r+0xac2>
 8011332:	f000 fd17 	bl	8011d64 <__multadd>
 8011336:	4607      	mov	r7, r0
 8011338:	4605      	mov	r5, r0
 801133a:	9b07      	ldr	r3, [sp, #28]
 801133c:	3301      	adds	r3, #1
 801133e:	9307      	str	r3, [sp, #28]
 8011340:	e774      	b.n	801122c <_dtoa_r+0x9ac>
 8011342:	f000 fd0f 	bl	8011d64 <__multadd>
 8011346:	4629      	mov	r1, r5
 8011348:	4607      	mov	r7, r0
 801134a:	2300      	movs	r3, #0
 801134c:	220a      	movs	r2, #10
 801134e:	4658      	mov	r0, fp
 8011350:	f000 fd08 	bl	8011d64 <__multadd>
 8011354:	4605      	mov	r5, r0
 8011356:	e7f0      	b.n	801133a <_dtoa_r+0xaba>
 8011358:	9b00      	ldr	r3, [sp, #0]
 801135a:	2b00      	cmp	r3, #0
 801135c:	bfcc      	ite	gt
 801135e:	461e      	movgt	r6, r3
 8011360:	2601      	movle	r6, #1
 8011362:	4456      	add	r6, sl
 8011364:	2700      	movs	r7, #0
 8011366:	4649      	mov	r1, r9
 8011368:	2201      	movs	r2, #1
 801136a:	4658      	mov	r0, fp
 801136c:	f000 fef0 	bl	8012150 <__lshift>
 8011370:	4621      	mov	r1, r4
 8011372:	4681      	mov	r9, r0
 8011374:	f000 ff58 	bl	8012228 <__mcmp>
 8011378:	2800      	cmp	r0, #0
 801137a:	dcb0      	bgt.n	80112de <_dtoa_r+0xa5e>
 801137c:	d102      	bne.n	8011384 <_dtoa_r+0xb04>
 801137e:	f018 0f01 	tst.w	r8, #1
 8011382:	d1ac      	bne.n	80112de <_dtoa_r+0xa5e>
 8011384:	4633      	mov	r3, r6
 8011386:	461e      	mov	r6, r3
 8011388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801138c:	2a30      	cmp	r2, #48	@ 0x30
 801138e:	d0fa      	beq.n	8011386 <_dtoa_r+0xb06>
 8011390:	e5c2      	b.n	8010f18 <_dtoa_r+0x698>
 8011392:	459a      	cmp	sl, r3
 8011394:	d1a4      	bne.n	80112e0 <_dtoa_r+0xa60>
 8011396:	9b04      	ldr	r3, [sp, #16]
 8011398:	3301      	adds	r3, #1
 801139a:	9304      	str	r3, [sp, #16]
 801139c:	2331      	movs	r3, #49	@ 0x31
 801139e:	f88a 3000 	strb.w	r3, [sl]
 80113a2:	e5b9      	b.n	8010f18 <_dtoa_r+0x698>
 80113a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80113a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011404 <_dtoa_r+0xb84>
 80113aa:	b11b      	cbz	r3, 80113b4 <_dtoa_r+0xb34>
 80113ac:	f10a 0308 	add.w	r3, sl, #8
 80113b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80113b2:	6013      	str	r3, [r2, #0]
 80113b4:	4650      	mov	r0, sl
 80113b6:	b019      	add	sp, #100	@ 0x64
 80113b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113be:	2b01      	cmp	r3, #1
 80113c0:	f77f ae37 	ble.w	8011032 <_dtoa_r+0x7b2>
 80113c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80113c8:	2001      	movs	r0, #1
 80113ca:	e655      	b.n	8011078 <_dtoa_r+0x7f8>
 80113cc:	9b00      	ldr	r3, [sp, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	f77f aed6 	ble.w	8011180 <_dtoa_r+0x900>
 80113d4:	4656      	mov	r6, sl
 80113d6:	4621      	mov	r1, r4
 80113d8:	4648      	mov	r0, r9
 80113da:	f7ff f9c7 	bl	801076c <quorem>
 80113de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80113e2:	f806 8b01 	strb.w	r8, [r6], #1
 80113e6:	9b00      	ldr	r3, [sp, #0]
 80113e8:	eba6 020a 	sub.w	r2, r6, sl
 80113ec:	4293      	cmp	r3, r2
 80113ee:	ddb3      	ble.n	8011358 <_dtoa_r+0xad8>
 80113f0:	4649      	mov	r1, r9
 80113f2:	2300      	movs	r3, #0
 80113f4:	220a      	movs	r2, #10
 80113f6:	4658      	mov	r0, fp
 80113f8:	f000 fcb4 	bl	8011d64 <__multadd>
 80113fc:	4681      	mov	r9, r0
 80113fe:	e7ea      	b.n	80113d6 <_dtoa_r+0xb56>
 8011400:	08013f5e 	.word	0x08013f5e
 8011404:	08013ef9 	.word	0x08013ef9

08011408 <_free_r>:
 8011408:	b538      	push	{r3, r4, r5, lr}
 801140a:	4605      	mov	r5, r0
 801140c:	2900      	cmp	r1, #0
 801140e:	d041      	beq.n	8011494 <_free_r+0x8c>
 8011410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011414:	1f0c      	subs	r4, r1, #4
 8011416:	2b00      	cmp	r3, #0
 8011418:	bfb8      	it	lt
 801141a:	18e4      	addlt	r4, r4, r3
 801141c:	f000 fc34 	bl	8011c88 <__malloc_lock>
 8011420:	4a1d      	ldr	r2, [pc, #116]	@ (8011498 <_free_r+0x90>)
 8011422:	6813      	ldr	r3, [r2, #0]
 8011424:	b933      	cbnz	r3, 8011434 <_free_r+0x2c>
 8011426:	6063      	str	r3, [r4, #4]
 8011428:	6014      	str	r4, [r2, #0]
 801142a:	4628      	mov	r0, r5
 801142c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011430:	f000 bc30 	b.w	8011c94 <__malloc_unlock>
 8011434:	42a3      	cmp	r3, r4
 8011436:	d908      	bls.n	801144a <_free_r+0x42>
 8011438:	6820      	ldr	r0, [r4, #0]
 801143a:	1821      	adds	r1, r4, r0
 801143c:	428b      	cmp	r3, r1
 801143e:	bf01      	itttt	eq
 8011440:	6819      	ldreq	r1, [r3, #0]
 8011442:	685b      	ldreq	r3, [r3, #4]
 8011444:	1809      	addeq	r1, r1, r0
 8011446:	6021      	streq	r1, [r4, #0]
 8011448:	e7ed      	b.n	8011426 <_free_r+0x1e>
 801144a:	461a      	mov	r2, r3
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	b10b      	cbz	r3, 8011454 <_free_r+0x4c>
 8011450:	42a3      	cmp	r3, r4
 8011452:	d9fa      	bls.n	801144a <_free_r+0x42>
 8011454:	6811      	ldr	r1, [r2, #0]
 8011456:	1850      	adds	r0, r2, r1
 8011458:	42a0      	cmp	r0, r4
 801145a:	d10b      	bne.n	8011474 <_free_r+0x6c>
 801145c:	6820      	ldr	r0, [r4, #0]
 801145e:	4401      	add	r1, r0
 8011460:	1850      	adds	r0, r2, r1
 8011462:	4283      	cmp	r3, r0
 8011464:	6011      	str	r1, [r2, #0]
 8011466:	d1e0      	bne.n	801142a <_free_r+0x22>
 8011468:	6818      	ldr	r0, [r3, #0]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	6053      	str	r3, [r2, #4]
 801146e:	4408      	add	r0, r1
 8011470:	6010      	str	r0, [r2, #0]
 8011472:	e7da      	b.n	801142a <_free_r+0x22>
 8011474:	d902      	bls.n	801147c <_free_r+0x74>
 8011476:	230c      	movs	r3, #12
 8011478:	602b      	str	r3, [r5, #0]
 801147a:	e7d6      	b.n	801142a <_free_r+0x22>
 801147c:	6820      	ldr	r0, [r4, #0]
 801147e:	1821      	adds	r1, r4, r0
 8011480:	428b      	cmp	r3, r1
 8011482:	bf04      	itt	eq
 8011484:	6819      	ldreq	r1, [r3, #0]
 8011486:	685b      	ldreq	r3, [r3, #4]
 8011488:	6063      	str	r3, [r4, #4]
 801148a:	bf04      	itt	eq
 801148c:	1809      	addeq	r1, r1, r0
 801148e:	6021      	streq	r1, [r4, #0]
 8011490:	6054      	str	r4, [r2, #4]
 8011492:	e7ca      	b.n	801142a <_free_r+0x22>
 8011494:	bd38      	pop	{r3, r4, r5, pc}
 8011496:	bf00      	nop
 8011498:	20006c28 	.word	0x20006c28

0801149c <rshift>:
 801149c:	6903      	ldr	r3, [r0, #16]
 801149e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80114a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80114aa:	f100 0414 	add.w	r4, r0, #20
 80114ae:	dd45      	ble.n	801153c <rshift+0xa0>
 80114b0:	f011 011f 	ands.w	r1, r1, #31
 80114b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80114b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80114bc:	d10c      	bne.n	80114d8 <rshift+0x3c>
 80114be:	f100 0710 	add.w	r7, r0, #16
 80114c2:	4629      	mov	r1, r5
 80114c4:	42b1      	cmp	r1, r6
 80114c6:	d334      	bcc.n	8011532 <rshift+0x96>
 80114c8:	1a9b      	subs	r3, r3, r2
 80114ca:	009b      	lsls	r3, r3, #2
 80114cc:	1eea      	subs	r2, r5, #3
 80114ce:	4296      	cmp	r6, r2
 80114d0:	bf38      	it	cc
 80114d2:	2300      	movcc	r3, #0
 80114d4:	4423      	add	r3, r4
 80114d6:	e015      	b.n	8011504 <rshift+0x68>
 80114d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80114dc:	f1c1 0820 	rsb	r8, r1, #32
 80114e0:	40cf      	lsrs	r7, r1
 80114e2:	f105 0e04 	add.w	lr, r5, #4
 80114e6:	46a1      	mov	r9, r4
 80114e8:	4576      	cmp	r6, lr
 80114ea:	46f4      	mov	ip, lr
 80114ec:	d815      	bhi.n	801151a <rshift+0x7e>
 80114ee:	1a9a      	subs	r2, r3, r2
 80114f0:	0092      	lsls	r2, r2, #2
 80114f2:	3a04      	subs	r2, #4
 80114f4:	3501      	adds	r5, #1
 80114f6:	42ae      	cmp	r6, r5
 80114f8:	bf38      	it	cc
 80114fa:	2200      	movcc	r2, #0
 80114fc:	18a3      	adds	r3, r4, r2
 80114fe:	50a7      	str	r7, [r4, r2]
 8011500:	b107      	cbz	r7, 8011504 <rshift+0x68>
 8011502:	3304      	adds	r3, #4
 8011504:	1b1a      	subs	r2, r3, r4
 8011506:	42a3      	cmp	r3, r4
 8011508:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801150c:	bf08      	it	eq
 801150e:	2300      	moveq	r3, #0
 8011510:	6102      	str	r2, [r0, #16]
 8011512:	bf08      	it	eq
 8011514:	6143      	streq	r3, [r0, #20]
 8011516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801151a:	f8dc c000 	ldr.w	ip, [ip]
 801151e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011522:	ea4c 0707 	orr.w	r7, ip, r7
 8011526:	f849 7b04 	str.w	r7, [r9], #4
 801152a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801152e:	40cf      	lsrs	r7, r1
 8011530:	e7da      	b.n	80114e8 <rshift+0x4c>
 8011532:	f851 cb04 	ldr.w	ip, [r1], #4
 8011536:	f847 cf04 	str.w	ip, [r7, #4]!
 801153a:	e7c3      	b.n	80114c4 <rshift+0x28>
 801153c:	4623      	mov	r3, r4
 801153e:	e7e1      	b.n	8011504 <rshift+0x68>

08011540 <__hexdig_fun>:
 8011540:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011544:	2b09      	cmp	r3, #9
 8011546:	d802      	bhi.n	801154e <__hexdig_fun+0xe>
 8011548:	3820      	subs	r0, #32
 801154a:	b2c0      	uxtb	r0, r0
 801154c:	4770      	bx	lr
 801154e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011552:	2b05      	cmp	r3, #5
 8011554:	d801      	bhi.n	801155a <__hexdig_fun+0x1a>
 8011556:	3847      	subs	r0, #71	@ 0x47
 8011558:	e7f7      	b.n	801154a <__hexdig_fun+0xa>
 801155a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801155e:	2b05      	cmp	r3, #5
 8011560:	d801      	bhi.n	8011566 <__hexdig_fun+0x26>
 8011562:	3827      	subs	r0, #39	@ 0x27
 8011564:	e7f1      	b.n	801154a <__hexdig_fun+0xa>
 8011566:	2000      	movs	r0, #0
 8011568:	4770      	bx	lr
	...

0801156c <__gethex>:
 801156c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011570:	b085      	sub	sp, #20
 8011572:	468a      	mov	sl, r1
 8011574:	9302      	str	r3, [sp, #8]
 8011576:	680b      	ldr	r3, [r1, #0]
 8011578:	9001      	str	r0, [sp, #4]
 801157a:	4690      	mov	r8, r2
 801157c:	1c9c      	adds	r4, r3, #2
 801157e:	46a1      	mov	r9, r4
 8011580:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011584:	2830      	cmp	r0, #48	@ 0x30
 8011586:	d0fa      	beq.n	801157e <__gethex+0x12>
 8011588:	eba9 0303 	sub.w	r3, r9, r3
 801158c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011590:	f7ff ffd6 	bl	8011540 <__hexdig_fun>
 8011594:	4605      	mov	r5, r0
 8011596:	2800      	cmp	r0, #0
 8011598:	d168      	bne.n	801166c <__gethex+0x100>
 801159a:	49a0      	ldr	r1, [pc, #640]	@ (801181c <__gethex+0x2b0>)
 801159c:	2201      	movs	r2, #1
 801159e:	4648      	mov	r0, r9
 80115a0:	f7fe ffc7 	bl	8010532 <strncmp>
 80115a4:	4607      	mov	r7, r0
 80115a6:	2800      	cmp	r0, #0
 80115a8:	d167      	bne.n	801167a <__gethex+0x10e>
 80115aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80115ae:	4626      	mov	r6, r4
 80115b0:	f7ff ffc6 	bl	8011540 <__hexdig_fun>
 80115b4:	2800      	cmp	r0, #0
 80115b6:	d062      	beq.n	801167e <__gethex+0x112>
 80115b8:	4623      	mov	r3, r4
 80115ba:	7818      	ldrb	r0, [r3, #0]
 80115bc:	2830      	cmp	r0, #48	@ 0x30
 80115be:	4699      	mov	r9, r3
 80115c0:	f103 0301 	add.w	r3, r3, #1
 80115c4:	d0f9      	beq.n	80115ba <__gethex+0x4e>
 80115c6:	f7ff ffbb 	bl	8011540 <__hexdig_fun>
 80115ca:	fab0 f580 	clz	r5, r0
 80115ce:	096d      	lsrs	r5, r5, #5
 80115d0:	f04f 0b01 	mov.w	fp, #1
 80115d4:	464a      	mov	r2, r9
 80115d6:	4616      	mov	r6, r2
 80115d8:	3201      	adds	r2, #1
 80115da:	7830      	ldrb	r0, [r6, #0]
 80115dc:	f7ff ffb0 	bl	8011540 <__hexdig_fun>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	d1f8      	bne.n	80115d6 <__gethex+0x6a>
 80115e4:	498d      	ldr	r1, [pc, #564]	@ (801181c <__gethex+0x2b0>)
 80115e6:	2201      	movs	r2, #1
 80115e8:	4630      	mov	r0, r6
 80115ea:	f7fe ffa2 	bl	8010532 <strncmp>
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d13f      	bne.n	8011672 <__gethex+0x106>
 80115f2:	b944      	cbnz	r4, 8011606 <__gethex+0x9a>
 80115f4:	1c74      	adds	r4, r6, #1
 80115f6:	4622      	mov	r2, r4
 80115f8:	4616      	mov	r6, r2
 80115fa:	3201      	adds	r2, #1
 80115fc:	7830      	ldrb	r0, [r6, #0]
 80115fe:	f7ff ff9f 	bl	8011540 <__hexdig_fun>
 8011602:	2800      	cmp	r0, #0
 8011604:	d1f8      	bne.n	80115f8 <__gethex+0x8c>
 8011606:	1ba4      	subs	r4, r4, r6
 8011608:	00a7      	lsls	r7, r4, #2
 801160a:	7833      	ldrb	r3, [r6, #0]
 801160c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011610:	2b50      	cmp	r3, #80	@ 0x50
 8011612:	d13e      	bne.n	8011692 <__gethex+0x126>
 8011614:	7873      	ldrb	r3, [r6, #1]
 8011616:	2b2b      	cmp	r3, #43	@ 0x2b
 8011618:	d033      	beq.n	8011682 <__gethex+0x116>
 801161a:	2b2d      	cmp	r3, #45	@ 0x2d
 801161c:	d034      	beq.n	8011688 <__gethex+0x11c>
 801161e:	1c71      	adds	r1, r6, #1
 8011620:	2400      	movs	r4, #0
 8011622:	7808      	ldrb	r0, [r1, #0]
 8011624:	f7ff ff8c 	bl	8011540 <__hexdig_fun>
 8011628:	1e43      	subs	r3, r0, #1
 801162a:	b2db      	uxtb	r3, r3
 801162c:	2b18      	cmp	r3, #24
 801162e:	d830      	bhi.n	8011692 <__gethex+0x126>
 8011630:	f1a0 0210 	sub.w	r2, r0, #16
 8011634:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011638:	f7ff ff82 	bl	8011540 <__hexdig_fun>
 801163c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011640:	fa5f fc8c 	uxtb.w	ip, ip
 8011644:	f1bc 0f18 	cmp.w	ip, #24
 8011648:	f04f 030a 	mov.w	r3, #10
 801164c:	d91e      	bls.n	801168c <__gethex+0x120>
 801164e:	b104      	cbz	r4, 8011652 <__gethex+0xe6>
 8011650:	4252      	negs	r2, r2
 8011652:	4417      	add	r7, r2
 8011654:	f8ca 1000 	str.w	r1, [sl]
 8011658:	b1ed      	cbz	r5, 8011696 <__gethex+0x12a>
 801165a:	f1bb 0f00 	cmp.w	fp, #0
 801165e:	bf0c      	ite	eq
 8011660:	2506      	moveq	r5, #6
 8011662:	2500      	movne	r5, #0
 8011664:	4628      	mov	r0, r5
 8011666:	b005      	add	sp, #20
 8011668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801166c:	2500      	movs	r5, #0
 801166e:	462c      	mov	r4, r5
 8011670:	e7b0      	b.n	80115d4 <__gethex+0x68>
 8011672:	2c00      	cmp	r4, #0
 8011674:	d1c7      	bne.n	8011606 <__gethex+0x9a>
 8011676:	4627      	mov	r7, r4
 8011678:	e7c7      	b.n	801160a <__gethex+0x9e>
 801167a:	464e      	mov	r6, r9
 801167c:	462f      	mov	r7, r5
 801167e:	2501      	movs	r5, #1
 8011680:	e7c3      	b.n	801160a <__gethex+0x9e>
 8011682:	2400      	movs	r4, #0
 8011684:	1cb1      	adds	r1, r6, #2
 8011686:	e7cc      	b.n	8011622 <__gethex+0xb6>
 8011688:	2401      	movs	r4, #1
 801168a:	e7fb      	b.n	8011684 <__gethex+0x118>
 801168c:	fb03 0002 	mla	r0, r3, r2, r0
 8011690:	e7ce      	b.n	8011630 <__gethex+0xc4>
 8011692:	4631      	mov	r1, r6
 8011694:	e7de      	b.n	8011654 <__gethex+0xe8>
 8011696:	eba6 0309 	sub.w	r3, r6, r9
 801169a:	3b01      	subs	r3, #1
 801169c:	4629      	mov	r1, r5
 801169e:	2b07      	cmp	r3, #7
 80116a0:	dc0a      	bgt.n	80116b8 <__gethex+0x14c>
 80116a2:	9801      	ldr	r0, [sp, #4]
 80116a4:	f000 fafc 	bl	8011ca0 <_Balloc>
 80116a8:	4604      	mov	r4, r0
 80116aa:	b940      	cbnz	r0, 80116be <__gethex+0x152>
 80116ac:	4b5c      	ldr	r3, [pc, #368]	@ (8011820 <__gethex+0x2b4>)
 80116ae:	4602      	mov	r2, r0
 80116b0:	21e4      	movs	r1, #228	@ 0xe4
 80116b2:	485c      	ldr	r0, [pc, #368]	@ (8011824 <__gethex+0x2b8>)
 80116b4:	f7ff f83c 	bl	8010730 <__assert_func>
 80116b8:	3101      	adds	r1, #1
 80116ba:	105b      	asrs	r3, r3, #1
 80116bc:	e7ef      	b.n	801169e <__gethex+0x132>
 80116be:	f100 0a14 	add.w	sl, r0, #20
 80116c2:	2300      	movs	r3, #0
 80116c4:	4655      	mov	r5, sl
 80116c6:	469b      	mov	fp, r3
 80116c8:	45b1      	cmp	r9, r6
 80116ca:	d337      	bcc.n	801173c <__gethex+0x1d0>
 80116cc:	f845 bb04 	str.w	fp, [r5], #4
 80116d0:	eba5 050a 	sub.w	r5, r5, sl
 80116d4:	10ad      	asrs	r5, r5, #2
 80116d6:	6125      	str	r5, [r4, #16]
 80116d8:	4658      	mov	r0, fp
 80116da:	f000 fbd3 	bl	8011e84 <__hi0bits>
 80116de:	016d      	lsls	r5, r5, #5
 80116e0:	f8d8 6000 	ldr.w	r6, [r8]
 80116e4:	1a2d      	subs	r5, r5, r0
 80116e6:	42b5      	cmp	r5, r6
 80116e8:	dd54      	ble.n	8011794 <__gethex+0x228>
 80116ea:	1bad      	subs	r5, r5, r6
 80116ec:	4629      	mov	r1, r5
 80116ee:	4620      	mov	r0, r4
 80116f0:	f000 ff67 	bl	80125c2 <__any_on>
 80116f4:	4681      	mov	r9, r0
 80116f6:	b178      	cbz	r0, 8011718 <__gethex+0x1ac>
 80116f8:	1e6b      	subs	r3, r5, #1
 80116fa:	1159      	asrs	r1, r3, #5
 80116fc:	f003 021f 	and.w	r2, r3, #31
 8011700:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011704:	f04f 0901 	mov.w	r9, #1
 8011708:	fa09 f202 	lsl.w	r2, r9, r2
 801170c:	420a      	tst	r2, r1
 801170e:	d003      	beq.n	8011718 <__gethex+0x1ac>
 8011710:	454b      	cmp	r3, r9
 8011712:	dc36      	bgt.n	8011782 <__gethex+0x216>
 8011714:	f04f 0902 	mov.w	r9, #2
 8011718:	4629      	mov	r1, r5
 801171a:	4620      	mov	r0, r4
 801171c:	f7ff febe 	bl	801149c <rshift>
 8011720:	442f      	add	r7, r5
 8011722:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011726:	42bb      	cmp	r3, r7
 8011728:	da42      	bge.n	80117b0 <__gethex+0x244>
 801172a:	9801      	ldr	r0, [sp, #4]
 801172c:	4621      	mov	r1, r4
 801172e:	f000 faf7 	bl	8011d20 <_Bfree>
 8011732:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011734:	2300      	movs	r3, #0
 8011736:	6013      	str	r3, [r2, #0]
 8011738:	25a3      	movs	r5, #163	@ 0xa3
 801173a:	e793      	b.n	8011664 <__gethex+0xf8>
 801173c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011740:	2a2e      	cmp	r2, #46	@ 0x2e
 8011742:	d012      	beq.n	801176a <__gethex+0x1fe>
 8011744:	2b20      	cmp	r3, #32
 8011746:	d104      	bne.n	8011752 <__gethex+0x1e6>
 8011748:	f845 bb04 	str.w	fp, [r5], #4
 801174c:	f04f 0b00 	mov.w	fp, #0
 8011750:	465b      	mov	r3, fp
 8011752:	7830      	ldrb	r0, [r6, #0]
 8011754:	9303      	str	r3, [sp, #12]
 8011756:	f7ff fef3 	bl	8011540 <__hexdig_fun>
 801175a:	9b03      	ldr	r3, [sp, #12]
 801175c:	f000 000f 	and.w	r0, r0, #15
 8011760:	4098      	lsls	r0, r3
 8011762:	ea4b 0b00 	orr.w	fp, fp, r0
 8011766:	3304      	adds	r3, #4
 8011768:	e7ae      	b.n	80116c8 <__gethex+0x15c>
 801176a:	45b1      	cmp	r9, r6
 801176c:	d8ea      	bhi.n	8011744 <__gethex+0x1d8>
 801176e:	492b      	ldr	r1, [pc, #172]	@ (801181c <__gethex+0x2b0>)
 8011770:	9303      	str	r3, [sp, #12]
 8011772:	2201      	movs	r2, #1
 8011774:	4630      	mov	r0, r6
 8011776:	f7fe fedc 	bl	8010532 <strncmp>
 801177a:	9b03      	ldr	r3, [sp, #12]
 801177c:	2800      	cmp	r0, #0
 801177e:	d1e1      	bne.n	8011744 <__gethex+0x1d8>
 8011780:	e7a2      	b.n	80116c8 <__gethex+0x15c>
 8011782:	1ea9      	subs	r1, r5, #2
 8011784:	4620      	mov	r0, r4
 8011786:	f000 ff1c 	bl	80125c2 <__any_on>
 801178a:	2800      	cmp	r0, #0
 801178c:	d0c2      	beq.n	8011714 <__gethex+0x1a8>
 801178e:	f04f 0903 	mov.w	r9, #3
 8011792:	e7c1      	b.n	8011718 <__gethex+0x1ac>
 8011794:	da09      	bge.n	80117aa <__gethex+0x23e>
 8011796:	1b75      	subs	r5, r6, r5
 8011798:	4621      	mov	r1, r4
 801179a:	9801      	ldr	r0, [sp, #4]
 801179c:	462a      	mov	r2, r5
 801179e:	f000 fcd7 	bl	8012150 <__lshift>
 80117a2:	1b7f      	subs	r7, r7, r5
 80117a4:	4604      	mov	r4, r0
 80117a6:	f100 0a14 	add.w	sl, r0, #20
 80117aa:	f04f 0900 	mov.w	r9, #0
 80117ae:	e7b8      	b.n	8011722 <__gethex+0x1b6>
 80117b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80117b4:	42bd      	cmp	r5, r7
 80117b6:	dd6f      	ble.n	8011898 <__gethex+0x32c>
 80117b8:	1bed      	subs	r5, r5, r7
 80117ba:	42ae      	cmp	r6, r5
 80117bc:	dc34      	bgt.n	8011828 <__gethex+0x2bc>
 80117be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80117c2:	2b02      	cmp	r3, #2
 80117c4:	d022      	beq.n	801180c <__gethex+0x2a0>
 80117c6:	2b03      	cmp	r3, #3
 80117c8:	d024      	beq.n	8011814 <__gethex+0x2a8>
 80117ca:	2b01      	cmp	r3, #1
 80117cc:	d115      	bne.n	80117fa <__gethex+0x28e>
 80117ce:	42ae      	cmp	r6, r5
 80117d0:	d113      	bne.n	80117fa <__gethex+0x28e>
 80117d2:	2e01      	cmp	r6, #1
 80117d4:	d10b      	bne.n	80117ee <__gethex+0x282>
 80117d6:	9a02      	ldr	r2, [sp, #8]
 80117d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80117dc:	6013      	str	r3, [r2, #0]
 80117de:	2301      	movs	r3, #1
 80117e0:	6123      	str	r3, [r4, #16]
 80117e2:	f8ca 3000 	str.w	r3, [sl]
 80117e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117e8:	2562      	movs	r5, #98	@ 0x62
 80117ea:	601c      	str	r4, [r3, #0]
 80117ec:	e73a      	b.n	8011664 <__gethex+0xf8>
 80117ee:	1e71      	subs	r1, r6, #1
 80117f0:	4620      	mov	r0, r4
 80117f2:	f000 fee6 	bl	80125c2 <__any_on>
 80117f6:	2800      	cmp	r0, #0
 80117f8:	d1ed      	bne.n	80117d6 <__gethex+0x26a>
 80117fa:	9801      	ldr	r0, [sp, #4]
 80117fc:	4621      	mov	r1, r4
 80117fe:	f000 fa8f 	bl	8011d20 <_Bfree>
 8011802:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011804:	2300      	movs	r3, #0
 8011806:	6013      	str	r3, [r2, #0]
 8011808:	2550      	movs	r5, #80	@ 0x50
 801180a:	e72b      	b.n	8011664 <__gethex+0xf8>
 801180c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801180e:	2b00      	cmp	r3, #0
 8011810:	d1f3      	bne.n	80117fa <__gethex+0x28e>
 8011812:	e7e0      	b.n	80117d6 <__gethex+0x26a>
 8011814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011816:	2b00      	cmp	r3, #0
 8011818:	d1dd      	bne.n	80117d6 <__gethex+0x26a>
 801181a:	e7ee      	b.n	80117fa <__gethex+0x28e>
 801181c:	08013db8 	.word	0x08013db8
 8011820:	08013f5e 	.word	0x08013f5e
 8011824:	08013f6f 	.word	0x08013f6f
 8011828:	1e6f      	subs	r7, r5, #1
 801182a:	f1b9 0f00 	cmp.w	r9, #0
 801182e:	d130      	bne.n	8011892 <__gethex+0x326>
 8011830:	b127      	cbz	r7, 801183c <__gethex+0x2d0>
 8011832:	4639      	mov	r1, r7
 8011834:	4620      	mov	r0, r4
 8011836:	f000 fec4 	bl	80125c2 <__any_on>
 801183a:	4681      	mov	r9, r0
 801183c:	117a      	asrs	r2, r7, #5
 801183e:	2301      	movs	r3, #1
 8011840:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011844:	f007 071f 	and.w	r7, r7, #31
 8011848:	40bb      	lsls	r3, r7
 801184a:	4213      	tst	r3, r2
 801184c:	4629      	mov	r1, r5
 801184e:	4620      	mov	r0, r4
 8011850:	bf18      	it	ne
 8011852:	f049 0902 	orrne.w	r9, r9, #2
 8011856:	f7ff fe21 	bl	801149c <rshift>
 801185a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801185e:	1b76      	subs	r6, r6, r5
 8011860:	2502      	movs	r5, #2
 8011862:	f1b9 0f00 	cmp.w	r9, #0
 8011866:	d047      	beq.n	80118f8 <__gethex+0x38c>
 8011868:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801186c:	2b02      	cmp	r3, #2
 801186e:	d015      	beq.n	801189c <__gethex+0x330>
 8011870:	2b03      	cmp	r3, #3
 8011872:	d017      	beq.n	80118a4 <__gethex+0x338>
 8011874:	2b01      	cmp	r3, #1
 8011876:	d109      	bne.n	801188c <__gethex+0x320>
 8011878:	f019 0f02 	tst.w	r9, #2
 801187c:	d006      	beq.n	801188c <__gethex+0x320>
 801187e:	f8da 3000 	ldr.w	r3, [sl]
 8011882:	ea49 0903 	orr.w	r9, r9, r3
 8011886:	f019 0f01 	tst.w	r9, #1
 801188a:	d10e      	bne.n	80118aa <__gethex+0x33e>
 801188c:	f045 0510 	orr.w	r5, r5, #16
 8011890:	e032      	b.n	80118f8 <__gethex+0x38c>
 8011892:	f04f 0901 	mov.w	r9, #1
 8011896:	e7d1      	b.n	801183c <__gethex+0x2d0>
 8011898:	2501      	movs	r5, #1
 801189a:	e7e2      	b.n	8011862 <__gethex+0x2f6>
 801189c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801189e:	f1c3 0301 	rsb	r3, r3, #1
 80118a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80118a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d0f0      	beq.n	801188c <__gethex+0x320>
 80118aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80118ae:	f104 0314 	add.w	r3, r4, #20
 80118b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80118b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80118ba:	f04f 0c00 	mov.w	ip, #0
 80118be:	4618      	mov	r0, r3
 80118c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80118c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80118c8:	d01b      	beq.n	8011902 <__gethex+0x396>
 80118ca:	3201      	adds	r2, #1
 80118cc:	6002      	str	r2, [r0, #0]
 80118ce:	2d02      	cmp	r5, #2
 80118d0:	f104 0314 	add.w	r3, r4, #20
 80118d4:	d13c      	bne.n	8011950 <__gethex+0x3e4>
 80118d6:	f8d8 2000 	ldr.w	r2, [r8]
 80118da:	3a01      	subs	r2, #1
 80118dc:	42b2      	cmp	r2, r6
 80118de:	d109      	bne.n	80118f4 <__gethex+0x388>
 80118e0:	1171      	asrs	r1, r6, #5
 80118e2:	2201      	movs	r2, #1
 80118e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80118e8:	f006 061f 	and.w	r6, r6, #31
 80118ec:	fa02 f606 	lsl.w	r6, r2, r6
 80118f0:	421e      	tst	r6, r3
 80118f2:	d13a      	bne.n	801196a <__gethex+0x3fe>
 80118f4:	f045 0520 	orr.w	r5, r5, #32
 80118f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118fa:	601c      	str	r4, [r3, #0]
 80118fc:	9b02      	ldr	r3, [sp, #8]
 80118fe:	601f      	str	r7, [r3, #0]
 8011900:	e6b0      	b.n	8011664 <__gethex+0xf8>
 8011902:	4299      	cmp	r1, r3
 8011904:	f843 cc04 	str.w	ip, [r3, #-4]
 8011908:	d8d9      	bhi.n	80118be <__gethex+0x352>
 801190a:	68a3      	ldr	r3, [r4, #8]
 801190c:	459b      	cmp	fp, r3
 801190e:	db17      	blt.n	8011940 <__gethex+0x3d4>
 8011910:	6861      	ldr	r1, [r4, #4]
 8011912:	9801      	ldr	r0, [sp, #4]
 8011914:	3101      	adds	r1, #1
 8011916:	f000 f9c3 	bl	8011ca0 <_Balloc>
 801191a:	4681      	mov	r9, r0
 801191c:	b918      	cbnz	r0, 8011926 <__gethex+0x3ba>
 801191e:	4b1a      	ldr	r3, [pc, #104]	@ (8011988 <__gethex+0x41c>)
 8011920:	4602      	mov	r2, r0
 8011922:	2184      	movs	r1, #132	@ 0x84
 8011924:	e6c5      	b.n	80116b2 <__gethex+0x146>
 8011926:	6922      	ldr	r2, [r4, #16]
 8011928:	3202      	adds	r2, #2
 801192a:	f104 010c 	add.w	r1, r4, #12
 801192e:	0092      	lsls	r2, r2, #2
 8011930:	300c      	adds	r0, #12
 8011932:	f7fe fee4 	bl	80106fe <memcpy>
 8011936:	4621      	mov	r1, r4
 8011938:	9801      	ldr	r0, [sp, #4]
 801193a:	f000 f9f1 	bl	8011d20 <_Bfree>
 801193e:	464c      	mov	r4, r9
 8011940:	6923      	ldr	r3, [r4, #16]
 8011942:	1c5a      	adds	r2, r3, #1
 8011944:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011948:	6122      	str	r2, [r4, #16]
 801194a:	2201      	movs	r2, #1
 801194c:	615a      	str	r2, [r3, #20]
 801194e:	e7be      	b.n	80118ce <__gethex+0x362>
 8011950:	6922      	ldr	r2, [r4, #16]
 8011952:	455a      	cmp	r2, fp
 8011954:	dd0b      	ble.n	801196e <__gethex+0x402>
 8011956:	2101      	movs	r1, #1
 8011958:	4620      	mov	r0, r4
 801195a:	f7ff fd9f 	bl	801149c <rshift>
 801195e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011962:	3701      	adds	r7, #1
 8011964:	42bb      	cmp	r3, r7
 8011966:	f6ff aee0 	blt.w	801172a <__gethex+0x1be>
 801196a:	2501      	movs	r5, #1
 801196c:	e7c2      	b.n	80118f4 <__gethex+0x388>
 801196e:	f016 061f 	ands.w	r6, r6, #31
 8011972:	d0fa      	beq.n	801196a <__gethex+0x3fe>
 8011974:	4453      	add	r3, sl
 8011976:	f1c6 0620 	rsb	r6, r6, #32
 801197a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801197e:	f000 fa81 	bl	8011e84 <__hi0bits>
 8011982:	42b0      	cmp	r0, r6
 8011984:	dbe7      	blt.n	8011956 <__gethex+0x3ea>
 8011986:	e7f0      	b.n	801196a <__gethex+0x3fe>
 8011988:	08013f5e 	.word	0x08013f5e

0801198c <L_shift>:
 801198c:	f1c2 0208 	rsb	r2, r2, #8
 8011990:	0092      	lsls	r2, r2, #2
 8011992:	b570      	push	{r4, r5, r6, lr}
 8011994:	f1c2 0620 	rsb	r6, r2, #32
 8011998:	6843      	ldr	r3, [r0, #4]
 801199a:	6804      	ldr	r4, [r0, #0]
 801199c:	fa03 f506 	lsl.w	r5, r3, r6
 80119a0:	432c      	orrs	r4, r5
 80119a2:	40d3      	lsrs	r3, r2
 80119a4:	6004      	str	r4, [r0, #0]
 80119a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80119aa:	4288      	cmp	r0, r1
 80119ac:	d3f4      	bcc.n	8011998 <L_shift+0xc>
 80119ae:	bd70      	pop	{r4, r5, r6, pc}

080119b0 <__match>:
 80119b0:	b530      	push	{r4, r5, lr}
 80119b2:	6803      	ldr	r3, [r0, #0]
 80119b4:	3301      	adds	r3, #1
 80119b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80119ba:	b914      	cbnz	r4, 80119c2 <__match+0x12>
 80119bc:	6003      	str	r3, [r0, #0]
 80119be:	2001      	movs	r0, #1
 80119c0:	bd30      	pop	{r4, r5, pc}
 80119c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80119ca:	2d19      	cmp	r5, #25
 80119cc:	bf98      	it	ls
 80119ce:	3220      	addls	r2, #32
 80119d0:	42a2      	cmp	r2, r4
 80119d2:	d0f0      	beq.n	80119b6 <__match+0x6>
 80119d4:	2000      	movs	r0, #0
 80119d6:	e7f3      	b.n	80119c0 <__match+0x10>

080119d8 <__hexnan>:
 80119d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119dc:	680b      	ldr	r3, [r1, #0]
 80119de:	6801      	ldr	r1, [r0, #0]
 80119e0:	115e      	asrs	r6, r3, #5
 80119e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80119e6:	f013 031f 	ands.w	r3, r3, #31
 80119ea:	b087      	sub	sp, #28
 80119ec:	bf18      	it	ne
 80119ee:	3604      	addne	r6, #4
 80119f0:	2500      	movs	r5, #0
 80119f2:	1f37      	subs	r7, r6, #4
 80119f4:	4682      	mov	sl, r0
 80119f6:	4690      	mov	r8, r2
 80119f8:	9301      	str	r3, [sp, #4]
 80119fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80119fe:	46b9      	mov	r9, r7
 8011a00:	463c      	mov	r4, r7
 8011a02:	9502      	str	r5, [sp, #8]
 8011a04:	46ab      	mov	fp, r5
 8011a06:	784a      	ldrb	r2, [r1, #1]
 8011a08:	1c4b      	adds	r3, r1, #1
 8011a0a:	9303      	str	r3, [sp, #12]
 8011a0c:	b342      	cbz	r2, 8011a60 <__hexnan+0x88>
 8011a0e:	4610      	mov	r0, r2
 8011a10:	9105      	str	r1, [sp, #20]
 8011a12:	9204      	str	r2, [sp, #16]
 8011a14:	f7ff fd94 	bl	8011540 <__hexdig_fun>
 8011a18:	2800      	cmp	r0, #0
 8011a1a:	d151      	bne.n	8011ac0 <__hexnan+0xe8>
 8011a1c:	9a04      	ldr	r2, [sp, #16]
 8011a1e:	9905      	ldr	r1, [sp, #20]
 8011a20:	2a20      	cmp	r2, #32
 8011a22:	d818      	bhi.n	8011a56 <__hexnan+0x7e>
 8011a24:	9b02      	ldr	r3, [sp, #8]
 8011a26:	459b      	cmp	fp, r3
 8011a28:	dd13      	ble.n	8011a52 <__hexnan+0x7a>
 8011a2a:	454c      	cmp	r4, r9
 8011a2c:	d206      	bcs.n	8011a3c <__hexnan+0x64>
 8011a2e:	2d07      	cmp	r5, #7
 8011a30:	dc04      	bgt.n	8011a3c <__hexnan+0x64>
 8011a32:	462a      	mov	r2, r5
 8011a34:	4649      	mov	r1, r9
 8011a36:	4620      	mov	r0, r4
 8011a38:	f7ff ffa8 	bl	801198c <L_shift>
 8011a3c:	4544      	cmp	r4, r8
 8011a3e:	d952      	bls.n	8011ae6 <__hexnan+0x10e>
 8011a40:	2300      	movs	r3, #0
 8011a42:	f1a4 0904 	sub.w	r9, r4, #4
 8011a46:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a4a:	f8cd b008 	str.w	fp, [sp, #8]
 8011a4e:	464c      	mov	r4, r9
 8011a50:	461d      	mov	r5, r3
 8011a52:	9903      	ldr	r1, [sp, #12]
 8011a54:	e7d7      	b.n	8011a06 <__hexnan+0x2e>
 8011a56:	2a29      	cmp	r2, #41	@ 0x29
 8011a58:	d157      	bne.n	8011b0a <__hexnan+0x132>
 8011a5a:	3102      	adds	r1, #2
 8011a5c:	f8ca 1000 	str.w	r1, [sl]
 8011a60:	f1bb 0f00 	cmp.w	fp, #0
 8011a64:	d051      	beq.n	8011b0a <__hexnan+0x132>
 8011a66:	454c      	cmp	r4, r9
 8011a68:	d206      	bcs.n	8011a78 <__hexnan+0xa0>
 8011a6a:	2d07      	cmp	r5, #7
 8011a6c:	dc04      	bgt.n	8011a78 <__hexnan+0xa0>
 8011a6e:	462a      	mov	r2, r5
 8011a70:	4649      	mov	r1, r9
 8011a72:	4620      	mov	r0, r4
 8011a74:	f7ff ff8a 	bl	801198c <L_shift>
 8011a78:	4544      	cmp	r4, r8
 8011a7a:	d936      	bls.n	8011aea <__hexnan+0x112>
 8011a7c:	f1a8 0204 	sub.w	r2, r8, #4
 8011a80:	4623      	mov	r3, r4
 8011a82:	f853 1b04 	ldr.w	r1, [r3], #4
 8011a86:	f842 1f04 	str.w	r1, [r2, #4]!
 8011a8a:	429f      	cmp	r7, r3
 8011a8c:	d2f9      	bcs.n	8011a82 <__hexnan+0xaa>
 8011a8e:	1b3b      	subs	r3, r7, r4
 8011a90:	f023 0303 	bic.w	r3, r3, #3
 8011a94:	3304      	adds	r3, #4
 8011a96:	3401      	adds	r4, #1
 8011a98:	3e03      	subs	r6, #3
 8011a9a:	42b4      	cmp	r4, r6
 8011a9c:	bf88      	it	hi
 8011a9e:	2304      	movhi	r3, #4
 8011aa0:	4443      	add	r3, r8
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	f843 2b04 	str.w	r2, [r3], #4
 8011aa8:	429f      	cmp	r7, r3
 8011aaa:	d2fb      	bcs.n	8011aa4 <__hexnan+0xcc>
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	b91b      	cbnz	r3, 8011ab8 <__hexnan+0xe0>
 8011ab0:	4547      	cmp	r7, r8
 8011ab2:	d128      	bne.n	8011b06 <__hexnan+0x12e>
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	603b      	str	r3, [r7, #0]
 8011ab8:	2005      	movs	r0, #5
 8011aba:	b007      	add	sp, #28
 8011abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac0:	3501      	adds	r5, #1
 8011ac2:	2d08      	cmp	r5, #8
 8011ac4:	f10b 0b01 	add.w	fp, fp, #1
 8011ac8:	dd06      	ble.n	8011ad8 <__hexnan+0x100>
 8011aca:	4544      	cmp	r4, r8
 8011acc:	d9c1      	bls.n	8011a52 <__hexnan+0x7a>
 8011ace:	2300      	movs	r3, #0
 8011ad0:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ad4:	2501      	movs	r5, #1
 8011ad6:	3c04      	subs	r4, #4
 8011ad8:	6822      	ldr	r2, [r4, #0]
 8011ada:	f000 000f 	and.w	r0, r0, #15
 8011ade:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011ae2:	6020      	str	r0, [r4, #0]
 8011ae4:	e7b5      	b.n	8011a52 <__hexnan+0x7a>
 8011ae6:	2508      	movs	r5, #8
 8011ae8:	e7b3      	b.n	8011a52 <__hexnan+0x7a>
 8011aea:	9b01      	ldr	r3, [sp, #4]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d0dd      	beq.n	8011aac <__hexnan+0xd4>
 8011af0:	f1c3 0320 	rsb	r3, r3, #32
 8011af4:	f04f 32ff 	mov.w	r2, #4294967295
 8011af8:	40da      	lsrs	r2, r3
 8011afa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011afe:	4013      	ands	r3, r2
 8011b00:	f846 3c04 	str.w	r3, [r6, #-4]
 8011b04:	e7d2      	b.n	8011aac <__hexnan+0xd4>
 8011b06:	3f04      	subs	r7, #4
 8011b08:	e7d0      	b.n	8011aac <__hexnan+0xd4>
 8011b0a:	2004      	movs	r0, #4
 8011b0c:	e7d5      	b.n	8011aba <__hexnan+0xe2>
	...

08011b10 <malloc>:
 8011b10:	4b02      	ldr	r3, [pc, #8]	@ (8011b1c <malloc+0xc>)
 8011b12:	4601      	mov	r1, r0
 8011b14:	6818      	ldr	r0, [r3, #0]
 8011b16:	f000 b825 	b.w	8011b64 <_malloc_r>
 8011b1a:	bf00      	nop
 8011b1c:	200001a0 	.word	0x200001a0

08011b20 <sbrk_aligned>:
 8011b20:	b570      	push	{r4, r5, r6, lr}
 8011b22:	4e0f      	ldr	r6, [pc, #60]	@ (8011b60 <sbrk_aligned+0x40>)
 8011b24:	460c      	mov	r4, r1
 8011b26:	6831      	ldr	r1, [r6, #0]
 8011b28:	4605      	mov	r5, r0
 8011b2a:	b911      	cbnz	r1, 8011b32 <sbrk_aligned+0x12>
 8011b2c:	f000 ffa6 	bl	8012a7c <_sbrk_r>
 8011b30:	6030      	str	r0, [r6, #0]
 8011b32:	4621      	mov	r1, r4
 8011b34:	4628      	mov	r0, r5
 8011b36:	f000 ffa1 	bl	8012a7c <_sbrk_r>
 8011b3a:	1c43      	adds	r3, r0, #1
 8011b3c:	d103      	bne.n	8011b46 <sbrk_aligned+0x26>
 8011b3e:	f04f 34ff 	mov.w	r4, #4294967295
 8011b42:	4620      	mov	r0, r4
 8011b44:	bd70      	pop	{r4, r5, r6, pc}
 8011b46:	1cc4      	adds	r4, r0, #3
 8011b48:	f024 0403 	bic.w	r4, r4, #3
 8011b4c:	42a0      	cmp	r0, r4
 8011b4e:	d0f8      	beq.n	8011b42 <sbrk_aligned+0x22>
 8011b50:	1a21      	subs	r1, r4, r0
 8011b52:	4628      	mov	r0, r5
 8011b54:	f000 ff92 	bl	8012a7c <_sbrk_r>
 8011b58:	3001      	adds	r0, #1
 8011b5a:	d1f2      	bne.n	8011b42 <sbrk_aligned+0x22>
 8011b5c:	e7ef      	b.n	8011b3e <sbrk_aligned+0x1e>
 8011b5e:	bf00      	nop
 8011b60:	20006c24 	.word	0x20006c24

08011b64 <_malloc_r>:
 8011b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b68:	1ccd      	adds	r5, r1, #3
 8011b6a:	f025 0503 	bic.w	r5, r5, #3
 8011b6e:	3508      	adds	r5, #8
 8011b70:	2d0c      	cmp	r5, #12
 8011b72:	bf38      	it	cc
 8011b74:	250c      	movcc	r5, #12
 8011b76:	2d00      	cmp	r5, #0
 8011b78:	4606      	mov	r6, r0
 8011b7a:	db01      	blt.n	8011b80 <_malloc_r+0x1c>
 8011b7c:	42a9      	cmp	r1, r5
 8011b7e:	d904      	bls.n	8011b8a <_malloc_r+0x26>
 8011b80:	230c      	movs	r3, #12
 8011b82:	6033      	str	r3, [r6, #0]
 8011b84:	2000      	movs	r0, #0
 8011b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011c60 <_malloc_r+0xfc>
 8011b8e:	f000 f87b 	bl	8011c88 <__malloc_lock>
 8011b92:	f8d8 3000 	ldr.w	r3, [r8]
 8011b96:	461c      	mov	r4, r3
 8011b98:	bb44      	cbnz	r4, 8011bec <_malloc_r+0x88>
 8011b9a:	4629      	mov	r1, r5
 8011b9c:	4630      	mov	r0, r6
 8011b9e:	f7ff ffbf 	bl	8011b20 <sbrk_aligned>
 8011ba2:	1c43      	adds	r3, r0, #1
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	d158      	bne.n	8011c5a <_malloc_r+0xf6>
 8011ba8:	f8d8 4000 	ldr.w	r4, [r8]
 8011bac:	4627      	mov	r7, r4
 8011bae:	2f00      	cmp	r7, #0
 8011bb0:	d143      	bne.n	8011c3a <_malloc_r+0xd6>
 8011bb2:	2c00      	cmp	r4, #0
 8011bb4:	d04b      	beq.n	8011c4e <_malloc_r+0xea>
 8011bb6:	6823      	ldr	r3, [r4, #0]
 8011bb8:	4639      	mov	r1, r7
 8011bba:	4630      	mov	r0, r6
 8011bbc:	eb04 0903 	add.w	r9, r4, r3
 8011bc0:	f000 ff5c 	bl	8012a7c <_sbrk_r>
 8011bc4:	4581      	cmp	r9, r0
 8011bc6:	d142      	bne.n	8011c4e <_malloc_r+0xea>
 8011bc8:	6821      	ldr	r1, [r4, #0]
 8011bca:	1a6d      	subs	r5, r5, r1
 8011bcc:	4629      	mov	r1, r5
 8011bce:	4630      	mov	r0, r6
 8011bd0:	f7ff ffa6 	bl	8011b20 <sbrk_aligned>
 8011bd4:	3001      	adds	r0, #1
 8011bd6:	d03a      	beq.n	8011c4e <_malloc_r+0xea>
 8011bd8:	6823      	ldr	r3, [r4, #0]
 8011bda:	442b      	add	r3, r5
 8011bdc:	6023      	str	r3, [r4, #0]
 8011bde:	f8d8 3000 	ldr.w	r3, [r8]
 8011be2:	685a      	ldr	r2, [r3, #4]
 8011be4:	bb62      	cbnz	r2, 8011c40 <_malloc_r+0xdc>
 8011be6:	f8c8 7000 	str.w	r7, [r8]
 8011bea:	e00f      	b.n	8011c0c <_malloc_r+0xa8>
 8011bec:	6822      	ldr	r2, [r4, #0]
 8011bee:	1b52      	subs	r2, r2, r5
 8011bf0:	d420      	bmi.n	8011c34 <_malloc_r+0xd0>
 8011bf2:	2a0b      	cmp	r2, #11
 8011bf4:	d917      	bls.n	8011c26 <_malloc_r+0xc2>
 8011bf6:	1961      	adds	r1, r4, r5
 8011bf8:	42a3      	cmp	r3, r4
 8011bfa:	6025      	str	r5, [r4, #0]
 8011bfc:	bf18      	it	ne
 8011bfe:	6059      	strne	r1, [r3, #4]
 8011c00:	6863      	ldr	r3, [r4, #4]
 8011c02:	bf08      	it	eq
 8011c04:	f8c8 1000 	streq.w	r1, [r8]
 8011c08:	5162      	str	r2, [r4, r5]
 8011c0a:	604b      	str	r3, [r1, #4]
 8011c0c:	4630      	mov	r0, r6
 8011c0e:	f000 f841 	bl	8011c94 <__malloc_unlock>
 8011c12:	f104 000b 	add.w	r0, r4, #11
 8011c16:	1d23      	adds	r3, r4, #4
 8011c18:	f020 0007 	bic.w	r0, r0, #7
 8011c1c:	1ac2      	subs	r2, r0, r3
 8011c1e:	bf1c      	itt	ne
 8011c20:	1a1b      	subne	r3, r3, r0
 8011c22:	50a3      	strne	r3, [r4, r2]
 8011c24:	e7af      	b.n	8011b86 <_malloc_r+0x22>
 8011c26:	6862      	ldr	r2, [r4, #4]
 8011c28:	42a3      	cmp	r3, r4
 8011c2a:	bf0c      	ite	eq
 8011c2c:	f8c8 2000 	streq.w	r2, [r8]
 8011c30:	605a      	strne	r2, [r3, #4]
 8011c32:	e7eb      	b.n	8011c0c <_malloc_r+0xa8>
 8011c34:	4623      	mov	r3, r4
 8011c36:	6864      	ldr	r4, [r4, #4]
 8011c38:	e7ae      	b.n	8011b98 <_malloc_r+0x34>
 8011c3a:	463c      	mov	r4, r7
 8011c3c:	687f      	ldr	r7, [r7, #4]
 8011c3e:	e7b6      	b.n	8011bae <_malloc_r+0x4a>
 8011c40:	461a      	mov	r2, r3
 8011c42:	685b      	ldr	r3, [r3, #4]
 8011c44:	42a3      	cmp	r3, r4
 8011c46:	d1fb      	bne.n	8011c40 <_malloc_r+0xdc>
 8011c48:	2300      	movs	r3, #0
 8011c4a:	6053      	str	r3, [r2, #4]
 8011c4c:	e7de      	b.n	8011c0c <_malloc_r+0xa8>
 8011c4e:	230c      	movs	r3, #12
 8011c50:	6033      	str	r3, [r6, #0]
 8011c52:	4630      	mov	r0, r6
 8011c54:	f000 f81e 	bl	8011c94 <__malloc_unlock>
 8011c58:	e794      	b.n	8011b84 <_malloc_r+0x20>
 8011c5a:	6005      	str	r5, [r0, #0]
 8011c5c:	e7d6      	b.n	8011c0c <_malloc_r+0xa8>
 8011c5e:	bf00      	nop
 8011c60:	20006c28 	.word	0x20006c28

08011c64 <__ascii_mbtowc>:
 8011c64:	b082      	sub	sp, #8
 8011c66:	b901      	cbnz	r1, 8011c6a <__ascii_mbtowc+0x6>
 8011c68:	a901      	add	r1, sp, #4
 8011c6a:	b142      	cbz	r2, 8011c7e <__ascii_mbtowc+0x1a>
 8011c6c:	b14b      	cbz	r3, 8011c82 <__ascii_mbtowc+0x1e>
 8011c6e:	7813      	ldrb	r3, [r2, #0]
 8011c70:	600b      	str	r3, [r1, #0]
 8011c72:	7812      	ldrb	r2, [r2, #0]
 8011c74:	1e10      	subs	r0, r2, #0
 8011c76:	bf18      	it	ne
 8011c78:	2001      	movne	r0, #1
 8011c7a:	b002      	add	sp, #8
 8011c7c:	4770      	bx	lr
 8011c7e:	4610      	mov	r0, r2
 8011c80:	e7fb      	b.n	8011c7a <__ascii_mbtowc+0x16>
 8011c82:	f06f 0001 	mvn.w	r0, #1
 8011c86:	e7f8      	b.n	8011c7a <__ascii_mbtowc+0x16>

08011c88 <__malloc_lock>:
 8011c88:	4801      	ldr	r0, [pc, #4]	@ (8011c90 <__malloc_lock+0x8>)
 8011c8a:	f7fe bd36 	b.w	80106fa <__retarget_lock_acquire_recursive>
 8011c8e:	bf00      	nop
 8011c90:	20006c20 	.word	0x20006c20

08011c94 <__malloc_unlock>:
 8011c94:	4801      	ldr	r0, [pc, #4]	@ (8011c9c <__malloc_unlock+0x8>)
 8011c96:	f7fe bd31 	b.w	80106fc <__retarget_lock_release_recursive>
 8011c9a:	bf00      	nop
 8011c9c:	20006c20 	.word	0x20006c20

08011ca0 <_Balloc>:
 8011ca0:	b570      	push	{r4, r5, r6, lr}
 8011ca2:	69c6      	ldr	r6, [r0, #28]
 8011ca4:	4604      	mov	r4, r0
 8011ca6:	460d      	mov	r5, r1
 8011ca8:	b976      	cbnz	r6, 8011cc8 <_Balloc+0x28>
 8011caa:	2010      	movs	r0, #16
 8011cac:	f7ff ff30 	bl	8011b10 <malloc>
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	61e0      	str	r0, [r4, #28]
 8011cb4:	b920      	cbnz	r0, 8011cc0 <_Balloc+0x20>
 8011cb6:	4b18      	ldr	r3, [pc, #96]	@ (8011d18 <_Balloc+0x78>)
 8011cb8:	4818      	ldr	r0, [pc, #96]	@ (8011d1c <_Balloc+0x7c>)
 8011cba:	216b      	movs	r1, #107	@ 0x6b
 8011cbc:	f7fe fd38 	bl	8010730 <__assert_func>
 8011cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011cc4:	6006      	str	r6, [r0, #0]
 8011cc6:	60c6      	str	r6, [r0, #12]
 8011cc8:	69e6      	ldr	r6, [r4, #28]
 8011cca:	68f3      	ldr	r3, [r6, #12]
 8011ccc:	b183      	cbz	r3, 8011cf0 <_Balloc+0x50>
 8011cce:	69e3      	ldr	r3, [r4, #28]
 8011cd0:	68db      	ldr	r3, [r3, #12]
 8011cd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011cd6:	b9b8      	cbnz	r0, 8011d08 <_Balloc+0x68>
 8011cd8:	2101      	movs	r1, #1
 8011cda:	fa01 f605 	lsl.w	r6, r1, r5
 8011cde:	1d72      	adds	r2, r6, #5
 8011ce0:	0092      	lsls	r2, r2, #2
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	f000 fee1 	bl	8012aaa <_calloc_r>
 8011ce8:	b160      	cbz	r0, 8011d04 <_Balloc+0x64>
 8011cea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011cee:	e00e      	b.n	8011d0e <_Balloc+0x6e>
 8011cf0:	2221      	movs	r2, #33	@ 0x21
 8011cf2:	2104      	movs	r1, #4
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	f000 fed8 	bl	8012aaa <_calloc_r>
 8011cfa:	69e3      	ldr	r3, [r4, #28]
 8011cfc:	60f0      	str	r0, [r6, #12]
 8011cfe:	68db      	ldr	r3, [r3, #12]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d1e4      	bne.n	8011cce <_Balloc+0x2e>
 8011d04:	2000      	movs	r0, #0
 8011d06:	bd70      	pop	{r4, r5, r6, pc}
 8011d08:	6802      	ldr	r2, [r0, #0]
 8011d0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d0e:	2300      	movs	r3, #0
 8011d10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d14:	e7f7      	b.n	8011d06 <_Balloc+0x66>
 8011d16:	bf00      	nop
 8011d18:	08013e44 	.word	0x08013e44
 8011d1c:	08013fcf 	.word	0x08013fcf

08011d20 <_Bfree>:
 8011d20:	b570      	push	{r4, r5, r6, lr}
 8011d22:	69c6      	ldr	r6, [r0, #28]
 8011d24:	4605      	mov	r5, r0
 8011d26:	460c      	mov	r4, r1
 8011d28:	b976      	cbnz	r6, 8011d48 <_Bfree+0x28>
 8011d2a:	2010      	movs	r0, #16
 8011d2c:	f7ff fef0 	bl	8011b10 <malloc>
 8011d30:	4602      	mov	r2, r0
 8011d32:	61e8      	str	r0, [r5, #28]
 8011d34:	b920      	cbnz	r0, 8011d40 <_Bfree+0x20>
 8011d36:	4b09      	ldr	r3, [pc, #36]	@ (8011d5c <_Bfree+0x3c>)
 8011d38:	4809      	ldr	r0, [pc, #36]	@ (8011d60 <_Bfree+0x40>)
 8011d3a:	218f      	movs	r1, #143	@ 0x8f
 8011d3c:	f7fe fcf8 	bl	8010730 <__assert_func>
 8011d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d44:	6006      	str	r6, [r0, #0]
 8011d46:	60c6      	str	r6, [r0, #12]
 8011d48:	b13c      	cbz	r4, 8011d5a <_Bfree+0x3a>
 8011d4a:	69eb      	ldr	r3, [r5, #28]
 8011d4c:	6862      	ldr	r2, [r4, #4]
 8011d4e:	68db      	ldr	r3, [r3, #12]
 8011d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d54:	6021      	str	r1, [r4, #0]
 8011d56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d5a:	bd70      	pop	{r4, r5, r6, pc}
 8011d5c:	08013e44 	.word	0x08013e44
 8011d60:	08013fcf 	.word	0x08013fcf

08011d64 <__multadd>:
 8011d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d68:	690d      	ldr	r5, [r1, #16]
 8011d6a:	4607      	mov	r7, r0
 8011d6c:	460c      	mov	r4, r1
 8011d6e:	461e      	mov	r6, r3
 8011d70:	f101 0c14 	add.w	ip, r1, #20
 8011d74:	2000      	movs	r0, #0
 8011d76:	f8dc 3000 	ldr.w	r3, [ip]
 8011d7a:	b299      	uxth	r1, r3
 8011d7c:	fb02 6101 	mla	r1, r2, r1, r6
 8011d80:	0c1e      	lsrs	r6, r3, #16
 8011d82:	0c0b      	lsrs	r3, r1, #16
 8011d84:	fb02 3306 	mla	r3, r2, r6, r3
 8011d88:	b289      	uxth	r1, r1
 8011d8a:	3001      	adds	r0, #1
 8011d8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011d90:	4285      	cmp	r5, r0
 8011d92:	f84c 1b04 	str.w	r1, [ip], #4
 8011d96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011d9a:	dcec      	bgt.n	8011d76 <__multadd+0x12>
 8011d9c:	b30e      	cbz	r6, 8011de2 <__multadd+0x7e>
 8011d9e:	68a3      	ldr	r3, [r4, #8]
 8011da0:	42ab      	cmp	r3, r5
 8011da2:	dc19      	bgt.n	8011dd8 <__multadd+0x74>
 8011da4:	6861      	ldr	r1, [r4, #4]
 8011da6:	4638      	mov	r0, r7
 8011da8:	3101      	adds	r1, #1
 8011daa:	f7ff ff79 	bl	8011ca0 <_Balloc>
 8011dae:	4680      	mov	r8, r0
 8011db0:	b928      	cbnz	r0, 8011dbe <__multadd+0x5a>
 8011db2:	4602      	mov	r2, r0
 8011db4:	4b0c      	ldr	r3, [pc, #48]	@ (8011de8 <__multadd+0x84>)
 8011db6:	480d      	ldr	r0, [pc, #52]	@ (8011dec <__multadd+0x88>)
 8011db8:	21ba      	movs	r1, #186	@ 0xba
 8011dba:	f7fe fcb9 	bl	8010730 <__assert_func>
 8011dbe:	6922      	ldr	r2, [r4, #16]
 8011dc0:	3202      	adds	r2, #2
 8011dc2:	f104 010c 	add.w	r1, r4, #12
 8011dc6:	0092      	lsls	r2, r2, #2
 8011dc8:	300c      	adds	r0, #12
 8011dca:	f7fe fc98 	bl	80106fe <memcpy>
 8011dce:	4621      	mov	r1, r4
 8011dd0:	4638      	mov	r0, r7
 8011dd2:	f7ff ffa5 	bl	8011d20 <_Bfree>
 8011dd6:	4644      	mov	r4, r8
 8011dd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011ddc:	3501      	adds	r5, #1
 8011dde:	615e      	str	r6, [r3, #20]
 8011de0:	6125      	str	r5, [r4, #16]
 8011de2:	4620      	mov	r0, r4
 8011de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de8:	08013f5e 	.word	0x08013f5e
 8011dec:	08013fcf 	.word	0x08013fcf

08011df0 <__s2b>:
 8011df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011df4:	460c      	mov	r4, r1
 8011df6:	4615      	mov	r5, r2
 8011df8:	461f      	mov	r7, r3
 8011dfa:	2209      	movs	r2, #9
 8011dfc:	3308      	adds	r3, #8
 8011dfe:	4606      	mov	r6, r0
 8011e00:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e04:	2100      	movs	r1, #0
 8011e06:	2201      	movs	r2, #1
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	db09      	blt.n	8011e20 <__s2b+0x30>
 8011e0c:	4630      	mov	r0, r6
 8011e0e:	f7ff ff47 	bl	8011ca0 <_Balloc>
 8011e12:	b940      	cbnz	r0, 8011e26 <__s2b+0x36>
 8011e14:	4602      	mov	r2, r0
 8011e16:	4b19      	ldr	r3, [pc, #100]	@ (8011e7c <__s2b+0x8c>)
 8011e18:	4819      	ldr	r0, [pc, #100]	@ (8011e80 <__s2b+0x90>)
 8011e1a:	21d3      	movs	r1, #211	@ 0xd3
 8011e1c:	f7fe fc88 	bl	8010730 <__assert_func>
 8011e20:	0052      	lsls	r2, r2, #1
 8011e22:	3101      	adds	r1, #1
 8011e24:	e7f0      	b.n	8011e08 <__s2b+0x18>
 8011e26:	9b08      	ldr	r3, [sp, #32]
 8011e28:	6143      	str	r3, [r0, #20]
 8011e2a:	2d09      	cmp	r5, #9
 8011e2c:	f04f 0301 	mov.w	r3, #1
 8011e30:	6103      	str	r3, [r0, #16]
 8011e32:	dd16      	ble.n	8011e62 <__s2b+0x72>
 8011e34:	f104 0909 	add.w	r9, r4, #9
 8011e38:	46c8      	mov	r8, r9
 8011e3a:	442c      	add	r4, r5
 8011e3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011e40:	4601      	mov	r1, r0
 8011e42:	3b30      	subs	r3, #48	@ 0x30
 8011e44:	220a      	movs	r2, #10
 8011e46:	4630      	mov	r0, r6
 8011e48:	f7ff ff8c 	bl	8011d64 <__multadd>
 8011e4c:	45a0      	cmp	r8, r4
 8011e4e:	d1f5      	bne.n	8011e3c <__s2b+0x4c>
 8011e50:	f1a5 0408 	sub.w	r4, r5, #8
 8011e54:	444c      	add	r4, r9
 8011e56:	1b2d      	subs	r5, r5, r4
 8011e58:	1963      	adds	r3, r4, r5
 8011e5a:	42bb      	cmp	r3, r7
 8011e5c:	db04      	blt.n	8011e68 <__s2b+0x78>
 8011e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e62:	340a      	adds	r4, #10
 8011e64:	2509      	movs	r5, #9
 8011e66:	e7f6      	b.n	8011e56 <__s2b+0x66>
 8011e68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011e6c:	4601      	mov	r1, r0
 8011e6e:	3b30      	subs	r3, #48	@ 0x30
 8011e70:	220a      	movs	r2, #10
 8011e72:	4630      	mov	r0, r6
 8011e74:	f7ff ff76 	bl	8011d64 <__multadd>
 8011e78:	e7ee      	b.n	8011e58 <__s2b+0x68>
 8011e7a:	bf00      	nop
 8011e7c:	08013f5e 	.word	0x08013f5e
 8011e80:	08013fcf 	.word	0x08013fcf

08011e84 <__hi0bits>:
 8011e84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011e88:	4603      	mov	r3, r0
 8011e8a:	bf36      	itet	cc
 8011e8c:	0403      	lslcc	r3, r0, #16
 8011e8e:	2000      	movcs	r0, #0
 8011e90:	2010      	movcc	r0, #16
 8011e92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011e96:	bf3c      	itt	cc
 8011e98:	021b      	lslcc	r3, r3, #8
 8011e9a:	3008      	addcc	r0, #8
 8011e9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011ea0:	bf3c      	itt	cc
 8011ea2:	011b      	lslcc	r3, r3, #4
 8011ea4:	3004      	addcc	r0, #4
 8011ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011eaa:	bf3c      	itt	cc
 8011eac:	009b      	lslcc	r3, r3, #2
 8011eae:	3002      	addcc	r0, #2
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	db05      	blt.n	8011ec0 <__hi0bits+0x3c>
 8011eb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011eb8:	f100 0001 	add.w	r0, r0, #1
 8011ebc:	bf08      	it	eq
 8011ebe:	2020      	moveq	r0, #32
 8011ec0:	4770      	bx	lr

08011ec2 <__lo0bits>:
 8011ec2:	6803      	ldr	r3, [r0, #0]
 8011ec4:	4602      	mov	r2, r0
 8011ec6:	f013 0007 	ands.w	r0, r3, #7
 8011eca:	d00b      	beq.n	8011ee4 <__lo0bits+0x22>
 8011ecc:	07d9      	lsls	r1, r3, #31
 8011ece:	d421      	bmi.n	8011f14 <__lo0bits+0x52>
 8011ed0:	0798      	lsls	r0, r3, #30
 8011ed2:	bf49      	itett	mi
 8011ed4:	085b      	lsrmi	r3, r3, #1
 8011ed6:	089b      	lsrpl	r3, r3, #2
 8011ed8:	2001      	movmi	r0, #1
 8011eda:	6013      	strmi	r3, [r2, #0]
 8011edc:	bf5c      	itt	pl
 8011ede:	6013      	strpl	r3, [r2, #0]
 8011ee0:	2002      	movpl	r0, #2
 8011ee2:	4770      	bx	lr
 8011ee4:	b299      	uxth	r1, r3
 8011ee6:	b909      	cbnz	r1, 8011eec <__lo0bits+0x2a>
 8011ee8:	0c1b      	lsrs	r3, r3, #16
 8011eea:	2010      	movs	r0, #16
 8011eec:	b2d9      	uxtb	r1, r3
 8011eee:	b909      	cbnz	r1, 8011ef4 <__lo0bits+0x32>
 8011ef0:	3008      	adds	r0, #8
 8011ef2:	0a1b      	lsrs	r3, r3, #8
 8011ef4:	0719      	lsls	r1, r3, #28
 8011ef6:	bf04      	itt	eq
 8011ef8:	091b      	lsreq	r3, r3, #4
 8011efa:	3004      	addeq	r0, #4
 8011efc:	0799      	lsls	r1, r3, #30
 8011efe:	bf04      	itt	eq
 8011f00:	089b      	lsreq	r3, r3, #2
 8011f02:	3002      	addeq	r0, #2
 8011f04:	07d9      	lsls	r1, r3, #31
 8011f06:	d403      	bmi.n	8011f10 <__lo0bits+0x4e>
 8011f08:	085b      	lsrs	r3, r3, #1
 8011f0a:	f100 0001 	add.w	r0, r0, #1
 8011f0e:	d003      	beq.n	8011f18 <__lo0bits+0x56>
 8011f10:	6013      	str	r3, [r2, #0]
 8011f12:	4770      	bx	lr
 8011f14:	2000      	movs	r0, #0
 8011f16:	4770      	bx	lr
 8011f18:	2020      	movs	r0, #32
 8011f1a:	4770      	bx	lr

08011f1c <__i2b>:
 8011f1c:	b510      	push	{r4, lr}
 8011f1e:	460c      	mov	r4, r1
 8011f20:	2101      	movs	r1, #1
 8011f22:	f7ff febd 	bl	8011ca0 <_Balloc>
 8011f26:	4602      	mov	r2, r0
 8011f28:	b928      	cbnz	r0, 8011f36 <__i2b+0x1a>
 8011f2a:	4b05      	ldr	r3, [pc, #20]	@ (8011f40 <__i2b+0x24>)
 8011f2c:	4805      	ldr	r0, [pc, #20]	@ (8011f44 <__i2b+0x28>)
 8011f2e:	f240 1145 	movw	r1, #325	@ 0x145
 8011f32:	f7fe fbfd 	bl	8010730 <__assert_func>
 8011f36:	2301      	movs	r3, #1
 8011f38:	6144      	str	r4, [r0, #20]
 8011f3a:	6103      	str	r3, [r0, #16]
 8011f3c:	bd10      	pop	{r4, pc}
 8011f3e:	bf00      	nop
 8011f40:	08013f5e 	.word	0x08013f5e
 8011f44:	08013fcf 	.word	0x08013fcf

08011f48 <__multiply>:
 8011f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f4c:	4614      	mov	r4, r2
 8011f4e:	690a      	ldr	r2, [r1, #16]
 8011f50:	6923      	ldr	r3, [r4, #16]
 8011f52:	429a      	cmp	r2, r3
 8011f54:	bfa8      	it	ge
 8011f56:	4623      	movge	r3, r4
 8011f58:	460f      	mov	r7, r1
 8011f5a:	bfa4      	itt	ge
 8011f5c:	460c      	movge	r4, r1
 8011f5e:	461f      	movge	r7, r3
 8011f60:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011f64:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011f68:	68a3      	ldr	r3, [r4, #8]
 8011f6a:	6861      	ldr	r1, [r4, #4]
 8011f6c:	eb0a 0609 	add.w	r6, sl, r9
 8011f70:	42b3      	cmp	r3, r6
 8011f72:	b085      	sub	sp, #20
 8011f74:	bfb8      	it	lt
 8011f76:	3101      	addlt	r1, #1
 8011f78:	f7ff fe92 	bl	8011ca0 <_Balloc>
 8011f7c:	b930      	cbnz	r0, 8011f8c <__multiply+0x44>
 8011f7e:	4602      	mov	r2, r0
 8011f80:	4b44      	ldr	r3, [pc, #272]	@ (8012094 <__multiply+0x14c>)
 8011f82:	4845      	ldr	r0, [pc, #276]	@ (8012098 <__multiply+0x150>)
 8011f84:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011f88:	f7fe fbd2 	bl	8010730 <__assert_func>
 8011f8c:	f100 0514 	add.w	r5, r0, #20
 8011f90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011f94:	462b      	mov	r3, r5
 8011f96:	2200      	movs	r2, #0
 8011f98:	4543      	cmp	r3, r8
 8011f9a:	d321      	bcc.n	8011fe0 <__multiply+0x98>
 8011f9c:	f107 0114 	add.w	r1, r7, #20
 8011fa0:	f104 0214 	add.w	r2, r4, #20
 8011fa4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011fa8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011fac:	9302      	str	r3, [sp, #8]
 8011fae:	1b13      	subs	r3, r2, r4
 8011fb0:	3b15      	subs	r3, #21
 8011fb2:	f023 0303 	bic.w	r3, r3, #3
 8011fb6:	3304      	adds	r3, #4
 8011fb8:	f104 0715 	add.w	r7, r4, #21
 8011fbc:	42ba      	cmp	r2, r7
 8011fbe:	bf38      	it	cc
 8011fc0:	2304      	movcc	r3, #4
 8011fc2:	9301      	str	r3, [sp, #4]
 8011fc4:	9b02      	ldr	r3, [sp, #8]
 8011fc6:	9103      	str	r1, [sp, #12]
 8011fc8:	428b      	cmp	r3, r1
 8011fca:	d80c      	bhi.n	8011fe6 <__multiply+0x9e>
 8011fcc:	2e00      	cmp	r6, #0
 8011fce:	dd03      	ble.n	8011fd8 <__multiply+0x90>
 8011fd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d05b      	beq.n	8012090 <__multiply+0x148>
 8011fd8:	6106      	str	r6, [r0, #16]
 8011fda:	b005      	add	sp, #20
 8011fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fe0:	f843 2b04 	str.w	r2, [r3], #4
 8011fe4:	e7d8      	b.n	8011f98 <__multiply+0x50>
 8011fe6:	f8b1 a000 	ldrh.w	sl, [r1]
 8011fea:	f1ba 0f00 	cmp.w	sl, #0
 8011fee:	d024      	beq.n	801203a <__multiply+0xf2>
 8011ff0:	f104 0e14 	add.w	lr, r4, #20
 8011ff4:	46a9      	mov	r9, r5
 8011ff6:	f04f 0c00 	mov.w	ip, #0
 8011ffa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011ffe:	f8d9 3000 	ldr.w	r3, [r9]
 8012002:	fa1f fb87 	uxth.w	fp, r7
 8012006:	b29b      	uxth	r3, r3
 8012008:	fb0a 330b 	mla	r3, sl, fp, r3
 801200c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012010:	f8d9 7000 	ldr.w	r7, [r9]
 8012014:	4463      	add	r3, ip
 8012016:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801201a:	fb0a c70b 	mla	r7, sl, fp, ip
 801201e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012022:	b29b      	uxth	r3, r3
 8012024:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012028:	4572      	cmp	r2, lr
 801202a:	f849 3b04 	str.w	r3, [r9], #4
 801202e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012032:	d8e2      	bhi.n	8011ffa <__multiply+0xb2>
 8012034:	9b01      	ldr	r3, [sp, #4]
 8012036:	f845 c003 	str.w	ip, [r5, r3]
 801203a:	9b03      	ldr	r3, [sp, #12]
 801203c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012040:	3104      	adds	r1, #4
 8012042:	f1b9 0f00 	cmp.w	r9, #0
 8012046:	d021      	beq.n	801208c <__multiply+0x144>
 8012048:	682b      	ldr	r3, [r5, #0]
 801204a:	f104 0c14 	add.w	ip, r4, #20
 801204e:	46ae      	mov	lr, r5
 8012050:	f04f 0a00 	mov.w	sl, #0
 8012054:	f8bc b000 	ldrh.w	fp, [ip]
 8012058:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801205c:	fb09 770b 	mla	r7, r9, fp, r7
 8012060:	4457      	add	r7, sl
 8012062:	b29b      	uxth	r3, r3
 8012064:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012068:	f84e 3b04 	str.w	r3, [lr], #4
 801206c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012070:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012074:	f8be 3000 	ldrh.w	r3, [lr]
 8012078:	fb09 330a 	mla	r3, r9, sl, r3
 801207c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012080:	4562      	cmp	r2, ip
 8012082:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012086:	d8e5      	bhi.n	8012054 <__multiply+0x10c>
 8012088:	9f01      	ldr	r7, [sp, #4]
 801208a:	51eb      	str	r3, [r5, r7]
 801208c:	3504      	adds	r5, #4
 801208e:	e799      	b.n	8011fc4 <__multiply+0x7c>
 8012090:	3e01      	subs	r6, #1
 8012092:	e79b      	b.n	8011fcc <__multiply+0x84>
 8012094:	08013f5e 	.word	0x08013f5e
 8012098:	08013fcf 	.word	0x08013fcf

0801209c <__pow5mult>:
 801209c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120a0:	4615      	mov	r5, r2
 80120a2:	f012 0203 	ands.w	r2, r2, #3
 80120a6:	4607      	mov	r7, r0
 80120a8:	460e      	mov	r6, r1
 80120aa:	d007      	beq.n	80120bc <__pow5mult+0x20>
 80120ac:	4c25      	ldr	r4, [pc, #148]	@ (8012144 <__pow5mult+0xa8>)
 80120ae:	3a01      	subs	r2, #1
 80120b0:	2300      	movs	r3, #0
 80120b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80120b6:	f7ff fe55 	bl	8011d64 <__multadd>
 80120ba:	4606      	mov	r6, r0
 80120bc:	10ad      	asrs	r5, r5, #2
 80120be:	d03d      	beq.n	801213c <__pow5mult+0xa0>
 80120c0:	69fc      	ldr	r4, [r7, #28]
 80120c2:	b97c      	cbnz	r4, 80120e4 <__pow5mult+0x48>
 80120c4:	2010      	movs	r0, #16
 80120c6:	f7ff fd23 	bl	8011b10 <malloc>
 80120ca:	4602      	mov	r2, r0
 80120cc:	61f8      	str	r0, [r7, #28]
 80120ce:	b928      	cbnz	r0, 80120dc <__pow5mult+0x40>
 80120d0:	4b1d      	ldr	r3, [pc, #116]	@ (8012148 <__pow5mult+0xac>)
 80120d2:	481e      	ldr	r0, [pc, #120]	@ (801214c <__pow5mult+0xb0>)
 80120d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80120d8:	f7fe fb2a 	bl	8010730 <__assert_func>
 80120dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80120e0:	6004      	str	r4, [r0, #0]
 80120e2:	60c4      	str	r4, [r0, #12]
 80120e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80120e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80120ec:	b94c      	cbnz	r4, 8012102 <__pow5mult+0x66>
 80120ee:	f240 2171 	movw	r1, #625	@ 0x271
 80120f2:	4638      	mov	r0, r7
 80120f4:	f7ff ff12 	bl	8011f1c <__i2b>
 80120f8:	2300      	movs	r3, #0
 80120fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80120fe:	4604      	mov	r4, r0
 8012100:	6003      	str	r3, [r0, #0]
 8012102:	f04f 0900 	mov.w	r9, #0
 8012106:	07eb      	lsls	r3, r5, #31
 8012108:	d50a      	bpl.n	8012120 <__pow5mult+0x84>
 801210a:	4631      	mov	r1, r6
 801210c:	4622      	mov	r2, r4
 801210e:	4638      	mov	r0, r7
 8012110:	f7ff ff1a 	bl	8011f48 <__multiply>
 8012114:	4631      	mov	r1, r6
 8012116:	4680      	mov	r8, r0
 8012118:	4638      	mov	r0, r7
 801211a:	f7ff fe01 	bl	8011d20 <_Bfree>
 801211e:	4646      	mov	r6, r8
 8012120:	106d      	asrs	r5, r5, #1
 8012122:	d00b      	beq.n	801213c <__pow5mult+0xa0>
 8012124:	6820      	ldr	r0, [r4, #0]
 8012126:	b938      	cbnz	r0, 8012138 <__pow5mult+0x9c>
 8012128:	4622      	mov	r2, r4
 801212a:	4621      	mov	r1, r4
 801212c:	4638      	mov	r0, r7
 801212e:	f7ff ff0b 	bl	8011f48 <__multiply>
 8012132:	6020      	str	r0, [r4, #0]
 8012134:	f8c0 9000 	str.w	r9, [r0]
 8012138:	4604      	mov	r4, r0
 801213a:	e7e4      	b.n	8012106 <__pow5mult+0x6a>
 801213c:	4630      	mov	r0, r6
 801213e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012142:	bf00      	nop
 8012144:	08014028 	.word	0x08014028
 8012148:	08013e44 	.word	0x08013e44
 801214c:	08013fcf 	.word	0x08013fcf

08012150 <__lshift>:
 8012150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012154:	460c      	mov	r4, r1
 8012156:	6849      	ldr	r1, [r1, #4]
 8012158:	6923      	ldr	r3, [r4, #16]
 801215a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801215e:	68a3      	ldr	r3, [r4, #8]
 8012160:	4607      	mov	r7, r0
 8012162:	4691      	mov	r9, r2
 8012164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012168:	f108 0601 	add.w	r6, r8, #1
 801216c:	42b3      	cmp	r3, r6
 801216e:	db0b      	blt.n	8012188 <__lshift+0x38>
 8012170:	4638      	mov	r0, r7
 8012172:	f7ff fd95 	bl	8011ca0 <_Balloc>
 8012176:	4605      	mov	r5, r0
 8012178:	b948      	cbnz	r0, 801218e <__lshift+0x3e>
 801217a:	4602      	mov	r2, r0
 801217c:	4b28      	ldr	r3, [pc, #160]	@ (8012220 <__lshift+0xd0>)
 801217e:	4829      	ldr	r0, [pc, #164]	@ (8012224 <__lshift+0xd4>)
 8012180:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012184:	f7fe fad4 	bl	8010730 <__assert_func>
 8012188:	3101      	adds	r1, #1
 801218a:	005b      	lsls	r3, r3, #1
 801218c:	e7ee      	b.n	801216c <__lshift+0x1c>
 801218e:	2300      	movs	r3, #0
 8012190:	f100 0114 	add.w	r1, r0, #20
 8012194:	f100 0210 	add.w	r2, r0, #16
 8012198:	4618      	mov	r0, r3
 801219a:	4553      	cmp	r3, sl
 801219c:	db33      	blt.n	8012206 <__lshift+0xb6>
 801219e:	6920      	ldr	r0, [r4, #16]
 80121a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80121a4:	f104 0314 	add.w	r3, r4, #20
 80121a8:	f019 091f 	ands.w	r9, r9, #31
 80121ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80121b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80121b4:	d02b      	beq.n	801220e <__lshift+0xbe>
 80121b6:	f1c9 0e20 	rsb	lr, r9, #32
 80121ba:	468a      	mov	sl, r1
 80121bc:	2200      	movs	r2, #0
 80121be:	6818      	ldr	r0, [r3, #0]
 80121c0:	fa00 f009 	lsl.w	r0, r0, r9
 80121c4:	4310      	orrs	r0, r2
 80121c6:	f84a 0b04 	str.w	r0, [sl], #4
 80121ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80121ce:	459c      	cmp	ip, r3
 80121d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80121d4:	d8f3      	bhi.n	80121be <__lshift+0x6e>
 80121d6:	ebac 0304 	sub.w	r3, ip, r4
 80121da:	3b15      	subs	r3, #21
 80121dc:	f023 0303 	bic.w	r3, r3, #3
 80121e0:	3304      	adds	r3, #4
 80121e2:	f104 0015 	add.w	r0, r4, #21
 80121e6:	4584      	cmp	ip, r0
 80121e8:	bf38      	it	cc
 80121ea:	2304      	movcc	r3, #4
 80121ec:	50ca      	str	r2, [r1, r3]
 80121ee:	b10a      	cbz	r2, 80121f4 <__lshift+0xa4>
 80121f0:	f108 0602 	add.w	r6, r8, #2
 80121f4:	3e01      	subs	r6, #1
 80121f6:	4638      	mov	r0, r7
 80121f8:	612e      	str	r6, [r5, #16]
 80121fa:	4621      	mov	r1, r4
 80121fc:	f7ff fd90 	bl	8011d20 <_Bfree>
 8012200:	4628      	mov	r0, r5
 8012202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012206:	f842 0f04 	str.w	r0, [r2, #4]!
 801220a:	3301      	adds	r3, #1
 801220c:	e7c5      	b.n	801219a <__lshift+0x4a>
 801220e:	3904      	subs	r1, #4
 8012210:	f853 2b04 	ldr.w	r2, [r3], #4
 8012214:	f841 2f04 	str.w	r2, [r1, #4]!
 8012218:	459c      	cmp	ip, r3
 801221a:	d8f9      	bhi.n	8012210 <__lshift+0xc0>
 801221c:	e7ea      	b.n	80121f4 <__lshift+0xa4>
 801221e:	bf00      	nop
 8012220:	08013f5e 	.word	0x08013f5e
 8012224:	08013fcf 	.word	0x08013fcf

08012228 <__mcmp>:
 8012228:	690a      	ldr	r2, [r1, #16]
 801222a:	4603      	mov	r3, r0
 801222c:	6900      	ldr	r0, [r0, #16]
 801222e:	1a80      	subs	r0, r0, r2
 8012230:	b530      	push	{r4, r5, lr}
 8012232:	d10e      	bne.n	8012252 <__mcmp+0x2a>
 8012234:	3314      	adds	r3, #20
 8012236:	3114      	adds	r1, #20
 8012238:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801223c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012240:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012244:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012248:	4295      	cmp	r5, r2
 801224a:	d003      	beq.n	8012254 <__mcmp+0x2c>
 801224c:	d205      	bcs.n	801225a <__mcmp+0x32>
 801224e:	f04f 30ff 	mov.w	r0, #4294967295
 8012252:	bd30      	pop	{r4, r5, pc}
 8012254:	42a3      	cmp	r3, r4
 8012256:	d3f3      	bcc.n	8012240 <__mcmp+0x18>
 8012258:	e7fb      	b.n	8012252 <__mcmp+0x2a>
 801225a:	2001      	movs	r0, #1
 801225c:	e7f9      	b.n	8012252 <__mcmp+0x2a>
	...

08012260 <__mdiff>:
 8012260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012264:	4689      	mov	r9, r1
 8012266:	4606      	mov	r6, r0
 8012268:	4611      	mov	r1, r2
 801226a:	4648      	mov	r0, r9
 801226c:	4614      	mov	r4, r2
 801226e:	f7ff ffdb 	bl	8012228 <__mcmp>
 8012272:	1e05      	subs	r5, r0, #0
 8012274:	d112      	bne.n	801229c <__mdiff+0x3c>
 8012276:	4629      	mov	r1, r5
 8012278:	4630      	mov	r0, r6
 801227a:	f7ff fd11 	bl	8011ca0 <_Balloc>
 801227e:	4602      	mov	r2, r0
 8012280:	b928      	cbnz	r0, 801228e <__mdiff+0x2e>
 8012282:	4b3f      	ldr	r3, [pc, #252]	@ (8012380 <__mdiff+0x120>)
 8012284:	f240 2137 	movw	r1, #567	@ 0x237
 8012288:	483e      	ldr	r0, [pc, #248]	@ (8012384 <__mdiff+0x124>)
 801228a:	f7fe fa51 	bl	8010730 <__assert_func>
 801228e:	2301      	movs	r3, #1
 8012290:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012294:	4610      	mov	r0, r2
 8012296:	b003      	add	sp, #12
 8012298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801229c:	bfbc      	itt	lt
 801229e:	464b      	movlt	r3, r9
 80122a0:	46a1      	movlt	r9, r4
 80122a2:	4630      	mov	r0, r6
 80122a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80122a8:	bfba      	itte	lt
 80122aa:	461c      	movlt	r4, r3
 80122ac:	2501      	movlt	r5, #1
 80122ae:	2500      	movge	r5, #0
 80122b0:	f7ff fcf6 	bl	8011ca0 <_Balloc>
 80122b4:	4602      	mov	r2, r0
 80122b6:	b918      	cbnz	r0, 80122c0 <__mdiff+0x60>
 80122b8:	4b31      	ldr	r3, [pc, #196]	@ (8012380 <__mdiff+0x120>)
 80122ba:	f240 2145 	movw	r1, #581	@ 0x245
 80122be:	e7e3      	b.n	8012288 <__mdiff+0x28>
 80122c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80122c4:	6926      	ldr	r6, [r4, #16]
 80122c6:	60c5      	str	r5, [r0, #12]
 80122c8:	f109 0310 	add.w	r3, r9, #16
 80122cc:	f109 0514 	add.w	r5, r9, #20
 80122d0:	f104 0e14 	add.w	lr, r4, #20
 80122d4:	f100 0b14 	add.w	fp, r0, #20
 80122d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80122dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80122e0:	9301      	str	r3, [sp, #4]
 80122e2:	46d9      	mov	r9, fp
 80122e4:	f04f 0c00 	mov.w	ip, #0
 80122e8:	9b01      	ldr	r3, [sp, #4]
 80122ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80122ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80122f2:	9301      	str	r3, [sp, #4]
 80122f4:	fa1f f38a 	uxth.w	r3, sl
 80122f8:	4619      	mov	r1, r3
 80122fa:	b283      	uxth	r3, r0
 80122fc:	1acb      	subs	r3, r1, r3
 80122fe:	0c00      	lsrs	r0, r0, #16
 8012300:	4463      	add	r3, ip
 8012302:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012306:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801230a:	b29b      	uxth	r3, r3
 801230c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012310:	4576      	cmp	r6, lr
 8012312:	f849 3b04 	str.w	r3, [r9], #4
 8012316:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801231a:	d8e5      	bhi.n	80122e8 <__mdiff+0x88>
 801231c:	1b33      	subs	r3, r6, r4
 801231e:	3b15      	subs	r3, #21
 8012320:	f023 0303 	bic.w	r3, r3, #3
 8012324:	3415      	adds	r4, #21
 8012326:	3304      	adds	r3, #4
 8012328:	42a6      	cmp	r6, r4
 801232a:	bf38      	it	cc
 801232c:	2304      	movcc	r3, #4
 801232e:	441d      	add	r5, r3
 8012330:	445b      	add	r3, fp
 8012332:	461e      	mov	r6, r3
 8012334:	462c      	mov	r4, r5
 8012336:	4544      	cmp	r4, r8
 8012338:	d30e      	bcc.n	8012358 <__mdiff+0xf8>
 801233a:	f108 0103 	add.w	r1, r8, #3
 801233e:	1b49      	subs	r1, r1, r5
 8012340:	f021 0103 	bic.w	r1, r1, #3
 8012344:	3d03      	subs	r5, #3
 8012346:	45a8      	cmp	r8, r5
 8012348:	bf38      	it	cc
 801234a:	2100      	movcc	r1, #0
 801234c:	440b      	add	r3, r1
 801234e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012352:	b191      	cbz	r1, 801237a <__mdiff+0x11a>
 8012354:	6117      	str	r7, [r2, #16]
 8012356:	e79d      	b.n	8012294 <__mdiff+0x34>
 8012358:	f854 1b04 	ldr.w	r1, [r4], #4
 801235c:	46e6      	mov	lr, ip
 801235e:	0c08      	lsrs	r0, r1, #16
 8012360:	fa1c fc81 	uxtah	ip, ip, r1
 8012364:	4471      	add	r1, lr
 8012366:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801236a:	b289      	uxth	r1, r1
 801236c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012370:	f846 1b04 	str.w	r1, [r6], #4
 8012374:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012378:	e7dd      	b.n	8012336 <__mdiff+0xd6>
 801237a:	3f01      	subs	r7, #1
 801237c:	e7e7      	b.n	801234e <__mdiff+0xee>
 801237e:	bf00      	nop
 8012380:	08013f5e 	.word	0x08013f5e
 8012384:	08013fcf 	.word	0x08013fcf

08012388 <__ulp>:
 8012388:	b082      	sub	sp, #8
 801238a:	ed8d 0b00 	vstr	d0, [sp]
 801238e:	9a01      	ldr	r2, [sp, #4]
 8012390:	4b0f      	ldr	r3, [pc, #60]	@ (80123d0 <__ulp+0x48>)
 8012392:	4013      	ands	r3, r2
 8012394:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012398:	2b00      	cmp	r3, #0
 801239a:	dc08      	bgt.n	80123ae <__ulp+0x26>
 801239c:	425b      	negs	r3, r3
 801239e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80123a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80123a6:	da04      	bge.n	80123b2 <__ulp+0x2a>
 80123a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80123ac:	4113      	asrs	r3, r2
 80123ae:	2200      	movs	r2, #0
 80123b0:	e008      	b.n	80123c4 <__ulp+0x3c>
 80123b2:	f1a2 0314 	sub.w	r3, r2, #20
 80123b6:	2b1e      	cmp	r3, #30
 80123b8:	bfda      	itte	le
 80123ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80123be:	40da      	lsrle	r2, r3
 80123c0:	2201      	movgt	r2, #1
 80123c2:	2300      	movs	r3, #0
 80123c4:	4619      	mov	r1, r3
 80123c6:	4610      	mov	r0, r2
 80123c8:	ec41 0b10 	vmov	d0, r0, r1
 80123cc:	b002      	add	sp, #8
 80123ce:	4770      	bx	lr
 80123d0:	7ff00000 	.word	0x7ff00000

080123d4 <__b2d>:
 80123d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123d8:	6906      	ldr	r6, [r0, #16]
 80123da:	f100 0814 	add.w	r8, r0, #20
 80123de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80123e2:	1f37      	subs	r7, r6, #4
 80123e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80123e8:	4610      	mov	r0, r2
 80123ea:	f7ff fd4b 	bl	8011e84 <__hi0bits>
 80123ee:	f1c0 0320 	rsb	r3, r0, #32
 80123f2:	280a      	cmp	r0, #10
 80123f4:	600b      	str	r3, [r1, #0]
 80123f6:	491b      	ldr	r1, [pc, #108]	@ (8012464 <__b2d+0x90>)
 80123f8:	dc15      	bgt.n	8012426 <__b2d+0x52>
 80123fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80123fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8012402:	45b8      	cmp	r8, r7
 8012404:	ea43 0501 	orr.w	r5, r3, r1
 8012408:	bf34      	ite	cc
 801240a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801240e:	2300      	movcs	r3, #0
 8012410:	3015      	adds	r0, #21
 8012412:	fa02 f000 	lsl.w	r0, r2, r0
 8012416:	fa23 f30c 	lsr.w	r3, r3, ip
 801241a:	4303      	orrs	r3, r0
 801241c:	461c      	mov	r4, r3
 801241e:	ec45 4b10 	vmov	d0, r4, r5
 8012422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012426:	45b8      	cmp	r8, r7
 8012428:	bf3a      	itte	cc
 801242a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801242e:	f1a6 0708 	subcc.w	r7, r6, #8
 8012432:	2300      	movcs	r3, #0
 8012434:	380b      	subs	r0, #11
 8012436:	d012      	beq.n	801245e <__b2d+0x8a>
 8012438:	f1c0 0120 	rsb	r1, r0, #32
 801243c:	fa23 f401 	lsr.w	r4, r3, r1
 8012440:	4082      	lsls	r2, r0
 8012442:	4322      	orrs	r2, r4
 8012444:	4547      	cmp	r7, r8
 8012446:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801244a:	bf8c      	ite	hi
 801244c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012450:	2200      	movls	r2, #0
 8012452:	4083      	lsls	r3, r0
 8012454:	40ca      	lsrs	r2, r1
 8012456:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801245a:	4313      	orrs	r3, r2
 801245c:	e7de      	b.n	801241c <__b2d+0x48>
 801245e:	ea42 0501 	orr.w	r5, r2, r1
 8012462:	e7db      	b.n	801241c <__b2d+0x48>
 8012464:	3ff00000 	.word	0x3ff00000

08012468 <__d2b>:
 8012468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801246c:	460f      	mov	r7, r1
 801246e:	2101      	movs	r1, #1
 8012470:	ec59 8b10 	vmov	r8, r9, d0
 8012474:	4616      	mov	r6, r2
 8012476:	f7ff fc13 	bl	8011ca0 <_Balloc>
 801247a:	4604      	mov	r4, r0
 801247c:	b930      	cbnz	r0, 801248c <__d2b+0x24>
 801247e:	4602      	mov	r2, r0
 8012480:	4b23      	ldr	r3, [pc, #140]	@ (8012510 <__d2b+0xa8>)
 8012482:	4824      	ldr	r0, [pc, #144]	@ (8012514 <__d2b+0xac>)
 8012484:	f240 310f 	movw	r1, #783	@ 0x30f
 8012488:	f7fe f952 	bl	8010730 <__assert_func>
 801248c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012494:	b10d      	cbz	r5, 801249a <__d2b+0x32>
 8012496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801249a:	9301      	str	r3, [sp, #4]
 801249c:	f1b8 0300 	subs.w	r3, r8, #0
 80124a0:	d023      	beq.n	80124ea <__d2b+0x82>
 80124a2:	4668      	mov	r0, sp
 80124a4:	9300      	str	r3, [sp, #0]
 80124a6:	f7ff fd0c 	bl	8011ec2 <__lo0bits>
 80124aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80124ae:	b1d0      	cbz	r0, 80124e6 <__d2b+0x7e>
 80124b0:	f1c0 0320 	rsb	r3, r0, #32
 80124b4:	fa02 f303 	lsl.w	r3, r2, r3
 80124b8:	430b      	orrs	r3, r1
 80124ba:	40c2      	lsrs	r2, r0
 80124bc:	6163      	str	r3, [r4, #20]
 80124be:	9201      	str	r2, [sp, #4]
 80124c0:	9b01      	ldr	r3, [sp, #4]
 80124c2:	61a3      	str	r3, [r4, #24]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	bf0c      	ite	eq
 80124c8:	2201      	moveq	r2, #1
 80124ca:	2202      	movne	r2, #2
 80124cc:	6122      	str	r2, [r4, #16]
 80124ce:	b1a5      	cbz	r5, 80124fa <__d2b+0x92>
 80124d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80124d4:	4405      	add	r5, r0
 80124d6:	603d      	str	r5, [r7, #0]
 80124d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80124dc:	6030      	str	r0, [r6, #0]
 80124de:	4620      	mov	r0, r4
 80124e0:	b003      	add	sp, #12
 80124e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124e6:	6161      	str	r1, [r4, #20]
 80124e8:	e7ea      	b.n	80124c0 <__d2b+0x58>
 80124ea:	a801      	add	r0, sp, #4
 80124ec:	f7ff fce9 	bl	8011ec2 <__lo0bits>
 80124f0:	9b01      	ldr	r3, [sp, #4]
 80124f2:	6163      	str	r3, [r4, #20]
 80124f4:	3020      	adds	r0, #32
 80124f6:	2201      	movs	r2, #1
 80124f8:	e7e8      	b.n	80124cc <__d2b+0x64>
 80124fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80124fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012502:	6038      	str	r0, [r7, #0]
 8012504:	6918      	ldr	r0, [r3, #16]
 8012506:	f7ff fcbd 	bl	8011e84 <__hi0bits>
 801250a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801250e:	e7e5      	b.n	80124dc <__d2b+0x74>
 8012510:	08013f5e 	.word	0x08013f5e
 8012514:	08013fcf 	.word	0x08013fcf

08012518 <__ratio>:
 8012518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801251c:	b085      	sub	sp, #20
 801251e:	e9cd 1000 	strd	r1, r0, [sp]
 8012522:	a902      	add	r1, sp, #8
 8012524:	f7ff ff56 	bl	80123d4 <__b2d>
 8012528:	9800      	ldr	r0, [sp, #0]
 801252a:	a903      	add	r1, sp, #12
 801252c:	ec55 4b10 	vmov	r4, r5, d0
 8012530:	f7ff ff50 	bl	80123d4 <__b2d>
 8012534:	9b01      	ldr	r3, [sp, #4]
 8012536:	6919      	ldr	r1, [r3, #16]
 8012538:	9b00      	ldr	r3, [sp, #0]
 801253a:	691b      	ldr	r3, [r3, #16]
 801253c:	1ac9      	subs	r1, r1, r3
 801253e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012542:	1a9b      	subs	r3, r3, r2
 8012544:	ec5b ab10 	vmov	sl, fp, d0
 8012548:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801254c:	2b00      	cmp	r3, #0
 801254e:	bfce      	itee	gt
 8012550:	462a      	movgt	r2, r5
 8012552:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012556:	465a      	movle	r2, fp
 8012558:	462f      	mov	r7, r5
 801255a:	46d9      	mov	r9, fp
 801255c:	bfcc      	ite	gt
 801255e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012562:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012566:	464b      	mov	r3, r9
 8012568:	4652      	mov	r2, sl
 801256a:	4620      	mov	r0, r4
 801256c:	4639      	mov	r1, r7
 801256e:	f7ee f9a5 	bl	80008bc <__aeabi_ddiv>
 8012572:	ec41 0b10 	vmov	d0, r0, r1
 8012576:	b005      	add	sp, #20
 8012578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801257c <__copybits>:
 801257c:	3901      	subs	r1, #1
 801257e:	b570      	push	{r4, r5, r6, lr}
 8012580:	1149      	asrs	r1, r1, #5
 8012582:	6914      	ldr	r4, [r2, #16]
 8012584:	3101      	adds	r1, #1
 8012586:	f102 0314 	add.w	r3, r2, #20
 801258a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801258e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012592:	1f05      	subs	r5, r0, #4
 8012594:	42a3      	cmp	r3, r4
 8012596:	d30c      	bcc.n	80125b2 <__copybits+0x36>
 8012598:	1aa3      	subs	r3, r4, r2
 801259a:	3b11      	subs	r3, #17
 801259c:	f023 0303 	bic.w	r3, r3, #3
 80125a0:	3211      	adds	r2, #17
 80125a2:	42a2      	cmp	r2, r4
 80125a4:	bf88      	it	hi
 80125a6:	2300      	movhi	r3, #0
 80125a8:	4418      	add	r0, r3
 80125aa:	2300      	movs	r3, #0
 80125ac:	4288      	cmp	r0, r1
 80125ae:	d305      	bcc.n	80125bc <__copybits+0x40>
 80125b0:	bd70      	pop	{r4, r5, r6, pc}
 80125b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80125b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80125ba:	e7eb      	b.n	8012594 <__copybits+0x18>
 80125bc:	f840 3b04 	str.w	r3, [r0], #4
 80125c0:	e7f4      	b.n	80125ac <__copybits+0x30>

080125c2 <__any_on>:
 80125c2:	f100 0214 	add.w	r2, r0, #20
 80125c6:	6900      	ldr	r0, [r0, #16]
 80125c8:	114b      	asrs	r3, r1, #5
 80125ca:	4298      	cmp	r0, r3
 80125cc:	b510      	push	{r4, lr}
 80125ce:	db11      	blt.n	80125f4 <__any_on+0x32>
 80125d0:	dd0a      	ble.n	80125e8 <__any_on+0x26>
 80125d2:	f011 011f 	ands.w	r1, r1, #31
 80125d6:	d007      	beq.n	80125e8 <__any_on+0x26>
 80125d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80125dc:	fa24 f001 	lsr.w	r0, r4, r1
 80125e0:	fa00 f101 	lsl.w	r1, r0, r1
 80125e4:	428c      	cmp	r4, r1
 80125e6:	d10b      	bne.n	8012600 <__any_on+0x3e>
 80125e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80125ec:	4293      	cmp	r3, r2
 80125ee:	d803      	bhi.n	80125f8 <__any_on+0x36>
 80125f0:	2000      	movs	r0, #0
 80125f2:	bd10      	pop	{r4, pc}
 80125f4:	4603      	mov	r3, r0
 80125f6:	e7f7      	b.n	80125e8 <__any_on+0x26>
 80125f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80125fc:	2900      	cmp	r1, #0
 80125fe:	d0f5      	beq.n	80125ec <__any_on+0x2a>
 8012600:	2001      	movs	r0, #1
 8012602:	e7f6      	b.n	80125f2 <__any_on+0x30>

08012604 <__ascii_wctomb>:
 8012604:	4603      	mov	r3, r0
 8012606:	4608      	mov	r0, r1
 8012608:	b141      	cbz	r1, 801261c <__ascii_wctomb+0x18>
 801260a:	2aff      	cmp	r2, #255	@ 0xff
 801260c:	d904      	bls.n	8012618 <__ascii_wctomb+0x14>
 801260e:	228a      	movs	r2, #138	@ 0x8a
 8012610:	601a      	str	r2, [r3, #0]
 8012612:	f04f 30ff 	mov.w	r0, #4294967295
 8012616:	4770      	bx	lr
 8012618:	700a      	strb	r2, [r1, #0]
 801261a:	2001      	movs	r0, #1
 801261c:	4770      	bx	lr

0801261e <__ssputs_r>:
 801261e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012622:	688e      	ldr	r6, [r1, #8]
 8012624:	461f      	mov	r7, r3
 8012626:	42be      	cmp	r6, r7
 8012628:	680b      	ldr	r3, [r1, #0]
 801262a:	4682      	mov	sl, r0
 801262c:	460c      	mov	r4, r1
 801262e:	4690      	mov	r8, r2
 8012630:	d82d      	bhi.n	801268e <__ssputs_r+0x70>
 8012632:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012636:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801263a:	d026      	beq.n	801268a <__ssputs_r+0x6c>
 801263c:	6965      	ldr	r5, [r4, #20]
 801263e:	6909      	ldr	r1, [r1, #16]
 8012640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012644:	eba3 0901 	sub.w	r9, r3, r1
 8012648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801264c:	1c7b      	adds	r3, r7, #1
 801264e:	444b      	add	r3, r9
 8012650:	106d      	asrs	r5, r5, #1
 8012652:	429d      	cmp	r5, r3
 8012654:	bf38      	it	cc
 8012656:	461d      	movcc	r5, r3
 8012658:	0553      	lsls	r3, r2, #21
 801265a:	d527      	bpl.n	80126ac <__ssputs_r+0x8e>
 801265c:	4629      	mov	r1, r5
 801265e:	f7ff fa81 	bl	8011b64 <_malloc_r>
 8012662:	4606      	mov	r6, r0
 8012664:	b360      	cbz	r0, 80126c0 <__ssputs_r+0xa2>
 8012666:	6921      	ldr	r1, [r4, #16]
 8012668:	464a      	mov	r2, r9
 801266a:	f7fe f848 	bl	80106fe <memcpy>
 801266e:	89a3      	ldrh	r3, [r4, #12]
 8012670:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012678:	81a3      	strh	r3, [r4, #12]
 801267a:	6126      	str	r6, [r4, #16]
 801267c:	6165      	str	r5, [r4, #20]
 801267e:	444e      	add	r6, r9
 8012680:	eba5 0509 	sub.w	r5, r5, r9
 8012684:	6026      	str	r6, [r4, #0]
 8012686:	60a5      	str	r5, [r4, #8]
 8012688:	463e      	mov	r6, r7
 801268a:	42be      	cmp	r6, r7
 801268c:	d900      	bls.n	8012690 <__ssputs_r+0x72>
 801268e:	463e      	mov	r6, r7
 8012690:	6820      	ldr	r0, [r4, #0]
 8012692:	4632      	mov	r2, r6
 8012694:	4641      	mov	r1, r8
 8012696:	f000 f9d7 	bl	8012a48 <memmove>
 801269a:	68a3      	ldr	r3, [r4, #8]
 801269c:	1b9b      	subs	r3, r3, r6
 801269e:	60a3      	str	r3, [r4, #8]
 80126a0:	6823      	ldr	r3, [r4, #0]
 80126a2:	4433      	add	r3, r6
 80126a4:	6023      	str	r3, [r4, #0]
 80126a6:	2000      	movs	r0, #0
 80126a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126ac:	462a      	mov	r2, r5
 80126ae:	f000 fa10 	bl	8012ad2 <_realloc_r>
 80126b2:	4606      	mov	r6, r0
 80126b4:	2800      	cmp	r0, #0
 80126b6:	d1e0      	bne.n	801267a <__ssputs_r+0x5c>
 80126b8:	6921      	ldr	r1, [r4, #16]
 80126ba:	4650      	mov	r0, sl
 80126bc:	f7fe fea4 	bl	8011408 <_free_r>
 80126c0:	230c      	movs	r3, #12
 80126c2:	f8ca 3000 	str.w	r3, [sl]
 80126c6:	89a3      	ldrh	r3, [r4, #12]
 80126c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126cc:	81a3      	strh	r3, [r4, #12]
 80126ce:	f04f 30ff 	mov.w	r0, #4294967295
 80126d2:	e7e9      	b.n	80126a8 <__ssputs_r+0x8a>

080126d4 <_svfiprintf_r>:
 80126d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d8:	4698      	mov	r8, r3
 80126da:	898b      	ldrh	r3, [r1, #12]
 80126dc:	061b      	lsls	r3, r3, #24
 80126de:	b09d      	sub	sp, #116	@ 0x74
 80126e0:	4607      	mov	r7, r0
 80126e2:	460d      	mov	r5, r1
 80126e4:	4614      	mov	r4, r2
 80126e6:	d510      	bpl.n	801270a <_svfiprintf_r+0x36>
 80126e8:	690b      	ldr	r3, [r1, #16]
 80126ea:	b973      	cbnz	r3, 801270a <_svfiprintf_r+0x36>
 80126ec:	2140      	movs	r1, #64	@ 0x40
 80126ee:	f7ff fa39 	bl	8011b64 <_malloc_r>
 80126f2:	6028      	str	r0, [r5, #0]
 80126f4:	6128      	str	r0, [r5, #16]
 80126f6:	b930      	cbnz	r0, 8012706 <_svfiprintf_r+0x32>
 80126f8:	230c      	movs	r3, #12
 80126fa:	603b      	str	r3, [r7, #0]
 80126fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012700:	b01d      	add	sp, #116	@ 0x74
 8012702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012706:	2340      	movs	r3, #64	@ 0x40
 8012708:	616b      	str	r3, [r5, #20]
 801270a:	2300      	movs	r3, #0
 801270c:	9309      	str	r3, [sp, #36]	@ 0x24
 801270e:	2320      	movs	r3, #32
 8012710:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012714:	f8cd 800c 	str.w	r8, [sp, #12]
 8012718:	2330      	movs	r3, #48	@ 0x30
 801271a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80128b8 <_svfiprintf_r+0x1e4>
 801271e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012722:	f04f 0901 	mov.w	r9, #1
 8012726:	4623      	mov	r3, r4
 8012728:	469a      	mov	sl, r3
 801272a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801272e:	b10a      	cbz	r2, 8012734 <_svfiprintf_r+0x60>
 8012730:	2a25      	cmp	r2, #37	@ 0x25
 8012732:	d1f9      	bne.n	8012728 <_svfiprintf_r+0x54>
 8012734:	ebba 0b04 	subs.w	fp, sl, r4
 8012738:	d00b      	beq.n	8012752 <_svfiprintf_r+0x7e>
 801273a:	465b      	mov	r3, fp
 801273c:	4622      	mov	r2, r4
 801273e:	4629      	mov	r1, r5
 8012740:	4638      	mov	r0, r7
 8012742:	f7ff ff6c 	bl	801261e <__ssputs_r>
 8012746:	3001      	adds	r0, #1
 8012748:	f000 80a7 	beq.w	801289a <_svfiprintf_r+0x1c6>
 801274c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801274e:	445a      	add	r2, fp
 8012750:	9209      	str	r2, [sp, #36]	@ 0x24
 8012752:	f89a 3000 	ldrb.w	r3, [sl]
 8012756:	2b00      	cmp	r3, #0
 8012758:	f000 809f 	beq.w	801289a <_svfiprintf_r+0x1c6>
 801275c:	2300      	movs	r3, #0
 801275e:	f04f 32ff 	mov.w	r2, #4294967295
 8012762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012766:	f10a 0a01 	add.w	sl, sl, #1
 801276a:	9304      	str	r3, [sp, #16]
 801276c:	9307      	str	r3, [sp, #28]
 801276e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012772:	931a      	str	r3, [sp, #104]	@ 0x68
 8012774:	4654      	mov	r4, sl
 8012776:	2205      	movs	r2, #5
 8012778:	f814 1b01 	ldrb.w	r1, [r4], #1
 801277c:	484e      	ldr	r0, [pc, #312]	@ (80128b8 <_svfiprintf_r+0x1e4>)
 801277e:	f7ed fd5f 	bl	8000240 <memchr>
 8012782:	9a04      	ldr	r2, [sp, #16]
 8012784:	b9d8      	cbnz	r0, 80127be <_svfiprintf_r+0xea>
 8012786:	06d0      	lsls	r0, r2, #27
 8012788:	bf44      	itt	mi
 801278a:	2320      	movmi	r3, #32
 801278c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012790:	0711      	lsls	r1, r2, #28
 8012792:	bf44      	itt	mi
 8012794:	232b      	movmi	r3, #43	@ 0x2b
 8012796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801279a:	f89a 3000 	ldrb.w	r3, [sl]
 801279e:	2b2a      	cmp	r3, #42	@ 0x2a
 80127a0:	d015      	beq.n	80127ce <_svfiprintf_r+0xfa>
 80127a2:	9a07      	ldr	r2, [sp, #28]
 80127a4:	4654      	mov	r4, sl
 80127a6:	2000      	movs	r0, #0
 80127a8:	f04f 0c0a 	mov.w	ip, #10
 80127ac:	4621      	mov	r1, r4
 80127ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127b2:	3b30      	subs	r3, #48	@ 0x30
 80127b4:	2b09      	cmp	r3, #9
 80127b6:	d94b      	bls.n	8012850 <_svfiprintf_r+0x17c>
 80127b8:	b1b0      	cbz	r0, 80127e8 <_svfiprintf_r+0x114>
 80127ba:	9207      	str	r2, [sp, #28]
 80127bc:	e014      	b.n	80127e8 <_svfiprintf_r+0x114>
 80127be:	eba0 0308 	sub.w	r3, r0, r8
 80127c2:	fa09 f303 	lsl.w	r3, r9, r3
 80127c6:	4313      	orrs	r3, r2
 80127c8:	9304      	str	r3, [sp, #16]
 80127ca:	46a2      	mov	sl, r4
 80127cc:	e7d2      	b.n	8012774 <_svfiprintf_r+0xa0>
 80127ce:	9b03      	ldr	r3, [sp, #12]
 80127d0:	1d19      	adds	r1, r3, #4
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	9103      	str	r1, [sp, #12]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	bfbb      	ittet	lt
 80127da:	425b      	neglt	r3, r3
 80127dc:	f042 0202 	orrlt.w	r2, r2, #2
 80127e0:	9307      	strge	r3, [sp, #28]
 80127e2:	9307      	strlt	r3, [sp, #28]
 80127e4:	bfb8      	it	lt
 80127e6:	9204      	strlt	r2, [sp, #16]
 80127e8:	7823      	ldrb	r3, [r4, #0]
 80127ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80127ec:	d10a      	bne.n	8012804 <_svfiprintf_r+0x130>
 80127ee:	7863      	ldrb	r3, [r4, #1]
 80127f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80127f2:	d132      	bne.n	801285a <_svfiprintf_r+0x186>
 80127f4:	9b03      	ldr	r3, [sp, #12]
 80127f6:	1d1a      	adds	r2, r3, #4
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	9203      	str	r2, [sp, #12]
 80127fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012800:	3402      	adds	r4, #2
 8012802:	9305      	str	r3, [sp, #20]
 8012804:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80128c8 <_svfiprintf_r+0x1f4>
 8012808:	7821      	ldrb	r1, [r4, #0]
 801280a:	2203      	movs	r2, #3
 801280c:	4650      	mov	r0, sl
 801280e:	f7ed fd17 	bl	8000240 <memchr>
 8012812:	b138      	cbz	r0, 8012824 <_svfiprintf_r+0x150>
 8012814:	9b04      	ldr	r3, [sp, #16]
 8012816:	eba0 000a 	sub.w	r0, r0, sl
 801281a:	2240      	movs	r2, #64	@ 0x40
 801281c:	4082      	lsls	r2, r0
 801281e:	4313      	orrs	r3, r2
 8012820:	3401      	adds	r4, #1
 8012822:	9304      	str	r3, [sp, #16]
 8012824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012828:	4824      	ldr	r0, [pc, #144]	@ (80128bc <_svfiprintf_r+0x1e8>)
 801282a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801282e:	2206      	movs	r2, #6
 8012830:	f7ed fd06 	bl	8000240 <memchr>
 8012834:	2800      	cmp	r0, #0
 8012836:	d036      	beq.n	80128a6 <_svfiprintf_r+0x1d2>
 8012838:	4b21      	ldr	r3, [pc, #132]	@ (80128c0 <_svfiprintf_r+0x1ec>)
 801283a:	bb1b      	cbnz	r3, 8012884 <_svfiprintf_r+0x1b0>
 801283c:	9b03      	ldr	r3, [sp, #12]
 801283e:	3307      	adds	r3, #7
 8012840:	f023 0307 	bic.w	r3, r3, #7
 8012844:	3308      	adds	r3, #8
 8012846:	9303      	str	r3, [sp, #12]
 8012848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801284a:	4433      	add	r3, r6
 801284c:	9309      	str	r3, [sp, #36]	@ 0x24
 801284e:	e76a      	b.n	8012726 <_svfiprintf_r+0x52>
 8012850:	fb0c 3202 	mla	r2, ip, r2, r3
 8012854:	460c      	mov	r4, r1
 8012856:	2001      	movs	r0, #1
 8012858:	e7a8      	b.n	80127ac <_svfiprintf_r+0xd8>
 801285a:	2300      	movs	r3, #0
 801285c:	3401      	adds	r4, #1
 801285e:	9305      	str	r3, [sp, #20]
 8012860:	4619      	mov	r1, r3
 8012862:	f04f 0c0a 	mov.w	ip, #10
 8012866:	4620      	mov	r0, r4
 8012868:	f810 2b01 	ldrb.w	r2, [r0], #1
 801286c:	3a30      	subs	r2, #48	@ 0x30
 801286e:	2a09      	cmp	r2, #9
 8012870:	d903      	bls.n	801287a <_svfiprintf_r+0x1a6>
 8012872:	2b00      	cmp	r3, #0
 8012874:	d0c6      	beq.n	8012804 <_svfiprintf_r+0x130>
 8012876:	9105      	str	r1, [sp, #20]
 8012878:	e7c4      	b.n	8012804 <_svfiprintf_r+0x130>
 801287a:	fb0c 2101 	mla	r1, ip, r1, r2
 801287e:	4604      	mov	r4, r0
 8012880:	2301      	movs	r3, #1
 8012882:	e7f0      	b.n	8012866 <_svfiprintf_r+0x192>
 8012884:	ab03      	add	r3, sp, #12
 8012886:	9300      	str	r3, [sp, #0]
 8012888:	462a      	mov	r2, r5
 801288a:	4b0e      	ldr	r3, [pc, #56]	@ (80128c4 <_svfiprintf_r+0x1f0>)
 801288c:	a904      	add	r1, sp, #16
 801288e:	4638      	mov	r0, r7
 8012890:	f7fd f96a 	bl	800fb68 <_printf_float>
 8012894:	1c42      	adds	r2, r0, #1
 8012896:	4606      	mov	r6, r0
 8012898:	d1d6      	bne.n	8012848 <_svfiprintf_r+0x174>
 801289a:	89ab      	ldrh	r3, [r5, #12]
 801289c:	065b      	lsls	r3, r3, #25
 801289e:	f53f af2d 	bmi.w	80126fc <_svfiprintf_r+0x28>
 80128a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128a4:	e72c      	b.n	8012700 <_svfiprintf_r+0x2c>
 80128a6:	ab03      	add	r3, sp, #12
 80128a8:	9300      	str	r3, [sp, #0]
 80128aa:	462a      	mov	r2, r5
 80128ac:	4b05      	ldr	r3, [pc, #20]	@ (80128c4 <_svfiprintf_r+0x1f0>)
 80128ae:	a904      	add	r1, sp, #16
 80128b0:	4638      	mov	r0, r7
 80128b2:	f7fd fbf1 	bl	8010098 <_printf_i>
 80128b6:	e7ed      	b.n	8012894 <_svfiprintf_r+0x1c0>
 80128b8:	08014229 	.word	0x08014229
 80128bc:	08014233 	.word	0x08014233
 80128c0:	0800fb69 	.word	0x0800fb69
 80128c4:	0801261f 	.word	0x0801261f
 80128c8:	0801422f 	.word	0x0801422f

080128cc <__sflush_r>:
 80128cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80128d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128d4:	0716      	lsls	r6, r2, #28
 80128d6:	4605      	mov	r5, r0
 80128d8:	460c      	mov	r4, r1
 80128da:	d454      	bmi.n	8012986 <__sflush_r+0xba>
 80128dc:	684b      	ldr	r3, [r1, #4]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	dc02      	bgt.n	80128e8 <__sflush_r+0x1c>
 80128e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	dd48      	ble.n	801297a <__sflush_r+0xae>
 80128e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80128ea:	2e00      	cmp	r6, #0
 80128ec:	d045      	beq.n	801297a <__sflush_r+0xae>
 80128ee:	2300      	movs	r3, #0
 80128f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80128f4:	682f      	ldr	r7, [r5, #0]
 80128f6:	6a21      	ldr	r1, [r4, #32]
 80128f8:	602b      	str	r3, [r5, #0]
 80128fa:	d030      	beq.n	801295e <__sflush_r+0x92>
 80128fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80128fe:	89a3      	ldrh	r3, [r4, #12]
 8012900:	0759      	lsls	r1, r3, #29
 8012902:	d505      	bpl.n	8012910 <__sflush_r+0x44>
 8012904:	6863      	ldr	r3, [r4, #4]
 8012906:	1ad2      	subs	r2, r2, r3
 8012908:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801290a:	b10b      	cbz	r3, 8012910 <__sflush_r+0x44>
 801290c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801290e:	1ad2      	subs	r2, r2, r3
 8012910:	2300      	movs	r3, #0
 8012912:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012914:	6a21      	ldr	r1, [r4, #32]
 8012916:	4628      	mov	r0, r5
 8012918:	47b0      	blx	r6
 801291a:	1c43      	adds	r3, r0, #1
 801291c:	89a3      	ldrh	r3, [r4, #12]
 801291e:	d106      	bne.n	801292e <__sflush_r+0x62>
 8012920:	6829      	ldr	r1, [r5, #0]
 8012922:	291d      	cmp	r1, #29
 8012924:	d82b      	bhi.n	801297e <__sflush_r+0xb2>
 8012926:	4a2a      	ldr	r2, [pc, #168]	@ (80129d0 <__sflush_r+0x104>)
 8012928:	410a      	asrs	r2, r1
 801292a:	07d6      	lsls	r6, r2, #31
 801292c:	d427      	bmi.n	801297e <__sflush_r+0xb2>
 801292e:	2200      	movs	r2, #0
 8012930:	6062      	str	r2, [r4, #4]
 8012932:	04d9      	lsls	r1, r3, #19
 8012934:	6922      	ldr	r2, [r4, #16]
 8012936:	6022      	str	r2, [r4, #0]
 8012938:	d504      	bpl.n	8012944 <__sflush_r+0x78>
 801293a:	1c42      	adds	r2, r0, #1
 801293c:	d101      	bne.n	8012942 <__sflush_r+0x76>
 801293e:	682b      	ldr	r3, [r5, #0]
 8012940:	b903      	cbnz	r3, 8012944 <__sflush_r+0x78>
 8012942:	6560      	str	r0, [r4, #84]	@ 0x54
 8012944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012946:	602f      	str	r7, [r5, #0]
 8012948:	b1b9      	cbz	r1, 801297a <__sflush_r+0xae>
 801294a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801294e:	4299      	cmp	r1, r3
 8012950:	d002      	beq.n	8012958 <__sflush_r+0x8c>
 8012952:	4628      	mov	r0, r5
 8012954:	f7fe fd58 	bl	8011408 <_free_r>
 8012958:	2300      	movs	r3, #0
 801295a:	6363      	str	r3, [r4, #52]	@ 0x34
 801295c:	e00d      	b.n	801297a <__sflush_r+0xae>
 801295e:	2301      	movs	r3, #1
 8012960:	4628      	mov	r0, r5
 8012962:	47b0      	blx	r6
 8012964:	4602      	mov	r2, r0
 8012966:	1c50      	adds	r0, r2, #1
 8012968:	d1c9      	bne.n	80128fe <__sflush_r+0x32>
 801296a:	682b      	ldr	r3, [r5, #0]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d0c6      	beq.n	80128fe <__sflush_r+0x32>
 8012970:	2b1d      	cmp	r3, #29
 8012972:	d001      	beq.n	8012978 <__sflush_r+0xac>
 8012974:	2b16      	cmp	r3, #22
 8012976:	d11e      	bne.n	80129b6 <__sflush_r+0xea>
 8012978:	602f      	str	r7, [r5, #0]
 801297a:	2000      	movs	r0, #0
 801297c:	e022      	b.n	80129c4 <__sflush_r+0xf8>
 801297e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012982:	b21b      	sxth	r3, r3
 8012984:	e01b      	b.n	80129be <__sflush_r+0xf2>
 8012986:	690f      	ldr	r7, [r1, #16]
 8012988:	2f00      	cmp	r7, #0
 801298a:	d0f6      	beq.n	801297a <__sflush_r+0xae>
 801298c:	0793      	lsls	r3, r2, #30
 801298e:	680e      	ldr	r6, [r1, #0]
 8012990:	bf08      	it	eq
 8012992:	694b      	ldreq	r3, [r1, #20]
 8012994:	600f      	str	r7, [r1, #0]
 8012996:	bf18      	it	ne
 8012998:	2300      	movne	r3, #0
 801299a:	eba6 0807 	sub.w	r8, r6, r7
 801299e:	608b      	str	r3, [r1, #8]
 80129a0:	f1b8 0f00 	cmp.w	r8, #0
 80129a4:	dde9      	ble.n	801297a <__sflush_r+0xae>
 80129a6:	6a21      	ldr	r1, [r4, #32]
 80129a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80129aa:	4643      	mov	r3, r8
 80129ac:	463a      	mov	r2, r7
 80129ae:	4628      	mov	r0, r5
 80129b0:	47b0      	blx	r6
 80129b2:	2800      	cmp	r0, #0
 80129b4:	dc08      	bgt.n	80129c8 <__sflush_r+0xfc>
 80129b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129be:	81a3      	strh	r3, [r4, #12]
 80129c0:	f04f 30ff 	mov.w	r0, #4294967295
 80129c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129c8:	4407      	add	r7, r0
 80129ca:	eba8 0800 	sub.w	r8, r8, r0
 80129ce:	e7e7      	b.n	80129a0 <__sflush_r+0xd4>
 80129d0:	dfbffffe 	.word	0xdfbffffe

080129d4 <_fflush_r>:
 80129d4:	b538      	push	{r3, r4, r5, lr}
 80129d6:	690b      	ldr	r3, [r1, #16]
 80129d8:	4605      	mov	r5, r0
 80129da:	460c      	mov	r4, r1
 80129dc:	b913      	cbnz	r3, 80129e4 <_fflush_r+0x10>
 80129de:	2500      	movs	r5, #0
 80129e0:	4628      	mov	r0, r5
 80129e2:	bd38      	pop	{r3, r4, r5, pc}
 80129e4:	b118      	cbz	r0, 80129ee <_fflush_r+0x1a>
 80129e6:	6a03      	ldr	r3, [r0, #32]
 80129e8:	b90b      	cbnz	r3, 80129ee <_fflush_r+0x1a>
 80129ea:	f7fd fd01 	bl	80103f0 <__sinit>
 80129ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d0f3      	beq.n	80129de <_fflush_r+0xa>
 80129f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80129f8:	07d0      	lsls	r0, r2, #31
 80129fa:	d404      	bmi.n	8012a06 <_fflush_r+0x32>
 80129fc:	0599      	lsls	r1, r3, #22
 80129fe:	d402      	bmi.n	8012a06 <_fflush_r+0x32>
 8012a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a02:	f7fd fe7a 	bl	80106fa <__retarget_lock_acquire_recursive>
 8012a06:	4628      	mov	r0, r5
 8012a08:	4621      	mov	r1, r4
 8012a0a:	f7ff ff5f 	bl	80128cc <__sflush_r>
 8012a0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a10:	07da      	lsls	r2, r3, #31
 8012a12:	4605      	mov	r5, r0
 8012a14:	d4e4      	bmi.n	80129e0 <_fflush_r+0xc>
 8012a16:	89a3      	ldrh	r3, [r4, #12]
 8012a18:	059b      	lsls	r3, r3, #22
 8012a1a:	d4e1      	bmi.n	80129e0 <_fflush_r+0xc>
 8012a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a1e:	f7fd fe6d 	bl	80106fc <__retarget_lock_release_recursive>
 8012a22:	e7dd      	b.n	80129e0 <_fflush_r+0xc>

08012a24 <fiprintf>:
 8012a24:	b40e      	push	{r1, r2, r3}
 8012a26:	b503      	push	{r0, r1, lr}
 8012a28:	4601      	mov	r1, r0
 8012a2a:	ab03      	add	r3, sp, #12
 8012a2c:	4805      	ldr	r0, [pc, #20]	@ (8012a44 <fiprintf+0x20>)
 8012a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a32:	6800      	ldr	r0, [r0, #0]
 8012a34:	9301      	str	r3, [sp, #4]
 8012a36:	f000 f8a3 	bl	8012b80 <_vfiprintf_r>
 8012a3a:	b002      	add	sp, #8
 8012a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a40:	b003      	add	sp, #12
 8012a42:	4770      	bx	lr
 8012a44:	200001a0 	.word	0x200001a0

08012a48 <memmove>:
 8012a48:	4288      	cmp	r0, r1
 8012a4a:	b510      	push	{r4, lr}
 8012a4c:	eb01 0402 	add.w	r4, r1, r2
 8012a50:	d902      	bls.n	8012a58 <memmove+0x10>
 8012a52:	4284      	cmp	r4, r0
 8012a54:	4623      	mov	r3, r4
 8012a56:	d807      	bhi.n	8012a68 <memmove+0x20>
 8012a58:	1e43      	subs	r3, r0, #1
 8012a5a:	42a1      	cmp	r1, r4
 8012a5c:	d008      	beq.n	8012a70 <memmove+0x28>
 8012a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a66:	e7f8      	b.n	8012a5a <memmove+0x12>
 8012a68:	4402      	add	r2, r0
 8012a6a:	4601      	mov	r1, r0
 8012a6c:	428a      	cmp	r2, r1
 8012a6e:	d100      	bne.n	8012a72 <memmove+0x2a>
 8012a70:	bd10      	pop	{r4, pc}
 8012a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a7a:	e7f7      	b.n	8012a6c <memmove+0x24>

08012a7c <_sbrk_r>:
 8012a7c:	b538      	push	{r3, r4, r5, lr}
 8012a7e:	4d06      	ldr	r5, [pc, #24]	@ (8012a98 <_sbrk_r+0x1c>)
 8012a80:	2300      	movs	r3, #0
 8012a82:	4604      	mov	r4, r0
 8012a84:	4608      	mov	r0, r1
 8012a86:	602b      	str	r3, [r5, #0]
 8012a88:	f7f0 feb6 	bl	80037f8 <_sbrk>
 8012a8c:	1c43      	adds	r3, r0, #1
 8012a8e:	d102      	bne.n	8012a96 <_sbrk_r+0x1a>
 8012a90:	682b      	ldr	r3, [r5, #0]
 8012a92:	b103      	cbz	r3, 8012a96 <_sbrk_r+0x1a>
 8012a94:	6023      	str	r3, [r4, #0]
 8012a96:	bd38      	pop	{r3, r4, r5, pc}
 8012a98:	20006c1c 	.word	0x20006c1c

08012a9c <abort>:
 8012a9c:	b508      	push	{r3, lr}
 8012a9e:	2006      	movs	r0, #6
 8012aa0:	f000 fa42 	bl	8012f28 <raise>
 8012aa4:	2001      	movs	r0, #1
 8012aa6:	f7f0 fe2f 	bl	8003708 <_exit>

08012aaa <_calloc_r>:
 8012aaa:	b570      	push	{r4, r5, r6, lr}
 8012aac:	fba1 5402 	umull	r5, r4, r1, r2
 8012ab0:	b93c      	cbnz	r4, 8012ac2 <_calloc_r+0x18>
 8012ab2:	4629      	mov	r1, r5
 8012ab4:	f7ff f856 	bl	8011b64 <_malloc_r>
 8012ab8:	4606      	mov	r6, r0
 8012aba:	b928      	cbnz	r0, 8012ac8 <_calloc_r+0x1e>
 8012abc:	2600      	movs	r6, #0
 8012abe:	4630      	mov	r0, r6
 8012ac0:	bd70      	pop	{r4, r5, r6, pc}
 8012ac2:	220c      	movs	r2, #12
 8012ac4:	6002      	str	r2, [r0, #0]
 8012ac6:	e7f9      	b.n	8012abc <_calloc_r+0x12>
 8012ac8:	462a      	mov	r2, r5
 8012aca:	4621      	mov	r1, r4
 8012acc:	f7fd fd29 	bl	8010522 <memset>
 8012ad0:	e7f5      	b.n	8012abe <_calloc_r+0x14>

08012ad2 <_realloc_r>:
 8012ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ad6:	4680      	mov	r8, r0
 8012ad8:	4615      	mov	r5, r2
 8012ada:	460c      	mov	r4, r1
 8012adc:	b921      	cbnz	r1, 8012ae8 <_realloc_r+0x16>
 8012ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ae2:	4611      	mov	r1, r2
 8012ae4:	f7ff b83e 	b.w	8011b64 <_malloc_r>
 8012ae8:	b92a      	cbnz	r2, 8012af6 <_realloc_r+0x24>
 8012aea:	f7fe fc8d 	bl	8011408 <_free_r>
 8012aee:	2400      	movs	r4, #0
 8012af0:	4620      	mov	r0, r4
 8012af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012af6:	f000 fa33 	bl	8012f60 <_malloc_usable_size_r>
 8012afa:	4285      	cmp	r5, r0
 8012afc:	4606      	mov	r6, r0
 8012afe:	d802      	bhi.n	8012b06 <_realloc_r+0x34>
 8012b00:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012b04:	d8f4      	bhi.n	8012af0 <_realloc_r+0x1e>
 8012b06:	4629      	mov	r1, r5
 8012b08:	4640      	mov	r0, r8
 8012b0a:	f7ff f82b 	bl	8011b64 <_malloc_r>
 8012b0e:	4607      	mov	r7, r0
 8012b10:	2800      	cmp	r0, #0
 8012b12:	d0ec      	beq.n	8012aee <_realloc_r+0x1c>
 8012b14:	42b5      	cmp	r5, r6
 8012b16:	462a      	mov	r2, r5
 8012b18:	4621      	mov	r1, r4
 8012b1a:	bf28      	it	cs
 8012b1c:	4632      	movcs	r2, r6
 8012b1e:	f7fd fdee 	bl	80106fe <memcpy>
 8012b22:	4621      	mov	r1, r4
 8012b24:	4640      	mov	r0, r8
 8012b26:	f7fe fc6f 	bl	8011408 <_free_r>
 8012b2a:	463c      	mov	r4, r7
 8012b2c:	e7e0      	b.n	8012af0 <_realloc_r+0x1e>

08012b2e <__sfputc_r>:
 8012b2e:	6893      	ldr	r3, [r2, #8]
 8012b30:	3b01      	subs	r3, #1
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	b410      	push	{r4}
 8012b36:	6093      	str	r3, [r2, #8]
 8012b38:	da08      	bge.n	8012b4c <__sfputc_r+0x1e>
 8012b3a:	6994      	ldr	r4, [r2, #24]
 8012b3c:	42a3      	cmp	r3, r4
 8012b3e:	db01      	blt.n	8012b44 <__sfputc_r+0x16>
 8012b40:	290a      	cmp	r1, #10
 8012b42:	d103      	bne.n	8012b4c <__sfputc_r+0x1e>
 8012b44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b48:	f000 b932 	b.w	8012db0 <__swbuf_r>
 8012b4c:	6813      	ldr	r3, [r2, #0]
 8012b4e:	1c58      	adds	r0, r3, #1
 8012b50:	6010      	str	r0, [r2, #0]
 8012b52:	7019      	strb	r1, [r3, #0]
 8012b54:	4608      	mov	r0, r1
 8012b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b5a:	4770      	bx	lr

08012b5c <__sfputs_r>:
 8012b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b5e:	4606      	mov	r6, r0
 8012b60:	460f      	mov	r7, r1
 8012b62:	4614      	mov	r4, r2
 8012b64:	18d5      	adds	r5, r2, r3
 8012b66:	42ac      	cmp	r4, r5
 8012b68:	d101      	bne.n	8012b6e <__sfputs_r+0x12>
 8012b6a:	2000      	movs	r0, #0
 8012b6c:	e007      	b.n	8012b7e <__sfputs_r+0x22>
 8012b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b72:	463a      	mov	r2, r7
 8012b74:	4630      	mov	r0, r6
 8012b76:	f7ff ffda 	bl	8012b2e <__sfputc_r>
 8012b7a:	1c43      	adds	r3, r0, #1
 8012b7c:	d1f3      	bne.n	8012b66 <__sfputs_r+0xa>
 8012b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b80 <_vfiprintf_r>:
 8012b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b84:	460d      	mov	r5, r1
 8012b86:	b09d      	sub	sp, #116	@ 0x74
 8012b88:	4614      	mov	r4, r2
 8012b8a:	4698      	mov	r8, r3
 8012b8c:	4606      	mov	r6, r0
 8012b8e:	b118      	cbz	r0, 8012b98 <_vfiprintf_r+0x18>
 8012b90:	6a03      	ldr	r3, [r0, #32]
 8012b92:	b90b      	cbnz	r3, 8012b98 <_vfiprintf_r+0x18>
 8012b94:	f7fd fc2c 	bl	80103f0 <__sinit>
 8012b98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b9a:	07d9      	lsls	r1, r3, #31
 8012b9c:	d405      	bmi.n	8012baa <_vfiprintf_r+0x2a>
 8012b9e:	89ab      	ldrh	r3, [r5, #12]
 8012ba0:	059a      	lsls	r2, r3, #22
 8012ba2:	d402      	bmi.n	8012baa <_vfiprintf_r+0x2a>
 8012ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ba6:	f7fd fda8 	bl	80106fa <__retarget_lock_acquire_recursive>
 8012baa:	89ab      	ldrh	r3, [r5, #12]
 8012bac:	071b      	lsls	r3, r3, #28
 8012bae:	d501      	bpl.n	8012bb4 <_vfiprintf_r+0x34>
 8012bb0:	692b      	ldr	r3, [r5, #16]
 8012bb2:	b99b      	cbnz	r3, 8012bdc <_vfiprintf_r+0x5c>
 8012bb4:	4629      	mov	r1, r5
 8012bb6:	4630      	mov	r0, r6
 8012bb8:	f000 f938 	bl	8012e2c <__swsetup_r>
 8012bbc:	b170      	cbz	r0, 8012bdc <_vfiprintf_r+0x5c>
 8012bbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012bc0:	07dc      	lsls	r4, r3, #31
 8012bc2:	d504      	bpl.n	8012bce <_vfiprintf_r+0x4e>
 8012bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc8:	b01d      	add	sp, #116	@ 0x74
 8012bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bce:	89ab      	ldrh	r3, [r5, #12]
 8012bd0:	0598      	lsls	r0, r3, #22
 8012bd2:	d4f7      	bmi.n	8012bc4 <_vfiprintf_r+0x44>
 8012bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012bd6:	f7fd fd91 	bl	80106fc <__retarget_lock_release_recursive>
 8012bda:	e7f3      	b.n	8012bc4 <_vfiprintf_r+0x44>
 8012bdc:	2300      	movs	r3, #0
 8012bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8012be0:	2320      	movs	r3, #32
 8012be2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012be6:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bea:	2330      	movs	r3, #48	@ 0x30
 8012bec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012d9c <_vfiprintf_r+0x21c>
 8012bf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012bf4:	f04f 0901 	mov.w	r9, #1
 8012bf8:	4623      	mov	r3, r4
 8012bfa:	469a      	mov	sl, r3
 8012bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c00:	b10a      	cbz	r2, 8012c06 <_vfiprintf_r+0x86>
 8012c02:	2a25      	cmp	r2, #37	@ 0x25
 8012c04:	d1f9      	bne.n	8012bfa <_vfiprintf_r+0x7a>
 8012c06:	ebba 0b04 	subs.w	fp, sl, r4
 8012c0a:	d00b      	beq.n	8012c24 <_vfiprintf_r+0xa4>
 8012c0c:	465b      	mov	r3, fp
 8012c0e:	4622      	mov	r2, r4
 8012c10:	4629      	mov	r1, r5
 8012c12:	4630      	mov	r0, r6
 8012c14:	f7ff ffa2 	bl	8012b5c <__sfputs_r>
 8012c18:	3001      	adds	r0, #1
 8012c1a:	f000 80a7 	beq.w	8012d6c <_vfiprintf_r+0x1ec>
 8012c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c20:	445a      	add	r2, fp
 8012c22:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c24:	f89a 3000 	ldrb.w	r3, [sl]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	f000 809f 	beq.w	8012d6c <_vfiprintf_r+0x1ec>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	f04f 32ff 	mov.w	r2, #4294967295
 8012c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c38:	f10a 0a01 	add.w	sl, sl, #1
 8012c3c:	9304      	str	r3, [sp, #16]
 8012c3e:	9307      	str	r3, [sp, #28]
 8012c40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012c44:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c46:	4654      	mov	r4, sl
 8012c48:	2205      	movs	r2, #5
 8012c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c4e:	4853      	ldr	r0, [pc, #332]	@ (8012d9c <_vfiprintf_r+0x21c>)
 8012c50:	f7ed faf6 	bl	8000240 <memchr>
 8012c54:	9a04      	ldr	r2, [sp, #16]
 8012c56:	b9d8      	cbnz	r0, 8012c90 <_vfiprintf_r+0x110>
 8012c58:	06d1      	lsls	r1, r2, #27
 8012c5a:	bf44      	itt	mi
 8012c5c:	2320      	movmi	r3, #32
 8012c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c62:	0713      	lsls	r3, r2, #28
 8012c64:	bf44      	itt	mi
 8012c66:	232b      	movmi	r3, #43	@ 0x2b
 8012c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8012c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c72:	d015      	beq.n	8012ca0 <_vfiprintf_r+0x120>
 8012c74:	9a07      	ldr	r2, [sp, #28]
 8012c76:	4654      	mov	r4, sl
 8012c78:	2000      	movs	r0, #0
 8012c7a:	f04f 0c0a 	mov.w	ip, #10
 8012c7e:	4621      	mov	r1, r4
 8012c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c84:	3b30      	subs	r3, #48	@ 0x30
 8012c86:	2b09      	cmp	r3, #9
 8012c88:	d94b      	bls.n	8012d22 <_vfiprintf_r+0x1a2>
 8012c8a:	b1b0      	cbz	r0, 8012cba <_vfiprintf_r+0x13a>
 8012c8c:	9207      	str	r2, [sp, #28]
 8012c8e:	e014      	b.n	8012cba <_vfiprintf_r+0x13a>
 8012c90:	eba0 0308 	sub.w	r3, r0, r8
 8012c94:	fa09 f303 	lsl.w	r3, r9, r3
 8012c98:	4313      	orrs	r3, r2
 8012c9a:	9304      	str	r3, [sp, #16]
 8012c9c:	46a2      	mov	sl, r4
 8012c9e:	e7d2      	b.n	8012c46 <_vfiprintf_r+0xc6>
 8012ca0:	9b03      	ldr	r3, [sp, #12]
 8012ca2:	1d19      	adds	r1, r3, #4
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	9103      	str	r1, [sp, #12]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	bfbb      	ittet	lt
 8012cac:	425b      	neglt	r3, r3
 8012cae:	f042 0202 	orrlt.w	r2, r2, #2
 8012cb2:	9307      	strge	r3, [sp, #28]
 8012cb4:	9307      	strlt	r3, [sp, #28]
 8012cb6:	bfb8      	it	lt
 8012cb8:	9204      	strlt	r2, [sp, #16]
 8012cba:	7823      	ldrb	r3, [r4, #0]
 8012cbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8012cbe:	d10a      	bne.n	8012cd6 <_vfiprintf_r+0x156>
 8012cc0:	7863      	ldrb	r3, [r4, #1]
 8012cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cc4:	d132      	bne.n	8012d2c <_vfiprintf_r+0x1ac>
 8012cc6:	9b03      	ldr	r3, [sp, #12]
 8012cc8:	1d1a      	adds	r2, r3, #4
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	9203      	str	r2, [sp, #12]
 8012cce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012cd2:	3402      	adds	r4, #2
 8012cd4:	9305      	str	r3, [sp, #20]
 8012cd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012dac <_vfiprintf_r+0x22c>
 8012cda:	7821      	ldrb	r1, [r4, #0]
 8012cdc:	2203      	movs	r2, #3
 8012cde:	4650      	mov	r0, sl
 8012ce0:	f7ed faae 	bl	8000240 <memchr>
 8012ce4:	b138      	cbz	r0, 8012cf6 <_vfiprintf_r+0x176>
 8012ce6:	9b04      	ldr	r3, [sp, #16]
 8012ce8:	eba0 000a 	sub.w	r0, r0, sl
 8012cec:	2240      	movs	r2, #64	@ 0x40
 8012cee:	4082      	lsls	r2, r0
 8012cf0:	4313      	orrs	r3, r2
 8012cf2:	3401      	adds	r4, #1
 8012cf4:	9304      	str	r3, [sp, #16]
 8012cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cfa:	4829      	ldr	r0, [pc, #164]	@ (8012da0 <_vfiprintf_r+0x220>)
 8012cfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d00:	2206      	movs	r2, #6
 8012d02:	f7ed fa9d 	bl	8000240 <memchr>
 8012d06:	2800      	cmp	r0, #0
 8012d08:	d03f      	beq.n	8012d8a <_vfiprintf_r+0x20a>
 8012d0a:	4b26      	ldr	r3, [pc, #152]	@ (8012da4 <_vfiprintf_r+0x224>)
 8012d0c:	bb1b      	cbnz	r3, 8012d56 <_vfiprintf_r+0x1d6>
 8012d0e:	9b03      	ldr	r3, [sp, #12]
 8012d10:	3307      	adds	r3, #7
 8012d12:	f023 0307 	bic.w	r3, r3, #7
 8012d16:	3308      	adds	r3, #8
 8012d18:	9303      	str	r3, [sp, #12]
 8012d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d1c:	443b      	add	r3, r7
 8012d1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d20:	e76a      	b.n	8012bf8 <_vfiprintf_r+0x78>
 8012d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d26:	460c      	mov	r4, r1
 8012d28:	2001      	movs	r0, #1
 8012d2a:	e7a8      	b.n	8012c7e <_vfiprintf_r+0xfe>
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	3401      	adds	r4, #1
 8012d30:	9305      	str	r3, [sp, #20]
 8012d32:	4619      	mov	r1, r3
 8012d34:	f04f 0c0a 	mov.w	ip, #10
 8012d38:	4620      	mov	r0, r4
 8012d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d3e:	3a30      	subs	r2, #48	@ 0x30
 8012d40:	2a09      	cmp	r2, #9
 8012d42:	d903      	bls.n	8012d4c <_vfiprintf_r+0x1cc>
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d0c6      	beq.n	8012cd6 <_vfiprintf_r+0x156>
 8012d48:	9105      	str	r1, [sp, #20]
 8012d4a:	e7c4      	b.n	8012cd6 <_vfiprintf_r+0x156>
 8012d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d50:	4604      	mov	r4, r0
 8012d52:	2301      	movs	r3, #1
 8012d54:	e7f0      	b.n	8012d38 <_vfiprintf_r+0x1b8>
 8012d56:	ab03      	add	r3, sp, #12
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	462a      	mov	r2, r5
 8012d5c:	4b12      	ldr	r3, [pc, #72]	@ (8012da8 <_vfiprintf_r+0x228>)
 8012d5e:	a904      	add	r1, sp, #16
 8012d60:	4630      	mov	r0, r6
 8012d62:	f7fc ff01 	bl	800fb68 <_printf_float>
 8012d66:	4607      	mov	r7, r0
 8012d68:	1c78      	adds	r0, r7, #1
 8012d6a:	d1d6      	bne.n	8012d1a <_vfiprintf_r+0x19a>
 8012d6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d6e:	07d9      	lsls	r1, r3, #31
 8012d70:	d405      	bmi.n	8012d7e <_vfiprintf_r+0x1fe>
 8012d72:	89ab      	ldrh	r3, [r5, #12]
 8012d74:	059a      	lsls	r2, r3, #22
 8012d76:	d402      	bmi.n	8012d7e <_vfiprintf_r+0x1fe>
 8012d78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d7a:	f7fd fcbf 	bl	80106fc <__retarget_lock_release_recursive>
 8012d7e:	89ab      	ldrh	r3, [r5, #12]
 8012d80:	065b      	lsls	r3, r3, #25
 8012d82:	f53f af1f 	bmi.w	8012bc4 <_vfiprintf_r+0x44>
 8012d86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d88:	e71e      	b.n	8012bc8 <_vfiprintf_r+0x48>
 8012d8a:	ab03      	add	r3, sp, #12
 8012d8c:	9300      	str	r3, [sp, #0]
 8012d8e:	462a      	mov	r2, r5
 8012d90:	4b05      	ldr	r3, [pc, #20]	@ (8012da8 <_vfiprintf_r+0x228>)
 8012d92:	a904      	add	r1, sp, #16
 8012d94:	4630      	mov	r0, r6
 8012d96:	f7fd f97f 	bl	8010098 <_printf_i>
 8012d9a:	e7e4      	b.n	8012d66 <_vfiprintf_r+0x1e6>
 8012d9c:	08014229 	.word	0x08014229
 8012da0:	08014233 	.word	0x08014233
 8012da4:	0800fb69 	.word	0x0800fb69
 8012da8:	08012b5d 	.word	0x08012b5d
 8012dac:	0801422f 	.word	0x0801422f

08012db0 <__swbuf_r>:
 8012db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012db2:	460e      	mov	r6, r1
 8012db4:	4614      	mov	r4, r2
 8012db6:	4605      	mov	r5, r0
 8012db8:	b118      	cbz	r0, 8012dc2 <__swbuf_r+0x12>
 8012dba:	6a03      	ldr	r3, [r0, #32]
 8012dbc:	b90b      	cbnz	r3, 8012dc2 <__swbuf_r+0x12>
 8012dbe:	f7fd fb17 	bl	80103f0 <__sinit>
 8012dc2:	69a3      	ldr	r3, [r4, #24]
 8012dc4:	60a3      	str	r3, [r4, #8]
 8012dc6:	89a3      	ldrh	r3, [r4, #12]
 8012dc8:	071a      	lsls	r2, r3, #28
 8012dca:	d501      	bpl.n	8012dd0 <__swbuf_r+0x20>
 8012dcc:	6923      	ldr	r3, [r4, #16]
 8012dce:	b943      	cbnz	r3, 8012de2 <__swbuf_r+0x32>
 8012dd0:	4621      	mov	r1, r4
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	f000 f82a 	bl	8012e2c <__swsetup_r>
 8012dd8:	b118      	cbz	r0, 8012de2 <__swbuf_r+0x32>
 8012dda:	f04f 37ff 	mov.w	r7, #4294967295
 8012dde:	4638      	mov	r0, r7
 8012de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012de2:	6823      	ldr	r3, [r4, #0]
 8012de4:	6922      	ldr	r2, [r4, #16]
 8012de6:	1a98      	subs	r0, r3, r2
 8012de8:	6963      	ldr	r3, [r4, #20]
 8012dea:	b2f6      	uxtb	r6, r6
 8012dec:	4283      	cmp	r3, r0
 8012dee:	4637      	mov	r7, r6
 8012df0:	dc05      	bgt.n	8012dfe <__swbuf_r+0x4e>
 8012df2:	4621      	mov	r1, r4
 8012df4:	4628      	mov	r0, r5
 8012df6:	f7ff fded 	bl	80129d4 <_fflush_r>
 8012dfa:	2800      	cmp	r0, #0
 8012dfc:	d1ed      	bne.n	8012dda <__swbuf_r+0x2a>
 8012dfe:	68a3      	ldr	r3, [r4, #8]
 8012e00:	3b01      	subs	r3, #1
 8012e02:	60a3      	str	r3, [r4, #8]
 8012e04:	6823      	ldr	r3, [r4, #0]
 8012e06:	1c5a      	adds	r2, r3, #1
 8012e08:	6022      	str	r2, [r4, #0]
 8012e0a:	701e      	strb	r6, [r3, #0]
 8012e0c:	6962      	ldr	r2, [r4, #20]
 8012e0e:	1c43      	adds	r3, r0, #1
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d004      	beq.n	8012e1e <__swbuf_r+0x6e>
 8012e14:	89a3      	ldrh	r3, [r4, #12]
 8012e16:	07db      	lsls	r3, r3, #31
 8012e18:	d5e1      	bpl.n	8012dde <__swbuf_r+0x2e>
 8012e1a:	2e0a      	cmp	r6, #10
 8012e1c:	d1df      	bne.n	8012dde <__swbuf_r+0x2e>
 8012e1e:	4621      	mov	r1, r4
 8012e20:	4628      	mov	r0, r5
 8012e22:	f7ff fdd7 	bl	80129d4 <_fflush_r>
 8012e26:	2800      	cmp	r0, #0
 8012e28:	d0d9      	beq.n	8012dde <__swbuf_r+0x2e>
 8012e2a:	e7d6      	b.n	8012dda <__swbuf_r+0x2a>

08012e2c <__swsetup_r>:
 8012e2c:	b538      	push	{r3, r4, r5, lr}
 8012e2e:	4b29      	ldr	r3, [pc, #164]	@ (8012ed4 <__swsetup_r+0xa8>)
 8012e30:	4605      	mov	r5, r0
 8012e32:	6818      	ldr	r0, [r3, #0]
 8012e34:	460c      	mov	r4, r1
 8012e36:	b118      	cbz	r0, 8012e40 <__swsetup_r+0x14>
 8012e38:	6a03      	ldr	r3, [r0, #32]
 8012e3a:	b90b      	cbnz	r3, 8012e40 <__swsetup_r+0x14>
 8012e3c:	f7fd fad8 	bl	80103f0 <__sinit>
 8012e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e44:	0719      	lsls	r1, r3, #28
 8012e46:	d422      	bmi.n	8012e8e <__swsetup_r+0x62>
 8012e48:	06da      	lsls	r2, r3, #27
 8012e4a:	d407      	bmi.n	8012e5c <__swsetup_r+0x30>
 8012e4c:	2209      	movs	r2, #9
 8012e4e:	602a      	str	r2, [r5, #0]
 8012e50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e54:	81a3      	strh	r3, [r4, #12]
 8012e56:	f04f 30ff 	mov.w	r0, #4294967295
 8012e5a:	e033      	b.n	8012ec4 <__swsetup_r+0x98>
 8012e5c:	0758      	lsls	r0, r3, #29
 8012e5e:	d512      	bpl.n	8012e86 <__swsetup_r+0x5a>
 8012e60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e62:	b141      	cbz	r1, 8012e76 <__swsetup_r+0x4a>
 8012e64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e68:	4299      	cmp	r1, r3
 8012e6a:	d002      	beq.n	8012e72 <__swsetup_r+0x46>
 8012e6c:	4628      	mov	r0, r5
 8012e6e:	f7fe facb 	bl	8011408 <_free_r>
 8012e72:	2300      	movs	r3, #0
 8012e74:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e76:	89a3      	ldrh	r3, [r4, #12]
 8012e78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012e7c:	81a3      	strh	r3, [r4, #12]
 8012e7e:	2300      	movs	r3, #0
 8012e80:	6063      	str	r3, [r4, #4]
 8012e82:	6923      	ldr	r3, [r4, #16]
 8012e84:	6023      	str	r3, [r4, #0]
 8012e86:	89a3      	ldrh	r3, [r4, #12]
 8012e88:	f043 0308 	orr.w	r3, r3, #8
 8012e8c:	81a3      	strh	r3, [r4, #12]
 8012e8e:	6923      	ldr	r3, [r4, #16]
 8012e90:	b94b      	cbnz	r3, 8012ea6 <__swsetup_r+0x7a>
 8012e92:	89a3      	ldrh	r3, [r4, #12]
 8012e94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e9c:	d003      	beq.n	8012ea6 <__swsetup_r+0x7a>
 8012e9e:	4621      	mov	r1, r4
 8012ea0:	4628      	mov	r0, r5
 8012ea2:	f000 f88b 	bl	8012fbc <__smakebuf_r>
 8012ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012eaa:	f013 0201 	ands.w	r2, r3, #1
 8012eae:	d00a      	beq.n	8012ec6 <__swsetup_r+0x9a>
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	60a2      	str	r2, [r4, #8]
 8012eb4:	6962      	ldr	r2, [r4, #20]
 8012eb6:	4252      	negs	r2, r2
 8012eb8:	61a2      	str	r2, [r4, #24]
 8012eba:	6922      	ldr	r2, [r4, #16]
 8012ebc:	b942      	cbnz	r2, 8012ed0 <__swsetup_r+0xa4>
 8012ebe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012ec2:	d1c5      	bne.n	8012e50 <__swsetup_r+0x24>
 8012ec4:	bd38      	pop	{r3, r4, r5, pc}
 8012ec6:	0799      	lsls	r1, r3, #30
 8012ec8:	bf58      	it	pl
 8012eca:	6962      	ldrpl	r2, [r4, #20]
 8012ecc:	60a2      	str	r2, [r4, #8]
 8012ece:	e7f4      	b.n	8012eba <__swsetup_r+0x8e>
 8012ed0:	2000      	movs	r0, #0
 8012ed2:	e7f7      	b.n	8012ec4 <__swsetup_r+0x98>
 8012ed4:	200001a0 	.word	0x200001a0

08012ed8 <_raise_r>:
 8012ed8:	291f      	cmp	r1, #31
 8012eda:	b538      	push	{r3, r4, r5, lr}
 8012edc:	4605      	mov	r5, r0
 8012ede:	460c      	mov	r4, r1
 8012ee0:	d904      	bls.n	8012eec <_raise_r+0x14>
 8012ee2:	2316      	movs	r3, #22
 8012ee4:	6003      	str	r3, [r0, #0]
 8012ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8012eea:	bd38      	pop	{r3, r4, r5, pc}
 8012eec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012eee:	b112      	cbz	r2, 8012ef6 <_raise_r+0x1e>
 8012ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ef4:	b94b      	cbnz	r3, 8012f0a <_raise_r+0x32>
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	f000 f830 	bl	8012f5c <_getpid_r>
 8012efc:	4622      	mov	r2, r4
 8012efe:	4601      	mov	r1, r0
 8012f00:	4628      	mov	r0, r5
 8012f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f06:	f000 b817 	b.w	8012f38 <_kill_r>
 8012f0a:	2b01      	cmp	r3, #1
 8012f0c:	d00a      	beq.n	8012f24 <_raise_r+0x4c>
 8012f0e:	1c59      	adds	r1, r3, #1
 8012f10:	d103      	bne.n	8012f1a <_raise_r+0x42>
 8012f12:	2316      	movs	r3, #22
 8012f14:	6003      	str	r3, [r0, #0]
 8012f16:	2001      	movs	r0, #1
 8012f18:	e7e7      	b.n	8012eea <_raise_r+0x12>
 8012f1a:	2100      	movs	r1, #0
 8012f1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012f20:	4620      	mov	r0, r4
 8012f22:	4798      	blx	r3
 8012f24:	2000      	movs	r0, #0
 8012f26:	e7e0      	b.n	8012eea <_raise_r+0x12>

08012f28 <raise>:
 8012f28:	4b02      	ldr	r3, [pc, #8]	@ (8012f34 <raise+0xc>)
 8012f2a:	4601      	mov	r1, r0
 8012f2c:	6818      	ldr	r0, [r3, #0]
 8012f2e:	f7ff bfd3 	b.w	8012ed8 <_raise_r>
 8012f32:	bf00      	nop
 8012f34:	200001a0 	.word	0x200001a0

08012f38 <_kill_r>:
 8012f38:	b538      	push	{r3, r4, r5, lr}
 8012f3a:	4d07      	ldr	r5, [pc, #28]	@ (8012f58 <_kill_r+0x20>)
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	4604      	mov	r4, r0
 8012f40:	4608      	mov	r0, r1
 8012f42:	4611      	mov	r1, r2
 8012f44:	602b      	str	r3, [r5, #0]
 8012f46:	f7f0 fbcf 	bl	80036e8 <_kill>
 8012f4a:	1c43      	adds	r3, r0, #1
 8012f4c:	d102      	bne.n	8012f54 <_kill_r+0x1c>
 8012f4e:	682b      	ldr	r3, [r5, #0]
 8012f50:	b103      	cbz	r3, 8012f54 <_kill_r+0x1c>
 8012f52:	6023      	str	r3, [r4, #0]
 8012f54:	bd38      	pop	{r3, r4, r5, pc}
 8012f56:	bf00      	nop
 8012f58:	20006c1c 	.word	0x20006c1c

08012f5c <_getpid_r>:
 8012f5c:	f7f0 bbbc 	b.w	80036d8 <_getpid>

08012f60 <_malloc_usable_size_r>:
 8012f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f64:	1f18      	subs	r0, r3, #4
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	bfbc      	itt	lt
 8012f6a:	580b      	ldrlt	r3, [r1, r0]
 8012f6c:	18c0      	addlt	r0, r0, r3
 8012f6e:	4770      	bx	lr

08012f70 <__swhatbuf_r>:
 8012f70:	b570      	push	{r4, r5, r6, lr}
 8012f72:	460c      	mov	r4, r1
 8012f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f78:	2900      	cmp	r1, #0
 8012f7a:	b096      	sub	sp, #88	@ 0x58
 8012f7c:	4615      	mov	r5, r2
 8012f7e:	461e      	mov	r6, r3
 8012f80:	da0d      	bge.n	8012f9e <__swhatbuf_r+0x2e>
 8012f82:	89a3      	ldrh	r3, [r4, #12]
 8012f84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012f88:	f04f 0100 	mov.w	r1, #0
 8012f8c:	bf14      	ite	ne
 8012f8e:	2340      	movne	r3, #64	@ 0x40
 8012f90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012f94:	2000      	movs	r0, #0
 8012f96:	6031      	str	r1, [r6, #0]
 8012f98:	602b      	str	r3, [r5, #0]
 8012f9a:	b016      	add	sp, #88	@ 0x58
 8012f9c:	bd70      	pop	{r4, r5, r6, pc}
 8012f9e:	466a      	mov	r2, sp
 8012fa0:	f000 f848 	bl	8013034 <_fstat_r>
 8012fa4:	2800      	cmp	r0, #0
 8012fa6:	dbec      	blt.n	8012f82 <__swhatbuf_r+0x12>
 8012fa8:	9901      	ldr	r1, [sp, #4]
 8012faa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012fae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012fb2:	4259      	negs	r1, r3
 8012fb4:	4159      	adcs	r1, r3
 8012fb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012fba:	e7eb      	b.n	8012f94 <__swhatbuf_r+0x24>

08012fbc <__smakebuf_r>:
 8012fbc:	898b      	ldrh	r3, [r1, #12]
 8012fbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012fc0:	079d      	lsls	r5, r3, #30
 8012fc2:	4606      	mov	r6, r0
 8012fc4:	460c      	mov	r4, r1
 8012fc6:	d507      	bpl.n	8012fd8 <__smakebuf_r+0x1c>
 8012fc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012fcc:	6023      	str	r3, [r4, #0]
 8012fce:	6123      	str	r3, [r4, #16]
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	6163      	str	r3, [r4, #20]
 8012fd4:	b003      	add	sp, #12
 8012fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fd8:	ab01      	add	r3, sp, #4
 8012fda:	466a      	mov	r2, sp
 8012fdc:	f7ff ffc8 	bl	8012f70 <__swhatbuf_r>
 8012fe0:	9f00      	ldr	r7, [sp, #0]
 8012fe2:	4605      	mov	r5, r0
 8012fe4:	4639      	mov	r1, r7
 8012fe6:	4630      	mov	r0, r6
 8012fe8:	f7fe fdbc 	bl	8011b64 <_malloc_r>
 8012fec:	b948      	cbnz	r0, 8013002 <__smakebuf_r+0x46>
 8012fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ff2:	059a      	lsls	r2, r3, #22
 8012ff4:	d4ee      	bmi.n	8012fd4 <__smakebuf_r+0x18>
 8012ff6:	f023 0303 	bic.w	r3, r3, #3
 8012ffa:	f043 0302 	orr.w	r3, r3, #2
 8012ffe:	81a3      	strh	r3, [r4, #12]
 8013000:	e7e2      	b.n	8012fc8 <__smakebuf_r+0xc>
 8013002:	89a3      	ldrh	r3, [r4, #12]
 8013004:	6020      	str	r0, [r4, #0]
 8013006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801300a:	81a3      	strh	r3, [r4, #12]
 801300c:	9b01      	ldr	r3, [sp, #4]
 801300e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013012:	b15b      	cbz	r3, 801302c <__smakebuf_r+0x70>
 8013014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013018:	4630      	mov	r0, r6
 801301a:	f000 f81d 	bl	8013058 <_isatty_r>
 801301e:	b128      	cbz	r0, 801302c <__smakebuf_r+0x70>
 8013020:	89a3      	ldrh	r3, [r4, #12]
 8013022:	f023 0303 	bic.w	r3, r3, #3
 8013026:	f043 0301 	orr.w	r3, r3, #1
 801302a:	81a3      	strh	r3, [r4, #12]
 801302c:	89a3      	ldrh	r3, [r4, #12]
 801302e:	431d      	orrs	r5, r3
 8013030:	81a5      	strh	r5, [r4, #12]
 8013032:	e7cf      	b.n	8012fd4 <__smakebuf_r+0x18>

08013034 <_fstat_r>:
 8013034:	b538      	push	{r3, r4, r5, lr}
 8013036:	4d07      	ldr	r5, [pc, #28]	@ (8013054 <_fstat_r+0x20>)
 8013038:	2300      	movs	r3, #0
 801303a:	4604      	mov	r4, r0
 801303c:	4608      	mov	r0, r1
 801303e:	4611      	mov	r1, r2
 8013040:	602b      	str	r3, [r5, #0]
 8013042:	f7f0 fbb1 	bl	80037a8 <_fstat>
 8013046:	1c43      	adds	r3, r0, #1
 8013048:	d102      	bne.n	8013050 <_fstat_r+0x1c>
 801304a:	682b      	ldr	r3, [r5, #0]
 801304c:	b103      	cbz	r3, 8013050 <_fstat_r+0x1c>
 801304e:	6023      	str	r3, [r4, #0]
 8013050:	bd38      	pop	{r3, r4, r5, pc}
 8013052:	bf00      	nop
 8013054:	20006c1c 	.word	0x20006c1c

08013058 <_isatty_r>:
 8013058:	b538      	push	{r3, r4, r5, lr}
 801305a:	4d06      	ldr	r5, [pc, #24]	@ (8013074 <_isatty_r+0x1c>)
 801305c:	2300      	movs	r3, #0
 801305e:	4604      	mov	r4, r0
 8013060:	4608      	mov	r0, r1
 8013062:	602b      	str	r3, [r5, #0]
 8013064:	f7f0 fbb0 	bl	80037c8 <_isatty>
 8013068:	1c43      	adds	r3, r0, #1
 801306a:	d102      	bne.n	8013072 <_isatty_r+0x1a>
 801306c:	682b      	ldr	r3, [r5, #0]
 801306e:	b103      	cbz	r3, 8013072 <_isatty_r+0x1a>
 8013070:	6023      	str	r3, [r4, #0]
 8013072:	bd38      	pop	{r3, r4, r5, pc}
 8013074:	20006c1c 	.word	0x20006c1c

08013078 <cosf>:
 8013078:	ee10 3a10 	vmov	r3, s0
 801307c:	b507      	push	{r0, r1, r2, lr}
 801307e:	4a1e      	ldr	r2, [pc, #120]	@ (80130f8 <cosf+0x80>)
 8013080:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013084:	4293      	cmp	r3, r2
 8013086:	d806      	bhi.n	8013096 <cosf+0x1e>
 8013088:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80130fc <cosf+0x84>
 801308c:	b003      	add	sp, #12
 801308e:	f85d eb04 	ldr.w	lr, [sp], #4
 8013092:	f000 b87b 	b.w	801318c <__kernel_cosf>
 8013096:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801309a:	d304      	bcc.n	80130a6 <cosf+0x2e>
 801309c:	ee30 0a40 	vsub.f32	s0, s0, s0
 80130a0:	b003      	add	sp, #12
 80130a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80130a6:	4668      	mov	r0, sp
 80130a8:	f000 f910 	bl	80132cc <__ieee754_rem_pio2f>
 80130ac:	f000 0003 	and.w	r0, r0, #3
 80130b0:	2801      	cmp	r0, #1
 80130b2:	d009      	beq.n	80130c8 <cosf+0x50>
 80130b4:	2802      	cmp	r0, #2
 80130b6:	d010      	beq.n	80130da <cosf+0x62>
 80130b8:	b9b0      	cbnz	r0, 80130e8 <cosf+0x70>
 80130ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80130be:	ed9d 0a00 	vldr	s0, [sp]
 80130c2:	f000 f863 	bl	801318c <__kernel_cosf>
 80130c6:	e7eb      	b.n	80130a0 <cosf+0x28>
 80130c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80130cc:	ed9d 0a00 	vldr	s0, [sp]
 80130d0:	f000 f8b4 	bl	801323c <__kernel_sinf>
 80130d4:	eeb1 0a40 	vneg.f32	s0, s0
 80130d8:	e7e2      	b.n	80130a0 <cosf+0x28>
 80130da:	eddd 0a01 	vldr	s1, [sp, #4]
 80130de:	ed9d 0a00 	vldr	s0, [sp]
 80130e2:	f000 f853 	bl	801318c <__kernel_cosf>
 80130e6:	e7f5      	b.n	80130d4 <cosf+0x5c>
 80130e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80130ec:	ed9d 0a00 	vldr	s0, [sp]
 80130f0:	2001      	movs	r0, #1
 80130f2:	f000 f8a3 	bl	801323c <__kernel_sinf>
 80130f6:	e7d3      	b.n	80130a0 <cosf+0x28>
 80130f8:	3f490fd8 	.word	0x3f490fd8
 80130fc:	00000000 	.word	0x00000000

08013100 <sinf>:
 8013100:	ee10 3a10 	vmov	r3, s0
 8013104:	b507      	push	{r0, r1, r2, lr}
 8013106:	4a1f      	ldr	r2, [pc, #124]	@ (8013184 <sinf+0x84>)
 8013108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801310c:	4293      	cmp	r3, r2
 801310e:	d807      	bhi.n	8013120 <sinf+0x20>
 8013110:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8013188 <sinf+0x88>
 8013114:	2000      	movs	r0, #0
 8013116:	b003      	add	sp, #12
 8013118:	f85d eb04 	ldr.w	lr, [sp], #4
 801311c:	f000 b88e 	b.w	801323c <__kernel_sinf>
 8013120:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013124:	d304      	bcc.n	8013130 <sinf+0x30>
 8013126:	ee30 0a40 	vsub.f32	s0, s0, s0
 801312a:	b003      	add	sp, #12
 801312c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013130:	4668      	mov	r0, sp
 8013132:	f000 f8cb 	bl	80132cc <__ieee754_rem_pio2f>
 8013136:	f000 0003 	and.w	r0, r0, #3
 801313a:	2801      	cmp	r0, #1
 801313c:	d00a      	beq.n	8013154 <sinf+0x54>
 801313e:	2802      	cmp	r0, #2
 8013140:	d00f      	beq.n	8013162 <sinf+0x62>
 8013142:	b9c0      	cbnz	r0, 8013176 <sinf+0x76>
 8013144:	eddd 0a01 	vldr	s1, [sp, #4]
 8013148:	ed9d 0a00 	vldr	s0, [sp]
 801314c:	2001      	movs	r0, #1
 801314e:	f000 f875 	bl	801323c <__kernel_sinf>
 8013152:	e7ea      	b.n	801312a <sinf+0x2a>
 8013154:	eddd 0a01 	vldr	s1, [sp, #4]
 8013158:	ed9d 0a00 	vldr	s0, [sp]
 801315c:	f000 f816 	bl	801318c <__kernel_cosf>
 8013160:	e7e3      	b.n	801312a <sinf+0x2a>
 8013162:	eddd 0a01 	vldr	s1, [sp, #4]
 8013166:	ed9d 0a00 	vldr	s0, [sp]
 801316a:	2001      	movs	r0, #1
 801316c:	f000 f866 	bl	801323c <__kernel_sinf>
 8013170:	eeb1 0a40 	vneg.f32	s0, s0
 8013174:	e7d9      	b.n	801312a <sinf+0x2a>
 8013176:	eddd 0a01 	vldr	s1, [sp, #4]
 801317a:	ed9d 0a00 	vldr	s0, [sp]
 801317e:	f000 f805 	bl	801318c <__kernel_cosf>
 8013182:	e7f5      	b.n	8013170 <sinf+0x70>
 8013184:	3f490fd8 	.word	0x3f490fd8
 8013188:	00000000 	.word	0x00000000

0801318c <__kernel_cosf>:
 801318c:	ee10 3a10 	vmov	r3, s0
 8013190:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013194:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013198:	eef0 6a40 	vmov.f32	s13, s0
 801319c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80131a0:	d204      	bcs.n	80131ac <__kernel_cosf+0x20>
 80131a2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80131a6:	ee17 2a90 	vmov	r2, s15
 80131aa:	b342      	cbz	r2, 80131fe <__kernel_cosf+0x72>
 80131ac:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80131b0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801321c <__kernel_cosf+0x90>
 80131b4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013220 <__kernel_cosf+0x94>
 80131b8:	4a1a      	ldr	r2, [pc, #104]	@ (8013224 <__kernel_cosf+0x98>)
 80131ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 80131be:	4293      	cmp	r3, r2
 80131c0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013228 <__kernel_cosf+0x9c>
 80131c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80131c8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801322c <__kernel_cosf+0xa0>
 80131cc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80131d0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013230 <__kernel_cosf+0xa4>
 80131d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80131d8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013234 <__kernel_cosf+0xa8>
 80131dc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80131e0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80131e4:	ee26 6a07 	vmul.f32	s12, s12, s14
 80131e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80131ec:	eee7 0a06 	vfma.f32	s1, s14, s12
 80131f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80131f4:	d804      	bhi.n	8013200 <__kernel_cosf+0x74>
 80131f6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80131fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80131fe:	4770      	bx	lr
 8013200:	4a0d      	ldr	r2, [pc, #52]	@ (8013238 <__kernel_cosf+0xac>)
 8013202:	4293      	cmp	r3, r2
 8013204:	bf9a      	itte	ls
 8013206:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801320a:	ee07 3a10 	vmovls	s14, r3
 801320e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013212:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801321a:	e7ec      	b.n	80131f6 <__kernel_cosf+0x6a>
 801321c:	ad47d74e 	.word	0xad47d74e
 8013220:	310f74f6 	.word	0x310f74f6
 8013224:	3e999999 	.word	0x3e999999
 8013228:	b493f27c 	.word	0xb493f27c
 801322c:	37d00d01 	.word	0x37d00d01
 8013230:	bab60b61 	.word	0xbab60b61
 8013234:	3d2aaaab 	.word	0x3d2aaaab
 8013238:	3f480000 	.word	0x3f480000

0801323c <__kernel_sinf>:
 801323c:	ee10 3a10 	vmov	r3, s0
 8013240:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013244:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013248:	d204      	bcs.n	8013254 <__kernel_sinf+0x18>
 801324a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801324e:	ee17 3a90 	vmov	r3, s15
 8013252:	b35b      	cbz	r3, 80132ac <__kernel_sinf+0x70>
 8013254:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013258:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80132b0 <__kernel_sinf+0x74>
 801325c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80132b4 <__kernel_sinf+0x78>
 8013260:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013264:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80132b8 <__kernel_sinf+0x7c>
 8013268:	eee6 7a07 	vfma.f32	s15, s12, s14
 801326c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80132bc <__kernel_sinf+0x80>
 8013270:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013274:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80132c0 <__kernel_sinf+0x84>
 8013278:	ee60 6a07 	vmul.f32	s13, s0, s14
 801327c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013280:	b930      	cbnz	r0, 8013290 <__kernel_sinf+0x54>
 8013282:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80132c4 <__kernel_sinf+0x88>
 8013286:	eea7 6a27 	vfma.f32	s12, s14, s15
 801328a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801328e:	4770      	bx	lr
 8013290:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013294:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013298:	eee0 7a86 	vfma.f32	s15, s1, s12
 801329c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80132a0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80132c8 <__kernel_sinf+0x8c>
 80132a4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80132a8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80132ac:	4770      	bx	lr
 80132ae:	bf00      	nop
 80132b0:	2f2ec9d3 	.word	0x2f2ec9d3
 80132b4:	b2d72f34 	.word	0xb2d72f34
 80132b8:	3638ef1b 	.word	0x3638ef1b
 80132bc:	b9500d01 	.word	0xb9500d01
 80132c0:	3c088889 	.word	0x3c088889
 80132c4:	be2aaaab 	.word	0xbe2aaaab
 80132c8:	3e2aaaab 	.word	0x3e2aaaab

080132cc <__ieee754_rem_pio2f>:
 80132cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132ce:	ee10 6a10 	vmov	r6, s0
 80132d2:	4b88      	ldr	r3, [pc, #544]	@ (80134f4 <__ieee754_rem_pio2f+0x228>)
 80132d4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80132d8:	429d      	cmp	r5, r3
 80132da:	b087      	sub	sp, #28
 80132dc:	4604      	mov	r4, r0
 80132de:	d805      	bhi.n	80132ec <__ieee754_rem_pio2f+0x20>
 80132e0:	2300      	movs	r3, #0
 80132e2:	ed80 0a00 	vstr	s0, [r0]
 80132e6:	6043      	str	r3, [r0, #4]
 80132e8:	2000      	movs	r0, #0
 80132ea:	e022      	b.n	8013332 <__ieee754_rem_pio2f+0x66>
 80132ec:	4b82      	ldr	r3, [pc, #520]	@ (80134f8 <__ieee754_rem_pio2f+0x22c>)
 80132ee:	429d      	cmp	r5, r3
 80132f0:	d83a      	bhi.n	8013368 <__ieee754_rem_pio2f+0x9c>
 80132f2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80132f6:	2e00      	cmp	r6, #0
 80132f8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80134fc <__ieee754_rem_pio2f+0x230>
 80132fc:	4a80      	ldr	r2, [pc, #512]	@ (8013500 <__ieee754_rem_pio2f+0x234>)
 80132fe:	f023 030f 	bic.w	r3, r3, #15
 8013302:	dd18      	ble.n	8013336 <__ieee754_rem_pio2f+0x6a>
 8013304:	4293      	cmp	r3, r2
 8013306:	ee70 7a47 	vsub.f32	s15, s0, s14
 801330a:	bf09      	itett	eq
 801330c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8013504 <__ieee754_rem_pio2f+0x238>
 8013310:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8013508 <__ieee754_rem_pio2f+0x23c>
 8013314:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801350c <__ieee754_rem_pio2f+0x240>
 8013318:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801331c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013320:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013324:	ed80 7a00 	vstr	s14, [r0]
 8013328:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801332c:	edc0 7a01 	vstr	s15, [r0, #4]
 8013330:	2001      	movs	r0, #1
 8013332:	b007      	add	sp, #28
 8013334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013336:	4293      	cmp	r3, r2
 8013338:	ee70 7a07 	vadd.f32	s15, s0, s14
 801333c:	bf09      	itett	eq
 801333e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8013504 <__ieee754_rem_pio2f+0x238>
 8013342:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8013508 <__ieee754_rem_pio2f+0x23c>
 8013346:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801350c <__ieee754_rem_pio2f+0x240>
 801334a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801334e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013352:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013356:	ed80 7a00 	vstr	s14, [r0]
 801335a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801335e:	edc0 7a01 	vstr	s15, [r0, #4]
 8013362:	f04f 30ff 	mov.w	r0, #4294967295
 8013366:	e7e4      	b.n	8013332 <__ieee754_rem_pio2f+0x66>
 8013368:	4b69      	ldr	r3, [pc, #420]	@ (8013510 <__ieee754_rem_pio2f+0x244>)
 801336a:	429d      	cmp	r5, r3
 801336c:	d873      	bhi.n	8013456 <__ieee754_rem_pio2f+0x18a>
 801336e:	f000 f8dd 	bl	801352c <fabsf>
 8013372:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8013514 <__ieee754_rem_pio2f+0x248>
 8013376:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801337a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801337e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013386:	ee17 0a90 	vmov	r0, s15
 801338a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80134fc <__ieee754_rem_pio2f+0x230>
 801338e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013392:	281f      	cmp	r0, #31
 8013394:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013508 <__ieee754_rem_pio2f+0x23c>
 8013398:	ee67 7a27 	vmul.f32	s15, s14, s15
 801339c:	eeb1 6a47 	vneg.f32	s12, s14
 80133a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80133a4:	ee16 1a90 	vmov	r1, s13
 80133a8:	dc09      	bgt.n	80133be <__ieee754_rem_pio2f+0xf2>
 80133aa:	4a5b      	ldr	r2, [pc, #364]	@ (8013518 <__ieee754_rem_pio2f+0x24c>)
 80133ac:	1e47      	subs	r7, r0, #1
 80133ae:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80133b2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80133b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80133ba:	4293      	cmp	r3, r2
 80133bc:	d107      	bne.n	80133ce <__ieee754_rem_pio2f+0x102>
 80133be:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80133c2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80133c6:	2a08      	cmp	r2, #8
 80133c8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80133cc:	dc14      	bgt.n	80133f8 <__ieee754_rem_pio2f+0x12c>
 80133ce:	6021      	str	r1, [r4, #0]
 80133d0:	ed94 7a00 	vldr	s14, [r4]
 80133d4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80133d8:	2e00      	cmp	r6, #0
 80133da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80133de:	ed84 0a01 	vstr	s0, [r4, #4]
 80133e2:	daa6      	bge.n	8013332 <__ieee754_rem_pio2f+0x66>
 80133e4:	eeb1 7a47 	vneg.f32	s14, s14
 80133e8:	eeb1 0a40 	vneg.f32	s0, s0
 80133ec:	ed84 7a00 	vstr	s14, [r4]
 80133f0:	ed84 0a01 	vstr	s0, [r4, #4]
 80133f4:	4240      	negs	r0, r0
 80133f6:	e79c      	b.n	8013332 <__ieee754_rem_pio2f+0x66>
 80133f8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8013504 <__ieee754_rem_pio2f+0x238>
 80133fc:	eef0 6a40 	vmov.f32	s13, s0
 8013400:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013404:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013408:	eee6 7a25 	vfma.f32	s15, s12, s11
 801340c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801350c <__ieee754_rem_pio2f+0x240>
 8013410:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013414:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013418:	ee15 2a90 	vmov	r2, s11
 801341c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013420:	1a5b      	subs	r3, r3, r1
 8013422:	2b19      	cmp	r3, #25
 8013424:	dc04      	bgt.n	8013430 <__ieee754_rem_pio2f+0x164>
 8013426:	edc4 5a00 	vstr	s11, [r4]
 801342a:	eeb0 0a66 	vmov.f32	s0, s13
 801342e:	e7cf      	b.n	80133d0 <__ieee754_rem_pio2f+0x104>
 8013430:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801351c <__ieee754_rem_pio2f+0x250>
 8013434:	eeb0 0a66 	vmov.f32	s0, s13
 8013438:	eea6 0a25 	vfma.f32	s0, s12, s11
 801343c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013440:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8013520 <__ieee754_rem_pio2f+0x254>
 8013444:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013448:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801344c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013450:	ed84 7a00 	vstr	s14, [r4]
 8013454:	e7bc      	b.n	80133d0 <__ieee754_rem_pio2f+0x104>
 8013456:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801345a:	d306      	bcc.n	801346a <__ieee754_rem_pio2f+0x19e>
 801345c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013460:	edc0 7a01 	vstr	s15, [r0, #4]
 8013464:	edc0 7a00 	vstr	s15, [r0]
 8013468:	e73e      	b.n	80132e8 <__ieee754_rem_pio2f+0x1c>
 801346a:	15ea      	asrs	r2, r5, #23
 801346c:	3a86      	subs	r2, #134	@ 0x86
 801346e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013472:	ee07 3a90 	vmov	s15, r3
 8013476:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801347a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8013524 <__ieee754_rem_pio2f+0x258>
 801347e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013486:	ed8d 7a03 	vstr	s14, [sp, #12]
 801348a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801348e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013492:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013496:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801349a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801349e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80134a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80134a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134aa:	edcd 7a05 	vstr	s15, [sp, #20]
 80134ae:	d11e      	bne.n	80134ee <__ieee754_rem_pio2f+0x222>
 80134b0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80134b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134b8:	bf0c      	ite	eq
 80134ba:	2301      	moveq	r3, #1
 80134bc:	2302      	movne	r3, #2
 80134be:	491a      	ldr	r1, [pc, #104]	@ (8013528 <__ieee754_rem_pio2f+0x25c>)
 80134c0:	9101      	str	r1, [sp, #4]
 80134c2:	2102      	movs	r1, #2
 80134c4:	9100      	str	r1, [sp, #0]
 80134c6:	a803      	add	r0, sp, #12
 80134c8:	4621      	mov	r1, r4
 80134ca:	f000 f837 	bl	801353c <__kernel_rem_pio2f>
 80134ce:	2e00      	cmp	r6, #0
 80134d0:	f6bf af2f 	bge.w	8013332 <__ieee754_rem_pio2f+0x66>
 80134d4:	edd4 7a00 	vldr	s15, [r4]
 80134d8:	eef1 7a67 	vneg.f32	s15, s15
 80134dc:	edc4 7a00 	vstr	s15, [r4]
 80134e0:	edd4 7a01 	vldr	s15, [r4, #4]
 80134e4:	eef1 7a67 	vneg.f32	s15, s15
 80134e8:	edc4 7a01 	vstr	s15, [r4, #4]
 80134ec:	e782      	b.n	80133f4 <__ieee754_rem_pio2f+0x128>
 80134ee:	2303      	movs	r3, #3
 80134f0:	e7e5      	b.n	80134be <__ieee754_rem_pio2f+0x1f2>
 80134f2:	bf00      	nop
 80134f4:	3f490fd8 	.word	0x3f490fd8
 80134f8:	4016cbe3 	.word	0x4016cbe3
 80134fc:	3fc90f80 	.word	0x3fc90f80
 8013500:	3fc90fd0 	.word	0x3fc90fd0
 8013504:	37354400 	.word	0x37354400
 8013508:	37354443 	.word	0x37354443
 801350c:	2e85a308 	.word	0x2e85a308
 8013510:	43490f80 	.word	0x43490f80
 8013514:	3f22f984 	.word	0x3f22f984
 8013518:	0801423c 	.word	0x0801423c
 801351c:	2e85a300 	.word	0x2e85a300
 8013520:	248d3132 	.word	0x248d3132
 8013524:	43800000 	.word	0x43800000
 8013528:	080142bc 	.word	0x080142bc

0801352c <fabsf>:
 801352c:	ee10 3a10 	vmov	r3, s0
 8013530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013534:	ee00 3a10 	vmov	s0, r3
 8013538:	4770      	bx	lr
	...

0801353c <__kernel_rem_pio2f>:
 801353c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013540:	ed2d 8b04 	vpush	{d8-d9}
 8013544:	b0d9      	sub	sp, #356	@ 0x164
 8013546:	4690      	mov	r8, r2
 8013548:	9001      	str	r0, [sp, #4]
 801354a:	4ab9      	ldr	r2, [pc, #740]	@ (8013830 <__kernel_rem_pio2f+0x2f4>)
 801354c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801354e:	f118 0f04 	cmn.w	r8, #4
 8013552:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8013556:	460f      	mov	r7, r1
 8013558:	f103 3bff 	add.w	fp, r3, #4294967295
 801355c:	db27      	blt.n	80135ae <__kernel_rem_pio2f+0x72>
 801355e:	f1b8 0203 	subs.w	r2, r8, #3
 8013562:	bf48      	it	mi
 8013564:	f108 0204 	addmi.w	r2, r8, #4
 8013568:	10d2      	asrs	r2, r2, #3
 801356a:	1c55      	adds	r5, r2, #1
 801356c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801356e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8013840 <__kernel_rem_pio2f+0x304>
 8013572:	00e8      	lsls	r0, r5, #3
 8013574:	eba2 060b 	sub.w	r6, r2, fp
 8013578:	9002      	str	r0, [sp, #8]
 801357a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801357e:	eb0a 0c0b 	add.w	ip, sl, fp
 8013582:	ac1c      	add	r4, sp, #112	@ 0x70
 8013584:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8013588:	2000      	movs	r0, #0
 801358a:	4560      	cmp	r0, ip
 801358c:	dd11      	ble.n	80135b2 <__kernel_rem_pio2f+0x76>
 801358e:	a91c      	add	r1, sp, #112	@ 0x70
 8013590:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8013594:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8013598:	f04f 0c00 	mov.w	ip, #0
 801359c:	45d4      	cmp	ip, sl
 801359e:	dc27      	bgt.n	80135f0 <__kernel_rem_pio2f+0xb4>
 80135a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80135a4:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8013840 <__kernel_rem_pio2f+0x304>
 80135a8:	4606      	mov	r6, r0
 80135aa:	2400      	movs	r4, #0
 80135ac:	e016      	b.n	80135dc <__kernel_rem_pio2f+0xa0>
 80135ae:	2200      	movs	r2, #0
 80135b0:	e7db      	b.n	801356a <__kernel_rem_pio2f+0x2e>
 80135b2:	42c6      	cmn	r6, r0
 80135b4:	bf5d      	ittte	pl
 80135b6:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80135ba:	ee07 1a90 	vmovpl	s15, r1
 80135be:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80135c2:	eef0 7a47 	vmovmi.f32	s15, s14
 80135c6:	ece4 7a01 	vstmia	r4!, {s15}
 80135ca:	3001      	adds	r0, #1
 80135cc:	e7dd      	b.n	801358a <__kernel_rem_pio2f+0x4e>
 80135ce:	ecfe 6a01 	vldmia	lr!, {s13}
 80135d2:	ed96 7a00 	vldr	s14, [r6]
 80135d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80135da:	3401      	adds	r4, #1
 80135dc:	455c      	cmp	r4, fp
 80135de:	f1a6 0604 	sub.w	r6, r6, #4
 80135e2:	ddf4      	ble.n	80135ce <__kernel_rem_pio2f+0x92>
 80135e4:	ece9 7a01 	vstmia	r9!, {s15}
 80135e8:	f10c 0c01 	add.w	ip, ip, #1
 80135ec:	3004      	adds	r0, #4
 80135ee:	e7d5      	b.n	801359c <__kernel_rem_pio2f+0x60>
 80135f0:	a908      	add	r1, sp, #32
 80135f2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80135f6:	9104      	str	r1, [sp, #16]
 80135f8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80135fa:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801383c <__kernel_rem_pio2f+0x300>
 80135fe:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8013838 <__kernel_rem_pio2f+0x2fc>
 8013602:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013606:	9203      	str	r2, [sp, #12]
 8013608:	4654      	mov	r4, sl
 801360a:	00a2      	lsls	r2, r4, #2
 801360c:	9205      	str	r2, [sp, #20]
 801360e:	aa58      	add	r2, sp, #352	@ 0x160
 8013610:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013614:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013618:	a944      	add	r1, sp, #272	@ 0x110
 801361a:	aa08      	add	r2, sp, #32
 801361c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013620:	4694      	mov	ip, r2
 8013622:	4626      	mov	r6, r4
 8013624:	2e00      	cmp	r6, #0
 8013626:	f1a0 0004 	sub.w	r0, r0, #4
 801362a:	dc4c      	bgt.n	80136c6 <__kernel_rem_pio2f+0x18a>
 801362c:	4628      	mov	r0, r5
 801362e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013632:	f000 f9f5 	bl	8013a20 <scalbnf>
 8013636:	eeb0 8a40 	vmov.f32	s16, s0
 801363a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801363e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013642:	f000 fa53 	bl	8013aec <floorf>
 8013646:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801364a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801364e:	2d00      	cmp	r5, #0
 8013650:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013654:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013658:	ee17 9a90 	vmov	r9, s15
 801365c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013660:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013664:	dd41      	ble.n	80136ea <__kernel_rem_pio2f+0x1ae>
 8013666:	f104 3cff 	add.w	ip, r4, #4294967295
 801366a:	a908      	add	r1, sp, #32
 801366c:	f1c5 0e08 	rsb	lr, r5, #8
 8013670:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013674:	fa46 f00e 	asr.w	r0, r6, lr
 8013678:	4481      	add	r9, r0
 801367a:	fa00 f00e 	lsl.w	r0, r0, lr
 801367e:	1a36      	subs	r6, r6, r0
 8013680:	f1c5 0007 	rsb	r0, r5, #7
 8013684:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8013688:	4106      	asrs	r6, r0
 801368a:	2e00      	cmp	r6, #0
 801368c:	dd3c      	ble.n	8013708 <__kernel_rem_pio2f+0x1cc>
 801368e:	f04f 0e00 	mov.w	lr, #0
 8013692:	f109 0901 	add.w	r9, r9, #1
 8013696:	4670      	mov	r0, lr
 8013698:	4574      	cmp	r4, lr
 801369a:	dc68      	bgt.n	801376e <__kernel_rem_pio2f+0x232>
 801369c:	2d00      	cmp	r5, #0
 801369e:	dd03      	ble.n	80136a8 <__kernel_rem_pio2f+0x16c>
 80136a0:	2d01      	cmp	r5, #1
 80136a2:	d074      	beq.n	801378e <__kernel_rem_pio2f+0x252>
 80136a4:	2d02      	cmp	r5, #2
 80136a6:	d07d      	beq.n	80137a4 <__kernel_rem_pio2f+0x268>
 80136a8:	2e02      	cmp	r6, #2
 80136aa:	d12d      	bne.n	8013708 <__kernel_rem_pio2f+0x1cc>
 80136ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80136b0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80136b4:	b340      	cbz	r0, 8013708 <__kernel_rem_pio2f+0x1cc>
 80136b6:	4628      	mov	r0, r5
 80136b8:	9306      	str	r3, [sp, #24]
 80136ba:	f000 f9b1 	bl	8013a20 <scalbnf>
 80136be:	9b06      	ldr	r3, [sp, #24]
 80136c0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80136c4:	e020      	b.n	8013708 <__kernel_rem_pio2f+0x1cc>
 80136c6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80136ca:	3e01      	subs	r6, #1
 80136cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136d4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80136d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80136dc:	ecac 0a01 	vstmia	ip!, {s0}
 80136e0:	ed90 0a00 	vldr	s0, [r0]
 80136e4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80136e8:	e79c      	b.n	8013624 <__kernel_rem_pio2f+0xe8>
 80136ea:	d105      	bne.n	80136f8 <__kernel_rem_pio2f+0x1bc>
 80136ec:	1e60      	subs	r0, r4, #1
 80136ee:	a908      	add	r1, sp, #32
 80136f0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80136f4:	11f6      	asrs	r6, r6, #7
 80136f6:	e7c8      	b.n	801368a <__kernel_rem_pio2f+0x14e>
 80136f8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80136fc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013704:	da31      	bge.n	801376a <__kernel_rem_pio2f+0x22e>
 8013706:	2600      	movs	r6, #0
 8013708:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013710:	f040 8098 	bne.w	8013844 <__kernel_rem_pio2f+0x308>
 8013714:	1e60      	subs	r0, r4, #1
 8013716:	2200      	movs	r2, #0
 8013718:	4550      	cmp	r0, sl
 801371a:	da4b      	bge.n	80137b4 <__kernel_rem_pio2f+0x278>
 801371c:	2a00      	cmp	r2, #0
 801371e:	d065      	beq.n	80137ec <__kernel_rem_pio2f+0x2b0>
 8013720:	3c01      	subs	r4, #1
 8013722:	ab08      	add	r3, sp, #32
 8013724:	3d08      	subs	r5, #8
 8013726:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d0f8      	beq.n	8013720 <__kernel_rem_pio2f+0x1e4>
 801372e:	4628      	mov	r0, r5
 8013730:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013734:	f000 f974 	bl	8013a20 <scalbnf>
 8013738:	1c63      	adds	r3, r4, #1
 801373a:	aa44      	add	r2, sp, #272	@ 0x110
 801373c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801383c <__kernel_rem_pio2f+0x300>
 8013740:	0099      	lsls	r1, r3, #2
 8013742:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013746:	4623      	mov	r3, r4
 8013748:	2b00      	cmp	r3, #0
 801374a:	f280 80a9 	bge.w	80138a0 <__kernel_rem_pio2f+0x364>
 801374e:	4623      	mov	r3, r4
 8013750:	2b00      	cmp	r3, #0
 8013752:	f2c0 80c7 	blt.w	80138e4 <__kernel_rem_pio2f+0x3a8>
 8013756:	aa44      	add	r2, sp, #272	@ 0x110
 8013758:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801375c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8013834 <__kernel_rem_pio2f+0x2f8>
 8013760:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8013840 <__kernel_rem_pio2f+0x304>
 8013764:	2000      	movs	r0, #0
 8013766:	1ae2      	subs	r2, r4, r3
 8013768:	e0b1      	b.n	80138ce <__kernel_rem_pio2f+0x392>
 801376a:	2602      	movs	r6, #2
 801376c:	e78f      	b.n	801368e <__kernel_rem_pio2f+0x152>
 801376e:	f852 1b04 	ldr.w	r1, [r2], #4
 8013772:	b948      	cbnz	r0, 8013788 <__kernel_rem_pio2f+0x24c>
 8013774:	b121      	cbz	r1, 8013780 <__kernel_rem_pio2f+0x244>
 8013776:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801377a:	f842 1c04 	str.w	r1, [r2, #-4]
 801377e:	2101      	movs	r1, #1
 8013780:	f10e 0e01 	add.w	lr, lr, #1
 8013784:	4608      	mov	r0, r1
 8013786:	e787      	b.n	8013698 <__kernel_rem_pio2f+0x15c>
 8013788:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801378c:	e7f5      	b.n	801377a <__kernel_rem_pio2f+0x23e>
 801378e:	f104 3cff 	add.w	ip, r4, #4294967295
 8013792:	aa08      	add	r2, sp, #32
 8013794:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013798:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801379c:	a908      	add	r1, sp, #32
 801379e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80137a2:	e781      	b.n	80136a8 <__kernel_rem_pio2f+0x16c>
 80137a4:	f104 3cff 	add.w	ip, r4, #4294967295
 80137a8:	aa08      	add	r2, sp, #32
 80137aa:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80137ae:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80137b2:	e7f3      	b.n	801379c <__kernel_rem_pio2f+0x260>
 80137b4:	a908      	add	r1, sp, #32
 80137b6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80137ba:	3801      	subs	r0, #1
 80137bc:	430a      	orrs	r2, r1
 80137be:	e7ab      	b.n	8013718 <__kernel_rem_pio2f+0x1dc>
 80137c0:	3201      	adds	r2, #1
 80137c2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80137c6:	2e00      	cmp	r6, #0
 80137c8:	d0fa      	beq.n	80137c0 <__kernel_rem_pio2f+0x284>
 80137ca:	9905      	ldr	r1, [sp, #20]
 80137cc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80137d0:	eb0d 0001 	add.w	r0, sp, r1
 80137d4:	18e6      	adds	r6, r4, r3
 80137d6:	a91c      	add	r1, sp, #112	@ 0x70
 80137d8:	f104 0c01 	add.w	ip, r4, #1
 80137dc:	384c      	subs	r0, #76	@ 0x4c
 80137de:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80137e2:	4422      	add	r2, r4
 80137e4:	4562      	cmp	r2, ip
 80137e6:	da04      	bge.n	80137f2 <__kernel_rem_pio2f+0x2b6>
 80137e8:	4614      	mov	r4, r2
 80137ea:	e70e      	b.n	801360a <__kernel_rem_pio2f+0xce>
 80137ec:	9804      	ldr	r0, [sp, #16]
 80137ee:	2201      	movs	r2, #1
 80137f0:	e7e7      	b.n	80137c2 <__kernel_rem_pio2f+0x286>
 80137f2:	9903      	ldr	r1, [sp, #12]
 80137f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80137f8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80137fc:	9105      	str	r1, [sp, #20]
 80137fe:	ee07 1a90 	vmov	s15, r1
 8013802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013806:	2400      	movs	r4, #0
 8013808:	ece6 7a01 	vstmia	r6!, {s15}
 801380c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8013840 <__kernel_rem_pio2f+0x304>
 8013810:	46b1      	mov	r9, r6
 8013812:	455c      	cmp	r4, fp
 8013814:	dd04      	ble.n	8013820 <__kernel_rem_pio2f+0x2e4>
 8013816:	ece0 7a01 	vstmia	r0!, {s15}
 801381a:	f10c 0c01 	add.w	ip, ip, #1
 801381e:	e7e1      	b.n	80137e4 <__kernel_rem_pio2f+0x2a8>
 8013820:	ecfe 6a01 	vldmia	lr!, {s13}
 8013824:	ed39 7a01 	vldmdb	r9!, {s14}
 8013828:	3401      	adds	r4, #1
 801382a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801382e:	e7f0      	b.n	8013812 <__kernel_rem_pio2f+0x2d6>
 8013830:	08014600 	.word	0x08014600
 8013834:	080145d4 	.word	0x080145d4
 8013838:	43800000 	.word	0x43800000
 801383c:	3b800000 	.word	0x3b800000
 8013840:	00000000 	.word	0x00000000
 8013844:	9b02      	ldr	r3, [sp, #8]
 8013846:	eeb0 0a48 	vmov.f32	s0, s16
 801384a:	eba3 0008 	sub.w	r0, r3, r8
 801384e:	f000 f8e7 	bl	8013a20 <scalbnf>
 8013852:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8013838 <__kernel_rem_pio2f+0x2fc>
 8013856:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801385a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801385e:	db19      	blt.n	8013894 <__kernel_rem_pio2f+0x358>
 8013860:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801383c <__kernel_rem_pio2f+0x300>
 8013864:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013868:	aa08      	add	r2, sp, #32
 801386a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801386e:	3508      	adds	r5, #8
 8013870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013874:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801387c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013880:	ee10 3a10 	vmov	r3, s0
 8013884:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013888:	ee17 3a90 	vmov	r3, s15
 801388c:	3401      	adds	r4, #1
 801388e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013892:	e74c      	b.n	801372e <__kernel_rem_pio2f+0x1f2>
 8013894:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013898:	aa08      	add	r2, sp, #32
 801389a:	ee10 3a10 	vmov	r3, s0
 801389e:	e7f6      	b.n	801388e <__kernel_rem_pio2f+0x352>
 80138a0:	a808      	add	r0, sp, #32
 80138a2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80138a6:	9001      	str	r0, [sp, #4]
 80138a8:	ee07 0a90 	vmov	s15, r0
 80138ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138b0:	3b01      	subs	r3, #1
 80138b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80138b6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80138ba:	ed62 7a01 	vstmdb	r2!, {s15}
 80138be:	e743      	b.n	8013748 <__kernel_rem_pio2f+0x20c>
 80138c0:	ecfc 6a01 	vldmia	ip!, {s13}
 80138c4:	ecb5 7a01 	vldmia	r5!, {s14}
 80138c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80138cc:	3001      	adds	r0, #1
 80138ce:	4550      	cmp	r0, sl
 80138d0:	dc01      	bgt.n	80138d6 <__kernel_rem_pio2f+0x39a>
 80138d2:	4282      	cmp	r2, r0
 80138d4:	daf4      	bge.n	80138c0 <__kernel_rem_pio2f+0x384>
 80138d6:	a858      	add	r0, sp, #352	@ 0x160
 80138d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80138dc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80138e0:	3b01      	subs	r3, #1
 80138e2:	e735      	b.n	8013750 <__kernel_rem_pio2f+0x214>
 80138e4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80138e6:	2b02      	cmp	r3, #2
 80138e8:	dc09      	bgt.n	80138fe <__kernel_rem_pio2f+0x3c2>
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	dc2b      	bgt.n	8013946 <__kernel_rem_pio2f+0x40a>
 80138ee:	d044      	beq.n	801397a <__kernel_rem_pio2f+0x43e>
 80138f0:	f009 0007 	and.w	r0, r9, #7
 80138f4:	b059      	add	sp, #356	@ 0x164
 80138f6:	ecbd 8b04 	vpop	{d8-d9}
 80138fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138fe:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013900:	2b03      	cmp	r3, #3
 8013902:	d1f5      	bne.n	80138f0 <__kernel_rem_pio2f+0x3b4>
 8013904:	aa30      	add	r2, sp, #192	@ 0xc0
 8013906:	1f0b      	subs	r3, r1, #4
 8013908:	4413      	add	r3, r2
 801390a:	461a      	mov	r2, r3
 801390c:	4620      	mov	r0, r4
 801390e:	2800      	cmp	r0, #0
 8013910:	f1a2 0204 	sub.w	r2, r2, #4
 8013914:	dc52      	bgt.n	80139bc <__kernel_rem_pio2f+0x480>
 8013916:	4622      	mov	r2, r4
 8013918:	2a01      	cmp	r2, #1
 801391a:	f1a3 0304 	sub.w	r3, r3, #4
 801391e:	dc5d      	bgt.n	80139dc <__kernel_rem_pio2f+0x4a0>
 8013920:	ab30      	add	r3, sp, #192	@ 0xc0
 8013922:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8013840 <__kernel_rem_pio2f+0x304>
 8013926:	440b      	add	r3, r1
 8013928:	2c01      	cmp	r4, #1
 801392a:	dc67      	bgt.n	80139fc <__kernel_rem_pio2f+0x4c0>
 801392c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013930:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8013934:	2e00      	cmp	r6, #0
 8013936:	d167      	bne.n	8013a08 <__kernel_rem_pio2f+0x4cc>
 8013938:	edc7 6a00 	vstr	s13, [r7]
 801393c:	ed87 7a01 	vstr	s14, [r7, #4]
 8013940:	edc7 7a02 	vstr	s15, [r7, #8]
 8013944:	e7d4      	b.n	80138f0 <__kernel_rem_pio2f+0x3b4>
 8013946:	ab30      	add	r3, sp, #192	@ 0xc0
 8013948:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8013840 <__kernel_rem_pio2f+0x304>
 801394c:	440b      	add	r3, r1
 801394e:	4622      	mov	r2, r4
 8013950:	2a00      	cmp	r2, #0
 8013952:	da24      	bge.n	801399e <__kernel_rem_pio2f+0x462>
 8013954:	b34e      	cbz	r6, 80139aa <__kernel_rem_pio2f+0x46e>
 8013956:	eef1 7a47 	vneg.f32	s15, s14
 801395a:	edc7 7a00 	vstr	s15, [r7]
 801395e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8013962:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013966:	aa31      	add	r2, sp, #196	@ 0xc4
 8013968:	2301      	movs	r3, #1
 801396a:	429c      	cmp	r4, r3
 801396c:	da20      	bge.n	80139b0 <__kernel_rem_pio2f+0x474>
 801396e:	b10e      	cbz	r6, 8013974 <__kernel_rem_pio2f+0x438>
 8013970:	eef1 7a67 	vneg.f32	s15, s15
 8013974:	edc7 7a01 	vstr	s15, [r7, #4]
 8013978:	e7ba      	b.n	80138f0 <__kernel_rem_pio2f+0x3b4>
 801397a:	ab30      	add	r3, sp, #192	@ 0xc0
 801397c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8013840 <__kernel_rem_pio2f+0x304>
 8013980:	440b      	add	r3, r1
 8013982:	2c00      	cmp	r4, #0
 8013984:	da05      	bge.n	8013992 <__kernel_rem_pio2f+0x456>
 8013986:	b10e      	cbz	r6, 801398c <__kernel_rem_pio2f+0x450>
 8013988:	eef1 7a67 	vneg.f32	s15, s15
 801398c:	edc7 7a00 	vstr	s15, [r7]
 8013990:	e7ae      	b.n	80138f0 <__kernel_rem_pio2f+0x3b4>
 8013992:	ed33 7a01 	vldmdb	r3!, {s14}
 8013996:	3c01      	subs	r4, #1
 8013998:	ee77 7a87 	vadd.f32	s15, s15, s14
 801399c:	e7f1      	b.n	8013982 <__kernel_rem_pio2f+0x446>
 801399e:	ed73 7a01 	vldmdb	r3!, {s15}
 80139a2:	3a01      	subs	r2, #1
 80139a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80139a8:	e7d2      	b.n	8013950 <__kernel_rem_pio2f+0x414>
 80139aa:	eef0 7a47 	vmov.f32	s15, s14
 80139ae:	e7d4      	b.n	801395a <__kernel_rem_pio2f+0x41e>
 80139b0:	ecb2 7a01 	vldmia	r2!, {s14}
 80139b4:	3301      	adds	r3, #1
 80139b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80139ba:	e7d6      	b.n	801396a <__kernel_rem_pio2f+0x42e>
 80139bc:	edd2 7a00 	vldr	s15, [r2]
 80139c0:	edd2 6a01 	vldr	s13, [r2, #4]
 80139c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80139c8:	3801      	subs	r0, #1
 80139ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139ce:	ed82 7a00 	vstr	s14, [r2]
 80139d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139d6:	edc2 7a01 	vstr	s15, [r2, #4]
 80139da:	e798      	b.n	801390e <__kernel_rem_pio2f+0x3d2>
 80139dc:	edd3 7a00 	vldr	s15, [r3]
 80139e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80139e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80139e8:	3a01      	subs	r2, #1
 80139ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139ee:	ed83 7a00 	vstr	s14, [r3]
 80139f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139f6:	edc3 7a01 	vstr	s15, [r3, #4]
 80139fa:	e78d      	b.n	8013918 <__kernel_rem_pio2f+0x3dc>
 80139fc:	ed33 7a01 	vldmdb	r3!, {s14}
 8013a00:	3c01      	subs	r4, #1
 8013a02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a06:	e78f      	b.n	8013928 <__kernel_rem_pio2f+0x3ec>
 8013a08:	eef1 6a66 	vneg.f32	s13, s13
 8013a0c:	eeb1 7a47 	vneg.f32	s14, s14
 8013a10:	edc7 6a00 	vstr	s13, [r7]
 8013a14:	ed87 7a01 	vstr	s14, [r7, #4]
 8013a18:	eef1 7a67 	vneg.f32	s15, s15
 8013a1c:	e790      	b.n	8013940 <__kernel_rem_pio2f+0x404>
 8013a1e:	bf00      	nop

08013a20 <scalbnf>:
 8013a20:	ee10 3a10 	vmov	r3, s0
 8013a24:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8013a28:	d02b      	beq.n	8013a82 <scalbnf+0x62>
 8013a2a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013a2e:	d302      	bcc.n	8013a36 <scalbnf+0x16>
 8013a30:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013a34:	4770      	bx	lr
 8013a36:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8013a3a:	d123      	bne.n	8013a84 <scalbnf+0x64>
 8013a3c:	4b24      	ldr	r3, [pc, #144]	@ (8013ad0 <scalbnf+0xb0>)
 8013a3e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013ad4 <scalbnf+0xb4>
 8013a42:	4298      	cmp	r0, r3
 8013a44:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013a48:	db17      	blt.n	8013a7a <scalbnf+0x5a>
 8013a4a:	ee10 3a10 	vmov	r3, s0
 8013a4e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013a52:	3a19      	subs	r2, #25
 8013a54:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013a58:	4288      	cmp	r0, r1
 8013a5a:	dd15      	ble.n	8013a88 <scalbnf+0x68>
 8013a5c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8013ad8 <scalbnf+0xb8>
 8013a60:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013adc <scalbnf+0xbc>
 8013a64:	ee10 3a10 	vmov	r3, s0
 8013a68:	eeb0 7a67 	vmov.f32	s14, s15
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	bfb8      	it	lt
 8013a70:	eef0 7a66 	vmovlt.f32	s15, s13
 8013a74:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013a78:	4770      	bx	lr
 8013a7a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013ae0 <scalbnf+0xc0>
 8013a7e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013a82:	4770      	bx	lr
 8013a84:	0dd2      	lsrs	r2, r2, #23
 8013a86:	e7e5      	b.n	8013a54 <scalbnf+0x34>
 8013a88:	4410      	add	r0, r2
 8013a8a:	28fe      	cmp	r0, #254	@ 0xfe
 8013a8c:	dce6      	bgt.n	8013a5c <scalbnf+0x3c>
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	dd06      	ble.n	8013aa0 <scalbnf+0x80>
 8013a92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013a96:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013a9a:	ee00 3a10 	vmov	s0, r3
 8013a9e:	4770      	bx	lr
 8013aa0:	f110 0f16 	cmn.w	r0, #22
 8013aa4:	da09      	bge.n	8013aba <scalbnf+0x9a>
 8013aa6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8013ae0 <scalbnf+0xc0>
 8013aaa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013ae4 <scalbnf+0xc4>
 8013aae:	ee10 3a10 	vmov	r3, s0
 8013ab2:	eeb0 7a67 	vmov.f32	s14, s15
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	e7d9      	b.n	8013a6e <scalbnf+0x4e>
 8013aba:	3019      	adds	r0, #25
 8013abc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013ac0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013ac4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8013ae8 <scalbnf+0xc8>
 8013ac8:	ee07 3a90 	vmov	s15, r3
 8013acc:	e7d7      	b.n	8013a7e <scalbnf+0x5e>
 8013ace:	bf00      	nop
 8013ad0:	ffff3cb0 	.word	0xffff3cb0
 8013ad4:	4c000000 	.word	0x4c000000
 8013ad8:	7149f2ca 	.word	0x7149f2ca
 8013adc:	f149f2ca 	.word	0xf149f2ca
 8013ae0:	0da24260 	.word	0x0da24260
 8013ae4:	8da24260 	.word	0x8da24260
 8013ae8:	33000000 	.word	0x33000000

08013aec <floorf>:
 8013aec:	ee10 3a10 	vmov	r3, s0
 8013af0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013af4:	3a7f      	subs	r2, #127	@ 0x7f
 8013af6:	2a16      	cmp	r2, #22
 8013af8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013afc:	dc2b      	bgt.n	8013b56 <floorf+0x6a>
 8013afe:	2a00      	cmp	r2, #0
 8013b00:	da12      	bge.n	8013b28 <floorf+0x3c>
 8013b02:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013b68 <floorf+0x7c>
 8013b06:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013b0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b12:	dd06      	ble.n	8013b22 <floorf+0x36>
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	da24      	bge.n	8013b62 <floorf+0x76>
 8013b18:	2900      	cmp	r1, #0
 8013b1a:	4b14      	ldr	r3, [pc, #80]	@ (8013b6c <floorf+0x80>)
 8013b1c:	bf08      	it	eq
 8013b1e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013b22:	ee00 3a10 	vmov	s0, r3
 8013b26:	4770      	bx	lr
 8013b28:	4911      	ldr	r1, [pc, #68]	@ (8013b70 <floorf+0x84>)
 8013b2a:	4111      	asrs	r1, r2
 8013b2c:	420b      	tst	r3, r1
 8013b2e:	d0fa      	beq.n	8013b26 <floorf+0x3a>
 8013b30:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8013b68 <floorf+0x7c>
 8013b34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013b38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b40:	ddef      	ble.n	8013b22 <floorf+0x36>
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	bfbe      	ittt	lt
 8013b46:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8013b4a:	fa40 f202 	asrlt.w	r2, r0, r2
 8013b4e:	189b      	addlt	r3, r3, r2
 8013b50:	ea23 0301 	bic.w	r3, r3, r1
 8013b54:	e7e5      	b.n	8013b22 <floorf+0x36>
 8013b56:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013b5a:	d3e4      	bcc.n	8013b26 <floorf+0x3a>
 8013b5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013b60:	4770      	bx	lr
 8013b62:	2300      	movs	r3, #0
 8013b64:	e7dd      	b.n	8013b22 <floorf+0x36>
 8013b66:	bf00      	nop
 8013b68:	7149f2ca 	.word	0x7149f2ca
 8013b6c:	bf800000 	.word	0xbf800000
 8013b70:	007fffff 	.word	0x007fffff

08013b74 <_init>:
 8013b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b76:	bf00      	nop
 8013b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b7a:	bc08      	pop	{r3}
 8013b7c:	469e      	mov	lr, r3
 8013b7e:	4770      	bx	lr

08013b80 <_fini>:
 8013b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b82:	bf00      	nop
 8013b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b86:	bc08      	pop	{r3}
 8013b88:	469e      	mov	lr, r3
 8013b8a:	4770      	bx	lr
